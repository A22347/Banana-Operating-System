
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a3 f7 00 00       	call   c000f7c3 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 6f 02 00       	call   c0026f98 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f4 7a 02 c0       	mov    ebx,0xc0027af4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 00 7b 02 c0    	cmp    ebx,0xc0027b00
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 be 02 c0       	mov    eax,0xc002be38
c0000049:	3d 38 be 02 c0       	cmp    eax,0xc002be38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 be 02 c0       	push   0xc002be38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 be 02 c0       	mov    eax,0xc002be38
c0000075:	2d 38 be 02 c0       	sub    eax,0xc002be38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 be 02 c0       	push   0xc002be38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 c4 02 c0 00 	cmp    BYTE PTR ds:0xc002c468,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 08 7b 02 c0       	mov    ebx,0xc0027b08
c00000bb:	81 eb 04 7b 02 c0    	sub    ebx,0xc0027b04
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 04 7b 02 c0       	mov    esi,0xc0027b04
c00000ca:	a1 6c c4 02 c0       	mov    eax,ds:0xc002c46c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c c4 02 c0       	mov    ds:0xc002c46c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c c4 02 c0       	mov    eax,ds:0xc002c46c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 be 02 c0       	push   0xc002be38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 c4 02 c0 01 	mov    BYTE PTR ds:0xc002c468,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 c4 02 c0       	push   0xc002c470
c000012c:	68 38 be 02 c0       	push   0xc002be38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 f0 c4 01 00       	call   c001c840 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 47 21 01 00       	call   c00124af <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 ce c4 01 00       	call   c001c840 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 1c c9 01 00       	call   c001ccad <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 ca ce 01 00       	call   c001d264 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 b0 c8 02 c0 	lgdtd  ds:0xc002c8b0
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 d9 3d 01 00       	call   c0014367 <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d 88 c4 02 c0    	mov    ebx,DWORD PTR ds:0xc002c488
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 88 c4 02 c0       	mov    ds:0xc002c488,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 88 c4 02 c0       	mov    eax,ds:0xc002c488
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 88 c4 02 c0    	mov    DWORD PTR ds:0xc002c488,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 20 7b 02 c0 02 	test   BYTE PTR [edx-0x3ffd84e0],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 20 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd84e0],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 20 7b 02 c0 08 	test   BYTE PTR [edx-0x3ffd84e0],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 20 7b 02 c0 04 	test   BYTE PTR [edi-0x3ffd84e0],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 20 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd84e0],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d a0 c4 02 c0    	mov    ecx,DWORD PTR ds:0xc002c4a0
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d a0 c4 02 c0    	mov    DWORD PTR ds:0xc002c4a0,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 a4 c4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3b5c]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 a4 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3b5c],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d a0 c4 02 c0    	mov    DWORD PTR ds:0xc002c4a0,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 cc c4 02 c0    	cmp    DWORD PTR ds:0xc002c4cc,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d dc c4 02 c0    	mov    ecx,DWORD PTR ds:0xc002c4dc
c0000c10:	c7 42 0c d4 c4 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c4d4
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 dc c4 02 c0    	mov    DWORD PTR ds:0xc002c4dc,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 cc c4 02 c0    	mov    DWORD PTR ds:0xc002c4cc,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 a0 c4 02 c0 02 	test   BYTE PTR ds:0xc002c4a0,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d a0 c4 02 c0    	mov    edi,DWORD PTR ds:0xc002c4a0
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 a4 c4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3b5c]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 a4 c4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3b5c],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 d4 c4 02 c0 	lea    edx,[eax*8-0x3ffd3b2c]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d e0 c4 02 c0    	mov    ebx,DWORD PTR ds:0xc002c4e0
c0000f92:	81 fb d4 c4 02 c0    	cmp    ebx,0xc002c4d4
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d d4 c4 02 c0       	cmp    eax,0xc002c4d4
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d d0 c4 02 c0    	cmp    DWORD PTR ds:0xc002c4d0,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 dc c4 02 c0       	mov    ds:0xc002c4dc,eax
c0000fce:	a3 e0 c4 02 c0       	mov    ds:0xc002c4e0,eax
c0000fd3:	a3 d0 c4 02 c0       	mov    ds:0xc002c4d0,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 d4 c4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c4d4
c0000fe1:	c7 40 0c d4 c4 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c4d4
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 e0 c4 02 c0       	mov    ds:0xc002c4e0,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 d4 c4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c4d4
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 98 c4 02 c0 	lea    ebp,[edx*4-0x3ffd3b68]
c0001032:	8b 14 95 a0 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3b60]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 a0 c4 02 c0 	lea    ecx,[edx*4-0x3ffd3b60]
c000104d:	8b 14 95 a0 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3b60]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd d4 c7 02 c0 	or     DWORD PTR [edi*4-0x3ffd382c],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 d4 c4 02 c0 	lea    eax,[eax*8-0x3ffd3b2c]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d dc c4 02 c0    	mov    DWORD PTR ds:0xc002c4dc,ecx
c0001107:	89 0d e0 c4 02 c0    	mov    DWORD PTR ds:0xc002c4e0,ecx
c000110d:	c7 41 08 d4 c4 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c4d4
c0001114:	c7 41 0c d4 c4 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c4d4
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd cc c4 02 c0 	lea    edx,[ecx*8-0x3ffd3b34]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d d4 c7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd382c]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d d4 c7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd382c]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 cc c4 02 c0 	lea    edx,[eax*4-0x3ffd3b34]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d d4 c7 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd382c],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d dc c4 02 c0    	mov    DWORD PTR ds:0xc002c4dc,edi
c00011da:	89 3d e0 c4 02 c0    	mov    DWORD PTR ds:0xc002c4e0,edi
c00011e0:	c7 47 08 d4 c4 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c4d4
c00011e7:	c7 47 0c d4 c4 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c4d4
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d d0 c4 02 c0    	mov    DWORD PTR ds:0xc002c4d0,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 cc c4 02 c0       	mov    eax,ds:0xc002c4cc
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d cc c4 02 c0    	mov    DWORD PTR ds:0xc002c4cc,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba a0 c4 02 c0       	mov    edx,0xc002c4a0
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d a0 c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c4a0,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d f4 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c7f4
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 f4 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7f4,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d f4 c7 02 c0    	mov    DWORD PTR ds:0xc002c7f4,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 cc c4 02 c0    	cmp    DWORD PTR ds:0xc002c4cc,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d cc c4 02 c0    	mov    DWORD PTR ds:0xc002c4cc,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d a0 c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c4a0,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 fc c7 02 c0    	push   DWORD PTR ds:0xc002c7fc
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d a0 c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c4a0,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 fc c7 02 c0       	mov    eax,ds:0xc002c7fc
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d cc c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c4cc,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 cc c4 02 c0       	mov    eax,ds:0xc002c4cc
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 a4 c4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3b5c]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 d4 c4 02 c0       	mov    eax,0xc002c4d4
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d cc c7 02 c0       	cmp    eax,0xc002c7cc
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 08 c8 02 c0       	mov    eax,ds:0xc002c808
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 f0 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c7f0
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 04 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c804
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 14 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c814
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 24 7c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd83dc]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 a0 c4 02 c0       	mov    eax,ds:0xc002c4a0
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 a0 c4 02 c0       	mov    ds:0xc002c4a0,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d e4 c7 02 c0    	mov    DWORD PTR ds:0xc002c7e4,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d e8 c7 02 c0    	mov    DWORD PTR ds:0xc002c7e8,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d ec c7 02 c0    	mov    DWORD PTR ds:0xc002c7ec,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 f4 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7f4,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 40 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd20c0]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 80 e2 01 00       	jmp    c001fc5c <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 40 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd20c0]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 b1 e2 01 00       	jmp    c001fca3 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 40 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd20c0]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 d9 e2 01 00       	jmp    c001fcea <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 08 36 02 00       	call   c00252fc <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 40 7d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd82c0]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 40 7d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd82c0]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba 40 7c 02 c0       	mov    edx,0xc0027c40
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 60 7d 02 c0       	mov    edx,0xc0027d60
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 6c 7d 02 c0       	mov    edx,0xc0027d6c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba 50 7d 02 c0       	mov    edx,0xc0027d50
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 40 c8 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd37c0]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 20 c8 02 c0    	mov    ax,ds:0xc002c820
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 20 c8 02 c0    	mov    ds:0xc002c820,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 05 24 02 00       	call   c00252fc <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 72 7d 02 c0       	mov    eax,0xc0027d72
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad c0 7c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8340]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 7b 7d 02 c0       	mov    eax,0xc0027d7b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 40 7d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd82c0]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 d0 0d 02 00       	call   c00252fc <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba 50 7d 02 c0       	mov    edx,0xc0027d50
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba 40 7c 02 c0       	mov    edx,0xc0027c40
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba 50 7c 02 c0       	mov    edx,0xc0027c50
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 40 c8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd37c0]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 40 c8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd37c0],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 97 f7 01 00       	call   c00252fc <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 7d f7 01 00       	call   c00252fc <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 97 7c 02 c0       	mov    eax,0xc0027c97
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 90 7c 02 c0       	mov    eax,0xc0027c90
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 40 c8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd37c0]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 80 7c 02 c0       	mov    esi,0xc0027c80
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 c0 de 01 00       	call   c00252fc <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 60 7d 02 c0       	mov    edx,0xc0027d60
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 60 7c 02 c0       	mov    edx,0xc0027c60
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 70 7c 02 c0       	mov    edx,0xc0027c70
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 82 7d 02 c0       	mov    edx,0xc0027d82
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 8e 7d 02 c0       	mov    edx,0xc0027d8e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba a2 7d 02 c0       	mov    edx,0xc0027da2
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c c0 80 02 c0 	mov    DWORD PTR [esp+0xc],0xc00280c0
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 c0 80 02 c0 	mov    DWORD PTR [esp+0x10],0xc00280c0
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 c0 7e 02 c0       	mov    eax,0xc0027ec0
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 00 7e 02 c0       	mov    eax,0xc0027e00
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 14 e8 01 00       	call   c0026dcf <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 d7 e7 01 00       	call   c0026db1 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 ab e7 01 00       	call   c0026dcf <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 5e de 01 00       	call   c00264d4 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 d8 e8 01 00       	call   c0026f60 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 25 e7 01 00       	call   c0026dcf <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 67 e6 01 00       	call   c0026dcf <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 34 e6 01 00       	call   c0026db1 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 21 e5 01 00       	call   c0026dcf <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 e9 e4 01 00       	call   c0026db1 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 c0 81 02 c0       	mov    eax,0xc00281c0
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 f5 e2 01 00       	call   c0026dcf <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 ba e2 01 00       	call   c0026db1 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 20 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd79e0]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 ca df 01 00       	call   c0026b63 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 48 d9 01 00       	call   c0026500 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 04 e2 01 00       	call   c0026dd3 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 f2 e2 01 00       	call   c0026ef7 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 dc d8 01 00       	call   c0026500 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 87 e1 01 00       	call   c0026dcd <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 68 e1 01 00       	call   c0026dd1 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 f6 e2 01 00       	call   c0026f80 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 a8 de 01 00       	call   c0026b63 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 26 d8 01 00       	call   c0026500 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 e2 e0 01 00       	call   c0026dd3 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 d0 e1 01 00       	call   c0026ef7 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 ba d7 01 00       	call   c0026500 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 65 e0 01 00       	call   c0026dcd <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 45 e0 01 00       	call   c0026dd1 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 d2 e1 01 00       	call   c0026f80 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 80 df 01 00       	call   c0026dcf <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 3e df 01 00       	call   c0026db1 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 26 df 01 00       	call   c0026dcf <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 98 dc 01 00       	call   c0026b63 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 9a cf 01 00       	call   c0025e83 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 fd d5 01 00       	call   c0026500 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 4f dc 01 00       	call   c0026b63 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 55 cf 01 00       	call   c0025e83 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 24 dc 01 00       	call   c0026b63 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 74 de 01 00       	call   c0026dcd <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 51 d5 01 00       	call   c00264d4 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 cb df 01 00       	call   c0026f60 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 fa dd 01 00       	call   c0026db1 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 f5 d4 01 00       	call   c00264d4 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 73 db 01 00       	call   c0026b63 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 f6 d4 01 00       	call   c0026500 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 48 db 01 00       	call   c0026b63 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 af d7 01 00       	call   c00267e4 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 2e ce 01 00       	call   c0025e83 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 8e c7 01 00       	call   c0025818 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 65 de 01 00       	call   c0026ef7 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 4e d4 01 00       	call   c0026500 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 35 de 01 00       	call   c0026ef7 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 a7 cd 01 00       	call   c0025e83 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 e0 dc 01 00       	call   c0026dd3 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 c8 d6 01 00       	call   c00267e4 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 4e cd 01 00       	call   c0025e83 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 34 de 01 00       	call   c0026f80 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 0e da 01 00       	call   c0026b63 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 65 d3 01 00       	call   c00264d4 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 44 dc 01 00       	call   c0026dcf <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 dd cc 01 00       	call   c0025e83 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 09 d3 01 00       	call   c00264d4 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 a3 dd 01 00       	call   c0026f80 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 5c d9 01 00       	call   c0026b63 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 d9 d2 01 00       	call   c0026500 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 2c d9 01 00       	call   c0026b63 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 32 cc 01 00       	call   c0025e83 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 02 d9 01 00       	call   c0026b63 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 54 db 01 00       	call   c0026dcf <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 2b d2 01 00       	call   c00264d4 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 a5 dc 01 00       	call   c0026f60 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 d4 da 01 00       	call   c0026db1 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 ce d1 01 00       	call   c00264d4 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 4c d8 01 00       	call   c0026b63 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 cf d1 01 00       	call   c0026500 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 21 d8 01 00       	call   c0026b63 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 88 d4 01 00       	call   c00267e4 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 07 cb 01 00       	call   c0025e83 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 57 c4 01 00       	call   c0025818 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 2e db 01 00       	call   c0026ef7 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 17 d1 01 00       	call   c0026500 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 fe da 01 00       	call   c0026ef7 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 70 ca 01 00       	call   c0025e83 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 a9 d9 01 00       	call   c0026dd3 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 90 d3 01 00       	call   c00267e4 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 0f ca 01 00       	call   c0025e83 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 f5 da 01 00       	call   c0026f80 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 cf d6 01 00       	call   c0026b63 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 26 d0 01 00       	call   c00264d4 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 05 d9 01 00       	call   c0026dcf <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 9e c9 01 00       	call   c0025e83 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 ca cf 01 00       	call   c00264d4 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 3f d6 01 00       	call   c0026b63 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 45 c9 01 00       	call   c0025e83 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 80 86 02 c0       	mov    eax,0xc0028680
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 94 86 02 c0       	mov    eax,0xc0028694
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 ba d4 01 00       	call   c0026b63 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 38 ce 01 00       	call   c0026500 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 ca c0 01 00       	call   c0025818 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 a1 d7 01 00       	call   c0026ef7 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 8a cd 01 00       	call   c0026500 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 6d d7 01 00       	call   c0026ef7 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 df c6 01 00       	call   c0025e83 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 3f d7 01 00       	call   c0026ef7 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 2e cd 01 00       	call   c0026500 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 97 c6 01 00       	call   c0025e83 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 b8 bf 01 00       	call   c0025818 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 8f d6 01 00       	call   c0026ef7 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 78 cc 01 00       	call   c0026500 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 5b d6 01 00       	call   c0026ef7 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 cd c5 01 00       	call   c0025e83 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 2d d6 01 00       	call   c0026ef7 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 1c cc 01 00       	call   c0026500 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 85 c5 01 00       	call   c0025e83 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 63 c5 01 00       	call   c0025e83 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 3f be 01 00       	call   c0025818 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 16 d5 01 00       	call   c0026ef7 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 ff ca 01 00       	call   c0026500 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 e2 d4 01 00       	call   c0026ef7 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 54 c4 01 00       	call   c0025e83 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 b4 d4 01 00       	call   c0026ef7 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 9d ca 01 00       	call   c0026500 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 06 c4 01 00       	call   c0025e83 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 66 d4 01 00       	call   c0026ef7 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 4f ca 01 00       	call   c0026500 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 b8 c3 01 00       	call   c0025e83 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 cd bc 01 00       	call   c0025818 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 a4 d3 01 00       	call   c0026ef7 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 8d c9 01 00       	call   c0026500 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 74 d3 01 00       	call   c0026ef7 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 e6 c2 01 00       	call   c0025e83 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 46 d3 01 00       	call   c0026ef7 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 2f c9 01 00       	call   c0026500 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 98 c2 01 00       	call   c0025e83 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 f8 d2 01 00       	call   c0026ef7 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 e1 c8 01 00       	call   c0026500 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 4a c2 01 00       	call   c0025e83 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 1e c2 01 00       	call   c0025e83 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 7b c8 01 00       	call   c0026500 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 37 d1 01 00       	call   c0026dd3 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 c6 c1 01 00       	call   c0025e83 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 23 c8 01 00       	call   c0026500 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 df d0 01 00       	call   c0026dd3 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 59 ba 01 00       	call   c0025818 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 30 d1 01 00       	call   c0026ef7 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 19 c7 01 00       	call   c0026500 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 fc d0 01 00       	call   c0026ef7 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 6e c0 01 00       	call   c0025e83 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 ce d0 01 00       	call   c0026ef7 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 b7 c6 01 00       	call   c0026500 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 20 c0 01 00       	call   c0025e83 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 80 d0 01 00       	call   c0026ef7 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 69 c6 01 00       	call   c0026500 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 d2 bf 01 00       	call   c0025e83 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 32 d0 01 00       	call   c0026ef7 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 1b c6 01 00       	call   c0026500 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 84 bf 01 00       	call   c0025e83 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 e4 cf 01 00       	call   c0026ef7 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 cd c5 01 00       	call   c0026500 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 36 bf 01 00       	call   c0025e83 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 38 b8 01 00       	call   c0025818 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 0f cf 01 00       	call   c0026ef7 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 f8 c4 01 00       	call   c0026500 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 df ce 01 00       	call   c0026ef7 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 51 be 01 00       	call   c0025e83 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 b1 ce 01 00       	call   c0026ef7 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 9a c4 01 00       	call   c0026500 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 03 be 01 00       	call   c0025e83 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 63 ce 01 00       	call   c0026ef7 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 4c c4 01 00       	call   c0026500 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 b5 bd 01 00       	call   c0025e83 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 15 ce 01 00       	call   c0026ef7 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 fe c3 01 00       	call   c0026500 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 67 bd 01 00       	call   c0025e83 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 c7 cd 01 00       	call   c0026ef7 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 b0 c3 01 00       	call   c0026500 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 19 bd 01 00       	call   c0025e83 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 ed bc 01 00       	call   c0025e83 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 4a c3 01 00       	call   c0026500 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 06 cc 01 00       	call   c0026dd3 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 95 bc 01 00       	call   c0025e83 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 f2 c2 01 00       	call   c0026500 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 ae cb 01 00       	call   c0026dd3 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 3c bc 01 00       	call   c0025e83 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 99 c2 01 00       	call   c0026500 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 55 cb 01 00       	call   c0026dd3 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 e3 bb 01 00       	call   c0025e83 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 40 c2 01 00       	call   c0026500 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 fc ca 01 00       	call   c0026dd3 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 5a b4 01 00       	call   c0025818 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 31 cb 01 00       	call   c0026ef7 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 1a c1 01 00       	call   c0026500 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 fd ca 01 00       	call   c0026ef7 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 6f ba 01 00       	call   c0025e83 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 cf ca 01 00       	call   c0026ef7 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 b8 c0 01 00       	call   c0026500 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 21 ba 01 00       	call   c0025e83 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 81 ca 01 00       	call   c0026ef7 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 6a c0 01 00       	call   c0026500 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 d3 b9 01 00       	call   c0025e83 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 33 ca 01 00       	call   c0026ef7 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 1c c0 01 00       	call   c0026500 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 85 b9 01 00       	call   c0025e83 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 e5 c9 01 00       	call   c0026ef7 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 ce bf 01 00       	call   c0026500 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 37 b9 01 00       	call   c0025e83 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 97 c9 01 00       	call   c0026ef7 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 80 bf 01 00       	call   c0026500 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 e6 b8 01 00       	call   c0025e83 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 46 c9 01 00       	call   c0026ef7 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 2f bf 01 00       	call   c0026500 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 98 b8 01 00       	call   c0025e83 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 92 b1 01 00       	call   c0025818 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 69 c8 01 00       	call   c0026ef7 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 52 be 01 00       	call   c0026500 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 32 c8 01 00       	call   c0026ef7 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 a4 b7 01 00       	call   c0025e83 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 04 c8 01 00       	call   c0026ef7 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 ed bd 01 00       	call   c0026500 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 56 b7 01 00       	call   c0025e83 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 b6 c7 01 00       	call   c0026ef7 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 9f bd 01 00       	call   c0026500 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 08 b7 01 00       	call   c0025e83 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 68 c7 01 00       	call   c0026ef7 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 51 bd 01 00       	call   c0026500 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 ba b6 01 00       	call   c0025e83 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 1a c7 01 00       	call   c0026ef7 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 03 bd 01 00       	call   c0026500 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 6c b6 01 00       	call   c0025e83 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 cc c6 01 00       	call   c0026ef7 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 b5 bc 01 00       	call   c0026500 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 1b b6 01 00       	call   c0025e83 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 7b c6 01 00       	call   c0026ef7 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 64 bc 01 00       	call   c0026500 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 d3 b5 01 00       	call   c0025e83 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 ac b5 01 00       	call   c0025e83 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 0a bc 01 00       	call   c0026500 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 c6 c4 01 00       	call   c0026dd3 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 55 b5 01 00       	call   c0025e83 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 b3 bb 01 00       	call   c0026500 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 6f c4 01 00       	call   c0026dd3 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 fd b4 01 00       	call   c0025e83 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 5b bb 01 00       	call   c0026500 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 17 c4 01 00       	call   c0026dd3 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 a5 b4 01 00       	call   c0025e83 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 03 bb 01 00       	call   c0026500 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 bf c3 01 00       	call   c0026dd3 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 4d b4 01 00       	call   c0025e83 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 ab ba 01 00       	call   c0026500 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 67 c3 01 00       	call   c0026dd3 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 fb b3 01 00       	call   c0025e83 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 59 ba 01 00       	call   c0026500 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 15 c3 01 00       	call   c0026dd3 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 29 ac 01 00       	call   c0025818 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 00 c3 01 00       	call   c0026ef7 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 e9 b8 01 00       	call   c0026500 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 d0 c2 01 00       	call   c0026ef7 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 42 b2 01 00       	call   c0025e83 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 c4 86 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd793c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 76 c2 01 00       	call   c0026ef7 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 5f b8 01 00       	call   c0026500 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 ca b1 01 00       	call   c0025e83 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 17 c2 01 00       	call   c0026ef7 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 00 b8 01 00       	call   c0026500 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 6b b1 01 00       	call   c0025e83 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 b8 c1 01 00       	call   c0026ef7 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 a1 b7 01 00       	call   c0026500 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 0c b1 01 00       	call   c0025e83 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 59 c1 01 00       	call   c0026ef7 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 42 b7 01 00       	call   c0026500 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 ad b0 01 00       	call   c0025e83 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 fa c0 01 00       	call   c0026ef7 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 e3 b6 01 00       	call   c0026500 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 4e b0 01 00       	call   c0025e83 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 9b c0 01 00       	call   c0026ef7 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 84 b6 01 00       	call   c0026500 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 ef af 01 00       	call   c0025e83 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 3c c0 01 00       	call   c0026ef7 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 25 b6 01 00       	call   c0026500 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 90 af 01 00       	call   c0025e83 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 dd bf 01 00       	call   c0026ef7 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 c6 b5 01 00       	call   c0026500 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 31 af 01 00       	call   c0025e83 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 3b a8 01 00       	call   c0025818 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 12 bf 01 00       	call   c0026ef7 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 fb b4 01 00       	call   c0026500 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 e2 be 01 00       	call   c0026ef7 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 54 ae 01 00       	call   c0025e83 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 e0 86 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7920]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 87 be 01 00       	call   c0026ef7 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 70 b4 01 00       	call   c0026500 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 db ad 01 00       	call   c0025e83 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 27 be 01 00       	call   c0026ef7 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 10 b4 01 00       	call   c0026500 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 7b ad 01 00       	call   c0025e83 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 c7 bd 01 00       	call   c0026ef7 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 b0 b3 01 00       	call   c0026500 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 1b ad 01 00       	call   c0025e83 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 67 bd 01 00       	call   c0026ef7 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 50 b3 01 00       	call   c0026500 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 bb ac 01 00       	call   c0025e83 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 07 bd 01 00       	call   c0026ef7 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 f0 b2 01 00       	call   c0026500 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 5b ac 01 00       	call   c0025e83 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 a7 bc 01 00       	call   c0026ef7 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 90 b2 01 00       	call   c0026500 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 fb ab 01 00       	call   c0025e83 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 47 bc 01 00       	call   c0026ef7 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 30 b2 01 00       	call   c0026500 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 9b ab 01 00       	call   c0025e83 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 e7 bb 01 00       	call   c0026ef7 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 d0 b1 01 00       	call   c0026500 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 3b ab 01 00       	call   c0025e83 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 fc 86 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7904]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 e0 aa 01 00       	call   c0025e83 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 3d b1 01 00       	call   c0026500 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 f9 b9 01 00       	call   c0026dd3 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 83 aa 01 00       	call   c0025e83 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 e0 b0 01 00       	call   c0026500 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 9c b9 01 00       	call   c0026dd3 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 26 aa 01 00       	call   c0025e83 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 83 b0 01 00       	call   c0026500 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 3f b9 01 00       	call   c0026dd3 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 c9 a9 01 00       	call   c0025e83 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 26 b0 01 00       	call   c0026500 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 e2 b8 01 00       	call   c0026dd3 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 6c a9 01 00       	call   c0025e83 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 c9 af 01 00       	call   c0026500 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 85 b8 01 00       	call   c0026dd3 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 0f a9 01 00       	call   c0025e83 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 6c af 01 00       	call   c0026500 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 28 b8 01 00       	call   c0026dd3 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 b2 a8 01 00       	call   c0025e83 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 0f af 01 00       	call   c0026500 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 cb b7 01 00       	call   c0026dd3 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 55 a8 01 00       	call   c0025e83 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 b2 ae 01 00       	call   c0026500 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 6e b7 01 00       	call   c0026dd3 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 6a ae 01 00       	call   c0026500 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 da b8 01 00       	jmp    c0026f80 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 4c b5 01 00       	call   c0026dcf <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 0a b5 01 00       	call   c0026db1 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 a1 b2 01 00       	call   c0026b63 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 a2 a5 01 00       	call   c0025e83 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 71 b2 01 00       	call   c0026b63 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 d8 ae 01 00       	call   c00267e4 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 77 b4 01 00       	call   c0026db1 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 7a b4 01 00       	call   c0026dcf <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 4d b4 01 00       	call   c0026dcf <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 46 ae 01 00       	call   c00267e4 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 c8 b5 01 00       	call   c0026f80 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 a3 b5 01 00       	call   c0026f80 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 7d b1 01 00       	call   c0026b63 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 d4 aa 01 00       	call   c00264d4 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 b3 b3 01 00       	call   c0026dcf <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 4c a4 01 00       	call   c0025e83 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 70 aa 01 00       	call   c00264d4 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 0a b5 01 00       	call   c0026f80 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 4a ad 01 00       	call   c00267e4 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 c7 a3 01 00       	call   c0025e83 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 f3 af 01 00       	call   c0026b63 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 f3 a2 01 00       	call   c0025e83 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 d3 a2 01 00       	call   c0025e83 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 a3 af 01 00       	call   c0026b63 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 f3 b1 01 00       	call   c0026dcd <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 d2 a8 01 00       	call   c00264d4 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 4c b3 01 00       	call   c0026f60 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 7b b1 01 00       	call   c0026db1 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 79 a8 01 00       	call   c00264d4 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 f7 ae 01 00       	call   c0026b63 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 7a a8 01 00       	call   c0026500 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 cc ae 01 00       	call   c0026b63 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 33 ab 01 00       	call   c00267e4 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 b2 a1 01 00       	call   c0025e83 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 7c ae 01 00       	call   c0026b63 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 c8 b0 01 00       	call   c0026dcf <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 bd a7 01 00       	call   c0026500 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 8f a7 01 00       	call   c0026500 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 c8 ad 01 00       	call   c0026b63 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 2c aa 01 00       	call   c00267e4 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 f4 a9 01 00       	call   c00267e4 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 73 a0 01 00       	call   c0025e83 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 58 b1 01 00       	call   c0026f80 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 32 ad 01 00       	call   c0026b63 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 89 a6 01 00       	call   c00264d4 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 68 af 01 00       	call   c0026dcf <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 00 a0 01 00       	call   c0025e83 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 24 a6 01 00       	call   c00264d4 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 be b0 01 00       	call   c0026f80 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 87 ae 01 00       	call   c0026dcf <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 45 ae 01 00       	call   c0026db1 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 dc ab 01 00       	call   c0026b63 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 dd 9e 01 00       	call   c0025e83 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 ac ab 01 00       	call   c0026b63 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 13 a8 01 00       	call   c00267e4 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 b2 ad 01 00       	call   c0026db1 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 b5 ad 01 00       	call   c0026dcf <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 88 ad 01 00       	call   c0026dcf <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 81 a7 01 00       	call   c00267e4 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 03 af 01 00       	call   c0026f80 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 de ae 01 00       	call   c0026f80 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 b8 aa 01 00       	call   c0026b63 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 0f a4 01 00       	call   c00264d4 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 ee ac 01 00       	call   c0026dcf <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 87 9d 01 00       	call   c0025e83 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 ab a3 01 00       	call   c00264d4 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 45 ae 01 00       	call   c0026f80 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 85 a6 01 00       	call   c00267e4 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 02 9d 01 00       	call   c0025e83 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 2d a9 01 00       	call   c0026b63 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 2d 9c 01 00       	call   c0025e83 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 0d 9c 01 00       	call   c0025e83 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 dd a8 01 00       	call   c0026b63 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 2d ab 01 00       	call   c0026dcd <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 0b a2 01 00       	call   c00264d4 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 85 ac 01 00       	call   c0026f60 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 b4 aa 01 00       	call   c0026db1 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 b1 a1 01 00       	call   c00264d4 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 2f a8 01 00       	call   c0026b63 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 b2 a1 01 00       	call   c0026500 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 04 a8 01 00       	call   c0026b63 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 6b a4 01 00       	call   c00267e4 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 ea 9a 01 00       	call   c0025e83 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 b4 a7 01 00       	call   c0026b63 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 00 aa 01 00       	call   c0026dcf <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 f5 a0 01 00       	call   c0026500 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 c7 a0 01 00       	call   c0026500 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 fe a6 01 00       	call   c0026b63 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 62 a3 01 00       	call   c00267e4 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 2f a3 01 00       	call   c00267e4 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 ae 99 01 00       	call   c0025e83 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 93 aa 01 00       	call   c0026f80 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 6d a6 01 00       	call   c0026b63 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 c4 9f 01 00       	call   c00264d4 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 a3 a8 01 00       	call   c0026dcf <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 3b 99 01 00       	call   c0025e83 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 5f 9f 01 00       	call   c00264d4 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 f9 a9 01 00       	call   c0026f80 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 c2 a7 01 00       	call   c0026dcf <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 80 a7 01 00       	call   c0026db1 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 17 a5 01 00       	call   c0026b63 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 18 98 01 00       	call   c0025e83 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 e7 a4 01 00       	call   c0026b63 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 4e a1 01 00       	call   c00267e4 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 ed a6 01 00       	call   c0026db1 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 f0 a6 01 00       	call   c0026dcf <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 c3 a6 01 00       	call   c0026dcf <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 bc a0 01 00       	call   c00267e4 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 3e a8 01 00       	call   c0026f80 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 19 a8 01 00       	call   c0026f80 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 f3 a3 01 00       	call   c0026b63 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 4a 9d 01 00       	call   c00264d4 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 29 a6 01 00       	call   c0026dcf <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 c2 96 01 00       	call   c0025e83 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 e6 9c 01 00       	call   c00264d4 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 80 a7 01 00       	call   c0026f80 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 c0 9f 01 00       	call   c00267e4 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 3d 96 01 00       	call   c0025e83 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 68 a2 01 00       	call   c0026b63 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 68 95 01 00       	call   c0025e83 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 48 95 01 00       	call   c0025e83 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 18 a2 01 00       	call   c0026b63 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 68 a4 01 00       	call   c0026dcd <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 46 9b 01 00       	call   c00264d4 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 c0 a5 01 00       	call   c0026f60 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 ef a3 01 00       	call   c0026db1 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 ec 9a 01 00       	call   c00264d4 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 6a a1 01 00       	call   c0026b63 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 ed 9a 01 00       	call   c0026500 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 3f a1 01 00       	call   c0026b63 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 a6 9d 01 00       	call   c00267e4 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 25 94 01 00       	call   c0025e83 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 ef a0 01 00       	call   c0026b63 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 3b a3 01 00       	call   c0026dcf <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 30 9a 01 00       	call   c0026500 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 02 9a 01 00       	call   c0026500 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 39 a0 01 00       	call   c0026b63 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 9d 9c 01 00       	call   c00267e4 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 6a 9c 01 00       	call   c00267e4 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 e9 92 01 00       	call   c0025e83 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 ce a3 01 00       	call   c0026f80 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 a8 9f 01 00       	call   c0026b63 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 ff 98 01 00       	call   c00264d4 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 de a1 01 00       	call   c0026dcf <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 76 92 01 00       	call   c0025e83 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 9a 98 01 00       	call   c00264d4 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 34 a3 01 00       	call   c0026f80 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 fd a0 01 00       	call   c0026dcf <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 bb a0 01 00       	call   c0026db1 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 52 9e 01 00       	call   c0026b63 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 53 91 01 00       	call   c0025e83 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 22 9e 01 00       	call   c0026b63 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 89 9a 01 00       	call   c00267e4 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 28 a0 01 00       	call   c0026db1 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 2b a0 01 00       	call   c0026dcf <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 fe 9f 01 00       	call   c0026dcf <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 f7 99 01 00       	call   c00267e4 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 79 a1 01 00       	call   c0026f80 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 54 a1 01 00       	call   c0026f80 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 2e 9d 01 00       	call   c0026b63 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 85 96 01 00       	call   c00264d4 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 64 9f 01 00       	call   c0026dcf <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 fd 8f 01 00       	call   c0025e83 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 21 96 01 00       	call   c00264d4 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 bb a0 01 00       	call   c0026f80 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 fb 98 01 00       	call   c00267e4 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 78 8f 01 00       	call   c0025e83 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 a3 9b 01 00       	call   c0026b63 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 a3 8e 01 00       	call   c0025e83 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 83 8e 01 00       	call   c0025e83 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 53 9b 01 00       	call   c0026b63 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 a3 9d 01 00       	call   c0026dcd <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 81 94 01 00       	call   c00264d4 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 fb 9e 01 00       	call   c0026f60 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 2a 9d 01 00       	call   c0026db1 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 27 94 01 00       	call   c00264d4 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 a5 9a 01 00       	call   c0026b63 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 28 94 01 00       	call   c0026500 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 7a 9a 01 00       	call   c0026b63 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 e1 96 01 00       	call   c00267e4 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 60 8d 01 00       	call   c0025e83 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 2a 9a 01 00       	call   c0026b63 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 76 9c 01 00       	call   c0026dcf <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 6b 93 01 00       	call   c0026500 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 3d 93 01 00       	call   c0026500 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 74 99 01 00       	call   c0026b63 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 d8 95 01 00       	call   c00267e4 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 a5 95 01 00       	call   c00267e4 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 24 8c 01 00       	call   c0025e83 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 09 9d 01 00       	call   c0026f80 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 e3 98 01 00       	call   c0026b63 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 3a 92 01 00       	call   c00264d4 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 19 9b 01 00       	call   c0026dcf <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 b1 8b 01 00       	call   c0025e83 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 d5 91 01 00       	call   c00264d4 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 6f 9c 01 00       	call   c0026f80 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 35 9a 01 00       	call   c0026dcf <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 f3 99 01 00       	call   c0026db1 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 8a 97 01 00       	call   c0026b63 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 8b 8a 01 00       	call   c0025e83 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 5a 97 01 00       	call   c0026b63 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 c1 93 01 00       	call   c00267e4 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 60 99 01 00       	call   c0026db1 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 63 99 01 00       	call   c0026dcf <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 36 99 01 00       	call   c0026dcf <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 2f 93 01 00       	call   c00267e4 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 b1 9a 01 00       	call   c0026f80 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 88 9a 01 00       	call   c0026f80 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 62 96 01 00       	call   c0026b63 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 b9 8f 01 00       	call   c00264d4 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 98 98 01 00       	call   c0026dcf <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 31 89 01 00       	call   c0025e83 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 59 8f 01 00       	call   c00264d4 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 f3 99 01 00       	call   c0026f80 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 34 92 01 00       	call   c00267e4 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 b1 88 01 00       	call   c0025e83 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 dd 94 01 00       	call   c0026b63 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 dd 87 01 00       	call   c0025e83 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 bd 87 01 00       	call   c0025e83 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 8d 94 01 00       	call   c0026b63 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 c1 96 01 00       	call   c0026db1 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 b8 8d 01 00       	call   c00264d4 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 32 98 01 00       	call   c0026f60 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 61 96 01 00       	call   c0026db1 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 5b 8d 01 00       	call   c00264d4 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 d9 93 01 00       	call   c0026b63 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 5c 8d 01 00       	call   c0026500 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 ae 93 01 00       	call   c0026b63 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 15 90 01 00       	call   c00267e4 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 94 86 01 00       	call   c0025e83 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 5e 93 01 00       	call   c0026b63 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 aa 95 01 00       	call   c0026dcf <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 9f 8c 01 00       	call   c0026500 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 71 8c 01 00       	call   c0026500 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 b5 92 01 00       	call   c0026b63 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 1c 8f 01 00       	call   c00267e4 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 05 8c 01 00       	call   c0026500 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 c1 94 01 00       	call   c0026dd3 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 b4 8e 01 00       	call   c00267e4 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 33 85 01 00       	call   c0025e83 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 18 96 01 00       	call   c0026f80 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 f2 91 01 00       	call   c0026b63 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 49 8b 01 00       	call   c00264d4 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 28 94 01 00       	call   c0026dcf <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 c0 84 01 00       	call   c0025e83 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 e8 8a 01 00       	call   c00264d4 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 82 95 01 00       	call   c0026f80 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 24 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd78dc]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 18 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd78e8]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 3d 92 01 00       	call   c0026dcf <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 fb 91 01 00       	call   c0026db1 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 e7 91 01 00       	call   c0026dcf <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 59 8f 01 00       	call   c0026b63 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 d7 88 01 00       	call   c0026500 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 29 8f 01 00       	call   c0026b63 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 2f 82 01 00       	call   c0025e83 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 fe 8e 01 00       	call   c0026b63 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 4e 91 01 00       	call   c0026dcd <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 2f 88 01 00       	call   c00264d4 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 a9 92 01 00       	call   c0026f60 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 d8 90 01 00       	call   c0026db1 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 d7 87 01 00       	call   c00264d4 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 55 8e 01 00       	call   c0026b63 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 d8 87 01 00       	call   c0026500 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 2a 8e 01 00       	call   c0026b63 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 91 8a 01 00       	call   c00267e4 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 10 81 01 00       	call   c0025e83 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 38 8a 01 00       	call   c00267e4 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 be 80 01 00       	call   c0025e83 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 a4 91 01 00       	call   c0026f80 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 7e 8d 01 00       	call   c0026b63 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 d5 86 01 00       	call   c00264d4 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 b4 8f 01 00       	call   c0026dcf <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 4d 80 01 00       	call   c0025e83 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 79 86 01 00       	call   c00264d4 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 13 91 01 00       	call   c0026f80 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 c8 8c 01 00       	call   c0026b63 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 45 86 01 00       	call   c0026500 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 96 8c 01 00       	call   c0026b63 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 9c 7f 01 00       	call   c0025e83 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 6c 8c 01 00       	call   c0026b63 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 c0 8e 01 00       	call   c0026dd1 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 99 85 01 00       	call   c00264d4 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 13 90 01 00       	call   c0026f60 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 42 8e 01 00       	call   c0026db1 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 40 85 01 00       	call   c00264d4 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 be 8b 01 00       	call   c0026b63 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 41 85 01 00       	call   c0026500 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 93 8b 01 00       	call   c0026b63 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 fa 87 01 00       	call   c00267e4 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 79 7e 01 00       	call   c0025e83 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 95 87 01 00       	call   c00267e4 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 14 7e 01 00       	call   c0025e83 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 fa 8e 01 00       	call   c0026f80 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 d4 8a 01 00       	call   c0026b63 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 2b 84 01 00       	call   c00264d4 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 0a 8d 01 00       	call   c0026dcf <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 a3 7d 01 00       	call   c0025e83 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 cf 83 01 00       	call   c00264d4 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 40 8a 01 00       	call   c0026b63 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 46 7d 01 00       	call   c0025e83 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 3e 88 02 c0       	mov    eax,0xc002883e
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 4f 88 02 c0       	mov    eax,0xc002884f
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 73 59 00 00       	call   c0013c36 <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 86 88 02 c0       	push   0xc0028886
c000e2f9:	50                   	push   eax
c000e2fa:	e8 b1 59 00 00       	call   c0013cb0 <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba 50 8a 02 c0       	mov    edx,0xc0028a50
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 d4 dd 02 c0    	push   DWORD PTR ds:0xc002ddd4
c000e46b:	68 8f 88 02 c0       	push   0xc002888f
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 36 e6 00 00       	call   c001caae <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 1f e9 00 00       	call   c001cdac <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 0a d6 01 c0       	push   0xc001d60a
c000e496:	ff 35 d4 dd 02 c0    	push   DWORD PTR ds:0xc002ddd4
c000e49c:	e8 0b e9 00 00       	call   c001cdac <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 88 dd 02 c0       	mov    ds:0xc002dd88,eax
c000e4a9:	e8 dd f4 00 00       	call   c001d98b <Vm::initialise8086()>
c000e4ae:	c6 05 ad c8 02 c0 01 	mov    BYTE PTR ds:0xc002c8ad,0x1
c000e4b5:	e8 72 45 00 00       	call   c0012a2c <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 e1 b1 00 00       	call   c00196b2 <Krnl::loadSystemEnv()>
c000e4d1:	e8 80 cf 00 00       	call   c001b456 <setupSystemCalls()>
c000e4d6:	e8 63 50 00 00       	call   c001353e <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 27 57 00 00       	call   c0013c0a <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d a8 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8a8
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 9c 88 02 c0       	push   0xc002889c
c000e4f2:	e8 0f e1 00 00       	call   c001c606 <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 15 e3 00 00       	call   c001c815 <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 18 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b18
c000e507:	e8 c5 41 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 f7 eb 00 00       	call   c001d110 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 a8 c8 02 c0    	push   DWORD PTR ds:0xc002c8a8
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 c1 c8 02 c0 04 	test   BYTE PTR ds:0xc002c8c1,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 4f 6a 01 00       	call   c0024fc6 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 c2 9a 00 00       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 9b 9a 00 00       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 79 9a 00 00       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 57 9a 00 00       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 c0 c8 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002c8c0,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 65 99 00 00       	call   c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 40 99 00 00       	call   c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 b9 68 01 00       	call   c0024f80 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 76 68 01 00       	call   c0024f60 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 5c 99 00 00       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 bf 88 02 c0       	push   0xc00288bf
c000e743:	e8 89 3f 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 d2 88 02 c0       	push   0xc00288d2
c000e766:	e8 66 3f 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 e3 88 02 c0       	push   0xc00288e3
c000e789:	e8 43 3f 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 f4 88 02 c0       	push   0xc00288f4
c000e7ac:	e8 20 3f 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 05 89 02 c0       	push   0xc0028905
c000e7cf:	e8 fd 3e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 16 89 02 c0       	push   0xc0028916
c000e7f2:	e8 da 3e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 27 89 02 c0       	push   0xc0028927
c000e815:	e8 b7 3e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 38 89 02 c0       	push   0xc0028938
c000e838:	e8 94 3e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 49 89 02 c0       	push   0xc0028949
c000e85b:	e8 71 3e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 5a 89 02 c0       	push   0xc002895a
c000e87e:	e8 4e 3e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 6b 89 02 c0       	push   0xc002896b
c000e8a1:	e8 2b 3e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 7c 89 02 c0       	push   0xc002897c
c000e8c4:	e8 08 3e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 8d 89 02 c0       	push   0xc002898d
c000e8e7:	e8 e5 3d 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 9e 89 02 c0       	push   0xc002899e
c000e90a:	e8 c2 3d 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 af 89 02 c0       	push   0xc00289af
c000e92d:	e8 9f 3d 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 c0 89 02 c0       	push   0xc00289c0
c000e950:	e8 7c 3d 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 d1 89 02 c0       	push   0xc00289d1
c000e973:	e8 59 3d 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 e2 89 02 c0       	push   0xc00289e2
c000e996:	e8 36 3d 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 f3 89 02 c0       	push   0xc00289f3
c000e9b5:	e8 17 3d 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 bb a1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a1bb
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 06 3d 00 00       	jmp    c00126d1 <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 04 8a 02 c0       	push   0xc0028a04
c000ea9e:	e8 48 ad 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 0a 8a 02 c0       	push   0xc0028a0a
c000ead6:	e8 10 ad 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 c0 c8 02 c0 04 	test   BYTE PTR ds:0xc002c8c0,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 e4 b7 02 c0 	sete   BYTE PTR ds:0xc002b7e4
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 37 8b 00 00       	call   c0017680 <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 68 4f 00 00       	call   c0013ac0 <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 a4 95 00 00       	call   c001812c <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 29 4f 00 00       	call   c0013ac0 <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 7f 54 00 00       	call   c0014032 <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 f9 4e 00 00       	call   c0013ac0 <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 c3 e2 00 00       	call   c001ceac <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 10 8a 02 c0       	push   0xc0028a10
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 9a 3a 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 21 8a 02 c0       	push   0xc0028a21
c000ec54:	e8 92 ab 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 2e 8a 02 c0       	push   0xc0028a2e
c000ec69:	e8 7d ab 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 38 8a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028a38
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 66 ab 00 00       	jmp    c00197eb <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 74 8a 02 c0       	push   0xc0028a74
c000ed1a:	e8 b2 39 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 b2 c8 02 c0       	mov    ds:0xc002c8b2,eax
c000ed5b:	66 89 15 b0 c8 02 c0 	mov    WORD PTR ds:0xc002c8b0,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 0a de 00 00       	call   c001cc7c <unlockScheduler()>
c000ee72:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 a8 c8 02 c0    	push   DWORD PTR ds:0xc002c8a8
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 40 81 01 00       	call   c0027000 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 37 81 01 00       	call   c0027000 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 b8 c8 02 c0 ff 07 	mov    WORD PTR ds:0xc002c8b8,0x7ff
c000efb7:	a3 ba c8 02 c0       	mov    ds:0xc002c8ba,eax
c000efbc:	0f 01 1d b8 c8 02 c0 	lidtd  ds:0xc002c8b8
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 c8 25 00 00       	call   c0011871 <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 f8 2b 00 00       	call   c0011eac <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 40 1d 00 00       	call   c0011012 <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 71 1d 00 00       	call   c0011052 <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 a8 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c8a8
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d cc b7 02 c0    	mov    ecx,DWORD PTR ds:0xc002b7cc
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 cc b7 02 c0       	mov    eax,ds:0xc002b7cc
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 90 8a 02 c0       	push   0xc0028a90
c000f388:	e8 44 33 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 cc b7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b7cc,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 be 24 00 00       	call   c0011871 <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d cc b7 02 c0    	mov    ebp,DWORD PTR ds:0xc002b7cc
c000f3bb:	e8 be 06 00 00       	call   c000fa7e <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 df 29 00 00       	call   c0011dac <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d cc b7 02 c0    	mov    ebx,DWORD PTR ds:0xc002b7cc
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 c0 8a 02 c0       	push   0xc0028ac0
c000f441:	e8 a5 a3 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 c5 8a 02 c0       	push   0xc0028ac5
c000f457:	e8 8f a3 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 0d d8 00 00       	call   c001cc7a <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 fe d7 00 00       	call   c001cc7c <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 e2 23 00 00       	call   c0011871 <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 0e 2a 00 00       	call   c0011eac <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 c7 23 00 00       	call   c0011871 <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 b1 26 00 00       	call   c0011b68 <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	57                   	push   edi
c000f52f:	56                   	push   esi
c000f530:	53                   	push   ebx
c000f531:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f535:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f53b:	85 c0                	test   eax,eax
c000f53d:	7e 30                	jle    c000f56f <hwTextMode_loadInData(VgaText*)+0x41>
c000f53f:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f542:	31 f6                	xor    esi,esi
c000f544:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f547:	31 c0                	xor    eax,eax
c000f549:	c1 e1 05             	shl    ecx,0x5
c000f54c:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f552:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f556:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f55a:	40                   	inc    eax
c000f55b:	83 f8 50             	cmp    eax,0x50
c000f55e:	75 f2                	jne    c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f560:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f566:	46                   	inc    esi
c000f567:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f56d:	7f d5                	jg     c000f544 <hwTextMode_loadInData(VgaText*)+0x16>
c000f56f:	5b                   	pop    ebx
c000f570:	5e                   	pop    esi
c000f571:	5f                   	pop    edi
c000f572:	c3                   	ret    

c000f573 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f573:	56                   	push   esi
c000f574:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f579:	53                   	push   ebx
c000f57a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f57e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f582:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f588:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f58e:	c1 e0 04             	shl    eax,0x4
c000f591:	83 e6 0f             	and    esi,0xf
c000f594:	0f b6 c0             	movzx  eax,al
c000f597:	41                   	inc    ecx
c000f598:	09 f0                	or     eax,esi
c000f59a:	83 c2 02             	add    edx,0x2
c000f59d:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f5a1:	c1 e0 08             	shl    eax,0x8
c000f5a4:	09 f0                	or     eax,esi
c000f5a6:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5aa:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f5b0:	75 d0                	jne    c000f582 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f5b2:	5b                   	pop    ebx
c000f5b3:	5e                   	pop    esi
c000f5b4:	c3                   	ret    

c000f5b5 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5b5:	56                   	push   esi
c000f5b6:	53                   	push   ebx
c000f5b7:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5bc:	74 38                	je     c000f5f6 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5be:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5c3:	b0 0a                	mov    al,0xa
c000f5c5:	89 da                	mov    edx,ebx
c000f5c7:	ee                   	out    dx,al
c000f5c8:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5cd:	89 ca                	mov    edx,ecx
c000f5cf:	ec                   	in     al,dx
c000f5d0:	b2 0f                	mov    dl,0xf
c000f5d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5d6:	83 e0 c0             	and    eax,0xffffffc0
c000f5d9:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5df:	09 d0                	or     eax,edx
c000f5e1:	89 ca                	mov    edx,ecx
c000f5e3:	ee                   	out    dx,al
c000f5e4:	b0 0b                	mov    al,0xb
c000f5e6:	89 da                	mov    edx,ebx
c000f5e8:	ee                   	out    dx,al
c000f5e9:	89 ca                	mov    edx,ecx
c000f5eb:	ec                   	in     al,dx
c000f5ec:	83 e0 e0             	and    eax,0xffffffe0
c000f5ef:	83 c8 0f             	or     eax,0xf
c000f5f2:	ee                   	out    dx,al
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    
c000f5f6:	b0 0a                	mov    al,0xa
c000f5f8:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5fd:	ee                   	out    dx,al
c000f5fe:	b0 20                	mov    al,0x20
c000f600:	ba d5 03 00 00       	mov    edx,0x3d5
c000f605:	ee                   	out    dx,al
c000f606:	5b                   	pop    ebx
c000f607:	5e                   	pop    esi
c000f608:	c3                   	ret    

c000f609 <hwTextMode_update(VgaText*)>:
c000f609:	c3                   	ret    

c000f60a <hwTextMode_updateCursor(VgaText*)>:
c000f60a:	56                   	push   esi
c000f60b:	b9 19 00 00 00       	mov    ecx,0x19
c000f610:	53                   	push   ebx
c000f611:	be d4 03 00 00       	mov    esi,0x3d4
c000f616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f61a:	89 f2                	mov    edx,esi
c000f61c:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f622:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f628:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f62b:	c1 e1 04             	shl    ecx,0x4
c000f62e:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f634:	b0 0f                	mov    al,0xf
c000f636:	ee                   	out    dx,al
c000f637:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f63c:	88 c8                	mov    al,cl
c000f63e:	89 da                	mov    edx,ebx
c000f640:	ee                   	out    dx,al
c000f641:	b0 0e                	mov    al,0xe
c000f643:	89 f2                	mov    edx,esi
c000f645:	ee                   	out    dx,al
c000f646:	89 c8                	mov    eax,ecx
c000f648:	89 da                	mov    edx,ebx
c000f64a:	66 c1 e8 08          	shr    ax,0x8
c000f64e:	ee                   	out    dx,al
c000f64f:	5b                   	pop    ebx
c000f650:	5e                   	pop    esi
c000f651:	c3                   	ret    

c000f652 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f652:	ba da 03 00 00       	mov    edx,0x3da
c000f657:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f65c:	75 18                	jne    c000f676 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f65e:	ec                   	in     al,dx
c000f65f:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f664:	b0 30                	mov    al,0x30
c000f666:	89 ca                	mov    edx,ecx
c000f668:	ee                   	out    dx,al
c000f669:	ba c1 03 00 00       	mov    edx,0x3c1
c000f66e:	ec                   	in     al,dx
c000f66f:	83 c8 08             	or     eax,0x8
c000f672:	89 ca                	mov    edx,ecx
c000f674:	ee                   	out    dx,al
c000f675:	c3                   	ret    
c000f676:	ec                   	in     al,dx
c000f677:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f67c:	b0 30                	mov    al,0x30
c000f67e:	89 ca                	mov    edx,ecx
c000f680:	ee                   	out    dx,al
c000f681:	ba c1 03 00 00       	mov    edx,0x3c1
c000f686:	ec                   	in     al,dx
c000f687:	83 e0 f7             	and    eax,0xfffffff7
c000f68a:	89 ca                	mov    edx,ecx
c000f68c:	ee                   	out    dx,al
c000f68d:	c3                   	ret    

c000f68e <hwTextMode_scrollScreen(VgaText*)>:
c000f68e:	55                   	push   ebp
c000f68f:	bd 02 00 00 00       	mov    ebp,0x2
c000f694:	57                   	push   edi
c000f695:	56                   	push   esi
c000f696:	53                   	push   ebx
c000f697:	83 ec 1c             	sub    esp,0x1c
c000f69a:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f6a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f6a6:	31 c0                	xor    eax,eax
c000f6a8:	eb 0b                	jmp    c000f6b5 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f6aa:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6b0:	74 57                	je     c000f709 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f6b2:	43                   	inc    ebx
c000f6b3:	89 f0                	mov    eax,esi
c000f6b5:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6bb:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6c1:	88 13                	mov    BYTE PTR [ebx],dl
c000f6c3:	8d 70 01             	lea    esi,[eax+0x1]
c000f6c6:	83 fd 18             	cmp    ebp,0x18
c000f6c9:	75 df                	jne    c000f6aa <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6cb:	a8 01                	test   al,0x1
c000f6cd:	75 13                	jne    c000f6e2 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6cf:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6d2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6d8:	75 d8                	jne    c000f6b2 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6da:	83 c4 1c             	add    esp,0x1c
c000f6dd:	5b                   	pop    ebx
c000f6de:	5e                   	pop    esi
c000f6df:	5f                   	pop    edi
c000f6e0:	5d                   	pop    ebp
c000f6e1:	c3                   	ret    
c000f6e2:	83 ec 08             	sub    esp,0x8
c000f6e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6e9:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6f0:	50                   	push   eax
c000f6f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6f5:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6fc:	50                   	push   eax
c000f6fd:	e8 c0 0b 00 00       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f702:	83 c4 10             	add    esp,0x10
c000f705:	88 07                	mov    BYTE PTR [edi],al
c000f707:	eb c9                	jmp    c000f6d2 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f709:	45                   	inc    ebp
c000f70a:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f712:	eb 8e                	jmp    c000f6a2 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f714 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f714:	56                   	push   esi
c000f715:	53                   	push   ebx
c000f716:	83 ec 0c             	sub    esp,0xc
c000f719:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f71d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f721:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f726:	50                   	push   eax
c000f727:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f72c:	50                   	push   eax
c000f72d:	e8 90 0b 00 00       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f732:	5a                   	pop    edx
c000f733:	0f b6 c0             	movzx  eax,al
c000f736:	59                   	pop    ecx
c000f737:	50                   	push   eax
c000f738:	89 f0                	mov    eax,esi
c000f73a:	0f be f0             	movsx  esi,al
c000f73d:	56                   	push   esi
c000f73e:	e8 25 0c 00 00       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c000f743:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f747:	ba 19 00 00 00       	mov    edx,0x19
c000f74c:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f752:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f755:	8d 14 92             	lea    edx,[edx+edx*4]
c000f758:	c1 e1 04             	shl    ecx,0x4
c000f75b:	c1 e2 04             	shl    edx,0x4
c000f75e:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f762:	01 ca                	add    edx,ecx
c000f764:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f76c:	83 c4 14             	add    esp,0x14
c000f76f:	5b                   	pop    ebx
c000f770:	5e                   	pop    esi
c000f771:	c3                   	ret    

c000f772 <setupTextMode()>:
c000f772:	c7 05 58 c9 02 c0 52 f6 00 c0 	mov    DWORD PTR ds:0xc002c958,0xc000f652
c000f77c:	c7 05 44 c9 02 c0 2e f5 00 c0 	mov    DWORD PTR ds:0xc002c944,0xc000f52e
c000f786:	c7 05 40 c9 02 c0 73 f5 00 c0 	mov    DWORD PTR ds:0xc002c940,0xc000f573
c000f790:	c7 05 4c c9 02 c0 8e f6 00 c0 	mov    DWORD PTR ds:0xc002c94c,0xc000f68e
c000f79a:	c7 05 54 c9 02 c0 b5 f5 00 c0 	mov    DWORD PTR ds:0xc002c954,0xc000f5b5
c000f7a4:	c7 05 48 c9 02 c0 09 f6 00 c0 	mov    DWORD PTR ds:0xc002c948,0xc000f609
c000f7ae:	c7 05 50 c9 02 c0 0a f6 00 c0 	mov    DWORD PTR ds:0xc002c950,0xc000f60a
c000f7b8:	c7 05 5c c9 02 c0 14 f7 00 c0 	mov    DWORD PTR ds:0xc002c95c,0xc000f714
c000f7c2:	c3                   	ret    

c000f7c3 <kernel_main>:
c000f7c3:	57                   	push   edi
c000f7c4:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7c9:	56                   	push   esi
c000f7ca:	31 f6                	xor    esi,esi
c000f7cc:	53                   	push   ebx
c000f7cd:	83 ec 10             	sub    esp,0x10
c000f7d0:	e8 47 09 00 00       	call   c001011c <installVgaTextImplementation()>
c000f7d5:	e8 98 ff ff ff       	call   c000f772 <setupTextMode()>
c000f7da:	89 f0                	mov    eax,esi
c000f7dc:	89 fa                	mov    edx,edi
c000f7de:	ee                   	out    dx,al
c000f7df:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7e4:	b0 80                	mov    al,0x80
c000f7e6:	89 da                	mov    edx,ebx
c000f7e8:	ee                   	out    dx,al
c000f7e9:	b1 03                	mov    cl,0x3
c000f7eb:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7f0:	88 c8                	mov    al,cl
c000f7f2:	ee                   	out    dx,al
c000f7f3:	89 f0                	mov    eax,esi
c000f7f5:	89 fa                	mov    edx,edi
c000f7f7:	ee                   	out    dx,al
c000f7f8:	88 c8                	mov    al,cl
c000f7fa:	89 da                	mov    edx,ebx
c000f7fc:	ee                   	out    dx,al
c000f7fd:	b0 c7                	mov    al,0xc7
c000f7ff:	ba fa 03 00 00       	mov    edx,0x3fa
c000f804:	ee                   	out    dx,al
c000f805:	b0 0b                	mov    al,0xb
c000f807:	ba fc 03 00 00       	mov    edx,0x3fc
c000f80c:	ee                   	out    dx,al
c000f80d:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f812:	83 ec 0c             	sub    esp,0xc
c000f815:	05 ff 0f 00 00       	add    eax,0xfff
c000f81a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f81f:	50                   	push   eax
c000f820:	e8 b3 03 00 00       	call   c000fbd8 <Phys::physicalMemorySetup(unsigned int)>
c000f825:	e8 c8 1f 00 00       	call   c00117f2 <Virt::virtualMemorySetup()>
c000f82a:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f830:	83 c4 10             	add    esp,0x10
c000f833:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f839:	75 0e                	jne    c000f849 <kernel_main+0x86>
c000f83b:	89 d8                	mov    eax,ebx
c000f83d:	25 48 03 00 00       	and    eax,0x348
c000f842:	3d 00 03 00 00       	cmp    eax,0x300
c000f847:	74 10                	je     c000f859 <kernel_main+0x96>
c000f849:	83 ec 0c             	sub    esp,0xc
c000f84c:	68 bc a1 02 c0       	push   0xc002a1bc
c000f851:	e8 95 9f 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000f856:	83 c4 10             	add    esp,0x10
c000f859:	83 ec 0c             	sub    esp,0xc
c000f85c:	89 1d c0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c0,ebx
c000f862:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f866:	53                   	push   ebx
c000f867:	e8 3a 21 00 00       	call   c00119a6 <VAS::VAS()>
c000f86c:	89 1d 04 ca 02 c0    	mov    DWORD PTR ds:0xc002ca04,ebx
c000f872:	e8 a9 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f877:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f87e:	e8 51 fc ff ff       	call   c000f4d4 <malloc>
c000f883:	89 04 24             	mov    DWORD PTR [esp],eax
c000f886:	89 c6                	mov    esi,eax
c000f888:	e8 5d ea ff ff       	call   c000e2ea <Computer::Computer()>
c000f88d:	6a 00                	push   0x0
c000f88f:	89 35 a8 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a8,esi
c000f895:	6a 00                	push   0x0
c000f897:	6a 00                	push   0x0
c000f899:	56                   	push   esi
c000f89a:	e8 7f f2 ff ff       	call   c000eb1e <Computer::open(int, int, void*)>
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	53                   	push   ebx
c000f8a3:	e8 98 23 00 00       	call   c0011c40 <VAS::~VAS()>
c000f8a8:	c7 04 24 cc 8a 02 c0 	mov    DWORD PTR [esp],0xc0028acc
c000f8af:	e8 37 9f 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000f8b4:	83 c4 20             	add    esp,0x20
c000f8b7:	5b                   	pop    ebx
c000f8b8:	5e                   	pop    esi
c000f8b9:	5f                   	pop    edi
c000f8ba:	c3                   	ret    

c000f8bb <Phys::allocateDMA(unsigned long)>:
c000f8bb:	55                   	push   ebp
c000f8bc:	31 d2                	xor    edx,edx
c000f8be:	57                   	push   edi
c000f8bf:	31 ed                	xor    ebp,ebp
c000f8c1:	56                   	push   esi
c000f8c2:	31 c9                	xor    ecx,ecx
c000f8c4:	53                   	push   ebx
c000f8c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8c9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8cf:	31 c0                	xor    eax,eax
c000f8d1:	c1 ee 0c             	shr    esi,0xc
c000f8d4:	eb 17                	jmp    c000f8ed <Phys::allocateDMA(unsigned long)+0x32>
c000f8d6:	85 c9                	test   ecx,ecx
c000f8d8:	75 04                	jne    c000f8de <Phys::allocateDMA(unsigned long)+0x23>
c000f8da:	89 d5                	mov    ebp,edx
c000f8dc:	89 d0                	mov    eax,edx
c000f8de:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8e1:	39 de                	cmp    esi,ebx
c000f8e3:	74 20                	je     c000f905 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8e5:	42                   	inc    edx
c000f8e6:	89 d9                	mov    ecx,ebx
c000f8e8:	83 fa 2f             	cmp    edx,0x2f
c000f8eb:	7f 11                	jg     c000f8fe <Phys::allocateDMA(unsigned long)+0x43>
c000f8ed:	80 ba 00 c9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3700],0x0
c000f8f4:	74 e0                	je     c000f8d6 <Phys::allocateDMA(unsigned long)+0x1b>
c000f8f6:	31 c9                	xor    ecx,ecx
c000f8f8:	42                   	inc    edx
c000f8f9:	83 fa 2f             	cmp    edx,0x2f
c000f8fc:	7e ef                	jle    c000f8ed <Phys::allocateDMA(unsigned long)+0x32>
c000f8fe:	5b                   	pop    ebx
c000f8ff:	31 c0                	xor    eax,eax
c000f901:	5e                   	pop    esi
c000f902:	5f                   	pop    edi
c000f903:	5d                   	pop    ebp
c000f904:	c3                   	ret    
c000f905:	8d 14 30             	lea    edx,[eax+esi*1]
c000f908:	89 d7                	mov    edi,edx
c000f90a:	4f                   	dec    edi
c000f90b:	79 03                	jns    c000f910 <Phys::allocateDMA(unsigned long)+0x55>
c000f90d:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f910:	c1 ff 04             	sar    edi,0x4
c000f913:	89 c2                	mov    edx,eax
c000f915:	c1 fa 04             	sar    edx,0x4
c000f918:	39 fa                	cmp    edx,edi
c000f91a:	75 2f                	jne    c000f94b <Phys::allocateDMA(unsigned long)+0x90>
c000f91c:	85 db                	test   ebx,ebx
c000f91e:	74 1a                	je     c000f93a <Phys::allocateDMA(unsigned long)+0x7f>
c000f920:	be 00 c9 02 c0       	mov    esi,0xc002c900
c000f925:	8d 90 00 c9 02 c0    	lea    edx,[eax-0x3ffd3700]
c000f92b:	f7 d6                	not    esi
c000f92d:	29 c6                	sub    esi,eax
c000f92f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f932:	42                   	inc    edx
c000f933:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f936:	39 d9                	cmp    ecx,ebx
c000f938:	7f f5                	jg     c000f92f <Phys::allocateDMA(unsigned long)+0x74>
c000f93a:	85 ff                	test   edi,edi
c000f93c:	74 13                	je     c000f951 <Phys::allocateDMA(unsigned long)+0x96>
c000f93e:	5b                   	pop    ebx
c000f93f:	05 50 20 0c 00       	add    eax,0xc2050
c000f944:	5e                   	pop    esi
c000f945:	c1 e0 0c             	shl    eax,0xc
c000f948:	5f                   	pop    edi
c000f949:	5d                   	pop    ebp
c000f94a:	c3                   	ret    
c000f94b:	89 ea                	mov    edx,ebp
c000f94d:	31 c9                	xor    ecx,ecx
c000f94f:	eb a7                	jmp    c000f8f8 <Phys::allocateDMA(unsigned long)+0x3d>
c000f951:	5b                   	pop    ebx
c000f952:	c1 e0 0c             	shl    eax,0xc
c000f955:	5e                   	pop    esi
c000f956:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f95b:	5f                   	pop    edi
c000f95c:	5d                   	pop    ebp
c000f95d:	c3                   	ret    

c000f95e <Phys::freeDMA(unsigned long, unsigned long)>:
c000f95e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f962:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f966:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f96c:	c1 e9 0c             	shr    ecx,0xc
c000f96f:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f974:	76 25                	jbe    c000f99b <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f976:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f97b:	c1 e8 0c             	shr    eax,0xc
c000f97e:	8d 50 10             	lea    edx,[eax+0x10]
c000f981:	85 c9                	test   ecx,ecx
c000f983:	74 15                	je     c000f99a <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f985:	8d 82 00 c9 02 c0    	lea    eax,[edx-0x3ffd3700]
c000f98b:	8d 94 11 00 c9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3700]
c000f992:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f995:	40                   	inc    eax
c000f996:	39 d0                	cmp    eax,edx
c000f998:	75 f8                	jne    c000f992 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f99a:	c3                   	ret    
c000f99b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f9a1:	c1 ea 0c             	shr    edx,0xc
c000f9a4:	eb db                	jmp    c000f981 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f9a6 <Phys::setPageState(unsigned long, bool)>:
c000f9a6:	56                   	push   esi
c000f9a7:	ba 01 00 00 00       	mov    edx,0x1
c000f9ac:	53                   	push   ebx
c000f9ad:	8b 35 d0 b7 02 c0    	mov    esi,DWORD PTR ds:0xc002b7d0
c000f9b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9bb:	89 c8                	mov    eax,ecx
c000f9bd:	83 e1 07             	and    ecx,0x7
c000f9c0:	c1 e8 03             	shr    eax,0x3
c000f9c3:	d3 e3                	shl    ebx,cl
c000f9c5:	01 c6                	add    esi,eax
c000f9c7:	d3 e2                	shl    edx,cl
c000f9c9:	f7 d2                	not    edx
c000f9cb:	20 16                	and    BYTE PTR [esi],dl
c000f9cd:	03 05 d0 b7 02 c0    	add    eax,DWORD PTR ds:0xc002b7d0
c000f9d3:	08 18                	or     BYTE PTR [eax],bl
c000f9d5:	5b                   	pop    ebx
c000f9d6:	5e                   	pop    esi
c000f9d7:	c3                   	ret    

c000f9d8 <Phys::getPageState(unsigned long)>:
c000f9d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9dc:	8b 15 d0 b7 02 c0    	mov    edx,DWORD PTR ds:0xc002b7d0
c000f9e2:	89 c8                	mov    eax,ecx
c000f9e4:	83 e1 07             	and    ecx,0x7
c000f9e7:	c1 e8 03             	shr    eax,0x3
c000f9ea:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9ee:	d3 f8                	sar    eax,cl
c000f9f0:	83 e0 01             	and    eax,0x1
c000f9f3:	c3                   	ret    

c000f9f4 <Phys::freePage(unsigned long)>:
c000f9f4:	53                   	push   ebx
c000f9f5:	83 ec 08             	sub    esp,0x8
c000f9f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9fc:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fa02:	76 57                	jbe    c000fa5b <Phys::freePage(unsigned long)+0x67>
c000fa04:	c1 eb 0c             	shr    ebx,0xc
c000fa07:	53                   	push   ebx
c000fa08:	e8 cb ff ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000fa0d:	5a                   	pop    edx
c000fa0e:	84 c0                	test   al,al
c000fa10:	74 5b                	je     c000fa6d <Phys::freePage(unsigned long)+0x79>
c000fa12:	a1 ec c8 02 c0       	mov    eax,ds:0xc002c8ec
c000fa17:	48                   	dec    eax
c000fa18:	a3 ec c8 02 c0       	mov    ds:0xc002c8ec,eax
c000fa1d:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa20:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa23:	c1 e0 02             	shl    eax,0x2
c000fa26:	99                   	cdq    
c000fa27:	f7 3d f0 c8 02 c0    	idiv   DWORD PTR ds:0xc002c8f0
c000fa2d:	39 05 e8 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8e8,eax
c000fa33:	75 13                	jne    c000fa48 <Phys::freePage(unsigned long)+0x54>
c000fa35:	83 ec 08             	sub    esp,0x8
c000fa38:	6a 00                	push   0x0
c000fa3a:	53                   	push   ebx
c000fa3b:	e8 66 ff ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fa40:	83 c4 10             	add    esp,0x10
c000fa43:	83 c4 08             	add    esp,0x8
c000fa46:	5b                   	pop    ebx
c000fa47:	c3                   	ret    
c000fa48:	83 ec 0c             	sub    esp,0xc
c000fa4b:	a3 e8 c8 02 c0       	mov    ds:0xc002c8e8,eax
c000fa50:	50                   	push   eax
c000fa51:	e8 5a 0a 00 00       	call   c00104b0 <VgaText::updateRAMUsageDisplay(int)>
c000fa56:	83 c4 10             	add    esp,0x10
c000fa59:	eb da                	jmp    c000fa35 <Phys::freePage(unsigned long)+0x41>
c000fa5b:	68 00 10 00 00       	push   0x1000
c000fa60:	53                   	push   ebx
c000fa61:	e8 f8 fe ff ff       	call   c000f95e <Phys::freeDMA(unsigned long, unsigned long)>
c000fa66:	59                   	pop    ecx
c000fa67:	5b                   	pop    ebx
c000fa68:	83 c4 08             	add    esp,0x8
c000fa6b:	5b                   	pop    ebx
c000fa6c:	c3                   	ret    
c000fa6d:	c7 44 24 10 e7 8a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028ae7
c000fa75:	83 c4 08             	add    esp,0x8
c000fa78:	5b                   	pop    ebx
c000fa79:	e9 6d 9d 00 00       	jmp    c00197eb <Krnl::panic(char const*)>

c000fa7e <Phys::allocatePage()>:
c000fa7e:	56                   	push   esi
c000fa7f:	53                   	push   ebx
c000fa80:	51                   	push   ecx
c000fa81:	8b 35 e0 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8e0
c000fa87:	89 f3                	mov    ebx,esi
c000fa89:	eb 0a                	jmp    c000fa95 <Phys::allocatePage()+0x17>
c000fa8b:	89 1d e0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8e0,ebx
c000fa91:	39 de                	cmp    esi,ebx
c000fa93:	74 24                	je     c000fab9 <Phys::allocatePage()+0x3b>
c000fa95:	53                   	push   ebx
c000fa96:	e8 3d ff ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000fa9b:	5a                   	pop    edx
c000fa9c:	84 c0                	test   al,al
c000fa9e:	74 5a                	je     c000fafa <Phys::allocatePage()+0x7c>
c000faa0:	43                   	inc    ebx
c000faa1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faa7:	75 e2                	jne    c000fa8b <Phys::allocatePage()+0xd>
c000faa9:	31 db                	xor    ebx,ebx
c000faab:	c7 05 e0 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c8e0,0x0
c000fab5:	39 de                	cmp    esi,ebx
c000fab7:	75 dc                	jne    c000fa95 <Phys::allocatePage()+0x17>
c000fab9:	83 ec 0c             	sub    esp,0xc
c000fabc:	68 fd 8a 02 c0       	push   0xc0028afd
c000fac1:	e8 0b 2c 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000fac6:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000facd:	e8 e9 fd ff ff       	call   c000f8bb <Phys::allocateDMA(unsigned long)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	85 c0                	test   eax,eax
c000fad7:	75 56                	jne    c000fb2f <Phys::allocatePage()+0xb1>
c000fad9:	83 ec 0c             	sub    esp,0xc
c000fadc:	68 0e 8b 02 c0       	push   0xc0028b0e
c000fae1:	e8 05 9d 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	8b 1d e0 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8e0
c000faef:	53                   	push   ebx
c000faf0:	e8 e3 fe ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000faf5:	5a                   	pop    edx
c000faf6:	84 c0                	test   al,al
c000faf8:	75 a6                	jne    c000faa0 <Phys::allocatePage()+0x22>
c000fafa:	6a 01                	push   0x1
c000fafc:	53                   	push   ebx
c000fafd:	e8 a4 fe ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fb02:	a1 ec c8 02 c0       	mov    eax,ds:0xc002c8ec
c000fb07:	59                   	pop    ecx
c000fb08:	40                   	inc    eax
c000fb09:	5b                   	pop    ebx
c000fb0a:	a3 ec c8 02 c0       	mov    ds:0xc002c8ec,eax
c000fb0f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb12:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb15:	c1 e0 02             	shl    eax,0x2
c000fb18:	99                   	cdq    
c000fb19:	f7 3d f0 c8 02 c0    	idiv   DWORD PTR ds:0xc002c8f0
c000fb1f:	39 05 e8 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8e8,eax
c000fb25:	75 0c                	jne    c000fb33 <Phys::allocatePage()+0xb5>
c000fb27:	a1 e0 c8 02 c0       	mov    eax,ds:0xc002c8e0
c000fb2c:	c1 e0 0c             	shl    eax,0xc
c000fb2f:	5a                   	pop    edx
c000fb30:	5b                   	pop    ebx
c000fb31:	5e                   	pop    esi
c000fb32:	c3                   	ret    
c000fb33:	83 ec 0c             	sub    esp,0xc
c000fb36:	a3 e8 c8 02 c0       	mov    ds:0xc002c8e8,eax
c000fb3b:	50                   	push   eax
c000fb3c:	e8 6f 09 00 00       	call   c00104b0 <VgaText::updateRAMUsageDisplay(int)>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	eb e1                	jmp    c000fb27 <Phys::allocatePage()+0xa9>

c000fb46 <Phys::allocateContiguousPages(int)>:
c000fb46:	57                   	push   edi
c000fb47:	56                   	push   esi
c000fb48:	53                   	push   ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fb4f:	e8 26 d1 00 00       	call   c001cc7a <lockScheduler()>
c000fb54:	85 db                	test   ebx,ebx
c000fb56:	75 11                	jne    c000fb69 <Phys::allocateContiguousPages(int)+0x23>
c000fb58:	e8 21 ff ff ff       	call   c000fa7e <Phys::allocatePage()>
c000fb5d:	83 ff 01             	cmp    edi,0x1
c000fb60:	89 c6                	mov    esi,eax
c000fb62:	74 21                	je     c000fb85 <Phys::allocateContiguousPages(int)+0x3f>
c000fb64:	bb 01 00 00 00       	mov    ebx,0x1
c000fb69:	e8 10 ff ff ff       	call   c000fa7e <Phys::allocatePage()>
c000fb6e:	89 da                	mov    edx,ebx
c000fb70:	c1 e2 0c             	shl    edx,0xc
c000fb73:	01 f2                	add    edx,esi
c000fb75:	39 c2                	cmp    edx,eax
c000fb77:	74 17                	je     c000fb90 <Phys::allocateContiguousPages(int)+0x4a>
c000fb79:	bb 01 00 00 00       	mov    ebx,0x1
c000fb7e:	89 c6                	mov    esi,eax
c000fb80:	83 ff 01             	cmp    edi,0x1
c000fb83:	75 e4                	jne    c000fb69 <Phys::allocateContiguousPages(int)+0x23>
c000fb85:	e8 f2 d0 00 00       	call   c001cc7c <unlockScheduler()>
c000fb8a:	89 f0                	mov    eax,esi
c000fb8c:	5b                   	pop    ebx
c000fb8d:	5e                   	pop    esi
c000fb8e:	5f                   	pop    edi
c000fb8f:	c3                   	ret    
c000fb90:	43                   	inc    ebx
c000fb91:	39 fb                	cmp    ebx,edi
c000fb93:	75 bf                	jne    c000fb54 <Phys::allocateContiguousPages(int)+0xe>
c000fb95:	e8 e2 d0 00 00       	call   c001cc7c <unlockScheduler()>
c000fb9a:	89 f0                	mov    eax,esi
c000fb9c:	5b                   	pop    ebx
c000fb9d:	5e                   	pop    esi
c000fb9e:	5f                   	pop    edi
c000fb9f:	c3                   	ret    

c000fba0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fba0:	56                   	push   esi
c000fba1:	53                   	push   ebx
c000fba2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fba6:	39 1d e4 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8e4,ebx
c000fbac:	73 06                	jae    c000fbb4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fbae:	89 1d e4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8e4,ebx
c000fbb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbb8:	c1 eb 0c             	shr    ebx,0xc
c000fbbb:	c1 e8 0c             	shr    eax,0xc
c000fbbe:	39 d8                	cmp    eax,ebx
c000fbc0:	73 13                	jae    c000fbd5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fbc2:	6a 00                	push   0x0
c000fbc4:	8d 70 01             	lea    esi,[eax+0x1]
c000fbc7:	50                   	push   eax
c000fbc8:	e8 d9 fd ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fbcd:	5a                   	pop    edx
c000fbce:	89 f0                	mov    eax,esi
c000fbd0:	59                   	pop    ecx
c000fbd1:	39 f3                	cmp    ebx,esi
c000fbd3:	75 ed                	jne    c000fbc2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fbd5:	5b                   	pop    ebx
c000fbd6:	5e                   	pop    esi
c000fbd7:	c3                   	ret    

c000fbd8 <Phys::physicalMemorySetup(unsigned int)>:
c000fbd8:	55                   	push   ebp
c000fbd9:	57                   	push   edi
c000fbda:	56                   	push   esi
c000fbdb:	53                   	push   ebx
c000fbdc:	31 db                	xor    ebx,ebx
c000fbde:	83 ec 40             	sub    esp,0x40
c000fbe1:	6a 30                	push   0x30
c000fbe3:	6a 00                	push   0x0
c000fbe5:	68 00 c9 02 c0       	push   0xc002c900
c000fbea:	e8 9c 0a ff ff       	call   c000068b <memset>
c000fbef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fbf3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fbf8:	05 00 10 00 00       	add    eax,0x1000
c000fbfd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	83 ec 08             	sub    esp,0x8
c000fc07:	6a 01                	push   0x1
c000fc09:	53                   	push   ebx
c000fc0a:	43                   	inc    ebx
c000fc0b:	e8 96 fd ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fc10:	83 c4 10             	add    esp,0x10
c000fc13:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc19:	75 e9                	jne    c000fc04 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fc1b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fc22:	66 85 c0             	test   ax,ax
c000fc25:	0f 84 8e 01 00 00    	je     c000fdb9 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fc2b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc2f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc3b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fc40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc44:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fc4c:	eb 15                	jmp    c000fc63 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fc4e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fc52:	83 c3 18             	add    ebx,0x18
c000fc55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc59:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc5d:	0f 84 66 01 00 00    	je     c000fdc9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc63:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc70:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc74:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc76:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc79:	01 f0                	add    eax,esi
c000fc7b:	55                   	push   ebp
c000fc7c:	11 fa                	adc    edx,edi
c000fc7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc82:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc8a:	56                   	push   esi
c000fc8b:	68 48 8b 02 c0       	push   0xc0028b48
c000fc90:	e8 3c 2a 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000fc95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	09 f8                	or     eax,edi
c000fc9e:	0f 85 25 01 00 00    	jne    c000fdc9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fca4:	4d                   	dec    ebp
c000fca5:	75 a7                	jne    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fca7:	ba 00 00 08 00       	mov    edx,0x80000
c000fcac:	89 c1                	mov    ecx,eax
c000fcae:	39 f2                	cmp    edx,esi
c000fcb0:	19 f9                	sbb    ecx,edi
c000fcb2:	0f 82 a7 00 00 00    	jb     c000fd5f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcb8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fcbc:	89 c1                	mov    ecx,eax
c000fcbe:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fcc2:	0f 83 97 00 00 00    	jae    c000fd5f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcc8:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fcd1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fcd5:	39 fa                	cmp    edx,edi
c000fcd7:	19 e8                	sbb    eax,ebp
c000fcd9:	0f 82 14 01 00 00    	jb     c000fdf3 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fcdf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fce3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fce7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fced:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcf2:	83 d5 ff             	adc    ebp,0xffffffff
c000fcf5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fcf9:	31 c0                	xor    eax,eax
c000fcfb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fcff:	39 fa                	cmp    edx,edi
c000fd01:	89 c1                	mov    ecx,eax
c000fd03:	19 e9                	sbb    ecx,ebp
c000fd05:	0f 83 43 ff ff ff    	jae    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd0b:	be 00 00 08 00       	mov    esi,0x80000
c000fd10:	50                   	push   eax
c000fd11:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd15:	57                   	push   edi
c000fd16:	56                   	push   esi
c000fd17:	68 6c 8b 02 c0       	push   0xc0028b6c
c000fd1c:	e8 b0 29 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000fd21:	5a                   	pop    edx
c000fd22:	59                   	pop    ecx
c000fd23:	57                   	push   edi
c000fd24:	56                   	push   esi
c000fd25:	e8 76 fe ff ff       	call   c000fba0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd2a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd32:	83 c4 0c             	add    esp,0xc
c000fd35:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd39:	03 05 f0 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c8f0
c000fd3f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd46:	a3 f0 c8 02 c0       	mov    ds:0xc002c8f0,eax
c000fd4b:	52                   	push   edx
c000fd4c:	50                   	push   eax
c000fd4d:	68 2a 8b 02 c0       	push   0xc0028b2a
c000fd52:	e8 7a 29 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c000fd57:	83 c4 10             	add    esp,0x10
c000fd5a:	e9 ef fe ff ff       	jmp    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd5f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd6b:	39 ea                	cmp    edx,ebp
c000fd6d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd71:	0f 82 d7 fe ff ff    	jb     c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd77:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd7c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd80:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd84:	0f 83 c4 fe ff ff    	jae    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd8a:	39 ee                	cmp    esi,ebp
c000fd8c:	89 f8                	mov    eax,edi
c000fd8e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd92:	0f 83 78 ff ff ff    	jae    c000fd10 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fda0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fda4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fda8:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fdac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fdb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdb4:	e9 57 ff ff ff       	jmp    c000fd10 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fdb9:	83 ec 0c             	sub    esp,0xc
c000fdbc:	68 1c 8b 02 c0       	push   0xc0028b1c
c000fdc1:	e8 25 9a 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000fdc6:	83 c4 10             	add    esp,0x10
c000fdc9:	bb 40 01 00 00       	mov    ebx,0x140
c000fdce:	83 ec 08             	sub    esp,0x8
c000fdd1:	6a 00                	push   0x0
c000fdd3:	53                   	push   ebx
c000fdd4:	43                   	inc    ebx
c000fdd5:	e8 cc fb ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fdda:	ff 05 f0 c8 02 c0    	inc    DWORD PTR ds:0xc002c8f0
c000fde0:	83 c4 10             	add    esp,0x10
c000fde3:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fde9:	75 e3                	jne    c000fdce <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fdeb:	83 c4 3c             	add    esp,0x3c
c000fdee:	5b                   	pop    ebx
c000fdef:	5e                   	pop    esi
c000fdf0:	5f                   	pop    edi
c000fdf1:	5d                   	pop    ebp
c000fdf2:	c3                   	ret    
c000fdf3:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fdfb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fe03:	e9 d7 fe ff ff       	jmp    c000fcdf <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fe08 <Pipe::isAtty()>:
c000fe08:	31 c0                	xor    eax,eax
c000fe0a:	c3                   	ret    
c000fe0b:	90                   	nop

c000fe0c <Pipe::~Pipe()>:
c000fe0c:	83 ec 0c             	sub    esp,0xc
c000fe0f:	ba d8 8b 02 c0       	mov    edx,0xc0028bd8
c000fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe18:	89 10                	mov    DWORD PTR [eax],edx
c000fe1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	50                   	push   eax
c000fe22:	e8 59 16 00 00       	call   c0011480 <UnixFile::~UnixFile()>
c000fe27:	83 c4 10             	add    esp,0x10
c000fe2a:	90                   	nop
c000fe2b:	83 c4 0c             	add    esp,0xc
c000fe2e:	c3                   	ret    
c000fe2f:	90                   	nop

c000fe30 <Pipe::~Pipe()>:
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	83 ec 0c             	sub    esp,0xc
c000fe36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe3a:	e8 cd ff ff ff       	call   c000fe0c <Pipe::~Pipe()>
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	83 ec 08             	sub    esp,0x8
c000fe45:	6a 20                	push   0x20
c000fe47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4b:	e8 a1 27 00 00       	call   c00125f1 <operator delete(void*, unsigned long)>
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	83 c4 0c             	add    esp,0xc
c000fe56:	c3                   	ret    
c000fe57:	90                   	nop

c000fe58 <Pipe::read(unsigned long long, void*, int*)>:
c000fe58:	55                   	push   ebp
c000fe59:	57                   	push   edi
c000fe5a:	56                   	push   esi
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 1c             	sub    esp,0x1c
c000fe5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe63:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe67:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe6b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe6e:	89 c8                	mov    eax,ecx
c000fe70:	99                   	cdq    
c000fe71:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe75:	74 19                	je     c000fe90 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe77:	39 f9                	cmp    ecx,edi
c000fe79:	89 d1                	mov    ecx,edx
c000fe7b:	19 f1                	sbb    ecx,esi
c000fe7d:	73 11                	jae    c000fe90 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe7f:	e8 f6 cd 00 00       	call   c001cc7a <lockScheduler()>
c000fe84:	e8 2d d1 00 00       	call   c001cfb6 <schedule()>
c000fe89:	e8 ee cd 00 00       	call   c001cc7c <unlockScheduler()>
c000fe8e:	eb db                	jmp    c000fe6b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe90:	39 f8                	cmp    eax,edi
c000fe92:	89 d1                	mov    ecx,edx
c000fe94:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe98:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe9c:	19 f1                	sbb    ecx,esi
c000fe9e:	73 08                	jae    c000fea8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fea0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fea4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fea8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000feab:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000feae:	29 c6                	sub    esi,eax
c000feb0:	89 f1                	mov    ecx,esi
c000feb2:	c1 f9 1f             	sar    ecx,0x1f
c000feb5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000feb9:	89 ca                	mov    edx,ecx
c000febb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000febf:	19 d1                	sbb    ecx,edx
c000fec1:	73 04                	jae    c000fec7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fec3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fec7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fecb:	89 fd                	mov    ebp,edi
c000fecd:	29 f5                	sub    ebp,esi
c000fecf:	85 f6                	test   esi,esi
c000fed1:	74 12                	je     c000fee5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fed3:	52                   	push   edx
c000fed4:	56                   	push   esi
c000fed5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fed8:	50                   	push   eax
c000fed9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fedd:	e8 73 07 ff ff       	call   c0000655 <memcpy>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	85 ed                	test   ebp,ebp
c000fee7:	74 12                	je     c000fefb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fee9:	50                   	push   eax
c000feea:	55                   	push   ebp
c000feeb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000feee:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fef2:	56                   	push   esi
c000fef3:	e8 5d 07 ff ff       	call   c0000655 <memcpy>
c000fef8:	83 c4 10             	add    esp,0x10
c000fefb:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fefe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff01:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff04:	99                   	cdq    
c000ff05:	89 f7                	mov    edi,esi
c000ff07:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ff0b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ff0f:	c1 ff 1f             	sar    edi,0x1f
c000ff12:	57                   	push   edi
c000ff13:	56                   	push   esi
c000ff14:	52                   	push   edx
c000ff15:	50                   	push   eax
c000ff16:	e8 e1 54 01 00       	call   c00253fc <__umoddi3>
c000ff1b:	83 c4 10             	add    esp,0x10
c000ff1e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff21:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff26:	75 10                	jne    c000ff38 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	68 95 8b 02 c0       	push   0xc0028b95
c000ff30:	e8 b6 98 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff40:	89 10                	mov    DWORD PTR [eax],edx
c000ff42:	83 c4 1c             	add    esp,0x1c
c000ff45:	31 c0                	xor    eax,eax
c000ff47:	5b                   	pop    ebx
c000ff48:	5e                   	pop    esi
c000ff49:	5f                   	pop    edi
c000ff4a:	5d                   	pop    ebp
c000ff4b:	c3                   	ret    

c000ff4c <Pipe::write(unsigned long long, void*, int*)>:
c000ff4c:	55                   	push   ebp
c000ff4d:	57                   	push   edi
c000ff4e:	56                   	push   esi
c000ff4f:	53                   	push   ebx
c000ff50:	83 ec 1c             	sub    esp,0x1c
c000ff53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff57:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ff5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff62:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff65:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff6c:	89 de                	mov    esi,ebx
c000ff6e:	89 df                	mov    edi,ebx
c000ff70:	c1 ff 1f             	sar    edi,0x1f
c000ff73:	01 c6                	add    esi,eax
c000ff75:	89 c8                	mov    eax,ecx
c000ff77:	11 d7                	adc    edi,edx
c000ff79:	99                   	cdq    
c000ff7a:	39 f1                	cmp    ecx,esi
c000ff7c:	89 d0                	mov    eax,edx
c000ff7e:	19 f8                	sbb    eax,edi
c000ff80:	b8 01 00 00 00       	mov    eax,0x1
c000ff85:	0f 82 80 00 00 00    	jb     c001000b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff8b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff8e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff91:	01 d8                	add    eax,ebx
c000ff93:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff97:	99                   	cdq    
c000ff98:	f7 f9                	idiv   ecx
c000ff9a:	29 d1                	sub    ecx,edx
c000ff9c:	89 d7                	mov    edi,edx
c000ff9e:	89 c8                	mov    eax,ecx
c000ffa0:	99                   	cdq    
c000ffa1:	39 ce                	cmp    esi,ecx
c000ffa3:	19 d3                	sbb    ebx,edx
c000ffa5:	bb 00 00 00 00       	mov    ebx,0x0
c000ffaa:	72 04                	jb     c000ffb0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ffac:	89 f3                	mov    ebx,esi
c000ffae:	29 cb                	sub    ebx,ecx
c000ffb0:	89 f1                	mov    ecx,esi
c000ffb2:	29 d9                	sub    ecx,ebx
c000ffb4:	74 1a                	je     c000ffd0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ffb6:	52                   	push   edx
c000ffb7:	51                   	push   ecx
c000ffb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ffbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ffc0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ffc3:	57                   	push   edi
c000ffc4:	e8 8c 06 ff ff       	call   c0000655 <memcpy>
c000ffc9:	83 c4 10             	add    esp,0x10
c000ffcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffd0:	85 db                	test   ebx,ebx
c000ffd2:	74 12                	je     c000ffe6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ffd4:	50                   	push   eax
c000ffd5:	53                   	push   ebx
c000ffd6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ffda:	51                   	push   ecx
c000ffdb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ffde:	e8 72 06 ff ff       	call   c0000655 <memcpy>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ffe9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ffee:	75 10                	jne    c0010000 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fff0:	83 ec 0c             	sub    esp,0xc
c000fff3:	68 b1 8b 02 c0       	push   0xc0028bb1
c000fff8:	e8 ee 97 00 00       	call   c00197eb <Krnl::panic(char const*)>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010004:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010007:	89 38                	mov    DWORD PTR [eax],edi
c0010009:	31 c0                	xor    eax,eax
c001000b:	83 c4 1c             	add    esp,0x1c
c001000e:	5b                   	pop    ebx
c001000f:	5e                   	pop    esi
c0010010:	5f                   	pop    edi
c0010011:	5d                   	pop    ebp
c0010012:	c3                   	ret    
c0010013:	90                   	nop

c0010014 <Pipe::Pipe(int)>:
c0010014:	83 ec 0c             	sub    esp,0xc
c0010017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001b:	83 ec 08             	sub    esp,0x8
c001001e:	6a 00                	push   0x0
c0010020:	50                   	push   eax
c0010021:	e8 78 12 00 00       	call   c001129e <UnixFile::UnixFile(int)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	ba d8 8b 02 c0       	mov    edx,0xc0028bd8
c001002e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010032:	89 10                	mov    DWORD PTR [eax],edx
c0010034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010038:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001003c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001003f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010043:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001004a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001004e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010055:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010059:	83 ec 0c             	sub    esp,0xc
c001005c:	50                   	push   eax
c001005d:	e8 72 f4 ff ff       	call   c000f4d4 <malloc>
c0010062:	83 c4 10             	add    esp,0x10
c0010065:	89 c2                	mov    edx,eax
c0010067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001006b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001006e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010072:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010076:	90                   	nop
c0010077:	83 c4 0c             	add    esp,0xc
c001007a:	c3                   	ret    
c001007b:	90                   	nop

c001007c <VgaText::isAtty()>:
c001007c:	b0 01                	mov    al,0x1
c001007e:	c3                   	ret    
c001007f:	90                   	nop

c0010080 <VgaText::~VgaText()>:
c0010080:	83 ec 0c             	sub    esp,0xc
c0010083:	ba 94 8c 02 c0       	mov    edx,0xc0028c94
c0010088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008c:	89 10                	mov    DWORD PTR [eax],edx
c001008e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010092:	83 ec 0c             	sub    esp,0xc
c0010095:	50                   	push   eax
c0010096:	e8 e5 13 00 00       	call   c0011480 <UnixFile::~UnixFile()>
c001009b:	83 c4 10             	add    esp,0x10
c001009e:	90                   	nop
c001009f:	83 c4 0c             	add    esp,0xc
c00100a2:	c3                   	ret    
c00100a3:	90                   	nop

c00100a4 <VgaText::~VgaText()>:
c00100a4:	83 ec 0c             	sub    esp,0xc
c00100a7:	83 ec 0c             	sub    esp,0xc
c00100aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ae:	e8 cd ff ff ff       	call   c0010080 <VgaText::~VgaText()>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	83 ec 08             	sub    esp,0x8
c00100b9:	68 60 12 00 00       	push   0x1260
c00100be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c2:	e8 2a 25 00 00       	call   c00125f1 <operator delete(void*, unsigned long)>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	83 c4 0c             	add    esp,0xc
c00100cd:	c3                   	ret    

c00100ce <VgaText::read(unsigned long long, void*, int*)>:
c00100ce:	83 ec 10             	sub    esp,0x10
c00100d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00100d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100dd:	e8 23 58 00 00       	call   c0015905 <readKeyboard(VgaText*, char*, unsigned long)>
c00100e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00100e6:	89 02                	mov    DWORD PTR [edx],eax
c00100e8:	31 c0                	xor    eax,eax
c00100ea:	83 c4 1c             	add    esp,0x1c
c00100ed:	c3                   	ret    

c00100ee <setTerminalScrollLock(bool)>:
c00100ee:	c3                   	ret    

c00100ef <addToTerminalCycle(VgaText*)>:
c00100ef:	8b 15 60 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c960
c00100f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100f9:	85 d2                	test   edx,edx
c00100fb:	75 0c                	jne    c0010109 <addToTerminalCycle(VgaText*)+0x1a>
c00100fd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010103:	a3 60 c9 02 c0       	mov    ds:0xc002c960,eax
c0010108:	c3                   	ret    
c0010109:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001010f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010115:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001011b:	c3                   	ret    

c001011c <installVgaTextImplementation()>:
c001011c:	83 ec 10             	sub    esp,0x10
c001011f:	6a 20                	push   0x20
c0010121:	6a 00                	push   0x0
c0010123:	68 40 c9 02 c0       	push   0xc002c940
c0010128:	e8 5e 05 ff ff       	call   c000068b <memset>
c001012d:	83 c4 1c             	add    esp,0x1c
c0010130:	c3                   	ret    

c0010131 <scrollTerminalScrollLock(int)>:
c0010131:	c3                   	ret    

c0010132 <VgaText::load()>:
c0010132:	53                   	push   ebx
c0010133:	31 c0                	xor    eax,eax
c0010135:	83 ec 58             	sub    esp,0x58
c0010138:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001013c:	89 e2                	mov    edx,esp
c001013e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010142:	40                   	inc    eax
c0010143:	83 f8 50             	cmp    eax,0x50
c0010146:	75 f6                	jne    c001013e <VgaText::load()+0xc>
c0010148:	31 c0                	xor    eax,eax
c001014a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010151:	84 c9                	test   cl,cl
c0010153:	74 06                	je     c001015b <VgaText::load()+0x29>
c0010155:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010158:	40                   	inc    eax
c0010159:	eb ef                	jmp    c001014a <VgaText::load()+0x18>
c001015b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010161:	85 c0                	test   eax,eax
c0010163:	74 09                	je     c001016e <VgaText::load()+0x3c>
c0010165:	51                   	push   ecx
c0010166:	51                   	push   ecx
c0010167:	52                   	push   edx
c0010168:	53                   	push   ebx
c0010169:	ff d0                	call   eax
c001016b:	83 c4 10             	add    esp,0x10
c001016e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010174:	85 c0                	test   eax,eax
c0010176:	74 09                	je     c0010181 <VgaText::load()+0x4f>
c0010178:	83 ec 0c             	sub    esp,0xc
c001017b:	53                   	push   ebx
c001017c:	ff d0                	call   eax
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	83 c4 58             	add    esp,0x58
c0010184:	5b                   	pop    ebx
c0010185:	c3                   	ret    

c0010186 <VgaText::updateCursor()>:
c0010186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001018a:	39 05 64 c9 02 c0    	cmp    DWORD PTR ds:0xc002c964,eax
c0010190:	75 0c                	jne    c001019e <VgaText::updateCursor()+0x18>
c0010192:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010198:	85 c0                	test   eax,eax
c001019a:	74 02                	je     c001019e <VgaText::updateCursor()+0x18>
c001019c:	ff e0                	jmp    eax
c001019e:	c3                   	ret    
c001019f:	90                   	nop

c00101a0 <VgaText::showCursor(bool)>:
c00101a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101a8:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00101ae:	c3                   	ret    
c00101af:	90                   	nop

c00101b0 <VgaText::disableBlink(bool)>:
c00101b0:	56                   	push   esi
c00101b1:	53                   	push   ebx
c00101b2:	51                   	push   ecx
c00101b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101bb:	39 1d 64 c9 02 c0    	cmp    DWORD PTR ds:0xc002c964,ebx
c00101c1:	75 18                	jne    c00101db <VgaText::disableBlink(bool)+0x2b>
c00101c3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00101c9:	85 c0                	test   eax,eax
c00101cb:	74 0e                	je     c00101db <VgaText::disableBlink(bool)+0x2b>
c00101cd:	89 f1                	mov    ecx,esi
c00101cf:	52                   	push   edx
c00101d0:	52                   	push   edx
c00101d1:	0f b6 d1             	movzx  edx,cl
c00101d4:	52                   	push   edx
c00101d5:	53                   	push   ebx
c00101d6:	ff d0                	call   eax
c00101d8:	83 c4 10             	add    esp,0x10
c00101db:	89 f0                	mov    eax,esi
c00101dd:	83 f0 01             	xor    eax,0x1
c00101e0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00101e6:	58                   	pop    eax
c00101e7:	5b                   	pop    ebx
c00101e8:	5e                   	pop    esi
c00101e9:	c3                   	ret    

c00101ea <VgaText::doANSI_SGR(int)>:
c00101ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101f2:	85 d2                	test   edx,edx
c00101f4:	75 14                	jne    c001020a <VgaText::doANSI_SGR(int)+0x20>
c00101f6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00101fc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010202:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010208:	eb 65                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c001020a:	83 fa 07             	cmp    edx,0x7
c001020d:	75 14                	jne    c0010223 <VgaText::doANSI_SGR(int)+0x39>
c001020f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010215:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001021b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010221:	eb 4c                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c0010223:	83 fa 1b             	cmp    edx,0x1b
c0010226:	74 ce                	je     c00101f6 <VgaText::doANSI_SGR(int)+0xc>
c0010228:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001022b:	83 f9 07             	cmp    ecx,0x7
c001022e:	77 09                	ja     c0010239 <VgaText::doANSI_SGR(int)+0x4f>
c0010230:	8b 14 8d 00 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4800]
c0010237:	eb 20                	jmp    c0010259 <VgaText::doANSI_SGR(int)+0x6f>
c0010239:	8d 4a d8             	lea    ecx,[edx-0x28]
c001023c:	83 f9 07             	cmp    ecx,0x7
c001023f:	77 09                	ja     c001024a <VgaText::doANSI_SGR(int)+0x60>
c0010241:	8b 14 8d 00 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4800]
c0010248:	eb 25                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c001024a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001024d:	83 f9 07             	cmp    ecx,0x7
c0010250:	77 0e                	ja     c0010260 <VgaText::doANSI_SGR(int)+0x76>
c0010252:	8b 14 95 b8 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4948]
c0010259:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001025f:	c3                   	ret    
c0010260:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010263:	83 f9 07             	cmp    ecx,0x7
c0010266:	77 0d                	ja     c0010275 <VgaText::doANSI_SGR(int)+0x8b>
c0010268:	8b 14 95 90 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4970]
c001026f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010275:	c3                   	ret    

c0010276 <VgaText::setDefaultBgColour(VgaColour)>:
c0010276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001027a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001027e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010284:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001028a:	c3                   	ret    
c001028b:	90                   	nop

c001028c <VgaText::setDefaultFgColour(VgaColour)>:
c001028c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010290:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010294:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001029a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00102a2:	53                   	push   ebx
c00102a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00102ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102af:	51                   	push   ecx
c00102b0:	e8 c1 ff ff ff       	call   c0010276 <VgaText::setDefaultBgColour(VgaColour)>
c00102b5:	58                   	pop    eax
c00102b6:	5a                   	pop    edx
c00102b7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00102bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00102bf:	5b                   	pop    ebx
c00102c0:	eb ca                	jmp    c001028c <VgaText::setDefaultFgColour(VgaColour)>

c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00102c2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00102c6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00102cb:	83 e0 0f             	and    eax,0xf
c00102ce:	c1 e2 04             	shl    edx,0x4
c00102d1:	09 d0                	or     eax,edx
c00102d3:	c3                   	ret    

c00102d4 <VgaText::scrollScreen()>:
c00102d4:	57                   	push   edi
c00102d5:	56                   	push   esi
c00102d6:	be 01 00 00 00       	mov    esi,0x1
c00102db:	53                   	push   ebx
c00102dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102e0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00102e6:	31 ff                	xor    edi,edi
c00102e8:	01 d9                	add    ecx,ebx
c00102ea:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00102ed:	83 fe 17             	cmp    esi,0x17
c00102f0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00102f6:	75 28                	jne    c0010320 <VgaText::scrollScreen()+0x4c>
c00102f8:	f7 c7 01 00 00 00    	test   edi,0x1
c00102fe:	74 1c                	je     c001031c <VgaText::scrollScreen()+0x48>
c0010300:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010307:	50                   	push   eax
c0010308:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001030f:	50                   	push   eax
c0010310:	e8 ad ff ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010315:	5a                   	pop    edx
c0010316:	5a                   	pop    edx
c0010317:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001031a:	eb 04                	jmp    c0010320 <VgaText::scrollScreen()+0x4c>
c001031c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010320:	47                   	inc    edi
c0010321:	41                   	inc    ecx
c0010322:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010328:	75 c0                	jne    c00102ea <VgaText::scrollScreen()+0x16>
c001032a:	46                   	inc    esi
c001032b:	83 fe 18             	cmp    esi,0x18
c001032e:	75 b0                	jne    c00102e0 <VgaText::scrollScreen()+0xc>
c0010330:	39 1d 64 c9 02 c0    	cmp    DWORD PTR ds:0xc002c964,ebx
c0010336:	75 24                	jne    c001035c <VgaText::scrollScreen()+0x88>
c0010338:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001033f:	74 08                	je     c0010349 <VgaText::scrollScreen()+0x75>
c0010341:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010347:	eb 13                	jmp    c001035c <VgaText::scrollScreen()+0x88>
c0010349:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001034f:	85 c0                	test   eax,eax
c0010351:	74 09                	je     c001035c <VgaText::scrollScreen()+0x88>
c0010353:	83 ec 0c             	sub    esp,0xc
c0010356:	53                   	push   ebx
c0010357:	ff d0                	call   eax
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010360:	5b                   	pop    ebx
c0010361:	5e                   	pop    esi
c0010362:	5f                   	pop    edi
c0010363:	e9 1e fe ff ff       	jmp    c0010186 <VgaText::updateCursor()>

c0010368 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010368:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001036d:	c1 e0 08             	shl    eax,0x8
c0010370:	89 c2                	mov    edx,eax
c0010372:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010377:	09 d0                	or     eax,edx
c0010379:	c3                   	ret    

c001037a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001037a:	53                   	push   ebx
c001037b:	83 ec 08             	sub    esp,0x8
c001037e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010382:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010387:	50                   	push   eax
c0010388:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001038d:	50                   	push   eax
c001038e:	e8 2f ff ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010393:	5a                   	pop    edx
c0010394:	0f b6 c0             	movzx  eax,al
c0010397:	5b                   	pop    ebx
c0010398:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001039d:	50                   	push   eax
c001039e:	53                   	push   ebx
c001039f:	e8 c4 ff ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00103a4:	5a                   	pop    edx
c00103a5:	5a                   	pop    edx
c00103a6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00103ac:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00103b0:	0f b7 d2             	movzx  edx,dx
c00103b3:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00103b8:	39 0d 64 c9 02 c0    	cmp    DWORD PTR ds:0xc002c964,ecx
c00103be:	75 14                	jne    c00103d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103c0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00103c6:	85 c0                	test   eax,eax
c00103c8:	74 0a                	je     c00103d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103ca:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00103ce:	83 c4 08             	add    esp,0x8
c00103d1:	5b                   	pop    ebx
c00103d2:	ff e0                	jmp    eax
c00103d4:	83 c4 08             	add    esp,0x8
c00103d7:	5b                   	pop    ebx
c00103d8:	c3                   	ret    
c00103d9:	90                   	nop

c00103da <VgaText::getCursorX()>:
c00103da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103de:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00103e4:	c3                   	ret    
c00103e5:	90                   	nop

c00103e6 <VgaText::getCursorY()>:
c00103e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ea:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00103f0:	c3                   	ret    
c00103f1:	90                   	nop

c00103f2 <VgaText::setCursor(int, int)>:
c00103f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103fa:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010400:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010404:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001040a:	e9 77 fd ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c001040f:	90                   	nop

c0010410 <VgaText::setCursorX(int)>:
c0010410:	83 ec 10             	sub    esp,0x10
c0010413:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010417:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001041d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010421:	50                   	push   eax
c0010422:	e8 cb ff ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c0010427:	83 c4 1c             	add    esp,0x1c
c001042a:	c3                   	ret    
c001042b:	90                   	nop

c001042c <VgaText::setCursorY(int)>:
c001042c:	83 ec 10             	sub    esp,0x10
c001042f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010433:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010437:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001043d:	50                   	push   eax
c001043e:	e8 af ff ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c0010443:	83 c4 1c             	add    esp,0x1c
c0010446:	c3                   	ret    
c0010447:	90                   	nop

c0010448 <VgaText::incrementCursor(bool)>:
c0010448:	56                   	push   esi
c0010449:	53                   	push   ebx
c001044a:	51                   	push   ecx
c001044b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001044f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010453:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010459:	40                   	inc    eax
c001045a:	83 f8 50             	cmp    eax,0x50
c001045d:	74 08                	je     c0010467 <VgaText::incrementCursor(bool)+0x1f>
c001045f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010465:	eb 33                	jmp    c001049a <VgaText::incrementCursor(bool)+0x52>
c0010467:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001046d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010477:	8d 50 01             	lea    edx,[eax+0x1]
c001047a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010480:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010486:	75 12                	jne    c001049a <VgaText::incrementCursor(bool)+0x52>
c0010488:	83 ec 0c             	sub    esp,0xc
c001048b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010491:	53                   	push   ebx
c0010492:	e8 3d fe ff ff       	call   c00102d4 <VgaText::scrollScreen()>
c0010497:	83 c4 10             	add    esp,0x10
c001049a:	89 f0                	mov    eax,esi
c001049c:	84 c0                	test   al,al
c001049e:	74 0c                	je     c00104ac <VgaText::incrementCursor(bool)+0x64>
c00104a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104a4:	5a                   	pop    edx
c00104a5:	5b                   	pop    ebx
c00104a6:	5e                   	pop    esi
c00104a7:	e9 da fc ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c00104ac:	58                   	pop    eax
c00104ad:	5b                   	pop    ebx
c00104ae:	5e                   	pop    esi
c00104af:	c3                   	ret    

c00104b0 <VgaText::updateRAMUsageDisplay(int)>:
c00104b0:	56                   	push   esi
c00104b1:	8b 35 e0 b7 02 c0    	mov    esi,DWORD PTR ds:0xc002b7e0
c00104b7:	53                   	push   ebx
c00104b8:	bb 0a 00 00 00       	mov    ebx,0xa
c00104bd:	6a 0f                	push   0xf
c00104bf:	6a 00                	push   0x0
c00104c1:	e8 fc fd ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c00104c6:	5a                   	pop    edx
c00104c7:	59                   	pop    ecx
c00104c8:	0f b6 c8             	movzx  ecx,al
c00104cb:	51                   	push   ecx
c00104cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d0:	99                   	cdq    
c00104d1:	f7 fb                	idiv   ebx
c00104d3:	89 d3                	mov    ebx,edx
c00104d5:	83 c0 30             	add    eax,0x30
c00104d8:	83 c3 30             	add    ebx,0x30
c00104db:	0f be c0             	movsx  eax,al
c00104de:	0f b6 db             	movzx  ebx,bl
c00104e1:	50                   	push   eax
c00104e2:	e8 81 fe ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00104e7:	5a                   	pop    edx
c00104e8:	5a                   	pop    edx
c00104e9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00104f0:	51                   	push   ecx
c00104f1:	53                   	push   ebx
c00104f2:	e8 71 fe ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00104f7:	5b                   	pop    ebx
c00104f8:	5a                   	pop    edx
c00104f9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010500:	51                   	push   ecx
c0010501:	6a 25                	push   0x25
c0010503:	e8 60 fe ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010508:	59                   	pop    ecx
c0010509:	5b                   	pop    ebx
c001050a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010511:	5b                   	pop    ebx
c0010512:	5e                   	pop    esi
c0010513:	c3                   	ret    

c0010514 <VgaText::updateDiskUsage()>:
c0010514:	55                   	push   ebp
c0010515:	bd 10 27 00 00       	mov    ebp,0x2710
c001051a:	57                   	push   edi
c001051b:	8b 3d e0 b7 02 c0    	mov    edi,DWORD PTR ds:0xc002b7e0
c0010521:	56                   	push   esi
c0010522:	53                   	push   ebx
c0010523:	6a 0f                	push   0xf
c0010525:	6a 00                	push   0x0
c0010527:	e8 96 fd ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c001052c:	5a                   	pop    edx
c001052d:	0f b6 d8             	movzx  ebx,al
c0010530:	59                   	pop    ecx
c0010531:	8b 35 c8 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002ebc8
c0010537:	53                   	push   ebx
c0010538:	b9 0a 00 00 00       	mov    ecx,0xa
c001053d:	89 f0                	mov    eax,esi
c001053f:	99                   	cdq    
c0010540:	f7 fd                	idiv   ebp
c0010542:	99                   	cdq    
c0010543:	f7 f9                	idiv   ecx
c0010545:	8d 42 30             	lea    eax,[edx+0x30]
c0010548:	0f b6 c0             	movzx  eax,al
c001054b:	50                   	push   eax
c001054c:	e8 17 fe ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010551:	5d                   	pop    ebp
c0010552:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010557:	5a                   	pop    edx
c0010558:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001055c:	53                   	push   ebx
c001055d:	89 f0                	mov    eax,esi
c001055f:	99                   	cdq    
c0010560:	f7 fd                	idiv   ebp
c0010562:	99                   	cdq    
c0010563:	f7 f9                	idiv   ecx
c0010565:	8d 42 30             	lea    eax,[edx+0x30]
c0010568:	0f b6 c0             	movzx  eax,al
c001056b:	50                   	push   eax
c001056c:	e8 f7 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010571:	5d                   	pop    ebp
c0010572:	bd 64 00 00 00       	mov    ebp,0x64
c0010577:	5a                   	pop    edx
c0010578:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c001057f:	53                   	push   ebx
c0010580:	89 f0                	mov    eax,esi
c0010582:	99                   	cdq    
c0010583:	f7 fd                	idiv   ebp
c0010585:	99                   	cdq    
c0010586:	f7 f9                	idiv   ecx
c0010588:	8d 42 30             	lea    eax,[edx+0x30]
c001058b:	0f b6 c0             	movzx  eax,al
c001058e:	50                   	push   eax
c001058f:	e8 d4 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010594:	5d                   	pop    ebp
c0010595:	5a                   	pop    edx
c0010596:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c001059d:	53                   	push   ebx
c001059e:	89 f0                	mov    eax,esi
c00105a0:	99                   	cdq    
c00105a1:	f7 f9                	idiv   ecx
c00105a3:	89 d6                	mov    esi,edx
c00105a5:	99                   	cdq    
c00105a6:	f7 f9                	idiv   ecx
c00105a8:	8d 42 30             	lea    eax,[edx+0x30]
c00105ab:	0f b6 c0             	movzx  eax,al
c00105ae:	50                   	push   eax
c00105af:	e8 b4 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00105b4:	5d                   	pop    ebp
c00105b5:	5a                   	pop    edx
c00105b6:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00105bd:	53                   	push   ebx
c00105be:	8d 46 30             	lea    eax,[esi+0x30]
c00105c1:	0f b6 f0             	movzx  esi,al
c00105c4:	56                   	push   esi
c00105c5:	e8 9e fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00105ca:	5e                   	pop    esi
c00105cb:	8b 35 c4 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002ebc4
c00105d1:	5d                   	pop    ebp
c00105d2:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00105d9:	bd 10 27 00 00       	mov    ebp,0x2710
c00105de:	53                   	push   ebx
c00105df:	89 f0                	mov    eax,esi
c00105e1:	99                   	cdq    
c00105e2:	f7 fd                	idiv   ebp
c00105e4:	99                   	cdq    
c00105e5:	f7 f9                	idiv   ecx
c00105e7:	8d 42 30             	lea    eax,[edx+0x30]
c00105ea:	0f b6 c0             	movzx  eax,al
c00105ed:	50                   	push   eax
c00105ee:	e8 75 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00105f3:	5a                   	pop    edx
c00105f4:	5d                   	pop    ebp
c00105f5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00105fc:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010601:	53                   	push   ebx
c0010602:	89 f0                	mov    eax,esi
c0010604:	99                   	cdq    
c0010605:	f7 fd                	idiv   ebp
c0010607:	99                   	cdq    
c0010608:	f7 f9                	idiv   ecx
c001060a:	8d 42 30             	lea    eax,[edx+0x30]
c001060d:	0f b6 c0             	movzx  eax,al
c0010610:	50                   	push   eax
c0010611:	e8 52 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010616:	5a                   	pop    edx
c0010617:	5d                   	pop    ebp
c0010618:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c001061f:	bd 64 00 00 00       	mov    ebp,0x64
c0010624:	53                   	push   ebx
c0010625:	89 f0                	mov    eax,esi
c0010627:	99                   	cdq    
c0010628:	f7 fd                	idiv   ebp
c001062a:	99                   	cdq    
c001062b:	f7 f9                	idiv   ecx
c001062d:	83 c2 30             	add    edx,0x30
c0010630:	0f b6 d2             	movzx  edx,dl
c0010633:	52                   	push   edx
c0010634:	e8 2f fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010639:	5a                   	pop    edx
c001063a:	5d                   	pop    ebp
c001063b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010642:	53                   	push   ebx
c0010643:	89 f0                	mov    eax,esi
c0010645:	99                   	cdq    
c0010646:	f7 f9                	idiv   ecx
c0010648:	89 d6                	mov    esi,edx
c001064a:	99                   	cdq    
c001064b:	f7 f9                	idiv   ecx
c001064d:	8d 42 30             	lea    eax,[edx+0x30]
c0010650:	0f b6 c0             	movzx  eax,al
c0010653:	50                   	push   eax
c0010654:	e8 0f fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010659:	5a                   	pop    edx
c001065a:	59                   	pop    ecx
c001065b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010662:	53                   	push   ebx
c0010663:	8d 46 30             	lea    eax,[esi+0x30]
c0010666:	0f b6 f0             	movzx  esi,al
c0010669:	56                   	push   esi
c001066a:	e8 f9 fc ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c001066f:	5b                   	pop    ebx
c0010670:	5e                   	pop    esi
c0010671:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010678:	5b                   	pop    ebx
c0010679:	5e                   	pop    esi
c001067a:	5f                   	pop    edi
c001067b:	5d                   	pop    ebp
c001067c:	c3                   	ret    
c001067d:	90                   	nop

c001067e <VgaText::updateTitle()>:
c001067e:	53                   	push   ebx
c001067f:	31 c0                	xor    eax,eax
c0010681:	83 ec 58             	sub    esp,0x58
c0010684:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010688:	89 e1                	mov    ecx,esp
c001068a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001068e:	40                   	inc    eax
c001068f:	83 f8 50             	cmp    eax,0x50
c0010692:	75 f6                	jne    c001068a <VgaText::updateTitle()+0xc>
c0010694:	31 c0                	xor    eax,eax
c0010696:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001069d:	84 db                	test   bl,bl
c001069f:	74 06                	je     c00106a7 <VgaText::updateTitle()+0x29>
c00106a1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00106a4:	40                   	inc    eax
c00106a5:	eb ef                	jmp    c0010696 <VgaText::updateTitle()+0x18>
c00106a7:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00106ad:	85 c0                	test   eax,eax
c00106af:	74 09                	je     c00106ba <VgaText::updateTitle()+0x3c>
c00106b1:	53                   	push   ebx
c00106b2:	53                   	push   ebx
c00106b3:	51                   	push   ecx
c00106b4:	52                   	push   edx
c00106b5:	ff d0                	call   eax
c00106b7:	83 c4 10             	add    esp,0x10
c00106ba:	e8 55 fe ff ff       	call   c0010514 <VgaText::updateDiskUsage()>
c00106bf:	83 c4 58             	add    esp,0x58
c00106c2:	5b                   	pop    ebx
c00106c3:	c3                   	ret    

c00106c4 <VgaText::setTitleTextColour(VgaColour)>:
c00106c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106cc:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00106d2:	eb aa                	jmp    c001067e <VgaText::updateTitle()>

c00106d4 <VgaText::setTitleColour(VgaColour)>:
c00106d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106dc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00106e2:	eb 9a                	jmp    c001067e <VgaText::updateTitle()>

c00106e4 <VgaText::setTitle(char*)>:
c00106e4:	53                   	push   ebx
c00106e5:	83 ec 10             	sub    esp,0x10
c00106e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106f0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00106f6:	50                   	push   eax
c00106f7:	e8 2e 00 ff ff       	call   c000072a <strcpy>
c00106fc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010700:	83 c4 18             	add    esp,0x18
c0010703:	5b                   	pop    ebx
c0010704:	e9 75 ff ff ff       	jmp    c001067e <VgaText::updateTitle()>
c0010709:	90                   	nop

c001070a <VgaText::decrementCursor(bool)>:
c001070a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001070e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010712:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010718:	85 c0                	test   eax,eax
c001071a:	74 07                	je     c0010723 <VgaText::decrementCursor(bool)+0x19>
c001071c:	48                   	dec    eax
c001071d:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010723:	84 c9                	test   cl,cl
c0010725:	74 09                	je     c0010730 <VgaText::decrementCursor(bool)+0x26>
c0010727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001072b:	e9 56 fa ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c0010730:	c3                   	ret    
c0010731:	90                   	nop

c0010732 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010732:	53                   	push   ebx
c0010733:	83 ec 08             	sub    esp,0x8
c0010736:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001073a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001073e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010742:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010746:	3c 07                	cmp    al,0x7
c0010748:	75 2a                	jne    c0010774 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001074a:	a1 0c ca 02 c0       	mov    eax,ds:0xc002ca0c
c001074f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010757:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001075f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010767:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001076b:	83 c4 08             	add    esp,0x8
c001076e:	5b                   	pop    ebx
c001076f:	e9 5c 2d 00 00       	jmp    c00134d0 <Buzzer::beep(int, int, bool)>
c0010774:	3c 0d                	cmp    al,0xd
c0010776:	75 0c                	jne    c0010784 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010778:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010782:	eb 3b                	jmp    c00107bf <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010784:	3c 0a                	cmp    al,0xa
c0010786:	75 40                	jne    c00107c8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010788:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001078e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010798:	8d 50 01             	lea    edx,[eax+0x1]
c001079b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00107a1:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00107a7:	75 12                	jne    c00107bb <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00107a9:	83 ec 0c             	sub    esp,0xc
c00107ac:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00107b2:	53                   	push   ebx
c00107b3:	e8 1c fb ff ff       	call   c00102d4 <VgaText::scrollScreen()>
c00107b8:	83 c4 10             	add    esp,0x10
c00107bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107bf:	83 c4 08             	add    esp,0x8
c00107c2:	5b                   	pop    ebx
c00107c3:	e9 be f9 ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c00107c8:	3c 08                	cmp    al,0x8
c00107ca:	75 31                	jne    c00107fd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00107cc:	50                   	push   eax
c00107cd:	50                   	push   eax
c00107ce:	6a 01                	push   0x1
c00107d0:	53                   	push   ebx
c00107d1:	e8 34 ff ff ff       	call   c001070a <VgaText::decrementCursor(bool)>
c00107d6:	5a                   	pop    edx
c00107d7:	59                   	pop    ecx
c00107d8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107de:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107e4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00107ea:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00107f0:	6a 20                	push   0x20
c00107f2:	53                   	push   ebx
c00107f3:	e8 82 fb ff ff       	call   c001037a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107f8:	83 c4 28             	add    esp,0x28
c00107fb:	5b                   	pop    ebx
c00107fc:	c3                   	ret    
c00107fd:	83 ec 08             	sub    esp,0x8
c0010800:	0f be c0             	movsx  eax,al
c0010803:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010809:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001080f:	51                   	push   ecx
c0010810:	52                   	push   edx
c0010811:	50                   	push   eax
c0010812:	53                   	push   ebx
c0010813:	e8 62 fb ff ff       	call   c001037a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010818:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001081c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010824:	83 c4 28             	add    esp,0x28
c0010827:	5b                   	pop    ebx
c0010828:	e9 1b fc ff ff       	jmp    c0010448 <VgaText::incrementCursor(bool)>
c001082d:	90                   	nop

c001082e <VgaText::isShowingCursor()>:
c001082e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010832:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010838:	c3                   	ret    
c0010839:	90                   	nop

c001083a <VgaText::isBlinkDisabled()>:
c001083a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010844:	83 f0 01             	xor    eax,0x1
c0010847:	c3                   	ret    

c0010848 <VgaText::setCursorHeight(int)>:
c0010848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001084c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010850:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010856:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001085d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010861:	e9 3a f9 ff ff       	jmp    c00101a0 <VgaText::showCursor(bool)>

c0010866 <VgaText::getCursorHeight()>:
c0010866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010870:	c3                   	ret    

c0010871 <setActiveTerminal(VgaText*)>:
c0010871:	53                   	push   ebx
c0010872:	83 ec 08             	sub    esp,0x8
c0010875:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010879:	85 db                	test   ebx,ebx
c001087b:	75 11                	jne    c001088e <setActiveTerminal(VgaText*)+0x1d>
c001087d:	c7 44 24 10 ec 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028bec
c0010885:	83 c4 08             	add    esp,0x8
c0010888:	5b                   	pop    ebx
c0010889:	e9 5d 8f 00 00       	jmp    c00197eb <Krnl::panic(char const*)>
c001088e:	50                   	push   eax
c001088f:	50                   	push   eax
c0010890:	53                   	push   ebx
c0010891:	68 fa 8b 02 c0       	push   0xc0028bfa
c0010896:	e8 36 1e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001089b:	a1 64 c9 02 c0       	mov    eax,ds:0xc002c964
c00108a0:	83 c4 10             	add    esp,0x10
c00108a3:	85 c0                	test   eax,eax
c00108a5:	74 0c                	je     c00108b3 <setActiveTerminal(VgaText*)+0x42>
c00108a7:	83 ec 0c             	sub    esp,0xc
c00108aa:	50                   	push   eax
c00108ab:	e8 d6 f8 ff ff       	call   c0010186 <VgaText::updateCursor()>
c00108b0:	83 c4 10             	add    esp,0x10
c00108b3:	89 1d 64 c9 02 c0    	mov    DWORD PTR ds:0xc002c964,ebx
c00108b9:	51                   	push   ecx
c00108ba:	51                   	push   ecx
c00108bb:	53                   	push   ebx
c00108bc:	68 12 8c 02 c0       	push   0xc0028c12
c00108c1:	e8 0b 1e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00108c6:	83 c4 0c             	add    esp,0xc
c00108c9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108cf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108d5:	53                   	push   ebx
c00108d6:	e8 17 fb ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c00108db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108de:	e8 57 ff ff ff       	call   c001083a <VgaText::isBlinkDisabled()>
c00108e3:	5a                   	pop    edx
c00108e4:	0f b6 c0             	movzx  eax,al
c00108e7:	59                   	pop    ecx
c00108e8:	50                   	push   eax
c00108e9:	53                   	push   ebx
c00108ea:	e8 c1 f8 ff ff       	call   c00101b0 <VgaText::disableBlink(bool)>
c00108ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108f2:	e8 6f ff ff ff       	call   c0010866 <VgaText::getCursorHeight()>
c00108f7:	5a                   	pop    edx
c00108f8:	59                   	pop    ecx
c00108f9:	50                   	push   eax
c00108fa:	53                   	push   ebx
c00108fb:	e8 48 ff ff ff       	call   c0010848 <VgaText::setCursorHeight(int)>
c0010900:	83 c4 10             	add    esp,0x10
c0010903:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001090a:	75 0a                	jne    c0010916 <setActiveTerminal(VgaText*)+0xa5>
c001090c:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010916:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001091a:	83 c4 08             	add    esp,0x8
c001091d:	5b                   	pop    ebx
c001091e:	e9 0f f8 ff ff       	jmp    c0010132 <VgaText::load()>

c0010923 <doTerminalCycle()>:
c0010923:	83 ec 18             	sub    esp,0x18
c0010926:	a1 60 c9 02 c0       	mov    eax,ds:0xc002c960
c001092b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010931:	50                   	push   eax
c0010932:	a3 60 c9 02 c0       	mov    ds:0xc002c960,eax
c0010937:	e8 35 ff ff ff       	call   c0010871 <setActiveTerminal(VgaText*)>
c001093c:	83 c4 1c             	add    esp,0x1c
c001093f:	c3                   	ret    

c0010940 <VgaText::doUpdate()>:
c0010940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010944:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001094a:	85 c0                	test   eax,eax
c001094c:	74 02                	je     c0010950 <VgaText::doUpdate()+0x10>
c001094e:	ff e0                	jmp    eax
c0010950:	c3                   	ret    
c0010951:	90                   	nop

c0010952 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010952:	55                   	push   ebp
c0010953:	57                   	push   edi
c0010954:	56                   	push   esi
c0010955:	53                   	push   ebx
c0010956:	83 ec 1c             	sub    esp,0x1c
c0010959:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001095d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010962:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010969:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001096c:	50                   	push   eax
c001096d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010972:	50                   	push   eax
c0010973:	e8 4a f9 ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010978:	59                   	pop    ecx
c0010979:	0f b6 c0             	movzx  eax,al
c001097c:	5b                   	pop    ebx
c001097d:	31 c9                	xor    ecx,ecx
c001097f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010987:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001098b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010991:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010995:	0f b7 db             	movzx  ebx,bx
c0010998:	01 db                	add    ebx,ebx
c001099a:	01 fb                	add    ebx,edi
c001099c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001099f:	84 c0                	test   al,al
c00109a1:	0f 84 38 01 00 00    	je     c0010adf <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00109a7:	3c 0d                	cmp    al,0xd
c00109a9:	75 0f                	jne    c00109ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00109ab:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00109b5:	e9 1f 01 00 00       	jmp    c0010ad9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109ba:	3c 0a                	cmp    al,0xa
c00109bc:	75 5b                	jne    c0010a19 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00109be:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00109c4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00109ce:	8d 48 01             	lea    ecx,[eax+0x1]
c00109d1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00109d7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00109dd:	75 12                	jne    c00109f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00109df:	83 ec 0c             	sub    esp,0xc
c00109e2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00109e8:	55                   	push   ebp
c00109e9:	e8 e6 f8 ff ff       	call   c00102d4 <VgaText::scrollScreen()>
c00109ee:	83 c4 10             	add    esp,0x10
c00109f1:	83 ec 0c             	sub    esp,0xc
c00109f4:	55                   	push   ebp
c00109f5:	e8 8c f7 ff ff       	call   c0010186 <VgaText::updateCursor()>
c00109fa:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a02:	83 c4 10             	add    esp,0x10
c0010a05:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a0b:	31 c9                	xor    ecx,ecx
c0010a0d:	0f b7 db             	movzx  ebx,bx
c0010a10:	01 db                	add    ebx,ebx
c0010a12:	01 fb                	add    ebx,edi
c0010a14:	e9 c0 00 00 00       	jmp    c0010ad9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a19:	3c 08                	cmp    al,0x8
c0010a1b:	75 4e                	jne    c0010a6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010a1d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a21:	53                   	push   ebx
c0010a22:	53                   	push   ebx
c0010a23:	6a 01                	push   0x1
c0010a25:	55                   	push   ebp
c0010a26:	e8 df fc ff ff       	call   c001070a <VgaText::decrementCursor(bool)>
c0010a2b:	58                   	pop    eax
c0010a2c:	5a                   	pop    edx
c0010a2d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a33:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a39:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010a3f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010a45:	6a 20                	push   0x20
c0010a47:	55                   	push   ebp
c0010a48:	e8 2d f9 ff ff       	call   c001037a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a4d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a55:	83 c4 20             	add    esp,0x20
c0010a58:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a5e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a62:	0f b7 db             	movzx  ebx,bx
c0010a65:	01 db                	add    ebx,ebx
c0010a67:	01 fb                	add    ebx,edi
c0010a69:	eb 6e                	jmp    c0010ad9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a6b:	51                   	push   ecx
c0010a6c:	51                   	push   ecx
c0010a6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a71:	50                   	push   eax
c0010a72:	e8 f1 f8 ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a77:	83 c4 10             	add    esp,0x10
c0010a7a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a7d:	39 2d 64 c9 02 c0    	cmp    DWORD PTR ds:0xc002c964,ebp
c0010a83:	75 2a                	jne    c0010aaf <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a85:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a8b:	85 c0                	test   eax,eax
c0010a8d:	74 20                	je     c0010aaf <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a8f:	52                   	push   edx
c0010a90:	52                   	push   edx
c0010a91:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a97:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a9d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010aa1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010aa5:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010aa8:	51                   	push   ecx
c0010aa9:	55                   	push   ebp
c0010aaa:	ff d0                	call   eax
c0010aac:	83 c4 20             	add    esp,0x20
c0010aaf:	83 c3 02             	add    ebx,0x2
c0010ab2:	50                   	push   eax
c0010ab3:	50                   	push   eax
c0010ab4:	6a 00                	push   0x0
c0010ab6:	55                   	push   ebp
c0010ab7:	e8 8c f9 ff ff       	call   c0010448 <VgaText::incrementCursor(bool)>
c0010abc:	83 c4 10             	add    esp,0x10
c0010abf:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010ac6:	75 0f                	jne    c0010ad7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010ac8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ad0:	0f b7 db             	movzx  ebx,bx
c0010ad3:	01 db                	add    ebx,ebx
c0010ad5:	01 fb                	add    ebx,edi
c0010ad7:	b1 01                	mov    cl,0x1
c0010ad9:	46                   	inc    esi
c0010ada:	e9 bd fe ff ff       	jmp    c001099c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010adf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010ae3:	83 ec 0c             	sub    esp,0xc
c0010ae6:	55                   	push   ebp
c0010ae7:	e8 9a f6 ff ff       	call   c0010186 <VgaText::updateCursor()>
c0010aec:	83 c4 10             	add    esp,0x10
c0010aef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010af3:	84 c9                	test   cl,cl
c0010af5:	74 0c                	je     c0010b03 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010af7:	83 ec 0c             	sub    esp,0xc
c0010afa:	55                   	push   ebp
c0010afb:	e8 40 fe ff ff       	call   c0010940 <VgaText::doUpdate()>
c0010b00:	83 c4 10             	add    esp,0x10
c0010b03:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010b0a:	83 c4 1c             	add    esp,0x1c
c0010b0d:	5b                   	pop    ebx
c0010b0e:	5e                   	pop    esi
c0010b0f:	5f                   	pop    edi
c0010b10:	5d                   	pop    ebp
c0010b11:	c3                   	ret    

c0010b12 <VgaText::clearScreen()>:
c0010b12:	57                   	push   edi
c0010b13:	56                   	push   esi
c0010b14:	31 f6                	xor    esi,esi
c0010b16:	53                   	push   ebx
c0010b17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b1b:	52                   	push   edx
c0010b1c:	6a 00                	push   0x0
c0010b1e:	6a 00                	push   0x0
c0010b20:	53                   	push   ebx
c0010b21:	e8 cc f8 ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c0010b26:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010b2d:	83 c4 10             	add    esp,0x10
c0010b30:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010b36:	7e 26                	jle    c0010b5e <VgaText::clearScreen()+0x4c>
c0010b38:	31 ff                	xor    edi,edi
c0010b3a:	50                   	push   eax
c0010b3b:	50                   	push   eax
c0010b3c:	56                   	push   esi
c0010b3d:	57                   	push   edi
c0010b3e:	47                   	inc    edi
c0010b3f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010b45:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010b4b:	6a 20                	push   0x20
c0010b4d:	53                   	push   ebx
c0010b4e:	e8 27 f8 ff ff       	call   c001037a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b53:	83 c4 20             	add    esp,0x20
c0010b56:	83 ff 50             	cmp    edi,0x50
c0010b59:	75 df                	jne    c0010b3a <VgaText::clearScreen()+0x28>
c0010b5b:	46                   	inc    esi
c0010b5c:	eb d2                	jmp    c0010b30 <VgaText::clearScreen()+0x1e>
c0010b5e:	83 ec 0c             	sub    esp,0xc
c0010b61:	53                   	push   ebx
c0010b62:	e8 d9 fd ff ff       	call   c0010940 <VgaText::doUpdate()>
c0010b67:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010b6e:	83 c4 10             	add    esp,0x10
c0010b71:	5b                   	pop    ebx
c0010b72:	5e                   	pop    esi
c0010b73:	5f                   	pop    edi
c0010b74:	c3                   	ret    
c0010b75:	90                   	nop

c0010b76 <VgaText::putchar(char)>:
c0010b76:	56                   	push   esi
c0010b77:	53                   	push   ebx
c0010b78:	83 ec 14             	sub    esp,0x14
c0010b7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b83:	3c 5b                	cmp    al,0x5b
c0010b85:	75 21                	jne    c0010ba8 <VgaText::putchar(char)+0x32>
c0010b87:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b8e:	74 28                	je     c0010bb8 <VgaText::putchar(char)+0x42>
c0010b90:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b99:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010ba3:	e9 e2 00 00 00       	jmp    c0010c8a <VgaText::putchar(char)+0x114>
c0010ba8:	3c 1b                	cmp    al,0x1b
c0010baa:	75 0c                	jne    c0010bb8 <VgaText::putchar(char)+0x42>
c0010bac:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010bb3:	e9 d2 00 00 00       	jmp    c0010c8a <VgaText::putchar(char)+0x114>
c0010bb8:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010bbe:	84 c9                	test   cl,cl
c0010bc0:	0f 84 ab 00 00 00    	je     c0010c71 <VgaText::putchar(char)+0xfb>
c0010bc6:	8d 50 c0             	lea    edx,[eax-0x40]
c0010bc9:	80 fa 3e             	cmp    dl,0x3e
c0010bcc:	0f 87 82 00 00 00    	ja     c0010c54 <VgaText::putchar(char)+0xde>
c0010bd2:	3c 6d                	cmp    al,0x6d
c0010bd4:	75 4d                	jne    c0010c23 <VgaText::putchar(char)+0xad>
c0010bd6:	31 f6                	xor    esi,esi
c0010bd8:	31 d2                	xor    edx,edx
c0010bda:	31 c0                	xor    eax,eax
c0010bdc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010be2:	7e 30                	jle    c0010c14 <VgaText::putchar(char)+0x9e>
c0010be4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010bec:	80 fa 3b             	cmp    dl,0x3b
c0010bef:	75 17                	jne    c0010c08 <VgaText::putchar(char)+0x92>
c0010bf1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010bf5:	50                   	push   eax
c0010bf6:	53                   	push   ebx
c0010bf7:	e8 ee f5 ff ff       	call   c00101ea <VgaText::doANSI_SGR(int)>
c0010bfc:	59                   	pop    ecx
c0010bfd:	31 d2                	xor    edx,edx
c0010bff:	58                   	pop    eax
c0010c00:	31 c0                	xor    eax,eax
c0010c02:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010c06:	eb 09                	jmp    c0010c11 <VgaText::putchar(char)+0x9b>
c0010c08:	6b c0 0a             	imul   eax,eax,0xa
c0010c0b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010c0f:	88 ca                	mov    dl,cl
c0010c11:	46                   	inc    esi
c0010c12:	eb c8                	jmp    c0010bdc <VgaText::putchar(char)+0x66>
c0010c14:	84 d2                	test   dl,dl
c0010c16:	74 31                	je     c0010c49 <VgaText::putchar(char)+0xd3>
c0010c18:	50                   	push   eax
c0010c19:	53                   	push   ebx
c0010c1a:	e8 cb f5 ff ff       	call   c00101ea <VgaText::doANSI_SGR(int)>
c0010c1f:	58                   	pop    eax
c0010c20:	5a                   	pop    edx
c0010c21:	eb 26                	jmp    c0010c49 <VgaText::putchar(char)+0xd3>
c0010c23:	3c 4a                	cmp    al,0x4a
c0010c25:	75 22                	jne    c0010c49 <VgaText::putchar(char)+0xd3>
c0010c27:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010c2e:	75 19                	jne    c0010c49 <VgaText::putchar(char)+0xd3>
c0010c30:	83 ec 0c             	sub    esp,0xc
c0010c33:	53                   	push   ebx
c0010c34:	e8 d9 fe ff ff       	call   c0010b12 <VgaText::clearScreen()>
c0010c39:	83 c4 0c             	add    esp,0xc
c0010c3c:	6a 00                	push   0x0
c0010c3e:	6a 00                	push   0x0
c0010c40:	53                   	push   ebx
c0010c41:	e8 ac f7 ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010c52:	eb 36                	jmp    c0010c8a <VgaText::putchar(char)+0x114>
c0010c54:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010c5a:	83 fa 0e             	cmp    edx,0xe
c0010c5d:	7f 2b                	jg     c0010c8a <VgaText::putchar(char)+0x114>
c0010c5f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c62:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010c68:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010c6f:	eb 19                	jmp    c0010c8a <VgaText::putchar(char)+0x114>
c0010c71:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c77:	0f be c0             	movsx  eax,al
c0010c7a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c80:	50                   	push   eax
c0010c81:	53                   	push   ebx
c0010c82:	e8 ab fa ff ff       	call   c0010732 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c87:	83 c4 10             	add    esp,0x10
c0010c8a:	83 c4 14             	add    esp,0x14
c0010c8d:	5b                   	pop    ebx
c0010c8e:	5e                   	pop    esi
c0010c8f:	c3                   	ret    

c0010c90 <VgaText::puts(char const*)>:
c0010c90:	53                   	push   ebx
c0010c91:	83 ec 08             	sub    esp,0x8
c0010c94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c98:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c9b:	84 c0                	test   al,al
c0010c9d:	74 12                	je     c0010cb1 <VgaText::puts(char const*)+0x21>
c0010c9f:	43                   	inc    ebx
c0010ca0:	51                   	push   ecx
c0010ca1:	51                   	push   ecx
c0010ca2:	50                   	push   eax
c0010ca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ca7:	e8 ca fe ff ff       	call   c0010b76 <VgaText::putchar(char)>
c0010cac:	83 c4 10             	add    esp,0x10
c0010caf:	eb e7                	jmp    c0010c98 <VgaText::puts(char const*)+0x8>
c0010cb1:	83 c4 08             	add    esp,0x8
c0010cb4:	5b                   	pop    ebx
c0010cb5:	c3                   	ret    

c0010cb6 <VgaText::putx(unsigned int)>:
c0010cb6:	57                   	push   edi
c0010cb7:	b9 11 00 00 00       	mov    ecx,0x11
c0010cbc:	56                   	push   esi
c0010cbd:	be 2e 8c 02 c0       	mov    esi,0xc0028c2e
c0010cc2:	53                   	push   ebx
c0010cc3:	83 ec 20             	sub    esp,0x20
c0010cc6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010cca:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010cce:	fc                   	cld    
c0010ccf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cd1:	be 08 00 00 00       	mov    esi,0x8
c0010cd6:	50                   	push   eax
c0010cd7:	50                   	push   eax
c0010cd8:	89 d8                	mov    eax,ebx
c0010cda:	c1 e3 04             	shl    ebx,0x4
c0010cdd:	c1 e8 1c             	shr    eax,0x1c
c0010ce0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ce5:	50                   	push   eax
c0010ce6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cea:	e8 87 fe ff ff       	call   c0010b76 <VgaText::putchar(char)>
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	4e                   	dec    esi
c0010cf3:	75 e1                	jne    c0010cd6 <VgaText::putx(unsigned int)+0x20>
c0010cf5:	83 c4 20             	add    esp,0x20
c0010cf8:	5b                   	pop    ebx
c0010cf9:	5e                   	pop    esi
c0010cfa:	5f                   	pop    edi
c0010cfb:	c3                   	ret    

c0010cfc <VgaText::VgaText(char const*)>:
c0010cfc:	57                   	push   edi
c0010cfd:	56                   	push   esi
c0010cfe:	53                   	push   ebx
c0010cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d03:	83 ec 08             	sub    esp,0x8
c0010d06:	6a 00                	push   0x0
c0010d08:	50                   	push   eax
c0010d09:	e8 90 05 00 00       	call   c001129e <UnixFile::UnixFile(int)>
c0010d0e:	83 c4 10             	add    esp,0x10
c0010d11:	ba 94 8c 02 c0       	mov    edx,0xc0028c94
c0010d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1a:	89 10                	mov    DWORD PTR [eax],edx
c0010d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d20:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d2e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d3c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d47:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d52:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d60:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d6e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d79:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d80:	b8 10 04 00 00       	mov    eax,0x410
c0010d85:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010d88:	0f b7 c0             	movzx  eax,ax
c0010d8b:	83 e0 30             	and    eax,0x30
c0010d8e:	83 f8 30             	cmp    eax,0x30
c0010d91:	75 0f                	jne    c0010da2 <VgaText::VgaText(char const*)+0xa6>
c0010d93:	a1 e0 b7 02 c0       	mov    eax,ds:0xc002b7e0
c0010d98:	2d 00 80 00 00       	sub    eax,0x8000
c0010d9d:	a3 e0 b7 02 c0       	mov    ds:0xc002b7e0,eax
c0010da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da6:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010dac:	bb 40 c9 02 c0       	mov    ebx,0xc002c940
c0010db1:	b8 08 00 00 00       	mov    eax,0x8
c0010db6:	fc                   	cld    
c0010db7:	89 d7                	mov    edi,edx
c0010db9:	89 de                	mov    esi,ebx
c0010dbb:	89 c1                	mov    ecx,eax
c0010dbd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc3:	05 1e 10 00 00       	add    eax,0x101e
c0010dc8:	83 ec 08             	sub    esp,0x8
c0010dcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dcf:	50                   	push   eax
c0010dd0:	e8 55 f9 fe ff       	call   c000072a <strcpy>
c0010dd5:	83 c4 10             	add    esp,0x10
c0010dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ddc:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dea:	83 c0 0c             	add    eax,0xc
c0010ded:	83 ec 04             	sub    esp,0x4
c0010df0:	68 00 0f 00 00       	push   0xf00
c0010df5:	6a 00                	push   0x0
c0010df7:	50                   	push   eax
c0010df8:	e8 8e f8 fe ff       	call   c000068b <memset>
c0010dfd:	83 c4 10             	add    esp,0x10
c0010e00:	83 ec 04             	sub    esp,0x4
c0010e03:	6a 00                	push   0x0
c0010e05:	6a 07                	push   0x7
c0010e07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0b:	e8 92 f4 ff ff       	call   c00102a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010e10:	83 c4 10             	add    esp,0x10
c0010e13:	83 ec 08             	sub    esp,0x8
c0010e16:	6a 02                	push   0x2
c0010e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1c:	e8 27 fa ff ff       	call   c0010848 <VgaText::setCursorHeight(int)>
c0010e21:	83 c4 10             	add    esp,0x10
c0010e24:	83 ec 04             	sub    esp,0x4
c0010e27:	6a 00                	push   0x0
c0010e29:	6a 00                	push   0x0
c0010e2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e2f:	e8 be f5 ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c0010e34:	83 c4 10             	add    esp,0x10
c0010e37:	83 ec 08             	sub    esp,0x8
c0010e3a:	6a 01                	push   0x1
c0010e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e40:	e8 5b f3 ff ff       	call   c00101a0 <VgaText::showCursor(bool)>
c0010e45:	83 c4 10             	add    esp,0x10
c0010e48:	83 ec 08             	sub    esp,0x8
c0010e4b:	6a 01                	push   0x1
c0010e4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e51:	e8 5a f3 ff ff       	call   c00101b0 <VgaText::disableBlink(bool)>
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	83 ec 0c             	sub    esp,0xc
c0010e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e60:	e8 ad fc ff ff       	call   c0010b12 <VgaText::clearScreen()>
c0010e65:	83 c4 10             	add    esp,0x10
c0010e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e6c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e77:	05 9e 10 00 00       	add    eax,0x109e
c0010e7c:	83 ec 04             	sub    esp,0x4
c0010e7f:	68 96 00 00 00       	push   0x96
c0010e84:	6a 00                	push   0x0
c0010e86:	50                   	push   eax
c0010e87:	e8 ff f7 fe ff       	call   c000068b <memset>
c0010e8c:	83 c4 10             	add    esp,0x10
c0010e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e93:	05 34 11 00 00       	add    eax,0x1134
c0010e98:	83 ec 04             	sub    esp,0x4
c0010e9b:	68 2c 01 00 00       	push   0x12c
c0010ea0:	6a 00                	push   0x0
c0010ea2:	50                   	push   eax
c0010ea3:	e8 e3 f7 fe ff       	call   c000068b <memset>
c0010ea8:	83 c4 10             	add    esp,0x10
c0010eab:	90                   	nop
c0010eac:	5b                   	pop    ebx
c0010ead:	5e                   	pop    esi
c0010eae:	5f                   	pop    edi
c0010eaf:	c3                   	ret    

c0010eb0 <VgaText::receiveKey(unsigned char)>:
c0010eb0:	55                   	push   ebp
c0010eb1:	57                   	push   edi
c0010eb2:	56                   	push   esi
c0010eb3:	53                   	push   ebx
c0010eb4:	83 ec 1c             	sub    esp,0x1c
c0010eb7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ebb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ebf:	84 db                	test   bl,bl
c0010ec1:	0f 84 c9 00 00 00    	je     c0010f90 <VgaText::receiveKey(unsigned char)+0xe0>
c0010ec7:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010ecd:	80 fb 08             	cmp    bl,0x8
c0010ed0:	75 2c                	jne    c0010efe <VgaText::receiveKey(unsigned char)+0x4e>
c0010ed2:	83 ec 0c             	sub    esp,0xc
c0010ed5:	57                   	push   edi
c0010ed6:	e8 cd f7 fe ff       	call   c00006a8 <strlen>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	85 c0                	test   eax,eax
c0010ee0:	74 41                	je     c0010f23 <VgaText::receiveKey(unsigned char)+0x73>
c0010ee2:	50                   	push   eax
c0010ee3:	50                   	push   eax
c0010ee4:	6a 08                	push   0x8
c0010ee6:	56                   	push   esi
c0010ee7:	e8 8a fc ff ff       	call   c0010b76 <VgaText::putchar(char)>
c0010eec:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010eef:	e8 b4 f7 fe ff       	call   c00006a8 <strlen>
c0010ef4:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010efc:	eb 22                	jmp    c0010f20 <VgaText::receiveKey(unsigned char)+0x70>
c0010efe:	0f be c3             	movsx  eax,bl
c0010f01:	52                   	push   edx
c0010f02:	52                   	push   edx
c0010f03:	50                   	push   eax
c0010f04:	56                   	push   esi
c0010f05:	e8 6c fc ff ff       	call   c0010b76 <VgaText::putchar(char)>
c0010f0a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010f0e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010f13:	59                   	pop    ecx
c0010f14:	5d                   	pop    ebp
c0010f15:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010f19:	50                   	push   eax
c0010f1a:	57                   	push   edi
c0010f1b:	e8 c1 f8 fe ff       	call   c00007e1 <strcat>
c0010f20:	83 c4 10             	add    esp,0x10
c0010f23:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010f2a:	75 05                	jne    c0010f31 <VgaText::receiveKey(unsigned char)+0x81>
c0010f2c:	80 fb 0a             	cmp    bl,0xa
c0010f2f:	75 53                	jne    c0010f84 <VgaText::receiveKey(unsigned char)+0xd4>
c0010f31:	83 ec 0c             	sub    esp,0xc
c0010f34:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010f3a:	53                   	push   ebx
c0010f3b:	e8 68 f7 fe ff       	call   c00006a8 <strlen>
c0010f40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f43:	89 c5                	mov    ebp,eax
c0010f45:	e8 5e f7 fe ff       	call   c00006a8 <strlen>
c0010f4a:	83 c4 10             	add    esp,0x10
c0010f4d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010f51:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010f56:	76 10                	jbe    c0010f68 <VgaText::receiveKey(unsigned char)+0xb8>
c0010f58:	83 ec 0c             	sub    esp,0xc
c0010f5b:	68 3f 8c 02 c0       	push   0xc0028c3f
c0010f60:	e8 86 88 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0010f65:	83 c4 10             	add    esp,0x10
c0010f68:	50                   	push   eax
c0010f69:	50                   	push   eax
c0010f6a:	57                   	push   edi
c0010f6b:	53                   	push   ebx
c0010f6c:	e8 70 f8 fe ff       	call   c00007e1 <strcat>
c0010f71:	83 c4 0c             	add    esp,0xc
c0010f74:	68 96 00 00 00       	push   0x96
c0010f79:	6a 00                	push   0x0
c0010f7b:	57                   	push   edi
c0010f7c:	e8 0a f7 fe ff       	call   c000068b <memset>
c0010f81:	83 c4 10             	add    esp,0x10
c0010f84:	83 ec 0c             	sub    esp,0xc
c0010f87:	56                   	push   esi
c0010f88:	e8 b3 f9 ff ff       	call   c0010940 <VgaText::doUpdate()>
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	83 c4 1c             	add    esp,0x1c
c0010f93:	5b                   	pop    ebx
c0010f94:	5e                   	pop    esi
c0010f95:	5f                   	pop    edi
c0010f96:	5d                   	pop    ebp
c0010f97:	c3                   	ret    

c0010f98 <VgaText::write(unsigned long long, void*, int*)>:
c0010f98:	55                   	push   ebp
c0010f99:	57                   	push   edi
c0010f9a:	56                   	push   esi
c0010f9b:	53                   	push   ebx
c0010f9c:	83 ec 0c             	sub    esp,0xc
c0010f9f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010fa3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010fa7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010fab:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010fb2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010fb5:	39 eb                	cmp    ebx,ebp
c0010fb7:	74 13                	je     c0010fcc <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010fb9:	43                   	inc    ebx
c0010fba:	50                   	push   eax
c0010fbb:	50                   	push   eax
c0010fbc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010fc0:	50                   	push   eax
c0010fc1:	56                   	push   esi
c0010fc2:	e8 af fb ff ff       	call   c0010b76 <VgaText::putchar(char)>
c0010fc7:	83 c4 10             	add    esp,0x10
c0010fca:	eb e9                	jmp    c0010fb5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010fcc:	83 ec 0c             	sub    esp,0xc
c0010fcf:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010fd6:	56                   	push   esi
c0010fd7:	e8 64 f9 ff ff       	call   c0010940 <VgaText::doUpdate()>
c0010fdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010fe0:	89 38                	mov    DWORD PTR [eax],edi
c0010fe2:	83 c4 1c             	add    esp,0x1c
c0010fe5:	31 c0                	xor    eax,eax
c0010fe7:	5b                   	pop    ebx
c0010fe8:	5e                   	pop    esi
c0010fe9:	5f                   	pop    edi
c0010fea:	5d                   	pop    ebp
c0010feb:	c3                   	ret    

c0010fec <newTerminal(char*)>:
c0010fec:	83 ec 28             	sub    esp,0x28
c0010fef:	68 60 12 00 00       	push   0x1260
c0010ff4:	e8 db e4 ff ff       	call   c000f4d4 <malloc>
c0010ff9:	5a                   	pop    edx
c0010ffa:	59                   	pop    ecx
c0010ffb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fff:	50                   	push   eax
c0011000:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011004:	e8 f3 fc ff ff       	call   c0010cfc <VgaText::VgaText(char const*)>
c0011009:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001100d:	83 c4 2c             	add    esp,0x2c
c0011010:	c3                   	ret    
c0011011:	90                   	nop

c0011012 <TSS::TSS()>:
c0011012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011016:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001101d:	90                   	nop
c001101e:	c3                   	ret    
c001101f:	90                   	nop

c0011020 <TSS::setESP(unsigned long)>:
c0011020:	55                   	push   ebp
c0011021:	89 e5                	mov    ebp,esp
c0011023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011026:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011029:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001102c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001102f:	90                   	nop
c0011030:	5d                   	pop    ebp
c0011031:	c3                   	ret    

c0011032 <TSS::flush()>:
c0011032:	55                   	push   ebp
c0011033:	89 e5                	mov    ebp,esp
c0011035:	83 ec 10             	sub    esp,0x10
c0011038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103b:	8b 00                	mov    eax,DWORD PTR [eax]
c001103d:	83 c8 03             	or     eax,0x3
c0011040:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011044:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011048:	66 89 d0             	mov    ax,dx
c001104b:	0f 00 d8             	ltr    ax
c001104e:	90                   	nop
c001104f:	c9                   	leave  
c0011050:	c3                   	ret    
c0011051:	90                   	nop

c0011052 <TSS::setup(unsigned long, unsigned long)>:
c0011052:	55                   	push   ebp
c0011053:	89 e5                	mov    ebp,esp
c0011055:	83 ec 18             	sub    esp,0x18
c0011058:	83 ec 0c             	sub    esp,0xc
c001105b:	6a 68                	push   0x68
c001105d:	e8 72 e4 ff ff       	call   c000f4d4 <malloc>
c0011062:	83 c4 10             	add    esp,0x10
c0011065:	89 c2                	mov    edx,eax
c0011067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001106d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011073:	83 ec 04             	sub    esp,0x4
c0011076:	6a 68                	push   0x68
c0011078:	6a 00                	push   0x0
c001107a:	50                   	push   eax
c001107b:	e8 0b f6 fe ff       	call   c000068b <memset>
c0011080:	83 c4 10             	add    esp,0x10
c0011083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011086:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011089:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001108f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011092:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011095:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001109b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001109e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ad:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00110b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b9:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00110bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c5:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00110cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d1:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00110d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110dd:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00110e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110e9:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00110ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110f5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00110f8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00110fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011101:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011104:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001110a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001110d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011117:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001111a:	0f 20 da             	mov    edx,cr3
c001111d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011120:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011123:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011129:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001112c:	83 ec 08             	sub    esp,0x8
c001112f:	50                   	push   eax
c0011130:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011133:	50                   	push   eax
c0011134:	e8 79 db ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c0011139:	83 c4 10             	add    esp,0x10
c001113c:	83 ec 08             	sub    esp,0x8
c001113f:	6a 68                	push   0x68
c0011141:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011144:	50                   	push   eax
c0011145:	e8 84 db ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c001114a:	83 c4 10             	add    esp,0x10
c001114d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011151:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011154:	83 e0 0f             	and    eax,0xf
c0011157:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001115a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001115d:	83 c8 40             	or     eax,0x40
c0011160:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011163:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0011168:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001116e:	05 78 01 00 00       	add    eax,0x178
c0011173:	83 ec 04             	sub    esp,0x4
c0011176:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011179:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001117c:	50                   	push   eax
c001117d:	e8 80 db ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c0011182:	83 c4 10             	add    esp,0x10
c0011185:	89 c2                	mov    edx,eax
c0011187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001118a:	89 10                	mov    DWORD PTR [eax],edx
c001118c:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0011191:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011197:	05 78 01 00 00       	add    eax,0x178
c001119c:	83 ec 0c             	sub    esp,0xc
c001119f:	50                   	push   eax
c00111a0:	e8 a1 db ff ff       	call   c000ed46 <GDT::flush()>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00111ad:	83 ec 08             	sub    esp,0x8
c00111b0:	50                   	push   eax
c00111b1:	68 a8 8c 02 c0       	push   0xc0028ca8
c00111b6:	e8 16 15 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00111bb:	83 c4 10             	add    esp,0x10
c00111be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00111c3:	c9                   	leave  
c00111c4:	c3                   	ret    
c00111c5:	90                   	nop

c00111c6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00111c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111d1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00111d6:	75 08                	jne    c00111e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00111d8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111de:	eb 38                	jmp    c0011218 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00111e0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111e5:	75 17                	jne    c00111fe <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00111e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111ef:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00111f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111fb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00111fe:	89 c1                	mov    ecx,eax
c0011200:	83 e1 fd             	and    ecx,0xfffffffd
c0011203:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011209:	74 cd                	je     c00111d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001120b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011210:	83 e0 ef             	and    eax,0xffffffef
c0011213:	83 f8 08             	cmp    eax,0x8
c0011216:	76 c0                	jbe    c00111d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011218:	31 c0                	xor    eax,eax
c001121a:	c3                   	ret    
c001121b:	90                   	nop

c001121c <ReservedFilename::isAtty()>:
c001121c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011220:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011223:	31 c0                	xor    eax,eax
c0011225:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001122b:	74 09                	je     c0011236 <ReservedFilename::isAtty()+0x1a>
c001122d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011233:	0f 94 c0             	sete   al
c0011236:	c3                   	ret    
c0011237:	90                   	nop

c0011238 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001123c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011240:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011243:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011247:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001124c:	75 08                	jne    c0011256 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001124e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011254:	eb 3d                	jmp    c0011293 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011256:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001125b:	75 17                	jne    c0011274 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001125d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011262:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011265:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001126b:	8b 10                	mov    edx,DWORD PTR [eax]
c001126d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011271:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011274:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011279:	75 04                	jne    c001127f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001127b:	89 0a                	mov    DWORD PTR [edx],ecx
c001127d:	eb 14                	jmp    c0011293 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001127f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011284:	74 c8                	je     c001124e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011286:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001128b:	83 e0 ef             	and    eax,0xffffffef
c001128e:	83 f8 08             	cmp    eax,0x8
c0011291:	76 bb                	jbe    c001124e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011293:	31 c0                	xor    eax,eax
c0011295:	c3                   	ret    

c0011296 <UnixFile::getFileDescriptor()>:
c0011296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001129a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001129d:	c3                   	ret    

c001129e <UnixFile::UnixFile(int)>:
c001129e:	53                   	push   ebx
c001129f:	83 ec 28             	sub    esp,0x28
c00112a2:	ba 94 8d 02 c0       	mov    edx,0xc0028d94
c00112a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112ab:	89 10                	mov    DWORD PTR [eax],edx
c00112ad:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00112b5:	0f 8f 8c 01 00 00    	jg     c0011447 <UnixFile::UnixFile(int)+0x1a9>
c00112bb:	a1 40 b8 02 c0       	mov    eax,ds:0xc002b840
c00112c0:	8d 50 01             	lea    edx,[eax+0x1]
c00112c3:	89 15 40 b8 02 c0    	mov    DWORD PTR ds:0xc002b840,edx
c00112c9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00112cd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00112d0:	83 ec 08             	sub    esp,0x8
c00112d3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00112d7:	68 f8 c9 02 c0       	push   0xc002c9f8
c00112dc:	e8 8f 5d 01 00       	call   c0027070 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112e1:	83 c4 10             	add    esp,0x10
c00112e4:	a0 f4 c9 02 c0       	mov    al,ds:0xc002c9f4
c00112e9:	83 f0 01             	xor    eax,0x1
c00112ec:	84 c0                	test   al,al
c00112ee:	0f 84 54 01 00 00    	je     c0011448 <UnixFile::UnixFile(int)+0x1aa>
c00112f4:	c6 05 f4 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c9f4,0x1
c00112fb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011303:	83 ec 0c             	sub    esp,0xc
c0011306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001130a:	e8 c5 e1 ff ff       	call   c000f4d4 <malloc>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	89 c3                	mov    ebx,eax
c0011314:	83 ec 08             	sub    esp,0x8
c0011317:	68 03 ff ff 0f       	push   0xfffff03
c001131c:	53                   	push   ebx
c001131d:	e8 2c 01 00 00       	call   c001144e <ReservedFilename::ReservedFilename(int)>
c0011322:	83 c4 10             	add    esp,0x10
c0011325:	89 1d ec c9 02 c0    	mov    DWORD PTR ds:0xc002c9ec,ebx
c001132b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011333:	83 ec 0c             	sub    esp,0xc
c0011336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001133a:	e8 95 e1 ff ff       	call   c000f4d4 <malloc>
c001133f:	83 c4 10             	add    esp,0x10
c0011342:	89 c3                	mov    ebx,eax
c0011344:	83 ec 08             	sub    esp,0x8
c0011347:	68 01 ff ff 0f       	push   0xfffff01
c001134c:	53                   	push   ebx
c001134d:	e8 fc 00 00 00       	call   c001144e <ReservedFilename::ReservedFilename(int)>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	89 1d f0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9f0,ebx
c001135b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011363:	83 ec 0c             	sub    esp,0xc
c0011366:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001136a:	e8 65 e1 ff ff       	call   c000f4d4 <malloc>
c001136f:	83 c4 10             	add    esp,0x10
c0011372:	89 c3                	mov    ebx,eax
c0011374:	83 ec 08             	sub    esp,0x8
c0011377:	68 00 ff ff 0f       	push   0xfffff00
c001137c:	53                   	push   ebx
c001137d:	e8 cc 00 00 00       	call   c001144e <ReservedFilename::ReservedFilename(int)>
c0011382:	83 c4 10             	add    esp,0x10
c0011385:	89 1d e4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9e4,ebx
c001138b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011393:	83 ec 0c             	sub    esp,0xc
c0011396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001139a:	e8 35 e1 ff ff       	call   c000f4d4 <malloc>
c001139f:	83 c4 10             	add    esp,0x10
c00113a2:	89 c3                	mov    ebx,eax
c00113a4:	83 ec 08             	sub    esp,0x8
c00113a7:	68 02 ff ff 0f       	push   0xfffff02
c00113ac:	53                   	push   ebx
c00113ad:	e8 9c 00 00 00       	call   c001144e <ReservedFilename::ReservedFilename(int)>
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	89 1d e8 c9 02 c0    	mov    DWORD PTR ds:0xc002c9e8,ebx
c00113bb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00113c3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00113c8:	7f 7e                	jg     c0011448 <UnixFile::UnixFile(int)+0x1aa>
c00113ca:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00113d2:	83 ec 0c             	sub    esp,0xc
c00113d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00113d9:	e8 f6 e0 ff ff       	call   c000f4d4 <malloc>
c00113de:	83 c4 10             	add    esp,0x10
c00113e1:	89 c3                	mov    ebx,eax
c00113e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113e7:	05 10 ff ff 0f       	add    eax,0xfffff10
c00113ec:	83 ec 08             	sub    esp,0x8
c00113ef:	50                   	push   eax
c00113f0:	53                   	push   ebx
c00113f1:	e8 58 00 00 00       	call   c001144e <ReservedFilename::ReservedFilename(int)>
c00113f6:	83 c4 10             	add    esp,0x10
c00113f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113fd:	89 1c 85 c0 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3640],ebx
c0011404:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001140c:	83 ec 0c             	sub    esp,0xc
c001140f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011413:	e8 bc e0 ff ff       	call   c000f4d4 <malloc>
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	89 c3                	mov    ebx,eax
c001141d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011421:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011426:	83 ec 08             	sub    esp,0x8
c0011429:	50                   	push   eax
c001142a:	53                   	push   ebx
c001142b:	e8 1e 00 00 00       	call   c001144e <ReservedFilename::ReservedFilename(int)>
c0011430:	83 c4 10             	add    esp,0x10
c0011433:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011437:	89 1c 85 80 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3680],ebx
c001143e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011442:	e9 7c ff ff ff       	jmp    c00113c3 <UnixFile::UnixFile(int)+0x125>
c0011447:	90                   	nop
c0011448:	83 c4 28             	add    esp,0x28
c001144b:	5b                   	pop    ebx
c001144c:	c3                   	ret    
c001144d:	90                   	nop

c001144e <ReservedFilename::ReservedFilename(int)>:
c001144e:	83 ec 0c             	sub    esp,0xc
c0011451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011455:	83 ec 08             	sub    esp,0x8
c0011458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001145c:	50                   	push   eax
c001145d:	e8 3c fe ff ff       	call   c001129e <UnixFile::UnixFile(int)>
c0011462:	83 c4 10             	add    esp,0x10
c0011465:	ba b0 8d 02 c0       	mov    edx,0xc0028db0
c001146a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001146e:	89 10                	mov    DWORD PTR [eax],edx
c0011470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011474:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011478:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001147b:	90                   	nop
c001147c:	83 c4 0c             	add    esp,0xc
c001147f:	c3                   	ret    

c0011480 <UnixFile::~UnixFile()>:
c0011480:	83 ec 1c             	sub    esp,0x1c
c0011483:	ba 94 8d 02 c0       	mov    edx,0xc0028d94
c0011488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001148c:	89 10                	mov    DWORD PTR [eax],edx
c001148e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011492:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011495:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001149a:	7f 73                	jg     c001150f <UnixFile::~UnixFile()+0x8f>
c001149c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114a4:	83 ec 0c             	sub    esp,0xc
c00114a7:	68 f8 c9 02 c0       	push   0xc002c9f8
c00114ac:	e8 93 5c 01 00       	call   c0027144 <LinkedList<UnixFile>::getFirstElement()>
c00114b1:	83 c4 10             	add    esp,0x10
c00114b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00114b8:	83 ec 0c             	sub    esp,0xc
c00114bb:	68 f8 c9 02 c0       	push   0xc002c9f8
c00114c0:	e8 87 5c 01 00       	call   c002714c <LinkedList<UnixFile>::removeFirst()>
c00114c5:	83 c4 10             	add    esp,0x10
c00114c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00114cc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00114d0:	74 40                	je     c0011512 <UnixFile::~UnixFile()+0x92>
c00114d2:	83 ec 08             	sub    esp,0x8
c00114d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00114d9:	68 f8 c9 02 c0       	push   0xc002c9f8
c00114de:	e8 8d 5b 01 00       	call   c0027070 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00114e3:	83 c4 10             	add    esp,0x10
c00114e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114ea:	8d 50 01             	lea    edx,[eax+0x1]
c00114ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00114f1:	3d 88 13 00 00       	cmp    eax,0x1388
c00114f6:	0f 94 c0             	sete   al
c00114f9:	84 c0                	test   al,al
c00114fb:	74 a7                	je     c00114a4 <UnixFile::~UnixFile()+0x24>
c00114fd:	83 ec 0c             	sub    esp,0xc
c0011500:	68 6c 8d 02 c0       	push   0xc0028d6c
c0011505:	e8 e1 82 00 00       	call   c00197eb <Krnl::panic(char const*)>
c001150a:	83 c4 10             	add    esp,0x10
c001150d:	eb 95                	jmp    c00114a4 <UnixFile::~UnixFile()+0x24>
c001150f:	90                   	nop
c0011510:	eb 01                	jmp    c0011513 <UnixFile::~UnixFile()+0x93>
c0011512:	90                   	nop
c0011513:	90                   	nop
c0011514:	83 c4 1c             	add    esp,0x1c
c0011517:	c3                   	ret    

c0011518 <UnixFile::~UnixFile()>:
c0011518:	83 ec 0c             	sub    esp,0xc
c001151b:	83 ec 0c             	sub    esp,0xc
c001151e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011522:	e8 59 ff ff ff       	call   c0011480 <UnixFile::~UnixFile()>
c0011527:	83 c4 10             	add    esp,0x10
c001152a:	83 ec 08             	sub    esp,0x8
c001152d:	6a 0c                	push   0xc
c001152f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011533:	e8 b9 10 00 00       	call   c00125f1 <operator delete(void*, unsigned long)>
c0011538:	83 c4 10             	add    esp,0x10
c001153b:	83 c4 0c             	add    esp,0xc
c001153e:	c3                   	ret    
c001153f:	90                   	nop

c0011540 <ReservedFilename::~ReservedFilename()>:
c0011540:	83 ec 0c             	sub    esp,0xc
c0011543:	ba b0 8d 02 c0       	mov    edx,0xc0028db0
c0011548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001154c:	89 10                	mov    DWORD PTR [eax],edx
c001154e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011552:	83 ec 0c             	sub    esp,0xc
c0011555:	50                   	push   eax
c0011556:	e8 25 ff ff ff       	call   c0011480 <UnixFile::~UnixFile()>
c001155b:	83 c4 10             	add    esp,0x10
c001155e:	90                   	nop
c001155f:	83 c4 0c             	add    esp,0xc
c0011562:	c3                   	ret    
c0011563:	90                   	nop

c0011564 <ReservedFilename::~ReservedFilename()>:
c0011564:	83 ec 0c             	sub    esp,0xc
c0011567:	83 ec 0c             	sub    esp,0xc
c001156a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001156e:	e8 cd ff ff ff       	call   c0011540 <ReservedFilename::~ReservedFilename()>
c0011573:	83 c4 10             	add    esp,0x10
c0011576:	83 ec 08             	sub    esp,0x8
c0011579:	6a 0c                	push   0xc
c001157b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001157f:	e8 6d 10 00 00       	call   c00125f1 <operator delete(void*, unsigned long)>
c0011584:	83 c4 10             	add    esp,0x10
c0011587:	83 c4 0c             	add    esp,0xc
c001158a:	c3                   	ret    

c001158b <getFromFileDescriptor(int)>:
c001158b:	53                   	push   ebx
c001158c:	83 ec 08             	sub    esp,0x8
c001158f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011593:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011599:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001159f:	7f 2c                	jg     c00115cd <getFromFileDescriptor(int)+0x42>
c00115a1:	83 ec 0c             	sub    esp,0xc
c00115a4:	68 f8 c9 02 c0       	push   0xc002c9f8
c00115a9:	e8 96 5b 01 00       	call   c0027144 <LinkedList<UnixFile>::getFirstElement()>
c00115ae:	83 c4 10             	add    esp,0x10
c00115b1:	85 c0                	test   eax,eax
c00115b3:	75 04                	jne    c00115b9 <getFromFileDescriptor(int)+0x2e>
c00115b5:	31 c0                	xor    eax,eax
c00115b7:	eb 6e                	jmp    c0011627 <getFromFileDescriptor(int)+0x9c>
c00115b9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00115bc:	74 69                	je     c0011627 <getFromFileDescriptor(int)+0x9c>
c00115be:	52                   	push   edx
c00115bf:	52                   	push   edx
c00115c0:	50                   	push   eax
c00115c1:	68 f8 c9 02 c0       	push   0xc002c9f8
c00115c6:	e8 23 5c 01 00       	call   c00271ee <LinkedList<UnixFile>::getNext(UnixFile*)>
c00115cb:	eb e1                	jmp    c00115ae <getFromFileDescriptor(int)+0x23>
c00115cd:	a1 ec c9 02 c0       	mov    eax,ds:0xc002c9ec
c00115d2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00115d8:	74 4d                	je     c0011627 <getFromFileDescriptor(int)+0x9c>
c00115da:	a1 f0 c9 02 c0       	mov    eax,ds:0xc002c9f0
c00115df:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00115e5:	74 40                	je     c0011627 <getFromFileDescriptor(int)+0x9c>
c00115e7:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00115ec:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00115f2:	74 33                	je     c0011627 <getFromFileDescriptor(int)+0x9c>
c00115f4:	a1 e4 c9 02 c0       	mov    eax,ds:0xc002c9e4
c00115f9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00115ff:	74 26                	je     c0011627 <getFromFileDescriptor(int)+0x9c>
c0011601:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011607:	83 f8 08             	cmp    eax,0x8
c001160a:	77 09                	ja     c0011615 <getFromFileDescriptor(int)+0x8a>
c001160c:	8b 04 85 c0 c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3640]
c0011613:	eb 12                	jmp    c0011627 <getFromFileDescriptor(int)+0x9c>
c0011615:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001161b:	83 fb 08             	cmp    ebx,0x8
c001161e:	77 95                	ja     c00115b5 <getFromFileDescriptor(int)+0x2a>
c0011620:	8b 04 9d 80 c9 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3680]
c0011627:	83 c4 08             	add    esp,0x8
c001162a:	5b                   	pop    ebx
c001162b:	c3                   	ret    

c001162c <__static_initialization_and_destruction_0(int, int)>:
c001162c:	83 ec 0c             	sub    esp,0xc
c001162f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011634:	75 34                	jne    c001166a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011636:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001163e:	75 2a                	jne    c001166a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011640:	83 ec 0c             	sub    esp,0xc
c0011643:	68 f8 c9 02 c0       	push   0xc002c9f8
c0011648:	e8 cb 59 01 00       	call   c0027018 <LinkedList<UnixFile>::LinkedList()>
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	83 ec 04             	sub    esp,0x4
c0011653:	68 c8 b7 02 c0       	push   0xc002b7c8
c0011658:	68 f8 c9 02 c0       	push   0xc002c9f8
c001165d:	68 16 70 02 c0       	push   0xc0027016
c0011662:	e8 04 0f 00 00       	call   c001256b <__cxa_atexit>
c0011667:	83 c4 10             	add    esp,0x10
c001166a:	90                   	nop
c001166b:	83 c4 0c             	add    esp,0xc
c001166e:	c3                   	ret    

c001166f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001166f:	83 ec 0c             	sub    esp,0xc
c0011672:	83 ec 08             	sub    esp,0x8
c0011675:	68 ff ff 00 00       	push   0xffff
c001167a:	6a 01                	push   0x1
c001167c:	e8 ab ff ff ff       	call   c001162c <__static_initialization_and_destruction_0(int, int)>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	83 c4 0c             	add    esp,0xc
c0011687:	c3                   	ret    

c0011688 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011688:	53                   	push   ebx
c0011689:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001168d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011691:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011697:	89 c8                	mov    eax,ecx
c0011699:	d1 e8                	shr    eax,1
c001169b:	03 05 48 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b848
c00116a1:	83 e1 01             	and    ecx,0x1
c00116a4:	8a 10                	mov    dl,BYTE PTR [eax]
c00116a6:	75 09                	jne    c00116b1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00116a8:	83 e2 f0             	and    edx,0xfffffff0
c00116ab:	09 da                	or     edx,ebx
c00116ad:	88 10                	mov    BYTE PTR [eax],dl
c00116af:	5b                   	pop    ebx
c00116b0:	c3                   	ret    
c00116b1:	c1 e3 04             	shl    ebx,0x4
c00116b4:	83 e2 0f             	and    edx,0xf
c00116b7:	09 da                	or     edx,ebx
c00116b9:	88 10                	mov    BYTE PTR [eax],dl
c00116bb:	5b                   	pop    ebx
c00116bc:	c3                   	ret    

c00116bd <Virt::getPageState(unsigned long)>:
c00116bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116c1:	8b 0d 48 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b848
c00116c7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00116cd:	89 d0                	mov    eax,edx
c00116cf:	d1 e8                	shr    eax,1
c00116d1:	83 e2 01             	and    edx,0x1
c00116d4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00116d7:	75 04                	jne    c00116dd <Virt::getPageState(unsigned long)+0x20>
c00116d9:	83 e0 0f             	and    eax,0xf
c00116dc:	c3                   	ret    
c00116dd:	c0 e8 04             	shr    al,0x4
c00116e0:	c3                   	ret    

c00116e1 <Virt::allocateKernelVirtualPages(int)>:
c00116e1:	55                   	push   ebp
c00116e2:	31 ed                	xor    ebp,ebp
c00116e4:	57                   	push   edi
c00116e5:	56                   	push   esi
c00116e6:	53                   	push   ebx
c00116e7:	31 db                	xor    ebx,ebx
c00116e9:	83 ec 1c             	sub    esp,0x1c
c00116ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116f0:	8b 3d 44 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b844
c00116f6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00116fb:	57                   	push   edi
c00116fc:	e8 bc ff ff ff       	call   c00116bd <Virt::getPageState(unsigned long)>
c0011701:	5a                   	pop    edx
c0011702:	84 c0                	test   al,al
c0011704:	75 3a                	jne    c0011740 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011706:	85 db                	test   ebx,ebx
c0011708:	75 02                	jne    c001170c <Virt::allocateKernelVirtualPages(int)+0x2b>
c001170a:	89 fd                	mov    ebp,edi
c001170c:	43                   	inc    ebx
c001170d:	39 f3                	cmp    ebx,esi
c001170f:	74 5a                	je     c001176b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011711:	47                   	inc    edi
c0011712:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011718:	76 31                	jbe    c001174b <Virt::allocateKernelVirtualPages(int)+0x6a>
c001171a:	c7 05 44 b8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b844,0xc8000
c0011724:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011729:	75 28                	jne    c0011753 <Virt::allocateKernelVirtualPages(int)+0x72>
c001172b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011730:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011735:	57                   	push   edi
c0011736:	e8 82 ff ff ff       	call   c00116bd <Virt::getPageState(unsigned long)>
c001173b:	5a                   	pop    edx
c001173c:	84 c0                	test   al,al
c001173e:	74 c6                	je     c0011706 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011740:	31 db                	xor    ebx,ebx
c0011742:	47                   	inc    edi
c0011743:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011749:	77 cf                	ja     c001171a <Virt::allocateKernelVirtualPages(int)+0x39>
c001174b:	89 3d 44 b8 02 c0    	mov    DWORD PTR ds:0xc002b844,edi
c0011751:	eb a8                	jmp    c00116fb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011753:	83 ec 0c             	sub    esp,0xc
c0011756:	68 c4 8d 02 c0       	push   0xc0028dc4
c001175b:	e8 8b 80 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0011760:	8b 3d 44 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b844
c0011766:	83 c4 10             	add    esp,0x10
c0011769:	eb 90                	jmp    c00116fb <Virt::allocateKernelVirtualPages(int)+0x1a>
c001176b:	89 2d 44 b8 02 c0    	mov    DWORD PTR ds:0xc002b844,ebp
c0011771:	4b                   	dec    ebx
c0011772:	74 5f                	je     c00117d3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011774:	85 f6                	test   esi,esi
c0011776:	74 3d                	je     c00117b5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011778:	89 e8                	mov    eax,ebp
c001177a:	31 db                	xor    ebx,ebx
c001177c:	8d 7e ff             	lea    edi,[esi-0x1]
c001177f:	eb 14                	jmp    c0011795 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011781:	6a 01                	push   0x1
c0011783:	43                   	inc    ebx
c0011784:	50                   	push   eax
c0011785:	e8 fe fe ff ff       	call   c0011688 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001178a:	58                   	pop    eax
c001178b:	39 f3                	cmp    ebx,esi
c001178d:	5a                   	pop    edx
c001178e:	74 25                	je     c00117b5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011790:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c0011795:	8d 50 01             	lea    edx,[eax+0x1]
c0011798:	85 db                	test   ebx,ebx
c001179a:	89 15 44 b8 02 c0    	mov    DWORD PTR ds:0xc002b844,edx
c00117a0:	74 20                	je     c00117c2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00117a2:	39 df                	cmp    edi,ebx
c00117a4:	75 db                	jne    c0011781 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00117a6:	6a 03                	push   0x3
c00117a8:	43                   	inc    ebx
c00117a9:	50                   	push   eax
c00117aa:	e8 d9 fe ff ff       	call   c0011688 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117af:	59                   	pop    ecx
c00117b0:	39 f3                	cmp    ebx,esi
c00117b2:	58                   	pop    eax
c00117b3:	75 db                	jne    c0011790 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00117b5:	83 c4 1c             	add    esp,0x1c
c00117b8:	89 e8                	mov    eax,ebp
c00117ba:	5b                   	pop    ebx
c00117bb:	c1 e0 0c             	shl    eax,0xc
c00117be:	5e                   	pop    esi
c00117bf:	5f                   	pop    edi
c00117c0:	5d                   	pop    ebp
c00117c1:	c3                   	ret    
c00117c2:	6a 02                	push   0x2
c00117c4:	bb 01 00 00 00       	mov    ebx,0x1
c00117c9:	50                   	push   eax
c00117ca:	e8 b9 fe ff ff       	call   c0011688 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117cf:	58                   	pop    eax
c00117d0:	5a                   	pop    edx
c00117d1:	eb bd                	jmp    c0011790 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00117d3:	6a 04                	push   0x4
c00117d5:	8d 45 01             	lea    eax,[ebp+0x1]
c00117d8:	55                   	push   ebp
c00117d9:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c00117de:	e8 a5 fe ff ff       	call   c0011688 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117e3:	59                   	pop    ecx
c00117e4:	89 e8                	mov    eax,ebp
c00117e6:	5b                   	pop    ebx
c00117e7:	c1 e0 0c             	shl    eax,0xc
c00117ea:	83 c4 1c             	add    esp,0x1c
c00117ed:	5b                   	pop    ebx
c00117ee:	5e                   	pop    esi
c00117ef:	5f                   	pop    edi
c00117f0:	5d                   	pop    ebp
c00117f1:	c3                   	ret    

c00117f2 <Virt::virtualMemorySetup()>:
c00117f2:	53                   	push   ebx
c00117f3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117f8:	83 ec 08             	sub    esp,0x8
c00117fb:	6a 0f                	push   0xf
c00117fd:	53                   	push   ebx
c00117fe:	43                   	inc    ebx
c00117ff:	e8 84 fe ff ff       	call   c0011688 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011804:	59                   	pop    ecx
c0011805:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001180b:	58                   	pop    eax
c001180c:	75 ed                	jne    c00117fb <Virt::virtualMemorySetup()+0x9>
c001180e:	83 ec 08             	sub    esp,0x8
c0011811:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011816:	68 00 00 00 c8       	push   0xc8000000
c001181b:	68 4b 8f 02 c0       	push   0xc0028f4b
c0011820:	e8 ac 0e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0011825:	58                   	pop    eax
c0011826:	5a                   	pop    edx
c0011827:	68 00 f0 ff ef       	push   0xeffff000
c001182c:	68 5f 8f 02 c0       	push   0xc0028f5f
c0011831:	e8 9b 0e 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0011836:	83 c4 10             	add    esp,0x10
c0011839:	83 ec 08             	sub    esp,0x8
c001183c:	6a 00                	push   0x0
c001183e:	53                   	push   ebx
c001183f:	43                   	inc    ebx
c0011840:	e8 43 fe ff ff       	call   c0011688 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011845:	83 c4 10             	add    esp,0x10
c0011848:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001184e:	75 e9                	jne    c0011839 <Virt::virtualMemorySetup()+0x47>
c0011850:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011855:	83 ec 08             	sub    esp,0x8
c0011858:	6a 0f                	push   0xf
c001185a:	53                   	push   ebx
c001185b:	43                   	inc    ebx
c001185c:	e8 27 fe ff ff       	call   c0011688 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011861:	83 c4 10             	add    esp,0x10
c0011864:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001186a:	75 e9                	jne    c0011855 <Virt::virtualMemorySetup()+0x63>
c001186c:	83 c4 08             	add    esp,0x8
c001186f:	5b                   	pop    ebx
c0011870:	c3                   	ret    

c0011871 <Virt::getAKernelVAS()>:
c0011871:	a1 04 ca 02 c0       	mov    eax,ds:0xc002ca04
c0011876:	c3                   	ret    

c0011877 <Virt::setupPageSwapping(int)>:
c0011877:	57                   	push   edi
c0011878:	56                   	push   esi
c0011879:	53                   	push   ebx
c001187a:	83 ec 1c             	sub    esp,0x1c
c001187d:	68 14 01 00 00       	push   0x114
c0011882:	e8 4d dc ff ff       	call   c000f4d4 <malloc>
c0011887:	83 c4 0c             	add    esp,0xc
c001188a:	89 c6                	mov    esi,eax
c001188c:	ff 35 d4 dd 02 c0    	push   DWORD PTR ds:0xc002ddd4
c0011892:	68 73 8f 02 c0       	push   0xc0028f73
c0011897:	50                   	push   eax
c0011898:	e8 63 13 00 00       	call   c0012c00 <File::File(char const*, Process*)>
c001189d:	89 34 24             	mov    DWORD PTR [esp],esi
c00118a0:	e8 37 15 00 00       	call   c0012ddc <File::unlink()>
c00118a5:	58                   	pop    eax
c00118a6:	5a                   	pop    edx
c00118a7:	6a 12                	push   0x12
c00118a9:	56                   	push   esi
c00118aa:	e8 b5 13 00 00       	call   c0012c64 <File::open(FileOpenMode)>
c00118af:	83 c4 10             	add    esp,0x10
c00118b2:	85 c0                	test   eax,eax
c00118b4:	0f 85 ca 00 00 00    	jne    c0011984 <Virt::setupPageSwapping(int)+0x10d>
c00118ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00118be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118c6:	c1 e3 08             	shl    ebx,0x8
c00118c9:	83 ec 0c             	sub    esp,0xc
c00118cc:	68 00 00 01 00       	push   0x10000
c00118d1:	e8 fe db ff ff       	call   c000f4d4 <malloc>
c00118d6:	83 c4 0c             	add    esp,0xc
c00118d9:	89 c7                	mov    edi,eax
c00118db:	68 00 00 01 00       	push   0x10000
c00118e0:	6a 00                	push   0x0
c00118e2:	50                   	push   eax
c00118e3:	e8 a3 ed fe ff       	call   c000068b <memset>
c00118e8:	83 c4 10             	add    esp,0x10
c00118eb:	85 db                	test   ebx,ebx
c00118ed:	79 03                	jns    c00118f2 <Virt::setupPageSwapping(int)+0x7b>
c00118ef:	83 c3 0f             	add    ebx,0xf
c00118f2:	c1 fb 04             	sar    ebx,0x4
c00118f5:	4b                   	dec    ebx
c00118f6:	83 fb ff             	cmp    ebx,0xffffffff
c00118f9:	74 4b                	je     c0011946 <Virt::setupPageSwapping(int)+0xcf>
c00118fb:	83 ec 0c             	sub    esp,0xc
c00118fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0011900:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011904:	52                   	push   edx
c0011905:	57                   	push   edi
c0011906:	6a 00                	push   0x0
c0011908:	68 00 00 01 00       	push   0x10000
c001190d:	56                   	push   esi
c001190e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011911:	83 c4 20             	add    esp,0x20
c0011914:	85 c0                	test   eax,eax
c0011916:	75 59                	jne    c0011971 <Virt::setupPageSwapping(int)+0xfa>
c0011918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001191c:	3d 00 00 01 00       	cmp    eax,0x10000
c0011921:	74 d2                	je     c00118f5 <Virt::setupPageSwapping(int)+0x7e>
c0011923:	83 ec 08             	sub    esp,0x8
c0011926:	4b                   	dec    ebx
c0011927:	50                   	push   eax
c0011928:	68 c6 8f 02 c0       	push   0xc0028fc6
c001192d:	e8 9f 0d 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0011932:	c7 04 24 cf 8f 02 c0 	mov    DWORD PTR [esp],0xc0028fcf
c0011939:	e8 ad 7e 00 00       	call   c00197eb <Krnl::panic(char const*)>
c001193e:	83 c4 10             	add    esp,0x10
c0011941:	83 fb ff             	cmp    ebx,0xffffffff
c0011944:	75 b5                	jne    c00118fb <Virt::setupPageSwapping(int)+0x84>
c0011946:	83 ec 0c             	sub    esp,0xc
c0011949:	56                   	push   esi
c001194a:	e8 73 13 00 00       	call   c0012cc2 <File::close()>
c001194f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011952:	e8 9d db ff ff       	call   c000f4f4 <rfree>
c0011957:	83 c4 10             	add    esp,0x10
c001195a:	85 f6                	test   esi,esi
c001195c:	74 0c                	je     c001196a <Virt::setupPageSwapping(int)+0xf3>
c001195e:	83 ec 0c             	sub    esp,0xc
c0011961:	8b 06                	mov    eax,DWORD PTR [esi]
c0011963:	56                   	push   esi
c0011964:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	5b                   	pop    ebx
c001196e:	5e                   	pop    esi
c001196f:	5f                   	pop    edi
c0011970:	c3                   	ret    
c0011971:	83 ec 08             	sub    esp,0x8
c0011974:	50                   	push   eax
c0011975:	68 ae 8f 02 c0       	push   0xc0028fae
c001197a:	e8 52 0d 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001197f:	83 c4 10             	add    esp,0x10
c0011982:	eb 94                	jmp    c0011918 <Virt::setupPageSwapping(int)+0xa1>
c0011984:	83 ec 08             	sub    esp,0x8
c0011987:	50                   	push   eax
c0011988:	68 8a 8f 02 c0       	push   0xc0028f8a
c001198d:	e8 3f 0d 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0011992:	c7 04 24 93 8f 02 c0 	mov    DWORD PTR [esp],0xc0028f93
c0011999:	e8 4d 7e 00 00       	call   c00197eb <Krnl::panic(char const*)>
c001199e:	83 c4 10             	add    esp,0x10
c00119a1:	e9 14 ff ff ff       	jmp    c00118ba <Virt::setupPageSwapping(int)+0x43>

c00119a6 <VAS::VAS()>:
c00119a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119b5:	a3 04 ca 02 c0       	mov    ds:0xc002ca04,eax
c00119ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119be:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00119c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119c6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00119c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119cd:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c00119d4:	90                   	nop
c00119d5:	c3                   	ret    

c00119d6 <VAS::VAS(VAS*)>:
c00119d6:	83 ec 0c             	sub    esp,0xc
c00119d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119e4:	83 ec 0c             	sub    esp,0xc
c00119e7:	68 e4 8d 02 c0       	push   0xc0028de4
c00119ec:	e8 fa 7d 00 00       	call   c00197eb <Krnl::panic(char const*)>
c00119f1:	83 c4 10             	add    esp,0x10
c00119f4:	90                   	nop
c00119f5:	83 c4 0c             	add    esp,0xc
c00119f8:	c3                   	ret    
c00119f9:	90                   	nop

c00119fa <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00119fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119fe:	89 c2                	mov    edx,eax
c0011a00:	c1 e8 0a             	shr    eax,0xa
c0011a03:	c1 ea 16             	shr    edx,0x16
c0011a06:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011a0b:	19 c9                	sbb    ecx,ecx
c0011a0d:	c1 e2 0c             	shl    edx,0xc
c0011a10:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011a16:	25 fc 0f 00 00       	and    eax,0xffc
c0011a1b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011a22:	01 d0                	add    eax,edx
c0011a24:	c3                   	ret    
c0011a25:	90                   	nop

c0011a26 <VAS::getPageTableEntry(unsigned long)>:
c0011a26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011a2a:	89 ca                	mov    edx,ecx
c0011a2c:	c1 e9 0a             	shr    ecx,0xa
c0011a2f:	c1 ea 16             	shr    edx,0x16
c0011a32:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011a38:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011a3e:	c1 e0 0c             	shl    eax,0xc
c0011a41:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011a44:	c3                   	ret    

c0011a45 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011a45:	57                   	push   edi
c0011a46:	56                   	push   esi
c0011a47:	be 01 00 00 00       	mov    esi,0x1
c0011a4c:	53                   	push   ebx
c0011a4d:	83 ec 10             	sub    esp,0x10
c0011a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a54:	c1 eb 0c             	shr    ebx,0xc
c0011a57:	eb 3f                	jmp    c0011a98 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011a59:	e8 13 fe ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c0011a5e:	83 ec 08             	sub    esp,0x8
c0011a61:	57                   	push   edi
c0011a62:	50                   	push   eax
c0011a63:	e8 be ff ff ff       	call   c0011a26 <VAS::getPageTableEntry(unsigned long)>
c0011a68:	83 c4 10             	add    esp,0x10
c0011a6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a6d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a71:	f6 c4 04             	test   ah,0x4
c0011a74:	75 5f                	jne    c0011ad5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011a76:	80 fa 04             	cmp    dl,0x4
c0011a79:	74 78                	je     c0011af3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011a7b:	80 fa 02             	cmp    dl,0x2
c0011a7e:	0f 84 88 00 00 00    	je     c0011b0c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011a84:	80 fa 03             	cmp    dl,0x3
c0011a87:	0f 84 ad 00 00 00    	je     c0011b3a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011a8d:	fe ca                	dec    dl
c0011a8f:	0f 84 92 00 00 00    	je     c0011b27 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a95:	43                   	inc    ebx
c0011a96:	31 f6                	xor    esi,esi
c0011a98:	53                   	push   ebx
c0011a99:	e8 1f fc ff ff       	call   c00116bd <Virt::getPageState(unsigned long)>
c0011a9e:	5f                   	pop    edi
c0011a9f:	89 df                	mov    edi,ebx
c0011aa1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011aa5:	c1 e7 0c             	shl    edi,0xc
c0011aa8:	84 c0                	test   al,al
c0011aaa:	75 ad                	jne    c0011a59 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011aac:	83 ec 0c             	sub    esp,0xc
c0011aaf:	68 d5 8f 02 c0       	push   0xc0028fd5
c0011ab4:	e8 32 7d 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0011ab9:	e8 b3 fd ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c0011abe:	5a                   	pop    edx
c0011abf:	59                   	pop    ecx
c0011ac0:	57                   	push   edi
c0011ac1:	50                   	push   eax
c0011ac2:	e8 5f ff ff ff       	call   c0011a26 <VAS::getPageTableEntry(unsigned long)>
c0011ac7:	83 c4 10             	add    esp,0x10
c0011aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0011acc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ad0:	f6 c4 04             	test   ah,0x4
c0011ad3:	74 c0                	je     c0011a95 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ad5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011ad9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ade:	83 ec 0c             	sub    esp,0xc
c0011ae1:	50                   	push   eax
c0011ae2:	e8 0d df ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011ae7:	83 c4 10             	add    esp,0x10
c0011aea:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011aee:	80 fa 04             	cmp    dl,0x4
c0011af1:	75 88                	jne    c0011a7b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011af3:	89 f0                	mov    eax,esi
c0011af5:	84 c0                	test   al,al
c0011af7:	75 47                	jne    c0011b40 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011af9:	c7 44 24 20 08 8e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028e08
c0011b01:	83 c4 10             	add    esp,0x10
c0011b04:	5b                   	pop    ebx
c0011b05:	5e                   	pop    esi
c0011b06:	5f                   	pop    edi
c0011b07:	e9 df 7c 00 00       	jmp    c00197eb <Krnl::panic(char const*)>
c0011b0c:	89 f0                	mov    eax,esi
c0011b0e:	84 c0                	test   al,al
c0011b10:	75 15                	jne    c0011b27 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b12:	83 ec 0c             	sub    esp,0xc
c0011b15:	68 f1 8f 02 c0       	push   0xc0028ff1
c0011b1a:	e8 cc 7c 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0011b1f:	83 c4 10             	add    esp,0x10
c0011b22:	e9 6e ff ff ff       	jmp    c0011a95 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b27:	83 ec 08             	sub    esp,0x8
c0011b2a:	6a 00                	push   0x0
c0011b2c:	53                   	push   ebx
c0011b2d:	e8 56 fb ff ff       	call   c0011688 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b32:	83 c4 10             	add    esp,0x10
c0011b35:	e9 5b ff ff ff       	jmp    c0011a95 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b3a:	89 f0                	mov    eax,esi
c0011b3c:	84 c0                	test   al,al
c0011b3e:	75 15                	jne    c0011b55 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011b40:	83 ec 08             	sub    esp,0x8
c0011b43:	6a 00                	push   0x0
c0011b45:	53                   	push   ebx
c0011b46:	e8 3d fb ff ff       	call   c0011688 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b4b:	83 c4 10             	add    esp,0x10
c0011b4e:	83 c4 10             	add    esp,0x10
c0011b51:	5b                   	pop    ebx
c0011b52:	5e                   	pop    esi
c0011b53:	5f                   	pop    edi
c0011b54:	c3                   	ret    
c0011b55:	c7 44 24 20 0d 90 02 c0 	mov    DWORD PTR [esp+0x20],0xc002900d
c0011b5d:	83 c4 10             	add    esp,0x10
c0011b60:	5b                   	pop    ebx
c0011b61:	5e                   	pop    esi
c0011b62:	5f                   	pop    edi
c0011b63:	e9 83 7c 00 00       	jmp    c00197eb <Krnl::panic(char const*)>

c0011b68 <VAS::freeAllocatedPages(unsigned long)>:
c0011b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011b74:	74 09                	je     c0011b7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011b76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011b7a:	e9 c6 fe ff ff       	jmp    c0011a45 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b7f:	c7 44 24 04 2c 8e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028e2c
c0011b87:	e9 45 0b 00 00       	jmp    c00126d1 <Dbg::kprintf(char const*, ...)>

c0011b8c <VAS::virtualToPhysical(unsigned long)>:
c0011b8c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b90:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b94:	e8 8d fe ff ff       	call   c0011a26 <VAS::getPageTableEntry(unsigned long)>
c0011b99:	5a                   	pop    edx
c0011b9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b9c:	59                   	pop    ecx
c0011b9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ba2:	c3                   	ret    
c0011ba3:	90                   	nop

c0011ba4 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011ba4:	55                   	push   ebp
c0011ba5:	57                   	push   edi
c0011ba6:	56                   	push   esi
c0011ba7:	53                   	push   ebx
c0011ba8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011bac:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011bb0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011bb4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011bb8:	85 db                	test   ebx,ebx
c0011bba:	7e 22                	jle    c0011bde <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011bbc:	c1 e3 0c             	shl    ebx,0xc
c0011bbf:	01 f3                	add    ebx,esi
c0011bc1:	56                   	push   esi
c0011bc2:	81 c6 00 10 00 00    	add    esi,0x1000
c0011bc8:	55                   	push   ebp
c0011bc9:	e8 58 fe ff ff       	call   c0011a26 <VAS::getPageTableEntry(unsigned long)>
c0011bce:	5a                   	pop    edx
c0011bcf:	59                   	pop    ecx
c0011bd0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011bd2:	21 f9                	and    ecx,edi
c0011bd4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011bd8:	39 f3                	cmp    ebx,esi
c0011bda:	89 08                	mov    DWORD PTR [eax],ecx
c0011bdc:	75 e3                	jne    c0011bc1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011bde:	5b                   	pop    ebx
c0011bdf:	5e                   	pop    esi
c0011be0:	5f                   	pop    edi
c0011be1:	5d                   	pop    ebp
c0011be2:	c3                   	ret    
c0011be3:	90                   	nop

c0011be4 <VAS::setToWriteCombining(unsigned long, int)>:
c0011be4:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0011be9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bef:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011bf6:	75 01                	jne    c0011bf9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011bf8:	c3                   	ret    
c0011bf9:	68 80 00 00 00       	push   0x80
c0011bfe:	6a ff                	push   0xffffffff
c0011c00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c0c:	e8 93 ff ff ff       	call   c0011ba4 <VAS::reflagRange(unsigned long, int, int, int)>
c0011c11:	83 c4 14             	add    esp,0x14
c0011c14:	c3                   	ret    
c0011c15:	90                   	nop

c0011c16 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011c16:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c1f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c26:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011c29:	19 c0                	sbb    eax,eax
c0011c2b:	83 ca 03             	or     edx,0x3
c0011c2e:	83 e0 fc             	and    eax,0xfffffffc
c0011c31:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011c38:	0f 20 d8             	mov    eax,cr3
c0011c3b:	0f 22 d8             	mov    cr3,eax
c0011c3e:	c3                   	ret    
c0011c3f:	90                   	nop

c0011c40 <VAS::~VAS()>:
c0011c40:	83 ec 2c             	sub    esp,0x2c
c0011c43:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c4b:	e8 2a b0 00 00       	call   c001cc7a <lockScheduler()>
c0011c50:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c5a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c60:	83 ec 04             	sub    esp,0x4
c0011c63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c67:	6a 01                	push   0x1
c0011c69:	50                   	push   eax
c0011c6a:	e8 a7 ff ff ff       	call   c0011c16 <VAS::mapOtherVASIn(bool, VAS*)>
c0011c6f:	83 c4 10             	add    esp,0x10
c0011c72:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011c7a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011c82:	0f 8f d7 00 00 00    	jg     c0011d5f <VAS::~VAS()+0x11f>
c0011c88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011c8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c93:	c1 e2 02             	shl    edx,0x2
c0011c96:	01 d0                	add    eax,edx
c0011c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca2:	83 e0 01             	and    eax,0x1
c0011ca5:	0f 84 ab 00 00 00    	je     c0011d56 <VAS::~VAS()+0x116>
c0011cab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011cb3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011cbb:	7f 75                	jg     c0011d32 <VAS::~VAS()+0xf2>
c0011cbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011cc1:	c1 e0 0a             	shl    eax,0xa
c0011cc4:	89 c2                	mov    edx,eax
c0011cc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011cca:	01 d0                	add    eax,edx
c0011ccc:	c1 e0 0c             	shl    eax,0xc
c0011ccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cd3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011cd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cda:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cdd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011ce3:	83 ec 04             	sub    esp,0x4
c0011ce6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011cea:	6a 01                	push   0x1
c0011cec:	50                   	push   eax
c0011ced:	e8 08 fd ff ff       	call   c00119fa <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011cf2:	83 c4 10             	add    esp,0x10
c0011cf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011cf9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d07:	25 01 04 00 00       	and    eax,0x401
c0011d0c:	3d 01 04 00 00       	cmp    eax,0x401
c0011d11:	75 19                	jne    c0011d2c <VAS::~VAS()+0xec>
c0011d13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d17:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d1c:	83 ec 0c             	sub    esp,0xc
c0011d1f:	50                   	push   eax
c0011d20:	e8 cf dc ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011d25:	83 c4 10             	add    esp,0x10
c0011d28:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d2c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011d30:	eb 81                	jmp    c0011cb3 <VAS::~VAS()+0x73>
c0011d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d36:	25 00 04 00 00       	and    eax,0x400
c0011d3b:	74 19                	je     c0011d56 <VAS::~VAS()+0x116>
c0011d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d41:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d46:	83 ec 0c             	sub    esp,0xc
c0011d49:	50                   	push   eax
c0011d4a:	e8 a5 dc ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011d4f:	83 c4 10             	add    esp,0x10
c0011d52:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d56:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011d5a:	e9 1b ff ff ff       	jmp    c0011c7a <VAS::~VAS()+0x3a>
c0011d5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d66:	83 ec 0c             	sub    esp,0xc
c0011d69:	50                   	push   eax
c0011d6a:	e8 d6 fc ff ff       	call   c0011a45 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d6f:	83 c4 10             	add    esp,0x10
c0011d72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d79:	83 ec 0c             	sub    esp,0xc
c0011d7c:	50                   	push   eax
c0011d7d:	e8 72 dc ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d8d:	c1 e0 02             	shl    eax,0x2
c0011d90:	83 ec 08             	sub    esp,0x8
c0011d93:	50                   	push   eax
c0011d94:	68 50 8e 02 c0       	push   0xc0028e50
c0011d99:	e8 33 09 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0011d9e:	83 c4 10             	add    esp,0x10
c0011da1:	e8 d6 ae 00 00       	call   c001cc7c <unlockScheduler()>
c0011da6:	90                   	nop
c0011da7:	83 c4 2c             	add    esp,0x2c
c0011daa:	c3                   	ret    
c0011dab:	90                   	nop

c0011dac <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011dac:	55                   	push   ebp
c0011dad:	57                   	push   edi
c0011dae:	56                   	push   esi
c0011daf:	53                   	push   ebx
c0011db0:	83 ec 1c             	sub    esp,0x1c
c0011db3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011db7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011dbb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011dc1:	77 08                	ja     c0011dcb <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011dc3:	0f 20 d8             	mov    eax,cr3
c0011dc6:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011dc9:	75 47                	jne    c0011e12 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011dcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dcf:	09 d8                	or     eax,ebx
c0011dd1:	a9 ff 0f 00 00       	test   eax,0xfff
c0011dd6:	75 57                	jne    c0011e2f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011dd8:	89 de                	mov    esi,ebx
c0011dda:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ddd:	c1 ee 16             	shr    esi,0x16
c0011de0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011de7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011deb:	74 54                	je     c0011e41 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ded:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011df1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011df7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011dfb:	c1 e6 0c             	shl    esi,0xc
c0011dfe:	c1 eb 0a             	shr    ebx,0xa
c0011e01:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011e07:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011e0a:	83 c4 1c             	add    esp,0x1c
c0011e0d:	5b                   	pop    ebx
c0011e0e:	5e                   	pop    esi
c0011e0f:	5f                   	pop    edi
c0011e10:	5d                   	pop    ebp
c0011e11:	c3                   	ret    
c0011e12:	83 ec 0c             	sub    esp,0xc
c0011e15:	68 70 8e 02 c0       	push   0xc0028e70
c0011e1a:	e8 b2 08 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0011e1f:	83 c4 10             	add    esp,0x10
c0011e22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e26:	09 d8                	or     eax,ebx
c0011e28:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e2d:	74 a9                	je     c0011dd8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011e2f:	83 ec 0c             	sub    esp,0xc
c0011e32:	68 d8 8e 02 c0       	push   0xc0028ed8
c0011e37:	e8 af 79 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0011e3c:	83 c4 10             	add    esp,0x10
c0011e3f:	eb 97                	jmp    c0011dd8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e45:	e8 34 dc ff ff       	call   c000fa7e <Phys::allocatePage()>
c0011e4a:	89 c5                	mov    ebp,eax
c0011e4c:	e8 20 fa ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c0011e51:	83 ec 0c             	sub    esp,0xc
c0011e54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e58:	6a 01                	push   0x1
c0011e5a:	e8 82 f8 ff ff       	call   c00116e1 <Virt::allocateKernelVirtualPages(int)>
c0011e5f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e66:	6a 01                	push   0x1
c0011e68:	50                   	push   eax
c0011e69:	55                   	push   ebp
c0011e6a:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e70:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e74:	51                   	push   ecx
c0011e75:	e8 26 02 00 00       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e7a:	83 c4 1c             	add    esp,0x1c
c0011e7d:	68 00 10 00 00       	push   0x1000
c0011e82:	6a 00                	push   0x0
c0011e84:	50                   	push   eax
c0011e85:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e89:	e8 fd e7 fe ff       	call   c000068b <memset>
c0011e8e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e92:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e95:	e8 ab fb ff ff       	call   c0011a45 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e9e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ea1:	83 c4 10             	add    esp,0x10
c0011ea4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ea7:	e9 41 ff ff ff       	jmp    c0011ded <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011eac <VAS::allocatePages(int, int)>:
c0011eac:	55                   	push   ebp
c0011ead:	57                   	push   edi
c0011eae:	56                   	push   esi
c0011eaf:	53                   	push   ebx
c0011eb0:	83 ec 1c             	sub    esp,0x1c
c0011eb3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011eb7:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0011ebc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ec2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011ec8:	83 e0 01             	and    eax,0x1
c0011ecb:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011ecf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ed3:	0f 85 cc 00 00 00    	jne    c0011fa5 <VAS::allocatePages(int, int)+0xf9>
c0011ed9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011edc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ee0:	85 c0                	test   eax,eax
c0011ee2:	0f 84 a1 00 00 00    	je     c0011f89 <VAS::allocatePages(int, int)+0xdd>
c0011ee8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011eec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ef0:	c1 e6 0c             	shl    esi,0xc
c0011ef3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011ef7:	85 c0                	test   eax,eax
c0011ef9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011efc:	7e 33                	jle    c0011f31 <VAS::allocatePages(int, int)+0x85>
c0011efe:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011f02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f06:	81 cd 00 04 00 00    	or     ebp,0x400
c0011f0c:	e8 6d db ff ff       	call   c000fa7e <Phys::allocatePage()>
c0011f11:	55                   	push   ebp
c0011f12:	53                   	push   ebx
c0011f13:	50                   	push   eax
c0011f14:	57                   	push   edi
c0011f15:	e8 92 fe ff ff       	call   c0011dac <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f1a:	83 c4 10             	add    esp,0x10
c0011f1d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f22:	74 03                	je     c0011f27 <VAS::allocatePages(int, int)+0x7b>
c0011f24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f2d:	39 de                	cmp    esi,ebx
c0011f2f:	75 db                	jne    c0011f0c <VAS::allocatePages(int, int)+0x60>
c0011f31:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f36:	75 12                	jne    c0011f4a <VAS::allocatePages(int, int)+0x9e>
c0011f38:	0f 20 d8             	mov    eax,cr3
c0011f3b:	0f 22 d8             	mov    cr3,eax
c0011f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f42:	83 c4 1c             	add    esp,0x1c
c0011f45:	5b                   	pop    ebx
c0011f46:	5e                   	pop    esi
c0011f47:	5f                   	pop    edi
c0011f48:	5d                   	pop    ebp
c0011f49:	c3                   	ret    
c0011f4a:	c1 ee 0a             	shr    esi,0xa
c0011f4d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f51:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011f57:	c1 eb 0a             	shr    ebx,0xa
c0011f5a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011f60:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f66:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f6c:	39 c3                	cmp    ebx,eax
c0011f6e:	77 ce                	ja     c0011f3e <VAS::allocatePages(int, int)+0x92>
c0011f70:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f73:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f79:	39 d8                	cmp    eax,ebx
c0011f7b:	73 f3                	jae    c0011f70 <VAS::allocatePages(int, int)+0xc4>
c0011f7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f81:	83 c4 1c             	add    esp,0x1c
c0011f84:	5b                   	pop    ebx
c0011f85:	5e                   	pop    esi
c0011f86:	5f                   	pop    edi
c0011f87:	5d                   	pop    ebp
c0011f88:	c3                   	ret    
c0011f89:	83 ec 0c             	sub    esp,0xc
c0011f8c:	68 fc 8e 02 c0       	push   0xc0028efc
c0011f91:	e8 55 78 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0011f96:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f9d:	83 c4 10             	add    esp,0x10
c0011fa0:	e9 43 ff ff ff       	jmp    c0011ee8 <VAS::allocatePages(int, int)+0x3c>
c0011fa5:	83 ec 0c             	sub    esp,0xc
c0011fa8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011fac:	e8 30 f7 ff ff       	call   c00116e1 <Virt::allocateKernelVirtualPages(int)>
c0011fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011fb5:	83 c4 10             	add    esp,0x10
c0011fb8:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011fbd:	0f 87 9b 00 00 00    	ja     c001205e <VAS::allocatePages(int, int)+0x1b2>
c0011fc3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011fc7:	85 d2                	test   edx,edx
c0011fc9:	7e 3c                	jle    c0012007 <VAS::allocatePages(int, int)+0x15b>
c0011fcb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011fcf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011fd3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fd7:	c1 e5 0c             	shl    ebp,0xc
c0011fda:	81 ce 00 04 00 00    	or     esi,0x400
c0011fe0:	01 dd                	add    ebp,ebx
c0011fe2:	e8 97 da ff ff       	call   c000fa7e <Phys::allocatePage()>
c0011fe7:	56                   	push   esi
c0011fe8:	53                   	push   ebx
c0011fe9:	50                   	push   eax
c0011fea:	57                   	push   edi
c0011feb:	e8 bc fd ff ff       	call   c0011dac <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ff0:	83 c4 10             	add    esp,0x10
c0011ff3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ff8:	74 03                	je     c0011ffd <VAS::allocatePages(int, int)+0x151>
c0011ffa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ffd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012003:	39 dd                	cmp    ebp,ebx
c0012005:	75 db                	jne    c0011fe2 <VAS::allocatePages(int, int)+0x136>
c0012007:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001200c:	0f 84 26 ff ff ff    	je     c0011f38 <VAS::allocatePages(int, int)+0x8c>
c0012012:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012016:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001201a:	89 d3                	mov    ebx,edx
c001201c:	c1 e0 0c             	shl    eax,0xc
c001201f:	c1 eb 0a             	shr    ebx,0xa
c0012022:	01 d0                	add    eax,edx
c0012024:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001202a:	c1 e8 0a             	shr    eax,0xa
c001202d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012033:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012038:	2d 00 00 40 00       	sub    eax,0x400000
c001203d:	39 c3                	cmp    ebx,eax
c001203f:	0f 87 f9 fe ff ff    	ja     c0011f3e <VAS::allocatePages(int, int)+0x92>
c0012045:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012048:	81 c3 00 10 00 00    	add    ebx,0x1000
c001204e:	39 d8                	cmp    eax,ebx
c0012050:	73 f3                	jae    c0012045 <VAS::allocatePages(int, int)+0x199>
c0012052:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012056:	83 c4 1c             	add    esp,0x1c
c0012059:	5b                   	pop    ebx
c001205a:	5e                   	pop    esi
c001205b:	5f                   	pop    edi
c001205c:	5d                   	pop    ebp
c001205d:	c3                   	ret    
c001205e:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0012063:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012069:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012070:	0f 84 4d ff ff ff    	je     c0011fc3 <VAS::allocatePages(int, int)+0x117>
c0012076:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001207e:	e9 40 ff ff ff       	jmp    c0011fc3 <VAS::allocatePages(int, int)+0x117>
c0012083:	90                   	nop

c0012084 <VAS::setCPUSpecific(unsigned long)>:
c0012084:	83 ec 0c             	sub    esp,0xc
c0012087:	6a 05                	push   0x5
c0012089:	68 00 00 40 c2       	push   0xc2400000
c001208e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012096:	e8 11 fd ff ff       	call   c0011dac <VAS::mapPage(unsigned long, unsigned long, int)>
c001209b:	83 c4 1c             	add    esp,0x1c
c001209e:	c3                   	ret    
c001209f:	90                   	nop

c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00120a0:	55                   	push   ebp
c00120a1:	57                   	push   edi
c00120a2:	56                   	push   esi
c00120a3:	53                   	push   ebx
c00120a4:	83 ec 1c             	sub    esp,0x1c
c00120a7:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00120ac:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120b6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00120ba:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120c0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00120c4:	83 e0 01             	and    eax,0x1
c00120c7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120cf:	85 c0                	test   eax,eax
c00120d1:	7e 39                	jle    c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00120d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120d7:	89 f3                	mov    ebx,esi
c00120d9:	c1 e0 0c             	shl    eax,0xc
c00120dc:	01 f0                	add    eax,esi
c00120de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120e2:	55                   	push   ebp
c00120e3:	53                   	push   ebx
c00120e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120e8:	29 f0                	sub    eax,esi
c00120ea:	01 d8                	add    eax,ebx
c00120ec:	50                   	push   eax
c00120ed:	57                   	push   edi
c00120ee:	e8 b9 fc ff ff       	call   c0011dac <VAS::mapPage(unsigned long, unsigned long, int)>
c00120f3:	83 c4 10             	add    esp,0x10
c00120f6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120fb:	74 03                	je     c0012100 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00120fd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012100:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012106:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001210a:	75 d6                	jne    c00120e2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001210c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012111:	75 10                	jne    c0012123 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012113:	0f 20 d8             	mov    eax,cr3
c0012116:	0f 22 d8             	mov    cr3,eax
c0012119:	83 c4 1c             	add    esp,0x1c
c001211c:	89 f0                	mov    eax,esi
c001211e:	5b                   	pop    ebx
c001211f:	5e                   	pop    esi
c0012120:	5f                   	pop    edi
c0012121:	5d                   	pop    ebp
c0012122:	c3                   	ret    
c0012123:	89 f3                	mov    ebx,esi
c0012125:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012129:	c1 eb 0a             	shr    ebx,0xa
c001212c:	c1 e0 0c             	shl    eax,0xc
c001212f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012135:	01 f0                	add    eax,esi
c0012137:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001213d:	c1 e8 0a             	shr    eax,0xa
c0012140:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012145:	2d 00 00 40 00       	sub    eax,0x400000
c001214a:	39 c3                	cmp    ebx,eax
c001214c:	77 cb                	ja     c0012119 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001214e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012151:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012157:	39 d8                	cmp    eax,ebx
c0012159:	73 f3                	jae    c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001215b:	83 c4 1c             	add    esp,0x1c
c001215e:	89 f0                	mov    eax,esi
c0012160:	5b                   	pop    ebx
c0012161:	5e                   	pop    esi
c0012162:	5f                   	pop    edi
c0012163:	5d                   	pop    ebp
c0012164:	c3                   	ret    
c0012165:	90                   	nop

c0012166 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012166:	55                   	push   ebp
c0012167:	57                   	push   edi
c0012168:	56                   	push   esi
c0012169:	53                   	push   ebx
c001216a:	83 ec 1c             	sub    esp,0x1c
c001216d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012171:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012175:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012179:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001217d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012182:	75 4a                	jne    c00121ce <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012184:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012188:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001218b:	c1 eb 16             	shr    ebx,0x16
c001218e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012195:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012199:	74 4d                	je     c00121e8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001219b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001219f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00121a3:	c1 e8 0a             	shr    eax,0xa
c00121a6:	80 fa 01             	cmp    dl,0x1
c00121a9:	19 d2                	sbb    edx,edx
c00121ab:	c1 e3 0c             	shl    ebx,0xc
c00121ae:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00121b2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00121b8:	25 fc 0f 00 00       	and    eax,0xffc
c00121bd:	01 d8                	add    eax,ebx
c00121bf:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00121c6:	83 c4 1c             	add    esp,0x1c
c00121c9:	5b                   	pop    ebx
c00121ca:	5e                   	pop    esi
c00121cb:	5f                   	pop    edi
c00121cc:	5d                   	pop    ebp
c00121cd:	c3                   	ret    
c00121ce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00121d2:	83 ec 0c             	sub    esp,0xc
c00121d5:	68 28 8f 02 c0       	push   0xc0028f28
c00121da:	e8 0c 76 00 00       	call   c00197eb <Krnl::panic(char const*)>
c00121df:	83 c4 10             	add    esp,0x10
c00121e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121e6:	eb 9c                	jmp    c0012184 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00121e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00121ec:	e8 8d d8 ff ff       	call   c000fa7e <Phys::allocatePage()>
c00121f1:	89 c5                	mov    ebp,eax
c00121f3:	e8 79 f6 ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c00121f8:	83 ec 0c             	sub    esp,0xc
c00121fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121ff:	6a 01                	push   0x1
c0012201:	e8 db f4 ff ff       	call   c00116e1 <Virt::allocateKernelVirtualPages(int)>
c0012206:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001220d:	6a 01                	push   0x1
c001220f:	50                   	push   eax
c0012210:	55                   	push   ebp
c0012211:	81 cd 07 04 00 00    	or     ebp,0x407
c0012217:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001221b:	51                   	push   ecx
c001221c:	e8 7f fe ff ff       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012221:	83 c4 1c             	add    esp,0x1c
c0012224:	68 00 10 00 00       	push   0x1000
c0012229:	6a 00                	push   0x0
c001222b:	50                   	push   eax
c001222c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012230:	e8 56 e4 fe ff       	call   c000068b <memset>
c0012235:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012239:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001223c:	e8 04 f8 ff ff       	call   c0011a45 <Virt::freeKernelVirtualPages(unsigned long)>
c0012241:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012244:	83 c4 10             	add    esp,0x10
c0012247:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001224a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001224e:	e9 48 ff ff ff       	jmp    c001219b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012253:	90                   	nop

c0012254 <VAS::VAS(bool)>:
c0012254:	53                   	push   ebx
c0012255:	83 ec 28             	sub    esp,0x28
c0012258:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001225c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012260:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012264:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001226b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001226f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012273:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012276:	e8 03 d8 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001227b:	89 c2                	mov    edx,eax
c001227d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012281:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012284:	e8 e8 f5 ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c0012289:	89 c3                	mov    ebx,eax
c001228b:	83 ec 0c             	sub    esp,0xc
c001228e:	6a 01                	push   0x1
c0012290:	e8 4c f4 ff ff       	call   c00116e1 <Virt::allocateKernelVirtualPages(int)>
c0012295:	83 c4 10             	add    esp,0x10
c0012298:	89 c2                	mov    edx,eax
c001229a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001229e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122a1:	83 ec 0c             	sub    esp,0xc
c00122a4:	6a 03                	push   0x3
c00122a6:	6a 01                	push   0x1
c00122a8:	52                   	push   edx
c00122a9:	50                   	push   eax
c00122aa:	53                   	push   ebx
c00122ab:	e8 f0 fd ff ff       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122b0:	83 c4 20             	add    esp,0x20
c00122b3:	89 c2                	mov    edx,eax
c00122b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00122bc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00122c4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00122cc:	7f 1c                	jg     c00122ea <VAS::VAS(bool)+0x96>
c00122ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122d9:	c1 e2 02             	shl    edx,0x2
c00122dc:	01 d0                	add    eax,edx
c00122de:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122e4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e8:	eb da                	jmp    c00122c4 <VAS::VAS(bool)+0x70>
c00122ea:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00122f2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00122fa:	7f 7a                	jg     c0012376 <VAS::VAS(bool)+0x122>
c00122fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012300:	2d 00 02 00 00       	sub    eax,0x200
c0012305:	c1 e0 0c             	shl    eax,0xc
c0012308:	83 c8 03             	or     eax,0x3
c001230b:	89 c2                	mov    edx,eax
c001230d:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0012312:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012318:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001231e:	83 e0 10             	and    eax,0x10
c0012321:	84 c0                	test   al,al
c0012323:	74 07                	je     c001232c <VAS::VAS(bool)+0xd8>
c0012325:	b8 00 01 00 00       	mov    eax,0x100
c001232a:	eb 05                	jmp    c0012331 <VAS::VAS(bool)+0xdd>
c001232c:	b8 00 00 00 00       	mov    eax,0x0
c0012331:	09 d0                	or     eax,edx
c0012333:	89 c1                	mov    ecx,eax
c0012335:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012339:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001233c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012340:	c1 e2 02             	shl    edx,0x2
c0012343:	01 d0                	add    eax,edx
c0012345:	89 ca                	mov    edx,ecx
c0012347:	89 10                	mov    DWORD PTR [eax],edx
c0012349:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001234d:	2d 40 03 00 00       	sub    eax,0x340
c0012352:	83 f8 7f             	cmp    eax,0x7f
c0012355:	77 16                	ja     c001236d <VAS::VAS(bool)+0x119>
c0012357:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001235b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001235e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012362:	c1 e2 02             	shl    edx,0x2
c0012365:	01 d0                	add    eax,edx
c0012367:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001236d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012371:	e9 7c ff ff ff       	jmp    c00122f2 <VAS::VAS(bool)+0x9e>
c0012376:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001237b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012381:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012387:	83 e0 10             	and    eax,0x10
c001238a:	84 c0                	test   al,al
c001238c:	74 07                	je     c0012395 <VAS::VAS(bool)+0x141>
c001238e:	b8 03 41 00 00       	mov    eax,0x4103
c0012393:	eb 05                	jmp    c001239a <VAS::VAS(bool)+0x146>
c0012395:	b8 03 40 00 00       	mov    eax,0x4003
c001239a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001239e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00123a1:	81 c2 20 0c 00 00    	add    edx,0xc20
c00123a7:	89 02                	mov    DWORD PTR [edx],eax
c00123a9:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00123ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123b4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00123ba:	83 ec 08             	sub    esp,0x8
c00123bd:	50                   	push   eax
c00123be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123c2:	e8 bd fc ff ff       	call   c0012084 <VAS::setCPUSpecific(unsigned long)>
c00123c7:	83 c4 10             	add    esp,0x10
c00123ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123ce:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00123d1:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00123d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123dc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123e2:	83 e0 10             	and    eax,0x10
c00123e5:	84 c0                	test   al,al
c00123e7:	74 07                	je     c00123f0 <VAS::VAS(bool)+0x19c>
c00123e9:	b8 00 01 00 00       	mov    eax,0x100
c00123ee:	eb 05                	jmp    c00123f5 <VAS::VAS(bool)+0x1a1>
c00123f0:	b8 00 00 00 00       	mov    eax,0x0
c00123f5:	09 c2                	or     edx,eax
c00123f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123fe:	05 fc 0f 00 00       	add    eax,0xffc
c0012403:	83 ca 03             	or     edx,0x3
c0012406:	89 10                	mov    DWORD PTR [eax],edx
c0012408:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001240d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012413:	83 ec 0c             	sub    esp,0xc
c0012416:	50                   	push   eax
c0012417:	e8 90 19 00 00       	call   c0013dac <Device::getName()>
c001241c:	83 c4 10             	add    esp,0x10
c001241f:	83 ec 08             	sub    esp,0x8
c0012422:	68 27 90 02 c0       	push   0xc0029027
c0012427:	50                   	push   eax
c0012428:	e8 4e e3 fe ff       	call   c000077b <strcmp>
c001242d:	83 c4 10             	add    esp,0x10
c0012430:	85 c0                	test   eax,eax
c0012432:	0f 94 c0             	sete   al
c0012435:	84 c0                	test   al,al
c0012437:	74 70                	je     c00124a9 <VAS::VAS(bool)+0x255>
c0012439:	e8 1f a8 00 00       	call   c001cc5d <disableIRQs()>
c001243e:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0012443:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012449:	05 7c 09 00 00       	add    eax,0x97c
c001244e:	83 ec 0c             	sub    esp,0xc
c0012451:	50                   	push   eax
c0012452:	e8 f9 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001245f:	89 c3                	mov    ebx,eax
c0012461:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0012466:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001246c:	05 7c 09 00 00       	add    eax,0x97c
c0012471:	83 ec 0c             	sub    esp,0xc
c0012474:	50                   	push   eax
c0012475:	e8 d6 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001247a:	83 c4 10             	add    esp,0x10
c001247d:	83 ec 08             	sub    esp,0x8
c0012480:	50                   	push   eax
c0012481:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012485:	e8 9c f5 ff ff       	call   c0011a26 <VAS::getPageTableEntry(unsigned long)>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	8b 00                	mov    eax,DWORD PTR [eax]
c001248f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012494:	6a 11                	push   0x11
c0012496:	53                   	push   ebx
c0012497:	50                   	push   eax
c0012498:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001249c:	e8 0b f9 ff ff       	call   c0011dac <VAS::mapPage(unsigned long, unsigned long, int)>
c00124a1:	83 c4 10             	add    esp,0x10
c00124a4:	e8 c2 a7 00 00       	call   c001cc6b <enableIRQs()>
c00124a9:	90                   	nop
c00124aa:	83 c4 28             	add    esp,0x28
c00124ad:	5b                   	pop    ebx
c00124ae:	c3                   	ret    

c00124af <mapVASFirstTime>:
c00124af:	55                   	push   ebp
c00124b0:	57                   	push   edi
c00124b1:	56                   	push   esi
c00124b2:	53                   	push   ebx
c00124b3:	83 ec 0c             	sub    esp,0xc
c00124b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124bb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00124be:	4a                   	dec    edx
c00124bf:	0f 84 8e 00 00 00    	je     c0012553 <mapVASFirstTime+0xa4>
c00124c5:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00124c8:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00124cb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00124d0:	c1 e5 15             	shl    ebp,0x15
c00124d3:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c00124d8:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00124de:	29 eb                	sub    ebx,ebp
c00124e0:	29 ee                	sub    esi,ebp
c00124e2:	e8 97 d5 ff ff       	call   c000fa7e <Phys::allocatePage()>
c00124e7:	83 ec 0c             	sub    esp,0xc
c00124ea:	68 03 04 00 00       	push   0x403
c00124ef:	6a 01                	push   0x1
c00124f1:	53                   	push   ebx
c00124f2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124f8:	50                   	push   eax
c00124f9:	57                   	push   edi
c00124fa:	e8 a1 fb ff ff       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124ff:	83 c4 20             	add    esp,0x20
c0012502:	39 f3                	cmp    ebx,esi
c0012504:	75 dc                	jne    c00124e2 <mapVASFirstTime+0x33>
c0012506:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001250b:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012510:	29 ee                	sub    esi,ebp
c0012512:	29 e8                	sub    eax,ebp
c0012514:	89 c5                	mov    ebp,eax
c0012516:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001251a:	19 db                	sbb    ebx,ebx
c001251c:	e8 5d d5 ff ff       	call   c000fa7e <Phys::allocatePage()>
c0012521:	83 e3 04             	and    ebx,0x4
c0012524:	83 ec 0c             	sub    esp,0xc
c0012527:	81 c3 03 04 00 00    	add    ebx,0x403
c001252d:	53                   	push   ebx
c001252e:	6a 01                	push   0x1
c0012530:	56                   	push   esi
c0012531:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012537:	50                   	push   eax
c0012538:	57                   	push   edi
c0012539:	e8 62 fb ff ff       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001253e:	83 c4 20             	add    esp,0x20
c0012541:	39 f5                	cmp    ebp,esi
c0012543:	75 d1                	jne    c0012516 <mapVASFirstTime+0x67>
c0012545:	0f 20 d8             	mov    eax,cr3
c0012548:	0f 22 d8             	mov    cr3,eax
c001254b:	83 c4 0c             	add    esp,0xc
c001254e:	5b                   	pop    ebx
c001254f:	5e                   	pop    esi
c0012550:	5f                   	pop    edi
c0012551:	5d                   	pop    ebp
c0012552:	c3                   	ret    
c0012553:	83 ec 0c             	sub    esp,0xc
c0012556:	68 35 90 02 c0       	push   0xc0029035
c001255b:	e8 71 01 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0012560:	83 c4 10             	add    esp,0x10
c0012563:	83 c4 0c             	add    esp,0xc
c0012566:	5b                   	pop    ebx
c0012567:	5e                   	pop    esi
c0012568:	5f                   	pop    edi
c0012569:	5d                   	pop    ebp
c001256a:	c3                   	ret    

c001256b <__cxa_atexit>:
c001256b:	31 c0                	xor    eax,eax
c001256d:	c3                   	ret    

c001256e <__cxa_finalize>:
c001256e:	c3                   	ret    

c001256f <__stack_chk_fail>:
c001256f:	55                   	push   ebp
c0012570:	89 e5                	mov    ebp,esp
c0012572:	83 ec 14             	sub    esp,0x14
c0012575:	68 4e 90 02 c0       	push   0xc002904e
c001257a:	e8 52 01 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001257f:	58                   	pop    eax
c0012580:	5a                   	pop    edx
c0012581:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012584:	68 9e 90 02 c0       	push   0xc002909e
c0012589:	e8 43 01 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001258e:	59                   	pop    ecx
c001258f:	58                   	pop    eax
c0012590:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012593:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012596:	68 9e 90 02 c0       	push   0xc002909e
c001259b:	e8 31 01 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00125a0:	5a                   	pop    edx
c00125a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125a4:	59                   	pop    ecx
c00125a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00125a7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125aa:	68 9e 90 02 c0       	push   0xc002909e
c00125af:	e8 1d 01 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00125b4:	5a                   	pop    edx
c00125b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125b8:	59                   	pop    ecx
c00125b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00125bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00125bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125c0:	68 9e 90 02 c0       	push   0xc002909e
c00125c5:	e8 07 01 00 00       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00125ca:	c7 04 24 a6 90 02 c0 	mov    DWORD PTR [esp],0xc00290a6
c00125d1:	e8 15 72 00 00       	call   c00197eb <Krnl::panic(char const*)>
c00125d6:	83 c4 10             	add    esp,0x10
c00125d9:	c9                   	leave  
c00125da:	c3                   	ret    

c00125db <__cxa_pure_virtual>:
c00125db:	83 ec 18             	sub    esp,0x18
c00125de:	68 be 90 02 c0       	push   0xc00290be
c00125e3:	e8 03 72 00 00       	call   c00197eb <Krnl::panic(char const*)>
c00125e8:	83 c4 1c             	add    esp,0x1c
c00125eb:	c3                   	ret    

c00125ec <operator new[](unsigned long)>:
c00125ec:	e9 e3 ce ff ff       	jmp    c000f4d4 <malloc>

c00125f1 <operator delete(void*, unsigned long)>:
c00125f1:	e9 fe ce ff ff       	jmp    c000f4f4 <rfree>

c00125f6 <operator delete[](void*)>:
c00125f6:	e9 f9 ce ff ff       	jmp    c000f4f4 <rfree>

c00125fb <operator delete[](void*, unsigned long)>:
c00125fb:	e9 f4 ce ff ff       	jmp    c000f4f4 <rfree>

c0012600 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012600:	57                   	push   edi
c0012601:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012606:	56                   	push   esi
c0012607:	be d4 90 02 c0       	mov    esi,0xc00290d4
c001260c:	53                   	push   ebx
c001260d:	83 ec 40             	sub    esp,0x40
c0012610:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012614:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012618:	fc                   	cld    
c0012619:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001261b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001261f:	83 f9 3e             	cmp    ecx,0x3e
c0012622:	7e 05                	jle    c0012629 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012624:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012629:	89 df                	mov    edi,ebx
c001262b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001262f:	eb 02                	jmp    c0012633 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012631:	89 c7                	mov    edi,eax
c0012633:	31 d2                	xor    edx,edx
c0012635:	46                   	inc    esi
c0012636:	89 f8                	mov    eax,edi
c0012638:	f7 f1                	div    ecx
c001263a:	39 cf                	cmp    edi,ecx
c001263c:	73 f3                	jae    c0012631 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c001263e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012641:	eb 02                	jmp    c0012645 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012643:	89 c3                	mov    ebx,eax
c0012645:	31 d2                	xor    edx,edx
c0012647:	4e                   	dec    esi
c0012648:	89 d8                	mov    eax,ebx
c001264a:	f7 f1                	div    ecx
c001264c:	39 cb                	cmp    ebx,ecx
c001264e:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012652:	88 16                	mov    BYTE PTR [esi],dl
c0012654:	73 ed                	jae    c0012643 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012656:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001265a:	83 c4 40             	add    esp,0x40
c001265d:	5b                   	pop    ebx
c001265e:	5e                   	pop    esi
c001265f:	5f                   	pop    edi
c0012660:	c3                   	ret    

c0012661 <Dbg::logc(char)>:
c0012661:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012665:	ba fd 03 00 00       	mov    edx,0x3fd
c001266a:	ec                   	in     al,dx
c001266b:	a8 20                	test   al,0x20
c001266d:	74 fb                	je     c001266a <Dbg::logc(char)+0x9>
c001266f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012674:	88 c8                	mov    al,cl
c0012676:	ee                   	out    dx,al
c0012677:	c3                   	ret    

c0012678 <Dbg::logs(char*)>:
c0012678:	53                   	push   ebx
c0012679:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001267d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012680:	84 c0                	test   al,al
c0012682:	74 0f                	je     c0012693 <Dbg::logs(char*)+0x1b>
c0012684:	50                   	push   eax
c0012685:	43                   	inc    ebx
c0012686:	e8 d6 ff ff ff       	call   c0012661 <Dbg::logc(char)>
c001268b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001268e:	5a                   	pop    edx
c001268f:	84 c0                	test   al,al
c0012691:	75 f1                	jne    c0012684 <Dbg::logs(char*)+0xc>
c0012693:	5b                   	pop    ebx
c0012694:	c3                   	ret    

c0012695 <Dbg::logWriteInt(unsigned int)>:
c0012695:	83 ec 10             	sub    esp,0x10
c0012698:	6a 0a                	push   0xa
c001269a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001269e:	50                   	push   eax
c001269f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126a3:	e8 58 ff ff ff       	call   c0012600 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126a8:	50                   	push   eax
c00126a9:	e8 ca ff ff ff       	call   c0012678 <Dbg::logs(char*)>
c00126ae:	83 c4 20             	add    esp,0x20
c00126b1:	c3                   	ret    

c00126b2 <Dbg::logWriteIntBase(unsigned int, int)>:
c00126b2:	83 ec 10             	sub    esp,0x10
c00126b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126b9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126bd:	50                   	push   eax
c00126be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126c2:	e8 39 ff ff ff       	call   c0012600 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126c7:	50                   	push   eax
c00126c8:	e8 ab ff ff ff       	call   c0012678 <Dbg::logs(char*)>
c00126cd:	83 c4 20             	add    esp,0x20
c00126d0:	c3                   	ret    

c00126d1 <Dbg::kprintf(char const*, ...)>:
c00126d1:	55                   	push   ebp
c00126d2:	57                   	push   edi
c00126d3:	56                   	push   esi
c00126d4:	53                   	push   ebx
c00126d5:	83 ec 0c             	sub    esp,0xc
c00126d8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126dc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126e4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126e7:	84 c0                	test   al,al
c00126e9:	74 4a                	je     c0012735 <Dbg::kprintf(char const*, ...)+0x64>
c00126eb:	31 db                	xor    ebx,ebx
c00126ed:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126f0:	3c 25                	cmp    al,0x25
c00126f2:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126f5:	0f 85 e4 00 00 00    	jne    c00127df <Dbg::kprintf(char const*, ...)+0x10e>
c00126fb:	83 c3 02             	add    ebx,0x2
c00126fe:	8a 07                	mov    al,BYTE PTR [edi]
c0012700:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012703:	83 e8 25             	sub    eax,0x25
c0012706:	3c 53                	cmp    al,0x53
c0012708:	0f 87 ba 00 00 00    	ja     c00127c8 <Dbg::kprintf(char const*, ...)+0xf7>
c001270e:	0f b6 c0             	movzx  eax,al
c0012711:	ff 24 85 14 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6eec]
c0012718:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001271c:	89 c8                	mov    eax,ecx
c001271e:	83 c1 04             	add    ecx,0x4
c0012721:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012725:	ff 30                	push   DWORD PTR [eax]
c0012727:	e8 4c ff ff ff       	call   c0012678 <Dbg::logs(char*)>
c001272c:	58                   	pop    eax
c001272d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012731:	84 c0                	test   al,al
c0012733:	75 b8                	jne    c00126ed <Dbg::kprintf(char const*, ...)+0x1c>
c0012735:	83 c4 0c             	add    esp,0xc
c0012738:	5b                   	pop    ebx
c0012739:	5e                   	pop    esi
c001273a:	5f                   	pop    edi
c001273b:	5d                   	pop    ebp
c001273c:	c3                   	ret    
c001273d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012741:	89 d0                	mov    eax,edx
c0012743:	83 c2 04             	add    edx,0x4
c0012746:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001274a:	ff 30                	push   DWORD PTR [eax]
c001274c:	e8 44 ff ff ff       	call   c0012695 <Dbg::logWriteInt(unsigned int)>
c0012751:	58                   	pop    eax
c0012752:	eb d9                	jmp    c001272d <Dbg::kprintf(char const*, ...)+0x5c>
c0012754:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012758:	89 d0                	mov    eax,edx
c001275a:	83 c2 04             	add    edx,0x4
c001275d:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012760:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012764:	50                   	push   eax
c0012765:	e8 f7 fe ff ff       	call   c0012661 <Dbg::logc(char)>
c001276a:	58                   	pop    eax
c001276b:	eb c0                	jmp    c001272d <Dbg::kprintf(char const*, ...)+0x5c>
c001276d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012771:	89 c8                	mov    eax,ecx
c0012773:	83 c1 04             	add    ecx,0x4
c0012776:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001277a:	ff 30                	push   DWORD PTR [eax]
c001277c:	e8 14 ff ff ff       	call   c0012695 <Dbg::logWriteInt(unsigned int)>
c0012781:	5f                   	pop    edi
c0012782:	eb a9                	jmp    c001272d <Dbg::kprintf(char const*, ...)+0x5c>
c0012784:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012788:	89 c8                	mov    eax,ecx
c001278a:	83 c1 04             	add    ecx,0x4
c001278d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012791:	6a 10                	push   0x10
c0012793:	ff 30                	push   DWORD PTR [eax]
c0012795:	e8 18 ff ff ff       	call   c00126b2 <Dbg::logWriteIntBase(unsigned int, int)>
c001279a:	59                   	pop    ecx
c001279b:	5f                   	pop    edi
c001279c:	eb 8f                	jmp    c001272d <Dbg::kprintf(char const*, ...)+0x5c>
c001279e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127a2:	89 d0                	mov    eax,edx
c00127a4:	83 c2 08             	add    edx,0x8
c00127a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127ab:	6a 10                	push   0x10
c00127ad:	ff 30                	push   DWORD PTR [eax]
c00127af:	e8 fe fe ff ff       	call   c00126b2 <Dbg::logWriteIntBase(unsigned int, int)>
c00127b4:	58                   	pop    eax
c00127b5:	5a                   	pop    edx
c00127b6:	e9 72 ff ff ff       	jmp    c001272d <Dbg::kprintf(char const*, ...)+0x5c>
c00127bb:	6a 25                	push   0x25
c00127bd:	e8 9f fe ff ff       	call   c0012661 <Dbg::logc(char)>
c00127c2:	58                   	pop    eax
c00127c3:	e9 65 ff ff ff       	jmp    c001272d <Dbg::kprintf(char const*, ...)+0x5c>
c00127c8:	6a 25                	push   0x25
c00127ca:	e8 92 fe ff ff       	call   c0012661 <Dbg::logc(char)>
c00127cf:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127d2:	50                   	push   eax
c00127d3:	e8 89 fe ff ff       	call   c0012661 <Dbg::logc(char)>
c00127d8:	5a                   	pop    edx
c00127d9:	59                   	pop    ecx
c00127da:	e9 4e ff ff ff       	jmp    c001272d <Dbg::kprintf(char const*, ...)+0x5c>
c00127df:	50                   	push   eax
c00127e0:	89 eb                	mov    ebx,ebp
c00127e2:	e8 7a fe ff ff       	call   c0012661 <Dbg::logc(char)>
c00127e7:	89 fd                	mov    ebp,edi
c00127e9:	58                   	pop    eax
c00127ea:	e9 3e ff ff ff       	jmp    c001272d <Dbg::kprintf(char const*, ...)+0x5c>
c00127ef:	90                   	nop

c00127f0 <File::read(unsigned long long, void*, int*)>:
c00127f0:	53                   	push   ebx
c00127f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012800:	3c 19                	cmp    al,0x19
c0012802:	77 35                	ja     c0012839 <File::read(unsigned long long, void*, int*)+0x49>
c0012804:	8b 04 85 a0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3160]
c001280b:	85 c0                	test   eax,eax
c001280d:	74 2a                	je     c0012839 <File::read(unsigned long long, void*, int*)+0x49>
c001280f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012815:	85 c0                	test   eax,eax
c0012817:	74 20                	je     c0012839 <File::read(unsigned long long, void*, int*)+0x49>
c0012819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001281d:	74 21                	je     c0012840 <File::read(unsigned long long, void*, int*)+0x50>
c001281f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012821:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012825:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001282b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001282f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012833:	5b                   	pop    ebx
c0012834:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012837:	ff e0                	jmp    eax
c0012839:	b8 0b 00 00 00       	mov    eax,0xb
c001283e:	eb 05                	jmp    c0012845 <File::read(unsigned long long, void*, int*)+0x55>
c0012840:	b8 05 00 00 00       	mov    eax,0x5
c0012845:	5b                   	pop    ebx
c0012846:	c3                   	ret    
c0012847:	90                   	nop

c0012848 <File::write(unsigned long long, void*, int*)>:
c0012848:	53                   	push   ebx
c0012849:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001284d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012851:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012858:	3c 19                	cmp    al,0x19
c001285a:	77 35                	ja     c0012891 <File::write(unsigned long long, void*, int*)+0x49>
c001285c:	8b 04 85 a0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3160]
c0012863:	85 c0                	test   eax,eax
c0012865:	74 2a                	je     c0012891 <File::write(unsigned long long, void*, int*)+0x49>
c0012867:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001286d:	85 c0                	test   eax,eax
c001286f:	74 20                	je     c0012891 <File::write(unsigned long long, void*, int*)+0x49>
c0012871:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012875:	74 21                	je     c0012898 <File::write(unsigned long long, void*, int*)+0x50>
c0012877:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012879:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001287d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012883:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012887:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001288b:	5b                   	pop    ebx
c001288c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001288f:	ff e0                	jmp    eax
c0012891:	b8 0b 00 00 00       	mov    eax,0xb
c0012896:	eb 05                	jmp    c001289d <File::write(unsigned long long, void*, int*)+0x55>
c0012898:	b8 05 00 00 00       	mov    eax,0x5
c001289d:	5b                   	pop    ebx
c001289e:	c3                   	ret    
c001289f:	90                   	nop

c00128a0 <Directory::read(unsigned long long, void*, int*)>:
c00128a0:	53                   	push   ebx
c00128a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128b0:	3c 19                	cmp    al,0x19
c00128b2:	77 35                	ja     c00128e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128b4:	8b 04 85 a0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3160]
c00128bb:	85 c0                	test   eax,eax
c00128bd:	74 2a                	je     c00128e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128c5:	85 c0                	test   eax,eax
c00128c7:	74 20                	je     c00128e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128cd:	74 21                	je     c00128f0 <Directory::read(unsigned long long, void*, int*)+0x50>
c00128cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128d1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128d5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128e3:	5b                   	pop    ebx
c00128e4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128e7:	ff e0                	jmp    eax
c00128e9:	b8 0b 00 00 00       	mov    eax,0xb
c00128ee:	eb 05                	jmp    c00128f5 <Directory::read(unsigned long long, void*, int*)+0x55>
c00128f0:	b8 05 00 00 00       	mov    eax,0x5
c00128f5:	5b                   	pop    ebx
c00128f6:	c3                   	ret    
c00128f7:	90                   	nop

c00128f8 <Directory::write(unsigned long long, void*, int*)>:
c00128f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128fc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012903:	b8 0b 00 00 00       	mov    eax,0xb
c0012908:	80 fa 19             	cmp    dl,0x19
c001290b:	77 18                	ja     c0012925 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001290d:	8b 14 95 a0 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3160]
c0012914:	85 d2                	test   edx,edx
c0012916:	74 0d                	je     c0012925 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012918:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001291f:	19 c0                	sbb    eax,eax
c0012921:	83 e0 0a             	and    eax,0xa
c0012924:	40                   	inc    eax
c0012925:	c3                   	ret    

c0012926 <File::isAtty()>:
c0012926:	31 c0                	xor    eax,eax
c0012928:	c3                   	ret    
c0012929:	90                   	nop

c001292a <Directory::isAtty()>:
c001292a:	31 c0                	xor    eax,eax
c001292c:	c3                   	ret    
c001292d:	90                   	nop

c001292e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001292e:	b8 0a 00 00 00       	mov    eax,0xa
c0012933:	c3                   	ret    

c0012934 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012934:	b8 0a 00 00 00       	mov    eax,0xa
c0012939:	c3                   	ret    

c001293a <File::~File()>:
c001293a:	83 ec 0c             	sub    esp,0xc
c001293d:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0012942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012946:	89 10                	mov    DWORD PTR [eax],edx
c0012948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294c:	83 ec 0c             	sub    esp,0xc
c001294f:	50                   	push   eax
c0012950:	e8 2b eb ff ff       	call   c0011480 <UnixFile::~UnixFile()>
c0012955:	83 c4 10             	add    esp,0x10
c0012958:	90                   	nop
c0012959:	83 c4 0c             	add    esp,0xc
c001295c:	c3                   	ret    
c001295d:	90                   	nop

c001295e <File::~File()>:
c001295e:	83 ec 0c             	sub    esp,0xc
c0012961:	83 ec 0c             	sub    esp,0xc
c0012964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012968:	e8 cd ff ff ff       	call   c001293a <File::~File()>
c001296d:	83 c4 10             	add    esp,0x10
c0012970:	83 ec 08             	sub    esp,0x8
c0012973:	68 14 01 00 00       	push   0x114
c0012978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001297c:	e8 70 fc ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0012981:	83 c4 10             	add    esp,0x10
c0012984:	83 c4 0c             	add    esp,0xc
c0012987:	c3                   	ret    

c0012988 <Directory::~Directory()>:
c0012988:	83 ec 0c             	sub    esp,0xc
c001298b:	ba ec 92 02 c0       	mov    edx,0xc00292ec
c0012990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012994:	89 10                	mov    DWORD PTR [eax],edx
c0012996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001299a:	83 ec 0c             	sub    esp,0xc
c001299d:	50                   	push   eax
c001299e:	e8 dd ea ff ff       	call   c0011480 <UnixFile::~UnixFile()>
c00129a3:	83 c4 10             	add    esp,0x10
c00129a6:	90                   	nop
c00129a7:	83 c4 0c             	add    esp,0xc
c00129aa:	c3                   	ret    
c00129ab:	90                   	nop

c00129ac <Directory::~Directory()>:
c00129ac:	83 ec 0c             	sub    esp,0xc
c00129af:	83 ec 0c             	sub    esp,0xc
c00129b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b6:	e8 cd ff ff ff       	call   c0012988 <Directory::~Directory()>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	83 ec 08             	sub    esp,0x8
c00129c1:	68 14 01 00 00       	push   0x114
c00129c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ca:	e8 22 fc ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00129cf:	83 c4 10             	add    esp,0x10
c00129d2:	83 c4 0c             	add    esp,0xc
c00129d5:	c3                   	ret    

c00129d6 <Filesystem::Filesystem()>:
c00129d6:	ba 6c 92 02 c0       	mov    edx,0xc002926c
c00129db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129df:	89 10                	mov    DWORD PTR [eax],edx
c00129e1:	8b 15 08 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca08
c00129e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129f2:	a3 08 ca 02 c0       	mov    ds:0xc002ca08,eax
c00129f7:	90                   	nop
c00129f8:	c3                   	ret    
c00129f9:	90                   	nop

c00129fa <Filesystem::~Filesystem()>:
c00129fa:	ba 6c 92 02 c0       	mov    edx,0xc002926c
c00129ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a03:	89 10                	mov    DWORD PTR [eax],edx
c0012a05:	90                   	nop
c0012a06:	c3                   	ret    
c0012a07:	90                   	nop

c0012a08 <Filesystem::~Filesystem()>:
c0012a08:	83 ec 0c             	sub    esp,0xc
c0012a0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a0f:	e8 e6 ff ff ff       	call   c00129fa <Filesystem::~Filesystem()>
c0012a14:	83 c4 04             	add    esp,0x4
c0012a17:	83 ec 08             	sub    esp,0x8
c0012a1a:	6a 08                	push   0x8
c0012a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a20:	e8 cc fb ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0012a25:	83 c4 10             	add    esp,0x10
c0012a28:	83 c4 0c             	add    esp,0xc
c0012a2b:	c3                   	ret    

c0012a2c <initVFS()>:
c0012a2c:	83 ec 18             	sub    esp,0x18
c0012a2f:	6a 08                	push   0x8
c0012a31:	e8 9e ca ff ff       	call   c000f4d4 <malloc>
c0012a36:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a39:	e8 b0 d3 00 00       	call   c001fdee <FAT::FAT()>
c0012a3e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a45:	e8 8a ca ff ff       	call   c000f4d4 <malloc>
c0012a4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a4d:	e8 12 e6 00 00       	call   c0021064 <ISO9660::ISO9660()>
c0012a52:	83 c4 1c             	add    esp,0x1c
c0012a55:	c3                   	ret    

c0012a56 <standardiseFiles(char*, char const*, char const*)>:
c0012a56:	55                   	push   ebp
c0012a57:	57                   	push   edi
c0012a58:	56                   	push   esi
c0012a59:	53                   	push   ebx
c0012a5a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a60:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a67:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a6e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a75:	68 00 04 00 00       	push   0x400
c0012a7a:	6a 00                	push   0x0
c0012a7c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a80:	56                   	push   esi
c0012a81:	e8 05 dc fe ff       	call   c000068b <memset>
c0012a86:	83 c4 10             	add    esp,0x10
c0012a89:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a8d:	75 0b                	jne    c0012a9a <standardiseFiles(char*, char const*, char const*)+0x44>
c0012a8f:	50                   	push   eax
c0012a90:	50                   	push   eax
c0012a91:	57                   	push   edi
c0012a92:	56                   	push   esi
c0012a93:	e8 92 dc fe ff       	call   c000072a <strcpy>
c0012a98:	eb 41                	jmp    c0012adb <standardiseFiles(char*, char const*, char const*)+0x85>
c0012a9a:	8a 07                	mov    al,BYTE PTR [edi]
c0012a9c:	3c 5c                	cmp    al,0x5c
c0012a9e:	74 04                	je     c0012aa4 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012aa0:	3c 2f                	cmp    al,0x2f
c0012aa2:	75 18                	jne    c0012abc <standardiseFiles(char*, char const*, char const*)+0x66>
c0012aa4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012aa7:	3c 60                	cmp    al,0x60
c0012aa9:	7e 03                	jle    c0012aae <standardiseFiles(char*, char const*, char const*)+0x58>
c0012aab:	83 e8 20             	sub    eax,0x20
c0012aae:	88 04 24             	mov    BYTE PTR [esp],al
c0012ab1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ab8:	50                   	push   eax
c0012ab9:	50                   	push   eax
c0012aba:	eb 18                	jmp    c0012ad4 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012abc:	50                   	push   eax
c0012abd:	50                   	push   eax
c0012abe:	55                   	push   ebp
c0012abf:	56                   	push   esi
c0012ac0:	e8 65 dc fe ff       	call   c000072a <strcpy>
c0012ac5:	5a                   	pop    edx
c0012ac6:	59                   	pop    ecx
c0012ac7:	68 e6 a6 02 c0       	push   0xc002a6e6
c0012acc:	56                   	push   esi
c0012acd:	e8 0f dd fe ff       	call   c00007e1 <strcat>
c0012ad2:	5d                   	pop    ebp
c0012ad3:	58                   	pop    eax
c0012ad4:	57                   	push   edi
c0012ad5:	56                   	push   esi
c0012ad6:	e8 06 dd fe ff       	call   c00007e1 <strcat>
c0012adb:	83 c4 10             	add    esp,0x10
c0012ade:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012ae1:	3c 60                	cmp    al,0x60
c0012ae3:	7e 03                	jle    c0012ae8 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012ae5:	83 e8 20             	sub    eax,0x20
c0012ae8:	88 04 24             	mov    BYTE PTR [esp],al
c0012aeb:	88 03                	mov    BYTE PTR [ebx],al
c0012aed:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012af4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012afa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012afe:	bf 03 00 00 00       	mov    edi,0x3
c0012b03:	b8 03 00 00 00       	mov    eax,0x3
c0012b08:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b0b:	84 d2                	test   dl,dl
c0012b0d:	0f 84 91 00 00 00    	je     c0012ba4 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b13:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b16:	80 fa 5c             	cmp    dl,0x5c
c0012b19:	74 05                	je     c0012b20 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012b1b:	80 fa 2f             	cmp    dl,0x2f
c0012b1e:	75 12                	jne    c0012b32 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b20:	89 c5                	mov    ebp,eax
c0012b22:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b27:	74 09                	je     c0012b32 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b29:	40                   	inc    eax
c0012b2a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b2e:	89 cf                	mov    edi,ecx
c0012b30:	eb d6                	jmp    c0012b08 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b32:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b37:	75 5b                	jne    c0012b94 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b39:	80 fa 2e             	cmp    dl,0x2e
c0012b3c:	75 56                	jne    c0012b94 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b3e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b42:	74 19                	je     c0012b5d <standardiseFiles(char*, char const*, char const*)+0x107>
c0012b44:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b49:	74 53                	je     c0012b9e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b4b:	89 f9                	mov    ecx,edi
c0012b4d:	41                   	inc    ecx
c0012b4e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b51:	80 fa 2f             	cmp    dl,0x2f
c0012b54:	74 f7                	je     c0012b4d <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b56:	80 fa 5c             	cmp    dl,0x5c
c0012b59:	74 f2                	je     c0012b4d <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b5b:	eb d1                	jmp    c0012b2e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b5d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b62:	74 3a                	je     c0012b9e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b64:	83 f8 03             	cmp    eax,0x3
c0012b67:	74 c5                	je     c0012b2e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b69:	41                   	inc    ecx
c0012b6a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b6d:	80 fa 2f             	cmp    dl,0x2f
c0012b70:	74 f7                	je     c0012b69 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b72:	80 fa 5c             	cmp    dl,0x5c
c0012b75:	74 f2                	je     c0012b69 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b77:	48                   	dec    eax
c0012b78:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b7c:	75 06                	jne    c0012b84 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b7e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b82:	eb f3                	jmp    c0012b77 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012b84:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b88:	74 07                	je     c0012b91 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b8a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b8e:	48                   	dec    eax
c0012b8f:	eb f3                	jmp    c0012b84 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b91:	40                   	inc    eax
c0012b92:	eb 9a                	jmp    c0012b2e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b94:	80 fa 2f             	cmp    dl,0x2f
c0012b97:	74 95                	je     c0012b2e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b99:	80 fa 5c             	cmp    dl,0x5c
c0012b9c:	74 90                	je     c0012b2e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b9e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012ba1:	40                   	inc    eax
c0012ba2:	eb 8a                	jmp    c0012b2e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ba4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ba8:	83 ec 0c             	sub    esp,0xc
c0012bab:	53                   	push   ebx
c0012bac:	e8 f7 da fe ff       	call   c00006a8 <strlen>
c0012bb1:	83 c4 10             	add    esp,0x10
c0012bb4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012bb9:	75 26                	jne    c0012be1 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012bbb:	83 ec 0c             	sub    esp,0xc
c0012bbe:	53                   	push   ebx
c0012bbf:	e8 e4 da fe ff       	call   c00006a8 <strlen>
c0012bc4:	83 c4 10             	add    esp,0x10
c0012bc7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012bcc:	74 26                	je     c0012bf4 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012bce:	83 ec 0c             	sub    esp,0xc
c0012bd1:	53                   	push   ebx
c0012bd2:	e8 d1 da fe ff       	call   c00006a8 <strlen>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012bdf:	eb c7                	jmp    c0012ba8 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012be1:	83 ec 0c             	sub    esp,0xc
c0012be4:	53                   	push   ebx
c0012be5:	e8 be da fe ff       	call   c00006a8 <strlen>
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bf2:	74 c7                	je     c0012bbb <standardiseFiles(char*, char const*, char const*)+0x165>
c0012bf4:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012bfa:	5b                   	pop    ebx
c0012bfb:	5e                   	pop    esi
c0012bfc:	5f                   	pop    edi
c0012bfd:	5d                   	pop    ebp
c0012bfe:	c3                   	ret    
c0012bff:	90                   	nop

c0012c00 <File::File(char const*, Process*)>:
c0012c00:	83 ec 0c             	sub    esp,0xc
c0012c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c07:	83 ec 08             	sub    esp,0x8
c0012c0a:	6a 00                	push   0x0
c0012c0c:	50                   	push   eax
c0012c0d:	e8 8c e6 ff ff       	call   c001129e <UnixFile::UnixFile(int)>
c0012c12:	83 c4 10             	add    esp,0x10
c0012c15:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0012c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c1e:	89 10                	mov    DWORD PTR [eax],edx
c0012c20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c24:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c2e:	83 c0 0d             	add    eax,0xd
c0012c31:	83 ec 04             	sub    esp,0x4
c0012c34:	52                   	push   edx
c0012c35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c39:	50                   	push   eax
c0012c3a:	e8 17 fe ff ff       	call   c0012a56 <standardiseFiles(char*, char const*, char const*)>
c0012c3f:	83 c4 10             	add    esp,0x10
c0012c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c46:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c49:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c50:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c5a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c5e:	90                   	nop
c0012c5f:	83 c4 0c             	add    esp,0xc
c0012c62:	c3                   	ret    
c0012c63:	90                   	nop

c0012c64 <File::open(FileOpenMode)>:
c0012c64:	53                   	push   ebx
c0012c65:	b8 0b 00 00 00       	mov    eax,0xb
c0012c6a:	83 ec 08             	sub    esp,0x8
c0012c6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c71:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c78:	80 fa 19             	cmp    dl,0x19
c0012c7b:	77 40                	ja     c0012cbd <File::open(FileOpenMode)+0x59>
c0012c7d:	8b 14 95 a0 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3160]
c0012c84:	85 d2                	test   edx,edx
c0012c86:	74 35                	je     c0012cbd <File::open(FileOpenMode)+0x59>
c0012c88:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c8e:	85 d2                	test   edx,edx
c0012c90:	74 2b                	je     c0012cbd <File::open(FileOpenMode)+0x59>
c0012c92:	b8 06 00 00 00       	mov    eax,0x6
c0012c97:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c9b:	75 20                	jne    c0012cbd <File::open(FileOpenMode)+0x59>
c0012c9d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c9f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ca9:	51                   	push   ecx
c0012caa:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cad:	51                   	push   ecx
c0012cae:	52                   	push   edx
c0012caf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	85 c0                	test   eax,eax
c0012cb7:	75 04                	jne    c0012cbd <File::open(FileOpenMode)+0x59>
c0012cb9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cbd:	83 c4 08             	add    esp,0x8
c0012cc0:	5b                   	pop    ebx
c0012cc1:	c3                   	ret    

c0012cc2 <File::close()>:
c0012cc2:	53                   	push   ebx
c0012cc3:	b8 0b 00 00 00       	mov    eax,0xb
c0012cc8:	83 ec 08             	sub    esp,0x8
c0012ccb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ccf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cd6:	80 fa 19             	cmp    dl,0x19
c0012cd9:	77 41                	ja     c0012d1c <File::close()+0x5a>
c0012cdb:	8b 1c 95 a0 ce 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3160]
c0012ce2:	85 db                	test   ebx,ebx
c0012ce4:	74 36                	je     c0012d1c <File::close()+0x5a>
c0012ce6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ced:	74 2d                	je     c0012d1c <File::close()+0x5a>
c0012cef:	b8 05 00 00 00       	mov    eax,0x5
c0012cf4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cf8:	74 22                	je     c0012d1c <File::close()+0x5a>
c0012cfa:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012cfe:	8b 04 95 a0 ce 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3160]
c0012d05:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d0b:	53                   	push   ebx
c0012d0c:	53                   	push   ebx
c0012d0d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d0f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d15:	50                   	push   eax
c0012d16:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d19:	83 c4 10             	add    esp,0x10
c0012d1c:	83 c4 08             	add    esp,0x8
c0012d1f:	5b                   	pop    ebx
c0012d20:	c3                   	ret    
c0012d21:	90                   	nop

c0012d22 <File::seek(unsigned long long)>:
c0012d22:	56                   	push   esi
c0012d23:	53                   	push   ebx
c0012d24:	b8 0b 00 00 00       	mov    eax,0xb
c0012d29:	51                   	push   ecx
c0012d2a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d2e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d32:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d3d:	80 fa 19             	cmp    dl,0x19
c0012d40:	77 31                	ja     c0012d73 <File::seek(unsigned long long)+0x51>
c0012d42:	8b 14 95 a0 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3160]
c0012d49:	85 d2                	test   edx,edx
c0012d4b:	74 26                	je     c0012d73 <File::seek(unsigned long long)+0x51>
c0012d4d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d53:	85 d2                	test   edx,edx
c0012d55:	74 1c                	je     c0012d73 <File::seek(unsigned long long)+0x51>
c0012d57:	b8 05 00 00 00       	mov    eax,0x5
c0012d5c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d60:	74 11                	je     c0012d73 <File::seek(unsigned long long)+0x51>
c0012d62:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d64:	53                   	push   ebx
c0012d65:	51                   	push   ecx
c0012d66:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d6c:	52                   	push   edx
c0012d6d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d70:	83 c4 10             	add    esp,0x10
c0012d73:	5a                   	pop    edx
c0012d74:	5b                   	pop    ebx
c0012d75:	5e                   	pop    esi
c0012d76:	c3                   	ret    
c0012d77:	90                   	nop

c0012d78 <File::tell(unsigned long long*)>:
c0012d78:	83 ec 0c             	sub    esp,0xc
c0012d7b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d84:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d8b:	80 fa 19             	cmp    dl,0x19
c0012d8e:	77 34                	ja     c0012dc4 <File::tell(unsigned long long*)+0x4c>
c0012d90:	8b 14 95 a0 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3160]
c0012d97:	85 d2                	test   edx,edx
c0012d99:	74 29                	je     c0012dc4 <File::tell(unsigned long long*)+0x4c>
c0012d9b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012da1:	85 d2                	test   edx,edx
c0012da3:	74 1f                	je     c0012dc4 <File::tell(unsigned long long*)+0x4c>
c0012da5:	b8 05 00 00 00       	mov    eax,0x5
c0012daa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012dae:	74 14                	je     c0012dc4 <File::tell(unsigned long long*)+0x4c>
c0012db0:	50                   	push   eax
c0012db1:	8b 02                	mov    eax,DWORD PTR [edx]
c0012db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012db7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012dbd:	52                   	push   edx
c0012dbe:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012dc1:	83 c4 10             	add    esp,0x10
c0012dc4:	83 c4 0c             	add    esp,0xc
c0012dc7:	c3                   	ret    

c0012dc8 <File::rewind()>:
c0012dc8:	83 ec 10             	sub    esp,0x10
c0012dcb:	6a 00                	push   0x0
c0012dcd:	6a 00                	push   0x0
c0012dcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dd3:	e8 4a ff ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c0012dd8:	83 c4 1c             	add    esp,0x1c
c0012ddb:	c3                   	ret    

c0012ddc <File::unlink()>:
c0012ddc:	83 ec 0c             	sub    esp,0xc
c0012ddf:	b8 0b 00 00 00       	mov    eax,0xb
c0012de4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012de8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012def:	80 f9 19             	cmp    cl,0x19
c0012df2:	77 2f                	ja     c0012e23 <File::unlink()+0x47>
c0012df4:	8b 0c 8d a0 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3160]
c0012dfb:	85 c9                	test   ecx,ecx
c0012dfd:	74 24                	je     c0012e23 <File::unlink()+0x47>
c0012dff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e05:	85 c9                	test   ecx,ecx
c0012e07:	74 1a                	je     c0012e23 <File::unlink()+0x47>
c0012e09:	b8 06 00 00 00       	mov    eax,0x6
c0012e0e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e12:	75 0f                	jne    c0012e23 <File::unlink()+0x47>
c0012e14:	83 c2 0d             	add    edx,0xd
c0012e17:	50                   	push   eax
c0012e18:	50                   	push   eax
c0012e19:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e1b:	52                   	push   edx
c0012e1c:	51                   	push   ecx
c0012e1d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e20:	83 c4 10             	add    esp,0x10
c0012e23:	83 c4 0c             	add    esp,0xc
c0012e26:	c3                   	ret    
c0012e27:	90                   	nop

c0012e28 <File::rename(char const*)>:
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e34:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e3b:	80 f9 19             	cmp    cl,0x19
c0012e3e:	77 32                	ja     c0012e72 <File::rename(char const*)+0x4a>
c0012e40:	8b 0c 8d a0 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3160]
c0012e47:	85 c9                	test   ecx,ecx
c0012e49:	74 27                	je     c0012e72 <File::rename(char const*)+0x4a>
c0012e4b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e51:	85 c9                	test   ecx,ecx
c0012e53:	74 1d                	je     c0012e72 <File::rename(char const*)+0x4a>
c0012e55:	b8 06 00 00 00       	mov    eax,0x6
c0012e5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e5e:	75 12                	jne    c0012e72 <File::rename(char const*)+0x4a>
c0012e60:	83 c2 0d             	add    edx,0xd
c0012e63:	50                   	push   eax
c0012e64:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e6a:	52                   	push   edx
c0012e6b:	51                   	push   ecx
c0012e6c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e6f:	83 c4 10             	add    esp,0x10
c0012e72:	83 c4 0c             	add    esp,0xc
c0012e75:	c3                   	ret    

c0012e76 <File::chfatattr(unsigned char, unsigned char)>:
c0012e76:	57                   	push   edi
c0012e77:	b8 0b 00 00 00       	mov    eax,0xb
c0012e7c:	56                   	push   esi
c0012e7d:	53                   	push   ebx
c0012e7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e8d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e91:	80 f9 19             	cmp    cl,0x19
c0012e94:	77 37                	ja     c0012ecd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e96:	8b 0c 8d a0 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3160]
c0012e9d:	85 c9                	test   ecx,ecx
c0012e9f:	74 2c                	je     c0012ecd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ea1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ea7:	85 c9                	test   ecx,ecx
c0012ea9:	74 22                	je     c0012ecd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012eab:	b8 06 00 00 00       	mov    eax,0x6
c0012eb0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eb4:	75 17                	jne    c0012ecd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012eb6:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012eb8:	89 f0                	mov    eax,esi
c0012eba:	83 c2 0d             	add    edx,0xd
c0012ebd:	0f b6 f0             	movzx  esi,al
c0012ec0:	0f b6 db             	movzx  ebx,bl
c0012ec3:	56                   	push   esi
c0012ec4:	53                   	push   ebx
c0012ec5:	52                   	push   edx
c0012ec6:	51                   	push   ecx
c0012ec7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	5b                   	pop    ebx
c0012ece:	5e                   	pop    esi
c0012ecf:	5f                   	pop    edi
c0012ed0:	c3                   	ret    
c0012ed1:	90                   	nop

c0012ed2 <File::exists()>:
c0012ed2:	83 ec 0c             	sub    esp,0xc
c0012ed5:	31 c0                	xor    eax,eax
c0012ed7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012edb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ee2:	80 f9 19             	cmp    cl,0x19
c0012ee5:	77 24                	ja     c0012f0b <File::exists()+0x39>
c0012ee7:	8b 0c 8d a0 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3160]
c0012eee:	85 c9                	test   ecx,ecx
c0012ef0:	74 19                	je     c0012f0b <File::exists()+0x39>
c0012ef2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ef8:	85 c9                	test   ecx,ecx
c0012efa:	74 0f                	je     c0012f0b <File::exists()+0x39>
c0012efc:	83 c2 0d             	add    edx,0xd
c0012eff:	50                   	push   eax
c0012f00:	50                   	push   eax
c0012f01:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f03:	52                   	push   edx
c0012f04:	51                   	push   ecx
c0012f05:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	83 c4 0c             	add    esp,0xc
c0012f0e:	c3                   	ret    
c0012f0f:	90                   	nop

c0012f10 <File::stat(unsigned long long*, bool*)>:
c0012f10:	56                   	push   esi
c0012f11:	53                   	push   ebx
c0012f12:	50                   	push   eax
c0012f13:	b8 0b 00 00 00       	mov    eax,0xb
c0012f18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f1c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f2b:	80 f9 19             	cmp    cl,0x19
c0012f2e:	77 3d                	ja     c0012f6d <File::stat(unsigned long long*, bool*)+0x5d>
c0012f30:	8b 0c 8d a0 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3160]
c0012f37:	85 c9                	test   ecx,ecx
c0012f39:	74 32                	je     c0012f6d <File::stat(unsigned long long*, bool*)+0x5d>
c0012f3b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f41:	85 c9                	test   ecx,ecx
c0012f43:	74 28                	je     c0012f6d <File::stat(unsigned long long*, bool*)+0x5d>
c0012f45:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f47:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f4b:	74 13                	je     c0012f60 <File::stat(unsigned long long*, bool*)+0x50>
c0012f4d:	83 ec 04             	sub    esp,0x4
c0012f50:	56                   	push   esi
c0012f51:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f57:	51                   	push   ecx
c0012f58:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f5b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f5e:	eb 0a                	jmp    c0012f6a <File::stat(unsigned long long*, bool*)+0x5a>
c0012f60:	53                   	push   ebx
c0012f61:	83 c2 0d             	add    edx,0xd
c0012f64:	56                   	push   esi
c0012f65:	52                   	push   edx
c0012f66:	51                   	push   ecx
c0012f67:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f6a:	83 c4 10             	add    esp,0x10
c0012f6d:	5a                   	pop    edx
c0012f6e:	5b                   	pop    ebx
c0012f6f:	5e                   	pop    esi
c0012f70:	c3                   	ret    

c0012f71 <getcwd(Process*, char*, int)>:
c0012f71:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f75:	31 c0                	xor    eax,eax
c0012f77:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012f7a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012f7e:	7d 15                	jge    c0012f95 <getcwd(Process*, char*, int)+0x24>
c0012f80:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f84:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012f8b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012f8e:	84 c9                	test   cl,cl
c0012f90:	74 06                	je     c0012f98 <getcwd(Process*, char*, int)+0x27>
c0012f92:	40                   	inc    eax
c0012f93:	eb e2                	jmp    c0012f77 <getcwd(Process*, char*, int)+0x6>
c0012f95:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f98:	31 c0                	xor    eax,eax
c0012f9a:	c3                   	ret    

c0012f9b <setcwd(Process*, char*)>:
c0012f9b:	55                   	push   ebp
c0012f9c:	57                   	push   edi
c0012f9d:	56                   	push   esi
c0012f9e:	53                   	push   ebx
c0012f9f:	81 ec 20 02 00 00    	sub    esp,0x220
c0012fa5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012fac:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012fb2:	57                   	push   edi
c0012fb3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012fba:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012fbe:	56                   	push   esi
c0012fbf:	e8 92 fa ff ff       	call   c0012a56 <standardiseFiles(char*, char const*, char const*)>
c0012fc4:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fc7:	e8 dc d6 fe ff       	call   c00006a8 <strlen>
c0012fcc:	83 c4 10             	add    esp,0x10
c0012fcf:	83 f8 02             	cmp    eax,0x2
c0012fd2:	77 17                	ja     c0012feb <setcwd(Process*, char*)+0x50>
c0012fd4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012fd9:	83 e8 41             	sub    eax,0x41
c0012fdc:	83 f8 19             	cmp    eax,0x19
c0012fdf:	76 24                	jbe    c0013005 <setcwd(Process*, char*)+0x6a>
c0012fe1:	b8 03 00 00 00       	mov    eax,0x3
c0012fe6:	e9 e0 00 00 00       	jmp    c00130cb <setcwd(Process*, char*)+0x130>
c0012feb:	83 ec 0c             	sub    esp,0xc
c0012fee:	56                   	push   esi
c0012fef:	e8 b4 d6 fe ff       	call   c00006a8 <strlen>
c0012ff4:	83 c4 10             	add    esp,0x10
c0012ff7:	83 f8 03             	cmp    eax,0x3
c0012ffa:	75 34                	jne    c0013030 <setcwd(Process*, char*)+0x95>
c0012ffc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013001:	75 2d                	jne    c0013030 <setcwd(Process*, char*)+0x95>
c0013003:	eb cf                	jmp    c0012fd4 <setcwd(Process*, char*)+0x39>
c0013005:	8b 14 85 a0 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3160]
c001300c:	b8 05 00 00 00       	mov    eax,0x5
c0013011:	85 d2                	test   edx,edx
c0013013:	0f 84 b2 00 00 00    	je     c00130cb <setcwd(Process*, char*)+0x130>
c0013019:	b8 06 00 00 00       	mov    eax,0x6
c001301e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013025:	0f 85 92 00 00 00    	jne    c00130bd <setcwd(Process*, char*)+0x122>
c001302b:	e9 9b 00 00 00       	jmp    c00130cb <setcwd(Process*, char*)+0x130>
c0013030:	83 ec 0c             	sub    esp,0xc
c0013033:	68 14 01 00 00       	push   0x114
c0013038:	e8 97 c4 ff ff       	call   c000f4d4 <malloc>
c001303d:	83 c4 0c             	add    esp,0xc
c0013040:	89 c3                	mov    ebx,eax
c0013042:	55                   	push   ebp
c0013043:	56                   	push   esi
c0013044:	50                   	push   eax
c0013045:	e8 b6 fb ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001304a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001304f:	83 c4 0c             	add    esp,0xc
c0013052:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013056:	50                   	push   eax
c0013057:	8d 44 24 10          	lea    eax,[esp+0x10]
c001305b:	50                   	push   eax
c001305c:	53                   	push   ebx
c001305d:	e8 ae fe ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c0013062:	83 c4 10             	add    esp,0x10
c0013065:	83 f8 02             	cmp    eax,0x2
c0013068:	74 04                	je     c001306e <setcwd(Process*, char*)+0xd3>
c001306a:	85 c0                	test   eax,eax
c001306c:	74 1c                	je     c001308a <setcwd(Process*, char*)+0xef>
c001306e:	b8 01 00 00 00       	mov    eax,0x1
c0013073:	85 db                	test   ebx,ebx
c0013075:	74 54                	je     c00130cb <setcwd(Process*, char*)+0x130>
c0013077:	83 ec 0c             	sub    esp,0xc
c001307a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001307c:	53                   	push   ebx
c001307d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	b8 01 00 00 00       	mov    eax,0x1
c0013088:	eb 41                	jmp    c00130cb <setcwd(Process*, char*)+0x130>
c001308a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001308f:	75 1c                	jne    c00130ad <setcwd(Process*, char*)+0x112>
c0013091:	b8 02 00 00 00       	mov    eax,0x2
c0013096:	85 db                	test   ebx,ebx
c0013098:	74 31                	je     c00130cb <setcwd(Process*, char*)+0x130>
c001309a:	83 ec 0c             	sub    esp,0xc
c001309d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001309f:	53                   	push   ebx
c00130a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130a3:	83 c4 10             	add    esp,0x10
c00130a6:	b8 02 00 00 00       	mov    eax,0x2
c00130ab:	eb 1e                	jmp    c00130cb <setcwd(Process*, char*)+0x130>
c00130ad:	85 db                	test   ebx,ebx
c00130af:	74 0c                	je     c00130bd <setcwd(Process*, char*)+0x122>
c00130b1:	83 ec 0c             	sub    esp,0xc
c00130b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130b6:	53                   	push   ebx
c00130b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130ba:	83 c4 10             	add    esp,0x10
c00130bd:	50                   	push   eax
c00130be:	50                   	push   eax
c00130bf:	56                   	push   esi
c00130c0:	57                   	push   edi
c00130c1:	e8 64 d6 fe ff       	call   c000072a <strcpy>
c00130c6:	83 c4 10             	add    esp,0x10
c00130c9:	31 c0                	xor    eax,eax
c00130cb:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130d1:	5b                   	pop    ebx
c00130d2:	5e                   	pop    esi
c00130d3:	5f                   	pop    edi
c00130d4:	5d                   	pop    ebp
c00130d5:	c3                   	ret    

c00130d6 <Directory::Directory(char const*, Process*)>:
c00130d6:	83 ec 0c             	sub    esp,0xc
c00130d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130dd:	83 ec 08             	sub    esp,0x8
c00130e0:	6a 00                	push   0x0
c00130e2:	50                   	push   eax
c00130e3:	e8 b6 e1 ff ff       	call   c001129e <UnixFile::UnixFile(int)>
c00130e8:	83 c4 10             	add    esp,0x10
c00130eb:	ba ec 92 02 c0       	mov    edx,0xc00292ec
c00130f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f4:	89 10                	mov    DWORD PTR [eax],edx
c00130f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130fa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013104:	83 c0 0d             	add    eax,0xd
c0013107:	83 ec 04             	sub    esp,0x4
c001310a:	52                   	push   edx
c001310b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001310f:	50                   	push   eax
c0013110:	e8 41 f9 ff ff       	call   c0012a56 <standardiseFiles(char*, char const*, char const*)>
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001311f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013126:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001312c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013130:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013134:	90                   	nop
c0013135:	83 c4 0c             	add    esp,0xc
c0013138:	c3                   	ret    
c0013139:	90                   	nop

c001313a <Directory::open()>:
c001313a:	53                   	push   ebx
c001313b:	b8 0b 00 00 00       	mov    eax,0xb
c0013140:	83 ec 08             	sub    esp,0x8
c0013143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013147:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001314e:	80 fa 19             	cmp    dl,0x19
c0013151:	77 3d                	ja     c0013190 <Directory::open()+0x56>
c0013153:	8b 14 95 a0 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3160]
c001315a:	85 d2                	test   edx,edx
c001315c:	74 32                	je     c0013190 <Directory::open()+0x56>
c001315e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013164:	85 d2                	test   edx,edx
c0013166:	74 28                	je     c0013190 <Directory::open()+0x56>
c0013168:	b8 06 00 00 00       	mov    eax,0x6
c001316d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013171:	75 1d                	jne    c0013190 <Directory::open()+0x56>
c0013173:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013179:	50                   	push   eax
c001317a:	8b 02                	mov    eax,DWORD PTR [edx]
c001317c:	51                   	push   ecx
c001317d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013180:	51                   	push   ecx
c0013181:	52                   	push   edx
c0013182:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013185:	83 c4 10             	add    esp,0x10
c0013188:	85 c0                	test   eax,eax
c001318a:	75 04                	jne    c0013190 <Directory::open()+0x56>
c001318c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013190:	83 c4 08             	add    esp,0x8
c0013193:	5b                   	pop    ebx
c0013194:	c3                   	ret    
c0013195:	90                   	nop

c0013196 <Directory::close()>:
c0013196:	53                   	push   ebx
c0013197:	b8 0b 00 00 00       	mov    eax,0xb
c001319c:	83 ec 08             	sub    esp,0x8
c001319f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131a3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131aa:	80 fa 19             	cmp    dl,0x19
c00131ad:	77 41                	ja     c00131f0 <Directory::close()+0x5a>
c00131af:	8b 1c 95 a0 ce 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3160]
c00131b6:	85 db                	test   ebx,ebx
c00131b8:	74 36                	je     c00131f0 <Directory::close()+0x5a>
c00131ba:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131c1:	74 2d                	je     c00131f0 <Directory::close()+0x5a>
c00131c3:	b8 05 00 00 00       	mov    eax,0x5
c00131c8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131cc:	74 22                	je     c00131f0 <Directory::close()+0x5a>
c00131ce:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131d2:	8b 04 95 a0 ce 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3160]
c00131d9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131df:	53                   	push   ebx
c00131e0:	53                   	push   ebx
c00131e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00131e3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131e9:	50                   	push   eax
c00131ea:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	83 c4 08             	add    esp,0x8
c00131f3:	5b                   	pop    ebx
c00131f4:	c3                   	ret    
c00131f5:	90                   	nop

c00131f6 <Directory::unlink()>:
c00131f6:	83 ec 0c             	sub    esp,0xc
c00131f9:	b8 0b 00 00 00       	mov    eax,0xb
c00131fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013202:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013209:	80 f9 19             	cmp    cl,0x19
c001320c:	77 2f                	ja     c001323d <Directory::unlink()+0x47>
c001320e:	8b 0c 8d a0 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3160]
c0013215:	85 c9                	test   ecx,ecx
c0013217:	74 24                	je     c001323d <Directory::unlink()+0x47>
c0013219:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001321f:	85 c9                	test   ecx,ecx
c0013221:	74 1a                	je     c001323d <Directory::unlink()+0x47>
c0013223:	b8 06 00 00 00       	mov    eax,0x6
c0013228:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001322c:	75 0f                	jne    c001323d <Directory::unlink()+0x47>
c001322e:	83 c2 0d             	add    edx,0xd
c0013231:	50                   	push   eax
c0013232:	50                   	push   eax
c0013233:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013235:	52                   	push   edx
c0013236:	51                   	push   ecx
c0013237:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001323a:	83 c4 10             	add    esp,0x10
c001323d:	83 c4 0c             	add    esp,0xc
c0013240:	c3                   	ret    
c0013241:	90                   	nop

c0013242 <Directory::rename(char const*)>:
c0013242:	83 ec 0c             	sub    esp,0xc
c0013245:	b8 0b 00 00 00       	mov    eax,0xb
c001324a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001324e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013255:	80 f9 19             	cmp    cl,0x19
c0013258:	77 32                	ja     c001328c <Directory::rename(char const*)+0x4a>
c001325a:	8b 0c 8d a0 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3160]
c0013261:	85 c9                	test   ecx,ecx
c0013263:	74 27                	je     c001328c <Directory::rename(char const*)+0x4a>
c0013265:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001326b:	85 c9                	test   ecx,ecx
c001326d:	74 1d                	je     c001328c <Directory::rename(char const*)+0x4a>
c001326f:	b8 06 00 00 00       	mov    eax,0x6
c0013274:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013278:	75 12                	jne    c001328c <Directory::rename(char const*)+0x4a>
c001327a:	83 c2 0d             	add    edx,0xd
c001327d:	50                   	push   eax
c001327e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013280:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013284:	52                   	push   edx
c0013285:	51                   	push   ecx
c0013286:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013289:	83 c4 10             	add    esp,0x10
c001328c:	83 c4 0c             	add    esp,0xc
c001328f:	c3                   	ret    

c0013290 <Directory::exists()>:
c0013290:	83 ec 0c             	sub    esp,0xc
c0013293:	31 c0                	xor    eax,eax
c0013295:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013299:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132a0:	80 f9 19             	cmp    cl,0x19
c00132a3:	77 24                	ja     c00132c9 <Directory::exists()+0x39>
c00132a5:	8b 0c 8d a0 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3160]
c00132ac:	85 c9                	test   ecx,ecx
c00132ae:	74 19                	je     c00132c9 <Directory::exists()+0x39>
c00132b0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b6:	85 c9                	test   ecx,ecx
c00132b8:	74 0f                	je     c00132c9 <Directory::exists()+0x39>
c00132ba:	83 c2 0d             	add    edx,0xd
c00132bd:	50                   	push   eax
c00132be:	50                   	push   eax
c00132bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132c1:	52                   	push   edx
c00132c2:	51                   	push   ecx
c00132c3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	83 c4 0c             	add    esp,0xc
c00132cc:	c3                   	ret    
c00132cd:	90                   	nop

c00132ce <Directory::read(dirent*)>:
c00132ce:	83 ec 1c             	sub    esp,0x1c
c00132d1:	b8 0b 00 00 00       	mov    eax,0xb
c00132d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132da:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132e1:	80 fa 19             	cmp    dl,0x19
c00132e4:	77 30                	ja     c0013316 <Directory::read(dirent*)+0x48>
c00132e6:	8b 14 95 a0 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3160]
c00132ed:	85 d2                	test   edx,edx
c00132ef:	74 25                	je     c0013316 <Directory::read(dirent*)+0x48>
c00132f1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132f8:	74 1c                	je     c0013316 <Directory::read(dirent*)+0x48>
c00132fa:	83 ec 0c             	sub    esp,0xc
c00132fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132ff:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013303:	52                   	push   edx
c0013304:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013308:	6a 00                	push   0x0
c001330a:	68 10 01 00 00       	push   0x110
c001330f:	51                   	push   ecx
c0013310:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013313:	83 c4 20             	add    esp,0x20
c0013316:	83 c4 1c             	add    esp,0x1c
c0013319:	c3                   	ret    

c001331a <Directory::create()>:
c001331a:	83 ec 0c             	sub    esp,0xc
c001331d:	b8 0b 00 00 00       	mov    eax,0xb
c0013322:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013326:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001332d:	80 f9 19             	cmp    cl,0x19
c0013330:	77 2f                	ja     c0013361 <Directory::create()+0x47>
c0013332:	8b 0c 8d a0 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3160]
c0013339:	85 c9                	test   ecx,ecx
c001333b:	74 24                	je     c0013361 <Directory::create()+0x47>
c001333d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013343:	85 c9                	test   ecx,ecx
c0013345:	74 1a                	je     c0013361 <Directory::create()+0x47>
c0013347:	b8 06 00 00 00       	mov    eax,0x6
c001334c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013350:	75 0f                	jne    c0013361 <Directory::create()+0x47>
c0013352:	83 c2 0d             	add    edx,0xd
c0013355:	50                   	push   eax
c0013356:	50                   	push   eax
c0013357:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013359:	52                   	push   edx
c001335a:	51                   	push   ecx
c001335b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001335e:	83 c4 10             	add    esp,0x10
c0013361:	83 c4 0c             	add    esp,0xc
c0013364:	c3                   	ret    
c0013365:	90                   	nop

c0013366 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013366:	b8 0a 00 00 00       	mov    eax,0xa
c001336b:	c3                   	ret    

c001336c <Bus::Bus(char const*)>:
c001336c:	83 ec 0c             	sub    esp,0xc
c001336f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013373:	83 ec 08             	sub    esp,0x8
c0013376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001337a:	50                   	push   eax
c001337b:	e8 30 09 00 00       	call   c0013cb0 <Device::Device(char const*)>
c0013380:	83 c4 10             	add    esp,0x10
c0013383:	ba 08 93 02 c0       	mov    edx,0xc0029308
c0013388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338c:	89 10                	mov    DWORD PTR [eax],edx
c001338e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013392:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001339c:	90                   	nop
c001339d:	83 c4 0c             	add    esp,0xc
c00133a0:	c3                   	ret    
c00133a1:	90                   	nop

c00133a2 <Bus::~Bus()>:
c00133a2:	83 ec 0c             	sub    esp,0xc
c00133a5:	ba 08 93 02 c0       	mov    edx,0xc0029308
c00133aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ae:	89 10                	mov    DWORD PTR [eax],edx
c00133b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b4:	83 ec 0c             	sub    esp,0xc
c00133b7:	50                   	push   eax
c00133b8:	e8 d5 05 00 00       	call   c0013992 <Device::~Device()>
c00133bd:	83 c4 10             	add    esp,0x10
c00133c0:	90                   	nop
c00133c1:	83 c4 0c             	add    esp,0xc
c00133c4:	c3                   	ret    
c00133c5:	90                   	nop

c00133c6 <Bus::~Bus()>:
c00133c6:	83 ec 0c             	sub    esp,0xc
c00133c9:	83 ec 0c             	sub    esp,0xc
c00133cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d0:	e8 cd ff ff ff       	call   c00133a2 <Bus::~Bus()>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	83 ec 08             	sub    esp,0x8
c00133db:	68 58 01 00 00       	push   0x158
c00133e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e4:	e8 08 f2 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00133e9:	83 c4 10             	add    esp,0x10
c00133ec:	83 c4 0c             	add    esp,0xc
c00133ef:	c3                   	ret    

c00133f0 <Buzzer::Buzzer(char const*)>:
c00133f0:	83 ec 0c             	sub    esp,0xc
c00133f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f7:	83 ec 08             	sub    esp,0x8
c00133fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133fe:	50                   	push   eax
c00133ff:	e8 ac 08 00 00       	call   c0013cb0 <Device::Device(char const*)>
c0013404:	83 c4 10             	add    esp,0x10
c0013407:	ba 34 93 02 c0       	mov    edx,0xc0029334
c001340c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013410:	89 10                	mov    DWORD PTR [eax],edx
c0013412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013416:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013424:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001342e:	90                   	nop
c001342f:	83 c4 0c             	add    esp,0xc
c0013432:	c3                   	ret    
c0013433:	90                   	nop

c0013434 <Buzzer::~Buzzer()>:
c0013434:	83 ec 0c             	sub    esp,0xc
c0013437:	ba 34 93 02 c0       	mov    edx,0xc0029334
c001343c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013440:	89 10                	mov    DWORD PTR [eax],edx
c0013442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	50                   	push   eax
c001344a:	e8 43 05 00 00       	call   c0013992 <Device::~Device()>
c001344f:	83 c4 10             	add    esp,0x10
c0013452:	90                   	nop
c0013453:	83 c4 0c             	add    esp,0xc
c0013456:	c3                   	ret    
c0013457:	90                   	nop

c0013458 <Buzzer::~Buzzer()>:
c0013458:	83 ec 0c             	sub    esp,0xc
c001345b:	83 ec 0c             	sub    esp,0xc
c001345e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013462:	e8 cd ff ff ff       	call   c0013434 <Buzzer::~Buzzer()>
c0013467:	83 c4 10             	add    esp,0x10
c001346a:	83 ec 08             	sub    esp,0x8
c001346d:	68 5c 01 00 00       	push   0x15c
c0013472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013476:	e8 76 f1 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001347b:	83 c4 10             	add    esp,0x10
c001347e:	83 c4 0c             	add    esp,0xc
c0013481:	c3                   	ret    

c0013482 <Buzzer::stop()>:
c0013482:	83 ec 14             	sub    esp,0x14
c0013485:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013489:	8b 10                	mov    edx,DWORD PTR [eax]
c001348b:	6a 00                	push   0x0
c001348d:	50                   	push   eax
c001348e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013491:	83 c4 1c             	add    esp,0x1c
c0013494:	c3                   	ret    

c0013495 <beepThread(void*)>:
c0013495:	53                   	push   ebx
c0013496:	83 ec 08             	sub    esp,0x8
c0013499:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001349d:	e8 da 97 00 00       	call   c001cc7c <unlockScheduler()>
c00134a2:	b8 40 42 0f 00       	mov    eax,0xf4240
c00134a7:	52                   	push   edx
c00134a8:	52                   	push   edx
c00134a9:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00134af:	52                   	push   edx
c00134b0:	50                   	push   eax
c00134b1:	e8 14 9d 00 00       	call   c001d1ca <nanoSleep(unsigned long long)>
c00134b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134b9:	e8 c4 ff ff ff       	call   c0013482 <Buzzer::stop()>
c00134be:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00134c6:	83 c4 18             	add    esp,0x18
c00134c9:	5b                   	pop    ebx
c00134ca:	e9 41 9c 00 00       	jmp    c001d110 <blockTask(TaskState)>
c00134cf:	90                   	nop

c00134d0 <Buzzer::beep(int, int, bool)>:
c00134d0:	57                   	push   edi
c00134d1:	56                   	push   esi
c00134d2:	53                   	push   ebx
c00134d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134df:	52                   	push   edx
c00134e0:	52                   	push   edx
c00134e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00134e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134e7:	56                   	push   esi
c00134e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134eb:	83 c4 10             	add    esp,0x10
c00134ee:	89 f8                	mov    eax,edi
c00134f0:	84 c0                	test   al,al
c00134f2:	74 1f                	je     c0013513 <Buzzer::beep(int, int, bool)+0x43>
c00134f4:	50                   	push   eax
c00134f5:	50                   	push   eax
c00134f6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134fc:	99                   	cdq    
c00134fd:	52                   	push   edx
c00134fe:	50                   	push   eax
c00134ff:	e8 c6 9c 00 00       	call   c001d1ca <nanoSleep(unsigned long long)>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001350b:	5b                   	pop    ebx
c001350c:	5e                   	pop    esi
c001350d:	5f                   	pop    edi
c001350e:	e9 6f ff ff ff       	jmp    c0013482 <Buzzer::stop()>
c0013513:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013519:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001351e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013526:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001352a:	c7 44 24 14 95 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013495
c0013532:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013536:	5b                   	pop    ebx
c0013537:	5e                   	pop    esi
c0013538:	5f                   	pop    edi
c0013539:	e9 6e 98 00 00       	jmp    c001cdac <Process::createThread(void (*)(void*), void*, int)>

c001353e <loadClockSettings()>:
c001353e:	c7 05 14 ca 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002ca14,0xa
c0013548:	c6 05 11 ca 02 c0 00 	mov    BYTE PTR ds:0xc002ca11,0x0
c001354f:	c6 05 10 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca10,0x1
c0013556:	c3                   	ret    
c0013557:	90                   	nop

c0013558 <Clock::Clock(char const*)>:
c0013558:	83 ec 0c             	sub    esp,0xc
c001355b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355f:	83 ec 08             	sub    esp,0x8
c0013562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013566:	50                   	push   eax
c0013567:	e8 44 07 00 00       	call   c0013cb0 <Device::Device(char const*)>
c001356c:	83 c4 10             	add    esp,0x10
c001356f:	ba 64 93 02 c0       	mov    edx,0xc0029364
c0013574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013578:	89 10                	mov    DWORD PTR [eax],edx
c001357a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013588:	90                   	nop
c0013589:	83 c4 0c             	add    esp,0xc
c001358c:	c3                   	ret    
c001358d:	90                   	nop

c001358e <Clock::~Clock()>:
c001358e:	83 ec 0c             	sub    esp,0xc
c0013591:	ba 64 93 02 c0       	mov    edx,0xc0029364
c0013596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359a:	89 10                	mov    DWORD PTR [eax],edx
c001359c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a0:	83 ec 0c             	sub    esp,0xc
c00135a3:	50                   	push   eax
c00135a4:	e8 e9 03 00 00       	call   c0013992 <Device::~Device()>
c00135a9:	83 c4 10             	add    esp,0x10
c00135ac:	90                   	nop
c00135ad:	83 c4 0c             	add    esp,0xc
c00135b0:	c3                   	ret    
c00135b1:	90                   	nop

c00135b2 <Clock::~Clock()>:
c00135b2:	83 ec 0c             	sub    esp,0xc
c00135b5:	83 ec 0c             	sub    esp,0xc
c00135b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135bc:	e8 cd ff ff ff       	call   c001358e <Clock::~Clock()>
c00135c1:	83 c4 10             	add    esp,0x10
c00135c4:	83 ec 08             	sub    esp,0x8
c00135c7:	68 58 01 00 00       	push   0x158
c00135cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d0:	e8 1c f0 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00135d5:	83 c4 10             	add    esp,0x10
c00135d8:	83 c4 0c             	add    esp,0xc
c00135db:	c3                   	ret    

c00135dc <Clock::timeInSecondsLocal()>:
c00135dc:	53                   	push   ebx
c00135dd:	83 ec 14             	sub    esp,0x14
c00135e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00135e6:	50                   	push   eax
c00135e7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00135ea:	0f b6 0d 10 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002ca10
c00135f1:	03 0d 14 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002ca14
c00135f7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135fd:	89 cb                	mov    ebx,ecx
c00135ff:	c1 fb 1f             	sar    ebx,0x1f
c0013602:	01 c8                	add    eax,ecx
c0013604:	11 da                	adc    edx,ebx
c0013606:	83 c4 10             	add    esp,0x10
c0013609:	31 c9                	xor    ecx,ecx
c001360b:	80 3d 11 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca11,0x0
c0013612:	74 05                	je     c0013619 <Clock::timeInSecondsLocal()+0x3d>
c0013614:	b9 08 07 00 00       	mov    ecx,0x708
c0013619:	31 db                	xor    ebx,ebx
c001361b:	01 c8                	add    eax,ecx
c001361d:	11 da                	adc    edx,ebx
c001361f:	83 c4 08             	add    esp,0x8
c0013622:	5b                   	pop    ebx
c0013623:	c3                   	ret    

c0013624 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013624:	57                   	push   edi
c0013625:	56                   	push   esi
c0013626:	53                   	push   ebx
c0013627:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001362b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001362f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013631:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013635:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013638:	0f b6 05 10 ca 02 c0 	movzx  eax,BYTE PTR ds:0xc002ca10
c001363f:	03 05 14 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca14
c0013645:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001364b:	99                   	cdq    
c001364c:	29 c6                	sub    esi,eax
c001364e:	19 d7                	sbb    edi,edx
c0013650:	89 f0                	mov    eax,esi
c0013652:	89 fa                	mov    edx,edi
c0013654:	31 f6                	xor    esi,esi
c0013656:	80 3d 11 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca11,0x0
c001365d:	74 05                	je     c0013664 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001365f:	be 08 07 00 00       	mov    esi,0x708
c0013664:	31 ff                	xor    edi,edi
c0013666:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001366a:	29 f0                	sub    eax,esi
c001366c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013670:	19 fa                	sbb    edx,edi
c0013672:	89 d8                	mov    eax,ebx
c0013674:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013678:	5b                   	pop    ebx
c0013679:	5e                   	pop    esi
c001367a:	5f                   	pop    edi
c001367b:	ff e0                	jmp    eax

c001367d <datetimeToSeconds(datetime_t)>:
c001367d:	55                   	push   ebp
c001367e:	57                   	push   edi
c001367f:	56                   	push   esi
c0013680:	53                   	push   ebx
c0013681:	83 ec 14             	sub    esp,0x14
c0013684:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013688:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001368c:	89 d3                	mov    ebx,edx
c001368e:	0f b6 c6             	movzx  eax,dh
c0013691:	c1 eb 10             	shr    ebx,0x10
c0013694:	48                   	dec    eax
c0013695:	66 81 eb 6c 07       	sub    bx,0x76c
c001369a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001369e:	0f b6 f5             	movzx  esi,ch
c00136a1:	89 cf                	mov    edi,ecx
c00136a3:	6b f6 3c             	imul   esi,esi,0x3c
c00136a6:	c1 ef 10             	shr    edi,0x10
c00136a9:	0f b6 c9             	movzx  ecx,cl
c00136ac:	89 f8                	mov    eax,edi
c00136ae:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136b4:	0f b6 f8             	movzx  edi,al
c00136b7:	0f b6 d2             	movzx  edx,dl
c00136ba:	01 fe                	add    esi,edi
c00136bc:	01 f1                	add    ecx,esi
c00136be:	0f b7 f3             	movzx  esi,bx
c00136c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00136c5:	c1 f9 1f             	sar    ecx,0x1f
c00136c8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00136cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00136d1:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00136d6:	8b 0c 8d a0 93 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6c60]
c00136dd:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00136e1:	76 29                	jbe    c001370c <datetimeToSeconds(datetime_t)+0x8f>
c00136e3:	f6 c3 03             	test   bl,0x3
c00136e6:	75 24                	jne    c001370c <datetimeToSeconds(datetime_t)+0x8f>
c00136e8:	31 d2                	xor    edx,edx
c00136ea:	bf 64 00 00 00       	mov    edi,0x64
c00136ef:	89 d8                	mov    eax,ebx
c00136f1:	66 f7 f7             	div    di
c00136f4:	66 85 d2             	test   dx,dx
c00136f7:	75 12                	jne    c001370b <datetimeToSeconds(datetime_t)+0x8e>
c00136f9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00136ff:	bf 90 01 00 00       	mov    edi,0x190
c0013704:	99                   	cdq    
c0013705:	f7 ff                	idiv   edi
c0013707:	85 d2                	test   edx,edx
c0013709:	75 01                	jne    c001370c <datetimeToSeconds(datetime_t)+0x8f>
c001370b:	41                   	inc    ecx
c001370c:	66 83 fb 46          	cmp    bx,0x46
c0013710:	76 45                	jbe    c0013757 <datetimeToSeconds(datetime_t)+0xda>
c0013712:	bb 46 00 00 00       	mov    ebx,0x46
c0013717:	bf 64 00 00 00       	mov    edi,0x64
c001371c:	bd 90 01 00 00       	mov    ebp,0x190
c0013721:	b8 6d 01 00 00       	mov    eax,0x16d
c0013726:	f6 c3 03             	test   bl,0x3
c0013729:	75 23                	jne    c001374e <datetimeToSeconds(datetime_t)+0xd1>
c001372b:	89 d8                	mov    eax,ebx
c001372d:	99                   	cdq    
c001372e:	f7 ff                	idiv   edi
c0013730:	b8 6e 01 00 00       	mov    eax,0x16e
c0013735:	85 d2                	test   edx,edx
c0013737:	75 15                	jne    c001374e <datetimeToSeconds(datetime_t)+0xd1>
c0013739:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001373f:	99                   	cdq    
c0013740:	f7 fd                	idiv   ebp
c0013742:	83 fa 01             	cmp    edx,0x1
c0013745:	19 c0                	sbb    eax,eax
c0013747:	f7 d0                	not    eax
c0013749:	05 6e 01 00 00       	add    eax,0x16e
c001374e:	01 c1                	add    ecx,eax
c0013750:	43                   	inc    ebx
c0013751:	39 f3                	cmp    ebx,esi
c0013753:	7c cc                	jl     c0013721 <datetimeToSeconds(datetime_t)+0xa4>
c0013755:	eb 35                	jmp    c001378c <datetimeToSeconds(datetime_t)+0x10f>
c0013757:	74 33                	je     c001378c <datetimeToSeconds(datetime_t)+0x10f>
c0013759:	b8 45 00 00 00       	mov    eax,0x45
c001375e:	89 c2                	mov    edx,eax
c0013760:	83 e2 03             	and    edx,0x3
c0013763:	39 f0                	cmp    eax,esi
c0013765:	7e 0f                	jle    c0013776 <datetimeToSeconds(datetime_t)+0xf9>
c0013767:	83 fa 01             	cmp    edx,0x1
c001376a:	19 d2                	sbb    edx,edx
c001376c:	48                   	dec    eax
c001376d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013774:	eb e8                	jmp    c001375e <datetimeToSeconds(datetime_t)+0xe1>
c0013776:	b8 6d 01 00 00       	mov    eax,0x16d
c001377b:	85 d2                	test   edx,edx
c001377d:	75 0b                	jne    c001378a <datetimeToSeconds(datetime_t)+0x10d>
c001377f:	66 83 fb 01          	cmp    bx,0x1
c0013783:	19 c0                	sbb    eax,eax
c0013785:	05 6e 01 00 00       	add    eax,0x16e
c001378a:	29 c1                	sub    ecx,eax
c001378c:	b8 80 51 01 00       	mov    eax,0x15180
c0013791:	f7 e9                	imul   ecx
c0013793:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013797:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001379b:	83 c4 14             	add    esp,0x14
c001379e:	5b                   	pop    ebx
c001379f:	5e                   	pop    esi
c00137a0:	5f                   	pop    edi
c00137a1:	5d                   	pop    ebp
c00137a2:	c3                   	ret    
c00137a3:	90                   	nop

c00137a4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00137a4:	57                   	push   edi
c00137a5:	56                   	push   esi
c00137a6:	53                   	push   ebx
c00137a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137ab:	8b 06                	mov    eax,DWORD PTR [esi]
c00137ad:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00137b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137b8:	e8 c0 fe ff ff       	call   c001367d <datetimeToSeconds(datetime_t)>
c00137bd:	59                   	pop    ecx
c00137be:	0f b6 0d 10 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002ca10
c00137c5:	5b                   	pop    ebx
c00137c6:	03 0d 14 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002ca14
c00137cc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137d2:	89 cb                	mov    ebx,ecx
c00137d4:	c1 fb 1f             	sar    ebx,0x1f
c00137d7:	29 c8                	sub    eax,ecx
c00137d9:	19 da                	sbb    edx,ebx
c00137db:	31 c9                	xor    ecx,ecx
c00137dd:	80 3d 11 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca11,0x0
c00137e4:	74 05                	je     c00137eb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00137e6:	b9 08 07 00 00       	mov    ecx,0x708
c00137eb:	31 db                	xor    ebx,ebx
c00137ed:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00137f1:	29 c8                	sub    eax,ecx
c00137f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137f7:	19 da                	sbb    edx,ebx
c00137f9:	89 f8                	mov    eax,edi
c00137fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00137ff:	5b                   	pop    ebx
c0013800:	5e                   	pop    esi
c0013801:	5f                   	pop    edi
c0013802:	ff e0                	jmp    eax

c0013804 <secondsToDatetime(unsigned long long)>:
c0013804:	55                   	push   ebp
c0013805:	57                   	push   edi
c0013806:	56                   	push   esi
c0013807:	53                   	push   ebx
c0013808:	83 ec 1c             	sub    esp,0x1c
c001380b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001380f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013813:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013817:	6a 00                	push   0x0
c0013819:	68 80 51 01 00       	push   0x15180
c001381e:	55                   	push   ebp
c001381f:	57                   	push   edi
c0013820:	e8 d7 1a 01 00       	call   c00252fc <__udivdi3>
c0013825:	83 c4 10             	add    esp,0x10
c0013828:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001382e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013832:	6a 00                	push   0x0
c0013834:	68 80 51 01 00       	push   0x15180
c0013839:	55                   	push   ebp
c001383a:	57                   	push   edi
c001383b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013840:	e8 b7 1b 01 00       	call   c00253fc <__umoddi3>
c0013845:	83 c4 10             	add    esp,0x10
c0013848:	99                   	cdq    
c0013849:	f7 ff                	idiv   edi
c001384b:	bf 3c 00 00 00       	mov    edi,0x3c
c0013850:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013853:	89 d0                	mov    eax,edx
c0013855:	99                   	cdq    
c0013856:	f7 ff                	idiv   edi
c0013858:	85 db                	test   ebx,ebx
c001385a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001385d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013860:	79 11                	jns    c0013873 <secondsToDatetime(unsigned long long)+0x6f>
c0013862:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013866:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001386c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013871:	eb 07                	jmp    c001387a <secondsToDatetime(unsigned long long)+0x76>
c0013873:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013878:	89 d8                	mov    eax,ebx
c001387a:	bf b4 05 00 00       	mov    edi,0x5b4
c001387f:	99                   	cdq    
c0013880:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013885:	f7 f9                	idiv   ecx
c0013887:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001388c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013890:	31 d2                	xor    edx,edx
c0013892:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001389a:	01 c3                	add    ebx,eax
c001389c:	89 d8                	mov    eax,ebx
c001389e:	f7 f1                	div    ecx
c00138a0:	31 d2                	xor    edx,edx
c00138a2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00138a5:	89 d8                	mov    eax,ebx
c00138a7:	f7 f7                	div    edi
c00138a9:	31 d2                	xor    edx,edx
c00138ab:	29 c1                	sub    ecx,eax
c00138ad:	89 d8                	mov    eax,ebx
c00138af:	f7 f5                	div    ebp
c00138b1:	bd 6d 01 00 00       	mov    ebp,0x16d
c00138b6:	29 c1                	sub    ecx,eax
c00138b8:	31 d2                	xor    edx,edx
c00138ba:	89 c8                	mov    eax,ecx
c00138bc:	f7 f5                	div    ebp
c00138be:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00138c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138c7:	31 d2                	xor    edx,edx
c00138c9:	89 c8                	mov    eax,ecx
c00138cb:	f7 f5                	div    ebp
c00138cd:	31 d2                	xor    edx,edx
c00138cf:	01 c3                	add    ebx,eax
c00138d1:	89 c8                	mov    eax,ecx
c00138d3:	f7 f7                	div    edi
c00138d5:	bf 99 00 00 00       	mov    edi,0x99
c00138da:	29 c3                	sub    ebx,eax
c00138dc:	31 d2                	xor    edx,edx
c00138de:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00138e6:	29 c3                	sub    ebx,eax
c00138e8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00138eb:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00138ee:	bb 05 00 00 00       	mov    ebx,0x5
c00138f3:	83 c1 02             	add    ecx,0x2
c00138f6:	89 c8                	mov    eax,ecx
c00138f8:	f7 f7                	div    edi
c00138fa:	31 d2                	xor    edx,edx
c00138fc:	89 c7                	mov    edi,eax
c00138fe:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013904:	83 c0 02             	add    eax,0x2
c0013907:	f7 f3                	div    ebx
c0013909:	89 eb                	mov    ebx,ebp
c001390b:	29 c3                	sub    ebx,eax
c001390d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013913:	88 1e                	mov    BYTE PTR [esi],bl
c0013915:	19 c0                	sbb    eax,eax
c0013917:	31 d2                	xor    edx,edx
c0013919:	83 e0 0c             	and    eax,0xc
c001391c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013920:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013928:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001392c:	83 f9 01             	cmp    ecx,0x1
c001392f:	0f 96 c2             	setbe  dl
c0013932:	41                   	inc    ecx
c0013933:	01 d0                	add    eax,edx
c0013935:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013938:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001393c:	83 c4 1c             	add    esp,0x1c
c001393f:	89 f0                	mov    eax,esi
c0013941:	5b                   	pop    ebx
c0013942:	5e                   	pop    esi
c0013943:	5f                   	pop    edi
c0013944:	5d                   	pop    ebp
c0013945:	c2 04 00             	ret    0x4

c0013948 <Clock::timeInDatetimeLocal()>:
c0013948:	53                   	push   ebx
c0013949:	83 ec 14             	sub    esp,0x14
c001394c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013950:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013954:	e8 83 fc ff ff       	call   c00135dc <Clock::timeInSecondsLocal()>
c0013959:	83 c4 0c             	add    esp,0xc
c001395c:	52                   	push   edx
c001395d:	50                   	push   eax
c001395e:	53                   	push   ebx
c001395f:	e8 a0 fe ff ff       	call   c0013804 <secondsToDatetime(unsigned long long)>
c0013964:	89 d8                	mov    eax,ebx
c0013966:	83 c4 14             	add    esp,0x14
c0013969:	5b                   	pop    ebx
c001396a:	c2 04 00             	ret    0x4
c001396d:	90                   	nop

c001396e <Device::hibernate()>:
c001396e:	c3                   	ret    
c001396f:	90                   	nop

c0013970 <Device::wake()>:
c0013970:	c3                   	ret    
c0013971:	90                   	nop

c0013972 <Device::detect()>:
c0013972:	c3                   	ret    
c0013973:	90                   	nop

c0013974 <Device::disableLegacy()>:
c0013974:	c3                   	ret    
c0013975:	90                   	nop

c0013976 <Device::powerSaving(PowerSavingLevel)>:
c0013976:	c3                   	ret    
c0013977:	90                   	nop

c0013978 <DriverlessDevice::close(int, int, void*)>:
c0013978:	31 c0                	xor    eax,eax
c001397a:	c3                   	ret    
c001397b:	90                   	nop

c001397c <DriverlessDevice::detect()>:
c001397c:	c3                   	ret    
c001397d:	90                   	nop

c001397e <DriverlessDevice::open(int, int, void*)>:
c001397e:	83 ec 18             	sub    esp,0x18
c0013981:	68 d0 93 02 c0       	push   0xc00293d0
c0013986:	e8 60 5e 00 00       	call   c00197eb <Krnl::panic(char const*)>
c001398b:	83 c8 ff             	or     eax,0xffffffff
c001398e:	83 c4 1c             	add    esp,0x1c
c0013991:	c3                   	ret    

c0013992 <Device::~Device()>:
c0013992:	ba f8 93 02 c0       	mov    edx,0xc00293f8
c0013997:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001399b:	89 10                	mov    DWORD PTR [eax],edx
c001399d:	90                   	nop
c001399e:	c3                   	ret    
c001399f:	90                   	nop

c00139a0 <Device::~Device()>:
c00139a0:	83 ec 0c             	sub    esp,0xc
c00139a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139a7:	e8 e6 ff ff ff       	call   c0013992 <Device::~Device()>
c00139ac:	83 c4 04             	add    esp,0x4
c00139af:	83 ec 08             	sub    esp,0x8
c00139b2:	68 58 01 00 00       	push   0x158
c00139b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139bb:	e8 31 ec ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00139c0:	83 c4 10             	add    esp,0x10
c00139c3:	83 c4 0c             	add    esp,0xc
c00139c6:	c3                   	ret    
c00139c7:	90                   	nop

c00139c8 <Device::findAndLoadDriver()>:
c00139c8:	c3                   	ret    
c00139c9:	90                   	nop

c00139ca <Device::preOpenPCI(PCIDeviceInfo)>:
c00139ca:	57                   	push   edi
c00139cb:	b9 09 00 00 00       	mov    ecx,0x9
c00139d0:	56                   	push   esi
c00139d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00139d5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00139d9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00139e3:	81 c7 18 01 00 00    	add    edi,0x118
c00139e9:	fc                   	cld    
c00139ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139ec:	5e                   	pop    esi
c00139ed:	5f                   	pop    edi
c00139ee:	c3                   	ret    
c00139ef:	90                   	nop

c00139f0 <Device::preOpenACPI(void*, char*, char*)>:
c00139f0:	56                   	push   esi
c00139f1:	53                   	push   ebx
c00139f2:	83 ec 08             	sub    esp,0x8
c00139f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00139f9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00139fd:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013a07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a0b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013a11:	6a 1e                	push   0x1e
c0013a13:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013a19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a1d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013a23:	50                   	push   eax
c0013a24:	e8 2c cc fe ff       	call   c0000655 <memcpy>
c0013a29:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013a2d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013a31:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013a39:	83 c4 14             	add    esp,0x14
c0013a3c:	5b                   	pop    ebx
c0013a3d:	5e                   	pop    esi
c0013a3e:	e9 12 cc fe ff       	jmp    c0000655 <memcpy>
c0013a43:	90                   	nop

c0013a44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a48:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a4d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a54:	75 0b                	jne    c0013a61 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a56:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a5c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a5f:	eb 1e                	jmp    c0013a7f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a61:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0013a66:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a6c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a72:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a74:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a7c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a7f:	ff e0                	jmp    eax
c0013a81:	90                   	nop

c0013a82 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a86:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a8b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a92:	75 0b                	jne    c0013a9f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a96:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a9a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a9d:	eb 1e                	jmp    c0013abd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a9f:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0013aa4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013aaa:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ab2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ab6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013aba:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013abd:	ff e0                	jmp    eax
c0013abf:	90                   	nop

c0013ac0 <Device::addChild(Device*)>:
c0013ac0:	53                   	push   ebx
c0013ac1:	83 ec 08             	sub    esp,0x8
c0013ac4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ac8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013acc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013ad2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013ad8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013ada:	85 d2                	test   edx,edx
c0013adc:	74 04                	je     c0013ae2 <Device::addChild(Device*)+0x22>
c0013ade:	89 d3                	mov    ebx,edx
c0013ae0:	eb f6                	jmp    c0013ad8 <Device::addChild(Device*)+0x18>
c0013ae2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013ae5:	83 ec 0c             	sub    esp,0xc
c0013ae8:	6a 08                	push   0x8
c0013aea:	e8 e5 b9 ff ff       	call   c000f4d4 <malloc>
c0013aef:	89 03                	mov    DWORD PTR [ebx],eax
c0013af1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013af7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013afe:	83 c4 18             	add    esp,0x18
c0013b01:	5b                   	pop    ebx
c0013b02:	c3                   	ret    
c0013b03:	90                   	nop

c0013b04 <Device::removeAllChildren()>:
c0013b04:	56                   	push   esi
c0013b05:	53                   	push   ebx
c0013b06:	52                   	push   edx
c0013b07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b0b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b14:	74 17                	je     c0013b2d <Device::removeAllChildren()+0x29>
c0013b16:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b19:	85 c0                	test   eax,eax
c0013b1b:	74 0c                	je     c0013b29 <Device::removeAllChildren()+0x25>
c0013b1d:	83 ec 0c             	sub    esp,0xc
c0013b20:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b22:	50                   	push   eax
c0013b23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b26:	83 c4 10             	add    esp,0x10
c0013b29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b2b:	eb e4                	jmp    c0013b11 <Device::removeAllChildren()+0xd>
c0013b2d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b39:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b46:	58                   	pop    eax
c0013b47:	5b                   	pop    ebx
c0013b48:	5e                   	pop    esi
c0013b49:	c3                   	ret    

c0013b4a <Device::hibernateAll()>:
c0013b4a:	53                   	push   ebx
c0013b4b:	83 ec 14             	sub    esp,0x14
c0013b4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b54:	53                   	push   ebx
c0013b55:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b5e:	83 c4 10             	add    esp,0x10
c0013b61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b64:	74 0f                	je     c0013b75 <Device::hibernateAll()+0x2b>
c0013b66:	83 ec 0c             	sub    esp,0xc
c0013b69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b6c:	e8 d9 ff ff ff       	call   c0013b4a <Device::hibernateAll()>
c0013b71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b73:	eb e9                	jmp    c0013b5e <Device::hibernateAll()+0x14>
c0013b75:	83 c4 08             	add    esp,0x8
c0013b78:	5b                   	pop    ebx
c0013b79:	c3                   	ret    

c0013b7a <Device::wakeAll()>:
c0013b7a:	53                   	push   ebx
c0013b7b:	83 ec 14             	sub    esp,0x14
c0013b7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b84:	53                   	push   ebx
c0013b85:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013b88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b8e:	83 c4 10             	add    esp,0x10
c0013b91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b94:	74 0f                	je     c0013ba5 <Device::wakeAll()+0x2b>
c0013b96:	83 ec 0c             	sub    esp,0xc
c0013b99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b9c:	e8 d9 ff ff ff       	call   c0013b7a <Device::wakeAll()>
c0013ba1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ba3:	eb e9                	jmp    c0013b8e <Device::wakeAll()+0x14>
c0013ba5:	83 c4 08             	add    esp,0x8
c0013ba8:	5b                   	pop    ebx
c0013ba9:	c3                   	ret    

c0013baa <Device::detectAll()>:
c0013baa:	53                   	push   ebx
c0013bab:	83 ec 14             	sub    esp,0x14
c0013bae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb4:	53                   	push   ebx
c0013bb5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013bb8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bbe:	83 c4 10             	add    esp,0x10
c0013bc1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bc4:	74 0f                	je     c0013bd5 <Device::detectAll()+0x2b>
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bcc:	e8 d9 ff ff ff       	call   c0013baa <Device::detectAll()>
c0013bd1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bd3:	eb e9                	jmp    c0013bbe <Device::detectAll()+0x14>
c0013bd5:	83 c4 08             	add    esp,0x8
c0013bd8:	5b                   	pop    ebx
c0013bd9:	c3                   	ret    

c0013bda <Device::disableLegacyAll()>:
c0013bda:	53                   	push   ebx
c0013bdb:	83 ec 14             	sub    esp,0x14
c0013bde:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013be2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be4:	53                   	push   ebx
c0013be5:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013be8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bee:	83 c4 10             	add    esp,0x10
c0013bf1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bf4:	74 0f                	je     c0013c05 <Device::disableLegacyAll()+0x2b>
c0013bf6:	83 ec 0c             	sub    esp,0xc
c0013bf9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bfc:	e8 d9 ff ff ff       	call   c0013bda <Device::disableLegacyAll()>
c0013c01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c03:	eb e9                	jmp    c0013bee <Device::disableLegacyAll()+0x14>
c0013c05:	83 c4 08             	add    esp,0x8
c0013c08:	5b                   	pop    ebx
c0013c09:	c3                   	ret    

c0013c0a <Device::loadDriversForAll()>:
c0013c0a:	53                   	push   ebx
c0013c0b:	83 ec 08             	sub    esp,0x8
c0013c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c12:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c18:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013c1a:	85 db                	test   ebx,ebx
c0013c1c:	74 12                	je     c0013c30 <Device::loadDriversForAll()+0x26>
c0013c1e:	83 ec 0c             	sub    esp,0xc
c0013c21:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013c24:	e8 e1 ff ff ff       	call   c0013c0a <Device::loadDriversForAll()>
c0013c29:	83 c4 10             	add    esp,0x10
c0013c2c:	89 d8                	mov    eax,ebx
c0013c2e:	eb e8                	jmp    c0013c18 <Device::loadDriversForAll()+0xe>
c0013c30:	83 c4 08             	add    esp,0x8
c0013c33:	5b                   	pop    ebx
c0013c34:	c3                   	ret    
c0013c35:	90                   	nop

c0013c36 <Device::closeAll()>:
c0013c36:	53                   	push   ebx
c0013c37:	83 ec 08             	sub    esp,0x8
c0013c3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c40:	6a 00                	push   0x0
c0013c42:	6a 00                	push   0x0
c0013c44:	6a 00                	push   0x0
c0013c46:	53                   	push   ebx
c0013c47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c4a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c50:	83 c4 10             	add    esp,0x10
c0013c53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c56:	74 0f                	je     c0013c67 <Device::closeAll()+0x31>
c0013c58:	83 ec 0c             	sub    esp,0xc
c0013c5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c5e:	e8 d3 ff ff ff       	call   c0013c36 <Device::closeAll()>
c0013c63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c65:	eb e9                	jmp    c0013c50 <Device::closeAll()+0x1a>
c0013c67:	83 c4 08             	add    esp,0x8
c0013c6a:	5b                   	pop    ebx
c0013c6b:	c3                   	ret    

c0013c6c <Device::powerSavingAll(PowerSavingLevel)>:
c0013c6c:	56                   	push   esi
c0013c6d:	53                   	push   ebx
c0013c6e:	83 ec 0c             	sub    esp,0xc
c0013c71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013c79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c7b:	56                   	push   esi
c0013c7c:	53                   	push   ebx
c0013c7d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013c80:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c86:	83 c4 10             	add    esp,0x10
c0013c89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c8c:	74 0f                	je     c0013c9d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013c8e:	52                   	push   edx
c0013c8f:	52                   	push   edx
c0013c90:	56                   	push   esi
c0013c91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c94:	e8 d3 ff ff ff       	call   c0013c6c <Device::powerSavingAll(PowerSavingLevel)>
c0013c99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c9b:	eb e9                	jmp    c0013c86 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c9d:	58                   	pop    eax
c0013c9e:	5b                   	pop    ebx
c0013c9f:	5e                   	pop    esi
c0013ca0:	c3                   	ret    
c0013ca1:	90                   	nop

c0013ca2 <Device::setName(char const*)>:
c0013ca2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013caa:	e9 7b ca fe ff       	jmp    c000072a <strcpy>
c0013caf:	90                   	nop

c0013cb0 <Device::Device(char const*)>:
c0013cb0:	83 ec 1c             	sub    esp,0x1c
c0013cb3:	ba f8 93 02 c0       	mov    edx,0xc00293f8
c0013cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cbc:	89 10                	mov    DWORD PTR [eax],edx
c0013cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cc2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013ccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013cda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cde:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cec:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cf6:	83 ec 08             	sub    esp,0x8
c0013cf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d01:	e8 9c ff ff ff       	call   c0013ca2 <Device::setName(char const*)>
c0013d06:	83 c4 10             	add    esp,0x10
c0013d09:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d11:	83 ec 0c             	sub    esp,0xc
c0013d14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d18:	e8 b7 b7 ff ff       	call   c000f4d4 <malloc>
c0013d1d:	83 c4 10             	add    esp,0x10
c0013d20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d31:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d3b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d4b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d5c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013d63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d67:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013d6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d72:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d80:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d8e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d9c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013da6:	90                   	nop
c0013da7:	83 c4 1c             	add    esp,0x1c
c0013daa:	c3                   	ret    
c0013dab:	90                   	nop

c0013dac <Device::getName()>:
c0013dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013db0:	05 d0 00 00 00       	add    eax,0xd0
c0013db5:	c3                   	ret    

c0013db6 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013db6:	83 ec 0c             	sub    esp,0xc
c0013db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dbd:	83 ec 08             	sub    esp,0x8
c0013dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc4:	50                   	push   eax
c0013dc5:	e8 e6 fe ff ff       	call   c0013cb0 <Device::Device(char const*)>
c0013dca:	83 c4 10             	add    esp,0x10
c0013dcd:	ba 24 94 02 c0       	mov    edx,0xc0029424
c0013dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd6:	89 10                	mov    DWORD PTR [eax],edx
c0013dd8:	90                   	nop
c0013dd9:	83 c4 0c             	add    esp,0xc
c0013ddc:	c3                   	ret    
c0013ddd:	90                   	nop

c0013dde <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013dde:	57                   	push   edi
c0013ddf:	56                   	push   esi
c0013de0:	53                   	push   ebx
c0013de1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013de5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013de9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ded:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013df3:	75 0c                	jne    c0013e01 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013df5:	52                   	push   edx
c0013df6:	52                   	push   edx
c0013df7:	53                   	push   ebx
c0013df8:	56                   	push   esi
c0013df9:	e8 3c 34 01 00       	call   c002723a <LinkedList<Device>::addElement(Device*)>
c0013dfe:	83 c4 10             	add    esp,0x10
c0013e01:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e0a:	74 12                	je     c0013e1e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e0c:	50                   	push   eax
c0013e0d:	57                   	push   edi
c0013e0e:	56                   	push   esi
c0013e0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e12:	e8 c7 ff ff ff       	call   c0013dde <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e19:	83 c4 10             	add    esp,0x10
c0013e1c:	eb e9                	jmp    c0013e07 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e1e:	5b                   	pop    ebx
c0013e1f:	5e                   	pop    esi
c0013e20:	5f                   	pop    edi
c0013e21:	c3                   	ret    

c0013e22 <getDevicesOfType(DeviceType)>:
c0013e22:	53                   	push   ebx
c0013e23:	83 ec 14             	sub    esp,0x14
c0013e26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e2a:	53                   	push   ebx
c0013e2b:	e8 e6 34 01 00       	call   c0027316 <LinkedList<Device>::LinkedList()>
c0013e30:	83 c4 0c             	add    esp,0xc
c0013e33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e37:	53                   	push   ebx
c0013e38:	ff 35 a8 c8 02 c0    	push   DWORD PTR ds:0xc002c8a8
c0013e3e:	e8 9b ff ff ff       	call   c0013dde <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e43:	89 d8                	mov    eax,ebx
c0013e45:	83 c4 18             	add    esp,0x18
c0013e48:	5b                   	pop    ebx
c0013e49:	c2 04 00             	ret    0x4

c0013e4c <HardDiskController::HardDiskController(char const*)>:
c0013e4c:	83 ec 0c             	sub    esp,0xc
c0013e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e53:	83 ec 08             	sub    esp,0x8
c0013e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e5a:	50                   	push   eax
c0013e5b:	e8 50 fe ff ff       	call   c0013cb0 <Device::Device(char const*)>
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0013e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6c:	89 10                	mov    DWORD PTR [eax],edx
c0013e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e72:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013e7c:	90                   	nop
c0013e7d:	83 c4 0c             	add    esp,0xc
c0013e80:	c3                   	ret    
c0013e81:	90                   	nop

c0013e82 <HardDiskController::~HardDiskController()>:
c0013e82:	83 ec 0c             	sub    esp,0xc
c0013e85:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0013e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8e:	89 10                	mov    DWORD PTR [eax],edx
c0013e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	50                   	push   eax
c0013e98:	e8 f5 fa ff ff       	call   c0013992 <Device::~Device()>
c0013e9d:	83 c4 10             	add    esp,0x10
c0013ea0:	90                   	nop
c0013ea1:	83 c4 0c             	add    esp,0xc
c0013ea4:	c3                   	ret    
c0013ea5:	90                   	nop

c0013ea6 <HardDiskController::~HardDiskController()>:
c0013ea6:	83 ec 0c             	sub    esp,0xc
c0013ea9:	83 ec 0c             	sub    esp,0xc
c0013eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb0:	e8 cd ff ff ff       	call   c0013e82 <HardDiskController::~HardDiskController()>
c0013eb5:	83 c4 10             	add    esp,0x10
c0013eb8:	83 ec 08             	sub    esp,0x8
c0013ebb:	68 58 01 00 00       	push   0x158
c0013ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ec4:	e8 28 e7 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0013ec9:	83 c4 10             	add    esp,0x10
c0013ecc:	83 c4 0c             	add    esp,0xc
c0013ecf:	c3                   	ret    

c0013ed0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed7:	83 ec 08             	sub    esp,0x8
c0013eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ede:	50                   	push   eax
c0013edf:	e8 cc fd ff ff       	call   c0013cb0 <Device::Device(char const*)>
c0013ee4:	83 c4 10             	add    esp,0x10
c0013ee7:	ba 7c 94 02 c0       	mov    edx,0xc002947c
c0013eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef0:	89 10                	mov    DWORD PTR [eax],edx
c0013ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f01:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f0c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f1e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f28:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f32:	90                   	nop
c0013f33:	83 c4 0c             	add    esp,0xc
c0013f36:	c3                   	ret    
c0013f37:	90                   	nop

c0013f38 <PhysicalDisk::startCache()>:
c0013f38:	56                   	push   esi
c0013f39:	53                   	push   ebx
c0013f3a:	83 ec 10             	sub    esp,0x10
c0013f3d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f41:	6a 30                	push   0x30
c0013f43:	e8 8c b5 ff ff       	call   c000f4d4 <malloc>
c0013f48:	89 c6                	mov    esi,eax
c0013f4a:	58                   	pop    eax
c0013f4b:	5a                   	pop    edx
c0013f4c:	53                   	push   ebx
c0013f4d:	56                   	push   esi
c0013f4e:	e8 dd 25 00 00       	call   c0016530 <VCache::VCache(PhysicalDisk*)>
c0013f53:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013f59:	83 c4 14             	add    esp,0x14
c0013f5c:	5b                   	pop    ebx
c0013f5d:	5e                   	pop    esi
c0013f5e:	c3                   	ret    
c0013f5f:	90                   	nop

c0013f60 <PhysicalDisk::~PhysicalDisk()>:
c0013f60:	83 ec 0c             	sub    esp,0xc
c0013f63:	ba 7c 94 02 c0       	mov    edx,0xc002947c
c0013f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6c:	89 10                	mov    DWORD PTR [eax],edx
c0013f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f72:	83 ec 0c             	sub    esp,0xc
c0013f75:	50                   	push   eax
c0013f76:	e8 17 fa ff ff       	call   c0013992 <Device::~Device()>
c0013f7b:	83 c4 10             	add    esp,0x10
c0013f7e:	90                   	nop
c0013f7f:	83 c4 0c             	add    esp,0xc
c0013f82:	c3                   	ret    
c0013f83:	90                   	nop

c0013f84 <PhysicalDisk::~PhysicalDisk()>:
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	83 ec 0c             	sub    esp,0xc
c0013f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f8e:	e8 cd ff ff ff       	call   c0013f60 <PhysicalDisk::~PhysicalDisk()>
c0013f93:	83 c4 10             	add    esp,0x10
c0013f96:	83 ec 08             	sub    esp,0x8
c0013f99:	68 6c 01 00 00       	push   0x16c
c0013f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fa2:	e8 4a e6 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0013fa7:	83 c4 10             	add    esp,0x10
c0013faa:	83 c4 0c             	add    esp,0xc
c0013fad:	c3                   	ret    

c0013fae <FPU::FPU(char const*)>:
c0013fae:	83 ec 0c             	sub    esp,0xc
c0013fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb5:	83 ec 08             	sub    esp,0x8
c0013fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fbc:	50                   	push   eax
c0013fbd:	e8 ee fc ff ff       	call   c0013cb0 <Device::Device(char const*)>
c0013fc2:	83 c4 10             	add    esp,0x10
c0013fc5:	ba bc 94 02 c0       	mov    edx,0xc00294bc
c0013fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fce:	89 10                	mov    DWORD PTR [eax],edx
c0013fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013fde:	90                   	nop
c0013fdf:	83 c4 0c             	add    esp,0xc
c0013fe2:	c3                   	ret    
c0013fe3:	90                   	nop

c0013fe4 <FPU::~FPU()>:
c0013fe4:	83 ec 0c             	sub    esp,0xc
c0013fe7:	ba bc 94 02 c0       	mov    edx,0xc00294bc
c0013fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff0:	89 10                	mov    DWORD PTR [eax],edx
c0013ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff6:	83 ec 0c             	sub    esp,0xc
c0013ff9:	50                   	push   eax
c0013ffa:	e8 93 f9 ff ff       	call   c0013992 <Device::~Device()>
c0013fff:	83 c4 10             	add    esp,0x10
c0014002:	90                   	nop
c0014003:	83 c4 0c             	add    esp,0xc
c0014006:	c3                   	ret    
c0014007:	90                   	nop

c0014008 <FPU::~FPU()>:
c0014008:	83 ec 0c             	sub    esp,0xc
c001400b:	83 ec 0c             	sub    esp,0xc
c001400e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014012:	e8 cd ff ff ff       	call   c0013fe4 <FPU::~FPU()>
c0014017:	83 c4 10             	add    esp,0x10
c001401a:	83 ec 08             	sub    esp,0x8
c001401d:	68 58 01 00 00       	push   0x158
c0014022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014026:	e8 c6 e5 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001402b:	83 c4 10             	add    esp,0x10
c001402e:	83 c4 0c             	add    esp,0xc
c0014031:	c3                   	ret    

c0014032 <setupFPU()>:
c0014032:	53                   	push   ebx
c0014033:	83 ec 08             	sub    esp,0x8
c0014036:	8b 15 a8 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c8a8
c001403c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014043:	74 19                	je     c001405e <setupFPU()+0x2c>
c0014045:	83 ec 0c             	sub    esp,0xc
c0014048:	68 58 01 00 00       	push   0x158
c001404d:	e8 82 b4 ff ff       	call   c000f4d4 <malloc>
c0014052:	89 c3                	mov    ebx,eax
c0014054:	89 04 24             	mov    DWORD PTR [esp],eax
c0014057:	e8 30 fe 00 00       	call   c0023e8c <AVX::AVX()>
c001405c:	eb 5b                	jmp    c00140b9 <setupFPU()+0x87>
c001405e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014064:	84 c0                	test   al,al
c0014066:	79 19                	jns    c0014081 <setupFPU()+0x4f>
c0014068:	83 ec 0c             	sub    esp,0xc
c001406b:	68 58 01 00 00       	push   0x158
c0014070:	e8 5f b4 ff ff       	call   c000f4d4 <malloc>
c0014075:	89 c3                	mov    ebx,eax
c0014077:	89 04 24             	mov    DWORD PTR [esp],eax
c001407a:	e8 33 ff 00 00       	call   c0023fb2 <SSE::SSE()>
c001407f:	eb 38                	jmp    c00140b9 <setupFPU()+0x87>
c0014081:	a8 20                	test   al,0x20
c0014083:	74 19                	je     c001409e <setupFPU()+0x6c>
c0014085:	83 ec 0c             	sub    esp,0xc
c0014088:	68 58 01 00 00       	push   0x158
c001408d:	e8 42 b4 ff ff       	call   c000f4d4 <malloc>
c0014092:	89 c3                	mov    ebx,eax
c0014094:	89 04 24             	mov    DWORD PTR [esp],eax
c0014097:	e8 80 fe 00 00       	call   c0023f1c <MMX::MMX()>
c001409c:	eb 1b                	jmp    c00140b9 <setupFPU()+0x87>
c001409e:	a8 10                	test   al,0x10
c00140a0:	74 1c                	je     c00140be <setupFPU()+0x8c>
c00140a2:	83 ec 0c             	sub    esp,0xc
c00140a5:	68 58 01 00 00       	push   0x158
c00140aa:	e8 25 b4 ff ff       	call   c000f4d4 <malloc>
c00140af:	89 c3                	mov    ebx,eax
c00140b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00140b4:	e8 87 ff 00 00       	call   c0024040 <x87::x87()>
c00140b9:	83 c4 10             	add    esp,0x10
c00140bc:	eb 24                	jmp    c00140e2 <setupFPU()+0xb0>
c00140be:	83 e0 ef             	and    eax,0xffffffef
c00140c1:	83 ec 0c             	sub    esp,0xc
c00140c4:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00140ca:	68 a8 94 02 c0       	push   0xc00294a8
c00140cf:	e8 fd e5 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00140d4:	0f 20 c0             	mov    eax,cr0
c00140d7:	83 c8 04             	or     eax,0x4
c00140da:	0f 22 c0             	mov    cr0,eax
c00140dd:	31 db                	xor    ebx,ebx
c00140df:	83 c4 10             	add    esp,0x10
c00140e2:	89 d8                	mov    eax,ebx
c00140e4:	83 c4 08             	add    esp,0x8
c00140e7:	5b                   	pop    ebx
c00140e8:	c3                   	ret    
c00140e9:	90                   	nop

c00140ea <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00140ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140f2:	c1 e0 04             	shl    eax,0x4
c00140f5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00140f9:	8d 50 10             	lea    edx,[eax+0x10]
c00140fc:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014102:	74 08                	je     c001410c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014104:	83 c0 04             	add    eax,0x4
c0014107:	39 d0                	cmp    eax,edx
c0014109:	75 f1                	jne    c00140fc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001410b:	c3                   	ret    
c001410c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014116:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014120:	eb e2                	jmp    c0014104 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014122 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014122:	57                   	push   edi
c0014123:	31 c0                	xor    eax,eax
c0014125:	56                   	push   esi
c0014126:	53                   	push   ebx
c0014127:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001412b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001412f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014133:	89 da                	mov    edx,ebx
c0014135:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014139:	c1 e2 04             	shl    edx,0x4
c001413c:	01 ca                	add    edx,ecx
c001413e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014146:	74 16                	je     c001415e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014148:	40                   	inc    eax
c0014149:	83 f8 04             	cmp    eax,0x4
c001414c:	75 f0                	jne    c001413e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001414e:	c7 44 24 10 ec 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc00294ec
c0014156:	5b                   	pop    ebx
c0014157:	5e                   	pop    esi
c0014158:	5f                   	pop    edi
c0014159:	e9 8d 56 00 00       	jmp    c00197eb <Krnl::panic(char const*)>
c001415e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014161:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014164:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001416a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014170:	5b                   	pop    ebx
c0014171:	5e                   	pop    esi
c0014172:	5f                   	pop    edi
c0014173:	c3                   	ret    

c0014174 <doubleFault(regs*, void*)>:
c0014174:	55                   	push   ebp
c0014175:	89 e5                	mov    ebp,esp
c0014177:	83 ec 08             	sub    esp,0x8
c001417a:	83 ec 0c             	sub    esp,0xc
c001417d:	68 27 95 02 c0       	push   0xc0029527
c0014182:	e8 64 56 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0014187:	83 c4 10             	add    esp,0x10
c001418a:	90                   	nop
c001418b:	c9                   	leave  
c001418c:	c3                   	ret    
c001418d:	90                   	nop

c001418e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001418e:	56                   	push   esi
c001418f:	53                   	push   ebx
c0014190:	50                   	push   eax
c0014191:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014195:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014199:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001419e:	75 35                	jne    c00141d5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00141a0:	8d 43 20             	lea    eax,[ebx+0x20]
c00141a3:	31 d2                	xor    edx,edx
c00141a5:	89 c1                	mov    ecx,eax
c00141a7:	c1 e1 04             	shl    ecx,0x4
c00141aa:	01 f1                	add    ecx,esi
c00141ac:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00141b4:	74 3e                	je     c00141f4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00141b6:	42                   	inc    edx
c00141b7:	83 fa 04             	cmp    edx,0x4
c00141ba:	75 f0                	jne    c00141ac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00141bc:	83 ec 0c             	sub    esp,0xc
c00141bf:	68 6c 95 02 c0       	push   0xc002956c
c00141c4:	e8 22 56 00 00       	call   c00197eb <Krnl::panic(char const*)>
c00141c9:	83 c4 10             	add    esp,0x10
c00141cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00141d1:	5a                   	pop    edx
c00141d2:	5b                   	pop    ebx
c00141d3:	5e                   	pop    esi
c00141d4:	c3                   	ret    
c00141d5:	83 ec 0c             	sub    esp,0xc
c00141d8:	56                   	push   esi
c00141d9:	e8 ce fb ff ff       	call   c0013dac <Device::getName()>
c00141de:	83 c4 10             	add    esp,0x10
c00141e1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00141e4:	75 ba                	jne    c00141a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141e6:	83 fb 0f             	cmp    ebx,0xf
c00141e9:	7f 29                	jg     c0014214 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00141eb:	0f b6 9b 00 bb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4500]
c00141f2:	eb ac                	jmp    c00141a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141f4:	8d 04 82             	lea    eax,[edx+eax*4]
c00141f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00141fe:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014204:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014208:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001420e:	89 d8                	mov    eax,ebx
c0014210:	5a                   	pop    edx
c0014211:	5b                   	pop    ebx
c0014212:	5e                   	pop    esi
c0014213:	c3                   	ret    
c0014214:	83 ec 0c             	sub    esp,0xc
c0014217:	68 34 95 02 c0       	push   0xc0029534
c001421c:	e8 ca 55 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0014221:	83 c4 10             	add    esp,0x10
c0014224:	e9 77 ff ff ff       	jmp    c00141a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014229:	90                   	nop

c001422a <InterruptController::clearAllHandlers(int, bool)>:
c001422a:	56                   	push   esi
c001422b:	53                   	push   ebx
c001422c:	52                   	push   edx
c001422d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014231:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014235:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001423a:	75 61                	jne    c001429d <InterruptController::clearAllHandlers(int, bool)+0x73>
c001423c:	8d 46 20             	lea    eax,[esi+0x20]
c001423f:	c1 e6 04             	shl    esi,0x4
c0014242:	c1 e0 04             	shl    eax,0x4
c0014245:	01 de                	add    esi,ebx
c0014247:	01 d8                	add    eax,ebx
c0014249:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014253:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001425d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014267:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014271:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001427b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014285:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001428f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014299:	58                   	pop    eax
c001429a:	5b                   	pop    ebx
c001429b:	5e                   	pop    esi
c001429c:	c3                   	ret    
c001429d:	83 ec 0c             	sub    esp,0xc
c00142a0:	53                   	push   ebx
c00142a1:	e8 06 fb ff ff       	call   c0013dac <Device::getName()>
c00142a6:	83 c4 10             	add    esp,0x10
c00142a9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142ac:	75 8e                	jne    c001423c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00142ae:	83 fe 0f             	cmp    esi,0xf
c00142b1:	7f 09                	jg     c00142bc <InterruptController::clearAllHandlers(int, bool)+0x92>
c00142b3:	0f b6 b6 00 bb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4500]
c00142ba:	eb 80                	jmp    c001423c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00142bc:	83 ec 0c             	sub    esp,0xc
c00142bf:	68 a8 95 02 c0       	push   0xc00295a8
c00142c4:	e8 22 55 00 00       	call   c00197eb <Krnl::panic(char const*)>
c00142c9:	83 c4 10             	add    esp,0x10
c00142cc:	e9 6b ff ff ff       	jmp    c001423c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00142d1:	90                   	nop

c00142d2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142d2:	56                   	push   esi
c00142d3:	53                   	push   ebx
c00142d4:	52                   	push   edx
c00142d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142dd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00142e2:	75 3a                	jne    c001431e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00142e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142e8:	8d 50 20             	lea    edx,[eax+0x20]
c00142eb:	c1 e2 04             	shl    edx,0x4
c00142ee:	8d 04 16             	lea    eax,[esi+edx*1]
c00142f1:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00142f5:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00142fb:	74 0b                	je     c0014308 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00142fd:	83 c0 04             	add    eax,0x4
c0014300:	39 d0                	cmp    eax,edx
c0014302:	75 f1                	jne    c00142f5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014304:	58                   	pop    eax
c0014305:	5b                   	pop    ebx
c0014306:	5e                   	pop    esi
c0014307:	c3                   	ret    
c0014308:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014312:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001431c:	eb df                	jmp    c00142fd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001431e:	83 ec 0c             	sub    esp,0xc
c0014321:	56                   	push   esi
c0014322:	e8 85 fa ff ff       	call   c0013dac <Device::getName()>
c0014327:	83 c4 10             	add    esp,0x10
c001432a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001432d:	75 b5                	jne    c00142e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001432f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014334:	7f 11                	jg     c0014347 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014336:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001433a:	0f b6 80 00 bb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4500]
c0014341:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014345:	eb 9d                	jmp    c00142e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014347:	83 ec 0c             	sub    esp,0xc
c001434a:	68 a8 95 02 c0       	push   0xc00295a8
c001434f:	e8 97 54 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0014354:	83 c4 10             	add    esp,0x10
c0014357:	eb 8b                	jmp    c00142e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014359 <nmiHandler(regs*, void*)>:
c0014359:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001435e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014362:	e9 b9 a8 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c0014367 <int_handler>:
c0014367:	55                   	push   ebp
c0014368:	57                   	push   edi
c0014369:	56                   	push   esi
c001436a:	53                   	push   ebx
c001436b:	83 ec 0c             	sub    esp,0xc
c001436e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014372:	80 3d c0 d3 02 c0 00 	cmp    BYTE PTR ds:0xc002d3c0,0x0
c0014379:	74 0b                	je     c0014386 <int_handler+0x1f>
c001437b:	fa                   	cli    
c001437c:	f4                   	hlt    
c001437d:	80 3d c0 d3 02 c0 00 	cmp    BYTE PTR ds:0xc002d3c0,0x0
c0014384:	75 f5                	jne    c001437b <int_handler+0x14>
c0014386:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001438b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001438e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014394:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001439a:	8d 43 e0             	lea    eax,[ebx-0x20]
c001439d:	83 f8 17             	cmp    eax,0x17
c00143a0:	77 13                	ja     c00143b5 <int_handler+0x4e>
c00143a2:	83 ec 08             	sub    esp,0x8
c00143a5:	8b 17                	mov    edx,DWORD PTR [edi]
c00143a7:	8d 43 e0             	lea    eax,[ebx-0x20]
c00143aa:	0f b6 c0             	movzx  eax,al
c00143ad:	50                   	push   eax
c00143ae:	57                   	push   edi
c00143af:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00143b2:	83 c4 10             	add    esp,0x10
c00143b5:	83 c3 15             	add    ebx,0x15
c00143b8:	c1 e3 04             	shl    ebx,0x4
c00143bb:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00143bf:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00143c6:	31 db                	xor    ebx,ebx
c00143c8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00143cc:	85 c0                	test   eax,eax
c00143ce:	74 13                	je     c00143e3 <int_handler+0x7c>
c00143d0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00143d3:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00143d7:	74 1c                	je     c00143f5 <int_handler+0x8e>
c00143d9:	83 ec 08             	sub    esp,0x8
c00143dc:	52                   	push   edx
c00143dd:	56                   	push   esi
c00143de:	ff d0                	call   eax
c00143e0:	83 c4 10             	add    esp,0x10
c00143e3:	43                   	inc    ebx
c00143e4:	83 fb 04             	cmp    ebx,0x4
c00143e7:	75 df                	jne    c00143c8 <int_handler+0x61>
c00143e9:	83 c4 0c             	add    esp,0xc
c00143ec:	31 c0                	xor    eax,eax
c00143ee:	5b                   	pop    ebx
c00143ef:	31 d2                	xor    edx,edx
c00143f1:	5e                   	pop    esi
c00143f2:	5f                   	pop    edi
c00143f3:	5d                   	pop    ebp
c00143f4:	c3                   	ret    
c00143f5:	83 ec 08             	sub    esp,0x8
c00143f8:	52                   	push   edx
c00143f9:	56                   	push   esi
c00143fa:	ff d0                	call   eax
c00143fc:	83 c4 10             	add    esp,0x10
c00143ff:	83 c4 0c             	add    esp,0xc
c0014402:	5b                   	pop    ebx
c0014403:	5e                   	pop    esi
c0014404:	5f                   	pop    edi
c0014405:	5d                   	pop    ebp
c0014406:	c3                   	ret    
c0014407:	90                   	nop

c0014408 <InterruptController::InterruptController(char const*)>:
c0014408:	83 ec 1c             	sub    esp,0x1c
c001440b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001440f:	83 ec 08             	sub    esp,0x8
c0014412:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014416:	50                   	push   eax
c0014417:	e8 94 f8 ff ff       	call   c0013cb0 <Device::Device(char const*)>
c001441c:	83 c4 10             	add    esp,0x10
c001441f:	ba dc 97 02 c0       	mov    edx,0xc00297dc
c0014424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014428:	89 10                	mov    DWORD PTR [eax],edx
c001442a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001442e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014438:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014440:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014448:	7f 5e                	jg     c00144a8 <InterruptController::InterruptController(char const*)+0xa0>
c001444a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014452:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014457:	7f 49                	jg     c00144a2 <InterruptController::InterruptController(char const*)+0x9a>
c0014459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001445d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014461:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014468:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001446c:	01 ca                	add    edx,ecx
c001446e:	83 c2 54             	add    edx,0x54
c0014471:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014481:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014488:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001448c:	01 ca                	add    edx,ecx
c001448e:	81 c2 54 04 00 00    	add    edx,0x454
c0014494:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001449c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00144a0:	eb b0                	jmp    c0014452 <InterruptController::InterruptController(char const*)+0x4a>
c00144a2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00144a6:	eb 98                	jmp    c0014440 <InterruptController::InterruptController(char const*)+0x38>
c00144a8:	90                   	nop
c00144a9:	83 c4 1c             	add    esp,0x1c
c00144ac:	c3                   	ret    
c00144ad:	90                   	nop

c00144ae <InterruptController::~InterruptController()>:
c00144ae:	83 ec 0c             	sub    esp,0xc
c00144b1:	ba dc 97 02 c0       	mov    edx,0xc00297dc
c00144b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ba:	89 10                	mov    DWORD PTR [eax],edx
c00144bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144c0:	83 ec 0c             	sub    esp,0xc
c00144c3:	50                   	push   eax
c00144c4:	e8 c9 f4 ff ff       	call   c0013992 <Device::~Device()>
c00144c9:	83 c4 10             	add    esp,0x10
c00144cc:	90                   	nop
c00144cd:	83 c4 0c             	add    esp,0xc
c00144d0:	c3                   	ret    
c00144d1:	90                   	nop

c00144d2 <InterruptController::~InterruptController()>:
c00144d2:	83 ec 0c             	sub    esp,0xc
c00144d5:	83 ec 0c             	sub    esp,0xc
c00144d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144dc:	e8 cd ff ff ff       	call   c00144ae <InterruptController::~InterruptController()>
c00144e1:	83 c4 10             	add    esp,0x10
c00144e4:	83 ec 08             	sub    esp,0x8
c00144e7:	68 58 21 00 00       	push   0x2158
c00144ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f0:	e8 fc e0 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00144f5:	83 c4 10             	add    esp,0x10
c00144f8:	83 c4 0c             	add    esp,0xc
c00144fb:	c3                   	ret    

c00144fc <displayDebugInfo(regs*)>:
c00144fc:	55                   	push   ebp
c00144fd:	57                   	push   edi
c00144fe:	56                   	push   esi
c00144ff:	53                   	push   ebx
c0014500:	83 ec 24             	sub    esp,0x24
c0014503:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014507:	0f 20 c2             	mov    edx,cr0
c001450a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001450e:	0f 20 d7             	mov    edi,cr2
c0014511:	0f 20 de             	mov    esi,cr3
c0014514:	0f 20 e5             	mov    ebp,cr4
c0014517:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001451a:	68 e2 95 02 c0       	push   0xc00295e2
c001451f:	e8 ad e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014524:	58                   	pop    eax
c0014525:	5a                   	pop    edx
c0014526:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014529:	68 ed 95 02 c0       	push   0xc00295ed
c001452e:	e8 9e e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014533:	59                   	pop    ecx
c0014534:	58                   	pop    eax
c0014535:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014538:	68 f8 95 02 c0       	push   0xc00295f8
c001453d:	e8 8f e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014542:	58                   	pop    eax
c0014543:	5a                   	pop    edx
c0014544:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014547:	68 03 96 02 c0       	push   0xc0029603
c001454c:	e8 80 e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014551:	59                   	pop    ecx
c0014552:	58                   	pop    eax
c0014553:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014556:	68 0e 96 02 c0       	push   0xc002960e
c001455b:	e8 71 e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014560:	58                   	pop    eax
c0014561:	5a                   	pop    edx
c0014562:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014565:	68 19 96 02 c0       	push   0xc0029619
c001456a:	e8 62 e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001456f:	59                   	pop    ecx
c0014570:	58                   	pop    eax
c0014571:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014574:	68 24 96 02 c0       	push   0xc0029624
c0014579:	e8 53 e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001457e:	58                   	pop    eax
c001457f:	5a                   	pop    edx
c0014580:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014583:	68 2f 96 02 c0       	push   0xc002962f
c0014588:	e8 44 e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001458d:	59                   	pop    ecx
c001458e:	58                   	pop    eax
c001458f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014592:	68 3a 96 02 c0       	push   0xc002963a
c0014597:	e8 35 e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001459c:	58                   	pop    eax
c001459d:	5a                   	pop    edx
c001459e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145a1:	68 49 96 02 c0       	push   0xc0029649
c00145a6:	e8 26 e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00145ab:	59                   	pop    ecx
c00145ac:	58                   	pop    eax
c00145ad:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00145b0:	68 54 96 02 c0       	push   0xc0029654
c00145b5:	e8 17 e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00145ba:	58                   	pop    eax
c00145bb:	5a                   	pop    edx
c00145bc:	57                   	push   edi
c00145bd:	68 5f 96 02 c0       	push   0xc002965f
c00145c2:	e8 0a e1 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00145c7:	59                   	pop    ecx
c00145c8:	58                   	pop    eax
c00145c9:	56                   	push   esi
c00145ca:	68 6a 96 02 c0       	push   0xc002966a
c00145cf:	e8 fd e0 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00145d4:	58                   	pop    eax
c00145d5:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00145da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e0:	e8 8c c2 ff ff       	call   c0010871 <setActiveTerminal(VgaText*)>
c00145e5:	58                   	pop    eax
c00145e6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00145e9:	5a                   	pop    edx
c00145ea:	c1 e0 05             	shl    eax,0x5
c00145ed:	05 60 b8 02 c0       	add    eax,0xc002b860
c00145f2:	50                   	push   eax
c00145f3:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00145f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145fe:	e8 8d c6 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0014603:	59                   	pop    ecx
c0014604:	58                   	pop    eax
c0014605:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001460a:	68 75 96 02 c0       	push   0xc0029675
c001460f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014615:	e8 76 c6 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c001461a:	58                   	pop    eax
c001461b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014620:	5a                   	pop    edx
c0014621:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014624:	83 c0 0c             	add    eax,0xc
c0014627:	50                   	push   eax
c0014628:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001462d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014633:	e8 58 c6 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0014638:	59                   	pop    ecx
c0014639:	58                   	pop    eax
c001463a:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001463f:	68 7e 96 02 c0       	push   0xc002967e
c0014644:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001464a:	e8 41 c6 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c001464f:	58                   	pop    eax
c0014650:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0014655:	5a                   	pop    edx
c0014656:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014659:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001465f:	e8 52 c6 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0014664:	59                   	pop    ecx
c0014665:	58                   	pop    eax
c0014666:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001466b:	68 86 96 02 c0       	push   0xc0029686
c0014670:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014676:	e8 15 c6 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c001467b:	58                   	pop    eax
c001467c:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0014681:	5a                   	pop    edx
c0014682:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014685:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001468b:	e8 26 c6 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0014690:	59                   	pop    ecx
c0014691:	58                   	pop    eax
c0014692:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0014697:	68 8e 96 02 c0       	push   0xc002968e
c001469c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a2:	e8 e9 c5 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00146a7:	58                   	pop    eax
c00146a8:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00146ad:	5a                   	pop    edx
c00146ae:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00146b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b7:	e8 fa c5 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c00146bc:	59                   	pop    ecx
c00146bd:	58                   	pop    eax
c00146be:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00146c3:	68 96 96 02 c0       	push   0xc0029696
c00146c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ce:	e8 bd c5 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00146d3:	58                   	pop    eax
c00146d4:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00146d9:	5a                   	pop    edx
c00146da:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00146dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e3:	e8 ce c5 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c00146e8:	59                   	pop    ecx
c00146e9:	58                   	pop    eax
c00146ea:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00146ef:	68 9e 96 02 c0       	push   0xc002969e
c00146f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146fa:	e8 91 c5 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00146ff:	58                   	pop    eax
c0014700:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0014705:	5a                   	pop    edx
c0014706:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014709:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470f:	e8 a2 c5 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0014714:	59                   	pop    ecx
c0014715:	58                   	pop    eax
c0014716:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001471b:	68 a6 96 02 c0       	push   0xc00296a6
c0014720:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014726:	e8 65 c5 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c001472b:	58                   	pop    eax
c001472c:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0014731:	5a                   	pop    edx
c0014732:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014735:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473b:	e8 76 c5 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0014740:	59                   	pop    ecx
c0014741:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0014746:	5b                   	pop    ebx
c0014747:	68 ae 96 02 c0       	push   0xc00296ae
c001474c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014752:	e8 39 c5 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0014757:	58                   	pop    eax
c0014758:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001475d:	5a                   	pop    edx
c001475e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014762:	52                   	push   edx
c0014763:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014769:	e8 48 c5 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c001476e:	59                   	pop    ecx
c001476f:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0014774:	5b                   	pop    ebx
c0014775:	68 b7 96 02 c0       	push   0xc00296b7
c001477a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014780:	e8 0b c5 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0014785:	58                   	pop    eax
c0014786:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001478b:	5a                   	pop    edx
c001478c:	57                   	push   edi
c001478d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014793:	e8 1e c5 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0014798:	59                   	pop    ecx
c0014799:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001479e:	5b                   	pop    ebx
c001479f:	68 bf 96 02 c0       	push   0xc00296bf
c00147a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147aa:	e8 e1 c4 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00147af:	5f                   	pop    edi
c00147b0:	58                   	pop    eax
c00147b1:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00147b6:	56                   	push   esi
c00147b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147bd:	e8 f4 c4 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c00147c2:	58                   	pop    eax
c00147c3:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00147c8:	5a                   	pop    edx
c00147c9:	68 c7 96 02 c0       	push   0xc00296c7
c00147ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d4:	e8 b7 c4 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00147d9:	59                   	pop    ecx
c00147da:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00147df:	5b                   	pop    ebx
c00147e0:	55                   	push   ebp
c00147e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e7:	e8 ca c4 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c00147ec:	5e                   	pop    esi
c00147ed:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00147f2:	5f                   	pop    edi
c00147f3:	68 cf 96 02 c0       	push   0xc00296cf
c00147f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fe:	e8 8d c4 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0014803:	0f 21 c0             	mov    eax,db0
c0014806:	5d                   	pop    ebp
c0014807:	5a                   	pop    edx
c0014808:	50                   	push   eax
c0014809:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001480e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014814:	e8 9d c4 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0014819:	59                   	pop    ecx
c001481a:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001481f:	5b                   	pop    ebx
c0014820:	68 d8 96 02 c0       	push   0xc00296d8
c0014825:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482b:	e8 60 c4 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0014830:	0f 21 c8             	mov    eax,db1
c0014833:	5e                   	pop    esi
c0014834:	5f                   	pop    edi
c0014835:	50                   	push   eax
c0014836:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001483b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014841:	e8 70 c4 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0014846:	5d                   	pop    ebp
c0014847:	58                   	pop    eax
c0014848:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001484d:	68 e0 96 02 c0       	push   0xc00296e0
c0014852:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014858:	e8 33 c4 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c001485d:	0f 21 d0             	mov    eax,db2
c0014860:	5a                   	pop    edx
c0014861:	59                   	pop    ecx
c0014862:	50                   	push   eax
c0014863:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0014868:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486e:	e8 43 c4 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0014873:	5b                   	pop    ebx
c0014874:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0014879:	5e                   	pop    esi
c001487a:	68 e8 96 02 c0       	push   0xc00296e8
c001487f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014885:	e8 06 c4 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c001488a:	0f 21 d8             	mov    eax,db3
c001488d:	5f                   	pop    edi
c001488e:	5d                   	pop    ebp
c001488f:	50                   	push   eax
c0014890:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0014895:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489b:	e8 16 c4 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c00148a0:	58                   	pop    eax
c00148a1:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00148a6:	5a                   	pop    edx
c00148a7:	68 f0 96 02 c0       	push   0xc00296f0
c00148ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b2:	e8 d9 c3 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00148b7:	0f 21 f0             	mov    eax,db6
c00148ba:	59                   	pop    ecx
c00148bb:	5b                   	pop    ebx
c00148bc:	50                   	push   eax
c00148bd:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00148c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c8:	e8 e9 c3 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c00148cd:	5e                   	pop    esi
c00148ce:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00148d3:	5f                   	pop    edi
c00148d4:	68 f8 96 02 c0       	push   0xc00296f8
c00148d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148df:	e8 ac c3 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00148e4:	0f 21 f8             	mov    eax,db7
c00148e7:	5d                   	pop    ebp
c00148e8:	5a                   	pop    edx
c00148e9:	50                   	push   eax
c00148ea:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00148ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f5:	e8 bc c3 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c00148fa:	fa                   	cli    
c00148fb:	f4                   	hlt    
c00148fc:	83 c4 10             	add    esp,0x10
c00148ff:	eb fe                	jmp    c00148ff <displayDebugInfo(regs*)+0x403>

c0014901 <x87EmulHandler(regs*, void*)>:
c0014901:	53                   	push   ebx
c0014902:	83 ec 14             	sub    esp,0x14
c0014905:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014909:	53                   	push   ebx
c001490a:	e8 ff 9f 00 00       	call   c001e90e <Vm::x87Handler(regs*)>
c001490f:	83 c4 10             	add    esp,0x10
c0014912:	84 c0                	test   al,al
c0014914:	74 05                	je     c001491b <x87EmulHandler(regs*, void*)+0x1a>
c0014916:	83 c4 08             	add    esp,0x8
c0014919:	5b                   	pop    ebx
c001491a:	c3                   	ret    
c001491b:	83 ec 0c             	sub    esp,0xc
c001491e:	68 00 97 02 c0       	push   0xc0029700
c0014923:	e8 a9 dd ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014928:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001492b:	e8 cc fb ff ff       	call   c00144fc <displayDebugInfo(regs*)>

c0014930 <gpFault(regs*, void*)>:
c0014930:	53                   	push   ebx
c0014931:	83 ec 14             	sub    esp,0x14
c0014934:	c7 05 30 ca 02 c0 8b dc 01 c0 	mov    DWORD PTR ds:0xc002ca30,0xc001dc8b
c001493e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014942:	53                   	push   ebx
c0014943:	e8 43 93 00 00       	call   c001dc8b <Vm::faultHandler(regs*)>
c0014948:	83 c4 10             	add    esp,0x10
c001494b:	84 c0                	test   al,al
c001494d:	74 05                	je     c0014954 <gpFault(regs*, void*)+0x24>
c001494f:	83 c4 08             	add    esp,0x8
c0014952:	5b                   	pop    ebx
c0014953:	c3                   	ret    
c0014954:	83 ec 0c             	sub    esp,0xc
c0014957:	68 16 97 02 c0       	push   0xc0029716
c001495c:	e8 70 dd ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014961:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014964:	e8 93 fb ff ff       	call   c00144fc <displayDebugInfo(regs*)>

c0014969 <pgFault(regs*, void*)>:
c0014969:	83 ec 18             	sub    esp,0x18
c001496c:	68 31 97 02 c0       	push   0xc0029731
c0014971:	e8 5b dd ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014976:	58                   	pop    eax
c0014977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001497b:	e8 7c fb ff ff       	call   c00144fc <displayDebugInfo(regs*)>

c0014980 <otherISRHandler(regs*, void*)>:
c0014980:	53                   	push   ebx
c0014981:	83 ec 0c             	sub    esp,0xc
c0014984:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014988:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001498b:	50                   	push   eax
c001498c:	50                   	push   eax
c001498d:	68 3e 97 02 c0       	push   0xc002973e
c0014992:	e8 3a dd ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014997:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001499a:	e8 5d fb ff ff       	call   c00144fc <displayDebugInfo(regs*)>

c001499f <opcodeFault(regs*, void*)>:
c001499f:	55                   	push   ebp
c00149a0:	89 e5                	mov    ebp,esp
c00149a2:	56                   	push   esi
c00149a3:	53                   	push   ebx
c00149a4:	83 ec 40             	sub    esp,0x40
c00149a7:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00149ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00149b2:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00149b8:	84 c0                	test   al,al
c00149ba:	74 24                	je     c00149e0 <opcodeFault(regs*, void*)+0x41>
c00149bc:	83 ec 0c             	sub    esp,0xc
c00149bf:	68 5c 97 02 c0       	push   0xc002975c
c00149c4:	e8 08 dd ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00149c9:	83 c4 10             	add    esp,0x10
c00149cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149d2:	8d 50 19             	lea    edx,[eax+0x19]
c00149d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149db:	e9 77 05 00 00       	jmp    c0014f57 <opcodeFault(regs*, void*)+0x5b8>
c00149e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149e6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149e9:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00149ed:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00149f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149f7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00149fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149fd:	8a 00                	mov    al,BYTE PTR [eax]
c00149ff:	3c f0                	cmp    al,0xf0
c0014a01:	75 17                	jne    c0014a1a <opcodeFault(regs*, void*)+0x7b>
c0014a03:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a09:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a0c:	8d 50 01             	lea    edx,[eax+0x1]
c0014a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a12:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a15:	e9 da 00 00 00       	jmp    c0014af4 <opcodeFault(regs*, void*)+0x155>
c0014a1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a1d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a1f:	3c f2                	cmp    al,0xf2
c0014a21:	74 09                	je     c0014a2c <opcodeFault(regs*, void*)+0x8d>
c0014a23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a26:	8a 00                	mov    al,BYTE PTR [eax]
c0014a28:	3c f3                	cmp    al,0xf3
c0014a2a:	75 1b                	jne    c0014a47 <opcodeFault(regs*, void*)+0xa8>
c0014a2c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a30:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a39:	8d 50 01             	lea    edx,[eax+0x1]
c0014a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a42:	e9 ad 00 00 00       	jmp    c0014af4 <opcodeFault(regs*, void*)+0x155>
c0014a47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a4a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a4c:	3c 66                	cmp    al,0x66
c0014a4e:	75 1f                	jne    c0014a6f <opcodeFault(regs*, void*)+0xd0>
c0014a50:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a54:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014a58:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a61:	8d 50 01             	lea    edx,[eax+0x1]
c0014a64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a67:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a6a:	e9 85 00 00 00       	jmp    c0014af4 <opcodeFault(regs*, void*)+0x155>
c0014a6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a72:	8a 00                	mov    al,BYTE PTR [eax]
c0014a74:	3c 67                	cmp    al,0x67
c0014a76:	75 18                	jne    c0014a90 <opcodeFault(regs*, void*)+0xf1>
c0014a78:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a7c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a82:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a85:	8d 50 01             	lea    edx,[eax+0x1]
c0014a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a8e:	eb 64                	jmp    c0014af4 <opcodeFault(regs*, void*)+0x155>
c0014a90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a93:	8a 00                	mov    al,BYTE PTR [eax]
c0014a95:	3c 2e                	cmp    al,0x2e
c0014a97:	74 09                	je     c0014aa2 <opcodeFault(regs*, void*)+0x103>
c0014a99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a9c:	8a 00                	mov    al,BYTE PTR [eax]
c0014a9e:	3c 3e                	cmp    al,0x3e
c0014aa0:	75 18                	jne    c0014aba <opcodeFault(regs*, void*)+0x11b>
c0014aa2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014aa6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aaf:	8d 50 01             	lea    edx,[eax+0x1]
c0014ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ab8:	eb 3a                	jmp    c0014af4 <opcodeFault(regs*, void*)+0x155>
c0014aba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014abd:	8a 00                	mov    al,BYTE PTR [eax]
c0014abf:	3c 36                	cmp    al,0x36
c0014ac1:	74 1b                	je     c0014ade <opcodeFault(regs*, void*)+0x13f>
c0014ac3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac8:	3c 26                	cmp    al,0x26
c0014aca:	74 12                	je     c0014ade <opcodeFault(regs*, void*)+0x13f>
c0014acc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014acf:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad1:	3c 64                	cmp    al,0x64
c0014ad3:	74 09                	je     c0014ade <opcodeFault(regs*, void*)+0x13f>
c0014ad5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad8:	8a 00                	mov    al,BYTE PTR [eax]
c0014ada:	3c 65                	cmp    al,0x65
c0014adc:	75 16                	jne    c0014af4 <opcodeFault(regs*, void*)+0x155>
c0014ade:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ae2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aeb:	8d 50 01             	lea    edx,[eax+0x1]
c0014aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014af4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014af7:	8a 00                	mov    al,BYTE PTR [eax]
c0014af9:	3c 0f                	cmp    al,0xf
c0014afb:	0f 85 ad 00 00 00    	jne    c0014bae <opcodeFault(regs*, void*)+0x20f>
c0014b01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b04:	40                   	inc    eax
c0014b05:	8a 00                	mov    al,BYTE PTR [eax]
c0014b07:	3c c2                	cmp    al,0xc2
c0014b09:	74 0e                	je     c0014b19 <opcodeFault(regs*, void*)+0x17a>
c0014b0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b0e:	40                   	inc    eax
c0014b0f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b11:	3c c3                	cmp    al,0xc3
c0014b13:	0f 85 95 00 00 00    	jne    c0014bae <opcodeFault(regs*, void*)+0x20f>
c0014b19:	83 ec 0c             	sub    esp,0xc
c0014b1c:	68 7f 97 02 c0       	push   0xc002977f
c0014b21:	e8 ab db ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014b26:	83 c4 10             	add    esp,0x10
c0014b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b2f:	8d 50 01             	lea    edx,[eax+0x1]
c0014b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b35:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b38:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b40:	8d 50 fe             	lea    edx,[eax-0x2]
c0014b43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b46:	88 10                	mov    BYTE PTR [eax],dl
c0014b48:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014b4b:	50                   	push   eax
c0014b4c:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014b4f:	50                   	push   eax
c0014b50:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014b53:	50                   	push   eax
c0014b54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b57:	e8 c0 44 00 00       	call   c001901c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014b5c:	83 c4 10             	add    esp,0x10
c0014b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b65:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b68:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b6b:	01 d0                	add    eax,edx
c0014b6d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b73:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b76:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b79:	48                   	dec    eax
c0014b7a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b80:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b83:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b89:	83 ec 04             	sub    esp,0x4
c0014b8c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b8f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b92:	50                   	push   eax
c0014b93:	e8 d1 b5 fe ff       	call   c0000169 <voodooXADD>
c0014b98:	83 c4 10             	add    esp,0x10
c0014b9b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b9e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ba1:	01 c2                	add    edx,eax
c0014ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ba9:	e9 a9 03 00 00       	jmp    c0014f57 <opcodeFault(regs*, void*)+0x5b8>
c0014bae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb1:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb3:	3c 0f                	cmp    al,0xf
c0014bb5:	0f 85 8b 01 00 00    	jne    c0014d46 <opcodeFault(regs*, void*)+0x3a7>
c0014bbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbe:	40                   	inc    eax
c0014bbf:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc1:	3c c7                	cmp    al,0xc7
c0014bc3:	0f 86 7d 01 00 00    	jbe    c0014d46 <opcodeFault(regs*, void*)+0x3a7>
c0014bc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bcc:	40                   	inc    eax
c0014bcd:	8a 00                	mov    al,BYTE PTR [eax]
c0014bcf:	3c cf                	cmp    al,0xcf
c0014bd1:	0f 87 6f 01 00 00    	ja     c0014d46 <opcodeFault(regs*, void*)+0x3a7>
c0014bd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bda:	40                   	inc    eax
c0014bdb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdd:	83 c0 38             	add    eax,0x38
c0014be0:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014be3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014be7:	75 0b                	jne    c0014bf4 <opcodeFault(regs*, void*)+0x255>
c0014be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bec:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014bef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bf2:	eb 75                	jmp    c0014c69 <opcodeFault(regs*, void*)+0x2ca>
c0014bf4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014bf8:	75 0b                	jne    c0014c05 <opcodeFault(regs*, void*)+0x266>
c0014bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014c00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c03:	eb 64                	jmp    c0014c69 <opcodeFault(regs*, void*)+0x2ca>
c0014c05:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c09:	75 0b                	jne    c0014c16 <opcodeFault(regs*, void*)+0x277>
c0014c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014c11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c14:	eb 53                	jmp    c0014c69 <opcodeFault(regs*, void*)+0x2ca>
c0014c16:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c1a:	75 0b                	jne    c0014c27 <opcodeFault(regs*, void*)+0x288>
c0014c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014c22:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c25:	eb 42                	jmp    c0014c69 <opcodeFault(regs*, void*)+0x2ca>
c0014c27:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c2b:	75 0b                	jne    c0014c38 <opcodeFault(regs*, void*)+0x299>
c0014c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c30:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014c33:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c36:	eb 31                	jmp    c0014c69 <opcodeFault(regs*, void*)+0x2ca>
c0014c38:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c3c:	75 0b                	jne    c0014c49 <opcodeFault(regs*, void*)+0x2aa>
c0014c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c41:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014c44:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c47:	eb 20                	jmp    c0014c69 <opcodeFault(regs*, void*)+0x2ca>
c0014c49:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c4d:	75 0b                	jne    c0014c5a <opcodeFault(regs*, void*)+0x2bb>
c0014c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c52:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c55:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c58:	eb 0f                	jmp    c0014c69 <opcodeFault(regs*, void*)+0x2ca>
c0014c5a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c5e:	75 09                	jne    c0014c69 <opcodeFault(regs*, void*)+0x2ca>
c0014c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c63:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c66:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c69:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c6d:	74 10                	je     c0014c7f <opcodeFault(regs*, void*)+0x2e0>
c0014c6f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c76:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c7d:	eb 2d                	jmp    c0014cac <opcodeFault(regs*, void*)+0x30d>
c0014c7f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c82:	c1 e0 18             	shl    eax,0x18
c0014c85:	89 c2                	mov    edx,eax
c0014c87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c8a:	c1 e0 08             	shl    eax,0x8
c0014c8d:	25 00 00 ff 00       	and    eax,0xff0000
c0014c92:	09 c2                	or     edx,eax
c0014c94:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c97:	c1 e8 08             	shr    eax,0x8
c0014c9a:	25 00 ff 00 00       	and    eax,0xff00
c0014c9f:	09 c2                	or     edx,eax
c0014ca1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ca4:	c1 e8 18             	shr    eax,0x18
c0014ca7:	09 d0                	or     eax,edx
c0014ca9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cac:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014cb0:	75 0b                	jne    c0014cbd <opcodeFault(regs*, void*)+0x31e>
c0014cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cb8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014cbb:	eb 75                	jmp    c0014d32 <opcodeFault(regs*, void*)+0x393>
c0014cbd:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014cc1:	75 0b                	jne    c0014cce <opcodeFault(regs*, void*)+0x32f>
c0014cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cc9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014ccc:	eb 64                	jmp    c0014d32 <opcodeFault(regs*, void*)+0x393>
c0014cce:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014cd2:	75 0b                	jne    c0014cdf <opcodeFault(regs*, void*)+0x340>
c0014cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cda:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014cdd:	eb 53                	jmp    c0014d32 <opcodeFault(regs*, void*)+0x393>
c0014cdf:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ce3:	75 0b                	jne    c0014cf0 <opcodeFault(regs*, void*)+0x351>
c0014ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ceb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014cee:	eb 42                	jmp    c0014d32 <opcodeFault(regs*, void*)+0x393>
c0014cf0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cf4:	75 0b                	jne    c0014d01 <opcodeFault(regs*, void*)+0x362>
c0014cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cfc:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014cff:	eb 31                	jmp    c0014d32 <opcodeFault(regs*, void*)+0x393>
c0014d01:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d05:	75 0b                	jne    c0014d12 <opcodeFault(regs*, void*)+0x373>
c0014d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d0d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d10:	eb 20                	jmp    c0014d32 <opcodeFault(regs*, void*)+0x393>
c0014d12:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d16:	75 0b                	jne    c0014d23 <opcodeFault(regs*, void*)+0x384>
c0014d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d1e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014d21:	eb 0f                	jmp    c0014d32 <opcodeFault(regs*, void*)+0x393>
c0014d23:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d27:	75 09                	jne    c0014d32 <opcodeFault(regs*, void*)+0x393>
c0014d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d2f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d38:	8d 50 02             	lea    edx,[eax+0x2]
c0014d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d41:	e9 11 02 00 00       	jmp    c0014f57 <opcodeFault(regs*, void*)+0x5b8>
c0014d46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d49:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4b:	3c 0f                	cmp    al,0xf
c0014d4d:	0f 85 76 01 00 00    	jne    c0014ec9 <opcodeFault(regs*, void*)+0x52a>
c0014d53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d56:	40                   	inc    eax
c0014d57:	8a 00                	mov    al,BYTE PTR [eax]
c0014d59:	3c c7                	cmp    al,0xc7
c0014d5b:	0f 85 68 01 00 00    	jne    c0014ec9 <opcodeFault(regs*, void*)+0x52a>
c0014d61:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d67:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d6a:	8d 50 01             	lea    edx,[eax+0x1]
c0014d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d70:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d73:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d76:	50                   	push   eax
c0014d77:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d7a:	50                   	push   eax
c0014d7b:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d7e:	50                   	push   eax
c0014d7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d82:	e8 95 42 00 00       	call   c001901c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d87:	83 c4 10             	add    esp,0x10
c0014d8a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d8d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d90:	83 f0 01             	xor    eax,0x1
c0014d93:	84 c0                	test   al,al
c0014d95:	0f 84 2e 01 00 00    	je     c0014ec9 <opcodeFault(regs*, void*)+0x52a>
c0014d9b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d9e:	3c 01                	cmp    al,0x1
c0014da0:	0f 85 23 01 00 00    	jne    c0014ec9 <opcodeFault(regs*, void*)+0x52a>
c0014da6:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014da9:	83 f0 01             	xor    eax,0x1
c0014dac:	84 c0                	test   al,al
c0014dae:	0f 84 15 01 00 00    	je     c0014ec9 <opcodeFault(regs*, void*)+0x52a>
c0014db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014dba:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014dbd:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014dc4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014dc7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014dca:	89 c2                	mov    edx,eax
c0014dcc:	b8 00 00 00 00       	mov    eax,0x0
c0014dd1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014dd4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dda:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ddd:	ba 00 00 00 00       	mov    edx,0x0
c0014de2:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014de5:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014de8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014deb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014dee:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014df1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014df8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014dfb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dfe:	89 c2                	mov    edx,eax
c0014e00:	b8 00 00 00 00       	mov    eax,0x0
c0014e05:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e08:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014e0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e11:	ba 00 00 00 00       	mov    edx,0x0
c0014e16:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014e19:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014e1c:	e8 59 7e 00 00       	call   c001cc7a <lockScheduler()>
c0014e21:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e29:	89 c1                	mov    ecx,eax
c0014e2b:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014e2e:	89 cb                	mov    ebx,ecx
c0014e30:	89 d0                	mov    eax,edx
c0014e32:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014e35:	89 c6                	mov    esi,eax
c0014e37:	89 f0                	mov    eax,esi
c0014e39:	09 d8                	or     eax,ebx
c0014e3b:	85 c0                	test   eax,eax
c0014e3d:	75 21                	jne    c0014e60 <opcodeFault(regs*, void*)+0x4c1>
c0014e3f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014e42:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e45:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e48:	89 01                	mov    DWORD PTR [ecx],eax
c0014e4a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e50:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e53:	83 c8 40             	or     eax,0x40
c0014e56:	89 c2                	mov    edx,eax
c0014e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e5e:	eb 3e                	jmp    c0014e9e <opcodeFault(regs*, void*)+0x4ff>
c0014e60:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e63:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e66:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e68:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e6b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e6e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e77:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e7a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e7d:	89 d0                	mov    eax,edx
c0014e7f:	31 d2                	xor    edx,edx
c0014e81:	89 c3                	mov    ebx,eax
c0014e83:	89 d6                	mov    esi,edx
c0014e85:	89 da                	mov    edx,ebx
c0014e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e90:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e93:	83 e0 bf             	and    eax,0xffffffbf
c0014e96:	89 c2                	mov    edx,eax
c0014e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e9e:	e8 d9 7d 00 00       	call   c001cc7c <unlockScheduler()>
c0014ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ea9:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014eac:	01 c2                	add    edx,eax
c0014eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eb4:	83 ec 0c             	sub    esp,0xc
c0014eb7:	68 8e 97 02 c0       	push   0xc002978e
c0014ebc:	e8 10 d8 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	e9 8e 00 00 00       	jmp    c0014f57 <opcodeFault(regs*, void*)+0x5b8>
c0014ec9:	83 ec 0c             	sub    esp,0xc
c0014ecc:	68 a1 97 02 c0       	push   0xc00297a1
c0014ed1:	e8 fb d7 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014ed6:	83 c4 10             	add    esp,0x10
c0014ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ee5:	c1 e0 04             	shl    eax,0x4
c0014ee8:	01 d0                	add    eax,edx
c0014eea:	83 c0 03             	add    eax,0x3
c0014eed:	8a 00                	mov    al,BYTE PTR [eax]
c0014eef:	0f b6 d8             	movzx  ebx,al
c0014ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014efe:	c1 e0 04             	shl    eax,0x4
c0014f01:	01 d0                	add    eax,edx
c0014f03:	83 c0 02             	add    eax,0x2
c0014f06:	8a 00                	mov    al,BYTE PTR [eax]
c0014f08:	0f b6 c8             	movzx  ecx,al
c0014f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f17:	c1 e0 04             	shl    eax,0x4
c0014f1a:	01 d0                	add    eax,edx
c0014f1c:	40                   	inc    eax
c0014f1d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f1f:	0f b6 d0             	movzx  edx,al
c0014f22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f25:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f2e:	c1 e0 04             	shl    eax,0x4
c0014f31:	01 f0                	add    eax,esi
c0014f33:	8a 00                	mov    al,BYTE PTR [eax]
c0014f35:	0f b6 c0             	movzx  eax,al
c0014f38:	83 ec 0c             	sub    esp,0xc
c0014f3b:	53                   	push   ebx
c0014f3c:	51                   	push   ecx
c0014f3d:	52                   	push   edx
c0014f3e:	50                   	push   eax
c0014f3f:	68 b4 97 02 c0       	push   0xc00297b4
c0014f44:	e8 88 d7 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0014f49:	83 c4 20             	add    esp,0x20
c0014f4c:	83 ec 0c             	sub    esp,0xc
c0014f4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f52:	e8 a5 f5 ff ff       	call   c00144fc <displayDebugInfo(regs*)>
c0014f57:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f5a:	5b                   	pop    ebx
c0014f5b:	5e                   	pop    esi
c0014f5c:	5d                   	pop    ebp
c0014f5d:	c3                   	ret    

c0014f5e <displayProgramFault(char const*)>:
c0014f5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f63:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f66:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f6c:	85 c0                	test   eax,eax
c0014f6e:	74 15                	je     c0014f85 <displayProgramFault(char const*)+0x27>
c0014f70:	83 ec 0c             	sub    esp,0xc
c0014f73:	6a 04                	push   0x4
c0014f75:	6a 0f                	push   0xf
c0014f77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f7b:	50                   	push   eax
c0014f7c:	e8 d1 b9 ff ff       	call   c0010952 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014f81:	83 c4 1c             	add    esp,0x1c
c0014f84:	c3                   	ret    
c0014f85:	c3                   	ret    

c0014f86 <setupInterruptController()>:
c0014f86:	55                   	push   ebp
c0014f87:	89 e5                	mov    ebp,esp
c0014f89:	53                   	push   ebx
c0014f8a:	83 ec 24             	sub    esp,0x24
c0014f8d:	b8 00 00 00 00       	mov    eax,0x0
c0014f92:	85 c0                	test   eax,eax
c0014f94:	0f 95 c0             	setne  al
c0014f97:	84 c0                	test   al,al
c0014f99:	74 5b                	je     c0014ff6 <setupInterruptController()+0x70>
c0014f9b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014fa2:	83 ec 0c             	sub    esp,0xc
c0014fa5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014fa8:	e8 27 a5 ff ff       	call   c000f4d4 <malloc>
c0014fad:	83 c4 10             	add    esp,0x10
c0014fb0:	89 c3                	mov    ebx,eax
c0014fb2:	83 ec 0c             	sub    esp,0xc
c0014fb5:	53                   	push   ebx
c0014fb6:	e8 c3 f2 00 00       	call   c002427e <APIC::APIC()>
c0014fbb:	83 c4 10             	add    esp,0x10
c0014fbe:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014fc1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014fc4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fc9:	83 c0 08             	add    eax,0x8
c0014fcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fce:	6a 00                	push   0x0
c0014fd0:	6a 00                	push   0x0
c0014fd2:	6a 00                	push   0x0
c0014fd4:	52                   	push   edx
c0014fd5:	ff d0                	call   eax
c0014fd7:	83 c4 10             	add    esp,0x10
c0014fda:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0014fdf:	83 ec 08             	sub    esp,0x8
c0014fe2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fe5:	50                   	push   eax
c0014fe6:	e8 d5 ea ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014ff1:	e9 52 03 00 00       	jmp    c0015348 <setupInterruptController()+0x3c2>
c0014ff6:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0014ffb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015001:	83 e0 01             	and    eax,0x1
c0015004:	84 c0                	test   al,al
c0015006:	0f 95 c0             	setne  al
c0015009:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001500c:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015013:	83 ec 0c             	sub    esp,0xc
c0015016:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015019:	e8 b6 a4 ff ff       	call   c000f4d4 <malloc>
c001501e:	83 c4 10             	add    esp,0x10
c0015021:	89 c3                	mov    ebx,eax
c0015023:	83 ec 0c             	sub    esp,0xc
c0015026:	53                   	push   ebx
c0015027:	e8 aa f7 00 00       	call   c00247d6 <PIC::PIC()>
c001502c:	83 c4 10             	add    esp,0x10
c001502f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015032:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015035:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015038:	8b 00                	mov    eax,DWORD PTR [eax]
c001503a:	83 c0 08             	add    eax,0x8
c001503d:	8b 00                	mov    eax,DWORD PTR [eax]
c001503f:	6a 00                	push   0x0
c0015041:	6a 00                	push   0x0
c0015043:	6a 00                	push   0x0
c0015045:	52                   	push   edx
c0015046:	ff d0                	call   eax
c0015048:	83 c4 10             	add    esp,0x10
c001504b:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001504f:	74 73                	je     c00150c4 <setupInterruptController()+0x13e>
c0015051:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015054:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015057:	8b 00                	mov    eax,DWORD PTR [eax]
c0015059:	83 c0 0c             	add    eax,0xc
c001505c:	8b 00                	mov    eax,DWORD PTR [eax]
c001505e:	6a 00                	push   0x0
c0015060:	6a 00                	push   0x0
c0015062:	6a 00                	push   0x0
c0015064:	52                   	push   edx
c0015065:	ff d0                	call   eax
c0015067:	83 c4 10             	add    esp,0x10
c001506a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001506e:	74 15                	je     c0015085 <setupInterruptController()+0xff>
c0015070:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015073:	8b 00                	mov    eax,DWORD PTR [eax]
c0015075:	83 c0 04             	add    eax,0x4
c0015078:	8b 00                	mov    eax,DWORD PTR [eax]
c001507a:	83 ec 0c             	sub    esp,0xc
c001507d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015080:	ff d0                	call   eax
c0015082:	83 c4 10             	add    esp,0x10
c0015085:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001508c:	83 ec 0c             	sub    esp,0xc
c001508f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015092:	e8 3d a4 ff ff       	call   c000f4d4 <malloc>
c0015097:	83 c4 10             	add    esp,0x10
c001509a:	89 c3                	mov    ebx,eax
c001509c:	83 ec 0c             	sub    esp,0xc
c001509f:	53                   	push   ebx
c00150a0:	e8 d9 f1 00 00       	call   c002427e <APIC::APIC()>
c00150a5:	83 c4 10             	add    esp,0x10
c00150a8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150ab:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b3:	83 c0 08             	add    eax,0x8
c00150b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b8:	6a 00                	push   0x0
c00150ba:	6a 00                	push   0x0
c00150bc:	6a 00                	push   0x0
c00150be:	52                   	push   edx
c00150bf:	ff d0                	call   eax
c00150c1:	83 c4 10             	add    esp,0x10
c00150c4:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00150c9:	83 ec 08             	sub    esp,0x8
c00150cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150cf:	50                   	push   eax
c00150d0:	e8 eb e9 ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c00150d5:	83 c4 10             	add    esp,0x10
c00150d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150db:	8b 00                	mov    eax,DWORD PTR [eax]
c00150dd:	83 c0 24             	add    eax,0x24
c00150e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e2:	6a 00                	push   0x0
c00150e4:	68 80 49 01 c0       	push   0xc0014980
c00150e9:	6a 00                	push   0x0
c00150eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150ee:	ff d0                	call   eax
c00150f0:	83 c4 10             	add    esp,0x10
c00150f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f8:	83 c0 24             	add    eax,0x24
c00150fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fd:	6a 00                	push   0x0
c00150ff:	68 80 49 01 c0       	push   0xc0014980
c0015104:	6a 01                	push   0x1
c0015106:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015109:	ff d0                	call   eax
c001510b:	83 c4 10             	add    esp,0x10
c001510e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015111:	8b 00                	mov    eax,DWORD PTR [eax]
c0015113:	83 c0 24             	add    eax,0x24
c0015116:	8b 00                	mov    eax,DWORD PTR [eax]
c0015118:	6a 00                	push   0x0
c001511a:	68 59 43 01 c0       	push   0xc0014359
c001511f:	6a 02                	push   0x2
c0015121:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015124:	ff d0                	call   eax
c0015126:	83 c4 10             	add    esp,0x10
c0015129:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001512c:	8b 00                	mov    eax,DWORD PTR [eax]
c001512e:	83 c0 24             	add    eax,0x24
c0015131:	8b 00                	mov    eax,DWORD PTR [eax]
c0015133:	6a 00                	push   0x0
c0015135:	68 80 49 01 c0       	push   0xc0014980
c001513a:	6a 03                	push   0x3
c001513c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001513f:	ff d0                	call   eax
c0015141:	83 c4 10             	add    esp,0x10
c0015144:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015147:	8b 00                	mov    eax,DWORD PTR [eax]
c0015149:	83 c0 24             	add    eax,0x24
c001514c:	8b 00                	mov    eax,DWORD PTR [eax]
c001514e:	6a 00                	push   0x0
c0015150:	68 80 49 01 c0       	push   0xc0014980
c0015155:	6a 04                	push   0x4
c0015157:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001515a:	ff d0                	call   eax
c001515c:	83 c4 10             	add    esp,0x10
c001515f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015162:	8b 00                	mov    eax,DWORD PTR [eax]
c0015164:	83 c0 24             	add    eax,0x24
c0015167:	8b 00                	mov    eax,DWORD PTR [eax]
c0015169:	6a 00                	push   0x0
c001516b:	68 80 49 01 c0       	push   0xc0014980
c0015170:	6a 05                	push   0x5
c0015172:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015175:	ff d0                	call   eax
c0015177:	83 c4 10             	add    esp,0x10
c001517a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001517d:	8b 00                	mov    eax,DWORD PTR [eax]
c001517f:	83 c0 24             	add    eax,0x24
c0015182:	8b 00                	mov    eax,DWORD PTR [eax]
c0015184:	6a 00                	push   0x0
c0015186:	68 9f 49 01 c0       	push   0xc001499f
c001518b:	6a 06                	push   0x6
c001518d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015190:	ff d0                	call   eax
c0015192:	83 c4 10             	add    esp,0x10
c0015195:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015198:	8b 00                	mov    eax,DWORD PTR [eax]
c001519a:	83 c0 24             	add    eax,0x24
c001519d:	8b 00                	mov    eax,DWORD PTR [eax]
c001519f:	6a 00                	push   0x0
c00151a1:	68 01 49 01 c0       	push   0xc0014901
c00151a6:	6a 07                	push   0x7
c00151a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ab:	ff d0                	call   eax
c00151ad:	83 c4 10             	add    esp,0x10
c00151b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b5:	83 c0 24             	add    eax,0x24
c00151b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ba:	6a 00                	push   0x0
c00151bc:	68 74 41 01 c0       	push   0xc0014174
c00151c1:	6a 08                	push   0x8
c00151c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151c6:	ff d0                	call   eax
c00151c8:	83 c4 10             	add    esp,0x10
c00151cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d0:	83 c0 24             	add    eax,0x24
c00151d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d5:	6a 00                	push   0x0
c00151d7:	68 80 49 01 c0       	push   0xc0014980
c00151dc:	6a 09                	push   0x9
c00151de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e1:	ff d0                	call   eax
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151eb:	83 c0 24             	add    eax,0x24
c00151ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f0:	6a 00                	push   0x0
c00151f2:	68 80 49 01 c0       	push   0xc0014980
c00151f7:	6a 0a                	push   0xa
c00151f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151fc:	ff d0                	call   eax
c00151fe:	83 c4 10             	add    esp,0x10
c0015201:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015204:	8b 00                	mov    eax,DWORD PTR [eax]
c0015206:	83 c0 24             	add    eax,0x24
c0015209:	8b 00                	mov    eax,DWORD PTR [eax]
c001520b:	6a 00                	push   0x0
c001520d:	68 80 49 01 c0       	push   0xc0014980
c0015212:	6a 0b                	push   0xb
c0015214:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015217:	ff d0                	call   eax
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015221:	83 c0 24             	add    eax,0x24
c0015224:	8b 00                	mov    eax,DWORD PTR [eax]
c0015226:	6a 00                	push   0x0
c0015228:	68 80 49 01 c0       	push   0xc0014980
c001522d:	6a 0c                	push   0xc
c001522f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015232:	ff d0                	call   eax
c0015234:	83 c4 10             	add    esp,0x10
c0015237:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523a:	8b 00                	mov    eax,DWORD PTR [eax]
c001523c:	83 c0 24             	add    eax,0x24
c001523f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015241:	6a 00                	push   0x0
c0015243:	68 30 49 01 c0       	push   0xc0014930
c0015248:	6a 0d                	push   0xd
c001524a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001524d:	ff d0                	call   eax
c001524f:	83 c4 10             	add    esp,0x10
c0015252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015255:	8b 00                	mov    eax,DWORD PTR [eax]
c0015257:	83 c0 24             	add    eax,0x24
c001525a:	8b 00                	mov    eax,DWORD PTR [eax]
c001525c:	6a 00                	push   0x0
c001525e:	68 69 49 01 c0       	push   0xc0014969
c0015263:	6a 0e                	push   0xe
c0015265:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015268:	ff d0                	call   eax
c001526a:	83 c4 10             	add    esp,0x10
c001526d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015270:	8b 00                	mov    eax,DWORD PTR [eax]
c0015272:	83 c0 24             	add    eax,0x24
c0015275:	8b 00                	mov    eax,DWORD PTR [eax]
c0015277:	6a 00                	push   0x0
c0015279:	68 80 49 01 c0       	push   0xc0014980
c001527e:	6a 0f                	push   0xf
c0015280:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015283:	ff d0                	call   eax
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001528b:	8b 00                	mov    eax,DWORD PTR [eax]
c001528d:	83 c0 24             	add    eax,0x24
c0015290:	8b 00                	mov    eax,DWORD PTR [eax]
c0015292:	6a 00                	push   0x0
c0015294:	68 80 49 01 c0       	push   0xc0014980
c0015299:	6a 10                	push   0x10
c001529b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001529e:	ff d0                	call   eax
c00152a0:	83 c4 10             	add    esp,0x10
c00152a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a8:	83 c0 24             	add    eax,0x24
c00152ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ad:	6a 00                	push   0x0
c00152af:	68 80 49 01 c0       	push   0xc0014980
c00152b4:	6a 11                	push   0x11
c00152b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b9:	ff d0                	call   eax
c00152bb:	83 c4 10             	add    esp,0x10
c00152be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c3:	83 c0 24             	add    eax,0x24
c00152c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c8:	6a 00                	push   0x0
c00152ca:	68 80 49 01 c0       	push   0xc0014980
c00152cf:	6a 12                	push   0x12
c00152d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d4:	ff d0                	call   eax
c00152d6:	83 c4 10             	add    esp,0x10
c00152d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152de:	83 c0 24             	add    eax,0x24
c00152e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e3:	6a 00                	push   0x0
c00152e5:	68 80 49 01 c0       	push   0xc0014980
c00152ea:	6a 13                	push   0x13
c00152ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ef:	ff d0                	call   eax
c00152f1:	83 c4 10             	add    esp,0x10
c00152f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f9:	83 c0 24             	add    eax,0x24
c00152fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fe:	6a 00                	push   0x0
c0015300:	68 80 49 01 c0       	push   0xc0014980
c0015305:	6a 14                	push   0x14
c0015307:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001530a:	ff d0                	call   eax
c001530c:	83 c4 10             	add    esp,0x10
c001530f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015312:	8b 00                	mov    eax,DWORD PTR [eax]
c0015314:	83 c0 24             	add    eax,0x24
c0015317:	8b 00                	mov    eax,DWORD PTR [eax]
c0015319:	6a 00                	push   0x0
c001531b:	68 80 49 01 c0       	push   0xc0014980
c0015320:	6a 1e                	push   0x1e
c0015322:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015325:	ff d0                	call   eax
c0015327:	83 c4 10             	add    esp,0x10
c001532a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532d:	8b 00                	mov    eax,DWORD PTR [eax]
c001532f:	83 c0 24             	add    eax,0x24
c0015332:	8b 00                	mov    eax,DWORD PTR [eax]
c0015334:	6a 00                	push   0x0
c0015336:	68 0f b6 01 c0       	push   0xc001b60f
c001533b:	6a 60                	push   0x60
c001533d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015340:	ff d0                	call   eax
c0015342:	83 c4 10             	add    esp,0x10
c0015345:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015348:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001534b:	c9                   	leave  
c001534c:	c3                   	ret    
c001534d:	90                   	nop

c001534e <InterruptController::convertLegacyIRQNumber(int)>:
c001534e:	55                   	push   ebp
c001534f:	89 e5                	mov    ebp,esp
c0015351:	83 ec 08             	sub    esp,0x8
c0015354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015357:	83 ec 0c             	sub    esp,0xc
c001535a:	50                   	push   eax
c001535b:	e8 4c ea ff ff       	call   c0013dac <Device::getName()>
c0015360:	83 c4 10             	add    esp,0x10
c0015363:	8a 00                	mov    al,BYTE PTR [eax]
c0015365:	3c 41                	cmp    al,0x41
c0015367:	0f 94 c0             	sete   al
c001536a:	84 c0                	test   al,al
c001536c:	74 28                	je     c0015396 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001536e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015372:	7f 12                	jg     c0015386 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015374:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015377:	05 00 bb 02 c0       	add    eax,0xc002bb00
c001537c:	8a 00                	mov    al,BYTE PTR [eax]
c001537e:	0f b6 c0             	movzx  eax,al
c0015381:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015384:	eb 10                	jmp    c0015396 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015386:	83 ec 0c             	sub    esp,0xc
c0015389:	68 34 95 02 c0       	push   0xc0029534
c001538e:	e8 58 44 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0015393:	83 c4 10             	add    esp,0x10
c0015396:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015399:	c9                   	leave  
c001539a:	c3                   	ret    
c001539b:	90                   	nop

c001539c <startGUI(void*)>:
c001539c:	55                   	push   ebp
c001539d:	89 e5                	mov    ebp,esp
c001539f:	53                   	push   ebx
c00153a0:	83 ec 04             	sub    esp,0x4
c00153a3:	e8 d4 78 00 00       	call   c001cc7c <unlockScheduler()>
c00153a8:	8b 1d a8 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8a8
c00153ae:	83 ec 08             	sub    esp,0x8
c00153b1:	6a 01                	push   0x1
c00153b3:	68 1c 98 02 c0       	push   0xc002981c
c00153b8:	e8 49 72 00 00       	call   c001c606 <Thr::loadDLL(char const*, bool)>
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	83 ec 08             	sub    esp,0x8
c00153c3:	53                   	push   ebx
c00153c4:	50                   	push   eax
c00153c5:	e8 4b 74 00 00       	call   c001c815 <Thr::executeDLL(unsigned long, void*)>
c00153ca:	83 c4 10             	add    esp,0x10
c00153cd:	8b 1d a8 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8a8
c00153d3:	83 ec 08             	sub    esp,0x8
c00153d6:	6a 01                	push   0x1
c00153d8:	68 36 98 02 c0       	push   0xc0029836
c00153dd:	e8 24 72 00 00       	call   c001c606 <Thr::loadDLL(char const*, bool)>
c00153e2:	83 c4 10             	add    esp,0x10
c00153e5:	83 ec 08             	sub    esp,0x8
c00153e8:	53                   	push   ebx
c00153e9:	50                   	push   eax
c00153ea:	e8 26 74 00 00       	call   c001c815 <Thr::executeDLL(unsigned long, void*)>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	90                   	nop
c00153f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153f6:	c9                   	leave  
c00153f7:	c3                   	ret    

c00153f8 <startGUIVESA(void*)>:
c00153f8:	55                   	push   ebp
c00153f9:	89 e5                	mov    ebp,esp
c00153fb:	53                   	push   ebx
c00153fc:	83 ec 04             	sub    esp,0x4
c00153ff:	e8 78 78 00 00       	call   c001cc7c <unlockScheduler()>
c0015404:	8b 1d a8 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8a8
c001540a:	83 ec 08             	sub    esp,0x8
c001540d:	6a 01                	push   0x1
c001540f:	68 50 98 02 c0       	push   0xc0029850
c0015414:	e8 ed 71 00 00       	call   c001c606 <Thr::loadDLL(char const*, bool)>
c0015419:	83 c4 10             	add    esp,0x10
c001541c:	83 ec 08             	sub    esp,0x8
c001541f:	53                   	push   ebx
c0015420:	50                   	push   eax
c0015421:	e8 ef 73 00 00       	call   c001c815 <Thr::executeDLL(unsigned long, void*)>
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	8b 1d a8 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8a8
c001542f:	83 ec 08             	sub    esp,0x8
c0015432:	6a 01                	push   0x1
c0015434:	68 36 98 02 c0       	push   0xc0029836
c0015439:	e8 c8 71 00 00       	call   c001c606 <Thr::loadDLL(char const*, bool)>
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	83 ec 08             	sub    esp,0x8
c0015444:	53                   	push   ebx
c0015445:	50                   	push   eax
c0015446:	e8 ca 73 00 00       	call   c001c815 <Thr::executeDLL(unsigned long, void*)>
c001544b:	83 c4 10             	add    esp,0x10
c001544e:	90                   	nop
c001544f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015452:	c9                   	leave  
c0015453:	c3                   	ret    

c0015454 <sendKeyToTerminal(unsigned char)>:
c0015454:	55                   	push   ebp
c0015455:	89 e5                	mov    ebp,esp
c0015457:	83 ec 28             	sub    esp,0x28
c001545a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015460:	a1 64 c9 02 c0       	mov    eax,ds:0xc002c964
c0015465:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015469:	83 ec 08             	sub    esp,0x8
c001546c:	52                   	push   edx
c001546d:	50                   	push   eax
c001546e:	e8 3d ba ff ff       	call   c0010eb0 <VgaText::receiveKey(unsigned char)>
c0015473:	83 c4 10             	add    esp,0x10
c0015476:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001547a:	75 41                	jne    c00154bd <sendKeyToTerminal(unsigned char)+0x69>
c001547c:	e8 20 78 00 00       	call   c001cca1 <lockStuff()>
c0015481:	a1 40 ca 02 c0       	mov    eax,ds:0xc002ca40
c0015486:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015489:	c7 05 40 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca40,0x0
c0015493:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015497:	74 1f                	je     c00154b8 <sendKeyToTerminal(unsigned char)+0x64>
c0015499:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001549f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154a5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00154a8:	83 ec 0c             	sub    esp,0xc
c00154ab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00154ae:	e8 df 7d 00 00       	call   c001d292 <unblockTask(ThreadControlBlock*)>
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	eb db                	jmp    c0015493 <sendKeyToTerminal(unsigned char)+0x3f>
c00154b8:	e8 7e 7b 00 00       	call   c001d03b <unlockStuff()>
c00154bd:	90                   	nop
c00154be:	c9                   	leave  
c00154bf:	c3                   	ret    

c00154c0 <sendKeyboardToken(KeyboardToken)>:
c00154c0:	55                   	push   ebp
c00154c1:	89 e5                	mov    ebp,esp
c00154c3:	83 ec 18             	sub    esp,0x18
c00154c6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00154c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cc:	0f b7 c0             	movzx  eax,ax
c00154cf:	83 f2 01             	xor    edx,0x1
c00154d2:	88 90 60 ca 02 c0    	mov    BYTE PTR [eax-0x3ffd35a0],dl
c00154d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154db:	66 3d 03 02          	cmp    ax,0x203
c00154df:	75 07                	jne    c00154e8 <sendKeyboardToken(KeyboardToken)+0x28>
c00154e1:	a0 60 cb 02 c0       	mov    al,ds:0xc002cb60
c00154e6:	84 c0                	test   al,al
c00154e8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00154ec:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00154ef:	a0 68 ce 02 c0       	mov    al,ds:0xc002ce68
c00154f4:	38 c2                	cmp    dl,al
c00154f6:	74 1c                	je     c0015514 <sendKeyboardToken(KeyboardToken)+0x54>
c00154f8:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00154fb:	a2 68 ce 02 c0       	mov    ds:0xc002ce68,al
c0015500:	a0 68 ce 02 c0       	mov    al,ds:0xc002ce68
c0015505:	0f b6 c0             	movzx  eax,al
c0015508:	83 ec 0c             	sub    esp,0xc
c001550b:	50                   	push   eax
c001550c:	e8 dd ab ff ff       	call   c00100ee <setTerminalScrollLock(bool)>
c0015511:	83 c4 10             	add    esp,0x10
c0015514:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015517:	84 c0                	test   al,al
c0015519:	0f 84 ae 00 00 00    	je     c00155cd <sendKeyboardToken(KeyboardToken)+0x10d>
c001551f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015522:	66 3d 10 03          	cmp    ax,0x310
c0015526:	75 06                	jne    c001552e <sendKeyboardToken(KeyboardToken)+0x6e>
c0015528:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001552e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015531:	66 3d 11 03          	cmp    ax,0x311
c0015535:	75 06                	jne    c001553d <sendKeyboardToken(KeyboardToken)+0x7d>
c0015537:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001553d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015540:	66 3d 12 03          	cmp    ax,0x312
c0015544:	75 06                	jne    c001554c <sendKeyboardToken(KeyboardToken)+0x8c>
c0015546:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001554c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554f:	66 3d 13 03          	cmp    ax,0x313
c0015553:	75 06                	jne    c001555b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015555:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001555b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555e:	66 3d 14 03          	cmp    ax,0x314
c0015562:	75 06                	jne    c001556a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015564:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001556a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556d:	66 3d 15 03          	cmp    ax,0x315
c0015571:	75 06                	jne    c0015579 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015573:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557c:	66 3d 16 03          	cmp    ax,0x316
c0015580:	75 06                	jne    c0015588 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015582:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558b:	66 3d 17 03          	cmp    ax,0x317
c001558f:	75 06                	jne    c0015597 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015591:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559a:	66 3d 18 03          	cmp    ax,0x318
c001559e:	75 06                	jne    c00155a6 <sendKeyboardToken(KeyboardToken)+0xe6>
c00155a0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00155a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a9:	66 3d 19 03          	cmp    ax,0x319
c00155ad:	75 06                	jne    c00155b5 <sendKeyboardToken(KeyboardToken)+0xf5>
c00155af:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00155b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b8:	66 3d 1a 03          	cmp    ax,0x31a
c00155bc:	0f 85 c9 00 00 00    	jne    c001568b <sendKeyboardToken(KeyboardToken)+0x1cb>
c00155c2:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00155c8:	e9 be 00 00 00       	jmp    c001568b <sendKeyboardToken(KeyboardToken)+0x1cb>
c00155cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d0:	66 3d 10 03          	cmp    ax,0x310
c00155d4:	75 0a                	jne    c00155e0 <sendKeyboardToken(KeyboardToken)+0x120>
c00155d6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00155dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e3:	66 3d 11 03          	cmp    ax,0x311
c00155e7:	75 0a                	jne    c00155f3 <sendKeyboardToken(KeyboardToken)+0x133>
c00155e9:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00155ef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f6:	66 3d 12 03          	cmp    ax,0x312
c00155fa:	75 0a                	jne    c0015606 <sendKeyboardToken(KeyboardToken)+0x146>
c00155fc:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015602:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015609:	66 3d 13 03          	cmp    ax,0x313
c001560d:	75 0a                	jne    c0015619 <sendKeyboardToken(KeyboardToken)+0x159>
c001560f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015615:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	66 3d 14 03          	cmp    ax,0x314
c0015620:	75 0a                	jne    c001562c <sendKeyboardToken(KeyboardToken)+0x16c>
c0015622:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015628:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001562c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562f:	66 3d 15 03          	cmp    ax,0x315
c0015633:	75 0a                	jne    c001563f <sendKeyboardToken(KeyboardToken)+0x17f>
c0015635:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001563b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001563f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015642:	66 3d 16 03          	cmp    ax,0x316
c0015646:	75 0a                	jne    c0015652 <sendKeyboardToken(KeyboardToken)+0x192>
c0015648:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001564e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015655:	66 3d 17 03          	cmp    ax,0x317
c0015659:	75 0a                	jne    c0015665 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001565b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015661:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015668:	66 3d 18 03          	cmp    ax,0x318
c001566c:	75 0a                	jne    c0015678 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001566e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015674:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567b:	66 3d 19 03          	cmp    ax,0x319
c001567f:	75 0a                	jne    c001568b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015681:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015687:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001568b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568e:	66 3d 00 02          	cmp    ax,0x200
c0015692:	75 2c                	jne    c00156c0 <sendKeyboardToken(KeyboardToken)+0x200>
c0015694:	a0 60 ce 02 c0       	mov    al,ds:0xc002ce60
c0015699:	83 f0 01             	xor    eax,0x1
c001569c:	84 c0                	test   al,al
c001569e:	74 20                	je     c00156c0 <sendKeyboardToken(KeyboardToken)+0x200>
c00156a0:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00156a5:	6a 01                	push   0x1
c00156a7:	6a 00                	push   0x0
c00156a9:	68 9c 53 01 c0       	push   0xc001539c
c00156ae:	50                   	push   eax
c00156af:	e8 f8 76 00 00       	call   c001cdac <Process::createThread(void (*)(void*), void*, int)>
c00156b4:	83 c4 10             	add    esp,0x10
c00156b7:	c6 05 60 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce60,0x1
c00156be:	eb 33                	jmp    c00156f3 <sendKeyboardToken(KeyboardToken)+0x233>
c00156c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c3:	66 3d 01 02          	cmp    ax,0x201
c00156c7:	75 2a                	jne    c00156f3 <sendKeyboardToken(KeyboardToken)+0x233>
c00156c9:	a0 60 ce 02 c0       	mov    al,ds:0xc002ce60
c00156ce:	83 f0 01             	xor    eax,0x1
c00156d1:	84 c0                	test   al,al
c00156d3:	74 1e                	je     c00156f3 <sendKeyboardToken(KeyboardToken)+0x233>
c00156d5:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00156da:	6a 01                	push   0x1
c00156dc:	6a 00                	push   0x0
c00156de:	68 f8 53 01 c0       	push   0xc00153f8
c00156e3:	50                   	push   eax
c00156e4:	e8 c3 76 00 00       	call   c001cdac <Process::createThread(void (*)(void*), void*, int)>
c00156e9:	83 c4 10             	add    esp,0x10
c00156ec:	c6 05 60 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce60,0x1
c00156f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f6:	66 3d 1d 03          	cmp    ax,0x31d
c00156fa:	75 06                	jne    c0015702 <sendKeyboardToken(KeyboardToken)+0x242>
c00156fc:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015705:	66 3d 1c 03          	cmp    ax,0x31c
c0015709:	75 06                	jne    c0015711 <sendKeyboardToken(KeyboardToken)+0x251>
c001570b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015714:	66 3d 1b 03          	cmp    ax,0x31b
c0015718:	75 06                	jne    c0015720 <sendKeyboardToken(KeyboardToken)+0x260>
c001571a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015723:	66 3d 1e 03          	cmp    ax,0x31e
c0015727:	75 06                	jne    c001572f <sendKeyboardToken(KeyboardToken)+0x26f>
c0015729:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001572f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015732:	66 3d 1f 03          	cmp    ax,0x31f
c0015736:	75 06                	jne    c001573e <sendKeyboardToken(KeyboardToken)+0x27e>
c0015738:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001573e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015741:	66 3d 1a 03          	cmp    ax,0x31a
c0015745:	75 06                	jne    c001574d <sendKeyboardToken(KeyboardToken)+0x28d>
c0015747:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001574d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015751:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015754:	83 f0 01             	xor    eax,0x1
c0015757:	84 c0                	test   al,al
c0015759:	74 77                	je     c00157d2 <sendKeyboardToken(KeyboardToken)+0x312>
c001575b:	a0 61 cb 02 c0       	mov    al,ds:0xc002cb61
c0015760:	84 c0                	test   al,al
c0015762:	74 41                	je     c00157a5 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015764:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015768:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001576c:	74 2b                	je     c0015799 <sendKeyboardToken(KeyboardToken)+0x2d9>
c001576e:	8b 15 64 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ce64
c0015774:	89 d0                	mov    eax,edx
c0015776:	c1 e0 02             	shl    eax,0x2
c0015779:	01 d0                	add    eax,edx
c001577b:	01 c0                	add    eax,eax
c001577d:	a3 64 ce 02 c0       	mov    ds:0xc002ce64,eax
c0015782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015785:	0f b7 c0             	movzx  eax,ax
c0015788:	8d 50 d0             	lea    edx,[eax-0x30]
c001578b:	a1 64 ce 02 c0       	mov    eax,ds:0xc002ce64
c0015790:	01 d0                	add    eax,edx
c0015792:	a3 64 ce 02 c0       	mov    ds:0xc002ce64,eax
c0015797:	eb 6d                	jmp    c0015806 <sendKeyboardToken(KeyboardToken)+0x346>
c0015799:	c7 05 64 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce64,0x0
c00157a3:	eb 61                	jmp    c0015806 <sendKeyboardToken(KeyboardToken)+0x346>
c00157a5:	a1 64 ce 02 c0       	mov    eax,ds:0xc002ce64
c00157aa:	85 c0                	test   eax,eax
c00157ac:	74 18                	je     c00157c6 <sendKeyboardToken(KeyboardToken)+0x306>
c00157ae:	a1 64 ce 02 c0       	mov    eax,ds:0xc002ce64
c00157b3:	0f b6 c0             	movzx  eax,al
c00157b6:	83 ec 0c             	sub    esp,0xc
c00157b9:	50                   	push   eax
c00157ba:	e8 95 fc ff ff       	call   c0015454 <sendKeyToTerminal(unsigned char)>
c00157bf:	83 c4 10             	add    esp,0x10
c00157c2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00157c6:	c7 05 64 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce64,0x0
c00157d0:	eb 34                	jmp    c0015806 <sendKeyboardToken(KeyboardToken)+0x346>
c00157d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d5:	66 3d 01 01          	cmp    ax,0x101
c00157d9:	75 2b                	jne    c0015806 <sendKeyboardToken(KeyboardToken)+0x346>
c00157db:	a1 64 ce 02 c0       	mov    eax,ds:0xc002ce64
c00157e0:	85 c0                	test   eax,eax
c00157e2:	74 18                	je     c00157fc <sendKeyboardToken(KeyboardToken)+0x33c>
c00157e4:	a1 64 ce 02 c0       	mov    eax,ds:0xc002ce64
c00157e9:	0f b6 c0             	movzx  eax,al
c00157ec:	83 ec 0c             	sub    esp,0xc
c00157ef:	50                   	push   eax
c00157f0:	e8 5f fc ff ff       	call   c0015454 <sendKeyToTerminal(unsigned char)>
c00157f5:	83 c4 10             	add    esp,0x10
c00157f8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00157fc:	c7 05 64 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce64,0x0
c0015806:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015809:	83 f0 01             	xor    eax,0x1
c001580c:	84 c0                	test   al,al
c001580e:	74 4c                	je     c001585c <sendKeyboardToken(KeyboardToken)+0x39c>
c0015810:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015813:	83 f0 01             	xor    eax,0x1
c0015816:	84 c0                	test   al,al
c0015818:	74 42                	je     c001585c <sendKeyboardToken(KeyboardToken)+0x39c>
c001581a:	a0 60 cb 02 c0       	mov    al,ds:0xc002cb60
c001581f:	83 f0 01             	xor    eax,0x1
c0015822:	84 c0                	test   al,al
c0015824:	74 36                	je     c001585c <sendKeyboardToken(KeyboardToken)+0x39c>
c0015826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015829:	66 83 f8 1f          	cmp    ax,0x1f
c001582d:	76 09                	jbe    c0015838 <sendKeyboardToken(KeyboardToken)+0x378>
c001582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015832:	66 83 f8 7e          	cmp    ax,0x7e
c0015836:	76 12                	jbe    c001584a <sendKeyboardToken(KeyboardToken)+0x38a>
c0015838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583b:	66 83 f8 0a          	cmp    ax,0xa
c001583f:	74 09                	je     c001584a <sendKeyboardToken(KeyboardToken)+0x38a>
c0015841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015844:	66 83 f8 08          	cmp    ax,0x8
c0015848:	75 12                	jne    c001585c <sendKeyboardToken(KeyboardToken)+0x39c>
c001584a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584d:	0f b6 c0             	movzx  eax,al
c0015850:	83 ec 0c             	sub    esp,0xc
c0015853:	50                   	push   eax
c0015854:	e8 fb fb ff ff       	call   c0015454 <sendKeyToTerminal(unsigned char)>
c0015859:	83 c4 10             	add    esp,0x10
c001585c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001585f:	83 f0 01             	xor    eax,0x1
c0015862:	84 c0                	test   al,al
c0015864:	74 4f                	je     c00158b5 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015866:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015869:	83 f0 01             	xor    eax,0x1
c001586c:	84 c0                	test   al,al
c001586e:	74 45                	je     c00158b5 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015870:	a0 60 cb 02 c0       	mov    al,ds:0xc002cb60
c0015875:	84 c0                	test   al,al
c0015877:	74 3c                	je     c00158b5 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587c:	66 83 f8 3f          	cmp    ax,0x3f
c0015880:	76 33                	jbe    c00158b5 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015885:	66 83 f8 7f          	cmp    ax,0x7f
c0015889:	77 2a                	ja     c00158b5 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001588b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588e:	88 c2                	mov    dl,al
c0015890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015893:	66 83 f8 5f          	cmp    ax,0x5f
c0015897:	76 04                	jbe    c001589d <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015899:	b0 20                	mov    al,0x20
c001589b:	eb 02                	jmp    c001589f <sendKeyboardToken(KeyboardToken)+0x3df>
c001589d:	b0 00                	mov    al,0x0
c001589f:	29 c2                	sub    edx,eax
c00158a1:	88 d0                	mov    al,dl
c00158a3:	83 e8 40             	sub    eax,0x40
c00158a6:	0f b6 c0             	movzx  eax,al
c00158a9:	83 ec 0c             	sub    esp,0xc
c00158ac:	50                   	push   eax
c00158ad:	e8 a2 fb ff ff       	call   c0015454 <sendKeyToTerminal(unsigned char)>
c00158b2:	83 c4 10             	add    esp,0x10
c00158b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b8:	66 3d 00 03          	cmp    ax,0x300
c00158bc:	75 0f                	jne    c00158cd <sendKeyboardToken(KeyboardToken)+0x40d>
c00158be:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158c1:	83 f0 01             	xor    eax,0x1
c00158c4:	84 c0                	test   al,al
c00158c6:	74 05                	je     c00158cd <sendKeyboardToken(KeyboardToken)+0x40d>
c00158c8:	e8 56 b0 ff ff       	call   c0010923 <doTerminalCycle()>
c00158cd:	90                   	nop
c00158ce:	c9                   	leave  
c00158cf:	c3                   	ret    

c00158d0 <clearInternalKeybuffer(VgaText*)>:
c00158d0:	55                   	push   ebp
c00158d1:	89 e5                	mov    ebp,esp
c00158d3:	83 ec 08             	sub    esp,0x8
c00158d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d9:	05 34 11 00 00       	add    eax,0x1134
c00158de:	83 ec 0c             	sub    esp,0xc
c00158e1:	50                   	push   eax
c00158e2:	e8 c1 ad fe ff       	call   c00006a8 <strlen>
c00158e7:	83 c4 10             	add    esp,0x10
c00158ea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158ed:	81 c2 34 11 00 00    	add    edx,0x1134
c00158f3:	83 ec 04             	sub    esp,0x4
c00158f6:	50                   	push   eax
c00158f7:	6a 00                	push   0x0
c00158f9:	52                   	push   edx
c00158fa:	e8 8c ad fe ff       	call   c000068b <memset>
c00158ff:	83 c4 10             	add    esp,0x10
c0015902:	90                   	nop
c0015903:	c9                   	leave  
c0015904:	c3                   	ret    

c0015905 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015905:	55                   	push   ebp
c0015906:	89 e5                	mov    ebp,esp
c0015908:	83 ec 18             	sub    esp,0x18
c001590b:	fb                   	sti    
c001590c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015913:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015917:	0f 84 8a 00 00 00    	je     c00159a7 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015926:	84 c0                	test   al,al
c0015928:	75 11                	jne    c001593b <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001592a:	e8 4b 73 00 00       	call   c001cc7a <lockScheduler()>
c001592f:	e8 82 76 00 00       	call   c001cfb6 <schedule()>
c0015934:	e8 43 73 00 00       	call   c001cc7c <unlockScheduler()>
c0015939:	eb e2                	jmp    c001591d <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001593b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001593e:	8d 50 01             	lea    edx,[eax+0x1]
c0015941:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015944:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015947:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001594d:	88 10                	mov    BYTE PTR [eax],dl
c001594f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015952:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015958:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001595b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595e:	05 34 11 00 00       	add    eax,0x1134
c0015963:	83 ec 0c             	sub    esp,0xc
c0015966:	50                   	push   eax
c0015967:	e8 3c ad fe ff       	call   c00006a8 <strlen>
c001596c:	83 c4 10             	add    esp,0x10
c001596f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015972:	81 c2 34 11 00 00    	add    edx,0x1134
c0015978:	8d 4a 01             	lea    ecx,[edx+0x1]
c001597b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001597e:	81 c2 34 11 00 00    	add    edx,0x1134
c0015984:	83 ec 04             	sub    esp,0x4
c0015987:	50                   	push   eax
c0015988:	51                   	push   ecx
c0015989:	52                   	push   edx
c001598a:	e8 8e ac fe ff       	call   c000061d <memmove>
c001598f:	83 c4 10             	add    esp,0x10
c0015992:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015995:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015998:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001599c:	0f 85 71 ff ff ff    	jne    c0015913 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00159a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a5:	eb 03                	jmp    c00159aa <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00159a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159aa:	c9                   	leave  
c00159ab:	c3                   	ret    

c00159ac <Keyboard::Keyboard(char const*)>:
c00159ac:	83 ec 0c             	sub    esp,0xc
c00159af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159b3:	83 ec 08             	sub    esp,0x8
c00159b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159ba:	50                   	push   eax
c00159bb:	e8 f0 e2 ff ff       	call   c0013cb0 <Device::Device(char const*)>
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	ba 74 98 02 c0       	mov    edx,0xc0029874
c00159c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159cc:	89 10                	mov    DWORD PTR [eax],edx
c00159ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159d2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00159dc:	c6 05 44 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca44,0x1
c00159e3:	90                   	nop
c00159e4:	83 c4 0c             	add    esp,0xc
c00159e7:	c3                   	ret    

c00159e8 <Keyboard::~Keyboard()>:
c00159e8:	83 ec 0c             	sub    esp,0xc
c00159eb:	ba 74 98 02 c0       	mov    edx,0xc0029874
c00159f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159f4:	89 10                	mov    DWORD PTR [eax],edx
c00159f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159fa:	83 ec 0c             	sub    esp,0xc
c00159fd:	50                   	push   eax
c00159fe:	e8 8f df ff ff       	call   c0013992 <Device::~Device()>
c0015a03:	83 c4 10             	add    esp,0x10
c0015a06:	90                   	nop
c0015a07:	83 c4 0c             	add    esp,0xc
c0015a0a:	c3                   	ret    
c0015a0b:	90                   	nop

c0015a0c <Keyboard::~Keyboard()>:
c0015a0c:	83 ec 0c             	sub    esp,0xc
c0015a0f:	83 ec 0c             	sub    esp,0xc
c0015a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a16:	e8 cd ff ff ff       	call   c00159e8 <Keyboard::~Keyboard()>
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	83 ec 08             	sub    esp,0x8
c0015a21:	68 5c 01 00 00       	push   0x15c
c0015a26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a2a:	e8 c2 cb ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0015a2f:	83 c4 10             	add    esp,0x10
c0015a32:	83 c4 0c             	add    esp,0xc
c0015a35:	c3                   	ret    

c0015a36 <LogicalDisk::close(int, int, void*)>:
c0015a36:	83 c8 ff             	or     eax,0xffffffff
c0015a39:	c3                   	ret    

c0015a3a <LogicalDisk::~LogicalDisk()>:
c0015a3a:	83 ec 0c             	sub    esp,0xc
c0015a3d:	ba 24 99 02 c0       	mov    edx,0xc0029924
c0015a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a46:	89 10                	mov    DWORD PTR [eax],edx
c0015a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a4c:	83 ec 0c             	sub    esp,0xc
c0015a4f:	50                   	push   eax
c0015a50:	e8 3d df ff ff       	call   c0013992 <Device::~Device()>
c0015a55:	83 c4 10             	add    esp,0x10
c0015a58:	90                   	nop
c0015a59:	83 c4 0c             	add    esp,0xc
c0015a5c:	c3                   	ret    
c0015a5d:	90                   	nop

c0015a5e <LogicalDisk::~LogicalDisk()>:
c0015a5e:	83 ec 0c             	sub    esp,0xc
c0015a61:	83 ec 0c             	sub    esp,0xc
c0015a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a68:	e8 cd ff ff ff       	call   c0015a3a <LogicalDisk::~LogicalDisk()>
c0015a6d:	83 c4 10             	add    esp,0x10
c0015a70:	83 ec 08             	sub    esp,0x8
c0015a73:	68 74 01 00 00       	push   0x174
c0015a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a7c:	e8 70 cb ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0015a81:	83 c4 10             	add    esp,0x10
c0015a84:	83 c4 0c             	add    esp,0xc
c0015a87:	c3                   	ret    

c0015a88 <LogicalDisk::open(int, int, void*)>:
c0015a88:	83 ec 18             	sub    esp,0x18
c0015a8b:	68 a0 98 02 c0       	push   0xc00298a0
c0015a90:	e8 56 3d 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0015a95:	83 c8 ff             	or     eax,0xffffffff
c0015a98:	83 c4 1c             	add    esp,0x1c
c0015a9b:	c3                   	ret    

c0015a9c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015a9c:	53                   	push   ebx
c0015a9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015aa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015aa5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015aa9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015aaf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015ab5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015abb:	77 10                	ja     c0015acd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015abd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015ac3:	89 d3                	mov    ebx,edx
c0015ac5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015acb:	72 05                	jb     c0015ad2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015acd:	83 c8 ff             	or     eax,0xffffffff
c0015ad0:	89 c2                	mov    edx,eax
c0015ad2:	5b                   	pop    ebx
c0015ad3:	c3                   	ret    

c0015ad4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015ad4:	56                   	push   esi
c0015ad5:	83 c8 ff             	or     eax,0xffffffff
c0015ad8:	53                   	push   ebx
c0015ad9:	89 c2                	mov    edx,eax
c0015adb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015adf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015ae3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ae7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015aed:	77 27                	ja     c0015b16 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015aef:	89 d8                	mov    eax,ebx
c0015af1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015af7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015afd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b02:	89 c2                	mov    edx,eax
c0015b04:	73 10                	jae    c0015b16 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015b06:	89 c8                	mov    eax,ecx
c0015b08:	89 da                	mov    edx,ebx
c0015b0a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015b10:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015b16:	5b                   	pop    ebx
c0015b17:	5e                   	pop    esi
c0015b18:	c3                   	ret    
c0015b19:	90                   	nop

c0015b1a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015b1a:	83 ec 1c             	sub    esp,0x1c
c0015b1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015b21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015b25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015b31:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015b38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b40:	83 ec 08             	sub    esp,0x8
c0015b43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b47:	50                   	push   eax
c0015b48:	e8 63 e1 ff ff       	call   c0013cb0 <Device::Device(char const*)>
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	ba 24 99 02 c0       	mov    edx,0xc0029924
c0015b55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b59:	89 10                	mov    DWORD PTR [eax],edx
c0015b5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b5f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b6a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015b71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b75:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015b7f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b8b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015b91:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015b97:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b9b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015b9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ba2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015ba8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bb6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015bca:	90                   	nop
c0015bcb:	83 c4 1c             	add    esp,0x1c
c0015bce:	c3                   	ret    
c0015bcf:	90                   	nop

c0015bd0 <LogicalDisk::assignDriveLetter()>:
c0015bd0:	55                   	push   ebp
c0015bd1:	57                   	push   edi
c0015bd2:	56                   	push   esi
c0015bd3:	53                   	push   ebx
c0015bd4:	83 ec 14             	sub    esp,0x14
c0015bd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015bdb:	8b 3d 80 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002ce80
c0015be1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015be7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015beb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015bf1:	8b 3d 84 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002ce84
c0015bf7:	3c 01                	cmp    al,0x1
c0015bf9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015bfd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015c01:	19 c0                	sbb    eax,eax
c0015c03:	83 e0 02             	and    eax,0x2
c0015c06:	83 c0 41             	add    eax,0x41
c0015c09:	0f be e8             	movsx  ebp,al
c0015c0c:	3c 43                	cmp    al,0x43
c0015c0e:	75 10                	jne    c0015c20 <LogicalDisk::assignDriveLetter()+0x50>
c0015c10:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015c17:	75 5d                	jne    c0015c76 <LogicalDisk::assignDriveLetter()+0xa6>
c0015c19:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015c1e:	75 56                	jne    c0015c76 <LogicalDisk::assignDriveLetter()+0xa6>
c0015c20:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015c23:	ba 01 00 00 00       	mov    edx,0x1
c0015c28:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015c2c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015c30:	d3 e2                	shl    edx,cl
c0015c32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c36:	89 d7                	mov    edi,edx
c0015c38:	89 d6                	mov    esi,edx
c0015c3a:	c1 ff 1f             	sar    edi,0x1f
c0015c3d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015c41:	21 f9                	and    ecx,edi
c0015c43:	09 d1                	or     ecx,edx
c0015c45:	75 2f                	jne    c0015c76 <LogicalDisk::assignDriveLetter()+0xa6>
c0015c47:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015c4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c4f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015c55:	09 f2                	or     edx,esi
c0015c57:	89 15 80 ce 02 c0    	mov    DWORD PTR ds:0xc002ce80,edx
c0015c5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c61:	09 fa                	or     edx,edi
c0015c63:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015c67:	89 15 84 ce 02 c0    	mov    DWORD PTR ds:0xc002ce84,edx
c0015c6d:	89 1c bd a0 ce 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3160],ebx
c0015c74:	eb 08                	jmp    c0015c7e <LogicalDisk::assignDriveLetter()+0xae>
c0015c76:	45                   	inc    ebp
c0015c77:	40                   	inc    eax
c0015c78:	3c 5b                	cmp    al,0x5b
c0015c7a:	75 90                	jne    c0015c0c <LogicalDisk::assignDriveLetter()+0x3c>
c0015c7c:	31 c0                	xor    eax,eax
c0015c7e:	83 c4 14             	add    esp,0x14
c0015c81:	5b                   	pop    ebx
c0015c82:	5e                   	pop    esi
c0015c83:	5f                   	pop    edi
c0015c84:	5d                   	pop    ebp
c0015c85:	c3                   	ret    

c0015c86 <LogicalDisk::mount()>:
c0015c86:	56                   	push   esi
c0015c87:	53                   	push   ebx
c0015c88:	51                   	push   ecx
c0015c89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c8d:	8b 1d 08 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca08
c0015c93:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015c9d:	85 db                	test   ebx,ebx
c0015c9f:	74 50                	je     c0015cf1 <LogicalDisk::mount()+0x6b>
c0015ca1:	e8 bf 6f 00 00       	call   c001cc65 <getIRQNestingLevel()>
c0015ca6:	52                   	push   edx
c0015ca7:	52                   	push   edx
c0015ca8:	50                   	push   eax
c0015ca9:	68 c4 98 02 c0       	push   0xc00298c4
c0015cae:	e8 1e ca ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0015cb3:	83 c4 0c             	add    esp,0xc
c0015cb6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015cbd:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015cbf:	83 e8 41             	sub    eax,0x41
c0015cc2:	50                   	push   eax
c0015cc3:	56                   	push   esi
c0015cc4:	53                   	push   ebx
c0015cc5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015cc8:	83 c4 10             	add    esp,0x10
c0015ccb:	84 c0                	test   al,al
c0015ccd:	74 08                	je     c0015cd7 <LogicalDisk::mount()+0x51>
c0015ccf:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015cd5:	eb 1c                	jmp    c0015cf3 <LogicalDisk::mount()+0x6d>
c0015cd7:	e8 89 6f 00 00       	call   c001cc65 <getIRQNestingLevel()>
c0015cdc:	51                   	push   ecx
c0015cdd:	51                   	push   ecx
c0015cde:	50                   	push   eax
c0015cdf:	68 df 98 02 c0       	push   0xc00298df
c0015ce4:	e8 e8 c9 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0015ce9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015cec:	83 c4 10             	add    esp,0x10
c0015cef:	eb ac                	jmp    c0015c9d <LogicalDisk::mount()+0x17>
c0015cf1:	31 c0                	xor    eax,eax
c0015cf3:	5a                   	pop    edx
c0015cf4:	5b                   	pop    ebx
c0015cf5:	5e                   	pop    esi
c0015cf6:	c3                   	ret    
c0015cf7:	90                   	nop

c0015cf8 <LogicalDisk::unmount()>:
c0015cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cfc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015d06:	c3                   	ret    
c0015d07:	90                   	nop

c0015d08 <LogicalDisk::unassignDriveLetter()>:
c0015d08:	57                   	push   edi
c0015d09:	56                   	push   esi
c0015d0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d0e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015d15:	84 c9                	test   cl,cl
c0015d17:	75 0f                	jne    c0015d28 <LogicalDisk::unassignDriveLetter()+0x20>
c0015d19:	c7 44 24 0c fa 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc00298fa
c0015d21:	5e                   	pop    esi
c0015d22:	5f                   	pop    edi
c0015d23:	e9 c3 3a 00 00       	jmp    c00197eb <Krnl::panic(char const*)>
c0015d28:	83 e9 41             	sub    ecx,0x41
c0015d2b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015d32:	b8 01 00 00 00       	mov    eax,0x1
c0015d37:	c7 04 8d a0 ce 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3160],0x0
c0015d42:	d3 e0                	shl    eax,cl
c0015d44:	89 c7                	mov    edi,eax
c0015d46:	f7 d0                	not    eax
c0015d48:	c1 ff 1f             	sar    edi,0x1f
c0015d4b:	21 05 80 ce 02 c0    	and    DWORD PTR ds:0xc002ce80,eax
c0015d51:	89 fe                	mov    esi,edi
c0015d53:	f7 d6                	not    esi
c0015d55:	21 35 84 ce 02 c0    	and    DWORD PTR ds:0xc002ce84,esi
c0015d5b:	5e                   	pop    esi
c0015d5c:	5f                   	pop    edi
c0015d5d:	c3                   	ret    

c0015d5e <LogicalDisk::read(unsigned long long, int, void*)>:
c0015d5e:	57                   	push   edi
c0015d5f:	56                   	push   esi
c0015d60:	53                   	push   ebx
c0015d61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015d65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d69:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015d6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d71:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d77:	77 41                	ja     c0015dba <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015d79:	99                   	cdq    
c0015d7a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015d80:	01 c8                	add    eax,ecx
c0015d82:	11 da                	adc    edx,ebx
c0015d84:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015d8a:	19 d7                	sbb    edi,edx
c0015d8c:	72 33                	jb     c0015dc1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015d8e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015d94:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015d9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015d9e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015da2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015da8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015dae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015db2:	5b                   	pop    ebx
c0015db3:	5e                   	pop    esi
c0015db4:	5f                   	pop    edi
c0015db5:	e9 f8 09 00 00       	jmp    c00167b2 <VCache::read(unsigned long long, int, void*)>
c0015dba:	b8 05 00 00 00       	mov    eax,0x5
c0015dbf:	eb 05                	jmp    c0015dc6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015dc1:	b8 07 00 00 00       	mov    eax,0x7
c0015dc6:	5b                   	pop    ebx
c0015dc7:	5e                   	pop    esi
c0015dc8:	5f                   	pop    edi
c0015dc9:	c3                   	ret    

c0015dca <LogicalDisk::write(unsigned long long, int, void*)>:
c0015dca:	57                   	push   edi
c0015dcb:	56                   	push   esi
c0015dcc:	53                   	push   ebx
c0015dcd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015dd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015dd5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ddd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015de3:	77 41                	ja     c0015e26 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015de5:	99                   	cdq    
c0015de6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015dec:	01 c8                	add    eax,ecx
c0015dee:	11 da                	adc    edx,ebx
c0015df0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015df6:	19 d7                	sbb    edi,edx
c0015df8:	72 33                	jb     c0015e2d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015dfa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e00:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e06:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e0a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e0e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e14:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e1e:	5b                   	pop    ebx
c0015e1f:	5e                   	pop    esi
c0015e20:	5f                   	pop    edi
c0015e21:	e9 a8 08 00 00       	jmp    c00166ce <VCache::write(unsigned long long, int, void*)>
c0015e26:	b8 05 00 00 00       	mov    eax,0x5
c0015e2b:	eb 05                	jmp    c0015e32 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015e2d:	b8 07 00 00 00       	mov    eax,0x7
c0015e32:	5b                   	pop    ebx
c0015e33:	5e                   	pop    esi
c0015e34:	5f                   	pop    edi
c0015e35:	c3                   	ret    

c0015e36 <Mouse::Mouse(char const*)>:
c0015e36:	83 ec 0c             	sub    esp,0xc
c0015e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e3d:	83 ec 08             	sub    esp,0x8
c0015e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e44:	50                   	push   eax
c0015e45:	e8 66 de ff ff       	call   c0013cb0 <Device::Device(char const*)>
c0015e4a:	83 c4 10             	add    esp,0x10
c0015e4d:	ba 50 99 02 c0       	mov    edx,0xc0029950
c0015e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e56:	89 10                	mov    DWORD PTR [eax],edx
c0015e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e5c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015e66:	90                   	nop
c0015e67:	83 c4 0c             	add    esp,0xc
c0015e6a:	c3                   	ret    
c0015e6b:	90                   	nop

c0015e6c <Mouse::~Mouse()>:
c0015e6c:	83 ec 0c             	sub    esp,0xc
c0015e6f:	ba 50 99 02 c0       	mov    edx,0xc0029950
c0015e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e78:	89 10                	mov    DWORD PTR [eax],edx
c0015e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e7e:	83 ec 0c             	sub    esp,0xc
c0015e81:	50                   	push   eax
c0015e82:	e8 0b db ff ff       	call   c0013992 <Device::~Device()>
c0015e87:	83 c4 10             	add    esp,0x10
c0015e8a:	90                   	nop
c0015e8b:	83 c4 0c             	add    esp,0xc
c0015e8e:	c3                   	ret    
c0015e8f:	90                   	nop

c0015e90 <Mouse::~Mouse()>:
c0015e90:	83 ec 0c             	sub    esp,0xc
c0015e93:	83 ec 0c             	sub    esp,0xc
c0015e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e9a:	e8 cd ff ff ff       	call   c0015e6c <Mouse::~Mouse()>
c0015e9f:	83 c4 10             	add    esp,0x10
c0015ea2:	83 ec 08             	sub    esp,0x8
c0015ea5:	68 58 01 00 00       	push   0x158
c0015eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eae:	e8 3e c7 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0015eb3:	83 c4 10             	add    esp,0x10
c0015eb6:	83 c4 0c             	add    esp,0xc
c0015eb9:	c3                   	ret    

c0015eba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015eba:	55                   	push   ebp
c0015ebb:	57                   	push   edi
c0015ebc:	56                   	push   esi
c0015ebd:	53                   	push   ebx
c0015ebe:	81 ec 28 01 00 00    	sub    esp,0x128
c0015ec4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015ecb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015ed2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015ed9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015ee0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ee4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015ee8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015eef:	e8 b8 de ff ff       	call   c0013dac <Device::getName()>
c0015ef4:	5a                   	pop    edx
c0015ef5:	59                   	pop    ecx
c0015ef6:	50                   	push   eax
c0015ef7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015efb:	55                   	push   ebp
c0015efc:	e8 29 a8 fe ff       	call   c000072a <strcpy>
c0015f01:	5b                   	pop    ebx
c0015f02:	58                   	pop    eax
c0015f03:	68 74 99 02 c0       	push   0xc0029974
c0015f08:	55                   	push   ebp
c0015f09:	e8 d3 a8 fe ff       	call   c00007e1 <strcat>
c0015f0e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015f15:	e8 ba 95 ff ff       	call   c000f4d4 <malloc>
c0015f1a:	83 c4 0c             	add    esp,0xc
c0015f1d:	89 c3                	mov    ebx,eax
c0015f1f:	57                   	push   edi
c0015f20:	56                   	push   esi
c0015f21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f29:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015f30:	55                   	push   ebp
c0015f31:	50                   	push   eax
c0015f32:	e8 e3 fb ff ff       	call   c0015b1a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015f37:	83 c4 14             	add    esp,0x14
c0015f3a:	53                   	push   ebx
c0015f3b:	e8 90 fc ff ff       	call   c0015bd0 <LogicalDisk::assignDriveLetter()>
c0015f40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f43:	e8 3e fd ff ff       	call   c0015c86 <LogicalDisk::mount()>
c0015f48:	58                   	pop    eax
c0015f49:	5a                   	pop    edx
c0015f4a:	53                   	push   ebx
c0015f4b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015f52:	e8 69 db ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c0015f57:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015f5d:	5b                   	pop    ebx
c0015f5e:	5e                   	pop    esi
c0015f5f:	5f                   	pop    edi
c0015f60:	5d                   	pop    ebp
c0015f61:	c3                   	ret    

c0015f62 <createPartitionsForDisk(PhysicalDisk*)>:
c0015f62:	55                   	push   ebp
c0015f63:	57                   	push   edi
c0015f64:	56                   	push   esi
c0015f65:	53                   	push   ebx
c0015f66:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015f6c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015f73:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015f79:	3d 00 02 00 00       	cmp    eax,0x200
c0015f7e:	74 27                	je     c0015fa7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015f80:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015f86:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015f8c:	83 ec 10             	sub    esp,0x10
c0015f8f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015f93:	99                   	cdq    
c0015f94:	c1 e6 0a             	shl    esi,0xa
c0015f97:	52                   	push   edx
c0015f98:	89 fd                	mov    ebp,edi
c0015f9a:	50                   	push   eax
c0015f9b:	55                   	push   ebp
c0015f9c:	56                   	push   esi
c0015f9d:	e8 5a f3 00 00       	call   c00252fc <__udivdi3>
c0015fa2:	e9 b1 00 00 00       	jmp    c0016058 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015fa7:	83 ec 0c             	sub    esp,0xc
c0015faa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fac:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015fb0:	56                   	push   esi
c0015fb1:	6a 01                	push   0x1
c0015fb3:	6a 00                	push   0x0
c0015fb5:	6a 00                	push   0x0
c0015fb7:	53                   	push   ebx
c0015fb8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015fbb:	83 c4 20             	add    esp,0x20
c0015fbe:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015fc6:	75 0a                	jne    c0015fd2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015fc8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015fd0:	74 2c                	je     c0015ffe <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015fd2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015fd8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015fde:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015fe4:	83 ec 10             	sub    esp,0x10
c0015fe7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015feb:	89 f7                	mov    edi,esi
c0015fed:	c1 e0 0a             	shl    eax,0xa
c0015ff0:	c1 ff 1f             	sar    edi,0x1f
c0015ff3:	57                   	push   edi
c0015ff4:	56                   	push   esi
c0015ff5:	52                   	push   edx
c0015ff6:	50                   	push   eax
c0015ff7:	e8 00 f3 00 00       	call   c00252fc <__udivdi3>
c0015ffc:	eb 5a                	jmp    c0016058 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ffe:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016005:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001600c:	83 e1 7f             	and    ecx,0x7f
c001600f:	83 e0 7f             	and    eax,0x7f
c0016012:	01 c1                	add    ecx,eax
c0016014:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001601b:	83 e0 7f             	and    eax,0x7f
c001601e:	01 c1                	add    ecx,eax
c0016020:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016027:	83 e0 7f             	and    eax,0x7f
c001602a:	00 c1                	add    cl,al
c001602c:	74 41                	je     c001606f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001602e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016034:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001603a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016040:	83 ec 10             	sub    esp,0x10
c0016043:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016047:	89 f7                	mov    edi,esi
c0016049:	c1 e0 0a             	shl    eax,0xa
c001604c:	c1 ff 1f             	sar    edi,0x1f
c001604f:	57                   	push   edi
c0016050:	56                   	push   esi
c0016051:	52                   	push   edx
c0016052:	50                   	push   eax
c0016053:	e8 a4 f2 00 00       	call   c00252fc <__udivdi3>
c0016058:	83 c4 14             	add    esp,0x14
c001605b:	52                   	push   edx
c001605c:	50                   	push   eax
c001605d:	6a 00                	push   0x0
c001605f:	6a 00                	push   0x0
c0016061:	53                   	push   ebx
c0016062:	e8 53 fe ff ff       	call   c0015eba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016067:	83 c4 20             	add    esp,0x20
c001606a:	e9 79 01 00 00       	jmp    c00161e8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001606f:	89 f0                	mov    eax,esi
c0016071:	31 f6                	xor    esi,esi
c0016073:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001607a:	75 02                	jne    c001607e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001607c:	89 f1                	mov    ecx,esi
c001607e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016085:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001608c:	c1 e2 08             	shl    edx,0x8
c001608f:	c1 e7 10             	shl    edi,0x10
c0016092:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001609a:	09 fa                	or     edx,edi
c001609c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00160a4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00160ab:	83 c0 10             	add    eax,0x10
c00160ae:	09 fa                	or     edx,edi
c00160b0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00160b7:	c1 e7 18             	shl    edi,0x18
c00160ba:	09 fa                	or     edx,edi
c00160bc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00160c3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00160c7:	c1 e7 10             	shl    edi,0x10
c00160ca:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00160d1:	c1 e2 08             	shl    edx,0x8
c00160d4:	09 fa                	or     edx,edi
c00160d6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00160dd:	09 fa                	or     edx,edi
c00160df:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00160e6:	c1 e7 18             	shl    edi,0x18
c00160e9:	09 fa                	or     edx,edi
c00160eb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00160ef:	46                   	inc    esi
c00160f0:	83 fe 04             	cmp    esi,0x4
c00160f3:	0f 85 7a ff ff ff    	jne    c0016073 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00160f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160fd:	83 f0 01             	xor    eax,0x1
c0016100:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016104:	75 57                	jne    c001615d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016106:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001610a:	83 f0 01             	xor    eax,0x1
c001610d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016111:	75 4a                	jne    c001615d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016113:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016117:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001611f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016127:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001612d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016133:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016139:	0f a4 c2 0a          	shld   edx,eax,0xa
c001613d:	89 f7                	mov    edi,esi
c001613f:	c1 e0 0a             	shl    eax,0xa
c0016142:	c1 ff 1f             	sar    edi,0x1f
c0016145:	57                   	push   edi
c0016146:	56                   	push   esi
c0016147:	52                   	push   edx
c0016148:	50                   	push   eax
c0016149:	e8 ae f1 00 00       	call   c00252fc <__udivdi3>
c001614e:	83 c4 10             	add    esp,0x10
c0016151:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016155:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016159:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001615d:	84 c9                	test   cl,cl
c001615f:	74 53                	je     c00161b4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016161:	0f b6 c9             	movzx  ecx,cl
c0016164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016168:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001616c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016170:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016174:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016178:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001617c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016180:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016184:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016188:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001618c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016190:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016194:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016198:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001619c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00161a0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00161a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00161a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00161ac:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00161b0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00161b4:	31 ed                	xor    ebp,ebp
c00161b6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00161ba:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00161be:	89 f8                	mov    eax,edi
c00161c0:	09 f0                	or     eax,esi
c00161c2:	74 1e                	je     c00161e2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00161c4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00161c8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00161cc:	89 d1                	mov    ecx,edx
c00161ce:	09 c1                	or     ecx,eax
c00161d0:	74 10                	je     c00161e2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00161d2:	83 ec 0c             	sub    esp,0xc
c00161d5:	57                   	push   edi
c00161d6:	56                   	push   esi
c00161d7:	52                   	push   edx
c00161d8:	50                   	push   eax
c00161d9:	53                   	push   ebx
c00161da:	e8 db fc ff ff       	call   c0015eba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00161df:	83 c4 20             	add    esp,0x20
c00161e2:	45                   	inc    ebp
c00161e3:	83 fd 04             	cmp    ebp,0x4
c00161e6:	75 ce                	jne    c00161b6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00161e8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00161ee:	5b                   	pop    ebx
c00161ef:	5e                   	pop    esi
c00161f0:	5f                   	pop    edi
c00161f1:	5d                   	pop    ebp
c00161f2:	c3                   	ret    
c00161f3:	90                   	nop

c00161f4 <Serial::Serial(char const*)>:
c00161f4:	83 ec 0c             	sub    esp,0xc
c00161f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161fb:	83 ec 08             	sub    esp,0x8
c00161fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016202:	50                   	push   eax
c0016203:	e8 a8 da ff ff       	call   c0013cb0 <Device::Device(char const*)>
c0016208:	83 c4 10             	add    esp,0x10
c001620b:	ba 88 99 02 c0       	mov    edx,0xc0029988
c0016210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016214:	89 10                	mov    DWORD PTR [eax],edx
c0016216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001621a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016224:	90                   	nop
c0016225:	83 c4 0c             	add    esp,0xc
c0016228:	c3                   	ret    
c0016229:	90                   	nop

c001622a <Serial::~Serial()>:
c001622a:	83 ec 0c             	sub    esp,0xc
c001622d:	ba 88 99 02 c0       	mov    edx,0xc0029988
c0016232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016236:	89 10                	mov    DWORD PTR [eax],edx
c0016238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001623c:	83 ec 0c             	sub    esp,0xc
c001623f:	50                   	push   eax
c0016240:	e8 4d d7 ff ff       	call   c0013992 <Device::~Device()>
c0016245:	83 c4 10             	add    esp,0x10
c0016248:	90                   	nop
c0016249:	83 c4 0c             	add    esp,0xc
c001624c:	c3                   	ret    
c001624d:	90                   	nop

c001624e <Serial::~Serial()>:
c001624e:	83 ec 0c             	sub    esp,0xc
c0016251:	83 ec 0c             	sub    esp,0xc
c0016254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016258:	e8 cd ff ff ff       	call   c001622a <Serial::~Serial()>
c001625d:	83 c4 10             	add    esp,0x10
c0016260:	83 ec 08             	sub    esp,0x8
c0016263:	68 58 01 00 00       	push   0x158
c0016268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001626c:	e8 80 c3 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0016271:	83 c4 10             	add    esp,0x10
c0016274:	83 c4 0c             	add    esp,0xc
c0016277:	c3                   	ret    

c0016278 <Timer::Timer(char const*)>:
c0016278:	83 ec 0c             	sub    esp,0xc
c001627b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001627f:	83 ec 08             	sub    esp,0x8
c0016282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016286:	50                   	push   eax
c0016287:	e8 24 da ff ff       	call   c0013cb0 <Device::Device(char const*)>
c001628c:	83 c4 10             	add    esp,0x10
c001628f:	ba cc 99 02 c0       	mov    edx,0xc00299cc
c0016294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016298:	89 10                	mov    DWORD PTR [eax],edx
c001629a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001629e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00162a8:	90                   	nop
c00162a9:	83 c4 0c             	add    esp,0xc
c00162ac:	c3                   	ret    
c00162ad:	90                   	nop

c00162ae <Timer::~Timer()>:
c00162ae:	83 ec 0c             	sub    esp,0xc
c00162b1:	ba cc 99 02 c0       	mov    edx,0xc00299cc
c00162b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ba:	89 10                	mov    DWORD PTR [eax],edx
c00162bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	50                   	push   eax
c00162c4:	e8 c9 d6 ff ff       	call   c0013992 <Device::~Device()>
c00162c9:	83 c4 10             	add    esp,0x10
c00162cc:	90                   	nop
c00162cd:	83 c4 0c             	add    esp,0xc
c00162d0:	c3                   	ret    
c00162d1:	90                   	nop

c00162d2 <Timer::~Timer()>:
c00162d2:	83 ec 0c             	sub    esp,0xc
c00162d5:	83 ec 0c             	sub    esp,0xc
c00162d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162dc:	e8 cd ff ff ff       	call   c00162ae <Timer::~Timer()>
c00162e1:	83 c4 10             	add    esp,0x10
c00162e4:	83 ec 08             	sub    esp,0x8
c00162e7:	68 5c 01 00 00       	push   0x15c
c00162ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f0:	e8 fc c2 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00162f5:	83 c4 10             	add    esp,0x10
c00162f8:	83 c4 0c             	add    esp,0xc
c00162fb:	c3                   	ret    

c00162fc <Timer::read()>:
c00162fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016300:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016306:	c3                   	ret    

c0016307 <timerHandler(unsigned long long)>:
c0016307:	55                   	push   ebp
c0016308:	57                   	push   edi
c0016309:	56                   	push   esi
c001630a:	53                   	push   ebx
c001630b:	83 ec 0c             	sub    esp,0xc
c001630e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016312:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016316:	01 35 10 cf 02 c0    	add    DWORD PTR ds:0xc002cf10,esi
c001631c:	11 3d 14 cf 02 c0    	adc    DWORD PTR ds:0xc002cf14,edi
c0016322:	80 3d ad c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c8ad,0x0
c0016329:	0f 84 07 01 00 00    	je     c0016436 <timerHandler(unsigned long long)+0x12f>
c001632f:	e8 6d 69 00 00       	call   c001cca1 <lockStuff()>
c0016334:	83 ec 0c             	sub    esp,0xc
c0016337:	68 bc dd 02 c0       	push   0xc002ddbc
c001633c:	e8 2d 10 01 00       	call   c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016341:	c7 04 24 bc dd 02 c0 	mov    DWORD PTR [esp],0xc002ddbc
c0016348:	89 c3                	mov    ebx,eax
c001634a:	e8 27 10 01 00       	call   c0027376 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001634f:	83 c4 10             	add    esp,0x10
c0016352:	84 c0                	test   al,al
c0016354:	74 60                	je     c00163b6 <timerHandler(unsigned long long)+0xaf>
c0016356:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001635c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001635f:	85 c0                	test   eax,eax
c0016361:	0f 85 91 00 00 00    	jne    c00163f8 <timerHandler(unsigned long long)+0xf1>
c0016367:	e9 be 00 00 00       	jmp    c001642a <timerHandler(unsigned long long)+0x123>
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	55                   	push   ebp
c0016370:	e8 1d 6f 00 00       	call   c001d292 <unblockTask(ThreadControlBlock*)>
c0016375:	83 c4 10             	add    esp,0x10
c0016378:	39 eb                	cmp    ebx,ebp
c001637a:	75 12                	jne    c001638e <timerHandler(unsigned long long)+0x87>
c001637c:	83 ec 0c             	sub    esp,0xc
c001637f:	68 bc dd 02 c0       	push   0xc002ddbc
c0016384:	e8 e5 0f 01 00       	call   c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016389:	89 c3                	mov    ebx,eax
c001638b:	83 c4 10             	add    esp,0x10
c001638e:	83 ec 0c             	sub    esp,0xc
c0016391:	68 bc dd 02 c0       	push   0xc002ddbc
c0016396:	e8 db 0f 01 00       	call   c0027376 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001639b:	83 c4 10             	add    esp,0x10
c001639e:	84 c0                	test   al,al
c00163a0:	75 b4                	jne    c0016356 <timerHandler(unsigned long long)+0x4f>
c00163a2:	83 ec 0c             	sub    esp,0xc
c00163a5:	68 bc dd 02 c0       	push   0xc002ddbc
c00163aa:	e8 bf 0f 01 00       	call   c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163af:	83 c4 10             	add    esp,0x10
c00163b2:	39 d8                	cmp    eax,ebx
c00163b4:	74 a0                	je     c0016356 <timerHandler(unsigned long long)+0x4f>
c00163b6:	83 ec 0c             	sub    esp,0xc
c00163b9:	68 bc dd 02 c0       	push   0xc002ddbc
c00163be:	e8 ab 0f 01 00       	call   c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163c3:	c7 04 24 bc dd 02 c0 	mov    DWORD PTR [esp],0xc002ddbc
c00163ca:	89 c5                	mov    ebp,eax
c00163cc:	e8 c1 0f 01 00       	call   c0027392 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163d1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00163d4:	83 c4 10             	add    esp,0x10
c00163d7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00163da:	39 15 10 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf10,edx
c00163e0:	a1 14 cf 02 c0       	mov    eax,ds:0xc002cf14
c00163e5:	19 c8                	sbb    eax,ecx
c00163e7:	73 83                	jae    c001636c <timerHandler(unsigned long long)+0x65>
c00163e9:	50                   	push   eax
c00163ea:	50                   	push   eax
c00163eb:	55                   	push   ebp
c00163ec:	68 bc dd 02 c0       	push   0xc002ddbc
c00163f1:	e8 4a 10 01 00       	call   c0027440 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163f6:	eb 93                	jmp    c001638b <timerHandler(unsigned long long)+0x84>
c00163f8:	80 3d ac c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c8ac,0x0
c00163ff:	74 29                	je     c001642a <timerHandler(unsigned long long)+0x123>
c0016401:	39 c6                	cmp    esi,eax
c0016403:	bb 00 00 00 00       	mov    ebx,0x0
c0016408:	19 df                	sbb    edi,ebx
c001640a:	72 19                	jb     c0016425 <timerHandler(unsigned long long)+0x11e>
c001640c:	e8 69 68 00 00       	call   c001cc7a <lockScheduler()>
c0016411:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016416:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016419:	e8 98 6b 00 00       	call   c001cfb6 <schedule()>
c001641e:	e8 59 68 00 00       	call   c001cc7c <unlockScheduler()>
c0016423:	eb 05                	jmp    c001642a <timerHandler(unsigned long long)+0x123>
c0016425:	29 f0                	sub    eax,esi
c0016427:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001642a:	83 c4 0c             	add    esp,0xc
c001642d:	5b                   	pop    ebx
c001642e:	5e                   	pop    esi
c001642f:	5f                   	pop    edi
c0016430:	5d                   	pop    ebp
c0016431:	e9 05 6c 00 00       	jmp    c001d03b <unlockStuff()>
c0016436:	83 c4 0c             	add    esp,0xc
c0016439:	5b                   	pop    ebx
c001643a:	5e                   	pop    esi
c001643b:	5f                   	pop    edi
c001643c:	5d                   	pop    ebp
c001643d:	c3                   	ret    

c001643e <setupTimer(int)>:
c001643e:	57                   	push   edi
c001643f:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0016444:	56                   	push   esi
c0016445:	53                   	push   ebx
c0016446:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001644a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016450:	83 ec 0c             	sub    esp,0xc
c0016453:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016459:	e8 4e d9 ff ff       	call   c0013dac <Device::getName()>
c001645e:	83 c4 10             	add    esp,0x10
c0016461:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016464:	0f 85 8d 00 00 00    	jne    c00164f7 <setupTimer(int)+0xb9>
c001646a:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001646f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016476:	74 7f                	je     c00164f7 <setupTimer(int)+0xb9>
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	68 5c 01 00 00       	push   0x15c
c0016480:	e8 4f 90 ff ff       	call   c000f4d4 <malloc>
c0016485:	89 04 24             	mov    DWORD PTR [esp],eax
c0016488:	89 c3                	mov    ebx,eax
c001648a:	e8 51 ea 00 00       	call   c0024ee0 <PIT::PIT()>
c001648f:	59                   	pop    ecx
c0016490:	5f                   	pop    edi
c0016491:	53                   	push   ebx
c0016492:	ff 35 a8 c8 02 c0    	push   DWORD PTR ds:0xc002c8a8
c0016498:	e8 23 d6 ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c001649d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001649f:	6a 00                	push   0x0
c00164a1:	6a 00                	push   0x0
c00164a3:	56                   	push   esi
c00164a4:	53                   	push   ebx
c00164a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164a8:	83 c4 14             	add    esp,0x14
c00164ab:	68 60 01 00 00       	push   0x160
c00164b0:	e8 1f 90 ff ff       	call   c000f4d4 <malloc>
c00164b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00164b8:	89 c7                	mov    edi,eax
c00164ba:	e8 d1 e8 00 00       	call   c0024d90 <APICTimer::APICTimer()>
c00164bf:	6a 00                	push   0x0
c00164c1:	6a 00                	push   0x0
c00164c3:	56                   	push   esi
c00164c4:	57                   	push   edi
c00164c5:	e8 c8 e7 00 00       	call   c0024c92 <APICTimer::open(int, int, void*)>
c00164ca:	83 c4 20             	add    esp,0x20
c00164cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164cf:	6a 00                	push   0x0
c00164d1:	6a 00                	push   0x0
c00164d3:	6a 00                	push   0x0
c00164d5:	53                   	push   ebx
c00164d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00164d9:	58                   	pop    eax
c00164da:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00164df:	5a                   	pop    edx
c00164e0:	57                   	push   edi
c00164e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00164e7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00164ed:	e8 ce d5 ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c00164f2:	83 c4 10             	add    esp,0x10
c00164f5:	eb 33                	jmp    c001652a <setupTimer(int)+0xec>
c00164f7:	83 ec 0c             	sub    esp,0xc
c00164fa:	68 5c 01 00 00       	push   0x15c
c00164ff:	e8 d0 8f ff ff       	call   c000f4d4 <malloc>
c0016504:	89 04 24             	mov    DWORD PTR [esp],eax
c0016507:	89 c3                	mov    ebx,eax
c0016509:	e8 d2 e9 00 00       	call   c0024ee0 <PIT::PIT()>
c001650e:	58                   	pop    eax
c001650f:	5a                   	pop    edx
c0016510:	53                   	push   ebx
c0016511:	ff 35 a8 c8 02 c0    	push   DWORD PTR ds:0xc002c8a8
c0016517:	e8 a4 d5 ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c001651c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001651e:	6a 00                	push   0x0
c0016520:	6a 00                	push   0x0
c0016522:	56                   	push   esi
c0016523:	53                   	push   ebx
c0016524:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016527:	83 c4 20             	add    esp,0x20
c001652a:	89 d8                	mov    eax,ebx
c001652c:	5b                   	pop    ebx
c001652d:	5e                   	pop    esi
c001652e:	5f                   	pop    edi
c001652f:	c3                   	ret    

c0016530 <VCache::VCache(PhysicalDisk*)>:
c0016530:	53                   	push   ebx
c0016531:	83 ec 18             	sub    esp,0x18
c0016534:	ba fc 99 02 c0       	mov    edx,0xc00299fc
c0016539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653d:	89 10                	mov    DWORD PTR [eax],edx
c001653f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016543:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001654a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001654e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016555:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016559:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016560:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001656b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016572:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001657d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016588:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001658c:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016594:	83 ec 0c             	sub    esp,0xc
c0016597:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001659b:	e8 34 8f ff ff       	call   c000f4d4 <malloc>
c00165a0:	83 c4 10             	add    esp,0x10
c00165a3:	89 c3                	mov    ebx,eax
c00165a5:	83 ec 0c             	sub    esp,0xc
c00165a8:	53                   	push   ebx
c00165a9:	e8 ec 67 00 00       	call   c001cd9a <Mutex::Mutex()>
c00165ae:	83 c4 10             	add    esp,0x10
c00165b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00165b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165bc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00165c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00165c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c7:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00165ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00165d2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00165d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165dc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00165df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00165e3:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00165e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165ef:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165f3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00165f6:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00165f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fd:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016601:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016605:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001660b:	c1 e0 06             	shl    eax,0x6
c001660e:	83 ec 0c             	sub    esp,0xc
c0016611:	50                   	push   eax
c0016612:	e8 bd 8e ff ff       	call   c000f4d4 <malloc>
c0016617:	83 c4 10             	add    esp,0x10
c001661a:	89 c2                	mov    edx,eax
c001661c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016620:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016623:	90                   	nop
c0016624:	83 c4 18             	add    esp,0x18
c0016627:	5b                   	pop    ebx
c0016628:	c3                   	ret    
c0016629:	90                   	nop

c001662a <VCache::writeWriteBuffer()>:
c001662a:	53                   	push   ebx
c001662b:	83 ec 14             	sub    esp,0x14
c001662e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016632:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016635:	8b 10                	mov    edx,DWORD PTR [eax]
c0016637:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001663a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001663d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016640:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016643:	50                   	push   eax
c0016644:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016647:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001664e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016655:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016659:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016660:	83 c4 28             	add    esp,0x28
c0016663:	5b                   	pop    ebx
c0016664:	c3                   	ret    
c0016665:	90                   	nop

c0016666 <VCache::~VCache()>:
c0016666:	83 ec 0c             	sub    esp,0xc
c0016669:	ba fc 99 02 c0       	mov    edx,0xc00299fc
c001666e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016672:	89 10                	mov    DWORD PTR [eax],edx
c0016674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016678:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001667b:	84 c0                	test   al,al
c001667d:	74 0f                	je     c001668e <VCache::~VCache()+0x28>
c001667f:	83 ec 0c             	sub    esp,0xc
c0016682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016686:	e8 9f ff ff ff       	call   c001662a <VCache::writeWriteBuffer()>
c001668b:	83 c4 10             	add    esp,0x10
c001668e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016692:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016695:	83 ec 0c             	sub    esp,0xc
c0016698:	50                   	push   eax
c0016699:	e8 46 8e ff ff       	call   c000f4e4 <free>
c001669e:	83 c4 10             	add    esp,0x10
c00166a1:	90                   	nop
c00166a2:	83 c4 0c             	add    esp,0xc
c00166a5:	c3                   	ret    

c00166a6 <VCache::~VCache()>:
c00166a6:	83 ec 0c             	sub    esp,0xc
c00166a9:	83 ec 0c             	sub    esp,0xc
c00166ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166b0:	e8 b1 ff ff ff       	call   c0016666 <VCache::~VCache()>
c00166b5:	83 c4 10             	add    esp,0x10
c00166b8:	83 ec 08             	sub    esp,0x8
c00166bb:	6a 30                	push   0x30
c00166bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166c1:	e8 2b bf ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00166c6:	83 c4 10             	add    esp,0x10
c00166c9:	83 c4 0c             	add    esp,0xc
c00166cc:	c3                   	ret    
c00166cd:	90                   	nop

c00166ce <VCache::write(unsigned long long, int, void*)>:
c00166ce:	55                   	push   ebp
c00166cf:	57                   	push   edi
c00166d0:	56                   	push   esi
c00166d1:	53                   	push   ebx
c00166d2:	83 ec 28             	sub    esp,0x28
c00166d5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00166d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00166dd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00166e1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00166e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00166e8:	e8 0f 6b 00 00       	call   c001d1fc <Semaphore::acquire()>
c00166ed:	83 c4 10             	add    esp,0x10
c00166f0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00166f4:	74 66                	je     c001675c <VCache::write(unsigned long long, int, void*)+0x8e>
c00166f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166f9:	99                   	cdq    
c00166fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166fe:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016701:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016704:	89 c1                	mov    ecx,eax
c0016706:	89 d0                	mov    eax,edx
c0016708:	31 f1                	xor    ecx,esi
c001670a:	31 f8                	xor    eax,edi
c001670c:	89 ca                	mov    edx,ecx
c001670e:	09 c2                	or     edx,eax
c0016710:	75 3e                	jne    c0016750 <VCache::write(unsigned long long, int, void*)+0x82>
c0016712:	83 fd 01             	cmp    ebp,0x1
c0016715:	75 39                	jne    c0016750 <VCache::write(unsigned long long, int, void*)+0x82>
c0016717:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001671a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016720:	51                   	push   ecx
c0016721:	50                   	push   eax
c0016722:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016726:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001672a:	0f af c8             	imul   ecx,eax
c001672d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016730:	51                   	push   ecx
c0016731:	e8 1f 9f fe ff       	call   c0000655 <memcpy>
c0016736:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016739:	83 c4 10             	add    esp,0x10
c001673c:	40                   	inc    eax
c001673d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016740:	83 f8 40             	cmp    eax,0x40
c0016743:	75 57                	jne    c001679c <VCache::write(unsigned long long, int, void*)+0xce>
c0016745:	83 ec 0c             	sub    esp,0xc
c0016748:	53                   	push   ebx
c0016749:	e8 dc fe ff ff       	call   c001662a <VCache::writeWriteBuffer()>
c001674e:	eb 34                	jmp    c0016784 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016750:	83 ec 0c             	sub    esp,0xc
c0016753:	53                   	push   ebx
c0016754:	e8 d1 fe ff ff       	call   c001662a <VCache::writeWriteBuffer()>
c0016759:	83 c4 10             	add    esp,0x10
c001675c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001675f:	83 fd 3f             	cmp    ebp,0x3f
c0016762:	7f 25                	jg     c0016789 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016764:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016767:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001676a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001676d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016771:	52                   	push   edx
c0016772:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016778:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001677c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001677f:	e8 d1 9e fe ff       	call   c0000655 <memcpy>
c0016784:	83 c4 10             	add    esp,0x10
c0016787:	eb 13                	jmp    c001679c <VCache::write(unsigned long long, int, void*)+0xce>
c0016789:	83 ec 0c             	sub    esp,0xc
c001678c:	8b 10                	mov    edx,DWORD PTR [eax]
c001678e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016792:	55                   	push   ebp
c0016793:	57                   	push   edi
c0016794:	56                   	push   esi
c0016795:	50                   	push   eax
c0016796:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016799:	83 c4 20             	add    esp,0x20
c001679c:	83 ec 0c             	sub    esp,0xc
c001679f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167a2:	e8 03 70 00 00       	call   c001d7aa <Semaphore::release()>
c00167a7:	83 c4 2c             	add    esp,0x2c
c00167aa:	31 c0                	xor    eax,eax
c00167ac:	5b                   	pop    ebx
c00167ad:	5e                   	pop    esi
c00167ae:	5f                   	pop    edi
c00167af:	5d                   	pop    ebp
c00167b0:	c3                   	ret    
c00167b1:	90                   	nop

c00167b2 <VCache::read(unsigned long long, int, void*)>:
c00167b2:	57                   	push   edi
c00167b3:	56                   	push   esi
c00167b4:	53                   	push   ebx
c00167b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00167bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00167c1:	83 ec 0c             	sub    esp,0xc
c00167c4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167c7:	e8 30 6a 00 00       	call   c001d1fc <Semaphore::acquire()>
c00167cc:	83 c4 10             	add    esp,0x10
c00167cf:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00167d3:	74 0c                	je     c00167e1 <VCache::read(unsigned long long, int, void*)+0x2f>
c00167d5:	83 ec 0c             	sub    esp,0xc
c00167d8:	53                   	push   ebx
c00167d9:	e8 4c fe ff ff       	call   c001662a <VCache::writeWriteBuffer()>
c00167de:	83 c4 10             	add    esp,0x10
c00167e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00167e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167f1:	57                   	push   edi
c00167f2:	56                   	push   esi
c00167f3:	50                   	push   eax
c00167f4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00167f7:	83 c4 14             	add    esp,0x14
c00167fa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167fd:	e8 a8 6f 00 00       	call   c001d7aa <Semaphore::release()>
c0016802:	83 c4 10             	add    esp,0x10
c0016805:	31 c0                	xor    eax,eax
c0016807:	5b                   	pop    ebx
c0016808:	5e                   	pop    esi
c0016809:	5f                   	pop    edi
c001680a:	c3                   	ret    
c001680b:	90                   	nop

c001680c <Video::putrect(int, int, int, int, unsigned int)>:
c001680c:	55                   	push   ebp
c001680d:	57                   	push   edi
c001680e:	56                   	push   esi
c001680f:	53                   	push   ebx
c0016810:	83 ec 1c             	sub    esp,0x1c
c0016813:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016817:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001681b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001681f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016823:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001682b:	01 df                	add    edi,ebx
c001682d:	39 fb                	cmp    ebx,edi
c001682f:	7d 1f                	jge    c0016850 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016831:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016835:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016839:	7d 12                	jge    c001684d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001683b:	8b 16                	mov    edx,DWORD PTR [esi]
c001683d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016841:	53                   	push   ebx
c0016842:	55                   	push   ebp
c0016843:	45                   	inc    ebp
c0016844:	56                   	push   esi
c0016845:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016848:	83 c4 10             	add    esp,0x10
c001684b:	eb e8                	jmp    c0016835 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001684d:	43                   	inc    ebx
c001684e:	eb dd                	jmp    c001682d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016850:	83 c4 1c             	add    esp,0x1c
c0016853:	5b                   	pop    ebx
c0016854:	5e                   	pop    esi
c0016855:	5f                   	pop    edi
c0016856:	5d                   	pop    ebp
c0016857:	c3                   	ret    

c0016858 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016858:	55                   	push   ebp
c0016859:	57                   	push   edi
c001685a:	31 ff                	xor    edi,edi
c001685c:	56                   	push   esi
c001685d:	53                   	push   ebx
c001685e:	83 ec 1c             	sub    esp,0x1c
c0016861:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016865:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016869:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016870:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016875:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016879:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001687d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016881:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016884:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016888:	01 f9                	add    ecx,edi
c001688a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001688e:	7d 2f                	jge    c00168bf <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016890:	31 f6                	xor    esi,esi
c0016892:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016896:	01 f2                	add    edx,esi
c0016898:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001689c:	7d 1a                	jge    c00168b8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001689e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00168a1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00168a4:	46                   	inc    esi
c00168a5:	51                   	push   ecx
c00168a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168aa:	52                   	push   edx
c00168ab:	55                   	push   ebp
c00168ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00168af:	83 c4 10             	add    esp,0x10
c00168b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168b6:	eb da                	jmp    c0016892 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00168b8:	47                   	inc    edi
c00168b9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00168bd:	eb c5                	jmp    c0016884 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00168bf:	83 c4 1c             	add    esp,0x1c
c00168c2:	5b                   	pop    ebx
c00168c3:	5e                   	pop    esi
c00168c4:	5f                   	pop    edi
c00168c5:	5d                   	pop    ebp
c00168c6:	c3                   	ret    
c00168c7:	90                   	nop

c00168c8 <Video::blit(unsigned int*, int, int, int, int)>:
c00168c8:	55                   	push   ebp
c00168c9:	57                   	push   edi
c00168ca:	56                   	push   esi
c00168cb:	53                   	push   ebx
c00168cc:	83 ec 1c             	sub    esp,0x1c
c00168cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00168d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168d7:	85 c0                	test   eax,eax
c00168d9:	79 02                	jns    c00168dd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00168db:	31 c0                	xor    eax,eax
c00168dd:	c1 e0 02             	shl    eax,0x2
c00168e0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00168e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00168ec:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00168f0:	39 d8                	cmp    eax,ebx
c00168f2:	7e 49                	jle    c001693d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00168f4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00168fa:	7c 41                	jl     c001693d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00168fc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016900:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016904:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016908:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001690c:	39 f9                	cmp    ecx,edi
c001690e:	7e 22                	jle    c0016932 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016910:	83 c5 04             	add    ebp,0x4
c0016913:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016919:	7c 14                	jl     c001692f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001691b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001691d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016920:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016924:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016928:	56                   	push   esi
c0016929:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001692c:	83 c4 10             	add    esp,0x10
c001692f:	47                   	inc    edi
c0016930:	eb d2                	jmp    c0016904 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016936:	43                   	inc    ebx
c0016937:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001693b:	eb ab                	jmp    c00168e8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001693d:	83 c4 1c             	add    esp,0x1c
c0016940:	5b                   	pop    ebx
c0016941:	5e                   	pop    esi
c0016942:	5f                   	pop    edi
c0016943:	5d                   	pop    ebp
c0016944:	c3                   	ret    
c0016945:	90                   	nop

c0016946 <Video::clearScreen(unsigned int)>:
c0016946:	57                   	push   edi
c0016947:	56                   	push   esi
c0016948:	53                   	push   ebx
c0016949:	31 db                	xor    ebx,ebx
c001694b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001694f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016955:	7e 1f                	jle    c0016976 <Video::clearScreen(unsigned int)+0x30>
c0016957:	31 ff                	xor    edi,edi
c0016959:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001695f:	7e 12                	jle    c0016973 <Video::clearScreen(unsigned int)+0x2d>
c0016961:	8b 06                	mov    eax,DWORD PTR [esi]
c0016963:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016967:	53                   	push   ebx
c0016968:	57                   	push   edi
c0016969:	47                   	inc    edi
c001696a:	56                   	push   esi
c001696b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001696e:	83 c4 10             	add    esp,0x10
c0016971:	eb e6                	jmp    c0016959 <Video::clearScreen(unsigned int)+0x13>
c0016973:	43                   	inc    ebx
c0016974:	eb d9                	jmp    c001694f <Video::clearScreen(unsigned int)+0x9>
c0016976:	5b                   	pop    ebx
c0016977:	5e                   	pop    esi
c0016978:	5f                   	pop    edi
c0016979:	c3                   	ret    

c001697a <Video::putpixel(int, int, unsigned int)>:
c001697a:	c7 44 24 04 04 9a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029a04
c0016982:	e9 64 2e 00 00       	jmp    c00197eb <Krnl::panic(char const*)>
c0016987:	90                   	nop

c0016988 <Video::Video(char const*)>:
c0016988:	83 ec 0c             	sub    esp,0xc
c001698b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001698f:	83 ec 08             	sub    esp,0x8
c0016992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016996:	50                   	push   eax
c0016997:	e8 14 d3 ff ff       	call   c0013cb0 <Device::Device(char const*)>
c001699c:	83 c4 10             	add    esp,0x10
c001699f:	ba 88 9a 02 c0       	mov    edx,0xc0029a88
c00169a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169a8:	89 10                	mov    DWORD PTR [eax],edx
c00169aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169ae:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00169b8:	90                   	nop
c00169b9:	83 c4 0c             	add    esp,0xc
c00169bc:	c3                   	ret    
c00169bd:	90                   	nop

c00169be <Video::~Video()>:
c00169be:	83 ec 0c             	sub    esp,0xc
c00169c1:	ba 88 9a 02 c0       	mov    edx,0xc0029a88
c00169c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169ca:	89 10                	mov    DWORD PTR [eax],edx
c00169cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169d0:	83 ec 0c             	sub    esp,0xc
c00169d3:	50                   	push   eax
c00169d4:	e8 b9 cf ff ff       	call   c0013992 <Device::~Device()>
c00169d9:	83 c4 10             	add    esp,0x10
c00169dc:	90                   	nop
c00169dd:	83 c4 0c             	add    esp,0xc
c00169e0:	c3                   	ret    
c00169e1:	90                   	nop

c00169e2 <Video::~Video()>:
c00169e2:	83 ec 0c             	sub    esp,0xc
c00169e5:	83 ec 0c             	sub    esp,0xc
c00169e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169ec:	e8 cd ff ff ff       	call   c00169be <Video::~Video()>
c00169f1:	83 c4 10             	add    esp,0x10
c00169f4:	83 ec 08             	sub    esp,0x8
c00169f7:	68 64 01 00 00       	push   0x164
c00169fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a00:	e8 ec bb ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0016a05:	83 c4 10             	add    esp,0x10
c0016a08:	83 c4 0c             	add    esp,0xc
c0016a0b:	c3                   	ret    

c0016a0c <Video::isMonochrome()>:
c0016a0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a10:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016a16:	c3                   	ret    
c0016a17:	90                   	nop

c0016a18 <Video::getWidth()>:
c0016a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a1c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016a22:	c3                   	ret    
c0016a23:	90                   	nop

c0016a24 <Video::getHeight()>:
c0016a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a28:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a2e:	c3                   	ret    
c0016a2f:	90                   	nop

c0016a30 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016a30:	55                   	push   ebp
c0016a31:	57                   	push   edi
c0016a32:	56                   	push   esi
c0016a33:	53                   	push   ebx
c0016a34:	83 ec 2c             	sub    esp,0x2c
c0016a37:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016a3b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016a3f:	83 f8 01             	cmp    eax,0x1
c0016a42:	19 c9                	sbb    ecx,ecx
c0016a44:	31 db                	xor    ebx,ebx
c0016a46:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016a4a:	89 cd                	mov    ebp,ecx
c0016a4c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016a54:	f7 d5                	not    ebp
c0016a56:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016a5c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016a60:	01 d8                	add    eax,ebx
c0016a62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a66:	56                   	push   esi
c0016a67:	e8 b8 ff ff ff       	call   c0016a24 <Video::getHeight()>
c0016a6c:	59                   	pop    ecx
c0016a6d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016a71:	7e 70                	jle    c0016ae3 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016a73:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a77:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a7b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016a7e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a82:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a86:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016a8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a91:	89 f8                	mov    eax,edi
c0016a93:	83 c0 20             	add    eax,0x20
c0016a96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a9a:	56                   	push   esi
c0016a9b:	e8 78 ff ff ff       	call   c0016a18 <Video::getWidth()>
c0016aa0:	5a                   	pop    edx
c0016aa1:	39 c7                	cmp    edi,eax
c0016aa3:	7d 34                	jge    c0016ad9 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016aa5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016aaa:	74 05                	je     c0016ab1 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016aac:	8b 06                	mov    eax,DWORD PTR [esi]
c0016aae:	55                   	push   ebp
c0016aaf:	eb 0d                	jmp    c0016abe <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ab1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016ab6:	74 12                	je     c0016aca <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ab8:	8b 06                	mov    eax,DWORD PTR [esi]
c0016aba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016abe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ac2:	57                   	push   edi
c0016ac3:	56                   	push   esi
c0016ac4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016ace:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016ad2:	47                   	inc    edi
c0016ad3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016ad7:	75 c1                	jne    c0016a9a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016ad9:	43                   	inc    ebx
c0016ada:	83 fb 20             	cmp    ebx,0x20
c0016add:	0f 85 79 ff ff ff    	jne    c0016a5c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016ae3:	83 c4 2c             	add    esp,0x2c
c0016ae6:	5b                   	pop    ebx
c0016ae7:	5e                   	pop    esi
c0016ae8:	5f                   	pop    edi
c0016ae9:	5d                   	pop    ebp
c0016aea:	c3                   	ret    
c0016aeb:	90                   	nop

c0016aec <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016aec:	55                   	push   ebp
c0016aed:	57                   	push   edi
c0016aee:	56                   	push   esi
c0016aef:	53                   	push   ebx
c0016af0:	83 ec 28             	sub    esp,0x28
c0016af3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016af7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016afb:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016aff:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016b03:	c1 e7 08             	shl    edi,0x8
c0016b06:	01 c7                	add    edi,eax
c0016b08:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016b0c:	c1 e0 08             	shl    eax,0x8
c0016b0f:	01 d0                	add    eax,edx
c0016b11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b19:	0f af c7             	imul   eax,edi
c0016b1c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016b23:	50                   	push   eax
c0016b24:	e8 ab 89 ff ff       	call   c000f4d4 <malloc>
c0016b29:	83 c4 10             	add    esp,0x10
c0016b2c:	89 c5                	mov    ebp,eax
c0016b2e:	85 c0                	test   eax,eax
c0016b30:	75 15                	jne    c0016b47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016b32:	83 ec 0c             	sub    esp,0xc
c0016b35:	68 25 9a 02 c0       	push   0xc0029a25
c0016b3a:	e8 92 bb ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0016b3f:	83 c4 10             	add    esp,0x10
c0016b42:	e9 1c 01 00 00       	jmp    c0016c63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016b47:	be 12 00 00 00       	mov    esi,0x12
c0016b4c:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016b50:	74 11                	je     c0016b63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016b52:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016b56:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016b5a:	c1 fe 03             	sar    esi,0x3
c0016b5d:	0f af f0             	imul   esi,eax
c0016b60:	83 c6 12             	add    esi,0x12
c0016b63:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016b67:	74 04                	je     c0016b6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016b69:	85 ff                	test   edi,edi
c0016b6b:	75 12                	jne    c0016b7f <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016b6d:	83 ec 0c             	sub    esp,0xc
c0016b70:	68 3c 9a 02 c0       	push   0xc0029a3c
c0016b75:	e8 57 bb ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0016b7a:	e9 ce 00 00 00       	jmp    c0016c4d <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016b7f:	52                   	push   edx
c0016b80:	52                   	push   edx
c0016b81:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016b85:	50                   	push   eax
c0016b86:	68 51 9a 02 c0       	push   0xc0029a51
c0016b8b:	e8 41 bb ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0016b90:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016b94:	83 c4 10             	add    esp,0x10
c0016b97:	80 fa 02             	cmp    dl,0x2
c0016b9a:	0f 85 98 00 00 00    	jne    c0016c38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016ba0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016ba5:	75 10                	jne    c0016bb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016ba7:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016bab:	75 0a                	jne    c0016bb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016bad:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016bb0:	83 e8 18             	sub    eax,0x18
c0016bb3:	a8 f7                	test   al,0xf7
c0016bb5:	74 0a                	je     c0016bc1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016bb7:	83 ec 0c             	sub    esp,0xc
c0016bba:	68 5e 9a 02 c0       	push   0xc0029a5e
c0016bbf:	eb 7f                	jmp    c0016c40 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016bc1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016bc9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016bd1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016bd5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016bdd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016be1:	75 0c                	jne    c0016bef <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016be3:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016be8:	c1 e0 18             	shl    eax,0x18
c0016beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bef:	41                   	inc    ecx
c0016bf0:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016bf5:	c1 e2 10             	shl    edx,0x10
c0016bf8:	89 d0                	mov    eax,edx
c0016bfa:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016bff:	c1 e2 08             	shl    edx,0x8
c0016c02:	09 c2                	or     edx,eax
c0016c04:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016c08:	09 c2                	or     edx,eax
c0016c0a:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016c0e:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016c12:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016c16:	c1 f8 03             	sar    eax,0x3
c0016c19:	01 c6                	add    esi,eax
c0016c1b:	89 c8                	mov    eax,ecx
c0016c1d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016c21:	39 c7                	cmp    edi,eax
c0016c23:	7f b0                	jg     c0016bd5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016c25:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016c29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c2d:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016c30:	7e 22                	jle    c0016c54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016c32:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016c36:	eb 99                	jmp    c0016bd1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016c38:	50                   	push   eax
c0016c39:	50                   	push   eax
c0016c3a:	52                   	push   edx
c0016c3b:	68 6c 9a 02 c0       	push   0xc0029a6c
c0016c40:	e8 8c ba ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0016c45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016c48:	e8 97 88 ff ff       	call   c000f4e4 <free>
c0016c4d:	83 c4 10             	add    esp,0x10
c0016c50:	31 ed                	xor    ebp,ebp
c0016c52:	eb 0f                	jmp    c0016c63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016c54:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c58:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c5b:	89 38                	mov    DWORD PTR [eax],edi
c0016c5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c61:	89 08                	mov    DWORD PTR [eax],ecx
c0016c63:	83 c4 1c             	add    esp,0x1c
c0016c66:	89 e8                	mov    eax,ebp
c0016c68:	5b                   	pop    ebx
c0016c69:	5e                   	pop    esi
c0016c6a:	5f                   	pop    edi
c0016c6b:	5d                   	pop    ebp
c0016c6c:	c3                   	ret    
c0016c6d:	90                   	nop

c0016c6e <Video::putTGA(int, int, unsigned char*, int)>:
c0016c6e:	55                   	push   ebp
c0016c6f:	57                   	push   edi
c0016c70:	56                   	push   esi
c0016c71:	53                   	push   ebx
c0016c72:	83 ec 28             	sub    esp,0x28
c0016c75:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016c79:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c7d:	50                   	push   eax
c0016c7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c82:	50                   	push   eax
c0016c83:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c87:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c8b:	56                   	push   esi
c0016c8c:	e8 5b fe ff ff       	call   c0016aec <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016c91:	83 c4 20             	add    esp,0x20
c0016c94:	85 c0                	test   eax,eax
c0016c96:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c9a:	74 35                	je     c0016cd1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016c9c:	89 c7                	mov    edi,eax
c0016c9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ca2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016ca6:	39 d8                	cmp    eax,ebx
c0016ca8:	7e 27                	jle    c0016cd1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016caa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016cae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016cb2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016cb6:	39 e8                	cmp    eax,ebp
c0016cb8:	7e 14                	jle    c0016cce <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016cba:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cbc:	83 c7 04             	add    edi,0x4
c0016cbf:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016cc2:	53                   	push   ebx
c0016cc3:	55                   	push   ebp
c0016cc4:	45                   	inc    ebp
c0016cc5:	56                   	push   esi
c0016cc6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016cc9:	83 c4 10             	add    esp,0x10
c0016ccc:	eb e0                	jmp    c0016cae <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016cce:	43                   	inc    ebx
c0016ccf:	eb cd                	jmp    c0016c9e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016cd1:	83 c4 1c             	add    esp,0x1c
c0016cd4:	5b                   	pop    ebx
c0016cd5:	5e                   	pop    esi
c0016cd6:	5f                   	pop    edi
c0016cd7:	5d                   	pop    ebp
c0016cd8:	c3                   	ret    
c0016cd9:	90                   	nop

c0016cda <ACPI::close(int, int, void*)>:
c0016cda:	83 ec 1c             	sub    esp,0x1c
c0016cdd:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016ce5:	74 0a                	je     c0016cf1 <ACPI::close(int, int, void*)+0x17>
c0016ce7:	b8 00 00 00 00       	mov    eax,0x0
c0016cec:	e9 9a 00 00 00       	jmp    c0016d8b <ACPI::close(int, int, void*)+0xb1>
c0016cf1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016cf6:	75 37                	jne    c0016d2f <ACPI::close(int, int, void*)+0x55>
c0016cf8:	83 ec 0c             	sub    esp,0xc
c0016cfb:	68 c8 9a 02 c0       	push   0xc0029ac8
c0016d00:	e8 cc b9 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	a1 28 cf 02 c0       	mov    eax,ds:0xc002cf28
c0016d0d:	85 c0                	test   eax,eax
c0016d0f:	74 07                	je     c0016d18 <ACPI::close(int, int, void*)+0x3e>
c0016d11:	a1 28 cf 02 c0       	mov    eax,ds:0xc002cf28
c0016d16:	ff d0                	call   eax
c0016d18:	83 ec 0c             	sub    esp,0xc
c0016d1b:	68 9c 9b 02 c0       	push   0xc0029b9c
c0016d20:	e8 c6 2a 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0016d25:	83 c4 10             	add    esp,0x10
c0016d28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016d2d:	eb 5c                	jmp    c0016d8b <ACPI::close(int, int, void*)+0xb1>
c0016d2f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016d34:	75 50                	jne    c0016d86 <ACPI::close(int, int, void*)+0xac>
c0016d36:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c0016d3b:	85 c0                	test   eax,eax
c0016d3d:	74 07                	je     c0016d46 <ACPI::close(int, int, void*)+0x6c>
c0016d3f:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c0016d44:	ff d0                	call   eax
c0016d46:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016d4b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016d50:	83 e0 02             	and    eax,0x2
c0016d53:	74 1c                	je     c0016d71 <ACPI::close(int, int, void*)+0x97>
c0016d55:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016d5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d60:	89 c2                	mov    edx,eax
c0016d62:	ec                   	in     al,dx
c0016d63:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016d67:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016d6b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016d6f:	eb da                	jmp    c0016d4b <ACPI::close(int, int, void*)+0x71>
c0016d71:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016d78:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016d7d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016d81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d85:	ee                   	out    dx,al
c0016d86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016d8b:	83 c4 1c             	add    esp,0x1c
c0016d8e:	c3                   	ret    

c0016d8f <findRSDP()>:
c0016d8f:	83 ec 1c             	sub    esp,0x1c
c0016d92:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0016d97:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016d9d:	83 e0 04             	and    eax,0x4
c0016da0:	84 c0                	test   al,al
c0016da2:	75 07                	jne    c0016dab <findRSDP()+0x1c>
c0016da4:	b8 00 00 00 00       	mov    eax,0x0
c0016da9:	eb 6a                	jmp    c0016e15 <findRSDP()+0x86>
c0016dab:	a1 f0 c8 02 c0       	mov    eax,ds:0xc002c8f0
c0016db0:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016db5:	7f 1b                	jg     c0016dd2 <findRSDP()+0x43>
c0016db7:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0016dbc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016dc2:	83 e2 fb             	and    edx,0xfffffffb
c0016dc5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016dcb:	b8 00 00 00 00       	mov    eax,0x0
c0016dd0:	eb 43                	jmp    c0016e15 <findRSDP()+0x86>
c0016dd2:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016dda:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016de2:	77 2c                	ja     c0016e10 <findRSDP()+0x81>
c0016de4:	83 ec 04             	sub    esp,0x4
c0016de7:	6a 08                	push   0x8
c0016de9:	68 d5 9a 02 c0       	push   0xc0029ad5
c0016dee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016df2:	e8 fb 97 fe ff       	call   c00005f2 <memcmp>
c0016df7:	83 c4 10             	add    esp,0x10
c0016dfa:	85 c0                	test   eax,eax
c0016dfc:	0f 94 c0             	sete   al
c0016dff:	84 c0                	test   al,al
c0016e01:	74 06                	je     c0016e09 <findRSDP()+0x7a>
c0016e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e07:	eb 0c                	jmp    c0016e15 <findRSDP()+0x86>
c0016e09:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016e0e:	eb ca                	jmp    c0016dda <findRSDP()+0x4b>
c0016e10:	b8 00 00 00 00       	mov    eax,0x0
c0016e15:	83 c4 1c             	add    esp,0x1c
c0016e18:	c3                   	ret    

c0016e19 <loadACPITables(unsigned char*)>:
c0016e19:	56                   	push   esi
c0016e1a:	53                   	push   ebx
c0016e1b:	83 ec 44             	sub    esp,0x44
c0016e1e:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0016e23:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e29:	83 e0 04             	and    eax,0x4
c0016e2c:	84 c0                	test   al,al
c0016e2e:	0f 84 05 02 00 00    	je     c0017039 <loadACPITables(unsigned char*)+0x220>
c0016e34:	a0 40 d1 02 c0       	mov    al,ds:0xc002d140
c0016e39:	84 c0                	test   al,al
c0016e3b:	74 75                	je     c0016eb2 <loadACPITables(unsigned char*)+0x99>
c0016e3d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016e45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e4c:	83 e8 24             	sub    eax,0x24
c0016e4f:	c1 e8 03             	shr    eax,0x3
c0016e52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016e56:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016e5e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e62:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016e66:	0f 8d b2 00 00 00    	jge    c0016f1e <loadACPITables(unsigned char*)+0x105>
c0016e6c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e70:	83 c0 24             	add    eax,0x24
c0016e73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016e77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016e7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e83:	c1 e0 03             	shl    eax,0x3
c0016e86:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016e8a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e8e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016e91:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e93:	89 c1                	mov    ecx,eax
c0016e95:	a1 2c cf 02 c0       	mov    eax,ds:0xc002cf2c
c0016e9a:	8d 50 01             	lea    edx,[eax+0x1]
c0016e9d:	89 15 2c cf 02 c0    	mov    DWORD PTR ds:0xc002cf2c,edx
c0016ea3:	89 ca                	mov    edx,ecx
c0016ea5:	89 14 c5 44 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd30bc],edx
c0016eac:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016eb0:	eb ac                	jmp    c0016e5e <loadACPITables(unsigned char*)+0x45>
c0016eb2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016eb6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ebe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ec1:	83 e8 24             	sub    eax,0x24
c0016ec4:	c1 e8 02             	shr    eax,0x2
c0016ec7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ecb:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016ed3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ed7:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016edb:	7d 41                	jge    c0016f1e <loadACPITables(unsigned char*)+0x105>
c0016edd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ee1:	83 c0 24             	add    eax,0x24
c0016ee4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ee8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016eec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ef0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ef4:	c1 e0 02             	shl    eax,0x2
c0016ef7:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016efb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016eff:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016f01:	a1 2c cf 02 c0       	mov    eax,ds:0xc002cf2c
c0016f06:	8d 50 01             	lea    edx,[eax+0x1]
c0016f09:	89 15 2c cf 02 c0    	mov    DWORD PTR ds:0xc002cf2c,edx
c0016f0f:	89 ca                	mov    edx,ecx
c0016f11:	89 14 c5 44 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd30bc],edx
c0016f18:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016f1c:	eb b5                	jmp    c0016ed3 <loadACPITables(unsigned char*)+0xba>
c0016f1e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016f26:	a1 2c cf 02 c0       	mov    eax,ds:0xc002cf2c
c0016f2b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016f2f:	0f 8d 05 01 00 00    	jge    c001703a <loadACPITables(unsigned char*)+0x221>
c0016f35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f39:	8b 04 c5 44 cf 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd30bc]
c0016f40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f50:	25 ff 0f 00 00       	and    eax,0xfff
c0016f55:	89 c6                	mov    esi,eax
c0016f57:	e8 15 a9 ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c0016f5c:	89 c3                	mov    ebx,eax
c0016f5e:	83 ec 0c             	sub    esp,0xc
c0016f61:	6a 01                	push   0x1
c0016f63:	e8 79 a7 ff ff       	call   c00116e1 <Virt::allocateKernelVirtualPages(int)>
c0016f68:	83 c4 10             	add    esp,0x10
c0016f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f6f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016f75:	83 ec 0c             	sub    esp,0xc
c0016f78:	6a 01                	push   0x1
c0016f7a:	6a 01                	push   0x1
c0016f7c:	50                   	push   eax
c0016f7d:	52                   	push   edx
c0016f7e:	53                   	push   ebx
c0016f7f:	e8 1c b1 ff ff       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016f84:	83 c4 20             	add    esp,0x20
c0016f87:	09 f0                	or     eax,esi
c0016f89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f91:	c1 e0 03             	shl    eax,0x3
c0016f94:	05 40 cf 02 c0       	add    eax,0xc002cf40
c0016f99:	83 ec 04             	sub    esp,0x4
c0016f9c:	6a 04                	push   0x4
c0016f9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fa2:	50                   	push   eax
c0016fa3:	e8 ad 96 fe ff       	call   c0000655 <memcpy>
c0016fa8:	83 c4 10             	add    esp,0x10
c0016fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016faf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016fb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fba:	05 00 10 00 00       	add    eax,0x1000
c0016fbf:	c1 e8 0c             	shr    eax,0xc
c0016fc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fca:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fd1:	25 ff 0f 00 00       	and    eax,0xfff
c0016fd6:	89 c6                	mov    esi,eax
c0016fd8:	e8 94 a8 ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c0016fdd:	89 c3                	mov    ebx,eax
c0016fdf:	83 ec 0c             	sub    esp,0xc
c0016fe2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016fe6:	e8 f6 a6 ff ff       	call   c00116e1 <Virt::allocateKernelVirtualPages(int)>
c0016feb:	83 c4 10             	add    esp,0x10
c0016fee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ff2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016ff8:	83 ec 0c             	sub    esp,0xc
c0016ffb:	6a 01                	push   0x1
c0016ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017001:	50                   	push   eax
c0017002:	52                   	push   edx
c0017003:	53                   	push   ebx
c0017004:	e8 97 b0 ff ff       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017009:	83 c4 20             	add    esp,0x20
c001700c:	09 f0                	or     eax,esi
c001700e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017012:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017015:	83 ec 0c             	sub    esp,0xc
c0017018:	50                   	push   eax
c0017019:	e8 27 aa ff ff       	call   c0011a45 <Virt::freeKernelVirtualPages(unsigned long)>
c001701e:	83 c4 10             	add    esp,0x10
c0017021:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017025:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017029:	89 14 c5 44 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd30bc],edx
c0017030:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017034:	e9 ed fe ff ff       	jmp    c0016f26 <loadACPITables(unsigned char*)+0x10d>
c0017039:	90                   	nop
c001703a:	83 c4 44             	add    esp,0x44
c001703d:	5b                   	pop    ebx
c001703e:	5e                   	pop    esi
c001703f:	c3                   	ret    

c0017040 <findRSDT(unsigned char*)>:
c0017040:	56                   	push   esi
c0017041:	53                   	push   ebx
c0017042:	83 ec 44             	sub    esp,0x44
c0017045:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001704a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017050:	83 e0 04             	and    eax,0x4
c0017053:	84 c0                	test   al,al
c0017055:	75 0a                	jne    c0017061 <findRSDT(unsigned char*)+0x21>
c0017057:	b8 00 00 00 00       	mov    eax,0x0
c001705c:	e9 f7 00 00 00       	jmp    c0017158 <findRSDT(unsigned char*)+0x118>
c0017061:	83 ec 04             	sub    esp,0x4
c0017064:	6a 24                	push   0x24
c0017066:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001706a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001706e:	50                   	push   eax
c001706f:	e8 e1 95 fe ff       	call   c0000655 <memcpy>
c0017074:	83 c4 10             	add    esp,0x10
c0017077:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001707b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001707f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001708b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001708f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017093:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017097:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001709b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001709f:	25 ff 0f 00 00       	and    eax,0xfff
c00170a4:	89 c6                	mov    esi,eax
c00170a6:	e8 c6 a7 ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c00170ab:	89 c3                	mov    ebx,eax
c00170ad:	83 ec 0c             	sub    esp,0xc
c00170b0:	6a 02                	push   0x2
c00170b2:	e8 2a a6 ff ff       	call   c00116e1 <Virt::allocateKernelVirtualPages(int)>
c00170b7:	83 c4 10             	add    esp,0x10
c00170ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00170be:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170c4:	83 ec 0c             	sub    esp,0xc
c00170c7:	6a 01                	push   0x1
c00170c9:	6a 02                	push   0x2
c00170cb:	50                   	push   eax
c00170cc:	52                   	push   edx
c00170cd:	53                   	push   ebx
c00170ce:	e8 cd af ff ff       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170d3:	83 c4 20             	add    esp,0x20
c00170d6:	09 f0                	or     eax,esi
c00170d8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00170dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170e0:	25 ff 0f 00 00       	and    eax,0xfff
c00170e5:	89 c6                	mov    esi,eax
c00170e7:	e8 85 a7 ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c00170ec:	89 c3                	mov    ebx,eax
c00170ee:	83 ec 0c             	sub    esp,0xc
c00170f1:	6a 02                	push   0x2
c00170f3:	e8 e9 a5 ff ff       	call   c00116e1 <Virt::allocateKernelVirtualPages(int)>
c00170f8:	83 c4 10             	add    esp,0x10
c00170fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170ff:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017105:	83 ec 0c             	sub    esp,0xc
c0017108:	6a 01                	push   0x1
c001710a:	6a 02                	push   0x2
c001710c:	50                   	push   eax
c001710d:	52                   	push   edx
c001710e:	53                   	push   ebx
c001710f:	e8 8c af ff ff       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017114:	83 c4 20             	add    esp,0x20
c0017117:	09 f0                	or     eax,esi
c0017119:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001711d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017122:	75 11                	jne    c0017135 <findRSDT(unsigned char*)+0xf5>
c0017124:	c6 05 40 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d140,0x0
c001712b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001712f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017133:	eb 1f                	jmp    c0017154 <findRSDT(unsigned char*)+0x114>
c0017135:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001713a:	75 11                	jne    c001714d <findRSDT(unsigned char*)+0x10d>
c001713c:	c6 05 40 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d140,0x1
c0017143:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017147:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001714b:	eb 07                	jmp    c0017154 <findRSDT(unsigned char*)+0x114>
c001714d:	b8 00 00 00 00       	mov    eax,0x0
c0017152:	eb 04                	jmp    c0017158 <findRSDT(unsigned char*)+0x118>
c0017154:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017158:	83 c4 44             	add    esp,0x44
c001715b:	5b                   	pop    ebx
c001715c:	5e                   	pop    esi
c001715d:	c3                   	ret    

c001715e <findDataTable(unsigned char*, char*)>:
c001715e:	83 ec 1c             	sub    esp,0x1c
c0017161:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0017166:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001716c:	83 e0 04             	and    eax,0x4
c001716f:	84 c0                	test   al,al
c0017171:	75 07                	jne    c001717a <findDataTable(unsigned char*, char*)+0x1c>
c0017173:	b8 00 00 00 00       	mov    eax,0x0
c0017178:	eb 7c                	jmp    c00171f6 <findDataTable(unsigned char*, char*)+0x98>
c001717a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017182:	a1 2c cf 02 c0       	mov    eax,ds:0xc002cf2c
c0017187:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001718b:	7d 3a                	jge    c00171c7 <findDataTable(unsigned char*, char*)+0x69>
c001718d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017191:	c1 e0 03             	shl    eax,0x3
c0017194:	05 40 cf 02 c0       	add    eax,0xc002cf40
c0017199:	83 ec 04             	sub    esp,0x4
c001719c:	6a 04                	push   0x4
c001719e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171a2:	50                   	push   eax
c00171a3:	e8 4a 94 fe ff       	call   c00005f2 <memcmp>
c00171a8:	83 c4 10             	add    esp,0x10
c00171ab:	85 c0                	test   eax,eax
c00171ad:	0f 94 c0             	sete   al
c00171b0:	84 c0                	test   al,al
c00171b2:	74 0d                	je     c00171c1 <findDataTable(unsigned char*, char*)+0x63>
c00171b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171b8:	8b 04 c5 44 cf 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd30bc]
c00171bf:	eb 35                	jmp    c00171f6 <findDataTable(unsigned char*, char*)+0x98>
c00171c1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00171c5:	eb bb                	jmp    c0017182 <findDataTable(unsigned char*, char*)+0x24>
c00171c7:	a0 40 d1 02 c0       	mov    al,ds:0xc002d140
c00171cc:	84 c0                	test   al,al
c00171ce:	74 07                	je     c00171d7 <findDataTable(unsigned char*, char*)+0x79>
c00171d0:	b8 58 00 00 00       	mov    eax,0x58
c00171d5:	eb 05                	jmp    c00171dc <findDataTable(unsigned char*, char*)+0x7e>
c00171d7:	b8 52 00 00 00       	mov    eax,0x52
c00171dc:	83 ec 04             	sub    esp,0x4
c00171df:	50                   	push   eax
c00171e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171e4:	68 c0 9b 02 c0       	push   0xc0029bc0
c00171e9:	e8 e3 b4 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00171ee:	83 c4 10             	add    esp,0x10
c00171f1:	b8 00 00 00 00       	mov    eax,0x0
c00171f6:	83 c4 1c             	add    esp,0x1c
c00171f9:	c3                   	ret    

c00171fa <scanMADT()>:
c00171fa:	53                   	push   ebx
c00171fb:	83 ec 38             	sub    esp,0x38
c00171fe:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0017203:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017209:	83 e0 04             	and    eax,0x4
c001720c:	84 c0                	test   al,al
c001720e:	0f 84 63 04 00 00    	je     c0017677 <scanMADT()+0x47d>
c0017214:	e8 76 fb ff ff       	call   c0016d8f <findRSDP()>
c0017219:	a3 4c d1 02 c0       	mov    ds:0xc002d14c,eax
c001721e:	a1 4c d1 02 c0       	mov    eax,ds:0xc002d14c
c0017223:	85 c0                	test   eax,eax
c0017225:	75 19                	jne    c0017240 <scanMADT()+0x46>
c0017227:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001722c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017232:	83 e2 fb             	and    edx,0xfffffffb
c0017235:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001723b:	e9 3b 04 00 00       	jmp    c001767b <scanMADT()+0x481>
c0017240:	a1 4c d1 02 c0       	mov    eax,ds:0xc002d14c
c0017245:	83 ec 0c             	sub    esp,0xc
c0017248:	50                   	push   eax
c0017249:	e8 f2 fd ff ff       	call   c0017040 <findRSDT(unsigned char*)>
c001724e:	83 c4 10             	add    esp,0x10
c0017251:	a3 48 d1 02 c0       	mov    ds:0xc002d148,eax
c0017256:	a1 48 d1 02 c0       	mov    eax,ds:0xc002d148
c001725b:	85 c0                	test   eax,eax
c001725d:	75 19                	jne    c0017278 <scanMADT()+0x7e>
c001725f:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0017264:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001726a:	83 e2 fb             	and    edx,0xfffffffb
c001726d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017273:	e9 03 04 00 00       	jmp    c001767b <scanMADT()+0x481>
c0017278:	a1 48 d1 02 c0       	mov    eax,ds:0xc002d148
c001727d:	83 ec 0c             	sub    esp,0xc
c0017280:	50                   	push   eax
c0017281:	e8 93 fb ff ff       	call   c0016e19 <loadACPITables(unsigned char*)>
c0017286:	83 c4 10             	add    esp,0x10
c0017289:	a1 48 d1 02 c0       	mov    eax,ds:0xc002d148
c001728e:	83 ec 08             	sub    esp,0x8
c0017291:	68 de 9a 02 c0       	push   0xc0029ade
c0017296:	50                   	push   eax
c0017297:	e8 c2 fe ff ff       	call   c001715e <findDataTable(unsigned char*, char*)>
c001729c:	83 c4 10             	add    esp,0x10
c001729f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00172a3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00172a8:	75 19                	jne    c00172c3 <scanMADT()+0xc9>
c00172aa:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00172af:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00172b5:	83 e2 fe             	and    edx,0xfffffffe
c00172b8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00172be:	e9 b8 03 00 00       	jmp    c001767b <scanMADT()+0x481>
c00172c3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00172cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00172cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172d2:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00172d6:	0f 87 9f 03 00 00    	ja     c001767b <scanMADT()+0x481>
c00172dc:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00172e4:	0f 87 91 03 00 00    	ja     c001767b <scanMADT()+0x481>
c00172ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172f6:	8d 50 01             	lea    edx,[eax+0x1]
c00172f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017301:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017305:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017309:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001730d:	8d 50 01             	lea    edx,[eax+0x1]
c0017310:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017314:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017318:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001731c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017320:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017325:	0f 86 4f 03 00 00    	jbe    c001767a <scanMADT()+0x480>
c001732b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017330:	75 57                	jne    c0017389 <scanMADT()+0x18f>
c0017332:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017336:	8d 50 01             	lea    edx,[eax+0x1]
c0017339:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001733d:	8a 15 40 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d340
c0017343:	0f b6 d2             	movzx  edx,dl
c0017346:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001734a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001734e:	88 82 80 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2c80],al
c0017354:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017358:	8d 50 01             	lea    edx,[eax+0x1]
c001735b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001735f:	8a 15 40 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d340
c0017365:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017368:	88 0d 40 d3 02 c0    	mov    BYTE PTR ds:0xc002d340,cl
c001736e:	0f b6 d2             	movzx  edx,dl
c0017371:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017375:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017379:	88 82 60 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2ca0],al
c001737f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017384:	e9 da 02 00 00       	jmp    c0017663 <scanMADT()+0x469>
c0017389:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001738e:	0f 85 14 01 00 00    	jne    c00174a8 <scanMADT()+0x2ae>
c0017394:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017398:	8d 50 01             	lea    edx,[eax+0x1]
c001739b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001739f:	8a 15 00 d2 02 c0    	mov    dl,BYTE PTR ds:0xc002d200
c00173a5:	0f b6 d2             	movzx  edx,dl
c00173a8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00173ac:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00173b0:	88 82 20 d2 02 c0    	mov    BYTE PTR [edx-0x3ffd2de0],al
c00173b6:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00173ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173c2:	01 d0                	add    eax,edx
c00173c4:	83 c0 2c             	add    eax,0x2c
c00173c7:	8a 00                	mov    al,BYTE PTR [eax]
c00173c9:	0f b6 d0             	movzx  edx,al
c00173cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173d0:	8d 48 01             	lea    ecx,[eax+0x1]
c00173d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173d7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00173db:	0f b6 c0             	movzx  eax,al
c00173de:	c1 e0 08             	shl    eax,0x8
c00173e1:	89 d1                	mov    ecx,edx
c00173e3:	09 c1                	or     ecx,eax
c00173e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173e9:	8d 50 02             	lea    edx,[eax+0x2]
c00173ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173f0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173f4:	0f b6 c0             	movzx  eax,al
c00173f7:	c1 e0 10             	shl    eax,0x10
c00173fa:	09 c1                	or     ecx,eax
c00173fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017400:	8d 50 03             	lea    edx,[eax+0x3]
c0017403:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017407:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001740b:	0f b6 c0             	movzx  eax,al
c001740e:	c1 e0 18             	shl    eax,0x18
c0017411:	09 c1                	or     ecx,eax
c0017413:	89 ca                	mov    edx,ecx
c0017415:	a0 00 d2 02 c0       	mov    al,ds:0xc002d200
c001741a:	0f b6 c0             	movzx  eax,al
c001741d:	89 14 85 40 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2dc0],edx
c0017424:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017429:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001742d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017431:	01 d0                	add    eax,edx
c0017433:	83 c0 2c             	add    eax,0x2c
c0017436:	8a 00                	mov    al,BYTE PTR [eax]
c0017438:	0f b6 d0             	movzx  edx,al
c001743b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001743f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017442:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017446:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001744a:	0f b6 c0             	movzx  eax,al
c001744d:	c1 e0 08             	shl    eax,0x8
c0017450:	89 d1                	mov    ecx,edx
c0017452:	09 c1                	or     ecx,eax
c0017454:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017458:	8d 50 02             	lea    edx,[eax+0x2]
c001745b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001745f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017463:	0f b6 c0             	movzx  eax,al
c0017466:	c1 e0 10             	shl    eax,0x10
c0017469:	09 c1                	or     ecx,eax
c001746b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001746f:	8d 50 03             	lea    edx,[eax+0x3]
c0017472:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017476:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001747a:	0f b6 c0             	movzx  eax,al
c001747d:	c1 e0 18             	shl    eax,0x18
c0017480:	09 c1                	or     ecx,eax
c0017482:	89 ca                	mov    edx,ecx
c0017484:	a0 00 d2 02 c0       	mov    al,ds:0xc002d200
c0017489:	0f b6 c0             	movzx  eax,al
c001748c:	89 14 85 c0 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d40],edx
c0017493:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017498:	a0 00 d2 02 c0       	mov    al,ds:0xc002d200
c001749d:	40                   	inc    eax
c001749e:	a2 00 d2 02 c0       	mov    ds:0xc002d200,al
c00174a3:	e9 bb 01 00 00       	jmp    c0017663 <scanMADT()+0x469>
c00174a8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00174ad:	0f 85 e9 00 00 00    	jne    c001759c <scanMADT()+0x3a2>
c00174b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174b7:	8d 50 01             	lea    edx,[eax+0x1]
c00174ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00174be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00174c6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00174ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174ce:	8d 50 01             	lea    edx,[eax+0x1]
c00174d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00174d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00174dd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00174e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174e9:	01 d0                	add    eax,edx
c00174eb:	83 c0 2c             	add    eax,0x2c
c00174ee:	8a 00                	mov    al,BYTE PTR [eax]
c00174f0:	0f b6 d0             	movzx  edx,al
c00174f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00174fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017502:	0f b6 c0             	movzx  eax,al
c0017505:	c1 e0 08             	shl    eax,0x8
c0017508:	89 d1                	mov    ecx,edx
c001750a:	09 c1                	or     ecx,eax
c001750c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017510:	8d 50 02             	lea    edx,[eax+0x2]
c0017513:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017517:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001751b:	0f b6 c0             	movzx  eax,al
c001751e:	c1 e0 10             	shl    eax,0x10
c0017521:	09 c1                	or     ecx,eax
c0017523:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017527:	8d 50 03             	lea    edx,[eax+0x3]
c001752a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001752e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017532:	0f b6 c0             	movzx  eax,al
c0017535:	c1 e0 18             	shl    eax,0x18
c0017538:	09 c8                	or     eax,ecx
c001753a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001753e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017543:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017547:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001754b:	01 d0                	add    eax,edx
c001754d:	83 c0 2c             	add    eax,0x2c
c0017550:	8a 00                	mov    al,BYTE PTR [eax]
c0017552:	0f b6 c0             	movzx  eax,al
c0017555:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017559:	8d 4a 01             	lea    ecx,[edx+0x1]
c001755c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017560:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017564:	0f b6 d2             	movzx  edx,dl
c0017567:	c1 e2 08             	shl    edx,0x8
c001756a:	09 d0                	or     eax,edx
c001756c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017571:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017576:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001757b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001757f:	88 90 00 bb 02 c0    	mov    BYTE PTR [eax-0x3ffd4500],dl
c0017585:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001758a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001758f:	66 89 84 12 e0 d1 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2e20],ax
c0017597:	e9 c7 00 00 00       	jmp    c0017663 <scanMADT()+0x469>
c001759c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00175a1:	0f 85 b0 00 00 00    	jne    c0017657 <scanMADT()+0x45d>
c00175a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175ab:	8d 50 01             	lea    edx,[eax+0x1]
c00175ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175ba:	0f b6 c0             	movzx  eax,al
c00175bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c9:	01 d0                	add    eax,edx
c00175cb:	83 c0 2c             	add    eax,0x2c
c00175ce:	8a 00                	mov    al,BYTE PTR [eax]
c00175d0:	0f b6 d0             	movzx  edx,al
c00175d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00175da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175de:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175e2:	0f b6 c0             	movzx  eax,al
c00175e5:	c1 e0 08             	shl    eax,0x8
c00175e8:	09 d0                	or     eax,edx
c00175ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175ee:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00175f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175f7:	8d 50 01             	lea    edx,[eax+0x1]
c00175fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017602:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017606:	0f b6 c0             	movzx  eax,al
c0017609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001760d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017611:	c1 e0 08             	shl    eax,0x8
c0017614:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017618:	89 c1                	mov    ecx,eax
c001761a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001761e:	c1 e0 18             	shl    eax,0x18
c0017621:	89 c3                	mov    ebx,eax
c0017623:	a1 50 d1 02 c0       	mov    eax,ds:0xc002d150
c0017628:	8d 50 01             	lea    edx,[eax+0x1]
c001762b:	89 15 50 d1 02 c0    	mov    DWORD PTR ds:0xc002d150,edx
c0017631:	09 d9                	or     ecx,ebx
c0017633:	89 ca                	mov    edx,ecx
c0017635:	89 14 85 60 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ea0],edx
c001763c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017648:	68 f0 9b 02 c0       	push   0xc0029bf0
c001764d:	e8 7f b0 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0017652:	83 c4 10             	add    esp,0x10
c0017655:	eb 0c                	jmp    c0017663 <scanMADT()+0x469>
c0017657:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001765c:	75 05                	jne    c0017663 <scanMADT()+0x469>
c001765e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017663:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017668:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001766c:	01 d0                	add    eax,edx
c001766e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017672:	e9 54 fc ff ff       	jmp    c00172cb <scanMADT()+0xd1>
c0017677:	90                   	nop
c0017678:	eb 01                	jmp    c001767b <scanMADT()+0x481>
c001767a:	90                   	nop
c001767b:	83 c4 38             	add    esp,0x38
c001767e:	5b                   	pop    ebx
c001767f:	c3                   	ret    

c0017680 <ACPI::ACPI()>:
c0017680:	83 ec 0c             	sub    esp,0xc
c0017683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017687:	83 ec 08             	sub    esp,0x8
c001768a:	68 e3 9a 02 c0       	push   0xc0029ae3
c001768f:	50                   	push   eax
c0017690:	e8 1b c6 ff ff       	call   c0013cb0 <Device::Device(char const*)>
c0017695:	83 c4 10             	add    esp,0x10
c0017698:	ba c8 9c 02 c0       	mov    edx,0xc0029cc8
c001769d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a1:	89 10                	mov    DWORD PTR [eax],edx
c00176a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00176ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176b2:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00176bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176c0:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00176ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176ce:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00176d5:	e8 20 fb ff ff       	call   c00171fa <scanMADT()>
c00176da:	90                   	nop
c00176db:	83 c4 0c             	add    esp,0xc
c00176de:	c3                   	ret    
c00176df:	90                   	nop

c00176e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00176e0:	83 ec 2c             	sub    esp,0x2c
c00176e3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00176e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00176eb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00176ef:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00176f3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00176f8:	88 d0                	mov    al,dl
c00176fa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00176fe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017703:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001770b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001770f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017715:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017719:	0f 8d 97 00 00 00    	jge    c00177b6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001771f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017723:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017727:	83 c2 2a             	add    edx,0x2a
c001772a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001772e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017733:	75 78                	jne    c00177ad <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017735:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017739:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001773d:	83 c2 2a             	add    edx,0x2a
c0017740:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017744:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017748:	75 63                	jne    c00177ad <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001774a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001774f:	74 3a                	je     c001778b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017751:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017755:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017759:	83 c2 2a             	add    edx,0x2a
c001775c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017760:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017764:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017767:	39 c2                	cmp    edx,eax
c0017769:	74 10                	je     c001777b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001776b:	83 ec 0c             	sub    esp,0xc
c001776e:	68 2c 9c 02 c0       	push   0xc0029c2c
c0017773:	e8 73 20 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	83 ec 0c             	sub    esp,0xc
c001777e:	68 e8 9a 02 c0       	push   0xc0029ae8
c0017783:	e8 63 20 00 00       	call   c00197eb <Krnl::panic(char const*)>
c0017788:	83 c4 10             	add    esp,0x10
c001778b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001778f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017793:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017797:	83 c2 2a             	add    edx,0x2a
c001779a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001779e:	8b 02                	mov    eax,DWORD PTR [edx]
c00177a0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00177a3:	89 01                	mov    DWORD PTR [ecx],eax
c00177a5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00177a8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00177ad:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00177b1:	e9 55 ff ff ff       	jmp    c001770b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00177b6:	90                   	nop
c00177b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177bb:	83 c4 2c             	add    esp,0x2c
c00177be:	c2 04 00             	ret    0x4
c00177c1:	90                   	nop

c00177c2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00177c2:	56                   	push   esi
c00177c3:	53                   	push   ebx
c00177c4:	83 ec 14             	sub    esp,0x14
c00177c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177cb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00177cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00177d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00177d8:	88 c8                	mov    al,cl
c00177da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00177de:	88 d0                	mov    al,dl
c00177e0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00177e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177e8:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00177ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177f2:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00177f8:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00177fd:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017802:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0017807:	83 ec 04             	sub    esp,0x4
c001780a:	56                   	push   esi
c001780b:	53                   	push   ebx
c001780c:	51                   	push   ecx
c001780d:	52                   	push   edx
c001780e:	50                   	push   eax
c001780f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017813:	68 5c 9c 02 c0       	push   0xc0029c5c
c0017818:	e8 b4 ae ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001781d:	83 c4 20             	add    esp,0x20
c0017820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017824:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001782a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001782e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017831:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017835:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001783d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017843:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017847:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001784a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001784e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017857:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001785d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017861:	8d 48 01             	lea    ecx,[eax+0x1]
c0017864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017868:	83 c2 2a             	add    edx,0x2a
c001786b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001786f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017873:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017879:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001787d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017880:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017884:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017888:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001788c:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017892:	8d 50 01             	lea    edx,[eax+0x1]
c0017895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017899:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001789f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00178a9:	3d 00 08 00 00       	cmp    eax,0x800
c00178ae:	75 10                	jne    c00178c0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00178b0:	83 ec 0c             	sub    esp,0xc
c00178b3:	68 f7 9a 02 c0       	push   0xc0029af7
c00178b8:	e8 2e 1f 00 00       	call   c00197eb <Krnl::panic(char const*)>
c00178bd:	83 c4 10             	add    esp,0x10
c00178c0:	90                   	nop
c00178c1:	83 c4 14             	add    esp,0x14
c00178c4:	5b                   	pop    ebx
c00178c5:	5e                   	pop    esi
c00178c6:	c3                   	ret    
c00178c7:	90                   	nop

c00178c8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00178c8:	b8 00 00 00 00       	mov    eax,0x0
c00178cd:	c3                   	ret    

c00178ce <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00178ce:	83 ec 1c             	sub    esp,0x1c
c00178d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178d5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00178d8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178dc:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00178e1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00178e6:	83 ec 08             	sub    esp,0x8
c00178e9:	52                   	push   edx
c00178ea:	50                   	push   eax
c00178eb:	e8 fc 71 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c00178f0:	83 c4 10             	add    esp,0x10
c00178f3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00178f7:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00178fc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017901:	83 ec 04             	sub    esp,0x4
c0017904:	6a 01                	push   0x1
c0017906:	52                   	push   edx
c0017907:	50                   	push   eax
c0017908:	e8 f5 72 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c001790d:	83 c4 10             	add    esp,0x10
c0017910:	90                   	nop
c0017911:	83 c4 1c             	add    esp,0x1c
c0017914:	c3                   	ret    
c0017915:	90                   	nop

c0017916 <ACPI::open(int, int, void*)>:
c0017916:	53                   	push   ebx
c0017917:	83 ec 28             	sub    esp,0x28
c001791a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001791e:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017925:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017929:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001792f:	84 c0                	test   al,al
c0017931:	74 67                	je     c001799a <ACPI::open(int, int, void*)+0x84>
c0017933:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c001793b:	83 ec 0c             	sub    esp,0xc
c001793e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017942:	e8 8d 7b ff ff       	call   c000f4d4 <malloc>
c0017947:	83 c4 10             	add    esp,0x10
c001794a:	89 c3                	mov    ebx,eax
c001794c:	83 ec 0c             	sub    esp,0xc
c001794f:	53                   	push   ebx
c0017950:	e8 47 9e 00 00       	call   c002179c <PCI::PCI()>
c0017955:	83 c4 10             	add    esp,0x10
c0017958:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001795c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017960:	83 ec 08             	sub    esp,0x8
c0017963:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017967:	50                   	push   eax
c0017968:	e8 53 c1 ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c001796d:	83 c4 10             	add    esp,0x10
c0017970:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017974:	8b 00                	mov    eax,DWORD PTR [eax]
c0017976:	83 c0 08             	add    eax,0x8
c0017979:	8b 00                	mov    eax,DWORD PTR [eax]
c001797b:	6a 00                	push   0x0
c001797d:	6a 00                	push   0x0
c001797f:	6a 00                	push   0x0
c0017981:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017985:	ff d0                	call   eax
c0017987:	83 c4 10             	add    esp,0x10
c001798a:	83 ec 0c             	sub    esp,0xc
c001798d:	68 14 9b 02 c0       	push   0xc0029b14
c0017992:	e8 3a ad ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0017997:	83 c4 10             	add    esp,0x10
c001799a:	83 ec 0c             	sub    esp,0xc
c001799d:	68 1f 9b 02 c0       	push   0xc0029b1f
c00179a2:	e8 9f 41 00 00       	call   c001bb46 <Thr::loadKernelSymbolTable(char const*)>
c00179a7:	83 c4 10             	add    esp,0x10
c00179aa:	8b 1d a8 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8a8
c00179b0:	83 ec 08             	sub    esp,0x8
c00179b3:	6a 01                	push   0x1
c00179b5:	68 3d 9b 02 c0       	push   0xc0029b3d
c00179ba:	e8 47 4c 00 00       	call   c001c606 <Thr::loadDLL(char const*, bool)>
c00179bf:	83 c4 10             	add    esp,0x10
c00179c2:	83 ec 08             	sub    esp,0x8
c00179c5:	53                   	push   ebx
c00179c6:	50                   	push   eax
c00179c7:	e8 49 4e 00 00       	call   c001c815 <Thr::executeDLL(unsigned long, void*)>
c00179cc:	83 c4 10             	add    esp,0x10
c00179cf:	8b 1d a8 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8a8
c00179d5:	83 ec 08             	sub    esp,0x8
c00179d8:	6a 01                	push   0x1
c00179da:	68 5a 9b 02 c0       	push   0xc0029b5a
c00179df:	e8 22 4c 00 00       	call   c001c606 <Thr::loadDLL(char const*, bool)>
c00179e4:	83 c4 10             	add    esp,0x10
c00179e7:	83 ec 08             	sub    esp,0x8
c00179ea:	53                   	push   ebx
c00179eb:	50                   	push   eax
c00179ec:	e8 24 4e 00 00       	call   c001c815 <Thr::executeDLL(unsigned long, void*)>
c00179f1:	83 c4 10             	add    esp,0x10
c00179f4:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00179f9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179ff:	83 e0 04             	and    eax,0x4
c0017a02:	84 c0                	test   al,al
c0017a04:	0f 84 d6 00 00 00    	je     c0017ae0 <ACPI::open(int, int, void*)+0x1ca>
c0017a0a:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017a12:	83 ec 0c             	sub    esp,0xc
c0017a15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a19:	e8 b6 7a ff ff       	call   c000f4d4 <malloc>
c0017a1e:	83 c4 10             	add    esp,0x10
c0017a21:	89 c3                	mov    ebx,eax
c0017a23:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0017a28:	83 ec 04             	sub    esp,0x4
c0017a2b:	50                   	push   eax
c0017a2c:	68 77 9b 02 c0       	push   0xc0029b77
c0017a31:	53                   	push   ebx
c0017a32:	e8 c9 b1 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c0017a37:	83 c4 10             	add    esp,0x10
c0017a3a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017a3e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a43:	74 17                	je     c0017a5c <ACPI::open(int, int, void*)+0x146>
c0017a45:	83 ec 0c             	sub    esp,0xc
c0017a48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a4c:	e8 81 b4 ff ff       	call   c0012ed2 <File::exists()>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	84 c0                	test   al,al
c0017a56:	74 04                	je     c0017a5c <ACPI::open(int, int, void*)+0x146>
c0017a58:	b0 01                	mov    al,0x1
c0017a5a:	eb 02                	jmp    c0017a5e <ACPI::open(int, int, void*)+0x148>
c0017a5c:	b0 00                	mov    al,0x0
c0017a5e:	84 c0                	test   al,al
c0017a60:	74 25                	je     c0017a87 <ACPI::open(int, int, void*)+0x171>
c0017a62:	8b 1d a8 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8a8
c0017a68:	83 ec 08             	sub    esp,0x8
c0017a6b:	6a 01                	push   0x1
c0017a6d:	68 77 9b 02 c0       	push   0xc0029b77
c0017a72:	e8 8f 4b 00 00       	call   c001c606 <Thr::loadDLL(char const*, bool)>
c0017a77:	83 c4 10             	add    esp,0x10
c0017a7a:	83 ec 08             	sub    esp,0x8
c0017a7d:	53                   	push   ebx
c0017a7e:	50                   	push   eax
c0017a7f:	e8 91 4d 00 00       	call   c001c815 <Thr::executeDLL(unsigned long, void*)>
c0017a84:	83 c4 10             	add    esp,0x10
c0017a87:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a8c:	74 1e                	je     c0017aac <ACPI::open(int, int, void*)+0x196>
c0017a8e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a93:	74 17                	je     c0017aac <ACPI::open(int, int, void*)+0x196>
c0017a95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a9b:	83 c0 08             	add    eax,0x8
c0017a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017aa0:	83 ec 0c             	sub    esp,0xc
c0017aa3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017aa7:	ff d0                	call   eax
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	a1 48 d1 02 c0       	mov    eax,ds:0xc002d148
c0017ab1:	83 ec 08             	sub    esp,0x8
c0017ab4:	68 94 9b 02 c0       	push   0xc0029b94
c0017ab9:	50                   	push   eax
c0017aba:	e8 9f f6 ff ff       	call   c001715e <findDataTable(unsigned char*, char*)>
c0017abf:	83 c4 10             	add    esp,0x10
c0017ac2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ac6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017acb:	74 13                	je     c0017ae0 <ACPI::open(int, int, void*)+0x1ca>
c0017acd:	83 ec 08             	sub    esp,0x8
c0017ad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ad4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017ad8:	e8 f1 fd ff ff       	call   c00178ce <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017add:	83 c4 10             	add    esp,0x10
c0017ae0:	b8 00 00 00 00       	mov    eax,0x0
c0017ae5:	83 c4 28             	add    esp,0x28
c0017ae8:	5b                   	pop    ebx
c0017ae9:	c3                   	ret    

c0017aea <ACPI::sleep()>:
c0017aea:	83 ec 0c             	sub    esp,0xc
c0017aed:	a1 20 cf 02 c0       	mov    eax,ds:0xc002cf20
c0017af2:	85 c0                	test   eax,eax
c0017af4:	74 07                	je     c0017afd <ACPI::sleep()+0x13>
c0017af6:	a1 20 cf 02 c0       	mov    eax,ds:0xc002cf20
c0017afb:	ff d0                	call   eax
c0017afd:	90                   	nop
c0017afe:	83 c4 0c             	add    esp,0xc
c0017b01:	c3                   	ret    

c0017b02 <CPU::close(int, int, void*)>:
c0017b02:	31 c0                	xor    eax,eax
c0017b04:	c3                   	ret    
c0017b05:	90                   	nop

c0017b06 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017b06:	55                   	push   ebp
c0017b07:	57                   	push   edi
c0017b08:	56                   	push   esi
c0017b09:	53                   	push   ebx
c0017b0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017b0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b12:	89 ce                	mov    esi,ecx
c0017b14:	89 d5                	mov    ebp,edx
c0017b16:	80 f9 04             	cmp    cl,0x4
c0017b19:	75 28                	jne    c0017b43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017b1b:	8d 42 f9             	lea    eax,[edx-0x7]
c0017b1e:	3c 03                	cmp    al,0x3
c0017b20:	0f 86 63 01 00 00    	jbe    c0017c89 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017b26:	80 fa 03             	cmp    dl,0x3
c0017b29:	0f 84 5a 01 00 00    	je     c0017c89 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017b2f:	8d 7a f2             	lea    edi,[edx-0xe]
c0017b32:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017b37:	89 fb                	mov    ebx,edi
c0017b39:	80 fb 01             	cmp    bl,0x1
c0017b3c:	77 4e                	ja     c0017b8c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017b3e:	e9 52 01 00 00       	jmp    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b43:	80 f9 05             	cmp    cl,0x5
c0017b46:	75 4d                	jne    c0017b95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017b48:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017b4d:	80 fa 03             	cmp    dl,0x3
c0017b50:	0f 86 3f 01 00 00    	jbe    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b56:	8d 7a fa             	lea    edi,[edx-0x6]
c0017b59:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017b5e:	89 fb                	mov    ebx,edi
c0017b60:	80 fb 01             	cmp    bl,0x1
c0017b63:	0f 86 2c 01 00 00    	jbe    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b69:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017b6e:	80 fa 08             	cmp    dl,0x8
c0017b71:	0f 84 1e 01 00 00    	je     c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b77:	89 d7                	mov    edi,edx
c0017b79:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017b7e:	83 e7 fb             	and    edi,0xfffffffb
c0017b81:	89 fb                	mov    ebx,edi
c0017b83:	80 fb 09             	cmp    bl,0x9
c0017b86:	0f 84 09 01 00 00    	je     c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b8c:	31 c0                	xor    eax,eax
c0017b8e:	89 eb                	mov    ebx,ebp
c0017b90:	0f b6 fb             	movzx  edi,bl
c0017b93:	eb 30                	jmp    c0017bc5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017b95:	31 c0                	xor    eax,eax
c0017b97:	80 f9 06             	cmp    cl,0x6
c0017b9a:	75 f2                	jne    c0017b8e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b9c:	80 fa 0a             	cmp    dl,0xa
c0017b9f:	77 ed                	ja     c0017b8e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017ba1:	bf de 05 00 00       	mov    edi,0x5de
c0017ba6:	0f a3 d7             	bt     edi,edx
c0017ba9:	73 e3                	jae    c0017b8e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017bab:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017bb0:	e9 e0 00 00 00       	jmp    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bb5:	39 c7                	cmp    edi,eax
c0017bb7:	0f 84 d3 00 00 00    	je     c0017c90 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017bbd:	40                   	inc    eax
c0017bbe:	3d d0 00 00 00       	cmp    eax,0xd0
c0017bc3:	74 09                	je     c0017bce <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017bc5:	89 f3                	mov    ebx,esi
c0017bc7:	80 fb 0f             	cmp    bl,0xf
c0017bca:	75 f1                	jne    c0017bbd <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017bcc:	eb e7                	jmp    c0017bb5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017bce:	80 f9 10             	cmp    cl,0x10
c0017bd1:	75 14                	jne    c0017be7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017bd3:	8d 42 fc             	lea    eax,[edx-0x4]
c0017bd6:	83 e0 fb             	and    eax,0xfffffffb
c0017bd9:	3c 02                	cmp    al,0x2
c0017bdb:	76 34                	jbe    c0017c11 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017bdd:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017be2:	80 fa 02             	cmp    dl,0x2
c0017be5:	eb 24                	jmp    c0017c0b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017be7:	80 f9 11             	cmp    cl,0x11
c0017bea:	75 13                	jne    c0017bff <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017bec:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017bf1:	80 fa 03             	cmp    dl,0x3
c0017bf4:	0f 85 9b 00 00 00    	jne    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bfa:	e9 91 00 00 00       	jmp    c0017c90 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017bff:	80 f9 12             	cmp    cl,0x12
c0017c02:	75 14                	jne    c0017c18 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017c04:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017c09:	fe ca                	dec    dl
c0017c0b:	0f 85 84 00 00 00    	jne    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c11:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017c16:	eb 7d                	jmp    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c18:	80 f9 14             	cmp    cl,0x14
c0017c1b:	75 12                	jne    c0017c2f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017c1d:	4a                   	dec    edx
c0017c1e:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017c23:	80 fa 01             	cmp    dl,0x1
c0017c26:	77 6d                	ja     c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c28:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0017c2d:	eb 66                	jmp    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c2f:	80 f9 15             	cmp    cl,0x15
c0017c32:	75 31                	jne    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017c34:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017c39:	80 fa 01             	cmp    dl,0x1
c0017c3c:	74 57                	je     c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c3e:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017c43:	80 fa 13             	cmp    dl,0x13
c0017c46:	76 0c                	jbe    c0017c54 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017c48:	80 fa 30             	cmp    dl,0x30
c0017c4b:	75 48                	jne    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c4d:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017c52:	eb 41                	jmp    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c54:	b9 04 00 09 00       	mov    ecx,0x90004
c0017c59:	0f a3 d1             	bt     ecx,edx
c0017c5c:	73 37                	jae    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c5e:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017c63:	eb 30                	jmp    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c65:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017c6a:	80 f9 16             	cmp    cl,0x16
c0017c6d:	75 26                	jne    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c6f:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017c74:	84 d2                	test   dl,dl
c0017c76:	74 1d                	je     c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c78:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017c7d:	80 fa 30             	cmp    dl,0x30
c0017c80:	75 13                	jne    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c82:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017c87:	eb 0c                	jmp    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c89:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017c8e:	eb 05                	jmp    c0017c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c90:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017c95:	5b                   	pop    ebx
c0017c96:	5e                   	pop    esi
c0017c97:	5f                   	pop    edi
c0017c98:	5d                   	pop    ebp
c0017c99:	c3                   	ret    

c0017c9a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017c9a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017c9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ca2:	80 f9 04             	cmp    cl,0x4
c0017ca5:	75 6b                	jne    c0017d12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017ca7:	b8 20 bb 02 c0       	mov    eax,0xc002bb20
c0017cac:	80 fa 01             	cmp    dl,0x1
c0017caf:	0f 86 92 02 00 00    	jbe    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cb5:	b8 30 bb 02 c0       	mov    eax,0xc002bb30
c0017cba:	80 fa 02             	cmp    dl,0x2
c0017cbd:	0f 84 84 02 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cc3:	b8 40 bb 02 c0       	mov    eax,0xc002bb40
c0017cc8:	80 fa 03             	cmp    dl,0x3
c0017ccb:	0f 84 76 02 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cd1:	b8 50 bb 02 c0       	mov    eax,0xc002bb50
c0017cd6:	80 fa 04             	cmp    dl,0x4
c0017cd9:	0f 84 68 02 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cdf:	b8 60 bb 02 c0       	mov    eax,0xc002bb60
c0017ce4:	80 fa 05             	cmp    dl,0x5
c0017ce7:	0f 84 5a 02 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ced:	b8 40 bb 02 c0       	mov    eax,0xc002bb40
c0017cf2:	80 fa 07             	cmp    dl,0x7
c0017cf5:	0f 84 4c 02 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cfb:	83 ea 08             	sub    edx,0x8
c0017cfe:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017d03:	80 fa 01             	cmp    dl,0x1
c0017d06:	0f 87 3b 02 00 00    	ja     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d0c:	b8 70 bb 02 c0       	mov    eax,0xc002bb70
c0017d11:	c3                   	ret    
c0017d12:	80 f9 05             	cmp    cl,0x5
c0017d15:	75 45                	jne    c0017d5c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017d17:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017d1a:	b8 80 bb 02 c0       	mov    eax,0xc002bb80
c0017d1f:	80 f9 02             	cmp    cl,0x2
c0017d22:	0f 86 1f 02 00 00    	jbe    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d28:	80 fa 04             	cmp    dl,0x4
c0017d2b:	0f 84 f3 01 00 00    	je     c0017f24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017d31:	80 fa 07             	cmp    dl,0x7
c0017d34:	0f 84 0d 02 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d3a:	b8 90 bb 02 c0       	mov    eax,0xc002bb90
c0017d3f:	80 fa 08             	cmp    dl,0x8
c0017d42:	0f 84 ff 01 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d48:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017d4d:	80 fa 09             	cmp    dl,0x9
c0017d50:	0f 85 f1 01 00 00    	jne    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d56:	b8 a0 bb 02 c0       	mov    eax,0xc002bba0
c0017d5b:	c3                   	ret    
c0017d5c:	80 f9 06             	cmp    cl,0x6
c0017d5f:	0f 85 85 01 00 00    	jne    c0017eea <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017d65:	b8 b0 bb 02 c0       	mov    eax,0xc002bbb0
c0017d6a:	80 fa 01             	cmp    dl,0x1
c0017d6d:	0f 84 d4 01 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d73:	8d 42 fb             	lea    eax,[edx-0x5]
c0017d76:	3c 01                	cmp    al,0x1
c0017d78:	0f 86 ac 01 00 00    	jbe    c0017f2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017d7e:	80 fa 03             	cmp    dl,0x3
c0017d81:	0f 84 a3 01 00 00    	je     c0017f2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017d87:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017d8a:	b8 d0 bb 02 c0       	mov    eax,0xc002bbd0
c0017d8f:	80 f9 01             	cmp    cl,0x1
c0017d92:	0f 86 af 01 00 00    	jbe    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d98:	80 fa 09             	cmp    dl,0x9
c0017d9b:	0f 84 8f 01 00 00    	je     c0017f30 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017da1:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017da4:	80 f9 01             	cmp    cl,0x1
c0017da7:	0f 86 9a 01 00 00    	jbe    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dad:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017db2:	80 fa 0d             	cmp    dl,0xd
c0017db5:	0f 84 8c 01 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dbb:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c0017dc0:	80 fa 0e             	cmp    dl,0xe
c0017dc3:	0f 84 7e 01 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc9:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017dce:	80 fa 0f             	cmp    dl,0xf
c0017dd1:	0f 84 70 01 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd7:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017ddc:	80 fa 15             	cmp    dl,0x15
c0017ddf:	0f 84 62 01 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de5:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017de8:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017ded:	80 f9 01             	cmp    cl,0x1
c0017df0:	0f 86 51 01 00 00    	jbe    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df6:	80 fa 1a             	cmp    dl,0x1a
c0017df9:	0f 84 37 01 00 00    	je     c0017f36 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017dff:	80 fa 1c             	cmp    dl,0x1c
c0017e02:	0f 84 34 01 00 00    	je     c0017f3c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017e08:	80 fa 1d             	cmp    dl,0x1d
c0017e0b:	0f 84 36 01 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e11:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017e16:	80 fa 25             	cmp    dl,0x25
c0017e19:	0f 84 28 01 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e1f:	8d 4a da             	lea    ecx,[edx-0x26]
c0017e22:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017e27:	80 f9 01             	cmp    cl,0x1
c0017e2a:	0f 86 17 01 00 00    	jbe    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e30:	b8 40 bc 02 c0       	mov    eax,0xc002bc40
c0017e35:	80 fa 2a             	cmp    dl,0x2a
c0017e38:	0f 84 09 01 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e3e:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017e43:	80 fa 2c             	cmp    dl,0x2c
c0017e46:	0f 84 fb 00 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e4c:	b8 40 bc 02 c0       	mov    eax,0xc002bc40
c0017e51:	80 fa 2d             	cmp    dl,0x2d
c0017e54:	0f 84 ed 00 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e5a:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017e5f:	80 fa 2e             	cmp    dl,0x2e
c0017e62:	0f 84 df 00 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e68:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017e6d:	80 fa 2f             	cmp    dl,0x2f
c0017e70:	0f 84 d1 00 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e76:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017e79:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017e7e:	80 f9 01             	cmp    cl,0x1
c0017e81:	0f 86 c0 00 00 00    	jbe    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e87:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017e8c:	80 fa 37             	cmp    dl,0x37
c0017e8f:	0f 84 b2 00 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e95:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017e9a:	80 fa 3a             	cmp    dl,0x3a
c0017e9d:	0f 84 a4 00 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ea3:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017ea8:	80 fa 3c             	cmp    dl,0x3c
c0017eab:	0f 84 96 00 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eb1:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017eb6:	80 fa 3d             	cmp    dl,0x3d
c0017eb9:	0f 84 88 00 00 00    	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ebf:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017ec4:	80 fa 3e             	cmp    dl,0x3e
c0017ec7:	74 7e                	je     c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ec9:	8d 42 bb             	lea    eax,[edx-0x45]
c0017ecc:	3c 01                	cmp    al,0x1
c0017ece:	76 72                	jbe    c0017f42 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017ed0:	80 fa 3f             	cmp    dl,0x3f
c0017ed3:	74 6d                	je     c0017f42 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017ed5:	80 fa 4a             	cmp    dl,0x4a
c0017ed8:	74 0a                	je     c0017ee4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017eda:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017edf:	80 fa 4d             	cmp    dl,0x4d
c0017ee2:	75 63                	jne    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ee4:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017ee9:	c3                   	ret    
c0017eea:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017eef:	80 f9 0b             	cmp    cl,0xb
c0017ef2:	75 0a                	jne    c0017efe <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017ef4:	fe ca                	dec    dl
c0017ef6:	75 4f                	jne    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ef8:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017efd:	c3                   	ret    
c0017efe:	80 f9 0f             	cmp    cl,0xf
c0017f01:	75 44                	jne    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f03:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017f08:	80 fa 02             	cmp    dl,0x2
c0017f0b:	76 3a                	jbe    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f0d:	8d 42 fd             	lea    eax,[edx-0x3]
c0017f10:	3c 01                	cmp    al,0x1
c0017f12:	76 0a                	jbe    c0017f1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017f14:	b8 de 9f 02 c0       	mov    eax,0xc0029fde
c0017f19:	80 fa 06             	cmp    dl,0x6
c0017f1c:	75 29                	jne    c0017f47 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f1e:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017f23:	c3                   	ret    
c0017f24:	b8 90 bb 02 c0       	mov    eax,0xc002bb90
c0017f29:	c3                   	ret    
c0017f2a:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017f2f:	c3                   	ret    
c0017f30:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017f35:	c3                   	ret    
c0017f36:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017f3b:	c3                   	ret    
c0017f3c:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017f41:	c3                   	ret    
c0017f42:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017f47:	c3                   	ret    

c0017f48 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017f48:	60                   	pusha  
c0017f49:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f55:	9c                   	pushf  
c0017f56:	fa                   	cli    
c0017f57:	0f 09                	wbinvd 
c0017f59:	0f 30                	wrmsr  
c0017f5b:	9d                   	popf   
c0017f5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f60:	89 02                	mov    DWORD PTR [edx],eax
c0017f62:	61                   	popa   
c0017f63:	c3                   	ret    

c0017f64 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017f64:	60                   	pusha  
c0017f65:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f69:	9c                   	pushf  
c0017f6a:	fa                   	cli    
c0017f6b:	0f 09                	wbinvd 
c0017f6d:	31 c0                	xor    eax,eax
c0017f6f:	31 d2                	xor    edx,edx
c0017f71:	0f 32                	rdmsr  
c0017f73:	9d                   	popf   
c0017f74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f78:	89 02                	mov    DWORD PTR [edx],eax
c0017f7a:	61                   	popa   
c0017f7b:	c3                   	ret    

c0017f7c <CPU::AMD_K6_writeback(int, int, int)>:
c0017f7c:	56                   	push   esi
c0017f7d:	53                   	push   ebx
c0017f7e:	83 ec 10             	sub    esp,0x10
c0017f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f85:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017f8a:	75 5d                	jne    c0017fe9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f8c:	83 f8 08             	cmp    eax,0x8
c0017f8f:	75 09                	jne    c0017f9a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017f91:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017f96:	7e 13                	jle    c0017fab <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017f98:	eb 30                	jmp    c0017fca <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017f9a:	83 f8 06             	cmp    eax,0x6
c0017f9d:	7c 4a                	jl     c0017fe9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f9f:	83 f8 07             	cmp    eax,0x7
c0017fa2:	7e 07                	jle    c0017fab <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017fa4:	83 f8 09             	cmp    eax,0x9
c0017fa7:	74 21                	je     c0017fca <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017fa9:	eb 3e                	jmp    c0017fe9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017fab:	89 e6                	mov    esi,esp
c0017fad:	8b 1d e4 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8e4
c0017fb3:	56                   	push   esi
c0017fb4:	c1 eb 15             	shr    ebx,0x15
c0017fb7:	68 82 00 00 c0       	push   0xc0000082
c0017fbc:	83 e3 7e             	and    ebx,0x7e
c0017fbf:	e8 a0 ff ff ff       	call   c0017f64 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017fc4:	56                   	push   esi
c0017fc5:	6a 00                	push   0x0
c0017fc7:	53                   	push   ebx
c0017fc8:	eb 12                	jmp    c0017fdc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017fca:	89 e3                	mov    ebx,esp
c0017fcc:	53                   	push   ebx
c0017fcd:	68 82 00 00 c0       	push   0xc0000082
c0017fd2:	e8 8d ff ff ff       	call   c0017f64 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017fd7:	53                   	push   ebx
c0017fd8:	6a 00                	push   0x0
c0017fda:	6a 00                	push   0x0
c0017fdc:	68 82 00 00 c0       	push   0xc0000082
c0017fe1:	e8 62 ff ff ff       	call   c0017f48 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017fe6:	83 c4 18             	add    esp,0x18
c0017fe9:	83 c4 10             	add    esp,0x10
c0017fec:	5b                   	pop    ebx
c0017fed:	5e                   	pop    esi
c0017fee:	c3                   	ret    
c0017fef:	90                   	nop

c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017ff0:	55                   	push   ebp
c0017ff1:	57                   	push   edi
c0017ff2:	56                   	push   esi
c0017ff3:	53                   	push   ebx
c0017ff4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ff8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ffc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018000:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018004:	39 05 c0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bdc0,eax
c001800a:	75 23                	jne    c001802f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001800c:	a1 ac d3 02 c0       	mov    eax,ds:0xc002d3ac
c0018011:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018015:	89 06                	mov    DWORD PTR [esi],eax
c0018017:	a1 a8 d3 02 c0       	mov    eax,ds:0xc002d3a8
c001801c:	89 07                	mov    DWORD PTR [edi],eax
c001801e:	a1 a4 d3 02 c0       	mov    eax,ds:0xc002d3a4
c0018023:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018026:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c001802b:	89 02                	mov    DWORD PTR [edx],eax
c001802d:	eb 3f                	jmp    c001806e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001802f:	31 c9                	xor    ecx,ecx
c0018031:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018035:	0f a2                	cpuid  
c0018037:	89 06                	mov    DWORD PTR [esi],eax
c0018039:	89 1f                	mov    DWORD PTR [edi],ebx
c001803b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001803f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018042:	89 10                	mov    DWORD PTR [eax],edx
c0018044:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018048:	a3 c0 bd 02 c0       	mov    ds:0xc002bdc0,eax
c001804d:	8b 06                	mov    eax,DWORD PTR [esi]
c001804f:	a3 ac d3 02 c0       	mov    ds:0xc002d3ac,eax
c0018054:	8b 07                	mov    eax,DWORD PTR [edi]
c0018056:	a3 a8 d3 02 c0       	mov    ds:0xc002d3a8,eax
c001805b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001805e:	a3 a4 d3 02 c0       	mov    ds:0xc002d3a4,eax
c0018063:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018067:	8b 00                	mov    eax,DWORD PTR [eax]
c0018069:	a3 a0 d3 02 c0       	mov    ds:0xc002d3a0,eax
c001806e:	5b                   	pop    ebx
c001806f:	5e                   	pop    esi
c0018070:	5f                   	pop    edi
c0018071:	5d                   	pop    ebp
c0018072:	c3                   	ret    
c0018073:	90                   	nop

c0018074 <CPU::cpuidCheckEDX(unsigned int)>:
c0018074:	83 ec 10             	sub    esp,0x10
c0018077:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001807b:	50                   	push   eax
c001807c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018080:	50                   	push   eax
c0018081:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018085:	50                   	push   eax
c0018086:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001808a:	50                   	push   eax
c001808b:	6a 01                	push   0x1
c001808d:	e8 5e ff ff ff       	call   c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018092:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018096:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001809a:	0f 95 c0             	setne  al
c001809d:	83 c4 24             	add    esp,0x24
c00180a0:	c3                   	ret    
c00180a1:	90                   	nop

c00180a2 <CPU::cpuidCheckECX(unsigned int)>:
c00180a2:	83 ec 10             	sub    esp,0x10
c00180a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180a9:	50                   	push   eax
c00180aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180ae:	50                   	push   eax
c00180af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180b3:	50                   	push   eax
c00180b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180b8:	50                   	push   eax
c00180b9:	6a 01                	push   0x1
c00180bb:	e8 30 ff ff ff       	call   c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00180c8:	0f 95 c0             	setne  al
c00180cb:	83 c4 24             	add    esp,0x24
c00180ce:	c3                   	ret    
c00180cf:	90                   	nop

c00180d0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00180d0:	83 ec 10             	sub    esp,0x10
c00180d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180d7:	50                   	push   eax
c00180d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180dc:	50                   	push   eax
c00180dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180e1:	50                   	push   eax
c00180e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180e6:	50                   	push   eax
c00180e7:	6a 07                	push   0x7
c00180e9:	e8 02 ff ff ff       	call   c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00180f6:	0f 95 c0             	setne  al
c00180f9:	83 c4 24             	add    esp,0x24
c00180fc:	c3                   	ret    
c00180fd:	90                   	nop

c00180fe <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00180fe:	83 ec 10             	sub    esp,0x10
c0018101:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018105:	50                   	push   eax
c0018106:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001810a:	50                   	push   eax
c001810b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001810f:	50                   	push   eax
c0018110:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018114:	50                   	push   eax
c0018115:	6a 07                	push   0x7
c0018117:	e8 d4 fe ff ff       	call   c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001811c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018120:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018124:	0f 95 c0             	setne  al
c0018127:	83 c4 24             	add    esp,0x24
c001812a:	c3                   	ret    
c001812b:	90                   	nop

c001812c <CPU::CPU()>:
c001812c:	83 ec 0c             	sub    esp,0xc
c001812f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018133:	83 ec 08             	sub    esp,0x8
c0018136:	68 de 9f 02 c0       	push   0xc0029fde
c001813b:	50                   	push   eax
c001813c:	e8 6f bb ff ff       	call   c0013cb0 <Device::Device(char const*)>
c0018141:	83 c4 10             	add    esp,0x10
c0018144:	ba b8 a0 02 c0       	mov    edx,0xc002a0b8
c0018149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001814d:	89 10                	mov    DWORD PTR [eax],edx
c001814f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018153:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001815d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018161:	05 78 01 00 00       	add    eax,0x178
c0018166:	83 ec 0c             	sub    esp,0xc
c0018169:	50                   	push   eax
c001816a:	e8 7d 6b ff ff       	call   c000ecec <GDT::GDT()>
c001816f:	83 c4 10             	add    esp,0x10
c0018172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018176:	05 7c 09 00 00       	add    eax,0x97c
c001817b:	83 ec 0c             	sub    esp,0xc
c001817e:	50                   	push   eax
c001817f:	e8 ca 6d ff ff       	call   c000ef4e <IDT::IDT()>
c0018184:	83 c4 10             	add    esp,0x10
c0018187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818b:	05 7c 11 00 00       	add    eax,0x117c
c0018190:	83 ec 0c             	sub    esp,0xc
c0018193:	50                   	push   eax
c0018194:	e8 79 8e ff ff       	call   c0011012 <TSS::TSS()>
c0018199:	83 c4 10             	add    esp,0x10
c001819c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a0:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00181a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ab:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00181b5:	90                   	nop
c00181b6:	83 c4 0c             	add    esp,0xc
c00181b9:	c3                   	ret    

c00181ba <CPU::displayFeatures()>:
c00181ba:	53                   	push   ebx
c00181bb:	83 ec 10             	sub    esp,0x10
c00181be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00181c2:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00181c8:	68 ec 9c 02 c0       	push   0xc0029cec
c00181cd:	e8 ff a4 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00181d2:	59                   	pop    ecx
c00181d3:	58                   	pop    eax
c00181d4:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00181da:	50                   	push   eax
c00181db:	68 fd 9c 02 c0       	push   0xc0029cfd
c00181e0:	e8 ec a4 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00181e5:	58                   	pop    eax
c00181e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181ec:	5a                   	pop    edx
c00181ed:	c1 e8 0e             	shr    eax,0xe
c00181f0:	0f b6 c0             	movzx  eax,al
c00181f3:	50                   	push   eax
c00181f4:	68 0e 9d 02 c0       	push   0xc0029d0e
c00181f9:	e8 d3 a4 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00181fe:	59                   	pop    ecx
c00181ff:	58                   	pop    eax
c0018200:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018206:	66 c1 e8 06          	shr    ax,0x6
c001820a:	0f b6 c0             	movzx  eax,al
c001820d:	50                   	push   eax
c001820e:	68 1f 9d 02 c0       	push   0xc0029d1f
c0018213:	e8 b9 a4 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0018218:	c7 04 24 bb a1 02 c0 	mov    DWORD PTR [esp],0xc002a1bb
c001821f:	e8 ad a4 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0018224:	83 c4 10             	add    esp,0x10
c0018227:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c001822c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018233:	74 05                	je     c001823a <CPU::displayFeatures()+0x80>
c0018235:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c001823a:	52                   	push   edx
c001823b:	52                   	push   edx
c001823c:	50                   	push   eax
c001823d:	68 30 9d 02 c0       	push   0xc0029d30
c0018242:	e8 8a a4 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0018247:	83 c4 10             	add    esp,0x10
c001824a:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c001824f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018256:	78 05                	js     c001825d <CPU::displayFeatures()+0xa3>
c0018258:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c001825d:	51                   	push   ecx
c001825e:	51                   	push   ecx
c001825f:	50                   	push   eax
c0018260:	68 47 9d 02 c0       	push   0xc0029d47
c0018265:	e8 67 a4 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001826a:	83 c4 10             	add    esp,0x10
c001826d:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c0018272:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018279:	75 05                	jne    c0018280 <CPU::displayFeatures()+0xc6>
c001827b:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c0018280:	52                   	push   edx
c0018281:	52                   	push   edx
c0018282:	50                   	push   eax
c0018283:	68 5e 9d 02 c0       	push   0xc0029d5e
c0018288:	e8 44 a4 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001828d:	83 c4 10             	add    esp,0x10
c0018290:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c0018295:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001829c:	75 05                	jne    c00182a3 <CPU::displayFeatures()+0xe9>
c001829e:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c00182a3:	51                   	push   ecx
c00182a4:	51                   	push   ecx
c00182a5:	50                   	push   eax
c00182a6:	68 75 9d 02 c0       	push   0xc0029d75
c00182ab:	e8 21 a4 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00182b0:	83 c4 10             	add    esp,0x10
c00182b3:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c00182b8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00182bf:	75 05                	jne    c00182c6 <CPU::displayFeatures()+0x10c>
c00182c1:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c00182c6:	52                   	push   edx
c00182c7:	52                   	push   edx
c00182c8:	50                   	push   eax
c00182c9:	68 8c 9d 02 c0       	push   0xc0029d8c
c00182ce:	e8 fe a3 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00182d3:	83 c4 10             	add    esp,0x10
c00182d6:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c00182db:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00182e2:	75 05                	jne    c00182e9 <CPU::displayFeatures()+0x12f>
c00182e4:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c00182e9:	51                   	push   ecx
c00182ea:	51                   	push   ecx
c00182eb:	50                   	push   eax
c00182ec:	68 a3 9d 02 c0       	push   0xc0029da3
c00182f1:	e8 db a3 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00182f6:	83 c4 10             	add    esp,0x10
c00182f9:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c00182fe:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018305:	75 05                	jne    c001830c <CPU::displayFeatures()+0x152>
c0018307:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c001830c:	52                   	push   edx
c001830d:	52                   	push   edx
c001830e:	50                   	push   eax
c001830f:	68 ba 9d 02 c0       	push   0xc0029dba
c0018314:	e8 b8 a3 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0018319:	83 c4 10             	add    esp,0x10
c001831c:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c0018321:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018328:	75 05                	jne    c001832f <CPU::displayFeatures()+0x175>
c001832a:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c001832f:	51                   	push   ecx
c0018330:	51                   	push   ecx
c0018331:	50                   	push   eax
c0018332:	68 d1 9d 02 c0       	push   0xc0029dd1
c0018337:	e8 95 a3 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001833c:	83 c4 10             	add    esp,0x10
c001833f:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c0018344:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001834b:	75 05                	jne    c0018352 <CPU::displayFeatures()+0x198>
c001834d:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c0018352:	52                   	push   edx
c0018353:	52                   	push   edx
c0018354:	50                   	push   eax
c0018355:	68 e8 9d 02 c0       	push   0xc0029de8
c001835a:	e8 72 a3 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001835f:	83 c4 10             	add    esp,0x10
c0018362:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c0018367:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001836e:	75 05                	jne    c0018375 <CPU::displayFeatures()+0x1bb>
c0018370:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c0018375:	51                   	push   ecx
c0018376:	51                   	push   ecx
c0018377:	50                   	push   eax
c0018378:	68 ff 9d 02 c0       	push   0xc0029dff
c001837d:	e8 4f a3 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0018382:	83 c4 10             	add    esp,0x10
c0018385:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c001838a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018391:	75 05                	jne    c0018398 <CPU::displayFeatures()+0x1de>
c0018393:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c0018398:	52                   	push   edx
c0018399:	52                   	push   edx
c001839a:	50                   	push   eax
c001839b:	68 16 9e 02 c0       	push   0xc0029e16
c00183a0:	e8 2c a3 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00183a5:	83 c4 10             	add    esp,0x10
c00183a8:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c00183ad:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00183b4:	75 05                	jne    c00183bb <CPU::displayFeatures()+0x201>
c00183b6:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c00183bb:	51                   	push   ecx
c00183bc:	51                   	push   ecx
c00183bd:	50                   	push   eax
c00183be:	68 2d 9e 02 c0       	push   0xc0029e2d
c00183c3:	e8 09 a3 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00183c8:	83 c4 10             	add    esp,0x10
c00183cb:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c00183d0:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00183d7:	75 05                	jne    c00183de <CPU::displayFeatures()+0x224>
c00183d9:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c00183de:	52                   	push   edx
c00183df:	52                   	push   edx
c00183e0:	50                   	push   eax
c00183e1:	68 44 9e 02 c0       	push   0xc0029e44
c00183e6:	e8 e6 a2 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00183eb:	83 c4 10             	add    esp,0x10
c00183ee:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c00183f3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00183fa:	78 05                	js     c0018401 <CPU::displayFeatures()+0x247>
c00183fc:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c0018401:	51                   	push   ecx
c0018402:	51                   	push   ecx
c0018403:	50                   	push   eax
c0018404:	68 5b 9e 02 c0       	push   0xc0029e5b
c0018409:	e8 c3 a2 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001840e:	83 c4 10             	add    esp,0x10
c0018411:	b8 b8 88 02 c0       	mov    eax,0xc00288b8
c0018416:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001841d:	75 05                	jne    c0018424 <CPU::displayFeatures()+0x26a>
c001841f:	b8 bc 88 02 c0       	mov    eax,0xc00288bc
c0018424:	52                   	push   edx
c0018425:	52                   	push   edx
c0018426:	50                   	push   eax
c0018427:	68 72 9e 02 c0       	push   0xc0029e72
c001842c:	e8 a0 a2 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0018431:	83 c4 18             	add    esp,0x18
c0018434:	5b                   	pop    ebx
c0018435:	c3                   	ret    

c0018436 <CPU::detectFeatures()>:
c0018436:	55                   	push   ebp
c0018437:	57                   	push   edi
c0018438:	56                   	push   esi
c0018439:	53                   	push   ebx
c001843a:	83 ec 50             	sub    esp,0x50
c001843d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018441:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001844b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018452:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018458:	6a 0d                	push   0xd
c001845a:	6a 00                	push   0x0
c001845c:	57                   	push   edi
c001845d:	e8 29 82 fe ff       	call   c000068b <memset>
c0018462:	83 c4 10             	add    esp,0x10
c0018465:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001846a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018471:	0f 84 20 09 00 00    	je     c0018d97 <CPU::detectFeatures()+0x961>
c0018477:	83 ec 0c             	sub    esp,0xc
c001847a:	6a 10                	push   0x10
c001847c:	e8 f3 fb ff ff       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c0018481:	83 e0 01             	and    eax,0x1
c0018484:	8d 14 00             	lea    edx,[eax+eax*1]
c0018487:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001848d:	83 e0 fd             	and    eax,0xfffffffd
c0018490:	09 d0                	or     eax,edx
c0018492:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018498:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001849f:	e8 d0 fb ff ff       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c00184a4:	83 e0 01             	and    eax,0x1
c00184a7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00184ae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184b4:	83 e0 fb             	and    eax,0xfffffffb
c00184b7:	09 d0                	or     eax,edx
c00184b9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184bf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00184c6:	e8 a9 fb ff ff       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c00184cb:	83 e0 01             	and    eax,0x1
c00184ce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00184d5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184db:	83 e0 f7             	and    eax,0xfffffff7
c00184de:	09 d0                	or     eax,edx
c00184e0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184e6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00184ed:	e8 82 fb ff ff       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c00184f2:	83 e0 01             	and    eax,0x1
c00184f5:	c1 e0 04             	shl    eax,0x4
c00184f8:	88 c2                	mov    dl,al
c00184fa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018500:	83 e0 ef             	and    eax,0xffffffef
c0018503:	09 d0                	or     eax,edx
c0018505:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001850b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018512:	e8 5d fb ff ff       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c0018517:	83 e0 01             	and    eax,0x1
c001851a:	c1 e0 05             	shl    eax,0x5
c001851d:	88 c2                	mov    dl,al
c001851f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018525:	83 e0 df             	and    eax,0xffffffdf
c0018528:	09 d0                	or     eax,edx
c001852a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018530:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018537:	e8 38 fb ff ff       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c001853c:	83 e0 01             	and    eax,0x1
c001853f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018542:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018548:	83 e0 fd             	and    eax,0xfffffffd
c001854b:	09 d0                	or     eax,edx
c001854d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018553:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001855a:	e8 15 fb ff ff       	call   c0018074 <CPU::cpuidCheckEDX(unsigned int)>
c001855f:	83 e0 01             	and    eax,0x1
c0018562:	c1 e0 06             	shl    eax,0x6
c0018565:	88 c2                	mov    dl,al
c0018567:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001856d:	83 e0 bf             	and    eax,0xffffffbf
c0018570:	09 d0                	or     eax,edx
c0018572:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018578:	58                   	pop    eax
c0018579:	8d 74 24 28          	lea    esi,[esp+0x28]
c001857d:	56                   	push   esi
c001857e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018582:	55                   	push   ebp
c0018583:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018587:	50                   	push   eax
c0018588:	8d 54 24 28          	lea    edx,[esp+0x28]
c001858c:	52                   	push   edx
c001858d:	6a 00                	push   0x0
c001858f:	e8 5c fa ff ff       	call   c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018594:	83 c4 1c             	add    esp,0x1c
c0018597:	6a 04                	push   0x4
c0018599:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001859d:	50                   	push   eax
c001859e:	57                   	push   edi
c001859f:	e8 b1 80 fe ff       	call   c0000655 <memcpy>
c00185a4:	83 c4 0c             	add    esp,0xc
c00185a7:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00185ad:	6a 04                	push   0x4
c00185af:	56                   	push   esi
c00185b0:	50                   	push   eax
c00185b1:	e8 9f 80 fe ff       	call   c0000655 <memcpy>
c00185b6:	83 c4 0c             	add    esp,0xc
c00185b9:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00185bf:	6a 04                	push   0x4
c00185c1:	55                   	push   ebp
c00185c2:	50                   	push   eax
c00185c3:	e8 8d 80 fe ff       	call   c0000655 <memcpy>
c00185c8:	58                   	pop    eax
c00185c9:	5a                   	pop    edx
c00185ca:	68 89 9e 02 c0       	push   0xc0029e89
c00185cf:	57                   	push   edi
c00185d0:	e8 a6 81 fe ff       	call   c000077b <strcmp>
c00185d5:	83 c4 10             	add    esp,0x10
c00185d8:	85 c0                	test   eax,eax
c00185da:	75 0f                	jne    c00185eb <CPU::detectFeatures()+0x1b5>
c00185dc:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00185e6:	e9 22 02 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c00185eb:	50                   	push   eax
c00185ec:	50                   	push   eax
c00185ed:	68 96 9e 02 c0       	push   0xc0029e96
c00185f2:	57                   	push   edi
c00185f3:	e8 83 81 fe ff       	call   c000077b <strcmp>
c00185f8:	83 c4 10             	add    esp,0x10
c00185fb:	85 c0                	test   eax,eax
c00185fd:	74 dd                	je     c00185dc <CPU::detectFeatures()+0x1a6>
c00185ff:	51                   	push   ecx
c0018600:	51                   	push   ecx
c0018601:	68 a3 9e 02 c0       	push   0xc0029ea3
c0018606:	57                   	push   edi
c0018607:	e8 6f 81 fe ff       	call   c000077b <strcmp>
c001860c:	83 c4 10             	add    esp,0x10
c001860f:	85 c0                	test   eax,eax
c0018611:	74 2a                	je     c001863d <CPU::detectFeatures()+0x207>
c0018613:	52                   	push   edx
c0018614:	52                   	push   edx
c0018615:	68 b0 9e 02 c0       	push   0xc0029eb0
c001861a:	57                   	push   edi
c001861b:	e8 5b 81 fe ff       	call   c000077b <strcmp>
c0018620:	83 c4 10             	add    esp,0x10
c0018623:	85 c0                	test   eax,eax
c0018625:	74 16                	je     c001863d <CPU::detectFeatures()+0x207>
c0018627:	50                   	push   eax
c0018628:	50                   	push   eax
c0018629:	68 bd 9e 02 c0       	push   0xc0029ebd
c001862e:	57                   	push   edi
c001862f:	e8 47 81 fe ff       	call   c000077b <strcmp>
c0018634:	83 c4 10             	add    esp,0x10
c0018637:	85 c0                	test   eax,eax
c0018639:	74 48                	je     c0018683 <CPU::detectFeatures()+0x24d>
c001863b:	eb 0f                	jmp    c001864c <CPU::detectFeatures()+0x216>
c001863d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018647:	e9 c1 01 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c001864c:	50                   	push   eax
c001864d:	50                   	push   eax
c001864e:	68 ca 9e 02 c0       	push   0xc0029eca
c0018653:	57                   	push   edi
c0018654:	e8 22 81 fe ff       	call   c000077b <strcmp>
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	85 c0                	test   eax,eax
c001865e:	74 23                	je     c0018683 <CPU::detectFeatures()+0x24d>
c0018660:	50                   	push   eax
c0018661:	50                   	push   eax
c0018662:	68 d7 9e 02 c0       	push   0xc0029ed7
c0018667:	57                   	push   edi
c0018668:	e8 0e 81 fe ff       	call   c000077b <strcmp>
c001866d:	83 c4 10             	add    esp,0x10
c0018670:	85 c0                	test   eax,eax
c0018672:	75 1e                	jne    c0018692 <CPU::detectFeatures()+0x25c>
c0018674:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001867e:	e9 8a 01 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c0018683:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001868d:	e9 7b 01 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c0018692:	50                   	push   eax
c0018693:	50                   	push   eax
c0018694:	68 e4 9e 02 c0       	push   0xc0029ee4
c0018699:	57                   	push   edi
c001869a:	e8 dc 80 fe ff       	call   c000077b <strcmp>
c001869f:	83 c4 10             	add    esp,0x10
c00186a2:	85 c0                	test   eax,eax
c00186a4:	75 0f                	jne    c00186b5 <CPU::detectFeatures()+0x27f>
c00186a6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00186b0:	e9 58 01 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c00186b5:	50                   	push   eax
c00186b6:	50                   	push   eax
c00186b7:	68 a3 9e 02 c0       	push   0xc0029ea3
c00186bc:	57                   	push   edi
c00186bd:	e8 b9 80 fe ff       	call   c000077b <strcmp>
c00186c2:	83 c4 10             	add    esp,0x10
c00186c5:	85 c0                	test   eax,eax
c00186c7:	75 0f                	jne    c00186d8 <CPU::detectFeatures()+0x2a2>
c00186c9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00186d3:	e9 35 01 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c00186d8:	50                   	push   eax
c00186d9:	50                   	push   eax
c00186da:	68 f1 9e 02 c0       	push   0xc0029ef1
c00186df:	57                   	push   edi
c00186e0:	e8 96 80 fe ff       	call   c000077b <strcmp>
c00186e5:	83 c4 10             	add    esp,0x10
c00186e8:	85 c0                	test   eax,eax
c00186ea:	75 0f                	jne    c00186fb <CPU::detectFeatures()+0x2c5>
c00186ec:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00186f6:	e9 12 01 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c00186fb:	51                   	push   ecx
c00186fc:	51                   	push   ecx
c00186fd:	68 fe 9e 02 c0       	push   0xc0029efe
c0018702:	57                   	push   edi
c0018703:	e8 73 80 fe ff       	call   c000077b <strcmp>
c0018708:	83 c4 10             	add    esp,0x10
c001870b:	85 c0                	test   eax,eax
c001870d:	75 0f                	jne    c001871e <CPU::detectFeatures()+0x2e8>
c001870f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018719:	e9 ef 00 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c001871e:	52                   	push   edx
c001871f:	52                   	push   edx
c0018720:	68 0b 9f 02 c0       	push   0xc0029f0b
c0018725:	57                   	push   edi
c0018726:	e8 50 80 fe ff       	call   c000077b <strcmp>
c001872b:	83 c4 10             	add    esp,0x10
c001872e:	85 c0                	test   eax,eax
c0018730:	75 0f                	jne    c0018741 <CPU::detectFeatures()+0x30b>
c0018732:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001873c:	e9 cc 00 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c0018741:	50                   	push   eax
c0018742:	50                   	push   eax
c0018743:	68 18 9f 02 c0       	push   0xc0029f18
c0018748:	57                   	push   edi
c0018749:	e8 2d 80 fe ff       	call   c000077b <strcmp>
c001874e:	83 c4 10             	add    esp,0x10
c0018751:	85 c0                	test   eax,eax
c0018753:	75 0f                	jne    c0018764 <CPU::detectFeatures()+0x32e>
c0018755:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001875f:	e9 a9 00 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c0018764:	50                   	push   eax
c0018765:	50                   	push   eax
c0018766:	68 25 9f 02 c0       	push   0xc0029f25
c001876b:	57                   	push   edi
c001876c:	e8 0a 80 fe ff       	call   c000077b <strcmp>
c0018771:	83 c4 10             	add    esp,0x10
c0018774:	85 c0                	test   eax,eax
c0018776:	75 0f                	jne    c0018787 <CPU::detectFeatures()+0x351>
c0018778:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018782:	e9 86 00 00 00       	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c0018787:	50                   	push   eax
c0018788:	50                   	push   eax
c0018789:	68 32 9f 02 c0       	push   0xc0029f32
c001878e:	57                   	push   edi
c001878f:	e8 e7 7f fe ff       	call   c000077b <strcmp>
c0018794:	83 c4 10             	add    esp,0x10
c0018797:	85 c0                	test   eax,eax
c0018799:	75 0c                	jne    c00187a7 <CPU::detectFeatures()+0x371>
c001879b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00187a5:	eb 66                	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c00187a7:	50                   	push   eax
c00187a8:	50                   	push   eax
c00187a9:	68 3f 9f 02 c0       	push   0xc0029f3f
c00187ae:	57                   	push   edi
c00187af:	e8 c7 7f fe ff       	call   c000077b <strcmp>
c00187b4:	83 c4 10             	add    esp,0x10
c00187b7:	85 c0                	test   eax,eax
c00187b9:	75 0c                	jne    c00187c7 <CPU::detectFeatures()+0x391>
c00187bb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00187c5:	eb 46                	jmp    c001880d <CPU::detectFeatures()+0x3d7>
c00187c7:	50                   	push   eax
c00187c8:	50                   	push   eax
c00187c9:	68 4c 9f 02 c0       	push   0xc0029f4c
c00187ce:	57                   	push   edi
c00187cf:	e8 a7 7f fe ff       	call   c000077b <strcmp>
c00187d4:	83 c4 10             	add    esp,0x10
c00187d7:	85 c0                	test   eax,eax
c00187d9:	74 e0                	je     c00187bb <CPU::detectFeatures()+0x385>
c00187db:	50                   	push   eax
c00187dc:	50                   	push   eax
c00187dd:	68 59 9f 02 c0       	push   0xc0029f59
c00187e2:	57                   	push   edi
c00187e3:	e8 93 7f fe ff       	call   c000077b <strcmp>
c00187e8:	83 c4 10             	add    esp,0x10
c00187eb:	85 c0                	test   eax,eax
c00187ed:	74 cc                	je     c00187bb <CPU::detectFeatures()+0x385>
c00187ef:	51                   	push   ecx
c00187f0:	51                   	push   ecx
c00187f1:	68 66 9f 02 c0       	push   0xc0029f66
c00187f6:	57                   	push   edi
c00187f7:	e8 7f 7f fe ff       	call   c000077b <strcmp>
c00187fc:	83 c4 10             	add    esp,0x10
c00187ff:	85 c0                	test   eax,eax
c0018801:	74 b8                	je     c00187bb <CPU::detectFeatures()+0x385>
c0018803:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001880d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018812:	0f 86 be 00 00 00    	jbe    c00188d6 <CPU::detectFeatures()+0x4a0>
c0018818:	83 ec 0c             	sub    esp,0xc
c001881b:	68 80 00 00 00       	push   0x80
c0018820:	e8 ab f8 ff ff       	call   c00180d0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018825:	83 e0 01             	and    eax,0x1
c0018828:	c1 e0 06             	shl    eax,0x6
c001882b:	88 c2                	mov    dl,al
c001882d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018833:	83 e0 bf             	and    eax,0xffffffbf
c0018836:	09 d0                	or     eax,edx
c0018838:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001883e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018845:	e8 86 f8 ff ff       	call   c00180d0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001884a:	83 e0 01             	and    eax,0x1
c001884d:	c1 e0 04             	shl    eax,0x4
c0018850:	88 c2                	mov    dl,al
c0018852:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018858:	83 e0 ef             	and    eax,0xffffffef
c001885b:	09 d0                	or     eax,edx
c001885d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018863:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001886a:	e8 61 f8 ff ff       	call   c00180d0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001886f:	c1 e0 07             	shl    eax,0x7
c0018872:	88 c2                	mov    dl,al
c0018874:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001887a:	83 e0 7f             	and    eax,0x7f
c001887d:	09 d0                	or     eax,edx
c001887f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018885:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001888c:	e8 6d f8 ff ff       	call   c00180fe <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018891:	83 e0 01             	and    eax,0x1
c0018894:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001889b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00188a1:	83 e0 f7             	and    eax,0xfffffff7
c00188a4:	09 d0                	or     eax,edx
c00188a6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00188ac:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00188b3:	e8 46 f8 ff ff       	call   c00180fe <CPU::cpuidCheckExtendedECX(unsigned int)>
c00188b8:	83 c4 10             	add    esp,0x10
c00188bb:	83 e0 01             	and    eax,0x1
c00188be:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00188c5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00188cb:	83 e0 fb             	and    eax,0xfffffffb
c00188ce:	09 d0                	or     eax,edx
c00188d0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00188d6:	83 ec 0c             	sub    esp,0xc
c00188d9:	56                   	push   esi
c00188da:	55                   	push   ebp
c00188db:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00188df:	57                   	push   edi
c00188e0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188e4:	50                   	push   eax
c00188e5:	6a 01                	push   0x1
c00188e7:	e8 04 f7 ff ff       	call   c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188ec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00188f0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00188f6:	88 ca                	mov    dl,cl
c00188f8:	83 e0 f0             	and    eax,0xfffffff0
c00188fb:	83 e2 0f             	and    edx,0xf
c00188fe:	09 d0                	or     eax,edx
c0018900:	88 ca                	mov    dl,cl
c0018902:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018908:	c0 ea 04             	shr    dl,0x4
c001890b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001890f:	0f b6 c2             	movzx  eax,dl
c0018912:	83 c4 20             	add    esp,0x20
c0018915:	c1 e0 06             	shl    eax,0x6
c0018918:	89 c5                	mov    ebp,eax
c001891a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018920:	66 25 3f c0          	and    ax,0xc03f
c0018924:	09 e8                	or     eax,ebp
c0018926:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001892d:	89 c8                	mov    eax,ecx
c001892f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018935:	c1 e8 08             	shr    eax,0x8
c0018938:	83 e2 3f             	and    edx,0x3f
c001893b:	83 e0 0f             	and    eax,0xf
c001893e:	89 c5                	mov    ebp,eax
c0018940:	c1 e5 06             	shl    ebp,0x6
c0018943:	09 d5                	or     ebp,edx
c0018945:	89 ea                	mov    edx,ebp
c0018947:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001894d:	88 c2                	mov    dl,al
c001894f:	c0 ea 02             	shr    dl,0x2
c0018952:	89 d5                	mov    ebp,edx
c0018954:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001895a:	83 e2 c0             	and    edx,0xffffffc0
c001895d:	09 d5                	or     ebp,edx
c001895f:	89 ea                	mov    edx,ebp
c0018961:	89 cd                	mov    ebp,ecx
c0018963:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018969:	c1 ed 0c             	shr    ebp,0xc
c001896c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018972:	83 e5 03             	and    ebp,0x3
c0018975:	83 e2 cf             	and    edx,0xffffffcf
c0018978:	c1 e5 04             	shl    ebp,0x4
c001897b:	09 d5                	or     ebp,edx
c001897d:	3c 06                	cmp    al,0x6
c001897f:	89 ea                	mov    edx,ebp
c0018981:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018987:	74 04                	je     c001898d <CPU::detectFeatures()+0x557>
c0018989:	3c 0f                	cmp    al,0xf
c001898b:	75 5c                	jne    c00189e9 <CPU::detectFeatures()+0x5b3>
c001898d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018991:	89 cd                	mov    ebp,ecx
c0018993:	c1 ed 10             	shr    ebp,0x10
c0018996:	c1 e5 04             	shl    ebp,0x4
c0018999:	09 ea                	or     edx,ebp
c001899b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00189a1:	0f b6 d2             	movzx  edx,dl
c00189a4:	66 81 e5 3f c0       	and    bp,0xc03f
c00189a9:	c1 e2 06             	shl    edx,0x6
c00189ac:	09 ea                	or     edx,ebp
c00189ae:	3c 0f                	cmp    al,0xf
c00189b0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00189b7:	75 30                	jne    c00189e9 <CPU::detectFeatures()+0x5b3>
c00189b9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00189bf:	c1 e9 14             	shr    ecx,0x14
c00189c2:	83 e0 3f             	and    eax,0x3f
c00189c5:	83 c1 0f             	add    ecx,0xf
c00189c8:	88 ca                	mov    dl,cl
c00189ca:	c0 e9 02             	shr    cl,0x2
c00189cd:	c1 e2 06             	shl    edx,0x6
c00189d0:	09 d0                	or     eax,edx
c00189d2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00189d8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00189de:	83 e0 c0             	and    eax,0xffffffc0
c00189e1:	09 c1                	or     ecx,eax
c00189e3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00189e9:	83 ec 0c             	sub    esp,0xc
c00189ec:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00189f3:	56                   	push   esi
c00189f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189f8:	50                   	push   eax
c00189f9:	57                   	push   edi
c00189fa:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00189fe:	55                   	push   ebp
c00189ff:	68 00 00 00 80       	push   0x80000000
c0018a04:	e8 e7 f5 ff ff       	call   c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a09:	83 c4 20             	add    esp,0x20
c0018a0c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018a14:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a18:	76 1e                	jbe    c0018a38 <CPU::detectFeatures()+0x602>
c0018a1a:	83 ec 0c             	sub    esp,0xc
c0018a1d:	56                   	push   esi
c0018a1e:	50                   	push   eax
c0018a1f:	57                   	push   edi
c0018a20:	55                   	push   ebp
c0018a21:	68 01 00 00 80       	push   0x80000001
c0018a26:	e8 c5 f5 ff ff       	call   c0017ff0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a2b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018a35:	83 c4 20             	add    esp,0x20
c0018a38:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018a3e:	83 f8 01             	cmp    eax,0x1
c0018a41:	75 6f                	jne    c0018ab2 <CPU::detectFeatures()+0x67c>
c0018a43:	51                   	push   ecx
c0018a44:	51                   	push   ecx
c0018a45:	68 72 9f 02 c0       	push   0xc0029f72
c0018a4a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a4e:	56                   	push   esi
c0018a4f:	e8 d6 7c fe ff       	call   c000072a <strcpy>
c0018a54:	5f                   	pop    edi
c0018a55:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a5b:	5d                   	pop    ebp
c0018a5c:	66 c1 e8 06          	shr    ax,0x6
c0018a60:	0f b6 c0             	movzx  eax,al
c0018a63:	50                   	push   eax
c0018a64:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a6a:	c1 e8 0e             	shr    eax,0xe
c0018a6d:	0f b6 c0             	movzx  eax,al
c0018a70:	50                   	push   eax
c0018a71:	e8 24 f2 ff ff       	call   c0017c9a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018a76:	5a                   	pop    edx
c0018a77:	59                   	pop    ecx
c0018a78:	50                   	push   eax
c0018a79:	56                   	push   esi
c0018a7a:	e8 62 7d fe ff       	call   c00007e1 <strcat>
c0018a7f:	5f                   	pop    edi
c0018a80:	5d                   	pop    ebp
c0018a81:	56                   	push   esi
c0018a82:	53                   	push   ebx
c0018a83:	e8 1a b2 ff ff       	call   c0013ca2 <Device::setName(char const*)>
c0018a88:	58                   	pop    eax
c0018a89:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018a8f:	5a                   	pop    edx
c0018a90:	68 79 9f 02 c0       	push   0xc0029f79
c0018a95:	50                   	push   eax
c0018a96:	e8 e0 7c fe ff       	call   c000077b <strcmp>
c0018a9b:	83 c4 10             	add    esp,0x10
c0018a9e:	85 c0                	test   eax,eax
c0018aa0:	0f 85 71 03 00 00    	jne    c0018e17 <CPU::detectFeatures()+0x9e1>
c0018aa6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018aad:	e9 65 03 00 00       	jmp    c0018e17 <CPU::detectFeatures()+0x9e1>
c0018ab2:	83 f8 02             	cmp    eax,0x2
c0018ab5:	0f 85 b5 00 00 00    	jne    c0018b70 <CPU::detectFeatures()+0x73a>
c0018abb:	57                   	push   edi
c0018abc:	57                   	push   edi
c0018abd:	68 8b 9f 02 c0       	push   0xc0029f8b
c0018ac2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018ac6:	56                   	push   esi
c0018ac7:	e8 5e 7c fe ff       	call   c000072a <strcpy>
c0018acc:	5d                   	pop    ebp
c0018acd:	58                   	pop    eax
c0018ace:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ad4:	66 c1 e8 06          	shr    ax,0x6
c0018ad8:	0f b6 c0             	movzx  eax,al
c0018adb:	50                   	push   eax
c0018adc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ae2:	c1 e8 0e             	shr    eax,0xe
c0018ae5:	0f b6 c0             	movzx  eax,al
c0018ae8:	50                   	push   eax
c0018ae9:	e8 18 f0 ff ff       	call   c0017b06 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018aee:	5a                   	pop    edx
c0018aef:	59                   	pop    ecx
c0018af0:	50                   	push   eax
c0018af1:	56                   	push   esi
c0018af2:	e8 ea 7c fe ff       	call   c00007e1 <strcat>
c0018af7:	5f                   	pop    edi
c0018af8:	5d                   	pop    ebp
c0018af9:	56                   	push   esi
c0018afa:	53                   	push   ebx
c0018afb:	e8 a2 b1 ff ff       	call   c0013ca2 <Device::setName(char const*)>
c0018b00:	58                   	pop    eax
c0018b01:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018b07:	5a                   	pop    edx
c0018b08:	68 90 9f 02 c0       	push   0xc0029f90
c0018b0d:	50                   	push   eax
c0018b0e:	e8 68 7c fe ff       	call   c000077b <strcmp>
c0018b13:	83 c4 10             	add    esp,0x10
c0018b16:	85 c0                	test   eax,eax
c0018b18:	75 20                	jne    c0018b3a <CPU::detectFeatures()+0x704>
c0018b1a:	8b 15 a8 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c8a8
c0018b20:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018b26:	a8 01                	test   al,0x1
c0018b28:	74 10                	je     c0018b3a <CPU::detectFeatures()+0x704>
c0018b2a:	83 e0 fe             	and    eax,0xfffffffe
c0018b2d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018b33:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018b3a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b40:	c1 e8 0e             	shr    eax,0xe
c0018b43:	3c 05                	cmp    al,0x5
c0018b45:	0f 85 cc 02 00 00    	jne    c0018e17 <CPU::detectFeatures()+0x9e1>
c0018b4b:	56                   	push   esi
c0018b4c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018b52:	83 e0 0f             	and    eax,0xf
c0018b55:	50                   	push   eax
c0018b56:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b5c:	66 c1 e8 06          	shr    ax,0x6
c0018b60:	0f b6 c0             	movzx  eax,al
c0018b63:	50                   	push   eax
c0018b64:	6a 05                	push   0x5
c0018b66:	e8 11 f4 ff ff       	call   c0017f7c <CPU::AMD_K6_writeback(int, int, int)>
c0018b6b:	e9 1f 02 00 00       	jmp    c0018d8f <CPU::detectFeatures()+0x959>
c0018b70:	8d 50 fd             	lea    edx,[eax-0x3]
c0018b73:	83 fa 01             	cmp    edx,0x1
c0018b76:	76 09                	jbe    c0018b81 <CPU::detectFeatures()+0x74b>
c0018b78:	83 f8 06             	cmp    eax,0x6
c0018b7b:	0f 85 91 01 00 00    	jne    c0018d12 <CPU::detectFeatures()+0x8dc>
c0018b81:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b87:	c1 ea 0e             	shr    edx,0xe
c0018b8a:	80 fa 05             	cmp    dl,0x5
c0018b8d:	75 7b                	jne    c0018c0a <CPU::detectFeatures()+0x7d4>
c0018b8f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b95:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018b9a:	66 81 fa 00 01       	cmp    dx,0x100
c0018b9f:	75 0c                	jne    c0018bad <CPU::detectFeatures()+0x777>
c0018ba1:	51                   	push   ecx
c0018ba2:	51                   	push   ecx
c0018ba3:	68 97 9f 02 c0       	push   0xc0029f97
c0018ba8:	e9 dc 01 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018bad:	66 81 fa 00 02       	cmp    dx,0x200
c0018bb2:	75 0c                	jne    c0018bc0 <CPU::detectFeatures()+0x78a>
c0018bb4:	52                   	push   edx
c0018bb5:	52                   	push   edx
c0018bb6:	68 aa 9f 02 c0       	push   0xc0029faa
c0018bbb:	e9 c9 01 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018bc0:	66 81 fa 40 02       	cmp    dx,0x240
c0018bc5:	75 0c                	jne    c0018bd3 <CPU::detectFeatures()+0x79d>
c0018bc7:	50                   	push   eax
c0018bc8:	50                   	push   eax
c0018bc9:	68 bc 9f 02 c0       	push   0xc0029fbc
c0018bce:	e9 b6 01 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018bd3:	83 f8 06             	cmp    eax,0x6
c0018bd6:	75 0c                	jne    c0018be4 <CPU::detectFeatures()+0x7ae>
c0018bd8:	50                   	push   eax
c0018bd9:	50                   	push   eax
c0018bda:	68 ce 9f 02 c0       	push   0xc0029fce
c0018bdf:	e9 a5 01 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018be4:	83 f8 04             	cmp    eax,0x4
c0018be7:	75 0c                	jne    c0018bf5 <CPU::detectFeatures()+0x7bf>
c0018be9:	50                   	push   eax
c0018bea:	50                   	push   eax
c0018beb:	68 da 9f 02 c0       	push   0xc0029fda
c0018bf0:	e9 94 01 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018bf5:	83 f8 03             	cmp    eax,0x3
c0018bf8:	0f 85 19 02 00 00    	jne    c0018e17 <CPU::detectFeatures()+0x9e1>
c0018bfe:	50                   	push   eax
c0018bff:	50                   	push   eax
c0018c00:	68 e2 9f 02 c0       	push   0xc0029fe2
c0018c05:	e9 7f 01 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018c0a:	80 fa 06             	cmp    dl,0x6
c0018c0d:	0f 85 db 00 00 00    	jne    c0018cee <CPU::detectFeatures()+0x8b8>
c0018c13:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c19:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018c1e:	66 81 fa 80 01       	cmp    dx,0x180
c0018c23:	75 0c                	jne    c0018c31 <CPU::detectFeatures()+0x7fb>
c0018c25:	50                   	push   eax
c0018c26:	50                   	push   eax
c0018c27:	68 ed 9f 02 c0       	push   0xc0029fed
c0018c2c:	e9 58 01 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018c31:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018c37:	66 f7 c1 80 ff       	test   cx,0xff80
c0018c3c:	75 0c                	jne    c0018c4a <CPU::detectFeatures()+0x814>
c0018c3e:	50                   	push   eax
c0018c3f:	50                   	push   eax
c0018c40:	68 fd 9f 02 c0       	push   0xc0029ffd
c0018c45:	e9 3f 01 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018c4a:	66 81 fa 40 02       	cmp    dx,0x240
c0018c4f:	75 0c                	jne    c0018c5d <CPU::detectFeatures()+0x827>
c0018c51:	55                   	push   ebp
c0018c52:	55                   	push   ebp
c0018c53:	68 04 a0 02 c0       	push   0xc002a004
c0018c58:	e9 2c 01 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018c5d:	66 81 fa 80 02       	cmp    dx,0x280
c0018c62:	75 0c                	jne    c0018c70 <CPU::detectFeatures()+0x83a>
c0018c64:	57                   	push   edi
c0018c65:	57                   	push   edi
c0018c66:	68 0d a0 02 c0       	push   0xc002a00d
c0018c6b:	e9 19 01 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018c70:	66 81 fa 40 03       	cmp    dx,0x340
c0018c75:	74 ed                	je     c0018c64 <CPU::detectFeatures()+0x82e>
c0018c77:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018c7c:	75 0c                	jne    c0018c8a <CPU::detectFeatures()+0x854>
c0018c7e:	56                   	push   esi
c0018c7f:	56                   	push   esi
c0018c80:	68 14 a0 02 c0       	push   0xc002a014
c0018c85:	e9 ff 00 00 00       	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018c8a:	83 f8 06             	cmp    eax,0x6
c0018c8d:	0f 84 45 ff ff ff    	je     c0018bd8 <CPU::detectFeatures()+0x7a2>
c0018c93:	83 f8 04             	cmp    eax,0x4
c0018c96:	0f 84 4d ff ff ff    	je     c0018be9 <CPU::detectFeatures()+0x7b3>
c0018c9c:	83 f8 03             	cmp    eax,0x3
c0018c9f:	0f 85 72 01 00 00    	jne    c0018e17 <CPU::detectFeatures()+0x9e1>
c0018ca5:	51                   	push   ecx
c0018ca6:	51                   	push   ecx
c0018ca7:	68 1d a0 02 c0       	push   0xc002a01d
c0018cac:	53                   	push   ebx
c0018cad:	e8 f0 af ff ff       	call   c0013ca2 <Device::setName(char const*)>
c0018cb2:	b1 c1                	mov    cl,0xc1
c0018cb4:	88 c8                	mov    al,cl
c0018cb6:	e6 22                	out    0x22,al
c0018cb8:	e4 23                	in     al,0x23
c0018cba:	88 c2                	mov    dl,al
c0018cbc:	88 c8                	mov    al,cl
c0018cbe:	e6 22                	out    0x22,al
c0018cc0:	88 d0                	mov    al,dl
c0018cc2:	83 c8 10             	or     eax,0x10
c0018cc5:	e6 23                	out    0x23,al
c0018cc7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018cce:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018cd1:	89 d0                	mov    eax,edx
c0018cd3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018cd9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018cdd:	40                   	inc    eax
c0018cde:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018ce4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018ce9:	e9 a1 00 00 00       	jmp    c0018d8f <CPU::detectFeatures()+0x959>
c0018cee:	83 f8 06             	cmp    eax,0x6
c0018cf1:	0f 84 e1 fe ff ff    	je     c0018bd8 <CPU::detectFeatures()+0x7a2>
c0018cf7:	83 f8 04             	cmp    eax,0x4
c0018cfa:	0f 84 e9 fe ff ff    	je     c0018be9 <CPU::detectFeatures()+0x7b3>
c0018d00:	83 f8 03             	cmp    eax,0x3
c0018d03:	0f 85 0e 01 00 00    	jne    c0018e17 <CPU::detectFeatures()+0x9e1>
c0018d09:	52                   	push   edx
c0018d0a:	52                   	push   edx
c0018d0b:	68 28 a0 02 c0       	push   0xc002a028
c0018d10:	eb 77                	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018d12:	83 f8 07             	cmp    eax,0x7
c0018d15:	75 09                	jne    c0018d20 <CPU::detectFeatures()+0x8ea>
c0018d17:	50                   	push   eax
c0018d18:	50                   	push   eax
c0018d19:	68 32 a0 02 c0       	push   0xc002a032
c0018d1e:	eb 69                	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018d20:	83 f8 0a             	cmp    eax,0xa
c0018d23:	75 09                	jne    c0018d2e <CPU::detectFeatures()+0x8f8>
c0018d25:	50                   	push   eax
c0018d26:	50                   	push   eax
c0018d27:	68 3d a0 02 c0       	push   0xc002a03d
c0018d2c:	eb 5b                	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018d2e:	83 f8 0b             	cmp    eax,0xb
c0018d31:	75 09                	jne    c0018d3c <CPU::detectFeatures()+0x906>
c0018d33:	50                   	push   eax
c0018d34:	50                   	push   eax
c0018d35:	68 45 a0 02 c0       	push   0xc002a045
c0018d3a:	eb 4d                	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018d3c:	83 f8 08             	cmp    eax,0x8
c0018d3f:	75 09                	jne    c0018d4a <CPU::detectFeatures()+0x914>
c0018d41:	50                   	push   eax
c0018d42:	50                   	push   eax
c0018d43:	68 4e a0 02 c0       	push   0xc002a04e
c0018d48:	eb 3f                	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018d4a:	83 f8 09             	cmp    eax,0x9
c0018d4d:	75 09                	jne    c0018d58 <CPU::detectFeatures()+0x922>
c0018d4f:	50                   	push   eax
c0018d50:	50                   	push   eax
c0018d51:	68 56 a0 02 c0       	push   0xc002a056
c0018d56:	eb 31                	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018d58:	83 f8 05             	cmp    eax,0x5
c0018d5b:	75 09                	jne    c0018d66 <CPU::detectFeatures()+0x930>
c0018d5d:	50                   	push   eax
c0018d5e:	50                   	push   eax
c0018d5f:	68 5e a0 02 c0       	push   0xc002a05e
c0018d64:	eb 23                	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018d66:	83 f8 0c             	cmp    eax,0xc
c0018d69:	75 09                	jne    c0018d74 <CPU::detectFeatures()+0x93e>
c0018d6b:	55                   	push   ebp
c0018d6c:	55                   	push   ebp
c0018d6d:	68 6c a0 02 c0       	push   0xc002a06c
c0018d72:	eb 15                	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018d74:	83 f8 0d             	cmp    eax,0xd
c0018d77:	75 09                	jne    c0018d82 <CPU::detectFeatures()+0x94c>
c0018d79:	57                   	push   edi
c0018d7a:	57                   	push   edi
c0018d7b:	68 77 a0 02 c0       	push   0xc002a077
c0018d80:	eb 07                	jmp    c0018d89 <CPU::detectFeatures()+0x953>
c0018d82:	56                   	push   esi
c0018d83:	56                   	push   esi
c0018d84:	68 8b a0 02 c0       	push   0xc002a08b
c0018d89:	53                   	push   ebx
c0018d8a:	e8 13 af ff ff       	call   c0013ca2 <Device::setName(char const*)>
c0018d8f:	83 c4 10             	add    esp,0x10
c0018d92:	e9 80 00 00 00       	jmp    c0018e17 <CPU::detectFeatures()+0x9e1>
c0018d97:	51                   	push   ecx
c0018d98:	51                   	push   ecx
c0018d99:	68 d7 9e 02 c0       	push   0xc0029ed7
c0018d9e:	57                   	push   edi
c0018d9f:	e8 86 79 fe ff       	call   c000072a <strcpy>
c0018da4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018dae:	e8 b0 74 fe ff       	call   c0000263 <is486>
c0018db3:	83 c4 10             	add    esp,0x10
c0018db6:	85 c0                	test   eax,eax
c0018db8:	74 2b                	je     c0018de5 <CPU::detectFeatures()+0x9af>
c0018dba:	52                   	push   edx
c0018dbb:	52                   	push   edx
c0018dbc:	68 97 a0 02 c0       	push   0xc002a097
c0018dc1:	53                   	push   ebx
c0018dc2:	e8 db ae ff ff       	call   c0013ca2 <Device::setName(char const*)>
c0018dc7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018dce:	0f 20 c0             	mov    eax,cr0
c0018dd1:	83 e0 14             	and    eax,0x14
c0018dd4:	83 c4 10             	add    esp,0x10
c0018dd7:	83 f8 04             	cmp    eax,0x4
c0018dda:	75 1f                	jne    c0018dfb <CPU::detectFeatures()+0x9c5>
c0018ddc:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018de3:	eb 32                	jmp    c0018e17 <CPU::detectFeatures()+0x9e1>
c0018de5:	50                   	push   eax
c0018de6:	50                   	push   eax
c0018de7:	68 a2 a0 02 c0       	push   0xc002a0a2
c0018dec:	53                   	push   ebx
c0018ded:	e8 b0 ae ff ff       	call   c0013ca2 <Device::setName(char const*)>
c0018df2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018df9:	eb d3                	jmp    c0018dce <CPU::detectFeatures()+0x998>
c0018dfb:	e8 3e 74 fe ff       	call   c000023e <hasLegacyFPU>
c0018e00:	83 e0 01             	and    eax,0x1
c0018e03:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e06:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018e0c:	83 e0 fd             	and    eax,0xfffffffd
c0018e0f:	09 d0                	or     eax,edx
c0018e11:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e17:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018e1e:	83 c4 4c             	add    esp,0x4c
c0018e21:	5b                   	pop    ebx
c0018e22:	5e                   	pop    esi
c0018e23:	5f                   	pop    edi
c0018e24:	5d                   	pop    ebp
c0018e25:	c3                   	ret    

c0018e26 <CPU::setupSMEP()>:
c0018e26:	0f 20 e0             	mov    eax,cr4
c0018e29:	0d 00 00 10 00       	or     eax,0x100000
c0018e2e:	0f 22 e0             	mov    cr4,eax
c0018e31:	c3                   	ret    

c0018e32 <CPU::setupUMIP()>:
c0018e32:	0f 20 e0             	mov    eax,cr4
c0018e35:	80 cc 08             	or     ah,0x8
c0018e38:	0f 22 e0             	mov    cr4,eax
c0018e3b:	c3                   	ret    

c0018e3c <CPU::setupTSC()>:
c0018e3c:	0f 20 e0             	mov    eax,cr4
c0018e3f:	83 c8 04             	or     eax,0x4
c0018e42:	0f 22 e0             	mov    cr4,eax
c0018e45:	c3                   	ret    

c0018e46 <CPU::setupLargePages()>:
c0018e46:	0f 20 e0             	mov    eax,cr4
c0018e49:	83 c8 10             	or     eax,0x10
c0018e4c:	0f 22 e0             	mov    cr4,eax
c0018e4f:	c3                   	ret    

c0018e50 <CPU::setupPAT()>:
c0018e50:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0018e55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018e5c:	74 2c                	je     c0018e8a <CPU::setupPAT()+0x3a>
c0018e5e:	53                   	push   ebx
c0018e5f:	83 ec 10             	sub    esp,0x10
c0018e62:	68 77 02 00 00       	push   0x277
c0018e67:	50                   	push   eax
c0018e68:	e8 0f 5c ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018e6d:	83 e2 f8             	and    edx,0xfffffff8
c0018e70:	83 ca 01             	or     edx,0x1
c0018e73:	52                   	push   edx
c0018e74:	50                   	push   eax
c0018e75:	68 77 02 00 00       	push   0x277
c0018e7a:	ff 35 a8 c8 02 c0    	push   DWORD PTR ds:0xc002c8a8
c0018e80:	e8 23 5c ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018e85:	83 c4 28             	add    esp,0x28
c0018e88:	5b                   	pop    ebx
c0018e89:	c3                   	ret    
c0018e8a:	c3                   	ret    
c0018e8b:	90                   	nop

c0018e8c <CPU::setupMTRR()>:
c0018e8c:	c3                   	ret    
c0018e8d:	90                   	nop

c0018e8e <CPU::setupGlobalPages()>:
c0018e8e:	0f 20 e0             	mov    eax,cr4
c0018e91:	0c 80                	or     al,0x80
c0018e93:	0f 22 e0             	mov    cr4,eax
c0018e96:	c3                   	ret    
c0018e97:	90                   	nop

c0018e98 <CPU::allowUsermodeDataAccess()>:
c0018e98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e9c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018ea3:	74 03                	je     c0018ea8 <CPU::allowUsermodeDataAccess()+0x10>
c0018ea5:	0f 01 cb             	stac   
c0018ea8:	c3                   	ret    
c0018ea9:	90                   	nop

c0018eaa <CPU::prohibitUsermodeDataAccess()>:
c0018eaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018eae:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018eb5:	74 03                	je     c0018eba <CPU::prohibitUsermodeDataAccess()+0x10>
c0018eb7:	0f 01 ca             	clac   
c0018eba:	c3                   	ret    
c0018ebb:	90                   	nop

c0018ebc <CPU::setupSMAP()>:
c0018ebc:	0f 20 e0             	mov    eax,cr4
c0018ebf:	0d 00 00 20 00       	or     eax,0x200000
c0018ec4:	0f 22 e0             	mov    cr4,eax
c0018ec7:	eb e1                	jmp    c0018eaa <CPU::prohibitUsermodeDataAccess()>
c0018ec9:	90                   	nop

c0018eca <CPU::setupFeatures()>:
c0018eca:	83 ec 0c             	sub    esp,0xc
c0018ecd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ed1:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018ed8:	74 07                	je     c0018ee1 <CPU::setupFeatures()+0x17>
c0018eda:	52                   	push   edx
c0018edb:	e8 46 ff ff ff       	call   c0018e26 <CPU::setupSMEP()>
c0018ee0:	58                   	pop    eax
c0018ee1:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018ee8:	74 07                	je     c0018ef1 <CPU::setupFeatures()+0x27>
c0018eea:	52                   	push   edx
c0018eeb:	e8 cc ff ff ff       	call   c0018ebc <CPU::setupSMAP()>
c0018ef0:	58                   	pop    eax
c0018ef1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018ef8:	74 07                	je     c0018f01 <CPU::setupFeatures()+0x37>
c0018efa:	52                   	push   edx
c0018efb:	e8 32 ff ff ff       	call   c0018e32 <CPU::setupUMIP()>
c0018f00:	58                   	pop    eax
c0018f01:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018f08:	74 07                	je     c0018f11 <CPU::setupFeatures()+0x47>
c0018f0a:	52                   	push   edx
c0018f0b:	e8 2c ff ff ff       	call   c0018e3c <CPU::setupTSC()>
c0018f10:	58                   	pop    eax
c0018f11:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018f18:	74 07                	je     c0018f21 <CPU::setupFeatures()+0x57>
c0018f1a:	52                   	push   edx
c0018f1b:	e8 26 ff ff ff       	call   c0018e46 <CPU::setupLargePages()>
c0018f20:	59                   	pop    ecx
c0018f21:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018f28:	74 07                	je     c0018f31 <CPU::setupFeatures()+0x67>
c0018f2a:	52                   	push   edx
c0018f2b:	e8 5e ff ff ff       	call   c0018e8e <CPU::setupGlobalPages()>
c0018f30:	58                   	pop    eax
c0018f31:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018f38:	74 0c                	je     c0018f46 <CPU::setupFeatures()+0x7c>
c0018f3a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018f3e:	83 c4 0c             	add    esp,0xc
c0018f41:	e9 0a ff ff ff       	jmp    c0018e50 <CPU::setupPAT()>
c0018f46:	83 c4 0c             	add    esp,0xc
c0018f49:	c3                   	ret    

c0018f4a <CPU::open(int, int, void*)>:
c0018f4a:	57                   	push   edi
c0018f4b:	56                   	push   esi
c0018f4c:	53                   	push   ebx
c0018f4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018f51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018f55:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018f5b:	83 ec 0c             	sub    esp,0xc
c0018f5e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018f64:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018f6a:	50                   	push   eax
c0018f6b:	e8 f8 5d ff ff       	call   c000ed68 <GDT::setup()>
c0018f70:	83 c4 0c             	add    esp,0xc
c0018f73:	6a 00                	push   0x0
c0018f75:	68 ef be ad de       	push   0xdeadbeef
c0018f7a:	57                   	push   edi
c0018f7b:	e8 d2 80 ff ff       	call   c0011052 <TSS::setup(unsigned long, unsigned long)>
c0018f80:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018f83:	e8 aa 80 ff ff       	call   c0011032 <TSS::flush()>
c0018f88:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018f8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f91:	e8 2e 60 ff ff       	call   c000efc4 <IDT::setup()>
c0018f96:	b8 00 04 00 00       	mov    eax,0x400
c0018f9b:	0f 23 f8             	mov    db7,eax
c0018f9e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018fa8:	e8 d1 6a ff ff       	call   c000fa7e <Phys::allocatePage()>
c0018fad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018fb3:	89 30                	mov    DWORD PTR [eax],esi
c0018fb5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018fbb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018fbe:	58                   	pop    eax
c0018fbf:	5a                   	pop    edx
c0018fc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018fc6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018fca:	e8 b5 90 ff ff       	call   c0012084 <VAS::setCPUSpecific(unsigned long)>
c0018fcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fd2:	e8 5f f4 ff ff       	call   c0018436 <CPU::detectFeatures()>
c0018fd7:	e8 aa bf ff ff       	call   c0014f86 <setupInterruptController()>
c0018fdc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018fe2:	a1 c0 c8 02 c0       	mov    eax,ds:0xc002c8c0
c0018fe7:	83 e0 10             	and    eax,0x10
c0018fea:	83 f8 01             	cmp    eax,0x1
c0018fed:	19 c0                	sbb    eax,eax
c0018fef:	83 e0 46             	and    eax,0x46
c0018ff2:	83 c0 1e             	add    eax,0x1e
c0018ff5:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ff8:	e8 41 d4 ff ff       	call   c001643e <setupTimer(int)>
c0018ffd:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019003:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019006:	e8 bf fe ff ff       	call   c0018eca <CPU::setupFeatures()>
c001900b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001900e:	e8 a7 f1 ff ff       	call   c00181ba <CPU::displayFeatures()>
c0019013:	83 c4 10             	add    esp,0x10
c0019016:	31 c0                	xor    eax,eax
c0019018:	5b                   	pop    ebx
c0019019:	5e                   	pop    esi
c001901a:	5f                   	pop    edi
c001901b:	c3                   	ret    

c001901c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001901c:	57                   	push   edi
c001901d:	56                   	push   esi
c001901e:	53                   	push   ebx
c001901f:	51                   	push   ecx
c0019020:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019024:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019027:	0f 02 c0             	lar    eax,ax
c001902a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001902d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019031:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019034:	88 ca                	mov    dl,cl
c0019036:	c0 ea 06             	shr    dl,0x6
c0019039:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001903d:	89 ca                	mov    edx,ecx
c001903f:	66 c1 ea 03          	shr    dx,0x3
c0019043:	83 e2 07             	and    edx,0x7
c0019046:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001904b:	88 17                	mov    BYTE PTR [edi],dl
c001904d:	0f 84 a6 01 00 00    	je     c00191f9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019053:	83 e1 07             	and    ecx,0x7
c0019056:	80 f9 04             	cmp    cl,0x4
c0019059:	0f 84 98 00 00 00    	je     c00190f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001905f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019064:	0f 95 c0             	setne  al
c0019067:	80 f9 05             	cmp    cl,0x5
c001906a:	0f 95 c2             	setne  dl
c001906d:	08 c2                	or     dl,al
c001906f:	74 79                	je     c00190ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019071:	84 c9                	test   cl,cl
c0019073:	75 05                	jne    c001907a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019075:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019078:	eb 3c                	jmp    c00190b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001907a:	80 f9 01             	cmp    cl,0x1
c001907d:	75 05                	jne    c0019084 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001907f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019082:	eb 32                	jmp    c00190b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019084:	80 f9 02             	cmp    cl,0x2
c0019087:	75 05                	jne    c001908e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019089:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001908c:	eb 28                	jmp    c00190b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001908e:	31 c0                	xor    eax,eax
c0019090:	80 f9 03             	cmp    cl,0x3
c0019093:	75 05                	jne    c001909a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019095:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019098:	eb 1c                	jmp    c00190b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001909a:	80 f9 05             	cmp    cl,0x5
c001909d:	75 05                	jne    c00190a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001909f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00190a2:	eb 12                	jmp    c00190b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00190a4:	80 f9 06             	cmp    cl,0x6
c00190a7:	75 05                	jne    c00190ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00190a9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00190ac:	eb 08                	jmp    c00190b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00190ae:	80 f9 07             	cmp    cl,0x7
c00190b1:	75 03                	jne    c00190b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00190b3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00190b6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00190bb:	75 10                	jne    c00190cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00190bd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00190c1:	b9 03 00 00 00       	mov    ecx,0x3
c00190c6:	01 d0                	add    eax,edx
c00190c8:	e9 37 01 00 00       	jmp    c0019204 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00190cd:	b9 02 00 00 00       	mov    ecx,0x2
c00190d2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00190d7:	0f 85 27 01 00 00    	jne    c0019204 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00190dd:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00190e0:	b9 06 00 00 00       	mov    ecx,0x6
c00190e5:	e9 1a 01 00 00       	jmp    c0019204 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00190ea:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00190ed:	b9 06 00 00 00       	mov    ecx,0x6
c00190f2:	e9 0f 01 00 00       	jmp    c0019206 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00190f7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00190fa:	88 ca                	mov    dl,cl
c00190fc:	c0 ea 06             	shr    dl,0x6
c00190ff:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019103:	89 ca                	mov    edx,ecx
c0019105:	66 c1 ea 03          	shr    dx,0x3
c0019109:	83 e2 07             	and    edx,0x7
c001910c:	80 e1 07             	and    cl,0x7
c001910f:	75 05                	jne    c0019116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019111:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019114:	eb 4c                	jmp    c0019162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019116:	80 f9 01             	cmp    cl,0x1
c0019119:	75 05                	jne    c0019120 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001911b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001911e:	eb 42                	jmp    c0019162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019120:	80 f9 02             	cmp    cl,0x2
c0019123:	75 05                	jne    c001912a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019125:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019128:	eb 38                	jmp    c0019162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001912a:	80 f9 03             	cmp    cl,0x3
c001912d:	75 05                	jne    c0019134 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001912f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019132:	eb 2e                	jmp    c0019162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019134:	80 f9 04             	cmp    cl,0x4
c0019137:	75 12                	jne    c001914b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019139:	f6 c4 60             	test   ah,0x60
c001913c:	75 08                	jne    c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001913e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019141:	8d 78 14             	lea    edi,[eax+0x14]
c0019144:	eb 1c                	jmp    c0019162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019146:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019149:	eb 17                	jmp    c0019162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001914b:	80 f9 05             	cmp    cl,0x5
c001914e:	75 05                	jne    c0019155 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019150:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019153:	eb 0d                	jmp    c0019162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019155:	80 f9 06             	cmp    cl,0x6
c0019158:	75 05                	jne    c001915f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001915a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001915d:	eb 03                	jmp    c0019162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001915f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019162:	84 d2                	test   dl,dl
c0019164:	75 05                	jne    c001916b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019166:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019169:	eb 3c                	jmp    c00191a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001916b:	80 fa 01             	cmp    dl,0x1
c001916e:	75 05                	jne    c0019175 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019170:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019173:	eb 32                	jmp    c00191a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019175:	80 fa 02             	cmp    dl,0x2
c0019178:	75 05                	jne    c001917f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001917a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001917d:	eb 28                	jmp    c00191a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001917f:	80 fa 03             	cmp    dl,0x3
c0019182:	75 05                	jne    c0019189 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019184:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019187:	eb 1e                	jmp    c00191a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019189:	31 c0                	xor    eax,eax
c001918b:	80 fa 04             	cmp    dl,0x4
c001918e:	74 17                	je     c00191a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019190:	80 fa 05             	cmp    dl,0x5
c0019193:	75 05                	jne    c001919a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019195:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019198:	eb 0d                	jmp    c00191a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001919a:	80 fa 06             	cmp    dl,0x6
c001919d:	75 05                	jne    c00191a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001919f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00191a2:	eb 03                	jmp    c00191a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00191a4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00191a7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00191ac:	0f 94 c2             	sete   dl
c00191af:	80 f9 05             	cmp    cl,0x5
c00191b2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00191b6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00191bb:	d3 e0                	shl    eax,cl
c00191bd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00191c1:	74 0a                	je     c00191cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00191c3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00191c6:	b9 07 00 00 00       	mov    ecx,0x7
c00191cb:	eb 37                	jmp    c0019204 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00191cd:	01 f8                	add    eax,edi
c00191cf:	b9 03 00 00 00       	mov    ecx,0x3
c00191d4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00191d9:	74 2b                	je     c0019206 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191db:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00191e0:	75 0d                	jne    c00191ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00191e2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00191e6:	01 c8                	add    eax,ecx
c00191e8:	b9 04 00 00 00       	mov    ecx,0x4
c00191ed:	eb 17                	jmp    c0019206 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191ef:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00191f2:	b9 07 00 00 00       	mov    ecx,0x7
c00191f7:	eb 0d                	jmp    c0019206 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191f9:	b9 02 00 00 00       	mov    ecx,0x2
c00191fe:	b2 01                	mov    dl,0x1
c0019200:	31 c0                	xor    eax,eax
c0019202:	eb 02                	jmp    c0019206 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019204:	31 d2                	xor    edx,edx
c0019206:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001920a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001920c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019210:	88 11                	mov    BYTE PTR [ecx],dl
c0019212:	5a                   	pop    edx
c0019213:	5b                   	pop    ebx
c0019214:	5e                   	pop    esi
c0019215:	5f                   	pop    edi
c0019216:	c3                   	ret    
c0019217:	90                   	nop

c0019218 <EnvVarContainer::getEnv(char const*)>:
c0019218:	57                   	push   edi
c0019219:	56                   	push   esi
c001921a:	53                   	push   ebx
c001921b:	31 db                	xor    ebx,ebx
c001921d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019221:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019223:	7e 2b                	jle    c0019250 <EnvVarContainer::getEnv(char const*)+0x38>
c0019225:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001922c:	50                   	push   eax
c001922d:	50                   	push   eax
c001922e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019231:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019234:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019238:	e8 3e 75 fe ff       	call   c000077b <strcmp>
c001923d:	83 c4 10             	add    esp,0x10
c0019240:	85 c0                	test   eax,eax
c0019242:	75 09                	jne    c001924d <EnvVarContainer::getEnv(char const*)+0x35>
c0019244:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019247:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001924b:	eb 05                	jmp    c0019252 <EnvVarContainer::getEnv(char const*)+0x3a>
c001924d:	43                   	inc    ebx
c001924e:	eb d1                	jmp    c0019221 <EnvVarContainer::getEnv(char const*)+0x9>
c0019250:	31 c0                	xor    eax,eax
c0019252:	5b                   	pop    ebx
c0019253:	5e                   	pop    esi
c0019254:	5f                   	pop    edi
c0019255:	c3                   	ret    

c0019256 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019256:	57                   	push   edi
c0019257:	56                   	push   esi
c0019258:	53                   	push   ebx
c0019259:	83 ec 1c             	sub    esp,0x1c
c001925c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019260:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019264:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019268:	57                   	push   edi
c0019269:	e8 3a 74 fe ff       	call   c00006a8 <strlen>
c001926e:	40                   	inc    eax
c001926f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019272:	e8 5d 62 ff ff       	call   c000f4d4 <malloc>
c0019277:	89 34 24             	mov    DWORD PTR [esp],esi
c001927a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001927e:	e8 25 74 fe ff       	call   c00006a8 <strlen>
c0019283:	40                   	inc    eax
c0019284:	89 04 24             	mov    DWORD PTR [esp],eax
c0019287:	e8 48 62 ff ff       	call   c000f4d4 <malloc>
c001928c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001928f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019293:	e8 10 74 fe ff       	call   c00006a8 <strlen>
c0019298:	83 c4 0c             	add    esp,0xc
c001929b:	40                   	inc    eax
c001929c:	50                   	push   eax
c001929d:	6a 00                	push   0x0
c001929f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00192a3:	e8 e3 73 fe ff       	call   c000068b <memset>
c00192a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00192ab:	e8 f8 73 fe ff       	call   c00006a8 <strlen>
c00192b0:	83 c4 0c             	add    esp,0xc
c00192b3:	40                   	inc    eax
c00192b4:	50                   	push   eax
c00192b5:	57                   	push   edi
c00192b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00192ba:	e8 96 73 fe ff       	call   c0000655 <memcpy>
c00192bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00192c2:	e8 e1 73 fe ff       	call   c00006a8 <strlen>
c00192c7:	83 c4 0c             	add    esp,0xc
c00192ca:	40                   	inc    eax
c00192cb:	50                   	push   eax
c00192cc:	6a 00                	push   0x0
c00192ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192d2:	e8 b4 73 fe ff       	call   c000068b <memset>
c00192d7:	89 34 24             	mov    DWORD PTR [esp],esi
c00192da:	e8 c9 73 fe ff       	call   c00006a8 <strlen>
c00192df:	83 c4 0c             	add    esp,0xc
c00192e2:	40                   	inc    eax
c00192e3:	50                   	push   eax
c00192e4:	56                   	push   esi
c00192e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192e9:	e8 67 73 fe ff       	call   c0000655 <memcpy>
c00192ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00192f0:	40                   	inc    eax
c00192f1:	89 03                	mov    DWORD PTR [ebx],eax
c00192f3:	c1 e0 03             	shl    eax,0x3
c00192f6:	5a                   	pop    edx
c00192f7:	59                   	pop    ecx
c00192f8:	50                   	push   eax
c00192f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00192fc:	e8 bf 61 ff ff       	call   c000f4c0 <realloc>
c0019301:	83 c4 0c             	add    esp,0xc
c0019304:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019307:	6a 08                	push   0x8
c0019309:	8d 54 24 10          	lea    edx,[esp+0x10]
c001930d:	52                   	push   edx
c001930e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019310:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019314:	50                   	push   eax
c0019315:	e8 3b 73 fe ff       	call   c0000655 <memcpy>
c001931a:	83 c4 20             	add    esp,0x20
c001931d:	5b                   	pop    ebx
c001931e:	5e                   	pop    esi
c001931f:	5f                   	pop    edi
c0019320:	c3                   	ret    
c0019321:	90                   	nop

c0019322 <EnvVarContainer::deleteEnv(char const*)>:
c0019322:	c3                   	ret    
c0019323:	90                   	nop

c0019324 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019324:	55                   	push   ebp
c0019325:	57                   	push   edi
c0019326:	56                   	push   esi
c0019327:	53                   	push   ebx
c0019328:	81 ec 38 01 00 00    	sub    esp,0x138
c001932e:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019335:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001933c:	68 14 01 00 00       	push   0x114
c0019341:	e8 8e 61 ff ff       	call   c000f4d4 <malloc>
c0019346:	83 c4 0c             	add    esp,0xc
c0019349:	89 c7                	mov    edi,eax
c001934b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001934e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019355:	50                   	push   eax
c0019356:	e8 a5 98 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001935b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001935e:	e8 6f 9b ff ff       	call   c0012ed2 <File::exists()>
c0019363:	83 c4 10             	add    esp,0x10
c0019366:	84 c0                	test   al,al
c0019368:	75 31                	jne    c001939b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001936a:	51                   	push   ecx
c001936b:	51                   	push   ecx
c001936c:	6a 12                	push   0x12
c001936e:	57                   	push   edi
c001936f:	e8 f0 98 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c0019374:	8b 07                	mov    eax,DWORD PTR [edi]
c0019376:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001937c:	e8 27 73 fe ff       	call   c00006a8 <strlen>
c0019381:	5a                   	pop    edx
c0019382:	31 d2                	xor    edx,edx
c0019384:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019388:	51                   	push   ecx
c0019389:	55                   	push   ebp
c001938a:	52                   	push   edx
c001938b:	50                   	push   eax
c001938c:	57                   	push   edi
c001938d:	ff d3                	call   ebx
c001938f:	83 c4 14             	add    esp,0x14
c0019392:	57                   	push   edi
c0019393:	e8 2a 99 ff ff       	call   c0012cc2 <File::close()>
c0019398:	83 c4 10             	add    esp,0x10
c001939b:	31 db                	xor    ebx,ebx
c001939d:	50                   	push   eax
c001939e:	31 ed                	xor    ebp,ebp
c00193a0:	68 00 01 00 00       	push   0x100
c00193a5:	6a 00                	push   0x0
c00193a7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00193ab:	50                   	push   eax
c00193ac:	e8 da 72 fe ff       	call   c000068b <memset>
c00193b1:	58                   	pop    eax
c00193b2:	5a                   	pop    edx
c00193b3:	6a 01                	push   0x1
c00193b5:	57                   	push   edi
c00193b6:	e8 a9 98 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c00193bb:	83 c4 10             	add    esp,0x10
c00193be:	83 ec 0c             	sub    esp,0xc
c00193c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00193c3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00193c7:	51                   	push   ecx
c00193c8:	8d 54 24 23          	lea    edx,[esp+0x23]
c00193cc:	52                   	push   edx
c00193cd:	6a 00                	push   0x0
c00193cf:	6a 01                	push   0x1
c00193d1:	57                   	push   edi
c00193d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00193d5:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00193d9:	83 c4 20             	add    esp,0x20
c00193dc:	3c 0d                	cmp    al,0xd
c00193de:	0f 84 12 01 00 00    	je     c00194f6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00193e4:	85 db                	test   ebx,ebx
c00193e6:	0f 84 fd 00 00 00    	je     c00194e9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00193ec:	3c 0a                	cmp    al,0xa
c00193ee:	74 13                	je     c0019403 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00193f0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00193f5:	74 0c                	je     c0019403 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00193f7:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00193fd:	0f 8e e6 00 00 00    	jle    c00194e9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019403:	83 ec 0c             	sub    esp,0xc
c0019406:	8d 53 01             	lea    edx,[ebx+0x1]
c0019409:	29 dd                	sub    ebp,ebx
c001940b:	52                   	push   edx
c001940c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019410:	e8 bf 60 ff ff       	call   c000f4d4 <malloc>
c0019415:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019418:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001941c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001941f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019423:	e8 ac 60 ff ff       	call   c000f4d4 <malloc>
c0019428:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001942c:	83 c4 0c             	add    esp,0xc
c001942f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019433:	52                   	push   edx
c0019434:	6a 00                	push   0x0
c0019436:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001943a:	e8 4c 72 fe ff       	call   c000068b <memset>
c001943f:	83 c4 0c             	add    esp,0xc
c0019442:	53                   	push   ebx
c0019443:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019447:	55                   	push   ebp
c0019448:	01 eb                	add    ebx,ebp
c001944a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001944e:	e8 02 72 fe ff       	call   c0000655 <memcpy>
c0019453:	83 c4 0c             	add    esp,0xc
c0019456:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001945a:	51                   	push   ecx
c001945b:	6a 00                	push   0x0
c001945d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019461:	e8 25 72 fe ff       	call   c000068b <memset>
c0019466:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019469:	e8 3a 72 fe ff       	call   c00006a8 <strlen>
c001946e:	83 c4 0c             	add    esp,0xc
c0019471:	50                   	push   eax
c0019472:	53                   	push   ebx
c0019473:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019477:	e8 d9 71 fe ff       	call   c0000655 <memcpy>
c001947c:	5b                   	pop    ebx
c001947d:	58                   	pop    eax
c001947e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019482:	68 dc a0 02 c0       	push   0xc002a0dc
c0019487:	e8 45 92 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001948c:	8b 06                	mov    eax,DWORD PTR [esi]
c001948e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019491:	40                   	inc    eax
c0019492:	83 c4 10             	add    esp,0x10
c0019495:	89 06                	mov    DWORD PTR [esi],eax
c0019497:	85 d2                	test   edx,edx
c0019499:	75 0c                	jne    c00194a7 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001949b:	83 ec 0c             	sub    esp,0xc
c001949e:	6a 08                	push   0x8
c00194a0:	e8 2f 60 ff ff       	call   c000f4d4 <malloc>
c00194a5:	eb 0c                	jmp    c00194b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c00194a7:	c1 e0 03             	shl    eax,0x3
c00194aa:	51                   	push   ecx
c00194ab:	51                   	push   ecx
c00194ac:	50                   	push   eax
c00194ad:	52                   	push   edx
c00194ae:	e8 0d 60 ff ff       	call   c000f4c0 <realloc>
c00194b3:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c00194b6:	83 c4 10             	add    esp,0x10
c00194b9:	31 db                	xor    ebx,ebx
c00194bb:	52                   	push   edx
c00194bc:	6a 08                	push   0x8
c00194be:	8d 44 24 20          	lea    eax,[esp+0x20]
c00194c2:	50                   	push   eax
c00194c3:	8b 16                	mov    edx,DWORD PTR [esi]
c00194c5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00194c8:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00194cc:	50                   	push   eax
c00194cd:	e8 83 71 fe ff       	call   c0000655 <memcpy>
c00194d2:	83 c4 0c             	add    esp,0xc
c00194d5:	68 00 01 00 00       	push   0x100
c00194da:	6a 00                	push   0x0
c00194dc:	55                   	push   ebp
c00194dd:	31 ed                	xor    ebp,ebp
c00194df:	e8 a7 71 fe ff       	call   c000068b <memset>
c00194e4:	83 c4 10             	add    esp,0x10
c00194e7:	eb 0d                	jmp    c00194f6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00194e9:	3c 3d                	cmp    al,0x3d
c00194eb:	74 07                	je     c00194f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00194ed:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00194f1:	45                   	inc    ebp
c00194f2:	eb 02                	jmp    c00194f6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00194f4:	89 eb                	mov    ebx,ebp
c00194f6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00194fb:	0f 85 bd fe ff ff    	jne    c00193be <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019501:	50                   	push   eax
c0019502:	50                   	push   eax
c0019503:	ff 36                	push   DWORD PTR [esi]
c0019505:	68 ea a0 02 c0       	push   0xc002a0ea
c001950a:	e8 c2 91 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001950f:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019515:	5b                   	pop    ebx
c0019516:	5e                   	pop    esi
c0019517:	5f                   	pop    edi
c0019518:	5d                   	pop    ebp
c0019519:	c3                   	ret    

c001951a <EnvVarContainer::__loadSystem()>:
c001951a:	83 ec 10             	sub    esp,0x10
c001951d:	68 e0 bd 02 c0       	push   0xc002bde0
c0019522:	68 15 a1 02 c0       	push   0xc002a115
c0019527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001952b:	e8 f4 fd ff ff       	call   c0019324 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019530:	83 c4 1c             	add    esp,0x1c
c0019533:	c3                   	ret    

c0019534 <EnvVarContainer::__loadUser()>:
c0019534:	c3                   	ret    
c0019535:	90                   	nop

c0019536 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001953a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019544:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019548:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001954b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001954f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019556:	90                   	nop
c0019557:	c3                   	ret    

c0019558 <EnvVarContainer::~EnvVarContainer()>:
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001955f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019562:	85 c0                	test   eax,eax
c0019564:	74 1d                	je     c0019583 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001956a:	8b 00                	mov    eax,DWORD PTR [eax]
c001956c:	85 c0                	test   eax,eax
c001956e:	74 13                	je     c0019583 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019577:	83 ec 0c             	sub    esp,0xc
c001957a:	50                   	push   eax
c001957b:	e8 64 5f ff ff       	call   c000f4e4 <free>
c0019580:	83 c4 10             	add    esp,0x10
c0019583:	90                   	nop
c0019584:	83 c4 0c             	add    esp,0xc
c0019587:	c3                   	ret    

c0019588 <Krnl::getEnv(Process*, char const*)>:
c0019588:	53                   	push   ebx
c0019589:	83 ec 08             	sub    esp,0x8
c001958c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019590:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019594:	39 05 d4 dd 02 c0    	cmp    DWORD PTR ds:0xc002ddd4,eax
c001959a:	74 04                	je     c00195a0 <Krnl::getEnv(Process*, char const*)+0x18>
c001959c:	85 c0                	test   eax,eax
c001959e:	75 0b                	jne    c00195ab <Krnl::getEnv(Process*, char const*)+0x23>
c00195a0:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c00195a5:	85 c0                	test   eax,eax
c00195a7:	75 19                	jne    c00195c2 <Krnl::getEnv(Process*, char const*)+0x3a>
c00195a9:	eb 27                	jmp    c00195d2 <Krnl::getEnv(Process*, char const*)+0x4a>
c00195ab:	52                   	push   edx
c00195ac:	52                   	push   edx
c00195ad:	53                   	push   ebx
c00195ae:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c00195b4:	e8 5f fc ff ff       	call   c0019218 <EnvVarContainer::getEnv(char const*)>
c00195b9:	83 c4 10             	add    esp,0x10
c00195bc:	85 c0                	test   eax,eax
c00195be:	75 28                	jne    c00195e8 <Krnl::getEnv(Process*, char const*)+0x60>
c00195c0:	eb de                	jmp    c00195a0 <Krnl::getEnv(Process*, char const*)+0x18>
c00195c2:	52                   	push   edx
c00195c3:	52                   	push   edx
c00195c4:	53                   	push   ebx
c00195c5:	50                   	push   eax
c00195c6:	e8 4d fc ff ff       	call   c0019218 <EnvVarContainer::getEnv(char const*)>
c00195cb:	83 c4 10             	add    esp,0x10
c00195ce:	85 c0                	test   eax,eax
c00195d0:	75 16                	jne    c00195e8 <Krnl::getEnv(Process*, char const*)+0x60>
c00195d2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00195d6:	a1 b4 d3 02 c0       	mov    eax,ds:0xc002d3b4
c00195db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00195df:	83 c4 08             	add    esp,0x8
c00195e2:	5b                   	pop    ebx
c00195e3:	e9 30 fc ff ff       	jmp    c0019218 <EnvVarContainer::getEnv(char const*)>
c00195e8:	83 c4 08             	add    esp,0x8
c00195eb:	5b                   	pop    ebx
c00195ec:	c3                   	ret    

c00195ed <Krnl::setEnvSystem(char const*, char const*)>:
c00195ed:	83 ec 10             	sub    esp,0x10
c00195f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195f8:	ff 35 b4 d3 02 c0    	push   DWORD PTR ds:0xc002d3b4
c00195fe:	e8 53 fc ff ff       	call   c0019256 <EnvVarContainer::setEnv(char const*, char const*)>
c0019603:	83 c4 1c             	add    esp,0x1c
c0019606:	c3                   	ret    

c0019607 <Krnl::setEnvUser(char const*, char const*)>:
c0019607:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c001960c:	85 c0                	test   eax,eax
c001960e:	74 15                	je     c0019625 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019610:	83 ec 10             	sub    esp,0x10
c0019613:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019617:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001961b:	50                   	push   eax
c001961c:	e8 35 fc ff ff       	call   c0019256 <EnvVarContainer::setEnv(char const*, char const*)>
c0019621:	83 c4 1c             	add    esp,0x1c
c0019624:	c3                   	ret    
c0019625:	c3                   	ret    

c0019626 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001962a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019630:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019634:	e9 1d fc ff ff       	jmp    c0019256 <EnvVarContainer::setEnv(char const*, char const*)>

c0019639 <Krnl::deleteEnvSystem(char const*)>:
c0019639:	c3                   	ret    

c001963a <Krnl::deleteEnvUser(char const*)>:
c001963a:	c3                   	ret    

c001963b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001963b:	c3                   	ret    

c001963c <Krnl::newProcessEnv(Process*)>:
c001963c:	83 ec 28             	sub    esp,0x28
c001963f:	6a 0c                	push   0xc
c0019641:	e8 8e 5e ff ff       	call   c000f4d4 <malloc>
c0019646:	5a                   	pop    edx
c0019647:	59                   	pop    ecx
c0019648:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001964c:	50                   	push   eax
c001964d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019651:	e8 e0 fe ff ff       	call   c0019536 <EnvVarContainer::EnvVarContainer(Process*)>
c0019656:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001965a:	83 c4 2c             	add    esp,0x2c
c001965d:	c3                   	ret    

c001965e <Krnl::copyProcessEnv(Process*, Process*)>:
c001965e:	56                   	push   esi
c001965f:	53                   	push   ebx
c0019660:	83 ec 10             	sub    esp,0x10
c0019663:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019667:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001966d:	6a 0c                	push   0xc
c001966f:	e8 60 5e ff ff       	call   c000f4d4 <malloc>
c0019674:	89 c3                	mov    ebx,eax
c0019676:	58                   	pop    eax
c0019677:	5a                   	pop    edx
c0019678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001967c:	53                   	push   ebx
c001967d:	e8 b4 fe ff ff       	call   c0019536 <EnvVarContainer::EnvVarContainer(Process*)>
c0019682:	8b 06                	mov    eax,DWORD PTR [esi]
c0019684:	89 03                	mov    DWORD PTR [ebx],eax
c0019686:	c1 e0 03             	shl    eax,0x3
c0019689:	89 04 24             	mov    DWORD PTR [esp],eax
c001968c:	e8 43 5e ff ff       	call   c000f4d4 <malloc>
c0019691:	83 c4 0c             	add    esp,0xc
c0019694:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019697:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019699:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c00196a0:	52                   	push   edx
c00196a1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00196a4:	50                   	push   eax
c00196a5:	e8 ab 6f fe ff       	call   c0000655 <memcpy>
c00196aa:	89 d8                	mov    eax,ebx
c00196ac:	83 c4 14             	add    esp,0x14
c00196af:	5b                   	pop    ebx
c00196b0:	5e                   	pop    esi
c00196b1:	c3                   	ret    

c00196b2 <Krnl::loadSystemEnv()>:
c00196b2:	53                   	push   ebx
c00196b3:	83 ec 14             	sub    esp,0x14
c00196b6:	6a 0c                	push   0xc
c00196b8:	e8 17 5e ff ff       	call   c000f4d4 <malloc>
c00196bd:	89 c3                	mov    ebx,eax
c00196bf:	58                   	pop    eax
c00196c0:	5a                   	pop    edx
c00196c1:	ff 35 d4 dd 02 c0    	push   DWORD PTR ds:0xc002ddd4
c00196c7:	53                   	push   ebx
c00196c8:	e8 69 fe ff ff       	call   c0019536 <EnvVarContainer::EnvVarContainer(Process*)>
c00196cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196d0:	89 1d b4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3b4,ebx
c00196d6:	e8 3f fe ff ff       	call   c001951a <EnvVarContainer::__loadSystem()>
c00196db:	83 c4 18             	add    esp,0x18
c00196de:	5b                   	pop    ebx
c00196df:	c3                   	ret    

c00196e0 <Krnl::loadUserEnv()>:
c00196e0:	53                   	push   ebx
c00196e1:	83 ec 14             	sub    esp,0x14
c00196e4:	6a 0c                	push   0xc
c00196e6:	e8 e9 5d ff ff       	call   c000f4d4 <malloc>
c00196eb:	89 c3                	mov    ebx,eax
c00196ed:	58                   	pop    eax
c00196ee:	5a                   	pop    edx
c00196ef:	ff 35 d4 dd 02 c0    	push   DWORD PTR ds:0xc002ddd4
c00196f5:	53                   	push   ebx
c00196f6:	e8 3b fe ff ff       	call   c0019536 <EnvVarContainer::EnvVarContainer(Process*)>
c00196fb:	89 1d b0 d3 02 c0    	mov    DWORD PTR ds:0xc002d3b0,ebx
c0019701:	83 c4 18             	add    esp,0x18
c0019704:	5b                   	pop    ebx
c0019705:	c3                   	ret    

c0019706 <Krnl::flushEnv()>:
c0019706:	c3                   	ret    

c0019707 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019707:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001970b:	8b 15 b0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3b0
c0019711:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019717:	a1 b4 d3 02 c0       	mov    eax,ds:0xc002d3b4
c001971c:	8b 00                	mov    eax,DWORD PTR [eax]
c001971e:	03 01                	add    eax,DWORD PTR [ecx]
c0019720:	85 d2                	test   edx,edx
c0019722:	74 02                	je     c0019726 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019724:	03 02                	add    eax,DWORD PTR [edx]
c0019726:	c3                   	ret    

c0019727 <Krnl::getProcessEnvPair(Process*, int)>:
c0019727:	57                   	push   edi
c0019728:	8b 0d b0 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3b0
c001972e:	56                   	push   esi
c001972f:	85 c9                	test   ecx,ecx
c0019731:	53                   	push   ebx
c0019732:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019736:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001973a:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019740:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019744:	8b 02                	mov    eax,DWORD PTR [edx]
c0019746:	75 47                	jne    c001978f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019748:	39 c3                	cmp    ebx,eax
c001974a:	7c 47                	jl     c0019793 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001974c:	8b 15 b4 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3b4
c0019752:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019754:	01 c1                	add    ecx,eax
c0019756:	39 d9                	cmp    ecx,ebx
c0019758:	7e 6c                	jle    c00197c6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001975a:	51                   	push   ecx
c001975b:	89 d9                	mov    ecx,ebx
c001975d:	29 c1                	sub    ecx,eax
c001975f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019762:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019766:	53                   	push   ebx
c0019767:	68 37 a1 02 c0       	push   0xc002a137
c001976c:	e8 60 8f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0019771:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019777:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019779:	a1 b4 d3 02 c0       	mov    eax,ds:0xc002d3b4
c001977e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019781:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019785:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019788:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001978b:	89 06                	mov    DWORD PTR [esi],eax
c001978d:	eb 51                	jmp    c00197e0 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001978f:	39 c3                	cmp    ebx,eax
c0019791:	7d 05                	jge    c0019798 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019793:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019796:	eb 20                	jmp    c00197b8 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019798:	8b 39                	mov    edi,DWORD PTR [ecx]
c001979a:	8d 14 07             	lea    edx,[edi+eax*1]
c001979d:	39 da                	cmp    edx,ebx
c001979f:	7e 04                	jle    c00197a5 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c00197a1:	29 c3                	sub    ebx,eax
c00197a3:	eb 10                	jmp    c00197b5 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c00197a5:	8b 0d b4 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3b4
c00197ab:	03 11                	add    edx,DWORD PTR [ecx]
c00197ad:	39 da                	cmp    edx,ebx
c00197af:	7e 15                	jle    c00197c6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c00197b1:	29 c3                	sub    ebx,eax
c00197b3:	29 fb                	sub    ebx,edi
c00197b5:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00197b8:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c00197bc:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00197bf:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00197c2:	89 06                	mov    DWORD PTR [esi],eax
c00197c4:	eb 1d                	jmp    c00197e3 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c00197c6:	83 ec 0c             	sub    esp,0xc
c00197c9:	68 4b a1 02 c0       	push   0xc002a14b
c00197ce:	e8 18 00 00 00       	call   c00197eb <Krnl::panic(char const*)>
c00197d3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00197d9:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00197e0:	83 c4 10             	add    esp,0x10
c00197e3:	89 f0                	mov    eax,esi
c00197e5:	5b                   	pop    ebx
c00197e6:	5e                   	pop    esi
c00197e7:	5f                   	pop    edi
c00197e8:	c2 04 00             	ret    0x4

c00197eb <Krnl::panic(char const*)>:
c00197eb:	55                   	push   ebp
c00197ec:	89 e5                	mov    ebp,esp
c00197ee:	53                   	push   ebx
c00197ef:	50                   	push   eax
c00197f0:	a1 bc d3 02 c0       	mov    eax,ds:0xc002d3bc
c00197f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00197f8:	85 c0                	test   eax,eax
c00197fa:	74 02                	je     c00197fe <Krnl::panic(char const*)+0x13>
c00197fc:	ff d0                	call   eax
c00197fe:	fa                   	cli    
c00197ff:	c6 05 c0 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d3c0,0x1
c0019806:	83 ec 08             	sub    esp,0x8
c0019809:	c6 05 e4 b7 02 c0 00 	mov    BYTE PTR ds:0xc002b7e4,0x0
c0019810:	53                   	push   ebx
c0019811:	68 65 a1 02 c0       	push   0xc002a165
c0019816:	e8 b6 8e ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001981b:	58                   	pop    eax
c001981c:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019821:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019827:	e8 45 70 ff ff       	call   c0010871 <setActiveTerminal(VgaText*)>
c001982c:	83 c4 0c             	add    esp,0xc
c001982f:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019834:	6a 01                	push   0x1
c0019836:	6a 0f                	push   0xf
c0019838:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001983e:	e8 5f 6a ff ff       	call   c00102a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019843:	5a                   	pop    edx
c0019844:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019849:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001984f:	e8 be 72 ff ff       	call   c0010b12 <VgaText::clearScreen()>
c0019854:	59                   	pop    ecx
c0019855:	58                   	pop    eax
c0019856:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001985b:	68 7e a1 02 c0       	push   0xc002a17e
c0019860:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019866:	e8 25 74 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c001986b:	58                   	pop    eax
c001986c:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019871:	5a                   	pop    edx
c0019872:	68 24 a2 02 c0       	push   0xc002a224
c0019877:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001987d:	e8 0e 74 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0019882:	59                   	pop    ecx
c0019883:	58                   	pop    eax
c0019884:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019889:	68 9a a1 02 c0       	push   0xc002a19a
c001988e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019894:	e8 f7 73 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0019899:	58                   	pop    eax
c001989a:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001989f:	5a                   	pop    edx
c00198a0:	53                   	push   ebx
c00198a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198a7:	e8 e4 73 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00198ac:	59                   	pop    ecx
c00198ad:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00198b2:	5b                   	pop    ebx
c00198b3:	68 ba a1 02 c0       	push   0xc002a1ba
c00198b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198be:	e8 cd 73 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00198c3:	58                   	pop    eax
c00198c4:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00198c9:	5a                   	pop    edx
c00198ca:	68 60 a2 02 c0       	push   0xc002a260
c00198cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198d5:	e8 b6 73 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00198da:	59                   	pop    ecx
c00198db:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00198e0:	5b                   	pop    ebx
c00198e1:	68 9a a1 02 c0       	push   0xc002a19a
c00198e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198ec:	e8 9f 73 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00198f1:	58                   	pop    eax
c00198f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198f7:	5a                   	pop    edx
c00198f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00198fb:	83 c0 0c             	add    eax,0xc
c00198fe:	50                   	push   eax
c00198ff:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019904:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001990a:	e8 81 73 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c001990f:	59                   	pop    ecx
c0019910:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019915:	5b                   	pop    ebx
c0019916:	68 b9 a1 02 c0       	push   0xc002a1b9
c001991b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019921:	e8 6a 73 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0019926:	58                   	pop    eax
c0019927:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001992c:	5a                   	pop    edx
c001992d:	68 8c a2 02 c0       	push   0xc002a28c
c0019932:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019938:	e8 53 73 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c001993d:	59                   	pop    ecx
c001993e:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019943:	5b                   	pop    ebx
c0019944:	68 cc a2 02 c0       	push   0xc002a2cc
c0019949:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001994f:	e8 3c 73 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0019954:	58                   	pop    eax
c0019955:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001995a:	5a                   	pop    edx
c001995b:	68 a5 a1 02 c0       	push   0xc002a1a5
c0019960:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019966:	e8 25 73 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c001996b:	59                   	pop    ecx
c001996c:	5b                   	pop    ebx
c001996d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019970:	68 bd a1 02 c0       	push   0xc002a1bd
c0019975:	e8 57 8d ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001997a:	58                   	pop    eax
c001997b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001997e:	5a                   	pop    edx
c001997f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019982:	68 c6 a1 02 c0       	push   0xc002a1c6
c0019987:	e8 45 8d ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001998c:	59                   	pop    ecx
c001998d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019990:	5b                   	pop    ebx
c0019991:	8b 00                	mov    eax,DWORD PTR [eax]
c0019993:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019996:	68 cf a1 02 c0       	push   0xc002a1cf
c001999b:	e8 31 8d ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00199a0:	58                   	pop    eax
c00199a1:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00199a6:	5a                   	pop    edx
c00199a7:	68 10 a3 02 c0       	push   0xc002a310
c00199ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199b2:	e8 d9 72 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00199b7:	59                   	pop    ecx
c00199b8:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00199bd:	5b                   	pop    ebx
c00199be:	68 d8 a1 02 c0       	push   0xc002a1d8
c00199c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199c9:	e8 c2 72 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00199ce:	0f 20 c0             	mov    eax,cr0
c00199d1:	5a                   	pop    edx
c00199d2:	59                   	pop    ecx
c00199d3:	50                   	push   eax
c00199d4:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00199d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199df:	e8 d2 72 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c00199e4:	5b                   	pop    ebx
c00199e5:	58                   	pop    eax
c00199e6:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00199eb:	68 e2 a1 02 c0       	push   0xc002a1e2
c00199f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199f6:	e8 95 72 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c00199fb:	0f 20 d0             	mov    eax,cr2
c00199fe:	5a                   	pop    edx
c00199ff:	59                   	pop    ecx
c0019a00:	50                   	push   eax
c0019a01:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019a06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a0c:	e8 a5 72 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0019a11:	5b                   	pop    ebx
c0019a12:	58                   	pop    eax
c0019a13:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019a18:	68 ec a1 02 c0       	push   0xc002a1ec
c0019a1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a23:	e8 68 72 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0019a28:	0f 20 d8             	mov    eax,cr3
c0019a2b:	5a                   	pop    edx
c0019a2c:	59                   	pop    ecx
c0019a2d:	50                   	push   eax
c0019a2e:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019a33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a39:	e8 78 72 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0019a3e:	5b                   	pop    ebx
c0019a3f:	58                   	pop    eax
c0019a40:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019a45:	68 ff a1 02 c0       	push   0xc002a1ff
c0019a4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a50:	e8 3b 72 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0019a55:	0f 20 e0             	mov    eax,cr4
c0019a58:	5a                   	pop    edx
c0019a59:	59                   	pop    ecx
c0019a5a:	50                   	push   eax
c0019a5b:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019a60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a66:	e8 4b 72 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0019a6b:	5b                   	pop    ebx
c0019a6c:	58                   	pop    eax
c0019a6d:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019a72:	68 09 a2 02 c0       	push   0xc002a209
c0019a77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a7d:	e8 0e 72 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0019a82:	5a                   	pop    edx
c0019a83:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019a88:	59                   	pop    ecx
c0019a89:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019a8f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a92:	50                   	push   eax
c0019a93:	e8 1e 72 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0019a98:	5b                   	pop    ebx
c0019a99:	58                   	pop    eax
c0019a9a:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019a9f:	68 20 a2 02 c0       	push   0xc002a220
c0019aa4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aaa:	e8 e1 71 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0019aaf:	5a                   	pop    edx
c0019ab0:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019ab5:	59                   	pop    ecx
c0019ab6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019abc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019abf:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019ac2:	50                   	push   eax
c0019ac3:	e8 ee 71 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0019ac8:	5b                   	pop    ebx
c0019ac9:	58                   	pop    eax
c0019aca:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019acf:	68 20 a2 02 c0       	push   0xc002a220
c0019ad4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ada:	e8 b1 71 ff ff       	call   c0010c90 <VgaText::puts(char const*)>
c0019adf:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c0019ae4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ae7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019aed:	8b 12                	mov    edx,DWORD PTR [edx]
c0019aef:	59                   	pop    ecx
c0019af0:	5b                   	pop    ebx
c0019af1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019af4:	50                   	push   eax
c0019af5:	e8 bc 71 ff ff       	call   c0010cb6 <VgaText::putx(unsigned int)>
c0019afa:	83 c4 10             	add    esp,0x10
c0019afd:	b2 fe                	mov    dl,0xfe
c0019aff:	e4 60                	in     al,0x60
c0019b01:	3c 1c                	cmp    al,0x1c
c0019b03:	74 04                	je     c0019b09 <Krnl::panic(char const*)+0x31e>
c0019b05:	3c 5a                	cmp    al,0x5a
c0019b07:	75 f6                	jne    c0019aff <Krnl::panic(char const*)+0x314>
c0019b09:	e4 64                	in     al,0x64
c0019b0b:	a8 02                	test   al,0x2
c0019b0d:	75 fa                	jne    c0019b09 <Krnl::panic(char const*)+0x31e>
c0019b0f:	88 d0                	mov    al,dl
c0019b11:	e6 64                	out    0x64,al
c0019b13:	fa                   	cli    
c0019b14:	f4                   	hlt    
c0019b15:	eb e8                	jmp    c0019aff <Krnl::panic(char const*)+0x314>

c0019b17 <Net::switchEndian16(unsigned short)>:
c0019b17:	83 ec 04             	sub    esp,0x4
c0019b1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b1e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019b22:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019b26:	c1 f8 08             	sar    eax,0x8
c0019b29:	89 c2                	mov    edx,eax
c0019b2b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019b2f:	c1 e0 08             	shl    eax,0x8
c0019b32:	09 d0                	or     eax,edx
c0019b34:	83 c4 04             	add    esp,0x4
c0019b37:	c3                   	ret    

c0019b38 <Net::switchEndian32(unsigned int)>:
c0019b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b3c:	c1 e8 18             	shr    eax,0x18
c0019b3f:	89 c2                	mov    edx,eax
c0019b41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b45:	c1 e0 08             	shl    eax,0x8
c0019b48:	25 00 00 ff 00       	and    eax,0xff0000
c0019b4d:	09 c2                	or     edx,eax
c0019b4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b53:	c1 e8 08             	shr    eax,0x8
c0019b56:	25 00 ff 00 00       	and    eax,0xff00
c0019b5b:	09 c2                	or     edx,eax
c0019b5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b61:	c1 e0 18             	shl    eax,0x18
c0019b64:	09 d0                	or     eax,edx
c0019b66:	c3                   	ret    

c0019b67 <Net::crc32Calc(unsigned char*, int)>:
c0019b67:	83 ec 10             	sub    esp,0x10
c0019b6a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b6f:	75 07                	jne    c0019b78 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019b71:	b8 00 00 00 00       	mov    eax,0x0
c0019b76:	eb 7c                	jmp    c0019bf4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019b78:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019b7d:	7f 07                	jg     c0019b86 <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019b7f:	b8 00 00 00 00       	mov    eax,0x0
c0019b84:	eb 6e                	jmp    c0019bf4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019b86:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019b8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b9a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019b9e:	7d 4e                	jge    c0019bee <Net::crc32Calc(unsigned char*, int)+0x87>
c0019ba0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ba8:	01 d0                	add    eax,edx
c0019baa:	8a 00                	mov    al,BYTE PTR [eax]
c0019bac:	0f b6 c0             	movzx  eax,al
c0019baf:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019bb3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019bbb:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019bc0:	7f 26                	jg     c0019be8 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc6:	83 e0 01             	and    eax,0x1
c0019bc9:	74 0d                	je     c0019bd8 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019bcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bcf:	d1 e8                	shr    eax,1
c0019bd1:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019bd6:	eb 06                	jmp    c0019bde <Net::crc32Calc(unsigned char*, int)+0x77>
c0019bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bdc:	d1 e8                	shr    eax,1
c0019bde:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019be2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019be6:	eb d3                	jmp    c0019bbb <Net::crc32Calc(unsigned char*, int)+0x54>
c0019be8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019bec:	eb a8                	jmp    c0019b96 <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf2:	f7 d0                	not    eax
c0019bf4:	83 c4 10             	add    esp,0x10
c0019bf7:	c3                   	ret    

c0019bf8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019bf8:	83 ec 1c             	sub    esp,0x1c
c0019bfb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019c03:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c0b:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019c10:	7f 14                	jg     c0019c26 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019c12:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c16:	8d 50 01             	lea    edx,[eax+0x1]
c0019c19:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019c1d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019c20:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019c24:	eb e5                	jmp    c0019c0b <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019c26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c2a:	8d 50 01             	lea    edx,[eax+0x1]
c0019c2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019c31:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019c34:	83 ec 04             	sub    esp,0x4
c0019c37:	6a 06                	push   0x6
c0019c39:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019c3d:	50                   	push   eax
c0019c3e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019c42:	e8 0e 6a fe ff       	call   c0000655 <memcpy>
c0019c47:	83 c4 10             	add    esp,0x10
c0019c4a:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019c4f:	83 ec 04             	sub    esp,0x4
c0019c52:	6a 06                	push   0x6
c0019c54:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019c58:	50                   	push   eax
c0019c59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019c5d:	e8 f3 69 fe ff       	call   c0000655 <memcpy>
c0019c62:	83 c4 10             	add    esp,0x10
c0019c65:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019c6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019c6e:	0f b7 c0             	movzx  eax,ax
c0019c71:	c1 f8 08             	sar    eax,0x8
c0019c74:	89 c1                	mov    ecx,eax
c0019c76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c7a:	8d 50 01             	lea    edx,[eax+0x1]
c0019c7d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019c81:	88 ca                	mov    dl,cl
c0019c83:	88 10                	mov    BYTE PTR [eax],dl
c0019c85:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019c89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c8d:	8d 48 01             	lea    ecx,[eax+0x1]
c0019c90:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019c94:	88 10                	mov    BYTE PTR [eax],dl
c0019c96:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c9e:	83 ec 04             	sub    esp,0x4
c0019ca1:	52                   	push   edx
c0019ca2:	50                   	push   eax
c0019ca3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019ca7:	e8 a9 69 fe ff       	call   c0000655 <memcpy>
c0019cac:	83 c4 10             	add    esp,0x10
c0019caf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019cb3:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019cb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cbb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019cbf:	83 ec 08             	sub    esp,0x8
c0019cc2:	50                   	push   eax
c0019cc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019cc7:	e8 9b fe ff ff       	call   c0019b67 <Net::crc32Calc(unsigned char*, int)>
c0019ccc:	83 c4 10             	add    esp,0x10
c0019ccf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cd7:	c1 e8 18             	shr    eax,0x18
c0019cda:	89 c1                	mov    ecx,eax
c0019cdc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ce0:	8d 50 01             	lea    edx,[eax+0x1]
c0019ce3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ce7:	88 ca                	mov    dl,cl
c0019ce9:	88 10                	mov    BYTE PTR [eax],dl
c0019ceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cef:	c1 e8 10             	shr    eax,0x10
c0019cf2:	89 c1                	mov    ecx,eax
c0019cf4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0019cfb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cff:	88 ca                	mov    dl,cl
c0019d01:	88 10                	mov    BYTE PTR [eax],dl
c0019d03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d07:	c1 e8 08             	shr    eax,0x8
c0019d0a:	89 c1                	mov    ecx,eax
c0019d0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d10:	8d 50 01             	lea    edx,[eax+0x1]
c0019d13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d17:	88 ca                	mov    dl,cl
c0019d19:	88 10                	mov    BYTE PTR [eax],dl
c0019d1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d1f:	8d 50 01             	lea    edx,[eax+0x1]
c0019d22:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019d2a:	88 10                	mov    BYTE PTR [eax],dl
c0019d2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d30:	83 c4 1c             	add    esp,0x1c
c0019d33:	c3                   	ret    

c0019d34 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019d34:	83 ec 2c             	sub    esp,0x2c
c0019d37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d3f:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019d44:	83 ec 04             	sub    esp,0x4
c0019d47:	6a 06                	push   0x6
c0019d49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019d4d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019d51:	83 c0 0e             	add    eax,0xe
c0019d54:	50                   	push   eax
c0019d55:	e8 fb 68 fe ff       	call   c0000655 <memcpy>
c0019d5a:	83 c4 10             	add    esp,0x10
c0019d5d:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019d62:	83 ec 04             	sub    esp,0x4
c0019d65:	6a 06                	push   0x6
c0019d67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019d6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019d6f:	83 c0 08             	add    eax,0x8
c0019d72:	50                   	push   eax
c0019d73:	e8 dd 68 fe ff       	call   c0000655 <memcpy>
c0019d78:	83 c4 10             	add    esp,0x10
c0019d7b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019d80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d84:	8d 50 01             	lea    edx,[eax+0x1]
c0019d87:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019d8b:	8a 00                	mov    al,BYTE PTR [eax]
c0019d8d:	0f b6 c0             	movzx  eax,al
c0019d90:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019d95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d99:	8d 50 01             	lea    edx,[eax+0x1]
c0019d9c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019da0:	8a 00                	mov    al,BYTE PTR [eax]
c0019da2:	0f b6 c0             	movzx  eax,al
c0019da5:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019daa:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019daf:	c1 e0 08             	shl    eax,0x8
c0019db2:	89 c2                	mov    edx,eax
c0019db4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019db8:	09 d0                	or     eax,edx
c0019dba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019dbe:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019dc2:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019dc7:	75 3a                	jne    c0019e03 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019dc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019dcd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019dd0:	66 3d dc 05          	cmp    ax,0x5dc
c0019dd4:	77 10                	ja     c0019de6 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019dd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019dda:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019ddd:	0f b7 c0             	movzx  eax,ax
c0019de0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019de4:	eb 1d                	jmp    c0019e03 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019de6:	83 ec 0c             	sub    esp,0xc
c0019de9:	68 38 a3 02 c0       	push   0xc002a338
c0019dee:	e8 de 88 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0019df3:	83 c4 10             	add    esp,0x10
c0019df6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019dfa:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019dfe:	e9 c0 00 00 00       	jmp    c0019ec3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019e03:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019e07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e0d:	83 ec 04             	sub    esp,0x4
c0019e10:	52                   	push   edx
c0019e11:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e15:	50                   	push   eax
c0019e16:	e8 3a 68 fe ff       	call   c0000655 <memcpy>
c0019e1b:	83 c4 10             	add    esp,0x10
c0019e1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e22:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019e26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e2a:	8d 50 01             	lea    edx,[eax+0x1]
c0019e2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e31:	8a 00                	mov    al,BYTE PTR [eax]
c0019e33:	0f b6 c0             	movzx  eax,al
c0019e36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019e3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e3e:	8d 50 01             	lea    edx,[eax+0x1]
c0019e41:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e45:	8a 00                	mov    al,BYTE PTR [eax]
c0019e47:	0f b6 c0             	movzx  eax,al
c0019e4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019e4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e52:	8d 50 01             	lea    edx,[eax+0x1]
c0019e55:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e59:	8a 00                	mov    al,BYTE PTR [eax]
c0019e5b:	0f b6 c0             	movzx  eax,al
c0019e5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e66:	8d 50 01             	lea    edx,[eax+0x1]
c0019e69:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e6d:	8a 00                	mov    al,BYTE PTR [eax]
c0019e6f:	0f b6 c0             	movzx  eax,al
c0019e72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e7a:	c1 e0 18             	shl    eax,0x18
c0019e7d:	89 c2                	mov    edx,eax
c0019e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e83:	c1 e0 10             	shl    eax,0x10
c0019e86:	09 c2                	or     edx,eax
c0019e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e8c:	c1 e0 08             	shl    eax,0x8
c0019e8f:	09 d0                	or     eax,edx
c0019e91:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e9d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019ea1:	83 e8 04             	sub    eax,0x4
c0019ea4:	83 ec 08             	sub    esp,0x8
c0019ea7:	50                   	push   eax
c0019ea8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019eac:	e8 b6 fc ff ff       	call   c0019b67 <Net::crc32Calc(unsigned char*, int)>
c0019eb1:	83 c4 10             	add    esp,0x10
c0019eb4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019eb8:	0f 94 c2             	sete   dl
c0019ebb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ebf:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019ec2:	90                   	nop
c0019ec3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ec7:	83 c4 2c             	add    esp,0x2c
c0019eca:	c2 04 00             	ret    0x4

c0019ecd <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019ecd:	55                   	push   ebp
c0019ece:	57                   	push   edi
c0019ecf:	56                   	push   esi
c0019ed0:	53                   	push   ebx
c0019ed1:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019ed7:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019ede:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019ee0:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019ee3:	80 fb 40             	cmp    bl,0x40
c0019ee6:	75 1b                	jne    c0019f03 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019ee8:	8a 16                	mov    dl,BYTE PTR [esi]
c0019eea:	84 d2                	test   dl,dl
c0019eec:	0f 84 f1 00 00 00    	je     c0019fe3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ef2:	8d 46 01             	lea    eax,[esi+0x1]
c0019ef5:	80 fa 3a             	cmp    dl,0x3a
c0019ef8:	74 04                	je     c0019efe <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019efa:	89 c6                	mov    esi,eax
c0019efc:	eb ea                	jmp    c0019ee8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019efe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019f01:	89 c6                	mov    esi,eax
c0019f03:	50                   	push   eax
c0019f04:	6a 40                	push   0x40
c0019f06:	6a 00                	push   0x0
c0019f08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019f0c:	50                   	push   eax
c0019f0d:	e8 79 67 fe ff       	call   c000068b <memset>
c0019f12:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019f19:	31 c0                	xor    eax,eax
c0019f1b:	83 c4 10             	add    esp,0x10
c0019f1e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019f20:	84 c9                	test   cl,cl
c0019f22:	0f 84 bb 00 00 00    	je     c0019fe3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019f28:	3d c7 00 00 00       	cmp    eax,0xc7
c0019f2d:	0f 8f b0 00 00 00    	jg     c0019fe3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019f33:	80 f9 0a             	cmp    cl,0xa
c0019f36:	0f 85 98 00 00 00    	jne    c0019fd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019f3c:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019f41:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019f45:	a8 df                	test   al,0xdf
c0019f47:	0f 94 c1             	sete   cl
c0019f4a:	3c 23                	cmp    al,0x23
c0019f4c:	0f 94 c2             	sete   dl
c0019f4f:	08 d1                	or     cl,dl
c0019f51:	75 4a                	jne    c0019f9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f53:	8d 50 f7             	lea    edx,[eax-0x9]
c0019f56:	80 fa 01             	cmp    dl,0x1
c0019f59:	76 42                	jbe    c0019f9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f5b:	3c 5b                	cmp    al,0x5b
c0019f5d:	75 42                	jne    c0019fa1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0019f5f:	80 fb 40             	cmp    bl,0x40
c0019f62:	75 39                	jne    c0019f9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f64:	83 ec 0c             	sub    esp,0xc
c0019f67:	8d 54 24 65          	lea    edx,[esp+0x65]
c0019f6b:	52                   	push   edx
c0019f6c:	e8 37 67 fe ff       	call   c00006a8 <strlen>
c0019f71:	83 c4 10             	add    esp,0x10
c0019f74:	83 f8 3f             	cmp    eax,0x3f
c0019f77:	77 6a                	ja     c0019fe3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019f79:	50                   	push   eax
c0019f7a:	50                   	push   eax
c0019f7b:	8d 54 24 61          	lea    edx,[esp+0x61]
c0019f7f:	52                   	push   edx
c0019f80:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019f84:	52                   	push   edx
c0019f85:	e8 a0 67 fe ff       	call   c000072a <strcpy>
c0019f8a:	58                   	pop    eax
c0019f8b:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019f8f:	52                   	push   edx
c0019f90:	e8 13 67 fe ff       	call   c00006a8 <strlen>
c0019f95:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0019f9a:	83 c4 10             	add    esp,0x10
c0019f9d:	31 d2                	xor    edx,edx
c0019f9f:	eb 3a                	jmp    c0019fdb <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0019fa1:	80 fb 40             	cmp    bl,0x40
c0019fa4:	74 06                	je     c0019fac <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0019fa6:	8d 44 24 58          	lea    eax,[esp+0x58]
c0019faa:	eb 20                	jmp    c0019fcc <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0019fac:	50                   	push   eax
c0019fad:	50                   	push   eax
c0019fae:	55                   	push   ebp
c0019faf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fb3:	50                   	push   eax
c0019fb4:	e8 c2 67 fe ff       	call   c000077b <strcmp>
c0019fb9:	83 c4 10             	add    esp,0x10
c0019fbc:	85 c0                	test   eax,eax
c0019fbe:	75 dd                	jne    c0019f9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019fc0:	eb e4                	jmp    c0019fa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0019fc2:	8d 50 01             	lea    edx,[eax+0x1]
c0019fc5:	80 f9 3d             	cmp    cl,0x3d
c0019fc8:	74 1d                	je     c0019fe7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0019fca:	89 d0                	mov    eax,edx
c0019fcc:	8a 08                	mov    cl,BYTE PTR [eax]
c0019fce:	84 c9                	test   cl,cl
c0019fd0:	75 f0                	jne    c0019fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0019fd2:	eb 0f                	jmp    c0019fe3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fd4:	8d 50 01             	lea    edx,[eax+0x1]
c0019fd7:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0019fdb:	47                   	inc    edi
c0019fdc:	89 d0                	mov    eax,edx
c0019fde:	e9 3b ff ff ff       	jmp    c0019f1e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0019fe3:	31 c0                	xor    eax,eax
c0019fe5:	eb 33                	jmp    c001a01a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0019fe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019feb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019fee:	50                   	push   eax
c0019fef:	50                   	push   eax
c0019ff0:	8d 44 24 60          	lea    eax,[esp+0x60]
c0019ff4:	50                   	push   eax
c0019ff5:	56                   	push   esi
c0019ff6:	e8 80 67 fe ff       	call   c000077b <strcmp>
c0019ffb:	83 c4 10             	add    esp,0x10
c0019ffe:	85 c0                	test   eax,eax
c001a000:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a004:	75 97                	jne    c0019f9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a006:	51                   	push   ecx
c001a007:	51                   	push   ecx
c001a008:	52                   	push   edx
c001a009:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a010:	e8 15 67 fe ff       	call   c000072a <strcpy>
c001a015:	83 c4 10             	add    esp,0x10
c001a018:	b0 01                	mov    al,0x1
c001a01a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a020:	5b                   	pop    ebx
c001a021:	5e                   	pop    esi
c001a022:	5f                   	pop    edi
c001a023:	5d                   	pop    ebp
c001a024:	c3                   	ret    

c001a025 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a025:	57                   	push   edi
c001a026:	56                   	push   esi
c001a027:	53                   	push   ebx
c001a028:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a02e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a035:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a03c:	53                   	push   ebx
c001a03d:	e8 66 66 fe ff       	call   c00006a8 <strlen>
c001a042:	89 34 24             	mov    DWORD PTR [esp],esi
c001a045:	89 c7                	mov    edi,eax
c001a047:	e8 5c 66 fe ff       	call   c00006a8 <strlen>
c001a04c:	83 c4 10             	add    esp,0x10
c001a04f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a053:	3d ff 00 00 00       	cmp    eax,0xff
c001a058:	0f 87 d3 00 00 00    	ja     c001a131 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a05e:	57                   	push   edi
c001a05f:	57                   	push   edi
c001a060:	56                   	push   esi
c001a061:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a065:	56                   	push   esi
c001a066:	e8 bf 66 fe ff       	call   c000072a <strcpy>
c001a06b:	58                   	pop    eax
c001a06c:	5a                   	pop    edx
c001a06d:	68 e6 a6 02 c0       	push   0xc002a6e6
c001a072:	56                   	push   esi
c001a073:	e8 69 67 fe ff       	call   c00007e1 <strcat>
c001a078:	59                   	pop    ecx
c001a079:	5f                   	pop    edi
c001a07a:	53                   	push   ebx
c001a07b:	56                   	push   esi
c001a07c:	e8 60 67 fe ff       	call   c00007e1 <strcat>
c001a081:	58                   	pop    eax
c001a082:	5a                   	pop    edx
c001a083:	68 84 a3 02 c0       	push   0xc002a384
c001a088:	56                   	push   esi
c001a089:	e8 53 67 fe ff       	call   c00007e1 <strcat>
c001a08e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a095:	e8 3a 54 ff ff       	call   c000f4d4 <malloc>
c001a09a:	83 c4 0c             	add    esp,0xc
c001a09d:	89 c3                	mov    ebx,eax
c001a09f:	ff 35 d4 dd 02 c0    	push   DWORD PTR ds:0xc002ddd4
c001a0a5:	56                   	push   esi
c001a0a6:	50                   	push   eax
c001a0a7:	e8 54 8b ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001a0ac:	83 c4 10             	add    esp,0x10
c001a0af:	85 db                	test   ebx,ebx
c001a0b1:	74 7e                	je     c001a131 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a0b3:	51                   	push   ecx
c001a0b4:	51                   	push   ecx
c001a0b5:	6a 01                	push   0x1
c001a0b7:	53                   	push   ebx
c001a0b8:	e8 a7 8b ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001a0bd:	83 c4 10             	add    esp,0x10
c001a0c0:	85 c0                	test   eax,eax
c001a0c2:	74 08                	je     c001a0cc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a0c4:	83 ec 0c             	sub    esp,0xc
c001a0c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0c9:	53                   	push   ebx
c001a0ca:	eb 5f                	jmp    c001a12b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a0cc:	52                   	push   edx
c001a0cd:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a0d1:	50                   	push   eax
c001a0d2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a0d6:	50                   	push   eax
c001a0d7:	53                   	push   ebx
c001a0d8:	e8 33 8e ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c001a0dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a0e1:	83 c4 10             	add    esp,0x10
c001a0e4:	89 c1                	mov    ecx,eax
c001a0e6:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a0ea:	74 31                	je     c001a11d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a0ec:	83 ec 0c             	sub    esp,0xc
c001a0ef:	50                   	push   eax
c001a0f0:	e8 df 53 ff ff       	call   c000f4d4 <malloc>
c001a0f5:	89 c6                	mov    esi,eax
c001a0f7:	58                   	pop    eax
c001a0f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a0fe:	52                   	push   edx
c001a0ff:	56                   	push   esi
c001a100:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a104:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a108:	53                   	push   ebx
c001a109:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a10c:	83 c4 20             	add    esp,0x20
c001a10f:	85 c0                	test   eax,eax
c001a111:	75 0a                	jne    c001a11d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a113:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a117:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a11b:	74 18                	je     c001a135 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a11d:	83 ec 0c             	sub    esp,0xc
c001a120:	53                   	push   ebx
c001a121:	e8 9c 8b ff ff       	call   c0012cc2 <File::close()>
c001a126:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a128:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a12b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a12e:	83 c4 10             	add    esp,0x10
c001a131:	31 c0                	xor    eax,eax
c001a133:	eb 3b                	jmp    c001a170 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a135:	83 ec 0c             	sub    esp,0xc
c001a138:	53                   	push   ebx
c001a139:	e8 84 8b ff ff       	call   c0012cc2 <File::close()>
c001a13e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a140:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a143:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a146:	83 c4 0c             	add    esp,0xc
c001a149:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a150:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a157:	56                   	push   esi
c001a158:	e8 70 fd ff ff       	call   c0019ecd <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a15d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a160:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a164:	e8 7b 53 ff ff       	call   c000f4e4 <free>
c001a169:	83 c4 10             	add    esp,0x10
c001a16c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a170:	81 c4 20 01 00 00    	add    esp,0x120
c001a176:	5b                   	pop    ebx
c001a177:	5e                   	pop    esi
c001a178:	5f                   	pop    edi
c001a179:	c3                   	ret    

c001a17a <Reg::getLine(char*, char*, char*)>:
c001a17a:	57                   	push   edi
c001a17b:	56                   	push   esi
c001a17c:	53                   	push   ebx
c001a17d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a181:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a185:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a189:	57                   	push   edi
c001a18a:	56                   	push   esi
c001a18b:	53                   	push   ebx
c001a18c:	68 89 a3 02 c0       	push   0xc002a389
c001a191:	e8 8f fe ff ff       	call   c001a025 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a196:	83 c4 10             	add    esp,0x10
c001a199:	84 c0                	test   al,al
c001a19b:	75 10                	jne    c001a1ad <Reg::getLine(char*, char*, char*)+0x33>
c001a19d:	57                   	push   edi
c001a19e:	56                   	push   esi
c001a19f:	53                   	push   ebx
c001a1a0:	68 ae a3 02 c0       	push   0xc002a3ae
c001a1a5:	e8 7b fe ff ff       	call   c001a025 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a1aa:	83 c4 10             	add    esp,0x10
c001a1ad:	5b                   	pop    ebx
c001a1ae:	5e                   	pop    esi
c001a1af:	5f                   	pop    edi
c001a1b0:	c3                   	ret    

c001a1b1 <Reg::readInt(char*, char*, int*)>:
c001a1b1:	55                   	push   ebp
c001a1b2:	57                   	push   edi
c001a1b3:	56                   	push   esi
c001a1b4:	53                   	push   ebx
c001a1b5:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a1bb:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a1bf:	57                   	push   edi
c001a1c0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a1c7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a1ce:	e8 a7 ff ff ff       	call   c001a17a <Reg::getLine(char*, char*, char*)>
c001a1d3:	83 c4 10             	add    esp,0x10
c001a1d6:	84 c0                	test   al,al
c001a1d8:	0f 84 b3 00 00 00    	je     c001a291 <Reg::readInt(char*, char*, int*)+0xe0>
c001a1de:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a1e2:	80 fa 2b             	cmp    dl,0x2b
c001a1e5:	74 0c                	je     c001a1f3 <Reg::readInt(char*, char*, int*)+0x42>
c001a1e7:	80 fa 2d             	cmp    dl,0x2d
c001a1ea:	75 0e                	jne    c001a1fa <Reg::readInt(char*, char*, int*)+0x49>
c001a1ec:	ba 01 00 00 00       	mov    edx,0x1
c001a1f1:	eb 0b                	jmp    c001a1fe <Reg::readInt(char*, char*, int*)+0x4d>
c001a1f3:	ba 01 00 00 00       	mov    edx,0x1
c001a1f8:	eb 02                	jmp    c001a1fc <Reg::readInt(char*, char*, int*)+0x4b>
c001a1fa:	31 d2                	xor    edx,edx
c001a1fc:	31 c0                	xor    eax,eax
c001a1fe:	be 0a 00 00 00       	mov    esi,0xa
c001a203:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a208:	75 20                	jne    c001a22a <Reg::readInt(char*, char*, int*)+0x79>
c001a20a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a20e:	80 f9 78             	cmp    cl,0x78
c001a211:	75 0a                	jne    c001a21d <Reg::readInt(char*, char*, int*)+0x6c>
c001a213:	83 c2 02             	add    edx,0x2
c001a216:	be 10 00 00 00       	mov    esi,0x10
c001a21b:	eb 0d                	jmp    c001a22a <Reg::readInt(char*, char*, int*)+0x79>
c001a21d:	80 f9 62             	cmp    cl,0x62
c001a220:	75 08                	jne    c001a22a <Reg::readInt(char*, char*, int*)+0x79>
c001a222:	83 c2 02             	add    edx,0x2
c001a225:	be 02 00 00 00       	mov    esi,0x2
c001a22a:	01 d7                	add    edi,edx
c001a22c:	31 d2                	xor    edx,edx
c001a22e:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a230:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a234:	80 fb 0d             	cmp    bl,0xd
c001a237:	0f 94 c3             	sete   bl
c001a23a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a23f:	0f 94 c1             	sete   cl
c001a242:	08 cb                	or     bl,cl
c001a244:	75 3a                	jne    c001a280 <Reg::readInt(char*, char*, int*)+0xcf>
c001a246:	0f af d6             	imul   edx,esi
c001a249:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a24e:	83 fe 10             	cmp    esi,0x10
c001a251:	75 26                	jne    c001a279 <Reg::readInt(char*, char*, int*)+0xc8>
c001a253:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a257:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a25a:	89 e9                	mov    ecx,ebp
c001a25c:	80 f9 05             	cmp    cl,0x5
c001a25f:	77 06                	ja     c001a267 <Reg::readInt(char*, char*, int*)+0xb6>
c001a261:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a265:	eb 16                	jmp    c001a27d <Reg::readInt(char*, char*, int*)+0xcc>
c001a267:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a26b:	83 e9 61             	sub    ecx,0x61
c001a26e:	80 f9 05             	cmp    cl,0x5
c001a271:	77 06                	ja     c001a279 <Reg::readInt(char*, char*, int*)+0xc8>
c001a273:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a277:	eb 04                	jmp    c001a27d <Reg::readInt(char*, char*, int*)+0xcc>
c001a279:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a27d:	47                   	inc    edi
c001a27e:	eb ae                	jmp    c001a22e <Reg::readInt(char*, char*, int*)+0x7d>
c001a280:	84 c0                	test   al,al
c001a282:	74 02                	je     c001a286 <Reg::readInt(char*, char*, int*)+0xd5>
c001a284:	f7 da                	neg    edx
c001a286:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a28d:	89 10                	mov    DWORD PTR [eax],edx
c001a28f:	88 d8                	mov    al,bl
c001a291:	81 c4 ec 00 00 00    	add    esp,0xec
c001a297:	5b                   	pop    ebx
c001a298:	5e                   	pop    esi
c001a299:	5f                   	pop    edi
c001a29a:	5d                   	pop    ebp
c001a29b:	c3                   	ret    

c001a29c <Reg::readString(char*, char*, char*, int)>:
c001a29c:	57                   	push   edi
c001a29d:	56                   	push   esi
c001a29e:	53                   	push   ebx
c001a29f:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a2a5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a2ac:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a2b0:	57                   	push   edi
c001a2b1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a2b8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a2bf:	e8 b6 fe ff ff       	call   c001a17a <Reg::getLine(char*, char*, char*)>
c001a2c4:	83 c4 10             	add    esp,0x10
c001a2c7:	89 c6                	mov    esi,eax
c001a2c9:	84 c0                	test   al,al
c001a2cb:	74 44                	je     c001a311 <Reg::readString(char*, char*, char*, int)+0x75>
c001a2cd:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a2d4:	31 c0                	xor    eax,eax
c001a2d6:	4a                   	dec    edx
c001a2d7:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a2da:	84 c9                	test   cl,cl
c001a2dc:	74 0f                	je     c001a2ed <Reg::readString(char*, char*, char*, int)+0x51>
c001a2de:	39 c2                	cmp    edx,eax
c001a2e0:	7e 0b                	jle    c001a2ed <Reg::readString(char*, char*, char*, int)+0x51>
c001a2e2:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a2e5:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a2ea:	40                   	inc    eax
c001a2eb:	eb ea                	jmp    c001a2d7 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a2ed:	83 ec 0c             	sub    esp,0xc
c001a2f0:	53                   	push   ebx
c001a2f1:	e8 b2 63 fe ff       	call   c00006a8 <strlen>
c001a2f6:	83 c4 10             	add    esp,0x10
c001a2f9:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a2fe:	75 11                	jne    c001a311 <Reg::readString(char*, char*, char*, int)+0x75>
c001a300:	83 ec 0c             	sub    esp,0xc
c001a303:	53                   	push   ebx
c001a304:	e8 9f 63 fe ff       	call   c00006a8 <strlen>
c001a309:	83 c4 10             	add    esp,0x10
c001a30c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a311:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a317:	89 f0                	mov    eax,esi
c001a319:	5b                   	pop    ebx
c001a31a:	5e                   	pop    esi
c001a31b:	5f                   	pop    edi
c001a31c:	c3                   	ret    

c001a31d <Reg::readBool(char*, char*, bool*)>:
c001a31d:	83 ec 20             	sub    esp,0x20
c001a320:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a324:	50                   	push   eax
c001a325:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a32d:	e8 7f fe ff ff       	call   c001a1b1 <Reg::readInt(char*, char*, int*)>
c001a332:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a337:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a33b:	0f 95 02             	setne  BYTE PTR [edx]
c001a33e:	83 c4 2c             	add    esp,0x2c
c001a341:	c3                   	ret    

c001a342 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a342:	53                   	push   ebx
c001a343:	83 ec 1c             	sub    esp,0x1c
c001a346:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a34a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a34e:	50                   	push   eax
c001a34f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a353:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a357:	e8 c1 ff ff ff       	call   c001a31d <Reg::readBool(char*, char*, bool*)>
c001a35c:	83 c4 10             	add    esp,0x10
c001a35f:	84 c0                	test   al,al
c001a361:	74 04                	je     c001a367 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a363:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a367:	88 d8                	mov    al,bl
c001a369:	83 c4 18             	add    esp,0x18
c001a36c:	5b                   	pop    ebx
c001a36d:	c3                   	ret    

c001a36e <Reg::readIntWithDefault(char*, char*, int)>:
c001a36e:	53                   	push   ebx
c001a36f:	83 ec 1c             	sub    esp,0x1c
c001a372:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a376:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a37a:	50                   	push   eax
c001a37b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a37f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a383:	e8 29 fe ff ff       	call   c001a1b1 <Reg::readInt(char*, char*, int*)>
c001a388:	83 c4 10             	add    esp,0x10
c001a38b:	84 c0                	test   al,al
c001a38d:	74 04                	je     c001a393 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a38f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a393:	89 d8                	mov    eax,ebx
c001a395:	83 c4 18             	add    esp,0x18
c001a398:	5b                   	pop    ebx
c001a399:	c3                   	ret    

c001a39a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a39a:	57                   	push   edi
c001a39b:	56                   	push   esi
c001a39c:	53                   	push   ebx
c001a39d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3a1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a3a5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a3a9:	56                   	push   esi
c001a3aa:	53                   	push   ebx
c001a3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3b3:	e8 e4 fe ff ff       	call   c001a29c <Reg::readString(char*, char*, char*, int)>
c001a3b8:	83 c4 10             	add    esp,0x10
c001a3bb:	84 c0                	test   al,al
c001a3bd:	75 1b                	jne    c001a3da <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a3bf:	50                   	push   eax
c001a3c0:	56                   	push   esi
c001a3c1:	4e                   	dec    esi
c001a3c2:	6a 00                	push   0x0
c001a3c4:	53                   	push   ebx
c001a3c5:	e8 c1 62 fe ff       	call   c000068b <memset>
c001a3ca:	83 c4 0c             	add    esp,0xc
c001a3cd:	56                   	push   esi
c001a3ce:	57                   	push   edi
c001a3cf:	53                   	push   ebx
c001a3d0:	89 fb                	mov    ebx,edi
c001a3d2:	e8 7e 62 fe ff       	call   c0000655 <memcpy>
c001a3d7:	83 c4 10             	add    esp,0x10
c001a3da:	89 d8                	mov    eax,ebx
c001a3dc:	5b                   	pop    ebx
c001a3dd:	5e                   	pop    esi
c001a3de:	5f                   	pop    edi
c001a3df:	c3                   	ret    

c001a3e0 <Sys::exit(regs*)>:
c001a3e0:	83 ec 18             	sub    esp,0x18
c001a3e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3e7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a3ea:	e8 ce 32 00 00       	call   c001d6bd <terminateTask(int)>
c001a3ef:	83 c8 ff             	or     eax,0xffffffff
c001a3f2:	83 c4 1c             	add    esp,0x1c
c001a3f5:	89 c2                	mov    edx,eax
c001a3f7:	c3                   	ret    

c001a3f8 <Sys::getCwd(regs*)>:
c001a3f8:	83 ec 10             	sub    esp,0x10
c001a3fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3ff:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a402:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a405:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a40a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a40d:	e8 5f 8b ff ff       	call   c0012f71 <getcwd(Process*, char*, int)>
c001a412:	83 c4 1c             	add    esp,0x1c
c001a415:	99                   	cdq    
c001a416:	c3                   	ret    

c001a417 <Sys::getPID(regs*)>:
c001a417:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a41c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a41f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a421:	99                   	cdq    
c001a422:	c3                   	ret    

c001a423 <Sys::loadDLL(regs*)>:
c001a423:	56                   	push   esi
c001a424:	53                   	push   ebx
c001a425:	31 d2                	xor    edx,edx
c001a427:	51                   	push   ecx
c001a428:	b8 01 00 00 00       	mov    eax,0x1
c001a42d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a431:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a435:	0f 84 8c 00 00 00    	je     c001a4c7 <Sys::loadDLL(regs*)+0xa4>
c001a43b:	83 ec 0c             	sub    esp,0xc
c001a43e:	68 14 01 00 00       	push   0x114
c001a443:	e8 8c 50 ff ff       	call   c000f4d4 <malloc>
c001a448:	83 c4 0c             	add    esp,0xc
c001a44b:	89 c3                	mov    ebx,eax
c001a44d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a452:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a455:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a458:	53                   	push   ebx
c001a459:	e8 a2 87 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001a45e:	83 c4 10             	add    esp,0x10
c001a461:	31 d2                	xor    edx,edx
c001a463:	b8 02 00 00 00       	mov    eax,0x2
c001a468:	85 db                	test   ebx,ebx
c001a46a:	74 5b                	je     c001a4c7 <Sys::loadDLL(regs*)+0xa4>
c001a46c:	83 ec 0c             	sub    esp,0xc
c001a46f:	53                   	push   ebx
c001a470:	e8 5d 8a ff ff       	call   c0012ed2 <File::exists()>
c001a475:	83 c4 10             	add    esp,0x10
c001a478:	84 c0                	test   al,al
c001a47a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a47c:	75 11                	jne    c001a48f <Sys::loadDLL(regs*)+0x6c>
c001a47e:	83 ec 0c             	sub    esp,0xc
c001a481:	53                   	push   ebx
c001a482:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a485:	83 c4 10             	add    esp,0x10
c001a488:	b8 03 00 00 00       	mov    eax,0x3
c001a48d:	eb 36                	jmp    c001a4c5 <Sys::loadDLL(regs*)+0xa2>
c001a48f:	83 ec 0c             	sub    esp,0xc
c001a492:	53                   	push   ebx
c001a493:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a496:	58                   	pop    eax
c001a497:	5a                   	pop    edx
c001a498:	6a 00                	push   0x0
c001a49a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a49d:	e8 64 21 00 00       	call   c001c606 <Thr::loadDLL(char const*, bool)>
c001a4a2:	83 c4 10             	add    esp,0x10
c001a4a5:	89 c1                	mov    ecx,eax
c001a4a7:	31 d2                	xor    edx,edx
c001a4a9:	b8 04 00 00 00       	mov    eax,0x4
c001a4ae:	85 c9                	test   ecx,ecx
c001a4b0:	74 15                	je     c001a4c7 <Sys::loadDLL(regs*)+0xa4>
c001a4b2:	53                   	push   ebx
c001a4b3:	53                   	push   ebx
c001a4b4:	ff 35 a8 c8 02 c0    	push   DWORD PTR ds:0xc002c8a8
c001a4ba:	51                   	push   ecx
c001a4bb:	e8 55 23 00 00       	call   c001c815 <Thr::executeDLL(unsigned long, void*)>
c001a4c0:	83 c4 10             	add    esp,0x10
c001a4c3:	31 c0                	xor    eax,eax
c001a4c5:	31 d2                	xor    edx,edx
c001a4c7:	59                   	pop    ecx
c001a4c8:	5b                   	pop    ebx
c001a4c9:	5e                   	pop    esi
c001a4ca:	c3                   	ret    

c001a4cb <Sys::read(regs*)>:
c001a4cb:	57                   	push   edi
c001a4cc:	56                   	push   esi
c001a4cd:	53                   	push   ebx
c001a4ce:	83 ec 10             	sub    esp,0x10
c001a4d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a4d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a4d8:	83 f8 02             	cmp    eax,0x2
c001a4db:	77 10                	ja     c001a4ed <Sys::read(regs*)+0x22>
c001a4dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4e5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a4eb:	eb 0e                	jmp    c001a4fb <Sys::read(regs*)+0x30>
c001a4ed:	83 ec 0c             	sub    esp,0xc
c001a4f0:	50                   	push   eax
c001a4f1:	e8 95 70 ff ff       	call   c001158b <getFromFileDescriptor(int)>
c001a4f6:	83 c4 10             	add    esp,0x10
c001a4f9:	89 c1                	mov    ecx,eax
c001a4fb:	83 c8 ff             	or     eax,0xffffffff
c001a4fe:	85 c9                	test   ecx,ecx
c001a500:	89 c2                	mov    edx,eax
c001a502:	74 28                	je     c001a52c <Sys::read(regs*)+0x61>
c001a504:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a50c:	31 ff                	xor    edi,edi
c001a50e:	83 ec 0c             	sub    esp,0xc
c001a511:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a513:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a517:	52                   	push   edx
c001a518:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a51b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a51e:	57                   	push   edi
c001a51f:	56                   	push   esi
c001a520:	51                   	push   ecx
c001a521:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a524:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a528:	83 c4 20             	add    esp,0x20
c001a52b:	99                   	cdq    
c001a52c:	83 c4 10             	add    esp,0x10
c001a52f:	5b                   	pop    ebx
c001a530:	5e                   	pop    esi
c001a531:	5f                   	pop    edi
c001a532:	c3                   	ret    

c001a533 <Sys::sbrk(regs*)>:
c001a533:	56                   	push   esi
c001a534:	53                   	push   ebx
c001a535:	50                   	push   eax
c001a536:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a53b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a53f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a542:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a545:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a54b:	85 db                	test   ebx,ebx
c001a54d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a550:	74 02                	je     c001a554 <Sys::sbrk(regs*)+0x21>
c001a552:	79 06                	jns    c001a55a <Sys::sbrk(regs*)+0x27>
c001a554:	89 f0                	mov    eax,esi
c001a556:	31 d2                	xor    edx,edx
c001a558:	eb 2a                	jmp    c001a584 <Sys::sbrk(regs*)+0x51>
c001a55a:	83 c8 ff             	or     eax,0xffffffff
c001a55d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a563:	89 c2                	mov    edx,eax
c001a565:	77 1d                	ja     c001a584 <Sys::sbrk(regs*)+0x51>
c001a567:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a56d:	50                   	push   eax
c001a56e:	c1 ea 0c             	shr    edx,0xc
c001a571:	68 07 04 00 00       	push   0x407
c001a576:	52                   	push   edx
c001a577:	51                   	push   ecx
c001a578:	e8 2f 79 ff ff       	call   c0011eac <VAS::allocatePages(int, int)>
c001a57d:	89 f0                	mov    eax,esi
c001a57f:	31 d2                	xor    edx,edx
c001a581:	83 c4 10             	add    esp,0x10
c001a584:	59                   	pop    ecx
c001a585:	5b                   	pop    ebx
c001a586:	5e                   	pop    esi
c001a587:	c3                   	ret    

c001a588 <Sys::setCwd(regs*)>:
c001a588:	83 ec 14             	sub    esp,0x14
c001a58b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a58f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a592:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a597:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a59a:	e8 fc 89 ff ff       	call   c0012f9b <setcwd(Process*, char*)>
c001a59f:	83 c4 1c             	add    esp,0x1c
c001a5a2:	99                   	cdq    
c001a5a3:	c3                   	ret    

c001a5a4 <Sys::write(regs*)>:
c001a5a4:	57                   	push   edi
c001a5a5:	56                   	push   esi
c001a5a6:	53                   	push   ebx
c001a5a7:	83 ec 10             	sub    esp,0x10
c001a5aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a5b1:	83 f8 02             	cmp    eax,0x2
c001a5b4:	77 10                	ja     c001a5c6 <Sys::write(regs*)+0x22>
c001a5b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5be:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a5c4:	eb 0e                	jmp    c001a5d4 <Sys::write(regs*)+0x30>
c001a5c6:	83 ec 0c             	sub    esp,0xc
c001a5c9:	50                   	push   eax
c001a5ca:	e8 bc 6f ff ff       	call   c001158b <getFromFileDescriptor(int)>
c001a5cf:	83 c4 10             	add    esp,0x10
c001a5d2:	89 c1                	mov    ecx,eax
c001a5d4:	83 c8 ff             	or     eax,0xffffffff
c001a5d7:	85 c9                	test   ecx,ecx
c001a5d9:	89 c2                	mov    edx,eax
c001a5db:	74 28                	je     c001a605 <Sys::write(regs*)+0x61>
c001a5dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5e5:	31 ff                	xor    edi,edi
c001a5e7:	83 ec 0c             	sub    esp,0xc
c001a5ea:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5ec:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5f0:	52                   	push   edx
c001a5f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5f4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a5f7:	57                   	push   edi
c001a5f8:	56                   	push   esi
c001a5f9:	51                   	push   ecx
c001a5fa:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a5fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a601:	83 c4 20             	add    esp,0x20
c001a604:	99                   	cdq    
c001a605:	83 c4 10             	add    esp,0x10
c001a608:	5b                   	pop    ebx
c001a609:	5e                   	pop    esi
c001a60a:	5f                   	pop    edi
c001a60b:	c3                   	ret    

c001a60c <Sys::yield(regs*)>:
c001a60c:	57                   	push   edi
c001a60d:	56                   	push   esi
c001a60e:	53                   	push   ebx
c001a60f:	e8 66 26 00 00       	call   c001cc7a <lockScheduler()>
c001a614:	e8 9d 29 00 00       	call   c001cfb6 <schedule()>
c001a619:	e8 5e 26 00 00       	call   c001cc7c <unlockScheduler()>
c001a61e:	8b 35 10 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cf10
c001a624:	8b 3d 14 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf14
c001a62a:	89 f0                	mov    eax,esi
c001a62c:	89 fb                	mov    ebx,edi
c001a62e:	89 f1                	mov    ecx,esi
c001a630:	c1 e0 07             	shl    eax,0x7
c001a633:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a637:	25 80 30 0f 00       	and    eax,0xf3080
c001a63c:	c1 eb 17             	shr    ebx,0x17
c001a63f:	31 c8                	xor    eax,ecx
c001a641:	89 da                	mov    edx,ebx
c001a643:	5b                   	pop    ebx
c001a644:	5e                   	pop    esi
c001a645:	5f                   	pop    edi
c001a646:	c3                   	ret    

c001a647 <sysCallSeekDir(regs*)>:
c001a647:	31 c0                	xor    eax,eax
c001a649:	31 d2                	xor    edx,edx
c001a64b:	c3                   	ret    

c001a64c <sysCallTellDir(regs*)>:
c001a64c:	31 c0                	xor    eax,eax
c001a64e:	31 d2                	xor    edx,edx
c001a650:	c3                   	ret    

c001a651 <sysCallVerify(regs*)>:
c001a651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a655:	31 d2                	xor    edx,edx
c001a657:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a65a:	c3                   	ret    

c001a65b <sysCallGetArgc(regs*)>:
c001a65b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a660:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a663:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a669:	99                   	cdq    
c001a66a:	c3                   	ret    

c001a66b <sysFormatDisk(regs*)>:
c001a66b:	56                   	push   esi
c001a66c:	53                   	push   ebx
c001a66d:	53                   	push   ebx
c001a66e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a672:	8b 1d 08 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca08
c001a678:	eb 25                	jmp    c001a69f <sysFormatDisk(regs*)+0x34>
c001a67a:	83 ec 0c             	sub    esp,0xc
c001a67d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a680:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a682:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a685:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a688:	50                   	push   eax
c001a689:	ff 34 85 a0 ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd3160]
c001a690:	53                   	push   ebx
c001a691:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a694:	83 c4 20             	add    esp,0x20
c001a697:	83 f8 08             	cmp    eax,0x8
c001a69a:	75 12                	jne    c001a6ae <sysFormatDisk(regs*)+0x43>
c001a69c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a69f:	85 db                	test   ebx,ebx
c001a6a1:	75 d7                	jne    c001a67a <sysFormatDisk(regs*)+0xf>
c001a6a3:	59                   	pop    ecx
c001a6a4:	b8 03 00 00 00       	mov    eax,0x3
c001a6a9:	31 d2                	xor    edx,edx
c001a6ab:	5b                   	pop    ebx
c001a6ac:	5e                   	pop    esi
c001a6ad:	c3                   	ret    
c001a6ae:	85 c0                	test   eax,eax
c001a6b0:	74 1b                	je     c001a6cd <sysFormatDisk(regs*)+0x62>
c001a6b2:	83 f8 09             	cmp    eax,0x9
c001a6b5:	74 0b                	je     c001a6c2 <sysFormatDisk(regs*)+0x57>
c001a6b7:	59                   	pop    ecx
c001a6b8:	b8 02 00 00 00       	mov    eax,0x2
c001a6bd:	31 d2                	xor    edx,edx
c001a6bf:	5b                   	pop    ebx
c001a6c0:	5e                   	pop    esi
c001a6c1:	c3                   	ret    
c001a6c2:	59                   	pop    ecx
c001a6c3:	b8 01 00 00 00       	mov    eax,0x1
c001a6c8:	31 d2                	xor    edx,edx
c001a6ca:	5b                   	pop    ebx
c001a6cb:	5e                   	pop    esi
c001a6cc:	c3                   	ret    
c001a6cd:	59                   	pop    ecx
c001a6ce:	31 c0                	xor    eax,eax
c001a6d0:	31 d2                	xor    edx,edx
c001a6d2:	5b                   	pop    ebx
c001a6d3:	5e                   	pop    esi
c001a6d4:	c3                   	ret    

c001a6d5 <sysSetDiskVolumeLabel(regs*)>:
c001a6d5:	56                   	push   esi
c001a6d6:	53                   	push   ebx
c001a6d7:	53                   	push   ebx
c001a6d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6dc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a6df:	83 f8 19             	cmp    eax,0x19
c001a6e2:	77 29                	ja     c001a70d <sysSetDiskVolumeLabel(regs*)+0x38>
c001a6e4:	8b 0c 85 a0 ce 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3160]
c001a6eb:	85 c9                	test   ecx,ecx
c001a6ed:	74 1e                	je     c001a70d <sysSetDiskVolumeLabel(regs*)+0x38>
c001a6ef:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a6f2:	85 d2                	test   edx,edx
c001a6f4:	74 17                	je     c001a70d <sysSetDiskVolumeLabel(regs*)+0x38>
c001a6f6:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a6fc:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a6fe:	52                   	push   edx
c001a6ff:	50                   	push   eax
c001a700:	51                   	push   ecx
c001a701:	53                   	push   ebx
c001a702:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a705:	83 c4 10             	add    esp,0x10
c001a708:	99                   	cdq    
c001a709:	59                   	pop    ecx
c001a70a:	5b                   	pop    ebx
c001a70b:	5e                   	pop    esi
c001a70c:	c3                   	ret    
c001a70d:	59                   	pop    ecx
c001a70e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a713:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a718:	5b                   	pop    ebx
c001a719:	5e                   	pop    esi
c001a71a:	c3                   	ret    

c001a71b <sysGetDiskVolumeLabel(regs*)>:
c001a71b:	57                   	push   edi
c001a71c:	56                   	push   esi
c001a71d:	53                   	push   ebx
c001a71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a722:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a725:	83 fa 19             	cmp    edx,0x19
c001a728:	77 34                	ja     c001a75e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a72a:	8b 0c 95 a0 ce 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3160]
c001a731:	85 c9                	test   ecx,ecx
c001a733:	74 29                	je     c001a75e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a735:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a738:	85 db                	test   ebx,ebx
c001a73a:	74 22                	je     c001a75e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a73c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a73f:	85 c0                	test   eax,eax
c001a741:	74 1b                	je     c001a75e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a743:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a749:	83 ec 0c             	sub    esp,0xc
c001a74c:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a74e:	50                   	push   eax
c001a74f:	53                   	push   ebx
c001a750:	52                   	push   edx
c001a751:	51                   	push   ecx
c001a752:	56                   	push   esi
c001a753:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a756:	83 c4 20             	add    esp,0x20
c001a759:	99                   	cdq    
c001a75a:	5b                   	pop    ebx
c001a75b:	5e                   	pop    esi
c001a75c:	5f                   	pop    edi
c001a75d:	c3                   	ret    
c001a75e:	5b                   	pop    ebx
c001a75f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a764:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a769:	5e                   	pop    esi
c001a76a:	5f                   	pop    edi
c001a76b:	c3                   	ret    

c001a76c <sysShutdown(regs*)>:
c001a76c:	83 ec 0c             	sub    esp,0xc
c001a76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a773:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a776:	85 c0                	test   eax,eax
c001a778:	74 18                	je     c001a792 <sysShutdown(regs*)+0x26>
c001a77a:	83 f8 01             	cmp    eax,0x1
c001a77d:	74 38                	je     c001a7b7 <sysShutdown(regs*)+0x4b>
c001a77f:	83 f8 02             	cmp    eax,0x2
c001a782:	74 24                	je     c001a7a8 <sysShutdown(regs*)+0x3c>
c001a784:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a789:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a78e:	83 c4 0c             	add    esp,0xc
c001a791:	c3                   	ret    
c001a792:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001a797:	8b 10                	mov    edx,DWORD PTR [eax]
c001a799:	6a 00                	push   0x0
c001a79b:	6a 00                	push   0x0
c001a79d:	6a 00                	push   0x0
c001a79f:	50                   	push   eax
c001a7a0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a7a3:	83 c4 10             	add    esp,0x10
c001a7a6:	eb dc                	jmp    c001a784 <sysShutdown(regs*)+0x18>
c001a7a8:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001a7ad:	8b 10                	mov    edx,DWORD PTR [eax]
c001a7af:	6a 00                	push   0x0
c001a7b1:	6a 00                	push   0x0
c001a7b3:	6a 01                	push   0x1
c001a7b5:	eb e8                	jmp    c001a79f <sysShutdown(regs*)+0x33>
c001a7b7:	a1 20 cf 02 c0       	mov    eax,ds:0xc002cf20
c001a7bc:	85 c0                	test   eax,eax
c001a7be:	74 02                	je     c001a7c2 <sysShutdown(regs*)+0x56>
c001a7c0:	ff d0                	call   eax
c001a7c2:	31 c0                	xor    eax,eax
c001a7c4:	31 d2                	xor    edx,edx
c001a7c6:	83 c4 0c             	add    esp,0xc
c001a7c9:	c3                   	ret    

c001a7ca <sysCallRealpath(regs*)>:
c001a7ca:	83 ec 0c             	sub    esp,0xc
c001a7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7d1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a7d4:	85 d2                	test   edx,edx
c001a7d6:	74 07                	je     c001a7df <sysCallRealpath(regs*)+0x15>
c001a7d8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a7db:	85 c0                	test   eax,eax
c001a7dd:	75 0b                	jne    c001a7ea <sysCallRealpath(regs*)+0x20>
c001a7df:	b8 01 00 00 00       	mov    eax,0x1
c001a7e4:	31 d2                	xor    edx,edx
c001a7e6:	83 c4 0c             	add    esp,0xc
c001a7e9:	c3                   	ret    
c001a7ea:	51                   	push   ecx
c001a7eb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a7f1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a7f4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a7fa:	51                   	push   ecx
c001a7fb:	52                   	push   edx
c001a7fc:	50                   	push   eax
c001a7fd:	e8 54 82 ff ff       	call   c0012a56 <standardiseFiles(char*, char const*, char const*)>
c001a802:	83 c4 10             	add    esp,0x10
c001a805:	31 c0                	xor    eax,eax
c001a807:	31 d2                	xor    edx,edx
c001a809:	83 c4 0c             	add    esp,0xc
c001a80c:	c3                   	ret    

c001a80d <sysCallReadDir(regs*)>:
c001a80d:	53                   	push   ebx
c001a80e:	83 ec 18             	sub    esp,0x18
c001a811:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a815:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a818:	83 f8 02             	cmp    eax,0x2
c001a81b:	76 53                	jbe    c001a870 <sysCallReadDir(regs*)+0x63>
c001a81d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a820:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a826:	77 4f                	ja     c001a877 <sysCallReadDir(regs*)+0x6a>
c001a828:	83 ec 0c             	sub    esp,0xc
c001a82b:	50                   	push   eax
c001a82c:	e8 5a 6d ff ff       	call   c001158b <getFromFileDescriptor(int)>
c001a831:	83 c4 10             	add    esp,0x10
c001a834:	85 c0                	test   eax,eax
c001a836:	74 50                	je     c001a888 <sysCallReadDir(regs*)+0x7b>
c001a838:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a840:	83 ec 0c             	sub    esp,0xc
c001a843:	8b 10                	mov    edx,DWORD PTR [eax]
c001a845:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a849:	51                   	push   ecx
c001a84a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a84d:	6a 00                	push   0x0
c001a84f:	68 10 01 00 00       	push   0x110
c001a854:	50                   	push   eax
c001a855:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a858:	83 c4 20             	add    esp,0x20
c001a85b:	85 c0                	test   eax,eax
c001a85d:	74 38                	je     c001a897 <sysCallReadDir(regs*)+0x8a>
c001a85f:	83 f8 07             	cmp    eax,0x7
c001a862:	74 0c                	je     c001a870 <sysCallReadDir(regs*)+0x63>
c001a864:	b8 02 00 00 00       	mov    eax,0x2
c001a869:	31 d2                	xor    edx,edx
c001a86b:	83 c4 18             	add    esp,0x18
c001a86e:	5b                   	pop    ebx
c001a86f:	c3                   	ret    
c001a870:	b8 01 00 00 00       	mov    eax,0x1
c001a875:	eb f2                	jmp    c001a869 <sysCallReadDir(regs*)+0x5c>
c001a877:	83 ec 08             	sub    esp,0x8
c001a87a:	52                   	push   edx
c001a87b:	68 cc a3 02 c0       	push   0xc002a3cc
c001a880:	e8 4c 7e ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001a885:	83 c4 10             	add    esp,0x10
c001a888:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a88d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a892:	83 c4 18             	add    esp,0x18
c001a895:	5b                   	pop    ebx
c001a896:	c3                   	ret    
c001a897:	31 c0                	xor    eax,eax
c001a899:	eb ce                	jmp    c001a869 <sysCallReadDir(regs*)+0x5c>

c001a89b <sysCallIsATTY(regs*)>:
c001a89b:	83 ec 0c             	sub    esp,0xc
c001a89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a8a5:	83 f8 02             	cmp    eax,0x2
c001a8a8:	76 07                	jbe    c001a8b1 <sysCallIsATTY(regs*)+0x16>
c001a8aa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a8af:	75 26                	jne    c001a8d7 <sysCallIsATTY(regs*)+0x3c>
c001a8b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8b9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8bf:	85 c0                	test   eax,eax
c001a8c1:	74 24                	je     c001a8e7 <sysCallIsATTY(regs*)+0x4c>
c001a8c3:	83 ec 0c             	sub    esp,0xc
c001a8c6:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8c8:	50                   	push   eax
c001a8c9:	ff 12                	call   DWORD PTR [edx]
c001a8cb:	31 d2                	xor    edx,edx
c001a8cd:	0f b6 c0             	movzx  eax,al
c001a8d0:	83 c4 10             	add    esp,0x10
c001a8d3:	83 c4 0c             	add    esp,0xc
c001a8d6:	c3                   	ret    
c001a8d7:	83 ec 0c             	sub    esp,0xc
c001a8da:	50                   	push   eax
c001a8db:	e8 ab 6c ff ff       	call   c001158b <getFromFileDescriptor(int)>
c001a8e0:	83 c4 10             	add    esp,0x10
c001a8e3:	85 c0                	test   eax,eax
c001a8e5:	75 dc                	jne    c001a8c3 <sysCallIsATTY(regs*)+0x28>
c001a8e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a8ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a8f1:	83 c4 0c             	add    esp,0xc
c001a8f4:	c3                   	ret    

c001a8f5 <sysCallSeek(regs*)>:
c001a8f5:	53                   	push   ebx
c001a8f6:	83 ec 08             	sub    esp,0x8
c001a8f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a900:	83 f8 02             	cmp    eax,0x2
c001a903:	76 4a                	jbe    c001a94f <sysCallSeek(regs*)+0x5a>
c001a905:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a90a:	77 32                	ja     c001a93e <sysCallSeek(regs*)+0x49>
c001a90c:	83 ec 0c             	sub    esp,0xc
c001a90f:	50                   	push   eax
c001a910:	e8 76 6c ff ff       	call   c001158b <getFromFileDescriptor(int)>
c001a915:	83 c4 0c             	add    esp,0xc
c001a918:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a91b:	31 db                	xor    ebx,ebx
c001a91d:	53                   	push   ebx
c001a91e:	51                   	push   ecx
c001a91f:	50                   	push   eax
c001a920:	e8 fd 83 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001a925:	83 c4 10             	add    esp,0x10
c001a928:	85 c0                	test   eax,eax
c001a92a:	0f 95 c0             	setne  al
c001a92d:	31 d2                	xor    edx,edx
c001a92f:	0f b6 c0             	movzx  eax,al
c001a932:	f7 d8                	neg    eax
c001a934:	83 d2 00             	adc    edx,0x0
c001a937:	83 c4 08             	add    esp,0x8
c001a93a:	f7 da                	neg    edx
c001a93c:	5b                   	pop    ebx
c001a93d:	c3                   	ret    
c001a93e:	83 ec 08             	sub    esp,0x8
c001a941:	50                   	push   eax
c001a942:	68 3b a4 02 c0       	push   0xc002a43b
c001a947:	e8 85 7d ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001a94c:	83 c4 10             	add    esp,0x10
c001a94f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a954:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a959:	83 c4 08             	add    esp,0x8
c001a95c:	5b                   	pop    ebx
c001a95d:	c3                   	ret    

c001a95e <sysCallTell(regs*)>:
c001a95e:	53                   	push   ebx
c001a95f:	83 ec 08             	sub    esp,0x8
c001a962:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a966:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a969:	83 f8 02             	cmp    eax,0x2
c001a96c:	76 5e                	jbe    c001a9cc <sysCallTell(regs*)+0x6e>
c001a96e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a973:	77 2d                	ja     c001a9a2 <sysCallTell(regs*)+0x44>
c001a975:	83 ec 0c             	sub    esp,0xc
c001a978:	50                   	push   eax
c001a979:	e8 0d 6c ff ff       	call   c001158b <getFromFileDescriptor(int)>
c001a97e:	5a                   	pop    edx
c001a97f:	59                   	pop    ecx
c001a980:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a983:	50                   	push   eax
c001a984:	e8 ef 83 ff ff       	call   c0012d78 <File::tell(unsigned long long*)>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	85 c0                	test   eax,eax
c001a98e:	0f 95 c0             	setne  al
c001a991:	31 d2                	xor    edx,edx
c001a993:	0f b6 c0             	movzx  eax,al
c001a996:	f7 d8                	neg    eax
c001a998:	83 d2 00             	adc    edx,0x0
c001a99b:	83 c4 08             	add    esp,0x8
c001a99e:	f7 da                	neg    edx
c001a9a0:	5b                   	pop    ebx
c001a9a1:	c3                   	ret    
c001a9a2:	83 ec 08             	sub    esp,0x8
c001a9a5:	50                   	push   eax
c001a9a6:	68 55 a4 02 c0       	push   0xc002a455
c001a9ab:	e8 21 7d ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001a9b0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a9b3:	83 c4 10             	add    esp,0x10
c001a9b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a9bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a9c3:	31 d2                	xor    edx,edx
c001a9c5:	31 c0                	xor    eax,eax
c001a9c7:	83 c4 08             	add    esp,0x8
c001a9ca:	5b                   	pop    ebx
c001a9cb:	c3                   	ret    
c001a9cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a9d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9d6:	83 c4 08             	add    esp,0x8
c001a9d9:	5b                   	pop    ebx
c001a9da:	c3                   	ret    

c001a9db <sysCallSize(regs*)>:
c001a9db:	53                   	push   ebx
c001a9dc:	83 ec 18             	sub    esp,0x18
c001a9df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a9e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a9e6:	83 f8 02             	cmp    eax,0x2
c001a9e9:	76 64                	jbe    c001aa4f <sysCallSize(regs*)+0x74>
c001a9eb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a9f0:	77 33                	ja     c001aa25 <sysCallSize(regs*)+0x4a>
c001a9f2:	83 ec 0c             	sub    esp,0xc
c001a9f5:	50                   	push   eax
c001a9f6:	e8 90 6b ff ff       	call   c001158b <getFromFileDescriptor(int)>
c001a9fb:	83 c4 0c             	add    esp,0xc
c001a9fe:	8d 54 24 13          	lea    edx,[esp+0x13]
c001aa02:	52                   	push   edx
c001aa03:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aa06:	50                   	push   eax
c001aa07:	e8 04 85 ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c001aa0c:	83 c4 10             	add    esp,0x10
c001aa0f:	85 c0                	test   eax,eax
c001aa11:	0f 95 c0             	setne  al
c001aa14:	31 d2                	xor    edx,edx
c001aa16:	0f b6 c0             	movzx  eax,al
c001aa19:	f7 d8                	neg    eax
c001aa1b:	83 d2 00             	adc    edx,0x0
c001aa1e:	83 c4 18             	add    esp,0x18
c001aa21:	f7 da                	neg    edx
c001aa23:	5b                   	pop    ebx
c001aa24:	c3                   	ret    
c001aa25:	83 ec 08             	sub    esp,0x8
c001aa28:	50                   	push   eax
c001aa29:	68 6f a4 02 c0       	push   0xc002a46f
c001aa2e:	e8 9e 7c ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001aa33:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aa36:	83 c4 10             	add    esp,0x10
c001aa39:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aa3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aa46:	31 d2                	xor    edx,edx
c001aa48:	31 c0                	xor    eax,eax
c001aa4a:	83 c4 18             	add    esp,0x18
c001aa4d:	5b                   	pop    ebx
c001aa4e:	c3                   	ret    
c001aa4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa54:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa59:	83 c4 18             	add    esp,0x18
c001aa5c:	5b                   	pop    ebx
c001aa5d:	c3                   	ret    

c001aa5e <sysCallSizeFromFilename(regs*)>:
c001aa5e:	57                   	push   edi
c001aa5f:	56                   	push   esi
c001aa60:	53                   	push   ebx
c001aa61:	83 ec 20             	sub    esp,0x20
c001aa64:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aa68:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001aa6b:	83 fb 02             	cmp    ebx,0x2
c001aa6e:	0f 86 99 00 00 00    	jbe    c001ab0d <sysCallSizeFromFilename(regs*)+0xaf>
c001aa74:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001aa7a:	77 65                	ja     c001aae1 <sysCallSizeFromFilename(regs*)+0x83>
c001aa7c:	83 ec 0c             	sub    esp,0xc
c001aa7f:	68 14 01 00 00       	push   0x114
c001aa84:	e8 4b 4a ff ff       	call   c000f4d4 <malloc>
c001aa89:	83 c4 0c             	add    esp,0xc
c001aa8c:	89 c6                	mov    esi,eax
c001aa8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa93:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aa96:	53                   	push   ebx
c001aa97:	56                   	push   esi
c001aa98:	e8 63 81 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001aa9d:	83 c4 0c             	add    esp,0xc
c001aaa0:	8d 44 24 23          	lea    eax,[esp+0x23]
c001aaa4:	50                   	push   eax
c001aaa5:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001aaa8:	56                   	push   esi
c001aaa9:	e8 62 84 ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c001aaae:	83 c4 10             	add    esp,0x10
c001aab1:	85 f6                	test   esi,esi
c001aab3:	74 14                	je     c001aac9 <sysCallSizeFromFilename(regs*)+0x6b>
c001aab5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aab9:	8b 16                	mov    edx,DWORD PTR [esi]
c001aabb:	83 ec 0c             	sub    esp,0xc
c001aabe:	56                   	push   esi
c001aabf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001aac2:	83 c4 10             	add    esp,0x10
c001aac5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aac9:	85 c0                	test   eax,eax
c001aacb:	0f 95 c0             	setne  al
c001aace:	31 d2                	xor    edx,edx
c001aad0:	0f b6 c0             	movzx  eax,al
c001aad3:	f7 d8                	neg    eax
c001aad5:	83 d2 00             	adc    edx,0x0
c001aad8:	83 c4 20             	add    esp,0x20
c001aadb:	f7 da                	neg    edx
c001aadd:	5b                   	pop    ebx
c001aade:	5e                   	pop    esi
c001aadf:	5f                   	pop    edi
c001aae0:	c3                   	ret    
c001aae1:	83 ec 08             	sub    esp,0x8
c001aae4:	53                   	push   ebx
c001aae5:	68 6f a4 02 c0       	push   0xc002a46f
c001aaea:	e8 e2 7b ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001aaef:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001aaf2:	83 c4 10             	add    esp,0x10
c001aaf5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aafb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ab02:	31 d2                	xor    edx,edx
c001ab04:	83 c4 20             	add    esp,0x20
c001ab07:	31 c0                	xor    eax,eax
c001ab09:	5b                   	pop    ebx
c001ab0a:	5e                   	pop    esi
c001ab0b:	5f                   	pop    edi
c001ab0c:	c3                   	ret    
c001ab0d:	83 c4 20             	add    esp,0x20
c001ab10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab15:	5b                   	pop    ebx
c001ab16:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab1b:	5e                   	pop    esi
c001ab1c:	5f                   	pop    edi
c001ab1d:	c3                   	ret    

c001ab1e <sysCallClose(regs*)>:
c001ab1e:	53                   	push   ebx
c001ab1f:	83 ec 08             	sub    esp,0x8
c001ab22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ab29:	83 f8 02             	cmp    eax,0x2
c001ab2c:	76 50                	jbe    c001ab7e <sysCallClose(regs*)+0x60>
c001ab2e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ab33:	74 58                	je     c001ab8d <sysCallClose(regs*)+0x6f>
c001ab35:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ab3a:	74 60                	je     c001ab9c <sysCallClose(regs*)+0x7e>
c001ab3c:	77 2f                	ja     c001ab6d <sysCallClose(regs*)+0x4f>
c001ab3e:	83 ec 0c             	sub    esp,0xc
c001ab41:	50                   	push   eax
c001ab42:	e8 44 6a ff ff       	call   c001158b <getFromFileDescriptor(int)>
c001ab47:	89 c3                	mov    ebx,eax
c001ab49:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab4c:	e8 71 81 ff ff       	call   c0012cc2 <File::close()>
c001ab51:	83 c4 10             	add    esp,0x10
c001ab54:	85 db                	test   ebx,ebx
c001ab56:	74 0c                	je     c001ab64 <sysCallClose(regs*)+0x46>
c001ab58:	83 ec 0c             	sub    esp,0xc
c001ab5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab5d:	53                   	push   ebx
c001ab5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab61:	83 c4 10             	add    esp,0x10
c001ab64:	31 c0                	xor    eax,eax
c001ab66:	31 d2                	xor    edx,edx
c001ab68:	83 c4 08             	add    esp,0x8
c001ab6b:	5b                   	pop    ebx
c001ab6c:	c3                   	ret    
c001ab6d:	83 ec 08             	sub    esp,0x8
c001ab70:	50                   	push   eax
c001ab71:	68 f0 a3 02 c0       	push   0xc002a3f0
c001ab76:	e8 56 7b ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001ab7b:	83 c4 10             	add    esp,0x10
c001ab7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab83:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab88:	83 c4 08             	add    esp,0x8
c001ab8b:	5b                   	pop    ebx
c001ab8c:	c3                   	ret    
c001ab8d:	83 ec 0c             	sub    esp,0xc
c001ab90:	68 8a a4 02 c0       	push   0xc002a48a
c001ab95:	e8 37 7b ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001ab9a:	eb c5                	jmp    c001ab61 <sysCallClose(regs*)+0x43>
c001ab9c:	83 ec 0c             	sub    esp,0xc
c001ab9f:	68 98 a4 02 c0       	push   0xc002a498
c001aba4:	eb ef                	jmp    c001ab95 <sysCallClose(regs*)+0x77>

c001aba6 <sysCallOpenDir(regs*)>:
c001aba6:	56                   	push   esi
c001aba7:	53                   	push   ebx
c001aba8:	53                   	push   ebx
c001aba9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abad:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001abb0:	85 f6                	test   esi,esi
c001abb2:	74 59                	je     c001ac0d <sysCallOpenDir(regs*)+0x67>
c001abb4:	83 ec 0c             	sub    esp,0xc
c001abb7:	68 14 01 00 00       	push   0x114
c001abbc:	e8 13 49 ff ff       	call   c000f4d4 <malloc>
c001abc1:	83 c4 0c             	add    esp,0xc
c001abc4:	89 c6                	mov    esi,eax
c001abc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abcb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001abce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001abd1:	56                   	push   esi
c001abd2:	e8 ff 84 ff ff       	call   c00130d6 <Directory::Directory(char const*, Process*)>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	85 f6                	test   esi,esi
c001abdc:	74 2f                	je     c001ac0d <sysCallOpenDir(regs*)+0x67>
c001abde:	83 ec 0c             	sub    esp,0xc
c001abe1:	56                   	push   esi
c001abe2:	e8 53 85 ff ff       	call   c001313a <Directory::open()>
c001abe7:	83 c4 10             	add    esp,0x10
c001abea:	85 c0                	test   eax,eax
c001abec:	75 1f                	jne    c001ac0d <sysCallOpenDir(regs*)+0x67>
c001abee:	83 ec 0c             	sub    esp,0xc
c001abf1:	56                   	push   esi
c001abf2:	e8 9f 66 ff ff       	call   c0011296 <UnixFile::getFileDescriptor()>
c001abf7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001abfa:	83 c4 10             	add    esp,0x10
c001abfd:	89 02                	mov    DWORD PTR [edx],eax
c001abff:	c1 f8 1f             	sar    eax,0x1f
c001ac02:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ac05:	31 c0                	xor    eax,eax
c001ac07:	59                   	pop    ecx
c001ac08:	31 d2                	xor    edx,edx
c001ac0a:	5b                   	pop    ebx
c001ac0b:	5e                   	pop    esi
c001ac0c:	c3                   	ret    
c001ac0d:	59                   	pop    ecx
c001ac0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac13:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac18:	5b                   	pop    ebx
c001ac19:	5e                   	pop    esi
c001ac1a:	c3                   	ret    

c001ac1b <sysCallCloseDir(regs*)>:
c001ac1b:	53                   	push   ebx
c001ac1c:	83 ec 08             	sub    esp,0x8
c001ac1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac23:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ac26:	83 f8 02             	cmp    eax,0x2
c001ac29:	76 47                	jbe    c001ac72 <sysCallCloseDir(regs*)+0x57>
c001ac2b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ac30:	77 2f                	ja     c001ac61 <sysCallCloseDir(regs*)+0x46>
c001ac32:	83 ec 0c             	sub    esp,0xc
c001ac35:	50                   	push   eax
c001ac36:	e8 50 69 ff ff       	call   c001158b <getFromFileDescriptor(int)>
c001ac3b:	89 c3                	mov    ebx,eax
c001ac3d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac40:	e8 51 85 ff ff       	call   c0013196 <Directory::close()>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	85 db                	test   ebx,ebx
c001ac4a:	74 0c                	je     c001ac58 <sysCallCloseDir(regs*)+0x3d>
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac51:	53                   	push   ebx
c001ac52:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac55:	83 c4 10             	add    esp,0x10
c001ac58:	31 c0                	xor    eax,eax
c001ac5a:	31 d2                	xor    edx,edx
c001ac5c:	83 c4 08             	add    esp,0x8
c001ac5f:	5b                   	pop    ebx
c001ac60:	c3                   	ret    
c001ac61:	83 ec 08             	sub    esp,0x8
c001ac64:	50                   	push   eax
c001ac65:	68 18 a4 02 c0       	push   0xc002a418
c001ac6a:	e8 62 7a ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001ac6f:	83 c4 10             	add    esp,0x10
c001ac72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac77:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac7c:	83 c4 08             	add    esp,0x8
c001ac7f:	5b                   	pop    ebx
c001ac80:	c3                   	ret    

c001ac81 <sysCallMakeDir(regs*)>:
c001ac81:	56                   	push   esi
c001ac82:	53                   	push   ebx
c001ac83:	83 ec 10             	sub    esp,0x10
c001ac86:	68 14 01 00 00       	push   0x114
c001ac8b:	e8 44 48 ff ff       	call   c000f4d4 <malloc>
c001ac90:	83 c4 0c             	add    esp,0xc
c001ac93:	89 c3                	mov    ebx,eax
c001ac95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac9a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aca1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001aca4:	53                   	push   ebx
c001aca5:	e8 2c 84 ff ff       	call   c00130d6 <Directory::Directory(char const*, Process*)>
c001acaa:	83 c4 10             	add    esp,0x10
c001acad:	85 db                	test   ebx,ebx
c001acaf:	74 32                	je     c001ace3 <sysCallMakeDir(regs*)+0x62>
c001acb1:	83 ec 0c             	sub    esp,0xc
c001acb4:	53                   	push   ebx
c001acb5:	e8 60 86 ff ff       	call   c001331a <Directory::create()>
c001acba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001acbd:	89 c6                	mov    esi,eax
c001acbf:	e8 d2 84 ff ff       	call   c0013196 <Directory::close()>
c001acc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001acc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001accc:	83 c4 10             	add    esp,0x10
c001accf:	31 c0                	xor    eax,eax
c001acd1:	59                   	pop    ecx
c001acd2:	85 f6                	test   esi,esi
c001acd4:	5b                   	pop    ebx
c001acd5:	0f 95 c0             	setne  al
c001acd8:	5e                   	pop    esi
c001acd9:	31 d2                	xor    edx,edx
c001acdb:	f7 d8                	neg    eax
c001acdd:	83 d2 00             	adc    edx,0x0
c001ace0:	f7 da                	neg    edx
c001ace2:	c3                   	ret    
c001ace3:	59                   	pop    ecx
c001ace4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ace9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acee:	5b                   	pop    ebx
c001acef:	5e                   	pop    esi
c001acf0:	c3                   	ret    

c001acf1 <sysCallWait(regs*)>:
c001acf1:	83 ec 10             	sub    esp,0x10
c001acf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acf8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001acfb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001acfe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad01:	e8 2b 24 00 00       	call   c001d131 <waitTask(int, int*, int)>
c001ad06:	83 c4 1c             	add    esp,0x1c
c001ad09:	99                   	cdq    
c001ad0a:	c3                   	ret    

c001ad0b <sysCallNotImpl(regs*)>:
c001ad0b:	83 ec 18             	sub    esp,0x18
c001ad0e:	68 a6 a4 02 c0       	push   0xc002a4a6
c001ad13:	e8 d3 ea ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001ad18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad22:	83 c4 1c             	add    esp,0x1c
c001ad25:	c3                   	ret    

c001ad26 <sysPanic(regs*)>:
c001ad26:	83 ec 18             	sub    esp,0x18
c001ad29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad2d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ad30:	e8 b6 ea ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001ad35:	c7 04 24 c0 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4c0
c001ad3c:	e8 aa ea ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001ad41:	b8 01 00 00 00       	mov    eax,0x1
c001ad46:	31 d2                	xor    edx,edx
c001ad48:	83 c4 1c             	add    esp,0x1c
c001ad4b:	c3                   	ret    

c001ad4c <sysCallRmdir(regs*)>:
c001ad4c:	56                   	push   esi
c001ad4d:	53                   	push   ebx
c001ad4e:	83 ec 20             	sub    esp,0x20
c001ad51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad55:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ad58:	68 14 01 00 00       	push   0x114
c001ad5d:	e8 72 47 ff ff       	call   c000f4d4 <malloc>
c001ad62:	83 c4 0c             	add    esp,0xc
c001ad65:	89 c3                	mov    ebx,eax
c001ad67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad6c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad6f:	56                   	push   esi
c001ad70:	53                   	push   ebx
c001ad71:	e8 8a 7e ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001ad76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad79:	e8 5e 80 ff ff       	call   c0012ddc <File::unlink()>
c001ad7e:	83 c4 10             	add    esp,0x10
c001ad81:	85 db                	test   ebx,ebx
c001ad83:	74 14                	je     c001ad99 <sysCallRmdir(regs*)+0x4d>
c001ad85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad89:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ad8b:	83 ec 0c             	sub    esp,0xc
c001ad8e:	53                   	push   ebx
c001ad8f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ad92:	83 c4 10             	add    esp,0x10
c001ad95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad99:	85 c0                	test   eax,eax
c001ad9b:	0f 95 c0             	setne  al
c001ad9e:	31 d2                	xor    edx,edx
c001ada0:	0f b6 c0             	movzx  eax,al
c001ada3:	f7 d8                	neg    eax
c001ada5:	83 d2 00             	adc    edx,0x0
c001ada8:	83 c4 14             	add    esp,0x14
c001adab:	f7 da                	neg    edx
c001adad:	5b                   	pop    ebx
c001adae:	5e                   	pop    esi
c001adaf:	c3                   	ret    

c001adb0 <sysCallUnlink(regs*)>:
c001adb0:	56                   	push   esi
c001adb1:	53                   	push   ebx
c001adb2:	83 ec 20             	sub    esp,0x20
c001adb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001adb9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001adbc:	68 14 01 00 00       	push   0x114
c001adc1:	e8 0e 47 ff ff       	call   c000f4d4 <malloc>
c001adc6:	83 c4 0c             	add    esp,0xc
c001adc9:	89 c3                	mov    ebx,eax
c001adcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001add0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001add3:	56                   	push   esi
c001add4:	53                   	push   ebx
c001add5:	e8 26 7e ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001adda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001addd:	e8 fa 7f ff ff       	call   c0012ddc <File::unlink()>
c001ade2:	83 c4 10             	add    esp,0x10
c001ade5:	85 db                	test   ebx,ebx
c001ade7:	74 14                	je     c001adfd <sysCallUnlink(regs*)+0x4d>
c001ade9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aded:	8b 13                	mov    edx,DWORD PTR [ebx]
c001adef:	83 ec 0c             	sub    esp,0xc
c001adf2:	53                   	push   ebx
c001adf3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001adf6:	83 c4 10             	add    esp,0x10
c001adf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adfd:	85 c0                	test   eax,eax
c001adff:	0f 95 c0             	setne  al
c001ae02:	31 d2                	xor    edx,edx
c001ae04:	0f b6 c0             	movzx  eax,al
c001ae07:	f7 d8                	neg    eax
c001ae09:	83 d2 00             	adc    edx,0x0
c001ae0c:	83 c4 14             	add    esp,0x14
c001ae0f:	f7 da                	neg    edx
c001ae11:	5b                   	pop    ebx
c001ae12:	5e                   	pop    esi
c001ae13:	c3                   	ret    

c001ae14 <sysCallGetArgv(regs*)>:
c001ae14:	83 ec 0c             	sub    esp,0xc
c001ae17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae1b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ae1e:	85 c0                	test   eax,eax
c001ae20:	78 2b                	js     c001ae4d <sysCallGetArgv(regs*)+0x39>
c001ae22:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ae28:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ae2b:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001ae31:	7d 1a                	jge    c001ae4d <sysCallGetArgv(regs*)+0x39>
c001ae33:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001ae3a:	85 c0                	test   eax,eax
c001ae3c:	74 17                	je     c001ae55 <sysCallGetArgv(regs*)+0x41>
c001ae3e:	83 ec 08             	sub    esp,0x8
c001ae41:	50                   	push   eax
c001ae42:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001ae45:	e8 e0 58 fe ff       	call   c000072a <strcpy>
c001ae4a:	83 c4 10             	add    esp,0x10
c001ae4d:	31 c0                	xor    eax,eax
c001ae4f:	31 d2                	xor    edx,edx
c001ae51:	83 c4 0c             	add    esp,0xc
c001ae54:	c3                   	ret    
c001ae55:	b8 01 00 00 00       	mov    eax,0x1
c001ae5a:	31 d2                	xor    edx,edx
c001ae5c:	83 c4 0c             	add    esp,0xc
c001ae5f:	c3                   	ret    

c001ae60 <sysCallTTYName(regs*)>:
c001ae60:	56                   	push   esi
c001ae61:	53                   	push   ebx
c001ae62:	53                   	push   ebx
c001ae63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae67:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001ae6a:	85 c0                	test   eax,eax
c001ae6c:	74 5f                	je     c001aecd <sysCallTTYName(regs*)+0x6d>
c001ae6e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ae71:	83 f8 02             	cmp    eax,0x2
c001ae74:	77 3e                	ja     c001aeb4 <sysCallTTYName(regs*)+0x54>
c001ae76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae7b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae7e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001ae84:	85 db                	test   ebx,ebx
c001ae86:	74 45                	je     c001aecd <sysCallTTYName(regs*)+0x6d>
c001ae88:	83 ec 0c             	sub    esp,0xc
c001ae8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae8d:	53                   	push   ebx
c001ae8e:	ff 10                	call   DWORD PTR [eax]
c001ae90:	83 c4 10             	add    esp,0x10
c001ae93:	84 c0                	test   al,al
c001ae95:	74 41                	je     c001aed8 <sysCallTTYName(regs*)+0x78>
c001ae97:	83 ec 08             	sub    esp,0x8
c001ae9a:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001aea0:	53                   	push   ebx
c001aea1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001aea4:	e8 81 58 fe ff       	call   c000072a <strcpy>
c001aea9:	83 c4 10             	add    esp,0x10
c001aeac:	31 c0                	xor    eax,eax
c001aeae:	59                   	pop    ecx
c001aeaf:	31 d2                	xor    edx,edx
c001aeb1:	5b                   	pop    ebx
c001aeb2:	5e                   	pop    esi
c001aeb3:	c3                   	ret    
c001aeb4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001aeb9:	74 bb                	je     c001ae76 <sysCallTTYName(regs*)+0x16>
c001aebb:	83 ec 0c             	sub    esp,0xc
c001aebe:	50                   	push   eax
c001aebf:	e8 c7 66 ff ff       	call   c001158b <getFromFileDescriptor(int)>
c001aec4:	83 c4 10             	add    esp,0x10
c001aec7:	89 c3                	mov    ebx,eax
c001aec9:	85 db                	test   ebx,ebx
c001aecb:	75 bb                	jne    c001ae88 <sysCallTTYName(regs*)+0x28>
c001aecd:	59                   	pop    ecx
c001aece:	b8 01 00 00 00       	mov    eax,0x1
c001aed3:	31 d2                	xor    edx,edx
c001aed5:	5b                   	pop    ebx
c001aed6:	5e                   	pop    esi
c001aed7:	c3                   	ret    
c001aed8:	59                   	pop    ecx
c001aed9:	b8 02 00 00 00       	mov    eax,0x2
c001aede:	31 d2                	xor    edx,edx
c001aee0:	5b                   	pop    ebx
c001aee1:	5e                   	pop    esi
c001aee2:	c3                   	ret    

c001aee3 <sysCallUSleep(regs*)>:
c001aee3:	83 ec 14             	sub    esp,0x14
c001aee6:	b8 e8 03 00 00       	mov    eax,0x3e8
c001aeeb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aeef:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001aef6:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001aef9:	01 ca                	add    edx,ecx
c001aefb:	52                   	push   edx
c001aefc:	50                   	push   eax
c001aefd:	e8 c8 22 00 00       	call   c001d1ca <nanoSleep(unsigned long long)>
c001af02:	31 c0                	xor    eax,eax
c001af04:	31 d2                	xor    edx,edx
c001af06:	83 c4 1c             	add    esp,0x1c
c001af09:	c3                   	ret    

c001af0a <sysCallSpawn(regs*)>:
c001af0a:	56                   	push   esi
c001af0b:	53                   	push   ebx
c001af0c:	53                   	push   ebx
c001af0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af11:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001af14:	85 f6                	test   esi,esi
c001af16:	75 08                	jne    c001af20 <sysCallSpawn(regs*)+0x16>
c001af18:	59                   	pop    ecx
c001af19:	31 c0                	xor    eax,eax
c001af1b:	31 d2                	xor    edx,edx
c001af1d:	5b                   	pop    ebx
c001af1e:	5e                   	pop    esi
c001af1f:	c3                   	ret    
c001af20:	83 ec 0c             	sub    esp,0xc
c001af23:	68 3f 07 00 00       	push   0x73f
c001af28:	e8 a7 45 ff ff       	call   c000f4d4 <malloc>
c001af2d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001af30:	89 c6                	mov    esi,eax
c001af32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af37:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af3a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af3d:	56                   	push   esi
c001af3e:	e8 87 19 00 00       	call   c001c8ca <Process::Process(char const*, Process*, char**)>
c001af43:	83 c4 20             	add    esp,0x20
c001af46:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001af4d:	75 c9                	jne    c001af18 <sysCallSpawn(regs*)+0xe>
c001af4f:	83 ec 0c             	sub    esp,0xc
c001af52:	56                   	push   esi
c001af53:	e8 38 1f 00 00       	call   c001ce90 <Process::createUserThread()>
c001af58:	8b 06                	mov    eax,DWORD PTR [esi]
c001af5a:	83 c4 10             	add    esp,0x10
c001af5d:	99                   	cdq    
c001af5e:	59                   	pop    ecx
c001af5f:	5b                   	pop    ebx
c001af60:	5e                   	pop    esi
c001af61:	c3                   	ret    

c001af62 <sysCallGetEnv(regs*)>:
c001af62:	57                   	push   edi
c001af63:	56                   	push   esi
c001af64:	53                   	push   ebx
c001af65:	83 ec 1c             	sub    esp,0x1c
c001af68:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001af6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af71:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001af74:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001af77:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af7a:	e8 88 e7 ff ff       	call   c0019707 <Krnl::getProcessTotalEnvCount(Process*)>
c001af7f:	83 c4 10             	add    esp,0x10
c001af82:	39 c7                	cmp    edi,eax
c001af84:	7c 14                	jl     c001af9a <sysCallGetEnv(regs*)+0x38>
c001af86:	85 f6                	test   esi,esi
c001af88:	75 0b                	jne    c001af95 <sysCallGetEnv(regs*)+0x33>
c001af8a:	83 c4 10             	add    esp,0x10
c001af8d:	31 c0                	xor    eax,eax
c001af8f:	5b                   	pop    ebx
c001af90:	31 d2                	xor    edx,edx
c001af92:	5e                   	pop    esi
c001af93:	5f                   	pop    edi
c001af94:	c3                   	ret    
c001af95:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af98:	eb f0                	jmp    c001af8a <sysCallGetEnv(regs*)+0x28>
c001af9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af9e:	52                   	push   edx
c001af9f:	57                   	push   edi
c001afa0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001afa6:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001afa9:	50                   	push   eax
c001afaa:	e8 78 e7 ff ff       	call   c0019727 <Krnl::getProcessEnvPair(Process*, int)>
c001afaf:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001afb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afb6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afba:	83 c4 0c             	add    esp,0xc
c001afbd:	85 c9                	test   ecx,ecx
c001afbf:	75 23                	jne    c001afe4 <sysCallGetEnv(regs*)+0x82>
c001afc1:	83 ec 0c             	sub    esp,0xc
c001afc4:	50                   	push   eax
c001afc5:	e8 de 56 fe ff       	call   c00006a8 <strlen>
c001afca:	89 3c 24             	mov    DWORD PTR [esp],edi
c001afcd:	89 c3                	mov    ebx,eax
c001afcf:	e8 d4 56 fe ff       	call   c00006a8 <strlen>
c001afd4:	83 c4 10             	add    esp,0x10
c001afd7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001afdb:	83 c4 10             	add    esp,0x10
c001afde:	31 d2                	xor    edx,edx
c001afe0:	5b                   	pop    ebx
c001afe1:	5e                   	pop    esi
c001afe2:	5f                   	pop    edi
c001afe3:	c3                   	ret    
c001afe4:	83 ec 08             	sub    esp,0x8
c001afe7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001afea:	50                   	push   eax
c001afeb:	56                   	push   esi
c001afec:	e8 39 57 fe ff       	call   c000072a <strcpy>
c001aff1:	58                   	pop    eax
c001aff2:	5a                   	pop    edx
c001aff3:	68 cf a4 02 c0       	push   0xc002a4cf
c001aff8:	56                   	push   esi
c001aff9:	e8 e3 57 fe ff       	call   c00007e1 <strcat>
c001affe:	59                   	pop    ecx
c001afff:	5b                   	pop    ebx
c001b000:	57                   	push   edi
c001b001:	56                   	push   esi
c001b002:	e8 da 57 fe ff       	call   c00007e1 <strcat>
c001b007:	83 c4 10             	add    esp,0x10
c001b00a:	e9 7b ff ff ff       	jmp    c001af8a <sysCallGetEnv(regs*)+0x28>

c001b00f <sysAppSettings(regs*)>:
c001b00f:	53                   	push   ebx
c001b010:	83 ec 08             	sub    esp,0x8
c001b013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b017:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b01a:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b020:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b025:	66 3d c0 09          	cmp    ax,0x9c0
c001b029:	75 2f                	jne    c001b05a <sysAppSettings(regs*)+0x4b>
c001b02b:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b031:	83 e0 1f             	and    eax,0x1f
c001b034:	3c 01                	cmp    al,0x1
c001b036:	74 2e                	je     c001b066 <sysAppSettings(regs*)+0x57>
c001b038:	3c 07                	cmp    al,0x7
c001b03a:	0f 84 bd 00 00 00    	je     c001b0fd <sysAppSettings(regs*)+0xee>
c001b040:	84 c0                	test   al,al
c001b042:	0f 84 dc 00 00 00    	je     c001b124 <sysAppSettings(regs*)+0x115>
c001b048:	3c 08                	cmp    al,0x8
c001b04a:	74 6d                	je     c001b0b9 <sysAppSettings(regs*)+0xaa>
c001b04c:	0f b6 c0             	movzx  eax,al
c001b04f:	83 c4 08             	add    esp,0x8
c001b052:	05 e8 03 00 00       	add    eax,0x3e8
c001b057:	5b                   	pop    ebx
c001b058:	99                   	cdq    
c001b059:	c3                   	ret    
c001b05a:	b8 01 00 00 00       	mov    eax,0x1
c001b05f:	31 d2                	xor    edx,edx
c001b061:	83 c4 08             	add    esp,0x8
c001b064:	5b                   	pop    ebx
c001b065:	c3                   	ret    
c001b066:	51                   	push   ecx
c001b067:	68 00 01 00 00       	push   0x100
c001b06c:	6a 00                	push   0x0
c001b06e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b073:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b076:	83 c0 0c             	add    eax,0xc
c001b079:	50                   	push   eax
c001b07a:	e8 0c 56 fe ff       	call   c000068b <memset>
c001b07f:	83 c4 0c             	add    esp,0xc
c001b082:	68 ff 00 00 00       	push   0xff
c001b087:	53                   	push   ebx
c001b088:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b08d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b090:	83 c0 0c             	add    eax,0xc
c001b093:	50                   	push   eax
c001b094:	e8 bc 55 fe ff       	call   c0000655 <memcpy>
c001b099:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b09e:	5b                   	pop    ebx
c001b09f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0a2:	5a                   	pop    edx
c001b0a3:	8d 50 0c             	lea    edx,[eax+0xc]
c001b0a6:	52                   	push   edx
c001b0a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b0ad:	e8 32 56 ff ff       	call   c00106e4 <VgaText::setTitle(char*)>
c001b0b2:	83 c4 10             	add    esp,0x10
c001b0b5:	31 c0                	xor    eax,eax
c001b0b7:	eb a6                	jmp    c001b05f <sysAppSettings(regs*)+0x50>
c001b0b9:	83 ec 08             	sub    esp,0x8
c001b0bc:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b0c2:	83 e0 0f             	and    eax,0xf
c001b0c5:	50                   	push   eax
c001b0c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b0d4:	e8 fb 55 ff ff       	call   c00106d4 <VgaText::setTitleColour(VgaColour)>
c001b0d9:	58                   	pop    eax
c001b0da:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b0e0:	5a                   	pop    edx
c001b0e1:	c1 e8 04             	shr    eax,0x4
c001b0e4:	83 e0 0f             	and    eax,0xf
c001b0e7:	50                   	push   eax
c001b0e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b0f6:	e8 c9 55 ff ff       	call   c00106c4 <VgaText::setTitleTextColour(VgaColour)>
c001b0fb:	eb b5                	jmp    c001b0b2 <sysAppSettings(regs*)+0xa3>
c001b0fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b102:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b105:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b10b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b111:	c0 e8 06             	shr    al,0x6
c001b114:	83 e0 01             	and    eax,0x1
c001b117:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b11d:	31 c0                	xor    eax,eax
c001b11f:	e9 3b ff ff ff       	jmp    c001b05f <sysAppSettings(regs*)+0x50>
c001b124:	b8 02 00 00 00       	mov    eax,0x2
c001b129:	e9 31 ff ff ff       	jmp    c001b05f <sysAppSettings(regs*)+0x50>

c001b12e <sysSetFatAttrib(regs*)>:
c001b12e:	57                   	push   edi
c001b12f:	56                   	push   esi
c001b130:	53                   	push   ebx
c001b131:	83 ec 1c             	sub    esp,0x1c
c001b134:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b138:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b13b:	68 14 01 00 00       	push   0x114
c001b140:	e8 8f 43 ff ff       	call   c000f4d4 <malloc>
c001b145:	83 c4 0c             	add    esp,0xc
c001b148:	89 c3                	mov    ebx,eax
c001b14a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b14f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b152:	57                   	push   edi
c001b153:	53                   	push   ebx
c001b154:	e8 a7 7a ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001b159:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b15c:	83 c4 0c             	add    esp,0xc
c001b15f:	0f b6 d4             	movzx  edx,ah
c001b162:	0f b6 c0             	movzx  eax,al
c001b165:	52                   	push   edx
c001b166:	50                   	push   eax
c001b167:	53                   	push   ebx
c001b168:	e8 09 7d ff ff       	call   c0012e76 <File::chfatattr(unsigned char, unsigned char)>
c001b16d:	83 c4 10             	add    esp,0x10
c001b170:	85 db                	test   ebx,ebx
c001b172:	74 14                	je     c001b188 <sysSetFatAttrib(regs*)+0x5a>
c001b174:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b178:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b17a:	83 ec 0c             	sub    esp,0xc
c001b17d:	53                   	push   ebx
c001b17e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b181:	83 c4 10             	add    esp,0x10
c001b184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b188:	85 c0                	test   eax,eax
c001b18a:	0f 95 c0             	setne  al
c001b18d:	31 d2                	xor    edx,edx
c001b18f:	0f b6 c0             	movzx  eax,al
c001b192:	f7 d8                	neg    eax
c001b194:	83 d2 00             	adc    edx,0x0
c001b197:	83 c4 10             	add    esp,0x10
c001b19a:	f7 da                	neg    edx
c001b19c:	5b                   	pop    ebx
c001b19d:	5e                   	pop    esi
c001b19e:	5f                   	pop    edi
c001b19f:	c3                   	ret    

c001b1a0 <sysPipe(regs*)>:
c001b1a0:	57                   	push   edi
c001b1a1:	56                   	push   esi
c001b1a2:	53                   	push   ebx
c001b1a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a7:	83 ec 0c             	sub    esp,0xc
c001b1aa:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b1ad:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b1b0:	6a 20                	push   0x20
c001b1b2:	e8 1d 43 ff ff       	call   c000f4d4 <malloc>
c001b1b7:	89 c3                	mov    ebx,eax
c001b1b9:	58                   	pop    eax
c001b1ba:	5a                   	pop    edx
c001b1bb:	68 00 50 00 00       	push   0x5000
c001b1c0:	53                   	push   ebx
c001b1c1:	e8 4e 4e ff ff       	call   c0010014 <Pipe::Pipe(int)>
c001b1c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1c9:	e8 c8 60 ff ff       	call   c0011296 <UnixFile::getFileDescriptor()>
c001b1ce:	89 07                	mov    DWORD PTR [edi],eax
c001b1d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1d3:	e8 be 60 ff ff       	call   c0011296 <UnixFile::getFileDescriptor()>
c001b1d8:	83 c4 10             	add    esp,0x10
c001b1db:	89 06                	mov    DWORD PTR [esi],eax
c001b1dd:	31 d2                	xor    edx,edx
c001b1df:	5b                   	pop    ebx
c001b1e0:	31 c0                	xor    eax,eax
c001b1e2:	5e                   	pop    esi
c001b1e3:	5f                   	pop    edi
c001b1e4:	c3                   	ret    

c001b1e5 <sysGetUnixTime(regs*)>:
c001b1e5:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001b1ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b1f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b1f4:	e9 e3 83 ff ff       	jmp    c00135dc <Clock::timeInSecondsLocal()>

c001b1f9 <string_ends_with(char const*, char const*)>:
c001b1f9:	57                   	push   edi
c001b1fa:	56                   	push   esi
c001b1fb:	53                   	push   ebx
c001b1fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b200:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b204:	83 ec 0c             	sub    esp,0xc
c001b207:	53                   	push   ebx
c001b208:	e8 9b 54 fe ff       	call   c00006a8 <strlen>
c001b20d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b210:	89 c6                	mov    esi,eax
c001b212:	e8 91 54 fe ff       	call   c00006a8 <strlen>
c001b217:	83 c4 10             	add    esp,0x10
c001b21a:	39 c6                	cmp    esi,eax
c001b21c:	7d 06                	jge    c001b224 <string_ends_with(char const*, char const*)+0x2b>
c001b21e:	5b                   	pop    ebx
c001b21f:	31 c0                	xor    eax,eax
c001b221:	5e                   	pop    esi
c001b222:	5f                   	pop    edi
c001b223:	c3                   	ret    
c001b224:	83 ec 08             	sub    esp,0x8
c001b227:	29 c6                	sub    esi,eax
c001b229:	57                   	push   edi
c001b22a:	01 f3                	add    ebx,esi
c001b22c:	53                   	push   ebx
c001b22d:	e8 49 55 fe ff       	call   c000077b <strcmp>
c001b232:	83 c4 10             	add    esp,0x10
c001b235:	85 c0                	test   eax,eax
c001b237:	5b                   	pop    ebx
c001b238:	0f 94 c0             	sete   al
c001b23b:	5e                   	pop    esi
c001b23c:	0f b6 c0             	movzx  eax,al
c001b23f:	5f                   	pop    edi
c001b240:	c3                   	ret    

c001b241 <sysCallOpen(regs*)>:
c001b241:	56                   	push   esi
c001b242:	53                   	push   ebx
c001b243:	81 ec 04 01 00 00    	sub    esp,0x104
c001b249:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b250:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b253:	85 c9                	test   ecx,ecx
c001b255:	0f 84 b3 00 00 00    	je     c001b30e <sysCallOpen(regs*)+0xcd>
c001b25b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b25e:	85 c0                	test   eax,eax
c001b260:	0f 84 a8 00 00 00    	je     c001b30e <sysCallOpen(regs*)+0xcd>
c001b266:	52                   	push   edx
c001b267:	68 d1 a4 02 c0       	push   0xc002a4d1
c001b26c:	50                   	push   eax
c001b26d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b271:	56                   	push   esi
c001b272:	e8 df 77 ff ff       	call   c0012a56 <standardiseFiles(char*, char const*, char const*)>
c001b277:	89 34 24             	mov    DWORD PTR [esp],esi
c001b27a:	e8 29 54 fe ff       	call   c00006a8 <strlen>
c001b27f:	83 c4 10             	add    esp,0x10
c001b282:	48                   	dec    eax
c001b283:	74 1d                	je     c001b2a2 <sysCallOpen(regs*)+0x61>
c001b285:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b288:	eb 0f                	jmp    c001b299 <sysCallOpen(regs*)+0x58>
c001b28a:	80 fa 3a             	cmp    dl,0x3a
c001b28d:	74 0f                	je     c001b29e <sysCallOpen(regs*)+0x5d>
c001b28f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b293:	48                   	dec    eax
c001b294:	74 0c                	je     c001b2a2 <sysCallOpen(regs*)+0x61>
c001b296:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b299:	80 fa 2e             	cmp    dl,0x2e
c001b29c:	75 ec                	jne    c001b28a <sysCallOpen(regs*)+0x49>
c001b29e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b2a2:	83 ec 08             	sub    esp,0x8
c001b2a5:	68 d5 a4 02 c0       	push   0xc002a4d5
c001b2aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2ad:	e8 47 ff ff ff       	call   c001b1f9 <string_ends_with(char const*, char const*)>
c001b2b2:	83 c4 10             	add    esp,0x10
c001b2b5:	85 c0                	test   eax,eax
c001b2b7:	75 17                	jne    c001b2d0 <sysCallOpen(regs*)+0x8f>
c001b2b9:	83 ec 08             	sub    esp,0x8
c001b2bc:	68 f6 a4 02 c0       	push   0xc002a4f6
c001b2c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2c4:	e8 30 ff ff ff       	call   c001b1f9 <string_ends_with(char const*, char const*)>
c001b2c9:	83 c4 10             	add    esp,0x10
c001b2cc:	85 c0                	test   eax,eax
c001b2ce:	74 51                	je     c001b321 <sysCallOpen(regs*)+0xe0>
c001b2d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2d3:	83 ec 08             	sub    esp,0x8
c001b2d6:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b2dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2e6:	ff 30                	push   DWORD PTR [eax]
c001b2e8:	68 da a4 02 c0       	push   0xc002a4da
c001b2ed:	e8 df 73 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001b2f2:	c7 04 24 e9 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4e9
c001b2f9:	e8 d3 73 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001b2fe:	83 c4 10             	add    esp,0x10
c001b301:	81 c4 04 01 00 00    	add    esp,0x104
c001b307:	31 c0                	xor    eax,eax
c001b309:	31 d2                	xor    edx,edx
c001b30b:	5b                   	pop    ebx
c001b30c:	5e                   	pop    esi
c001b30d:	c3                   	ret    
c001b30e:	81 c4 04 01 00 00    	add    esp,0x104
c001b314:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b319:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b31e:	5b                   	pop    ebx
c001b31f:	5e                   	pop    esi
c001b320:	c3                   	ret    
c001b321:	83 ec 08             	sub    esp,0x8
c001b324:	68 d6 a4 02 c0       	push   0xc002a4d6
c001b329:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b32c:	e8 4a 54 fe ff       	call   c000077b <strcmp>
c001b331:	83 c4 10             	add    esp,0x10
c001b334:	85 c0                	test   eax,eax
c001b336:	74 98                	je     c001b2d0 <sysCallOpen(regs*)+0x8f>
c001b338:	83 ec 08             	sub    esp,0x8
c001b33b:	68 d5 a4 02 c0       	push   0xc002a4d5
c001b340:	56                   	push   esi
c001b341:	e8 b3 fe ff ff       	call   c001b1f9 <string_ends_with(char const*, char const*)>
c001b346:	83 c4 10             	add    esp,0x10
c001b349:	85 c0                	test   eax,eax
c001b34b:	75 83                	jne    c001b2d0 <sysCallOpen(regs*)+0x8f>
c001b34d:	83 ec 08             	sub    esp,0x8
c001b350:	68 fb a4 02 c0       	push   0xc002a4fb
c001b355:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b358:	e8 9c fe ff ff       	call   c001b1f9 <string_ends_with(char const*, char const*)>
c001b35d:	83 c4 10             	add    esp,0x10
c001b360:	85 c0                	test   eax,eax
c001b362:	0f 85 d9 00 00 00    	jne    c001b441 <sysCallOpen(regs*)+0x200>
c001b368:	83 ec 08             	sub    esp,0x8
c001b36b:	68 00 a5 02 c0       	push   0xc002a500
c001b370:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b373:	e8 81 fe ff ff       	call   c001b1f9 <string_ends_with(char const*, char const*)>
c001b378:	83 c4 10             	add    esp,0x10
c001b37b:	85 c0                	test   eax,eax
c001b37d:	0f 85 be 00 00 00    	jne    c001b441 <sysCallOpen(regs*)+0x200>
c001b383:	83 ec 08             	sub    esp,0x8
c001b386:	68 fc a4 02 c0       	push   0xc002a4fc
c001b38b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b38e:	e8 e8 53 fe ff       	call   c000077b <strcmp>
c001b393:	83 c4 10             	add    esp,0x10
c001b396:	85 c0                	test   eax,eax
c001b398:	0f 84 a3 00 00 00    	je     c001b441 <sysCallOpen(regs*)+0x200>
c001b39e:	83 ec 08             	sub    esp,0x8
c001b3a1:	68 fb a4 02 c0       	push   0xc002a4fb
c001b3a6:	56                   	push   esi
c001b3a7:	e8 4d fe ff ff       	call   c001b1f9 <string_ends_with(char const*, char const*)>
c001b3ac:	83 c4 10             	add    esp,0x10
c001b3af:	85 c0                	test   eax,eax
c001b3b1:	0f 85 8a 00 00 00    	jne    c001b441 <sysCallOpen(regs*)+0x200>
c001b3b7:	83 ec 0c             	sub    esp,0xc
c001b3ba:	68 14 01 00 00       	push   0x114
c001b3bf:	e8 10 41 ff ff       	call   c000f4d4 <malloc>
c001b3c4:	83 c4 0c             	add    esp,0xc
c001b3c7:	89 c6                	mov    esi,eax
c001b3c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3d4:	56                   	push   esi
c001b3d5:	e8 26 78 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001b3da:	83 c4 10             	add    esp,0x10
c001b3dd:	85 f6                	test   esi,esi
c001b3df:	0f 84 29 ff ff ff    	je     c001b30e <sysCallOpen(regs*)+0xcd>
c001b3e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b3e8:	0f b6 c2             	movzx  eax,dl
c001b3eb:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b3ee:	89 d0                	mov    eax,edx
c001b3f0:	83 e0 01             	and    eax,0x1
c001b3f3:	f6 c2 02             	test   dl,0x2
c001b3f6:	74 03                	je     c001b3fb <sysCallOpen(regs*)+0x1ba>
c001b3f8:	83 c8 02             	or     eax,0x2
c001b3fb:	f6 c2 04             	test   dl,0x4
c001b3fe:	74 03                	je     c001b403 <sysCallOpen(regs*)+0x1c2>
c001b400:	83 c8 04             	or     eax,0x4
c001b403:	f6 c2 08             	test   dl,0x8
c001b406:	74 03                	je     c001b40b <sysCallOpen(regs*)+0x1ca>
c001b408:	83 c8 0a             	or     eax,0xa
c001b40b:	83 e2 10             	and    edx,0x10
c001b40e:	74 03                	je     c001b413 <sysCallOpen(regs*)+0x1d2>
c001b410:	83 c8 12             	or     eax,0x12
c001b413:	83 ec 08             	sub    esp,0x8
c001b416:	50                   	push   eax
c001b417:	56                   	push   esi
c001b418:	e8 47 78 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001b41d:	83 c4 10             	add    esp,0x10
c001b420:	85 c0                	test   eax,eax
c001b422:	0f 85 e6 fe ff ff    	jne    c001b30e <sysCallOpen(regs*)+0xcd>
c001b428:	83 ec 0c             	sub    esp,0xc
c001b42b:	56                   	push   esi
c001b42c:	e8 65 5e ff ff       	call   c0011296 <UnixFile::getFileDescriptor()>
c001b431:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b434:	89 02                	mov    DWORD PTR [edx],eax
c001b436:	c1 f8 1f             	sar    eax,0x1f
c001b439:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b43c:	e9 bd fe ff ff       	jmp    c001b2fe <sysCallOpen(regs*)+0xbd>
c001b441:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b444:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b44a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b451:	e9 ab fe ff ff       	jmp    c001b301 <sysCallOpen(regs*)+0xc0>

c001b456 <setupSystemCalls()>:
c001b456:	c7 05 e0 d3 02 c0 0c a6 01 c0 	mov    DWORD PTR ds:0xc002d3e0,0xc001a60c
c001b460:	c7 05 e4 d3 02 c0 e0 a3 01 c0 	mov    DWORD PTR ds:0xc002d3e4,0xc001a3e0
c001b46a:	c7 05 e8 d3 02 c0 33 a5 01 c0 	mov    DWORD PTR ds:0xc002d3e8,0xc001a533
c001b474:	c7 05 ec d3 02 c0 a4 a5 01 c0 	mov    DWORD PTR ds:0xc002d3ec,0xc001a5a4
c001b47e:	c7 05 f0 d3 02 c0 cb a4 01 c0 	mov    DWORD PTR ds:0xc002d3f0,0xc001a4cb
c001b488:	c7 05 f4 d3 02 c0 17 a4 01 c0 	mov    DWORD PTR ds:0xc002d3f4,0xc001a417
c001b492:	c7 05 f8 d3 02 c0 f8 a3 01 c0 	mov    DWORD PTR ds:0xc002d3f8,0xc001a3f8
c001b49c:	c7 05 fc d3 02 c0 88 a5 01 c0 	mov    DWORD PTR ds:0xc002d3fc,0xc001a588
c001b4a6:	c7 05 04 d4 02 c0 1e ab 01 c0 	mov    DWORD PTR ds:0xc002d404,0xc001ab1e
c001b4b0:	c7 05 00 d4 02 c0 41 b2 01 c0 	mov    DWORD PTR ds:0xc002d400,0xc001b241
c001b4ba:	c7 05 08 d4 02 c0 a6 ab 01 c0 	mov    DWORD PTR ds:0xc002d408,0xc001aba6
c001b4c4:	c7 05 0c d4 02 c0 0d a8 01 c0 	mov    DWORD PTR ds:0xc002d40c,0xc001a80d
c001b4ce:	c7 05 10 d4 02 c0 47 a6 01 c0 	mov    DWORD PTR ds:0xc002d410,0xc001a647
c001b4d8:	c7 05 14 d4 02 c0 4c a6 01 c0 	mov    DWORD PTR ds:0xc002d414,0xc001a64c
c001b4e2:	c7 05 18 d4 02 c0 81 ac 01 c0 	mov    DWORD PTR ds:0xc002d418,0xc001ac81
c001b4ec:	c7 05 1c d4 02 c0 1b ac 01 c0 	mov    DWORD PTR ds:0xc002d41c,0xc001ac1b
c001b4f6:	c7 05 20 d4 02 c0 f5 a8 01 c0 	mov    DWORD PTR ds:0xc002d420,0xc001a8f5
c001b500:	c7 05 24 d4 02 c0 5e a9 01 c0 	mov    DWORD PTR ds:0xc002d424,0xc001a95e
c001b50a:	c7 05 28 d4 02 c0 db a9 01 c0 	mov    DWORD PTR ds:0xc002d428,0xc001a9db
c001b514:	c7 05 2c d4 02 c0 51 a6 01 c0 	mov    DWORD PTR ds:0xc002d42c,0xc001a651
c001b51e:	c7 05 30 d4 02 c0 f1 ac 01 c0 	mov    DWORD PTR ds:0xc002d430,0xc001acf1
c001b528:	c7 05 34 d4 02 c0 0b ad 01 c0 	mov    DWORD PTR ds:0xc002d434,0xc001ad0b
c001b532:	c7 05 38 d4 02 c0 0b ad 01 c0 	mov    DWORD PTR ds:0xc002d438,0xc001ad0b
c001b53c:	c7 05 3c d4 02 c0 4c ad 01 c0 	mov    DWORD PTR ds:0xc002d43c,0xc001ad4c
c001b546:	c7 05 40 d4 02 c0 b0 ad 01 c0 	mov    DWORD PTR ds:0xc002d440,0xc001adb0
c001b550:	c7 05 44 d4 02 c0 5b a6 01 c0 	mov    DWORD PTR ds:0xc002d444,0xc001a65b
c001b55a:	c7 05 48 d4 02 c0 14 ae 01 c0 	mov    DWORD PTR ds:0xc002d448,0xc001ae14
c001b564:	c7 05 4c d4 02 c0 ca a7 01 c0 	mov    DWORD PTR ds:0xc002d44c,0xc001a7ca
c001b56e:	c7 05 50 d4 02 c0 60 ae 01 c0 	mov    DWORD PTR ds:0xc002d450,0xc001ae60
c001b578:	c7 05 54 d4 02 c0 9b a8 01 c0 	mov    DWORD PTR ds:0xc002d454,0xc001a89b
c001b582:	c7 05 58 d4 02 c0 e3 ae 01 c0 	mov    DWORD PTR ds:0xc002d458,0xc001aee3
c001b58c:	c7 05 5c d4 02 c0 5e aa 01 c0 	mov    DWORD PTR ds:0xc002d45c,0xc001aa5e
c001b596:	c7 05 60 d4 02 c0 0a af 01 c0 	mov    DWORD PTR ds:0xc002d460,0xc001af0a
c001b5a0:	c7 05 64 d4 02 c0 62 af 01 c0 	mov    DWORD PTR ds:0xc002d464,0xc001af62
c001b5aa:	c7 05 68 d4 02 c0 0f b0 01 c0 	mov    DWORD PTR ds:0xc002d468,0xc001b00f
c001b5b4:	c7 05 6c d4 02 c0 6b a6 01 c0 	mov    DWORD PTR ds:0xc002d46c,0xc001a66b
c001b5be:	c7 05 70 d4 02 c0 d5 a6 01 c0 	mov    DWORD PTR ds:0xc002d470,0xc001a6d5
c001b5c8:	c7 05 74 d4 02 c0 1b a7 01 c0 	mov    DWORD PTR ds:0xc002d474,0xc001a71b
c001b5d2:	c7 05 78 d4 02 c0 2e b1 01 c0 	mov    DWORD PTR ds:0xc002d478,0xc001b12e
c001b5dc:	c7 05 7c d4 02 c0 26 ad 01 c0 	mov    DWORD PTR ds:0xc002d47c,0xc001ad26
c001b5e6:	c7 05 80 d4 02 c0 6c a7 01 c0 	mov    DWORD PTR ds:0xc002d480,0xc001a76c
c001b5f0:	c7 05 84 d4 02 c0 a0 b1 01 c0 	mov    DWORD PTR ds:0xc002d484,0xc001b1a0
c001b5fa:	c7 05 88 d4 02 c0 e5 b1 01 c0 	mov    DWORD PTR ds:0xc002d488,0xc001b1e5
c001b604:	c7 05 8c d4 02 c0 23 a4 01 c0 	mov    DWORD PTR ds:0xc002d48c,0xc001a423
c001b60e:	c3                   	ret    

c001b60f <systemCall(regs*, void*)>:
c001b60f:	53                   	push   ebx
c001b610:	83 ec 08             	sub    esp,0x8
c001b613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b617:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b61a:	83 f8 7f             	cmp    eax,0x7f
c001b61d:	77 16                	ja     c001b635 <systemCall(regs*, void*)+0x26>
c001b61f:	8b 14 85 e0 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c20]
c001b626:	85 d2                	test   edx,edx
c001b628:	74 0b                	je     c001b635 <systemCall(regs*, void*)+0x26>
c001b62a:	83 ec 0c             	sub    esp,0xc
c001b62d:	53                   	push   ebx
c001b62e:	ff d2                	call   edx
c001b630:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b633:	eb 0d                	jmp    c001b642 <systemCall(regs*, void*)+0x33>
c001b635:	52                   	push   edx
c001b636:	52                   	push   edx
c001b637:	50                   	push   eax
c001b638:	68 05 a5 02 c0       	push   0xc002a505
c001b63d:	e8 8f 70 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001b642:	83 c4 10             	add    esp,0x10
c001b645:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b64a:	31 d2                	xor    edx,edx
c001b64c:	83 c4 08             	add    esp,0x8
c001b64f:	5b                   	pop    ebx
c001b650:	c3                   	ret    

c001b651 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b651:	55                   	push   ebp
c001b652:	89 e5                	mov    ebp,esp
c001b654:	57                   	push   edi
c001b655:	56                   	push   esi
c001b656:	53                   	push   ebx
c001b657:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b65d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b660:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b663:	85 c0                	test   eax,eax
c001b665:	0f 95 c1             	setne  cl
c001b668:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b66c:	0f 94 c2             	sete   dl
c001b66f:	84 d1                	test   cl,dl
c001b671:	74 26                	je     c001b699 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b673:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b67a:	74 1d                	je     c001b699 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b67c:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b67f:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b685:	89 d6                	mov    esi,edx
c001b687:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b68d:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b693:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b696:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b699:	83 ec 0c             	sub    esp,0xc
c001b69c:	05 ff 0f 00 00       	add    eax,0xfff
c001b6a1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b6a4:	6a 01                	push   0x1
c001b6a6:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b6ac:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b6b2:	e8 2a 60 ff ff       	call   c00116e1 <Virt::allocateKernelVirtualPages(int)>
c001b6b7:	83 c4 10             	add    esp,0x10
c001b6ba:	89 c6                	mov    esi,eax
c001b6bc:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b6c2:	0f 86 21 01 00 00    	jbe    c001b7e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b6c8:	c1 eb 0c             	shr    ebx,0xc
c001b6cb:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b6d5:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b6db:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b6de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b6e1:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b6e7:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b6ea:	29 d8                	sub    eax,ebx
c001b6ec:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b6f2:	0f 83 f4 00 00 00    	jae    c001b7ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b6f8:	83 ec 0c             	sub    esp,0xc
c001b6fb:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b701:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b704:	3d 00 10 00 00       	cmp    eax,0x1000
c001b709:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b70b:	52                   	push   edx
c001b70c:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b712:	52                   	push   edx
c001b713:	76 05                	jbe    c001b71a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b715:	b8 00 10 00 00       	mov    eax,0x1000
c001b71a:	31 d2                	xor    edx,edx
c001b71c:	52                   	push   edx
c001b71d:	50                   	push   eax
c001b71e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b721:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b724:	83 c4 20             	add    esp,0x20
c001b727:	85 c0                	test   eax,eax
c001b729:	74 1f                	je     c001b74a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b72b:	51                   	push   ecx
c001b72c:	51                   	push   ecx
c001b72d:	50                   	push   eax
c001b72e:	68 19 a5 02 c0       	push   0xc002a519
c001b733:	e8 99 6f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001b738:	89 34 24             	mov    DWORD PTR [esp],esi
c001b73b:	e8 05 63 ff ff       	call   c0011a45 <Virt::freeKernelVirtualPages(unsigned long)>
c001b740:	83 c4 10             	add    esp,0x10
c001b743:	31 c0                	xor    eax,eax
c001b745:	e9 7c 01 00 00       	jmp    c001b8c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b74a:	e8 2b 15 00 00       	call   c001cc7a <lockScheduler()>
c001b74f:	e8 2a 43 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001b754:	6a 07                	push   0x7
c001b756:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b75c:	56                   	push   esi
c001b75d:	50                   	push   eax
c001b75e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b764:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b767:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b76d:	e8 3a 66 ff ff       	call   c0011dac <VAS::mapPage(unsigned long, unsigned long, int)>
c001b772:	83 c4 0c             	add    esp,0xc
c001b775:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b77b:	6a 00                	push   0x0
c001b77d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b783:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b786:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b78c:	e8 85 64 ff ff       	call   c0011c16 <VAS::mapOtherVASIn(bool, VAS*)>
c001b791:	58                   	pop    eax
c001b792:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b798:	5a                   	pop    edx
c001b799:	68 07 04 00 00       	push   0x407
c001b79e:	53                   	push   ebx
c001b79f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b7a5:	50                   	push   eax
c001b7a6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b7ac:	6a 00                	push   0x0
c001b7ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7b6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b7bc:	e8 a5 69 ff ff       	call   c0012166 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b7c1:	83 c4 1c             	add    esp,0x1c
c001b7c4:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b7ca:	68 00 10 00 00       	push   0x1000
c001b7cf:	50                   	push   eax
c001b7d0:	56                   	push   esi
c001b7d1:	e8 7f 4e fe ff       	call   c0000655 <memcpy>
c001b7d6:	e8 a1 14 00 00       	call   c001cc7c <unlockScheduler()>
c001b7db:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b7e1:	83 c4 10             	add    esp,0x10
c001b7e4:	e9 f5 fe ff ff       	jmp    c001b6de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b7e9:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b7ec:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b7f6:	0f 86 bc 00 00 00    	jbe    c001b8b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b7fc:	e8 79 14 00 00       	call   c001cc7a <lockScheduler()>
c001b801:	51                   	push   ecx
c001b802:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b808:	6a 00                	push   0x0
c001b80a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b80f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b812:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b818:	e8 f9 63 ff ff       	call   c0011c16 <VAS::mapOtherVASIn(bool, VAS*)>
c001b81d:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b823:	83 c4 10             	add    esp,0x10
c001b826:	c1 e8 0c             	shr    eax,0xc
c001b829:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b833:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b839:	e8 40 42 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001b83e:	6a 07                	push   0x7
c001b840:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b846:	56                   	push   esi
c001b847:	50                   	push   eax
c001b848:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b84e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b851:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b857:	e8 50 65 ff ff       	call   c0011dac <VAS::mapPage(unsigned long, unsigned long, int)>
c001b85c:	58                   	pop    eax
c001b85d:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b863:	5a                   	pop    edx
c001b864:	68 07 04 00 00       	push   0x407
c001b869:	53                   	push   ebx
c001b86a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b870:	50                   	push   eax
c001b871:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b877:	6a 00                	push   0x0
c001b879:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b87e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b881:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b887:	e8 da 68 ff ff       	call   c0012166 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b88c:	83 c4 1c             	add    esp,0x1c
c001b88f:	68 00 10 00 00       	push   0x1000
c001b894:	6a 00                	push   0x0
c001b896:	56                   	push   esi
c001b897:	e8 ef 4d fe ff       	call   c000068b <memset>
c001b89c:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b8a2:	83 c4 10             	add    esp,0x10
c001b8a5:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b8ab:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b8b1:	77 86                	ja     c001b839 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b8b3:	e8 c4 13 00 00       	call   c001cc7c <unlockScheduler()>
c001b8b8:	83 ec 0c             	sub    esp,0xc
c001b8bb:	56                   	push   esi
c001b8bc:	e8 84 61 ff ff       	call   c0011a45 <Virt::freeKernelVirtualPages(unsigned long)>
c001b8c1:	83 c4 10             	add    esp,0x10
c001b8c4:	b0 01                	mov    al,0x1
c001b8c6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b8c9:	5b                   	pop    ebx
c001b8ca:	5e                   	pop    esi
c001b8cb:	5f                   	pop    edi
c001b8cc:	5d                   	pop    ebp
c001b8cd:	c3                   	ret    

c001b8ce <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b8ce:	55                   	push   ebp
c001b8cf:	57                   	push   edi
c001b8d0:	56                   	push   esi
c001b8d1:	53                   	push   ebx
c001b8d2:	83 ec 48             	sub    esp,0x48
c001b8d5:	68 14 01 00 00       	push   0x114
c001b8da:	e8 f5 3b ff ff       	call   c000f4d4 <malloc>
c001b8df:	83 c4 0c             	add    esp,0xc
c001b8e2:	89 c6                	mov    esi,eax
c001b8e4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b8e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b8ec:	50                   	push   eax
c001b8ed:	e8 0e 73 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001b8f2:	58                   	pop    eax
c001b8f3:	5a                   	pop    edx
c001b8f4:	6a 01                	push   0x1
c001b8f6:	56                   	push   esi
c001b8f7:	e8 68 73 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001b8fc:	83 c4 10             	add    esp,0x10
c001b8ff:	85 c0                	test   eax,eax
c001b901:	0f 85 47 01 00 00    	jne    c001ba4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b907:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b90f:	83 ec 0c             	sub    esp,0xc
c001b912:	6a 34                	push   0x34
c001b914:	e8 bb 3b ff ff       	call   c000f4d4 <malloc>
c001b919:	89 c3                	mov    ebx,eax
c001b91b:	58                   	pop    eax
c001b91c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b91e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b922:	57                   	push   edi
c001b923:	53                   	push   ebx
c001b924:	6a 00                	push   0x0
c001b926:	6a 34                	push   0x34
c001b928:	56                   	push   esi
c001b929:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b92c:	83 c4 20             	add    esp,0x20
c001b92f:	85 c0                	test   eax,eax
c001b931:	0f 85 17 01 00 00    	jne    c001ba4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b937:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001b93d:	0f 85 0b 01 00 00    	jne    c001ba4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b943:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b946:	85 c0                	test   eax,eax
c001b948:	0f 84 00 01 00 00    	je     c001ba4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b94e:	31 d2                	xor    edx,edx
c001b950:	55                   	push   ebp
c001b951:	52                   	push   edx
c001b952:	50                   	push   eax
c001b953:	56                   	push   esi
c001b954:	e8 c9 73 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001b959:	83 c4 10             	add    esp,0x10
c001b95c:	85 c0                	test   eax,eax
c001b95e:	0f 85 ea 00 00 00    	jne    c001ba4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001b96a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b96e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b972:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b976:	0f af c2             	imul   eax,edx
c001b979:	50                   	push   eax
c001b97a:	e8 55 3b ff ff       	call   c000f4d4 <malloc>
c001b97f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b981:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b985:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b988:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b98c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b990:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b994:	0f af c2             	imul   eax,edx
c001b997:	99                   	cdq    
c001b998:	52                   	push   edx
c001b999:	50                   	push   eax
c001b99a:	56                   	push   esi
c001b99b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b99e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b9a1:	83 c4 20             	add    esp,0x20
c001b9a4:	85 c0                	test   eax,eax
c001b9a6:	0f 84 a2 00 00 00    	je     c001ba4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9ac:	31 d2                	xor    edx,edx
c001b9ae:	51                   	push   ecx
c001b9af:	52                   	push   edx
c001b9b0:	50                   	push   eax
c001b9b1:	56                   	push   esi
c001b9b2:	e8 6b 73 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001b9b7:	83 c4 10             	add    esp,0x10
c001b9ba:	85 c0                	test   eax,eax
c001b9bc:	0f 85 8c 00 00 00    	jne    c001ba4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9c2:	83 ec 0c             	sub    esp,0xc
c001b9c5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b9c9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b9cd:	31 ed                	xor    ebp,ebp
c001b9cf:	0f af c2             	imul   eax,edx
c001b9d2:	50                   	push   eax
c001b9d3:	e8 fc 3a ff ff       	call   c000f4d4 <malloc>
c001b9d8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b9da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b9de:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9e5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b9e9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b9ed:	0f af c2             	imul   eax,edx
c001b9f0:	99                   	cdq    
c001b9f1:	52                   	push   edx
c001b9f2:	50                   	push   eax
c001b9f3:	56                   	push   esi
c001b9f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b9f7:	83 c4 20             	add    esp,0x20
c001b9fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ba02:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ba06:	0f 86 80 00 00 00    	jbe    c001ba8c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ba0c:	0f b7 fd             	movzx  edi,bp
c001ba0f:	c1 e7 05             	shl    edi,0x5
c001ba12:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001ba16:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ba19:	75 6b                	jne    c001ba86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ba1b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ba1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ba22:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ba25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ba29:	52                   	push   edx
c001ba2a:	31 d2                	xor    edx,edx
c001ba2c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ba2f:	52                   	push   edx
c001ba30:	50                   	push   eax
c001ba31:	56                   	push   esi
c001ba32:	e8 eb 72 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001ba37:	83 c4 10             	add    esp,0x10
c001ba3a:	85 c0                	test   eax,eax
c001ba3c:	74 17                	je     c001ba55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	68 44 a5 02 c0       	push   0xc002a544
c001ba46:	e8 86 6c ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001ba4b:	83 c4 10             	add    esp,0x10
c001ba4e:	31 c0                	xor    eax,eax
c001ba50:	e9 87 00 00 00       	jmp    c001badc <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ba55:	83 ec 0c             	sub    esp,0xc
c001ba58:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ba5b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ba5e:	50                   	push   eax
c001ba5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ba63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba67:	56                   	push   esi
c001ba68:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ba6c:	e8 e0 fb ff ff       	call   c001b651 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ba71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ba75:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ba79:	83 c4 20             	add    esp,0x20
c001ba7c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ba80:	73 04                	jae    c001ba86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ba82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ba86:	45                   	inc    ebp
c001ba87:	e9 76 ff ff ff       	jmp    c001ba02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ba8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ba90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ba94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba98:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ba9e:	83 ec 0c             	sub    esp,0xc
c001baa1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001baa7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001baac:	05 00 10 00 00       	add    eax,0x1000
c001bab1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bab8:	e8 27 3a ff ff       	call   c000f4e4 <free>
c001babd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bac0:	e8 1f 3a ff ff       	call   c000f4e4 <free>
c001bac5:	58                   	pop    eax
c001bac6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001baca:	e8 15 3a ff ff       	call   c000f4e4 <free>
c001bacf:	89 34 24             	mov    DWORD PTR [esp],esi
c001bad2:	e8 eb 71 ff ff       	call   c0012cc2 <File::close()>
c001bad7:	83 c4 10             	add    esp,0x10
c001bada:	b0 01                	mov    al,0x1
c001badc:	83 c4 3c             	add    esp,0x3c
c001badf:	5b                   	pop    ebx
c001bae0:	5e                   	pop    esi
c001bae1:	5f                   	pop    edi
c001bae2:	5d                   	pop    ebp
c001bae3:	c3                   	ret    

c001bae4 <Thr::runtimeReferenceHelper()>:
c001bae4:	83 ec 18             	sub    esp,0x18
c001bae7:	68 4c a5 02 c0       	push   0xc002a54c
c001baec:	e8 e0 6b ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001baf1:	fa                   	cli    
c001baf2:	83 c4 10             	add    esp,0x10
c001baf5:	eb fe                	jmp    c001baf5 <Thr::runtimeReferenceHelper()+0x11>

c001baf7 <Thr::getAddressOfKernelSymbol(char const*)>:
c001baf7:	57                   	push   edi
c001baf8:	56                   	push   esi
c001baf9:	53                   	push   ebx
c001bafa:	31 db                	xor    ebx,ebx
c001bafc:	39 1d 80 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd80,ebx
c001bb02:	7e 3c                	jle    c001bb40 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bb04:	8b 34 9d 00 dd 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2300]
c001bb0b:	31 ff                	xor    edi,edi
c001bb0d:	39 3c 9d 00 dc 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2400],edi
c001bb14:	7e 27                	jle    c001bb3d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bb16:	50                   	push   eax
c001bb17:	50                   	push   eax
c001bb18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb1c:	8b 06                	mov    eax,DWORD PTR [esi]
c001bb1e:	03 04 9d 80 dc 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2380]
c001bb25:	50                   	push   eax
c001bb26:	e8 50 4c fe ff       	call   c000077b <strcmp>
c001bb2b:	83 c4 10             	add    esp,0x10
c001bb2e:	85 c0                	test   eax,eax
c001bb30:	75 05                	jne    c001bb37 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bb32:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bb35:	eb 0b                	jmp    c001bb42 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bb37:	83 c6 10             	add    esi,0x10
c001bb3a:	47                   	inc    edi
c001bb3b:	eb d0                	jmp    c001bb0d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bb3d:	43                   	inc    ebx
c001bb3e:	eb bc                	jmp    c001bafc <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bb40:	31 c0                	xor    eax,eax
c001bb42:	5b                   	pop    ebx
c001bb43:	5e                   	pop    esi
c001bb44:	5f                   	pop    edi
c001bb45:	c3                   	ret    

c001bb46 <Thr::loadKernelSymbolTable(char const*)>:
c001bb46:	55                   	push   ebp
c001bb47:	57                   	push   edi
c001bb48:	56                   	push   esi
c001bb49:	53                   	push   ebx
c001bb4a:	83 ec 68             	sub    esp,0x68
c001bb4d:	8b 35 d4 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002ddd4
c001bb53:	68 14 01 00 00       	push   0x114
c001bb58:	e8 77 39 ff ff       	call   c000f4d4 <malloc>
c001bb5d:	83 c4 0c             	add    esp,0xc
c001bb60:	89 c3                	mov    ebx,eax
c001bb62:	56                   	push   esi
c001bb63:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bb67:	50                   	push   eax
c001bb68:	e8 93 70 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001bb6d:	5e                   	pop    esi
c001bb6e:	5f                   	pop    edi
c001bb6f:	6a 01                	push   0x1
c001bb71:	53                   	push   ebx
c001bb72:	e8 ed 70 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001bb77:	83 c4 10             	add    esp,0x10
c001bb7a:	31 d2                	xor    edx,edx
c001bb7c:	85 c0                	test   eax,eax
c001bb7e:	0f 85 74 02 00 00    	jne    c001bdf8 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bb84:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bb8c:	83 ec 0c             	sub    esp,0xc
c001bb8f:	6a 34                	push   0x34
c001bb91:	e8 3e 39 ff ff       	call   c000f4d4 <malloc>
c001bb96:	59                   	pop    ecx
c001bb97:	89 c7                	mov    edi,eax
c001bb99:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bb9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb9f:	56                   	push   esi
c001bba0:	57                   	push   edi
c001bba1:	6a 00                	push   0x0
c001bba3:	6a 34                	push   0x34
c001bba5:	53                   	push   ebx
c001bba6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bba9:	83 c4 20             	add    esp,0x20
c001bbac:	85 c0                	test   eax,eax
c001bbae:	74 17                	je     c001bbc7 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bbb0:	83 ec 0c             	sub    esp,0xc
c001bbb3:	68 6e a5 02 c0       	push   0xc002a56e
c001bbb8:	e8 2e dc ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001bbbd:	83 c4 10             	add    esp,0x10
c001bbc0:	31 d2                	xor    edx,edx
c001bbc2:	e9 31 02 00 00       	jmp    c001bdf8 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bbc7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bbcd:	75 e1                	jne    c001bbb0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bbcf:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bbd2:	85 c0                	test   eax,eax
c001bbd4:	74 da                	je     c001bbb0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bbd6:	52                   	push   edx
c001bbd7:	31 d2                	xor    edx,edx
c001bbd9:	52                   	push   edx
c001bbda:	50                   	push   eax
c001bbdb:	53                   	push   ebx
c001bbdc:	e8 41 71 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001bbe1:	83 c4 10             	add    esp,0x10
c001bbe4:	85 c0                	test   eax,eax
c001bbe6:	75 c8                	jne    c001bbb0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bbe8:	83 ec 0c             	sub    esp,0xc
c001bbeb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bbef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bbf3:	31 ed                	xor    ebp,ebp
c001bbf5:	0f af c2             	imul   eax,edx
c001bbf8:	50                   	push   eax
c001bbf9:	e8 d6 38 ff ff       	call   c000f4d4 <malloc>
c001bbfe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bc00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc04:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc0b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bc0f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bc13:	0f af c2             	imul   eax,edx
c001bc16:	99                   	cdq    
c001bc17:	52                   	push   edx
c001bc18:	50                   	push   eax
c001bc19:	53                   	push   ebx
c001bc1a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bc1d:	83 c4 20             	add    esp,0x20
c001bc20:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bc28:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bc30:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bc38:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc40:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bc44:	0f 86 aa 00 00 00    	jbe    c001bcf4 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bc4a:	0f b7 f5             	movzx  esi,bp
c001bc4d:	6b f6 28             	imul   esi,esi,0x28
c001bc50:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bc54:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bc57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc5b:	50                   	push   eax
c001bc5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bc60:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bc64:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc66:	6b c0 28             	imul   eax,eax,0x28
c001bc69:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bc6d:	89 d0                	mov    eax,edx
c001bc6f:	31 d2                	xor    edx,edx
c001bc71:	52                   	push   edx
c001bc72:	50                   	push   eax
c001bc73:	53                   	push   ebx
c001bc74:	e8 a9 70 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001bc79:	83 c4 0c             	add    esp,0xc
c001bc7c:	6a 20                	push   0x20
c001bc7e:	6a 00                	push   0x0
c001bc80:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bc84:	52                   	push   edx
c001bc85:	e8 01 4a fe ff       	call   c000068b <memset>
c001bc8a:	58                   	pop    eax
c001bc8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc8d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bc91:	51                   	push   ecx
c001bc92:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bc96:	52                   	push   edx
c001bc97:	6a 00                	push   0x0
c001bc99:	6a 1f                	push   0x1f
c001bc9b:	53                   	push   ebx
c001bc9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bc9f:	83 c4 18             	add    esp,0x18
c001bca2:	68 85 a5 02 c0       	push   0xc002a585
c001bca7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bcab:	52                   	push   edx
c001bcac:	e8 ca 4a fe ff       	call   c000077b <strcmp>
c001bcb1:	83 c4 10             	add    esp,0x10
c001bcb4:	85 c0                	test   eax,eax
c001bcb6:	75 0f                	jne    c001bcc7 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bcb8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bcbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bcbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcc7:	50                   	push   eax
c001bcc8:	50                   	push   eax
c001bcc9:	68 8d a5 02 c0       	push   0xc002a58d
c001bcce:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bcd2:	50                   	push   eax
c001bcd3:	e8 a3 4a fe ff       	call   c000077b <strcmp>
c001bcd8:	83 c4 10             	add    esp,0x10
c001bcdb:	85 c0                	test   eax,eax
c001bcdd:	75 0f                	jne    c001bcee <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001bcdf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bce2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bce6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bcee:	45                   	inc    ebp
c001bcef:	e9 4c ff ff ff       	jmp    c001bc40 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001bcf4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bcf9:	75 10                	jne    c001bd0b <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001bcfb:	83 ec 0c             	sub    esp,0xc
c001bcfe:	68 95 a5 02 c0       	push   0xc002a595
c001bd03:	e8 e3 da ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001bd08:	83 c4 10             	add    esp,0x10
c001bd0b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001bd10:	75 10                	jne    c001bd22 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001bd12:	83 ec 0c             	sub    esp,0xc
c001bd15:	68 95 a5 02 c0       	push   0xc002a595
c001bd1a:	e8 cc da ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001bd1f:	83 c4 10             	add    esp,0x10
c001bd22:	31 d2                	xor    edx,edx
c001bd24:	50                   	push   eax
c001bd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd29:	52                   	push   edx
c001bd2a:	50                   	push   eax
c001bd2b:	53                   	push   ebx
c001bd2c:	e8 f1 6f ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001bd31:	5a                   	pop    edx
c001bd32:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bd36:	e8 99 37 ff ff       	call   c000f4d4 <malloc>
c001bd3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bd43:	31 c9                	xor    ecx,ecx
c001bd45:	5e                   	pop    esi
c001bd46:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd48:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001bd4c:	55                   	push   ebp
c001bd4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd51:	51                   	push   ecx
c001bd52:	52                   	push   edx
c001bd53:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001bd57:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001bd5b:	53                   	push   ebx
c001bd5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd5f:	83 c4 14             	add    esp,0x14
c001bd62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bd66:	e8 69 37 ff ff       	call   c000f4d4 <malloc>
c001bd6b:	89 c6                	mov    esi,eax
c001bd6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bd72:	56                   	push   esi
c001bd73:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bd77:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bd7b:	51                   	push   ecx
c001bd7c:	52                   	push   edx
c001bd7d:	53                   	push   ebx
c001bd7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd85:	8b 15 80 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd80
c001bd8b:	83 c4 1c             	add    esp,0x1c
c001bd8e:	c1 e8 04             	shr    eax,0x4
c001bd91:	89 04 95 00 dc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2400],eax
c001bd98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd9c:	31 d2                	xor    edx,edx
c001bd9e:	52                   	push   edx
c001bd9f:	50                   	push   eax
c001bda0:	53                   	push   ebx
c001bda1:	e8 7c 6f ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001bda6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bda8:	31 d2                	xor    edx,edx
c001bdaa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bdad:	56                   	push   esi
c001bdae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bdb2:	52                   	push   edx
c001bdb3:	50                   	push   eax
c001bdb4:	53                   	push   ebx
c001bdb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bdb8:	83 c4 14             	add    esp,0x14
c001bdbb:	53                   	push   ebx
c001bdbc:	e8 01 6f ff ff       	call   c0012cc2 <File::close()>
c001bdc1:	5d                   	pop    ebp
c001bdc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bdc6:	e8 19 37 ff ff       	call   c000f4e4 <free>
c001bdcb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bdce:	e8 11 37 ff ff       	call   c000f4e4 <free>
c001bdd3:	a1 80 dd 02 c0       	mov    eax,ds:0xc002dd80
c001bdd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bddc:	8d 50 01             	lea    edx,[eax+0x1]
c001bddf:	89 0c 85 00 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2300],ecx
c001bde6:	89 15 80 dd 02 c0    	mov    DWORD PTR ds:0xc002dd80,edx
c001bdec:	89 34 85 80 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2380],esi
c001bdf3:	83 c4 10             	add    esp,0x10
c001bdf6:	b2 01                	mov    dl,0x1
c001bdf8:	83 c4 5c             	add    esp,0x5c
c001bdfb:	88 d0                	mov    al,dl
c001bdfd:	5b                   	pop    ebx
c001bdfe:	5e                   	pop    esi
c001bdff:	5f                   	pop    edi
c001be00:	5d                   	pop    ebp
c001be01:	c3                   	ret    

c001be02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001be02:	55                   	push   ebp
c001be03:	57                   	push   edi
c001be04:	56                   	push   esi
c001be05:	53                   	push   ebx
c001be06:	81 ec 68 03 00 00    	sub    esp,0x368
c001be0c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001be13:	8b 1d d4 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddd4
c001be19:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001be1d:	68 14 01 00 00       	push   0x114
c001be22:	e8 ad 36 ff ff       	call   c000f4d4 <malloc>
c001be27:	83 c4 0c             	add    esp,0xc
c001be2a:	89 c5                	mov    ebp,eax
c001be2c:	53                   	push   ebx
c001be2d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001be34:	50                   	push   eax
c001be35:	e8 c6 6d ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001be3a:	58                   	pop    eax
c001be3b:	5a                   	pop    edx
c001be3c:	6a 01                	push   0x1
c001be3e:	55                   	push   ebp
c001be3f:	e8 20 6e ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001be44:	83 c4 10             	add    esp,0x10
c001be47:	85 c0                	test   eax,eax
c001be49:	0f 85 f2 06 00 00    	jne    c001c541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be4f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be57:	83 ec 0c             	sub    esp,0xc
c001be5a:	6a 34                	push   0x34
c001be5c:	e8 73 36 ff ff       	call   c000f4d4 <malloc>
c001be61:	89 c7                	mov    edi,eax
c001be63:	58                   	pop    eax
c001be64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001be67:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001be6b:	53                   	push   ebx
c001be6c:	57                   	push   edi
c001be6d:	6a 00                	push   0x0
c001be6f:	6a 34                	push   0x34
c001be71:	55                   	push   ebp
c001be72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be75:	83 c4 20             	add    esp,0x20
c001be78:	85 c0                	test   eax,eax
c001be7a:	0f 85 c1 06 00 00    	jne    c001c541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be80:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001be86:	0f 85 b5 06 00 00    	jne    c001c541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be8c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001be8f:	85 c0                	test   eax,eax
c001be91:	0f 84 aa 06 00 00    	je     c001c541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be97:	31 d2                	xor    edx,edx
c001be99:	56                   	push   esi
c001be9a:	52                   	push   edx
c001be9b:	50                   	push   eax
c001be9c:	55                   	push   ebp
c001be9d:	e8 80 6e ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001bea2:	83 c4 10             	add    esp,0x10
c001bea5:	85 c0                	test   eax,eax
c001bea7:	0f 85 94 06 00 00    	jne    c001c541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bead:	83 ec 0c             	sub    esp,0xc
c001beb0:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001beb3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001beb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001bebb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bebf:	0f af c2             	imul   eax,edx
c001bec2:	50                   	push   eax
c001bec3:	e8 0c 36 ff ff       	call   c000f4d4 <malloc>
c001bec8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001becb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001becf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bed6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001beda:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bede:	0f af c2             	imul   eax,edx
c001bee1:	99                   	cdq    
c001bee2:	52                   	push   edx
c001bee3:	50                   	push   eax
c001bee4:	55                   	push   ebp
c001bee5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bee8:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001beeb:	83 c4 20             	add    esp,0x20
c001beee:	85 c0                	test   eax,eax
c001bef0:	0f 84 4b 06 00 00    	je     c001c541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bef6:	31 d2                	xor    edx,edx
c001bef8:	51                   	push   ecx
c001bef9:	52                   	push   edx
c001befa:	50                   	push   eax
c001befb:	55                   	push   ebp
c001befc:	e8 21 6e ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001bf01:	83 c4 10             	add    esp,0x10
c001bf04:	85 c0                	test   eax,eax
c001bf06:	0f 85 35 06 00 00    	jne    c001c541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf0c:	83 ec 0c             	sub    esp,0xc
c001bf0f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bf13:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bf17:	31 f6                	xor    esi,esi
c001bf19:	0f af c2             	imul   eax,edx
c001bf1c:	50                   	push   eax
c001bf1d:	e8 b2 35 ff ff       	call   c000f4d4 <malloc>
c001bf22:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bf25:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bf29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf30:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bf34:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bf38:	0f af c2             	imul   eax,edx
c001bf3b:	99                   	cdq    
c001bf3c:	52                   	push   edx
c001bf3d:	50                   	push   eax
c001bf3e:	55                   	push   ebp
c001bf3f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf42:	83 c4 20             	add    esp,0x20
c001bf45:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001bf49:	0f 86 8a 00 00 00    	jbe    c001bfd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001bf4f:	0f b7 de             	movzx  ebx,si
c001bf52:	c1 e3 05             	shl    ebx,0x5
c001bf55:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001bf59:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001bf5c:	75 75                	jne    c001bfd3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001bf5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bf61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf65:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bf68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf6c:	52                   	push   edx
c001bf6d:	31 d2                	xor    edx,edx
c001bf6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001bf72:	52                   	push   edx
c001bf73:	50                   	push   eax
c001bf74:	55                   	push   ebp
c001bf75:	e8 a8 6d ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001bf7a:	83 c4 10             	add    esp,0x10
c001bf7d:	85 c0                	test   eax,eax
c001bf7f:	0f 85 bc 05 00 00    	jne    c001c541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf85:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001bf8c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bf8f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001bf93:	31 d2                	xor    edx,edx
c001bf95:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001bf99:	83 ec 0c             	sub    esp,0xc
c001bf9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bfa0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bfa7:	50                   	push   eax
c001bfa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bfac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bfb0:	52                   	push   edx
c001bfb1:	50                   	push   eax
c001bfb2:	55                   	push   ebp
c001bfb3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfb6:	83 c4 1c             	add    esp,0x1c
c001bfb9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bfbc:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001bfbf:	50                   	push   eax
c001bfc0:	6a 00                	push   0x0
c001bfc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfc6:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001bfca:	50                   	push   eax
c001bfcb:	e8 bb 46 fe ff       	call   c000068b <memset>
c001bfd0:	83 c4 10             	add    esp,0x10
c001bfd3:	46                   	inc    esi
c001bfd4:	e9 6c ff ff ff       	jmp    c001bf45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001bfd9:	31 db                	xor    ebx,ebx
c001bfdb:	50                   	push   eax
c001bfdc:	68 00 01 00 00       	push   0x100
c001bfe1:	6a 00                	push   0x0
c001bfe3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bfe7:	50                   	push   eax
c001bfe8:	e8 9e 46 fe ff       	call   c000068b <memset>
c001bfed:	83 c4 0c             	add    esp,0xc
c001bff0:	68 00 01 00 00       	push   0x100
c001bff5:	6a 00                	push   0x0
c001bff7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001bffe:	50                   	push   eax
c001bfff:	e8 87 46 fe ff       	call   c000068b <memset>
c001c004:	83 c4 10             	add    esp,0x10
c001c007:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c00f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c017:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c01f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c027:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c02f:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c033:	0f 86 30 01 00 00    	jbe    c001c169 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c039:	0f b7 f3             	movzx  esi,bx
c001c03c:	6b f6 28             	imul   esi,esi,0x28
c001c03f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001c043:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c046:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c04a:	50                   	push   eax
c001c04b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c04f:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c053:	8b 06                	mov    eax,DWORD PTR [esi]
c001c055:	6b d2 28             	imul   edx,edx,0x28
c001c058:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c05c:	31 d2                	xor    edx,edx
c001c05e:	52                   	push   edx
c001c05f:	50                   	push   eax
c001c060:	55                   	push   ebp
c001c061:	e8 bc 6c ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c066:	83 c4 0c             	add    esp,0xc
c001c069:	6a 20                	push   0x20
c001c06b:	6a 00                	push   0x0
c001c06d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c074:	51                   	push   ecx
c001c075:	e8 11 46 fe ff       	call   c000068b <memset>
c001c07a:	58                   	pop    eax
c001c07b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c07e:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c082:	52                   	push   edx
c001c083:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c08a:	51                   	push   ecx
c001c08b:	6a 00                	push   0x0
c001c08d:	6a 1f                	push   0x1f
c001c08f:	55                   	push   ebp
c001c090:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c093:	83 c4 1c             	add    esp,0x1c
c001c096:	6a 09                	push   0x9
c001c098:	68 af a5 02 c0       	push   0xc002a5af
c001c09d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c0a4:	51                   	push   ecx
c001c0a5:	e8 48 45 fe ff       	call   c00005f2 <memcmp>
c001c0aa:	83 c4 10             	add    esp,0x10
c001c0ad:	85 c0                	test   eax,eax
c001c0af:	75 21                	jne    c001c0d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0b5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c0b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0bd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c0c1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c0c4:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c0cb:	89 c8                	mov    eax,ecx
c001c0cd:	40                   	inc    eax
c001c0ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0d2:	50                   	push   eax
c001c0d3:	6a 09                	push   0x9
c001c0d5:	68 b9 a5 02 c0       	push   0xc002a5b9
c001c0da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c0e1:	50                   	push   eax
c001c0e2:	e8 0b 45 fe ff       	call   c00005f2 <memcmp>
c001c0e7:	83 c4 10             	add    esp,0x10
c001c0ea:	85 c0                	test   eax,eax
c001c0ec:	75 21                	jne    c001c10f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c0ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c0f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0fa:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c0fe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c101:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c108:	89 c8                	mov    eax,ecx
c001c10a:	40                   	inc    eax
c001c10b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c10f:	50                   	push   eax
c001c110:	50                   	push   eax
c001c111:	68 85 a5 02 c0       	push   0xc002a585
c001c116:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c11d:	50                   	push   eax
c001c11e:	e8 58 46 fe ff       	call   c000077b <strcmp>
c001c123:	83 c4 10             	add    esp,0x10
c001c126:	85 c0                	test   eax,eax
c001c128:	75 0f                	jne    c001c139 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c12a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c12d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c131:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c135:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c139:	50                   	push   eax
c001c13a:	50                   	push   eax
c001c13b:	68 8d a5 02 c0       	push   0xc002a58d
c001c140:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c147:	50                   	push   eax
c001c148:	e8 2e 46 fe ff       	call   c000077b <strcmp>
c001c14d:	83 c4 10             	add    esp,0x10
c001c150:	85 c0                	test   eax,eax
c001c152:	75 0f                	jne    c001c163 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c154:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c157:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c15b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c15f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c163:	43                   	inc    ebx
c001c164:	e9 c6 fe ff ff       	jmp    c001c02f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c169:	31 d2                	xor    edx,edx
c001c16b:	50                   	push   eax
c001c16c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c170:	52                   	push   edx
c001c171:	50                   	push   eax
c001c172:	55                   	push   ebp
c001c173:	e8 aa 6b ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c178:	5a                   	pop    edx
c001c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c17d:	e8 52 33 ff ff       	call   c000f4d4 <malloc>
c001c182:	31 d2                	xor    edx,edx
c001c184:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c188:	59                   	pop    ecx
c001c189:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c18c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c190:	53                   	push   ebx
c001c191:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c195:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c199:	52                   	push   edx
c001c19a:	50                   	push   eax
c001c19b:	55                   	push   ebp
c001c19c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c19f:	83 c4 14             	add    esp,0x14
c001c1a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1a6:	e8 29 33 ff ff       	call   c000f4d4 <malloc>
c001c1ab:	31 d2                	xor    edx,edx
c001c1ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c1b1:	83 c4 0c             	add    esp,0xc
c001c1b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c1b8:	52                   	push   edx
c001c1b9:	50                   	push   eax
c001c1ba:	55                   	push   ebp
c001c1bb:	e8 62 6b ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c1c0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c1c3:	31 d2                	xor    edx,edx
c001c1c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c1d0:	52                   	push   edx
c001c1d1:	50                   	push   eax
c001c1d2:	55                   	push   ebp
c001c1d3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c1d6:	83 c4 20             	add    esp,0x20
c001c1d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c1e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c1e5:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c1e9:	0f 84 56 03 00 00    	je     c001c545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c1ef:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c1f6:	31 d2                	xor    edx,edx
c001c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1fc:	c1 e8 03             	shr    eax,0x3
c001c1ff:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c203:	50                   	push   eax
c001c204:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c208:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c20c:	52                   	push   edx
c001c20d:	50                   	push   eax
c001c20e:	55                   	push   ebp
c001c20f:	e8 0e 6b ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c214:	58                   	pop    eax
c001c215:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c219:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c220:	e8 af 32 ff ff       	call   c000f4d4 <malloc>
c001c225:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c228:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c22c:	31 d2                	xor    edx,edx
c001c22e:	58                   	pop    eax
c001c22f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c233:	50                   	push   eax
c001c234:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c238:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c23c:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c243:	52                   	push   edx
c001c244:	50                   	push   eax
c001c245:	55                   	push   ebp
c001c246:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c249:	83 c4 20             	add    esp,0x20
c001c24c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c254:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c258:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c25c:	0f 8d c7 02 00 00    	jge    c001c529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c262:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c266:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c26a:	31 db                	xor    ebx,ebx
c001c26c:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c26f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c277:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c27b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c27f:	c1 e8 08             	shr    eax,0x8
c001c282:	89 c6                	mov    esi,eax
c001c284:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c288:	c1 e6 04             	shl    esi,0x4
c001c28b:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c28f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c292:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c296:	85 c0                	test   eax,eax
c001c298:	0f 85 17 01 00 00    	jne    c001c3b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c29e:	83 ec 0c             	sub    esp,0xc
c001c2a1:	b3 01                	mov    bl,0x1
c001c2a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2a7:	03 06                	add    eax,DWORD PTR [esi]
c001c2a9:	50                   	push   eax
c001c2aa:	e8 48 f8 ff ff       	call   c001baf7 <Thr::getAddressOfKernelSymbol(char const*)>
c001c2af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2b3:	83 c4 10             	add    esp,0x10
c001c2b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c2bb:	0f 85 f4 00 00 00    	jne    c001c3b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c2c1:	50                   	push   eax
c001c2c2:	50                   	push   eax
c001c2c3:	68 c3 a5 02 c0       	push   0xc002a5c3
c001c2c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2cc:	03 06                	add    eax,DWORD PTR [esi]
c001c2ce:	50                   	push   eax
c001c2cf:	e8 a7 44 fe ff       	call   c000077b <strcmp>
c001c2d4:	83 c4 10             	add    esp,0x10
c001c2d7:	85 c0                	test   eax,eax
c001c2d9:	75 0a                	jne    c001c2e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c2db:	b8 fc 52 02 c0       	mov    eax,0xc00252fc
c001c2e0:	e9 ca 00 00 00       	jmp    c001c3af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c2e5:	50                   	push   eax
c001c2e6:	50                   	push   eax
c001c2e7:	68 cd a5 02 c0       	push   0xc002a5cd
c001c2ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2f0:	03 06                	add    eax,DWORD PTR [esi]
c001c2f2:	50                   	push   eax
c001c2f3:	e8 83 44 fe ff       	call   c000077b <strcmp>
c001c2f8:	83 c4 10             	add    esp,0x10
c001c2fb:	85 c0                	test   eax,eax
c001c2fd:	75 0a                	jne    c001c309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c2ff:	b8 30 50 02 c0       	mov    eax,0xc0025030
c001c304:	e9 a6 00 00 00       	jmp    c001c3af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c309:	53                   	push   ebx
c001c30a:	53                   	push   ebx
c001c30b:	68 d6 a5 02 c0       	push   0xc002a5d6
c001c310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c314:	03 06                	add    eax,DWORD PTR [esi]
c001c316:	50                   	push   eax
c001c317:	e8 5f 44 fe ff       	call   c000077b <strcmp>
c001c31c:	83 c4 10             	add    esp,0x10
c001c31f:	85 c0                	test   eax,eax
c001c321:	75 0a                	jne    c001c32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c323:	b8 fc 53 02 c0       	mov    eax,0xc00253fc
c001c328:	e9 82 00 00 00       	jmp    c001c3af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c32d:	51                   	push   ecx
c001c32e:	51                   	push   ecx
c001c32f:	68 e0 a5 02 c0       	push   0xc002a5e0
c001c334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c338:	03 06                	add    eax,DWORD PTR [esi]
c001c33a:	50                   	push   eax
c001c33b:	e8 3b 44 fe ff       	call   c000077b <strcmp>
c001c340:	83 c4 10             	add    esp,0x10
c001c343:	85 c0                	test   eax,eax
c001c345:	74 63                	je     c001c3aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c347:	50                   	push   eax
c001c348:	50                   	push   eax
c001c349:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c34d:	03 06                	add    eax,DWORD PTR [esi]
c001c34f:	50                   	push   eax
c001c350:	68 e9 a5 02 c0       	push   0xc002a5e9
c001c355:	e8 77 63 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001c35a:	58                   	pop    eax
c001c35b:	5a                   	pop    edx
c001c35c:	68 03 a6 02 c0       	push   0xc002a603
c001c361:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c368:	53                   	push   ebx
c001c369:	e8 bc 43 fe ff       	call   c000072a <strcpy>
c001c36e:	59                   	pop    ecx
c001c36f:	58                   	pop    eax
c001c370:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c374:	03 06                	add    eax,DWORD PTR [esi]
c001c376:	50                   	push   eax
c001c377:	53                   	push   ebx
c001c378:	e8 64 44 fe ff       	call   c00007e1 <strcat>
c001c37d:	58                   	pop    eax
c001c37e:	5a                   	pop    edx
c001c37f:	68 99 a6 02 c0       	push   0xc002a699
c001c384:	53                   	push   ebx
c001c385:	e8 57 44 fe ff       	call   c00007e1 <strcat>
c001c38a:	83 c4 10             	add    esp,0x10
c001c38d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c392:	0f 84 4b 01 00 00    	je     c001c4e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c398:	83 ec 0c             	sub    esp,0xc
c001c39b:	53                   	push   ebx
c001c39c:	e8 4a d4 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001c3a1:	83 c4 10             	add    esp,0x10
c001c3a4:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c3a8:	eb 0b                	jmp    c001c3b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c3aa:	b8 7c 51 02 c0       	mov    eax,0xc002517c
c001c3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3b3:	b3 01                	mov    bl,0x1
c001c3b5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c3ba:	0f 85 80 00 00 00    	jne    c001c440 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c3c0:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c3c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c3cb:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c3cf:	01 ce                	add    esi,ecx
c001c3d1:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c3d9:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3db:	0f 94 c2             	sete   dl
c001c3de:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c3e6:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c3eb:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c3ef:	84 db                	test   bl,bl
c001c3f1:	74 31                	je     c001c424 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c3f3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c3f7:	01 c3                	add    ebx,eax
c001c3f9:	84 d2                	test   dl,dl
c001c3fb:	75 0a                	jne    c001c407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c3fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c401:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c405:	76 32                	jbe    c001c439 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c407:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c40c:	0f 84 d1 00 00 00    	je     c001c4e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c412:	83 ec 0c             	sub    esp,0xc
c001c415:	68 1a a6 02 c0       	push   0xc002a61a
c001c41a:	e8 cc d3 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	eb 15                	jmp    c001c439 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c424:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c427:	84 d2                	test   dl,dl
c001c429:	75 0e                	jne    c001c439 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c42b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c42f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c433:	77 04                	ja     c001c439 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c435:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c439:	89 1e                	mov    DWORD PTR [esi],ebx
c001c43b:	e9 e0 00 00 00       	jmp    c001c520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c440:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c445:	75 6e                	jne    c001c4b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c447:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c44e:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c452:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c456:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c45e:	74 17                	je     c001c477 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c460:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c468:	74 0d                	je     c001c477 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c46a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c46e:	83 e8 04             	sub    eax,0x4
c001c471:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c475:	76 17                	jbe    c001c48e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c477:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c47c:	74 65                	je     c001c4e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c47e:	83 ec 0c             	sub    esp,0xc
c001c481:	68 36 a6 02 c0       	push   0xc002a636
c001c486:	e8 60 d3 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001c48b:	83 c4 10             	add    esp,0x10
c001c48e:	8b 16                	mov    edx,DWORD PTR [esi]
c001c490:	84 db                	test   bl,bl
c001c492:	74 13                	je     c001c4a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c494:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c498:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c49f:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c4a3:	01 d0                	add    eax,edx
c001c4a5:	eb 06                	jmp    c001c4ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c4a7:	89 d0                	mov    eax,edx
c001c4a9:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c4ad:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c4b1:	89 06                	mov    DWORD PTR [esi],eax
c001c4b3:	eb 6b                	jmp    c001c520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c4b5:	50                   	push   eax
c001c4b6:	50                   	push   eax
c001c4b7:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c4bc:	50                   	push   eax
c001c4bd:	68 52 a6 02 c0       	push   0xc002a652
c001c4c2:	e8 0a 62 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001c4c7:	83 c4 10             	add    esp,0x10
c001c4ca:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c4cf:	74 12                	je     c001c4e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c4d1:	83 ec 0c             	sub    esp,0xc
c001c4d4:	68 5d a6 02 c0       	push   0xc002a65d
c001c4d9:	e8 0d d3 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001c4de:	83 c4 10             	add    esp,0x10
c001c4e1:	eb 3d                	jmp    c001c520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c4e3:	83 ec 0c             	sub    esp,0xc
c001c4e6:	55                   	push   ebp
c001c4e7:	e8 d6 67 ff ff       	call   c0012cc2 <File::close()>
c001c4ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c4ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c4f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c4f5:	59                   	pop    ecx
c001c4f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c4fa:	e8 e5 2f ff ff       	call   c000f4e4 <free>
c001c4ff:	5b                   	pop    ebx
c001c500:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c504:	e8 db 2f ff ff       	call   c000f4e4 <free>
c001c509:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c50c:	e8 d3 2f ff ff       	call   c000f4e4 <free>
c001c511:	5e                   	pop    esi
c001c512:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c516:	e8 c9 2f ff ff       	call   c000f4e4 <free>
c001c51b:	83 c4 10             	add    esp,0x10
c001c51e:	eb 21                	jmp    c001c541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c520:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c524:	e9 2b fd ff ff       	jmp    c001c254 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c529:	83 ec 0c             	sub    esp,0xc
c001c52c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c530:	e8 af 2f ff ff       	call   c000f4e4 <free>
c001c535:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c539:	83 c4 10             	add    esp,0x10
c001c53c:	e9 a0 fc ff ff       	jmp    c001c1e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c541:	31 c0                	xor    eax,eax
c001c543:	eb 33                	jmp    c001c578 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c545:	83 ec 0c             	sub    esp,0xc
c001c548:	55                   	push   ebp
c001c549:	e8 74 67 ff ff       	call   c0012cc2 <File::close()>
c001c54e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c551:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c554:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c557:	58                   	pop    eax
c001c558:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c55c:	e8 83 2f ff ff       	call   c000f4e4 <free>
c001c561:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c564:	e8 7b 2f ff ff       	call   c000f4e4 <free>
c001c569:	5a                   	pop    edx
c001c56a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c56e:	e8 71 2f ff ff       	call   c000f4e4 <free>
c001c573:	83 c4 10             	add    esp,0x10
c001c576:	b0 01                	mov    al,0x1
c001c578:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c57e:	5b                   	pop    ebx
c001c57f:	5e                   	pop    esi
c001c580:	5f                   	pop    edi
c001c581:	5d                   	pop    ebp
c001c582:	c3                   	ret    

c001c583 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c583:	56                   	push   esi
c001c584:	31 d2                	xor    edx,edx
c001c586:	53                   	push   ebx
c001c587:	8b 1d e0 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e0
c001c58d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c591:	39 d3                	cmp    ebx,edx
c001c593:	7e 1b                	jle    c001c5b0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c595:	8b 04 95 00 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2800]
c001c59c:	39 c8                	cmp    eax,ecx
c001c59e:	77 0d                	ja     c001c5ad <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c5a0:	8b 34 95 00 d6 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2a00]
c001c5a7:	01 c6                	add    esi,eax
c001c5a9:	39 ce                	cmp    esi,ecx
c001c5ab:	77 05                	ja     c001c5b2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c5ad:	42                   	inc    edx
c001c5ae:	eb e1                	jmp    c001c591 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c5b0:	31 c0                	xor    eax,eax
c001c5b2:	5b                   	pop    ebx
c001c5b3:	5e                   	pop    esi
c001c5b4:	c3                   	ret    

c001c5b5 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c5b5:	53                   	push   ebx
c001c5b6:	31 c0                	xor    eax,eax
c001c5b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c5bc:	8b 1d e0 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e0
c001c5c2:	39 c3                	cmp    ebx,eax
c001c5c4:	7e 22                	jle    c001c5e8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c5c6:	8b 14 85 00 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2800]
c001c5cd:	39 ca                	cmp    edx,ecx
c001c5cf:	77 14                	ja     c001c5e5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c5d1:	03 14 85 00 d6 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2a00]
c001c5d8:	39 ca                	cmp    edx,ecx
c001c5da:	76 09                	jbe    c001c5e5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c5dc:	8b 04 85 00 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2600]
c001c5e3:	eb 05                	jmp    c001c5ea <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c5e5:	40                   	inc    eax
c001c5e6:	eb da                	jmp    c001c5c2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c5e8:	31 c0                	xor    eax,eax
c001c5ea:	5b                   	pop    ebx
c001c5eb:	c3                   	ret    

c001c5ec <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c5ec:	53                   	push   ebx
c001c5ed:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c5f1:	53                   	push   ebx
c001c5f2:	e8 8c ff ff ff       	call   c001c583 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c5f7:	5a                   	pop    edx
c001c5f8:	31 d2                	xor    edx,edx
c001c5fa:	85 c0                	test   eax,eax
c001c5fc:	74 04                	je     c001c602 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c5fe:	89 da                	mov    edx,ebx
c001c600:	29 c2                	sub    edx,eax
c001c602:	89 d0                	mov    eax,edx
c001c604:	5b                   	pop    ebx
c001c605:	c3                   	ret    

c001c606 <Thr::loadDLL(char const*, bool)>:
c001c606:	55                   	push   ebp
c001c607:	57                   	push   edi
c001c608:	56                   	push   esi
c001c609:	53                   	push   ebx
c001c60a:	81 ec 34 01 00 00    	sub    esp,0x134
c001c610:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c617:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c61e:	56                   	push   esi
c001c61f:	68 75 a6 02 c0       	push   0xc002a675
c001c624:	e8 a8 60 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001c629:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c630:	e8 9f 2e ff ff       	call   c000f4d4 <malloc>
c001c635:	83 c4 0c             	add    esp,0xc
c001c638:	89 c3                	mov    ebx,eax
c001c63a:	ff 35 d4 dd 02 c0    	push   DWORD PTR ds:0xc002ddd4
c001c640:	56                   	push   esi
c001c641:	50                   	push   eax
c001c642:	e8 b9 65 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001c647:	83 c4 10             	add    esp,0x10
c001c64a:	85 db                	test   ebx,ebx
c001c64c:	75 3c                	jne    c001c68a <Thr::loadDLL(char const*, bool)+0x84>
c001c64e:	89 e8                	mov    eax,ebp
c001c650:	84 c0                	test   al,al
c001c652:	0f 84 b0 01 00 00    	je     c001c808 <Thr::loadDLL(char const*, bool)+0x202>
c001c658:	50                   	push   eax
c001c659:	50                   	push   eax
c001c65a:	68 86 a6 02 c0       	push   0xc002a686
c001c65f:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c663:	57                   	push   edi
c001c664:	e8 c1 40 fe ff       	call   c000072a <strcpy>
c001c669:	58                   	pop    eax
c001c66a:	5a                   	pop    edx
c001c66b:	56                   	push   esi
c001c66c:	57                   	push   edi
c001c66d:	e8 6f 41 fe ff       	call   c00007e1 <strcat>
c001c672:	59                   	pop    ecx
c001c673:	58                   	pop    eax
c001c674:	68 99 a6 02 c0       	push   0xc002a699
c001c679:	57                   	push   edi
c001c67a:	e8 62 41 fe ff       	call   c00007e1 <strcat>
c001c67f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c682:	e8 64 d1 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001c687:	83 c4 10             	add    esp,0x10
c001c68a:	50                   	push   eax
c001c68b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c68f:	50                   	push   eax
c001c690:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c694:	50                   	push   eax
c001c695:	53                   	push   ebx
c001c696:	e8 75 68 ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c001c69b:	83 c4 10             	add    esp,0x10
c001c69e:	85 db                	test   ebx,ebx
c001c6a0:	74 0c                	je     c001c6ae <Thr::loadDLL(char const*, bool)+0xa8>
c001c6a2:	83 ec 0c             	sub    esp,0xc
c001c6a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6a7:	53                   	push   ebx
c001c6a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c6ab:	83 c4 10             	add    esp,0x10
c001c6ae:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c6b3:	75 0a                	jne    c001c6bf <Thr::loadDLL(char const*, bool)+0xb9>
c001c6b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6b9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c6bd:	75 3c                	jne    c001c6fb <Thr::loadDLL(char const*, bool)+0xf5>
c001c6bf:	89 e8                	mov    eax,ebp
c001c6c1:	84 c0                	test   al,al
c001c6c3:	0f 84 3d 01 00 00    	je     c001c806 <Thr::loadDLL(char const*, bool)+0x200>
c001c6c9:	50                   	push   eax
c001c6ca:	50                   	push   eax
c001c6cb:	68 86 a6 02 c0       	push   0xc002a686
c001c6d0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c6d4:	53                   	push   ebx
c001c6d5:	e8 50 40 fe ff       	call   c000072a <strcpy>
c001c6da:	58                   	pop    eax
c001c6db:	5a                   	pop    edx
c001c6dc:	56                   	push   esi
c001c6dd:	53                   	push   ebx
c001c6de:	e8 fe 40 fe ff       	call   c00007e1 <strcat>
c001c6e3:	59                   	pop    ecx
c001c6e4:	5f                   	pop    edi
c001c6e5:	68 99 a6 02 c0       	push   0xc002a699
c001c6ea:	53                   	push   ebx
c001c6eb:	e8 f1 40 fe ff       	call   c00007e1 <strcat>
c001c6f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6f3:	e8 f3 d0 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001c6f8:	83 c4 10             	add    esp,0x10
c001c6fb:	e8 71 51 ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c001c700:	51                   	push   ecx
c001c701:	6a 03                	push   0x3
c001c703:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c707:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c70b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c711:	83 d3 00             	adc    ebx,0x0
c001c714:	89 ca                	mov    edx,ecx
c001c716:	89 d1                	mov    ecx,edx
c001c718:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c71c:	51                   	push   ecx
c001c71d:	50                   	push   eax
c001c71e:	e8 89 57 ff ff       	call   c0011eac <VAS::allocatePages(int, int)>
c001c723:	89 34 24             	mov    DWORD PTR [esp],esi
c001c726:	89 c3                	mov    ebx,eax
c001c728:	e8 7b 3f fe ff       	call   c00006a8 <strlen>
c001c72d:	8b 3d e0 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5e0
c001c733:	40                   	inc    eax
c001c734:	89 04 24             	mov    DWORD PTR [esp],eax
c001c737:	e8 98 2d ff ff       	call   c000f4d4 <malloc>
c001c73c:	89 04 bd 00 da 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2600],eax
c001c743:	5f                   	pop    edi
c001c744:	58                   	pop    eax
c001c745:	a1 e0 d5 02 c0       	mov    eax,ds:0xc002d5e0
c001c74a:	56                   	push   esi
c001c74b:	ff 34 85 00 da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2600]
c001c752:	e8 d3 3f fe ff       	call   c000072a <strcpy>
c001c757:	a1 e0 d5 02 c0       	mov    eax,ds:0xc002d5e0
c001c75c:	8d 50 01             	lea    edx,[eax+0x1]
c001c75f:	89 1c 85 00 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2800],ebx
c001c766:	89 15 e0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e0,edx
c001c76c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c770:	83 c4 0c             	add    esp,0xc
c001c773:	89 14 85 00 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a00],edx
c001c77a:	6a 01                	push   0x1
c001c77c:	53                   	push   ebx
c001c77d:	56                   	push   esi
c001c77e:	e8 7f f6 ff ff       	call   c001be02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c783:	83 c4 10             	add    esp,0x10
c001c786:	89 c7                	mov    edi,eax
c001c788:	fe c8                	dec    al
c001c78a:	74 16                	je     c001c7a2 <Thr::loadDLL(char const*, bool)+0x19c>
c001c78c:	89 e8                	mov    eax,ebp
c001c78e:	84 c0                	test   al,al
c001c790:	74 10                	je     c001c7a2 <Thr::loadDLL(char const*, bool)+0x19c>
c001c792:	83 ec 0c             	sub    esp,0xc
c001c795:	68 9b a6 02 c0       	push   0xc002a69b
c001c79a:	e8 4c d0 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001c79f:	83 c4 10             	add    esp,0x10
c001c7a2:	31 f6                	xor    esi,esi
c001c7a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c7ac:	05 ff 0f 00 00       	add    eax,0xfff
c001c7b1:	83 d2 00             	adc    edx,0x0
c001c7b4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c7b8:	c1 ea 0c             	shr    edx,0xc
c001c7bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c7c3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c7c7:	ba 00 00 00 00       	mov    edx,0x0
c001c7cc:	89 d0                	mov    eax,edx
c001c7ce:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c7d2:	73 2c                	jae    c001c800 <Thr::loadDLL(char const*, bool)+0x1fa>
c001c7d4:	e8 98 50 ff ff       	call   c0011871 <Virt::getAKernelVAS()>
c001c7d9:	89 f5                	mov    ebp,esi
c001c7db:	c1 e5 0c             	shl    ebp,0xc
c001c7de:	52                   	push   edx
c001c7df:	01 dd                	add    ebp,ebx
c001c7e1:	52                   	push   edx
c001c7e2:	55                   	push   ebp
c001c7e3:	50                   	push   eax
c001c7e4:	e8 3d 52 ff ff       	call   c0011a26 <VAS::getPageTableEntry(unsigned long)>
c001c7e9:	83 c4 10             	add    esp,0x10
c001c7ec:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c7ef:	75 0c                	jne    c001c7fd <Thr::loadDLL(char const*, bool)+0x1f7>
c001c7f1:	83 ec 0c             	sub    esp,0xc
c001c7f4:	55                   	push   ebp
c001c7f5:	e8 fa 31 ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c001c7fa:	83 c4 10             	add    esp,0x10
c001c7fd:	46                   	inc    esi
c001c7fe:	eb a4                	jmp    c001c7a4 <Thr::loadDLL(char const*, bool)+0x19e>
c001c800:	89 f8                	mov    eax,edi
c001c802:	84 c0                	test   al,al
c001c804:	75 02                	jne    c001c808 <Thr::loadDLL(char const*, bool)+0x202>
c001c806:	31 db                	xor    ebx,ebx
c001c808:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c80e:	89 d8                	mov    eax,ebx
c001c810:	5b                   	pop    ebx
c001c811:	5e                   	pop    esi
c001c812:	5f                   	pop    edi
c001c813:	5d                   	pop    ebp
c001c814:	c3                   	ret    

c001c815 <Thr::executeDLL(unsigned long, void*)>:
c001c815:	56                   	push   esi
c001c816:	53                   	push   ebx
c001c817:	51                   	push   ecx
c001c818:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c81c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c820:	85 db                	test   ebx,ebx
c001c822:	75 10                	jne    c001c834 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	68 ba a6 02 c0       	push   0xc002a6ba
c001c82c:	e8 ba cf ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001c831:	83 c4 10             	add    esp,0x10
c001c834:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c838:	89 d8                	mov    eax,ebx
c001c83a:	5a                   	pop    edx
c001c83b:	5b                   	pop    ebx
c001c83c:	5e                   	pop    esi
c001c83d:	ff e0                	jmp    eax
c001c83f:	90                   	nop

c001c840 <changeTSS>:
c001c840:	83 ec 14             	sub    esp,0x14
c001c843:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c848:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c84b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c850:	c1 e2 15             	shl    edx,0x15
c001c853:	29 d0                	sub    eax,edx
c001c855:	50                   	push   eax
c001c856:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001c85b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c861:	05 7c 11 00 00       	add    eax,0x117c
c001c866:	50                   	push   eax
c001c867:	e8 b4 47 ff ff       	call   c0011020 <TSS::setESP(unsigned long)>
c001c86c:	83 c4 1c             	add    esp,0x1c
c001c86f:	c3                   	ret    

c001c870 <Process::addArgs(char**)>:
c001c870:	57                   	push   edi
c001c871:	56                   	push   esi
c001c872:	53                   	push   ebx
c001c873:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c87b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c885:	85 ff                	test   edi,edi
c001c887:	74 3d                	je     c001c8c6 <Process::addArgs(char**)+0x56>
c001c889:	8b 07                	mov    eax,DWORD PTR [edi]
c001c88b:	85 c0                	test   eax,eax
c001c88d:	74 37                	je     c001c8c6 <Process::addArgs(char**)+0x56>
c001c88f:	31 db                	xor    ebx,ebx
c001c891:	83 ec 0c             	sub    esp,0xc
c001c894:	50                   	push   eax
c001c895:	e8 0e 3e fe ff       	call   c00006a8 <strlen>
c001c89a:	40                   	inc    eax
c001c89b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c89e:	e8 31 2c ff ff       	call   c000f4d4 <malloc>
c001c8a3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c8aa:	5a                   	pop    edx
c001c8ab:	59                   	pop    ecx
c001c8ac:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c8af:	43                   	inc    ebx
c001c8b0:	50                   	push   eax
c001c8b1:	e8 74 3e fe ff       	call   c000072a <strcpy>
c001c8b6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c8bc:	83 c4 10             	add    esp,0x10
c001c8bf:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c8c2:	85 c0                	test   eax,eax
c001c8c4:	75 cb                	jne    c001c891 <Process::addArgs(char**)+0x21>
c001c8c6:	5b                   	pop    ebx
c001c8c7:	5e                   	pop    esi
c001c8c8:	5f                   	pop    edi
c001c8c9:	c3                   	ret    

c001c8ca <Process::Process(char const*, Process*, char**)>:
c001c8ca:	56                   	push   esi
c001c8cb:	53                   	push   ebx
c001c8cc:	83 ec 14             	sub    esp,0x14
c001c8cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8d3:	05 0c 02 00 00       	add    eax,0x20c
c001c8d8:	bb 07 00 00 00       	mov    ebx,0x7
c001c8dd:	89 c6                	mov    esi,eax
c001c8df:	85 db                	test   ebx,ebx
c001c8e1:	78 12                	js     c001c8f5 <Process::Process(char const*, Process*, char**)+0x2b>
c001c8e3:	83 ec 0c             	sub    esp,0xc
c001c8e6:	56                   	push   esi
c001c8e7:	e8 c6 ac 00 00       	call   c00275b2 <ThreadControlBlock::ThreadControlBlock()>
c001c8ec:	83 c4 10             	add    esp,0x10
c001c8ef:	83 c6 63             	add    esi,0x63
c001c8f2:	4b                   	dec    ebx
c001c8f3:	eb ea                	jmp    c001c8df <Process::Process(char const*, Process*, char**)+0x15>
c001c8f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8f9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c900:	83 ec 0c             	sub    esp,0xc
c001c903:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c907:	e8 30 cd ff ff       	call   c001963c <Krnl::newProcessEnv(Process*)>
c001c90c:	83 c4 10             	add    esp,0x10
c001c90f:	89 c2                	mov    edx,eax
c001c911:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c915:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001c91b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c91f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c928:	a1 30 be 02 c0       	mov    eax,ds:0xc002be30
c001c92d:	8d 50 01             	lea    edx,[eax+0x1]
c001c930:	89 15 30 be 02 c0    	mov    DWORD PTR ds:0xc002be30,edx
c001c936:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c93a:	89 02                	mov    DWORD PTR [edx],eax
c001c93c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001c944:	83 ec 0c             	sub    esp,0xc
c001c947:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c94b:	e8 84 2b ff ff       	call   c000f4d4 <malloc>
c001c950:	83 c4 10             	add    esp,0x10
c001c953:	89 c3                	mov    ebx,eax
c001c955:	83 ec 08             	sub    esp,0x8
c001c958:	6a 00                	push   0x0
c001c95a:	53                   	push   ebx
c001c95b:	e8 f4 58 ff ff       	call   c0012254 <VAS::VAS(bool)>
c001c960:	83 c4 10             	add    esp,0x10
c001c963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c967:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c96d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c971:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c97b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c97f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c983:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c989:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c98d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c993:	85 c0                	test   eax,eax
c001c995:	74 42                	je     c001c9d9 <Process::Process(char const*, Process*, char**)+0x10f>
c001c997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c99b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c9a1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c9a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9ab:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9b5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c9bb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c9c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9c5:	05 0c 01 00 00       	add    eax,0x10c
c001c9ca:	83 ec 08             	sub    esp,0x8
c001c9cd:	52                   	push   edx
c001c9ce:	50                   	push   eax
c001c9cf:	e8 56 3d fe ff       	call   c000072a <strcpy>
c001c9d4:	83 c4 10             	add    esp,0x10
c001c9d7:	eb 63                	jmp    c001ca3c <Process::Process(char const*, Process*, char**)+0x172>
c001c9d9:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001c9e1:	83 ec 0c             	sub    esp,0xc
c001c9e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c9e8:	e8 e7 2a ff ff       	call   c000f4d4 <malloc>
c001c9ed:	83 c4 10             	add    esp,0x10
c001c9f0:	89 c3                	mov    ebx,eax
c001c9f2:	83 ec 08             	sub    esp,0x8
c001c9f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9f9:	53                   	push   ebx
c001c9fa:	e8 fd 42 ff ff       	call   c0010cfc <VgaText::VgaText(char const*)>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca06:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ca0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca10:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ca16:	83 ec 0c             	sub    esp,0xc
c001ca19:	50                   	push   eax
c001ca1a:	e8 d0 36 ff ff       	call   c00100ef <addToTerminalCycle(VgaText*)>
c001ca1f:	83 c4 10             	add    esp,0x10
c001ca22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca26:	05 0c 01 00 00       	add    eax,0x10c
c001ca2b:	83 ec 08             	sub    esp,0x8
c001ca2e:	68 e4 a6 02 c0       	push   0xc002a6e4
c001ca33:	50                   	push   eax
c001ca34:	e8 f1 3c fe ff       	call   c000072a <strcpy>
c001ca39:	83 c4 10             	add    esp,0x10
c001ca3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca40:	83 c0 0c             	add    eax,0xc
c001ca43:	83 ec 08             	sub    esp,0x8
c001ca46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca4a:	50                   	push   eax
c001ca4b:	e8 da 3c fe ff       	call   c000072a <strcpy>
c001ca50:	83 c4 10             	add    esp,0x10
c001ca53:	83 ec 08             	sub    esp,0x8
c001ca56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ca5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca5e:	e8 0d fe ff ff       	call   c001c870 <Process::addArgs(char**)>
c001ca63:	83 c4 10             	add    esp,0x10
c001ca66:	83 ec 08             	sub    esp,0x8
c001ca69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca71:	e8 58 ee ff ff       	call   c001b8ce <Thr::loadProgramIntoMemory(Process*, char const*)>
c001ca76:	83 c4 10             	add    esp,0x10
c001ca79:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca7d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ca81:	83 f0 01             	xor    eax,0x1
c001ca84:	88 c2                	mov    dl,al
c001ca86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca8a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001ca90:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca95:	83 ec 08             	sub    esp,0x8
c001ca98:	50                   	push   eax
c001ca99:	68 e0 a7 02 c0       	push   0xc002a7e0
c001ca9e:	e8 2e 5c ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001caa3:	83 c4 10             	add    esp,0x10
c001caa6:	90                   	nop
c001caa7:	83 c4 14             	add    esp,0x14
c001caaa:	5b                   	pop    ebx
c001caab:	5e                   	pop    esi
c001caac:	c3                   	ret    
c001caad:	90                   	nop

c001caae <Process::Process(bool, char const*, Process*, char**)>:
c001caae:	56                   	push   esi
c001caaf:	53                   	push   ebx
c001cab0:	83 ec 24             	sub    esp,0x24
c001cab3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cab7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cabb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cabf:	05 0c 02 00 00       	add    eax,0x20c
c001cac4:	bb 07 00 00 00       	mov    ebx,0x7
c001cac9:	89 c6                	mov    esi,eax
c001cacb:	85 db                	test   ebx,ebx
c001cacd:	78 12                	js     c001cae1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cacf:	83 ec 0c             	sub    esp,0xc
c001cad2:	56                   	push   esi
c001cad3:	e8 da aa 00 00       	call   c00275b2 <ThreadControlBlock::ThreadControlBlock()>
c001cad8:	83 c4 10             	add    esp,0x10
c001cadb:	83 c6 63             	add    esi,0x63
c001cade:	4b                   	dec    ebx
c001cadf:	eb ea                	jmp    c001cacb <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cae1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cae5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001caec:	83 ec 0c             	sub    esp,0xc
c001caef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001caf3:	e8 44 cb ff ff       	call   c001963c <Krnl::newProcessEnv(Process*)>
c001caf8:	83 c4 10             	add    esp,0x10
c001cafb:	89 c2                	mov    edx,eax
c001cafd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb01:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cb07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb0b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cb14:	a1 30 be 02 c0       	mov    eax,ds:0xc002be30
c001cb19:	8d 50 01             	lea    edx,[eax+0x1]
c001cb1c:	89 15 30 be 02 c0    	mov    DWORD PTR ds:0xc002be30,edx
c001cb22:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cb26:	89 02                	mov    DWORD PTR [edx],eax
c001cb28:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cb30:	83 ec 0c             	sub    esp,0xc
c001cb33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cb37:	e8 98 29 ff ff       	call   c000f4d4 <malloc>
c001cb3c:	83 c4 10             	add    esp,0x10
c001cb3f:	89 c3                	mov    ebx,eax
c001cb41:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cb46:	83 ec 08             	sub    esp,0x8
c001cb49:	50                   	push   eax
c001cb4a:	53                   	push   ebx
c001cb4b:	e8 04 57 ff ff       	call   c0012254 <VAS::VAS(bool)>
c001cb50:	83 c4 10             	add    esp,0x10
c001cb53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb57:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cb5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb61:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cb6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb6f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cb73:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cb79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb7d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cb83:	85 c0                	test   eax,eax
c001cb85:	74 42                	je     c001cbc9 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cb87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb8b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cb91:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cb97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb9b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cba1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cba5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cbab:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cbb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbb5:	05 0c 01 00 00       	add    eax,0x10c
c001cbba:	83 ec 08             	sub    esp,0x8
c001cbbd:	52                   	push   edx
c001cbbe:	50                   	push   eax
c001cbbf:	e8 66 3b fe ff       	call   c000072a <strcpy>
c001cbc4:	83 c4 10             	add    esp,0x10
c001cbc7:	eb 63                	jmp    c001cc2c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cbc9:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cbd1:	83 ec 0c             	sub    esp,0xc
c001cbd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cbd8:	e8 f7 28 ff ff       	call   c000f4d4 <malloc>
c001cbdd:	83 c4 10             	add    esp,0x10
c001cbe0:	89 c3                	mov    ebx,eax
c001cbe2:	83 ec 08             	sub    esp,0x8
c001cbe5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cbe9:	53                   	push   ebx
c001cbea:	e8 0d 41 ff ff       	call   c0010cfc <VgaText::VgaText(char const*)>
c001cbef:	83 c4 10             	add    esp,0x10
c001cbf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbf6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cbfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc00:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cc06:	83 ec 0c             	sub    esp,0xc
c001cc09:	50                   	push   eax
c001cc0a:	e8 e0 34 ff ff       	call   c00100ef <addToTerminalCycle(VgaText*)>
c001cc0f:	83 c4 10             	add    esp,0x10
c001cc12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc16:	05 0c 01 00 00       	add    eax,0x10c
c001cc1b:	83 ec 08             	sub    esp,0x8
c001cc1e:	68 e4 a6 02 c0       	push   0xc002a6e4
c001cc23:	50                   	push   eax
c001cc24:	e8 01 3b fe ff       	call   c000072a <strcpy>
c001cc29:	83 c4 10             	add    esp,0x10
c001cc2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc30:	83 c0 0c             	add    eax,0xc
c001cc33:	83 ec 08             	sub    esp,0x8
c001cc36:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cc3a:	50                   	push   eax
c001cc3b:	e8 ea 3a fe ff       	call   c000072a <strcpy>
c001cc40:	83 c4 10             	add    esp,0x10
c001cc43:	83 ec 08             	sub    esp,0x8
c001cc46:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cc4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc4e:	e8 1d fc ff ff       	call   c001c870 <Process::addArgs(char**)>
c001cc53:	83 c4 10             	add    esp,0x10
c001cc56:	90                   	nop
c001cc57:	83 c4 24             	add    esp,0x24
c001cc5a:	5b                   	pop    ebx
c001cc5b:	5e                   	pop    esi
c001cc5c:	c3                   	ret    

c001cc5d <disableIRQs()>:
c001cc5d:	fa                   	cli    
c001cc5e:	ff 05 ac dd 02 c0    	inc    DWORD PTR ds:0xc002ddac
c001cc64:	c3                   	ret    

c001cc65 <getIRQNestingLevel()>:
c001cc65:	a1 ac dd 02 c0       	mov    eax,ds:0xc002ddac
c001cc6a:	c3                   	ret    

c001cc6b <enableIRQs()>:
c001cc6b:	a1 ac dd 02 c0       	mov    eax,ds:0xc002ddac
c001cc70:	48                   	dec    eax
c001cc71:	a3 ac dd 02 c0       	mov    ds:0xc002ddac,eax
c001cc76:	75 01                	jne    c001cc79 <enableIRQs()+0xe>
c001cc78:	fb                   	sti    
c001cc79:	c3                   	ret    

c001cc7a <lockScheduler()>:
c001cc7a:	eb e1                	jmp    c001cc5d <disableIRQs()>

c001cc7c <unlockScheduler()>:
c001cc7c:	eb ed                	jmp    c001cc6b <enableIRQs()>

c001cc7e <userModeEntryPoint(void*)>:
c001cc7e:	83 ec 0c             	sub    esp,0xc
c001cc81:	e8 f6 ff ff ff       	call   c001cc7c <unlockScheduler()>
c001cc86:	fb                   	sti    
c001cc87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc8f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cc95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc99:	83 c4 0c             	add    esp,0xc
c001cc9c:	e9 3e 36 fe ff       	jmp    c00002df <goToUsermode>

c001cca1 <lockStuff()>:
c001cca1:	e8 b7 ff ff ff       	call   c001cc5d <disableIRQs()>
c001cca6:	ff 05 a8 dd 02 c0    	inc    DWORD PTR ds:0xc002dda8
c001ccac:	c3                   	ret    

c001ccad <taskStartupFunction>:
c001ccad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccb2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001ccb5:	c3                   	ret    

c001ccb6 <updateTimeUsed()>:
c001ccb6:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c001ccbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ccc1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ccc8:	74 50                	je     c001cd1a <updateTimeUsed()+0x64>
c001ccca:	57                   	push   edi
c001cccb:	56                   	push   esi
c001cccc:	53                   	push   ebx
c001cccd:	0f 31                	rdtsc  
c001cccf:	89 c1                	mov    ecx,eax
c001ccd1:	a3 e8 dd 02 c0       	mov    ds:0xc002dde8,eax
c001ccd6:	2b 0d d8 dd 02 c0    	sub    ecx,DWORD PTR ds:0xc002ddd8
c001ccdc:	89 d3                	mov    ebx,edx
c001ccde:	89 0d e0 dd 02 c0    	mov    DWORD PTR ds:0xc002dde0,ecx
c001cce4:	1b 1d dc dd 02 c0    	sbb    ebx,DWORD PTR ds:0xc002dddc
c001ccea:	a3 d8 dd 02 c0       	mov    ds:0xc002ddd8,eax
c001ccef:	89 1d e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,ebx
c001ccf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccfa:	89 15 ec dd 02 c0    	mov    DWORD PTR ds:0xc002ddec,edx
c001cd00:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001cd03:	89 15 dc dd 02 c0    	mov    DWORD PTR ds:0xc002dddc,edx
c001cd09:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001cd0c:	01 f1                	add    ecx,esi
c001cd0e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001cd11:	11 fb                	adc    ebx,edi
c001cd13:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001cd16:	5b                   	pop    ebx
c001cd17:	5e                   	pop    esi
c001cd18:	5f                   	pop    edi
c001cd19:	c3                   	ret    
c001cd1a:	c3                   	ret    

c001cd1b <switchToThread(ThreadControlBlock*)>:
c001cd1b:	53                   	push   ebx
c001cd1c:	83 ec 08             	sub    esp,0x8
c001cd1f:	a1 a8 dd 02 c0       	mov    eax,ds:0xc002dda8
c001cd24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd28:	85 c0                	test   eax,eax
c001cd2a:	75 30                	jne    c001cd5c <switchToThread(ThreadControlBlock*)+0x41>
c001cd2c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001cd2f:	3c ff                	cmp    al,0xff
c001cd31:	74 25                	je     c001cd58 <switchToThread(ThreadControlBlock*)+0x3d>
c001cd33:	0f b6 d0             	movzx  edx,al
c001cd36:	b8 84 03 00 00       	mov    eax,0x384
c001cd3b:	29 d0                	sub    eax,edx
c001cd3d:	c1 e0 10             	shl    eax,0x10
c001cd40:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001cd43:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001cd46:	e8 6b ff ff ff       	call   c001ccb6 <updateTimeUsed()>
c001cd4b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001cd4f:	83 c4 08             	add    esp,0x8
c001cd52:	5b                   	pop    ebx
c001cd53:	e9 bf 35 fe ff       	jmp    c0000317 <switchToThreadASM>
c001cd58:	31 c0                	xor    eax,eax
c001cd5a:	eb e7                	jmp    c001cd43 <switchToThread(ThreadControlBlock*)+0x28>
c001cd5c:	c7 05 a4 dd 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002dda4,0x1
c001cd66:	83 c4 08             	add    esp,0x8
c001cd69:	5b                   	pop    ebx
c001cd6a:	c3                   	ret    
c001cd6b:	90                   	nop

c001cd6c <Semaphore::Semaphore(int)>:
c001cd6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cd74:	89 10                	mov    DWORD PTR [eax],edx
c001cd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd7a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cd81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd90:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cd97:	90                   	nop
c001cd98:	c3                   	ret    
c001cd99:	90                   	nop

c001cd9a <Mutex::Mutex()>:
c001cd9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd9e:	6a 01                	push   0x1
c001cda0:	50                   	push   eax
c001cda1:	e8 c6 ff ff ff       	call   c001cd6c <Semaphore::Semaphore(int)>
c001cda6:	83 c4 08             	add    esp,0x8
c001cda9:	90                   	nop
c001cdaa:	c3                   	ret    
c001cdab:	90                   	nop

c001cdac <Process::createThread(void (*)(void*), void*, int)>:
c001cdac:	55                   	push   ebp
c001cdad:	31 c9                	xor    ecx,ecx
c001cdaf:	57                   	push   edi
c001cdb0:	56                   	push   esi
c001cdb1:	53                   	push   ebx
c001cdb2:	83 ec 1c             	sub    esp,0x1c
c001cdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cdb9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001cdc0:	89 f2                	mov    edx,esi
c001cdc2:	0f b7 c2             	movzx  eax,dx
c001cdc5:	83 e2 01             	and    edx,0x1
c001cdc8:	74 14                	je     c001cdde <Process::createThread(void (*)(void*), void*, int)+0x32>
c001cdca:	d1 f8                	sar    eax,1
c001cdcc:	41                   	inc    ecx
c001cdcd:	89 c2                	mov    edx,eax
c001cdcf:	83 f9 10             	cmp    ecx,0x10
c001cdd2:	75 ee                	jne    c001cdc2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001cdd4:	83 c4 1c             	add    esp,0x1c
c001cdd7:	31 c0                	xor    eax,eax
c001cdd9:	5b                   	pop    ebx
c001cdda:	5e                   	pop    esi
c001cddb:	5f                   	pop    edi
c001cddc:	5d                   	pop    ebp
c001cddd:	c3                   	ret    
c001cdde:	83 ec 08             	sub    esp,0x8
c001cde1:	b8 01 00 00 00       	mov    eax,0x1
c001cde6:	d3 e0                	shl    eax,cl
c001cde8:	09 c6                	or     esi,eax
c001cdea:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cdf0:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001cdf7:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001cdfa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cdfd:	01 ce                	add    esi,ecx
c001cdff:	89 f0                	mov    eax,esi
c001ce01:	c1 e0 05             	shl    eax,0x5
c001ce04:	01 c6                	add    esi,eax
c001ce06:	8d 04 33             	lea    eax,[ebx+esi*1]
c001ce09:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001ce0f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001ce15:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ce19:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001ce1f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001ce25:	89 ca                	mov    edx,ecx
c001ce27:	f7 da                	neg    edx
c001ce29:	c1 e2 15             	shl    edx,0x15
c001ce2c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001ce32:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001ce38:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ce3c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001ce46:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001ce4c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ce50:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001ce56:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001ce60:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001ce6a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001ce71:	50                   	push   eax
c001ce72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce76:	68 c8 dd 02 c0       	push   0xc002ddc8
c001ce7b:	e8 c0 a5 00 00       	call   c0027440 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ce80:	83 c4 10             	add    esp,0x10
c001ce83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce87:	83 c4 1c             	add    esp,0x1c
c001ce8a:	5b                   	pop    ebx
c001ce8b:	5e                   	pop    esi
c001ce8c:	5f                   	pop    edi
c001ce8d:	5d                   	pop    ebp
c001ce8e:	c3                   	ret    
c001ce8f:	90                   	nop

c001ce90 <Process::createUserThread()>:
c001ce90:	83 ec 0c             	sub    esp,0xc
c001ce93:	68 80 00 00 00       	push   0x80
c001ce98:	6a 00                	push   0x0
c001ce9a:	68 7e cc 01 c0       	push   0xc001cc7e
c001ce9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cea3:	e8 04 ff ff ff       	call   c001cdac <Process::createThread(void (*)(void*), void*, int)>
c001cea8:	83 c4 1c             	add    esp,0x1c
c001ceab:	c3                   	ret    

c001ceac <setupMultitasking(void (*)())>:
c001ceac:	56                   	push   esi
c001cead:	53                   	push   ebx
c001ceae:	53                   	push   ebx
c001ceaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ceb3:	eb 10                	jmp    c001cec5 <setupMultitasking(void (*)())+0x19>
c001ceb5:	83 ec 0c             	sub    esp,0xc
c001ceb8:	68 c8 dd 02 c0       	push   0xc002ddc8
c001cebd:	e8 d0 a4 00 00       	call   c0027392 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cec2:	83 c4 10             	add    esp,0x10
c001cec5:	83 ec 0c             	sub    esp,0xc
c001cec8:	68 c8 dd 02 c0       	push   0xc002ddc8
c001cecd:	e8 a4 a4 00 00       	call   c0027376 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ced2:	83 c4 10             	add    esp,0x10
c001ced5:	84 c0                	test   al,al
c001ced7:	74 dc                	je     c001ceb5 <setupMultitasking(void (*)())+0x9>
c001ced9:	83 ec 0c             	sub    esp,0xc
c001cedc:	68 3f 07 00 00       	push   0x73f
c001cee1:	e8 ee 25 ff ff       	call   c000f4d4 <malloc>
c001cee6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ceed:	89 c3                	mov    ebx,eax
c001ceef:	6a 00                	push   0x0
c001cef1:	68 e8 a6 02 c0       	push   0xc002a6e8
c001cef6:	6a 01                	push   0x1
c001cef8:	50                   	push   eax
c001cef9:	e8 b0 fb ff ff       	call   c001caae <Process::Process(bool, char const*, Process*, char**)>
c001cefe:	83 c4 18             	add    esp,0x18
c001cf01:	89 1d d4 dd 02 c0    	mov    DWORD PTR ds:0xc002ddd4,ebx
c001cf07:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cf0d:	68 08 a8 02 c0       	push   0xc002a808
c001cf12:	e8 ba 57 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001cf17:	58                   	pop    eax
c001cf18:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cf1e:	e8 4e 39 ff ff       	call   c0010871 <setActiveTerminal(VgaText*)>
c001cf23:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001cf2b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cf31:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cf34:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001cf3e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001cf44:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001cf4a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001cf54:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001cf5e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001cf68:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001cf6e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001cf74:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001cf7e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001cf84:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001cf8e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001cf94:	5a                   	pop    edx
c001cf95:	59                   	pop    ecx
c001cf96:	68 e4 a6 02 c0       	push   0xc002a6e4
c001cf9b:	50                   	push   eax
c001cf9c:	e8 89 37 fe ff       	call   c000072a <strcpy>
c001cfa1:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001cfa8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001cfac:	83 c4 14             	add    esp,0x14
c001cfaf:	5b                   	pop    ebx
c001cfb0:	5e                   	pop    esi
c001cfb1:	e9 53 33 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001cfb6 <schedule()>:
c001cfb6:	a1 a8 dd 02 c0       	mov    eax,ds:0xc002dda8
c001cfbb:	85 c0                	test   eax,eax
c001cfbd:	74 0b                	je     c001cfca <schedule()+0x14>
c001cfbf:	c7 05 a4 dd 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002dda4,0x1
c001cfc9:	c3                   	ret    
c001cfca:	53                   	push   ebx
c001cfcb:	83 ec 14             	sub    esp,0x14
c001cfce:	68 c8 dd 02 c0       	push   0xc002ddc8
c001cfd3:	e8 9e a3 00 00       	call   c0027376 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cfd8:	83 c4 10             	add    esp,0x10
c001cfdb:	84 c0                	test   al,al
c001cfdd:	75 38                	jne    c001d017 <schedule()+0x61>
c001cfdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cfe4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cfe7:	4a                   	dec    edx
c001cfe8:	74 32                	je     c001d01c <schedule()+0x66>
c001cfea:	83 ec 0c             	sub    esp,0xc
c001cfed:	68 c8 dd 02 c0       	push   0xc002ddc8
c001cff2:	e8 77 a3 00 00       	call   c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cff7:	c7 04 24 c8 dd 02 c0 	mov    DWORD PTR [esp],0xc002ddc8
c001cffe:	89 c3                	mov    ebx,eax
c001d000:	e8 8d a3 00 00       	call   c0027392 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d005:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d00c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d00f:	e8 07 fd ff ff       	call   c001cd1b <switchToThread(ThreadControlBlock*)>
c001d014:	83 c4 10             	add    esp,0x10
c001d017:	83 c4 08             	add    esp,0x8
c001d01a:	5b                   	pop    ebx
c001d01b:	c3                   	ret    
c001d01c:	83 ec 08             	sub    esp,0x8
c001d01f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d026:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d02c:	68 c8 dd 02 c0       	push   0xc002ddc8
c001d031:	e8 0a a4 00 00       	call   c0027440 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d036:	83 c4 10             	add    esp,0x10
c001d039:	eb af                	jmp    c001cfea <schedule()+0x34>

c001d03b <unlockStuff()>:
c001d03b:	a1 a8 dd 02 c0       	mov    eax,ds:0xc002dda8
c001d040:	48                   	dec    eax
c001d041:	a3 a8 dd 02 c0       	mov    ds:0xc002dda8,eax
c001d046:	75 09                	jne    c001d051 <unlockStuff()+0x16>
c001d048:	a1 a4 dd 02 c0       	mov    eax,ds:0xc002dda4
c001d04d:	85 c0                	test   eax,eax
c001d04f:	75 05                	jne    c001d056 <unlockStuff()+0x1b>
c001d051:	e9 15 fc ff ff       	jmp    c001cc6b <enableIRQs()>
c001d056:	83 ec 0c             	sub    esp,0xc
c001d059:	c7 05 a4 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dda4,0x0
c001d063:	e8 4e ff ff ff       	call   c001cfb6 <schedule()>
c001d068:	83 c4 0c             	add    esp,0xc
c001d06b:	e9 fb fb ff ff       	jmp    c001cc6b <enableIRQs()>

c001d070 <Semaphore::tryAcquire()>:
c001d070:	83 ec 0c             	sub    esp,0xc
c001d073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d077:	e8 25 fc ff ff       	call   c001cca1 <lockStuff()>
c001d07c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d07f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d081:	7c 0b                	jl     c001d08e <Semaphore::tryAcquire()+0x1e>
c001d083:	e8 b3 ff ff ff       	call   c001d03b <unlockStuff()>
c001d088:	31 c0                	xor    eax,eax
c001d08a:	83 c4 0c             	add    esp,0xc
c001d08d:	c3                   	ret    
c001d08e:	42                   	inc    edx
c001d08f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d092:	e8 a4 ff ff ff       	call   c001d03b <unlockStuff()>
c001d097:	b0 01                	mov    al,0x1
c001d099:	83 c4 0c             	add    esp,0xc
c001d09c:	c3                   	ret    
c001d09d:	90                   	nop

c001d09e <Semaphore::assertLocked(char const*)>:
c001d09e:	83 ec 0c             	sub    esp,0xc
c001d0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d0a9:	e8 f3 fb ff ff       	call   c001cca1 <lockStuff()>
c001d0ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d0b0:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d0b3:	7c 05                	jl     c001d0ba <Semaphore::assertLocked(char const*)+0x1c>
c001d0b5:	83 c4 0c             	add    esp,0xc
c001d0b8:	eb 81                	jmp    c001d03b <unlockStuff()>
c001d0ba:	83 ec 0c             	sub    esp,0xc
c001d0bd:	52                   	push   edx
c001d0be:	e8 28 c7 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001d0c3:	83 c4 10             	add    esp,0x10
c001d0c6:	83 c4 0c             	add    esp,0xc
c001d0c9:	e9 6d ff ff ff       	jmp    c001d03b <unlockStuff()>

c001d0ce <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d0ce:	83 ec 0c             	sub    esp,0xc
c001d0d1:	e8 8f fb ff ff       	call   c001cc65 <getIRQNestingLevel()>
c001d0d6:	83 ec 08             	sub    esp,0x8
c001d0d9:	50                   	push   eax
c001d0da:	68 3c a8 02 c0       	push   0xc002a83c
c001d0df:	e8 ed 55 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d0e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d0e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d0f0:	e8 c1 fe ff ff       	call   c001cfb6 <schedule()>
c001d0f5:	e8 82 fb ff ff       	call   c001cc7c <unlockScheduler()>
c001d0fa:	e8 66 fb ff ff       	call   c001cc65 <getIRQNestingLevel()>
c001d0ff:	5a                   	pop    edx
c001d100:	59                   	pop    ecx
c001d101:	50                   	push   eax
c001d102:	68 70 a8 02 c0       	push   0xc002a870
c001d107:	e8 c5 55 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d10c:	83 c4 1c             	add    esp,0x1c
c001d10f:	c3                   	ret    

c001d110 <blockTask(TaskState)>:
c001d110:	83 ec 0c             	sub    esp,0xc
c001d113:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d117:	e8 5e fb ff ff       	call   c001cc7a <lockScheduler()>
c001d11c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d121:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d124:	e8 8d fe ff ff       	call   c001cfb6 <schedule()>
c001d129:	83 c4 0c             	add    esp,0xc
c001d12c:	e9 4b fb ff ff       	jmp    c001cc7c <unlockScheduler()>

c001d131 <waitTask(int, int*, int)>:
c001d131:	83 ec 18             	sub    esp,0x18
c001d134:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d139:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d13d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d140:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d144:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d149:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d14c:	6a 07                	push   0x7
c001d14e:	e8 bd ff ff ff       	call   c001d110 <blockTask(TaskState)>
c001d153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d158:	83 c4 10             	add    esp,0x10
c001d15b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d15e:	85 d2                	test   edx,edx
c001d160:	74 0a                	je     c001d16c <waitTask(int, int*, int)+0x3b>
c001d162:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d165:	89 02                	mov    DWORD PTR [edx],eax
c001d167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d16c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d16f:	83 c4 0c             	add    esp,0xc
c001d172:	c3                   	ret    

c001d173 <nanoSleepUntil(unsigned long long)>:
c001d173:	83 ec 0c             	sub    esp,0xc
c001d176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d17a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d17e:	3b 05 10 cf 02 c0    	cmp    eax,DWORD PTR ds:0xc002cf10
c001d184:	89 d1                	mov    ecx,edx
c001d186:	1b 0d 14 cf 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cf14
c001d18c:	73 04                	jae    c001d192 <nanoSleepUntil(unsigned long long)+0x1f>
c001d18e:	83 c4 0c             	add    esp,0xc
c001d191:	c3                   	ret    
c001d192:	e8 0a fb ff ff       	call   c001cca1 <lockStuff()>
c001d197:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d19d:	83 ec 08             	sub    esp,0x8
c001d1a0:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d1a3:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d1a6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d1ac:	68 bc dd 02 c0       	push   0xc002ddbc
c001d1b1:	e8 8a a2 00 00       	call   c0027440 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d1b6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d1bd:	e8 4e ff ff ff       	call   c001d110 <blockTask(TaskState)>
c001d1c2:	83 c4 1c             	add    esp,0x1c
c001d1c5:	e9 71 fe ff ff       	jmp    c001d03b <unlockStuff()>

c001d1ca <nanoSleep(unsigned long long)>:
c001d1ca:	a1 10 cf 02 c0       	mov    eax,ds:0xc002cf10
c001d1cf:	8b 15 14 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf14
c001d1d5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d1d9:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d1dd:	eb 94                	jmp    c001d173 <nanoSleepUntil(unsigned long long)>

c001d1df <sleep(unsigned long long)>:
c001d1df:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d1e7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d1ec:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d1f0:	01 ca                	add    edx,ecx
c001d1f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d1fa:	eb ce                	jmp    c001d1ca <nanoSleep(unsigned long long)>

c001d1fc <Semaphore::acquire()>:
c001d1fc:	83 ec 0c             	sub    esp,0xc
c001d1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d203:	e8 99 fa ff ff       	call   c001cca1 <lockStuff()>
c001d208:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d20b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d20d:	7d 0c                	jge    c001d21b <Semaphore::acquire()+0x1f>
c001d20f:	42                   	inc    edx
c001d210:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d213:	83 c4 0c             	add    esp,0xc
c001d216:	e9 20 fe ff ff       	jmp    c001d03b <unlockStuff()>
c001d21b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d221:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d228:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d22b:	85 d2                	test   edx,edx
c001d22d:	74 2a                	je     c001d259 <Semaphore::acquire()+0x5d>
c001d22f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d232:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d238:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d23b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d241:	83 ec 0c             	sub    esp,0xc
c001d244:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d247:	6a 05                	push   0x5
c001d249:	e8 c2 fe ff ff       	call   c001d110 <blockTask(TaskState)>
c001d24e:	83 c4 10             	add    esp,0x10
c001d251:	83 c4 0c             	add    esp,0xc
c001d254:	e9 e2 fd ff ff       	jmp    c001d03b <unlockStuff()>
c001d259:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d25f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d262:	eb d7                	jmp    c001d23b <Semaphore::acquire()+0x3f>

c001d264 <taskReturned>:
c001d264:	83 ec 18             	sub    esp,0x18
c001d267:	68 a4 a8 02 c0       	push   0xc002a8a4
c001d26c:	e8 7a c5 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001d271:	83 c4 10             	add    esp,0x10
c001d274:	83 ec 0c             	sub    esp,0xc
c001d277:	6a 02                	push   0x2
c001d279:	e8 92 fe ff ff       	call   c001d110 <blockTask(TaskState)>
c001d27e:	e8 f7 f9 ff ff       	call   c001cc7a <lockScheduler()>
c001d283:	e8 2e fd ff ff       	call   c001cfb6 <schedule()>
c001d288:	e8 ef f9 ff ff       	call   c001cc7c <unlockScheduler()>
c001d28d:	83 c4 10             	add    esp,0x10
c001d290:	eb e2                	jmp    c001d274 <taskReturned+0x10>

c001d292 <unblockTask(ThreadControlBlock*)>:
c001d292:	53                   	push   ebx
c001d293:	83 ec 08             	sub    esp,0x8
c001d296:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d29a:	e8 db f9 ff ff       	call   c001cc7a <lockScheduler()>
c001d29f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d2a2:	85 c0                	test   eax,eax
c001d2a4:	74 5c                	je     c001d302 <unblockTask(ThreadControlBlock*)+0x70>
c001d2a6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d2a9:	48                   	dec    eax
c001d2aa:	74 31                	je     c001d2dd <unblockTask(ThreadControlBlock*)+0x4b>
c001d2ac:	83 ec 0c             	sub    esp,0xc
c001d2af:	68 c8 dd 02 c0       	push   0xc002ddc8
c001d2b4:	e8 b5 a0 00 00       	call   c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d2b9:	83 c4 10             	add    esp,0x10
c001d2bc:	85 c0                	test   eax,eax
c001d2be:	75 17                	jne    c001d2d7 <unblockTask(ThreadControlBlock*)+0x45>
c001d2c0:	eb 65                	jmp    c001d327 <unblockTask(ThreadControlBlock*)+0x95>
c001d2c2:	83 ec 08             	sub    esp,0x8
c001d2c5:	50                   	push   eax
c001d2c6:	68 c8 dd 02 c0       	push   0xc002ddc8
c001d2cb:	e8 78 a3 00 00       	call   c0027648 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d2d0:	83 c4 10             	add    esp,0x10
c001d2d3:	85 c0                	test   eax,eax
c001d2d5:	74 50                	je     c001d327 <unblockTask(ThreadControlBlock*)+0x95>
c001d2d7:	39 c3                	cmp    ebx,eax
c001d2d9:	75 e7                	jne    c001d2c2 <unblockTask(ThreadControlBlock*)+0x30>
c001d2db:	eb 1c                	jmp    c001d2f9 <unblockTask(ThreadControlBlock*)+0x67>
c001d2dd:	83 ec 0c             	sub    esp,0xc
c001d2e0:	68 94 a9 02 c0       	push   0xc002a994
c001d2e5:	e8 e7 53 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d2ea:	c7 04 24 20 a9 02 c0 	mov    DWORD PTR [esp],0xc002a920
c001d2f1:	e8 db 53 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d2f6:	83 c4 10             	add    esp,0x10
c001d2f9:	83 c4 08             	add    esp,0x8
c001d2fc:	5b                   	pop    ebx
c001d2fd:	e9 7a f9 ff ff       	jmp    c001cc7c <unlockScheduler()>
c001d302:	83 ec 0c             	sub    esp,0xc
c001d305:	68 d8 a8 02 c0       	push   0xc002a8d8
c001d30a:	e8 c2 53 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d30f:	c7 04 24 20 a9 02 c0 	mov    DWORD PTR [esp],0xc002a920
c001d316:	e8 b6 53 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d31b:	83 c4 10             	add    esp,0x10
c001d31e:	83 c4 08             	add    esp,0x8
c001d321:	5b                   	pop    ebx
c001d322:	e9 55 f9 ff ff       	jmp    c001cc7c <unlockScheduler()>
c001d327:	83 ec 08             	sub    esp,0x8
c001d32a:	53                   	push   ebx
c001d32b:	68 c8 dd 02 c0       	push   0xc002ddc8
c001d330:	e8 0b a1 00 00       	call   c0027440 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d335:	83 c4 10             	add    esp,0x10
c001d338:	83 c4 08             	add    esp,0x8
c001d33b:	5b                   	pop    ebx
c001d33c:	e9 3b f9 ff ff       	jmp    c001cc7c <unlockScheduler()>

c001d341 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d341:	55                   	push   ebp
c001d342:	57                   	push   edi
c001d343:	56                   	push   esi
c001d344:	53                   	push   ebx
c001d345:	83 ec 1c             	sub    esp,0x1c
c001d348:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d34c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d34f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d355:	85 ff                	test   edi,edi
c001d357:	7e 20                	jle    c001d379 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d359:	31 f6                	xor    esi,esi
c001d35b:	83 ec 0c             	sub    esp,0xc
c001d35e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d365:	46                   	inc    esi
c001d366:	e8 79 21 ff ff       	call   c000f4e4 <free>
c001d36b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d377:	7f e2                	jg     c001d35b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d379:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d383:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d388:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d38b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d38e:	d3 c0                	rol    eax,cl
c001d390:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d397:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d39a:	89 f7                	mov    edi,esi
c001d39c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d3a4:	0f 85 74 01 00 00    	jne    c001d51e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d3aa:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d3b0:	85 ed                	test   ebp,ebp
c001d3b2:	74 1b                	je     c001d3cf <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d3b4:	83 ec 0c             	sub    esp,0xc
c001d3b7:	55                   	push   ebp
c001d3b8:	e8 9b c1 ff ff       	call   c0019558 <EnvVarContainer::~EnvVarContainer()>
c001d3bd:	59                   	pop    ecx
c001d3be:	5e                   	pop    esi
c001d3bf:	6a 0c                	push   0xc
c001d3c1:	55                   	push   ebp
c001d3c2:	e8 2a 52 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001d3c7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d3ca:	83 c4 10             	add    esp,0x10
c001d3cd:	89 f7                	mov    edi,esi
c001d3cf:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d3d5:	85 c0                	test   eax,eax
c001d3d7:	0f 84 aa 00 00 00    	je     c001d487 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d3dd:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d3e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d3e4:	31 c9                	xor    ecx,ecx
c001d3e6:	eb 10                	jmp    c001d3f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d3e8:	41                   	inc    ecx
c001d3e9:	83 f9 10             	cmp    ecx,0x10
c001d3ec:	0f 84 95 00 00 00    	je     c001d487 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d3f2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d3f8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d3ff:	d3 fa                	sar    edx,cl
c001d401:	83 e2 01             	and    edx,0x1
c001d404:	74 e2                	je     c001d3e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d406:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d409:	01 ca                	add    edx,ecx
c001d40b:	89 d5                	mov    ebp,edx
c001d40d:	c1 e5 05             	shl    ebp,0x5
c001d410:	01 ea                	add    edx,ebp
c001d412:	01 d0                	add    eax,edx
c001d414:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d41a:	83 fd 07             	cmp    ebp,0x7
c001d41d:	75 c9                	jne    c001d3e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d41f:	05 40 02 00 00       	add    eax,0x240
c001d424:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d427:	83 fd ff             	cmp    ebp,0xffffffff
c001d42a:	0f 8c 08 01 00 00    	jl     c001d538 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d430:	0f 84 b9 01 00 00    	je     c001d5ef <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d436:	85 ed                	test   ebp,ebp
c001d438:	0f 84 a0 01 00 00    	je     c001d5de <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d43e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d440:	75 a6                	jne    c001d3e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d442:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d448:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d44c:	01 d0                	add    eax,edx
c001d44e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d452:	83 ec 0c             	sub    esp,0xc
c001d455:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d45b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d45e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d464:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d46b:	50                   	push   eax
c001d46c:	e8 21 fe ff ff       	call   c001d292 <unblockTask(ThreadControlBlock*)>
c001d471:	83 c4 10             	add    esp,0x10
c001d474:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d477:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d47b:	89 f7                	mov    edi,esi
c001d47d:	41                   	inc    ecx
c001d47e:	83 f9 10             	cmp    ecx,0x10
c001d481:	0f 85 6b ff ff ff    	jne    c001d3f2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d487:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d48d:	85 c0                	test   eax,eax
c001d48f:	74 5d                	je     c001d4ee <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d491:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d497:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d49d:	74 4f                	je     c001d4ee <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d49f:	83 ec 0c             	sub    esp,0xc
c001d4a2:	68 c8 dd 02 c0       	push   0xc002ddc8
c001d4a7:	e8 c2 9e 00 00       	call   c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d4ac:	c7 04 24 c8 dd 02 c0 	mov    DWORD PTR [esp],0xc002ddc8
c001d4b3:	89 c7                	mov    edi,eax
c001d4b5:	e8 bc 9e 00 00       	call   c0027376 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d4ba:	83 c4 10             	add    esp,0x10
c001d4bd:	84 c0                	test   al,al
c001d4bf:	0f 84 e4 00 00 00    	je     c001d5a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d4c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d4c8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d4ce:	85 d2                	test   edx,edx
c001d4d0:	74 0f                	je     c001d4e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d4d2:	83 ec 0c             	sub    esp,0xc
c001d4d5:	8b 02                	mov    eax,DWORD PTR [edx]
c001d4d7:	52                   	push   edx
c001d4d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d4db:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d4de:	83 c4 10             	add    esp,0x10
c001d4e1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d4eb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d4ee:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d4f4:	85 db                	test   ebx,ebx
c001d4f6:	74 16                	je     c001d50e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d4f8:	83 ec 0c             	sub    esp,0xc
c001d4fb:	53                   	push   ebx
c001d4fc:	e8 3f 47 ff ff       	call   c0011c40 <VAS::~VAS()>
c001d501:	58                   	pop    eax
c001d502:	5a                   	pop    edx
c001d503:	6a 10                	push   0x10
c001d505:	53                   	push   ebx
c001d506:	e8 e6 50 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001d50b:	83 c4 10             	add    esp,0x10
c001d50e:	83 ec 0c             	sub    esp,0xc
c001d511:	68 ef a6 02 c0       	push   0xc002a6ef
c001d516:	e8 b6 51 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d51b:	83 c4 10             	add    esp,0x10
c001d51e:	83 ec 08             	sub    esp,0x8
c001d521:	68 3f 07 00 00       	push   0x73f
c001d526:	68 fd a6 02 c0       	push   0xc002a6fd
c001d52b:	e8 a1 51 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d530:	83 c4 2c             	add    esp,0x2c
c001d533:	5b                   	pop    ebx
c001d534:	5e                   	pop    esi
c001d535:	5f                   	pop    edi
c001d536:	5d                   	pop    ebp
c001d537:	c3                   	ret    
c001d538:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d53c:	83 ec 0c             	sub    esp,0xc
c001d53f:	68 d8 a9 02 c0       	push   0xc002a9d8
c001d544:	e8 a2 c2 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001d549:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d54c:	83 c4 10             	add    esp,0x10
c001d54f:	89 f7                	mov    edi,esi
c001d551:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d555:	e9 8e fe ff ff       	jmp    c001d3e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d55a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d560:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d566:	75 1c                	jne    c001d584 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d568:	83 ec 0c             	sub    esp,0xc
c001d56b:	68 40 aa 02 c0       	push   0xc002aa40
c001d570:	e8 5c 51 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d575:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d57c:	e8 8f fb ff ff       	call   c001d110 <blockTask(TaskState)>
c001d581:	83 c4 10             	add    esp,0x10
c001d584:	83 ec 08             	sub    esp,0x8
c001d587:	56                   	push   esi
c001d588:	68 c8 dd 02 c0       	push   0xc002ddc8
c001d58d:	e8 ae 9e 00 00       	call   c0027440 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d592:	c7 04 24 c8 dd 02 c0 	mov    DWORD PTR [esp],0xc002ddc8
c001d599:	e8 d0 9d 00 00       	call   c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d59e:	83 c4 10             	add    esp,0x10
c001d5a1:	39 f8                	cmp    eax,edi
c001d5a3:	0f 84 1c ff ff ff    	je     c001d4c5 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d5a9:	83 ec 0c             	sub    esp,0xc
c001d5ac:	68 c8 dd 02 c0       	push   0xc002ddc8
c001d5b1:	e8 b8 9d 00 00       	call   c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d5b6:	c7 04 24 c8 dd 02 c0 	mov    DWORD PTR [esp],0xc002ddc8
c001d5bd:	89 c6                	mov    esi,eax
c001d5bf:	e8 ce 9d 00 00       	call   c0027392 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d5c4:	83 c4 10             	add    esp,0x10
c001d5c7:	39 f3                	cmp    ebx,esi
c001d5c9:	74 b9                	je     c001d584 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d5cb:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d5ce:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5d1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d5d7:	75 ab                	jne    c001d584 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d5d9:	e9 7c ff ff ff       	jmp    c001d55a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d5de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d5e2:	83 ec 0c             	sub    esp,0xc
c001d5e5:	68 0c aa 02 c0       	push   0xc002aa0c
c001d5ea:	e9 55 ff ff ff       	jmp    c001d544 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d5ef:	8b 36                	mov    esi,DWORD PTR [esi]
c001d5f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d5f5:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d5f8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5fb:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d601:	01 d7                	add    edi,edx
c001d603:	89 f8                	mov    eax,edi
c001d605:	e9 44 fe ff ff       	jmp    c001d44e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d60a <cleanerTaskFunction(void*)>:
c001d60a:	53                   	push   ebx
c001d60b:	83 ec 08             	sub    esp,0x8
c001d60e:	e8 69 f6 ff ff       	call   c001cc7c <unlockScheduler()>
c001d613:	e8 62 f6 ff ff       	call   c001cc7a <lockScheduler()>
c001d618:	80 3d 8c dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd8c,0x0
c001d61f:	0f 85 8e 00 00 00    	jne    c001d6b3 <cleanerTaskFunction(void*)+0xa9>
c001d625:	83 ec 0c             	sub    esp,0xc
c001d628:	6a 02                	push   0x2
c001d62a:	e8 9f fa ff ff       	call   c001d0ce <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d62f:	83 c4 10             	add    esp,0x10
c001d632:	c6 05 8c dd 02 c0 00 	mov    BYTE PTR ds:0xc002dd8c,0x0
c001d639:	e8 63 f6 ff ff       	call   c001cca1 <lockStuff()>
c001d63e:	e8 37 f6 ff ff       	call   c001cc7a <lockScheduler()>
c001d643:	83 ec 0c             	sub    esp,0xc
c001d646:	68 b0 dd 02 c0       	push   0xc002ddb0
c001d64b:	e8 26 9d 00 00       	call   c0027376 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d650:	83 c4 10             	add    esp,0x10
c001d653:	84 c0                	test   al,al
c001d655:	75 40                	jne    c001d697 <cleanerTaskFunction(void*)+0x8d>
c001d657:	83 ec 0c             	sub    esp,0xc
c001d65a:	68 b0 dd 02 c0       	push   0xc002ddb0
c001d65f:	e8 0a 9d 00 00       	call   c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d664:	c7 04 24 b0 dd 02 c0 	mov    DWORD PTR [esp],0xc002ddb0
c001d66b:	89 c3                	mov    ebx,eax
c001d66d:	e8 20 9d 00 00       	call   c0027392 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d672:	c7 04 24 13 a7 02 c0 	mov    DWORD PTR [esp],0xc002a713
c001d679:	e8 53 50 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d67e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d681:	e8 bb fc ff ff       	call   c001d341 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d686:	c7 04 24 2c a7 02 c0 	mov    DWORD PTR [esp],0xc002a72c
c001d68d:	e8 3f 50 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d692:	83 c4 10             	add    esp,0x10
c001d695:	eb ac                	jmp    c001d643 <cleanerTaskFunction(void*)+0x39>
c001d697:	e8 e0 f5 ff ff       	call   c001cc7c <unlockScheduler()>
c001d69c:	e8 9a f9 ff ff       	call   c001d03b <unlockStuff()>
c001d6a1:	e8 d4 f5 ff ff       	call   c001cc7a <lockScheduler()>
c001d6a6:	80 3d 8c dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd8c,0x0
c001d6ad:	0f 84 72 ff ff ff    	je     c001d625 <cleanerTaskFunction(void*)+0x1b>
c001d6b3:	e8 c4 f5 ff ff       	call   c001cc7c <unlockScheduler()>
c001d6b8:	e9 75 ff ff ff       	jmp    c001d632 <cleanerTaskFunction(void*)+0x28>

c001d6bd <terminateTask(int)>:
c001d6bd:	83 ec 14             	sub    esp,0x14
c001d6c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d6c8:	83 c0 0c             	add    eax,0xc
c001d6cb:	50                   	push   eax
c001d6cc:	68 68 aa 02 c0       	push   0xc002aa68
c001d6d1:	e8 fb 4f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d6d6:	e8 c6 f5 ff ff       	call   c001cca1 <lockStuff()>
c001d6db:	e8 9a f5 ff ff       	call   c001cc7a <lockScheduler()>
c001d6e0:	c7 04 24 3f a7 02 c0 	mov    DWORD PTR [esp],0xc002a73f
c001d6e7:	e8 e5 4f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d6ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d6f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6f5:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d6f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6fd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d700:	5a                   	pop    edx
c001d701:	59                   	pop    ecx
c001d702:	50                   	push   eax
c001d703:	68 b0 dd 02 c0       	push   0xc002ddb0
c001d708:	e8 33 9d 00 00       	call   c0027440 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d70d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d712:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d719:	c7 04 24 59 a7 02 c0 	mov    DWORD PTR [esp],0xc002a759
c001d720:	e8 ac 4f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d725:	83 c4 10             	add    esp,0x10
c001d728:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001d72d:	85 c0                	test   eax,eax
c001d72f:	74 5a                	je     c001d78b <terminateTask(int)+0xce>
c001d731:	83 ec 0c             	sub    esp,0xc
c001d734:	68 73 a7 02 c0       	push   0xc002a773
c001d739:	e8 93 4f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d73e:	58                   	pop    eax
c001d73f:	c6 05 8c dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd8c,0x1
c001d746:	ff 35 88 dd 02 c0    	push   DWORD PTR ds:0xc002dd88
c001d74c:	e8 41 fb ff ff       	call   c001d292 <unblockTask(ThreadControlBlock*)>
c001d751:	c7 04 24 8d a7 02 c0 	mov    DWORD PTR [esp],0xc002a78d
c001d758:	e8 74 4f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d75d:	83 c4 10             	add    esp,0x10
c001d760:	e8 17 f5 ff ff       	call   c001cc7c <unlockScheduler()>
c001d765:	e8 d1 f8 ff ff       	call   c001d03b <unlockStuff()>
c001d76a:	83 ec 0c             	sub    esp,0xc
c001d76d:	68 c5 a7 02 c0       	push   0xc002a7c5
c001d772:	e8 5a 4f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d777:	83 c4 10             	add    esp,0x10
c001d77a:	e8 fb f4 ff ff       	call   c001cc7a <lockScheduler()>
c001d77f:	e8 32 f8 ff ff       	call   c001cfb6 <schedule()>
c001d784:	e8 f3 f4 ff ff       	call   c001cc7c <unlockScheduler()>
c001d789:	eb ef                	jmp    c001d77a <terminateTask(int)+0xbd>
c001d78b:	83 ec 0c             	sub    esp,0xc
c001d78e:	68 a7 a7 02 c0       	push   0xc002a7a7
c001d793:	e8 39 4f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d798:	83 c4 10             	add    esp,0x10
c001d79b:	eb c3                	jmp    c001d760 <terminateTask(int)+0xa3>

c001d79d <Thr::terminateFromIRQ(int)>:
c001d79d:	83 ec 18             	sub    esp,0x18
c001d7a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7a4:	e8 14 ff ff ff       	call   c001d6bd <terminateTask(int)>
c001d7a9:	90                   	nop

c001d7aa <Semaphore::release()>:
c001d7aa:	83 ec 0c             	sub    esp,0xc
c001d7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b1:	e8 eb f4 ff ff       	call   c001cca1 <lockStuff()>
c001d7b6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d7b9:	85 d2                	test   edx,edx
c001d7bb:	74 1a                	je     c001d7d7 <Semaphore::release()+0x2d>
c001d7bd:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d7c0:	83 ec 0c             	sub    esp,0xc
c001d7c3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d7c6:	52                   	push   edx
c001d7c7:	e8 c6 fa ff ff       	call   c001d292 <unblockTask(ThreadControlBlock*)>
c001d7cc:	83 c4 10             	add    esp,0x10
c001d7cf:	83 c4 0c             	add    esp,0xc
c001d7d2:	e9 64 f8 ff ff       	jmp    c001d03b <unlockStuff()>
c001d7d7:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d7da:	83 c4 0c             	add    esp,0xc
c001d7dd:	e9 59 f8 ff ff       	jmp    c001d03b <unlockStuff()>

c001d7e2 <__static_initialization_and_destruction_0(int, int)>:
c001d7e2:	83 ec 0c             	sub    esp,0xc
c001d7e5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d7ea:	0f 85 88 00 00 00    	jne    c001d878 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d7f0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d7f8:	75 7e                	jne    c001d878 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d7fa:	83 ec 0c             	sub    esp,0xc
c001d7fd:	68 c8 dd 02 c0       	push   0xc002ddc8
c001d802:	e8 e9 9d 00 00       	call   c00275f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d807:	83 c4 10             	add    esp,0x10
c001d80a:	83 ec 04             	sub    esp,0x4
c001d80d:	68 c8 b7 02 c0       	push   0xc002b7c8
c001d812:	68 c8 dd 02 c0       	push   0xc002ddc8
c001d817:	68 b0 75 02 c0       	push   0xc00275b0
c001d81c:	e8 4a 4d ff ff       	call   c001256b <__cxa_atexit>
c001d821:	83 c4 10             	add    esp,0x10
c001d824:	83 ec 0c             	sub    esp,0xc
c001d827:	68 bc dd 02 c0       	push   0xc002ddbc
c001d82c:	e8 bf 9d 00 00       	call   c00275f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d831:	83 c4 10             	add    esp,0x10
c001d834:	83 ec 04             	sub    esp,0x4
c001d837:	68 c8 b7 02 c0       	push   0xc002b7c8
c001d83c:	68 bc dd 02 c0       	push   0xc002ddbc
c001d841:	68 b0 75 02 c0       	push   0xc00275b0
c001d846:	e8 20 4d ff ff       	call   c001256b <__cxa_atexit>
c001d84b:	83 c4 10             	add    esp,0x10
c001d84e:	83 ec 0c             	sub    esp,0xc
c001d851:	68 b0 dd 02 c0       	push   0xc002ddb0
c001d856:	e8 95 9d 00 00       	call   c00275f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d85b:	83 c4 10             	add    esp,0x10
c001d85e:	83 ec 04             	sub    esp,0x4
c001d861:	68 c8 b7 02 c0       	push   0xc002b7c8
c001d866:	68 b0 dd 02 c0       	push   0xc002ddb0
c001d86b:	68 b0 75 02 c0       	push   0xc00275b0
c001d870:	e8 f6 4c ff ff       	call   c001256b <__cxa_atexit>
c001d875:	83 c4 10             	add    esp,0x10
c001d878:	90                   	nop
c001d879:	83 c4 0c             	add    esp,0xc
c001d87c:	c3                   	ret    

c001d87d <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d87d:	83 ec 0c             	sub    esp,0xc
c001d880:	83 ec 08             	sub    esp,0x8
c001d883:	68 ff ff 00 00       	push   0xffff
c001d888:	6a 01                	push   0x1
c001d88a:	e8 53 ff ff ff       	call   c001d7e2 <__static_initialization_and_destruction_0(int, int)>
c001d88f:	83 c4 10             	add    esp,0x10
c001d892:	83 c4 0c             	add    esp,0xc
c001d895:	c3                   	ret    

c001d896 <Vm::inbv(unsigned short)>:
c001d896:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d89a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d89f:	75 06                	jne    c001d8a7 <Vm::inbv(unsigned short)+0x11>
c001d8a1:	a0 0c de 02 c0       	mov    al,ds:0xc002de0c
c001d8a6:	c3                   	ret    
c001d8a7:	ec                   	in     al,dx
c001d8a8:	c3                   	ret    

c001d8a9 <Vm::outbv(unsigned short, unsigned char)>:
c001d8a9:	53                   	push   ebx
c001d8aa:	83 ec 08             	sub    esp,0x8
c001d8ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d8b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d8b5:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d8ba:	75 38                	jne    c001d8f4 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d8bc:	0f b6 c3             	movzx  eax,bl
c001d8bf:	51                   	push   ecx
c001d8c0:	51                   	push   ecx
c001d8c1:	50                   	push   eax
c001d8c2:	68 87 aa 02 c0       	push   0xc002aa87
c001d8c7:	e8 05 4e ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001d8cc:	8b 15 0c de 02 c0    	mov    edx,DWORD PTR ds:0xc002de0c
c001d8d2:	83 c4 10             	add    esp,0x10
c001d8d5:	8d 42 01             	lea    eax,[edx+0x1]
c001d8d8:	88 9a 20 de 02 c0    	mov    BYTE PTR [edx-0x3ffd21e0],bl
c001d8de:	a3 0c de 02 c0       	mov    ds:0xc002de0c,eax
c001d8e3:	83 f8 20             	cmp    eax,0x20
c001d8e6:	75 0f                	jne    c001d8f7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d8e8:	c7 05 0c de 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002de0c,0x1f
c001d8f2:	eb 03                	jmp    c001d8f7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d8f4:	88 d8                	mov    al,bl
c001d8f6:	ee                   	out    dx,al
c001d8f7:	83 c4 08             	add    esp,0x8
c001d8fa:	5b                   	pop    ebx
c001d8fb:	c3                   	ret    

c001d8fc <Vm::realToLinear(unsigned short, unsigned short)>:
c001d8fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d901:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d906:	c1 e0 04             	shl    eax,0x4
c001d909:	01 d0                	add    eax,edx
c001d90b:	c3                   	ret    

c001d90c <Vm::getSegment(unsigned int)>:
c001d90c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d910:	c1 e8 10             	shr    eax,0x10
c001d913:	c3                   	ret    

c001d914 <Vm::getOffset(unsigned int)>:
c001d914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d918:	c3                   	ret    

c001d919 <Vm::mainloop2()>:
c001d919:	83 ec 0c             	sub    esp,0xc
c001d91c:	e8 59 f3 ff ff       	call   c001cc7a <lockScheduler()>
c001d921:	83 ec 0c             	sub    esp,0xc
c001d924:	c6 05 05 de 02 c0 01 	mov    BYTE PTR ds:0xc002de05,0x1
c001d92b:	6a 02                	push   0x2
c001d92d:	e8 9c f7 ff ff       	call   c001d0ce <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d932:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d937:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d93b:	52                   	push   edx
c001d93c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001d940:	52                   	push   edx
c001d941:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001d945:	52                   	push   edx
c001d946:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001d94a:	50                   	push   eax
c001d94b:	e8 5f 29 fe ff       	call   c00002af <goToVM86>
c001d950:	83 c4 2c             	add    esp,0x2c
c001d953:	c3                   	ret    

c001d954 <Vm::mainVm8086Loop(void*)>:
c001d954:	83 ec 0c             	sub    esp,0xc
c001d957:	e8 20 f3 ff ff       	call   c001cc7c <unlockScheduler()>
c001d95c:	83 c4 0c             	add    esp,0xc
c001d95f:	eb b8                	jmp    c001d919 <Vm::mainloop2()>

c001d961 <Vm::mainloop3(unsigned long)>:
c001d961:	53                   	push   ebx
c001d962:	83 ec 08             	sub    esp,0x8
c001d965:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d969:	e8 0c f3 ff ff       	call   c001cc7a <lockScheduler()>
c001d96e:	83 ec 0c             	sub    esp,0xc
c001d971:	89 1d 00 de 02 c0    	mov    DWORD PTR ds:0xc002de00,ebx
c001d977:	6a 02                	push   0x2
c001d979:	c6 05 04 de 02 c0 01 	mov    BYTE PTR ds:0xc002de04,0x1
c001d980:	e8 49 f7 ff ff       	call   c001d0ce <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d985:	83 c4 18             	add    esp,0x18
c001d988:	5b                   	pop    ebx
c001d989:	eb 8e                	jmp    c001d919 <Vm::mainloop2()>

c001d98b <Vm::initialise8086()>:
c001d98b:	83 ec 0c             	sub    esp,0xc
c001d98e:	68 80 00 00 00       	push   0x80
c001d993:	6a 00                	push   0x0
c001d995:	68 54 d9 01 c0       	push   0xc001d954
c001d99a:	ff 35 d4 dd 02 c0    	push   DWORD PTR ds:0xc002ddd4
c001d9a0:	e8 07 f4 ff ff       	call   c001cdac <Process::createThread(void (*)(void*), void*, int)>
c001d9a5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001d9ac:	a3 08 de 02 c0       	mov    ds:0xc002de08,eax
c001d9b1:	68 00 01 00 00       	push   0x100
c001d9b6:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c001d9bb:	6a 00                	push   0x0
c001d9bd:	6a 00                	push   0x0
c001d9bf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001d9c5:	e8 d6 46 ff ff       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d9ca:	83 c4 2c             	add    esp,0x2c
c001d9cd:	c3                   	ret    

c001d9ce <Vm::finish8086()>:
c001d9ce:	53                   	push   ebx
c001d9cf:	83 ec 08             	sub    esp,0x8
c001d9d2:	e8 a3 f2 ff ff       	call   c001cc7a <lockScheduler()>
c001d9d7:	80 3d 04 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de04,0x0
c001d9de:	75 0c                	jne    c001d9ec <Vm::finish8086()+0x1e>
c001d9e0:	e8 d1 f5 ff ff       	call   c001cfb6 <schedule()>
c001d9e5:	e8 92 f2 ff ff       	call   c001cc7c <unlockScheduler()>
c001d9ea:	eb e6                	jmp    c001d9d2 <Vm::finish8086()+0x4>
c001d9ec:	83 ec 0c             	sub    esp,0xc
c001d9ef:	8b 1d 00 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de00
c001d9f5:	ff 35 08 de 02 c0    	push   DWORD PTR ds:0xc002de08
c001d9fb:	c6 05 04 de 02 c0 00 	mov    BYTE PTR ds:0xc002de04,0x0
c001da02:	e8 8b f8 ff ff       	call   c001d292 <unblockTask(ThreadControlBlock*)>
c001da07:	e8 70 f2 ff ff       	call   c001cc7c <unlockScheduler()>
c001da0c:	89 d8                	mov    eax,ebx
c001da0e:	83 c4 18             	add    esp,0x18
c001da11:	5b                   	pop    ebx
c001da12:	c3                   	ret    

c001da13 <Vm::getOutput8086(unsigned char*)>:
c001da13:	83 ec 10             	sub    esp,0x10
c001da16:	ff 35 0c de 02 c0    	push   DWORD PTR ds:0xc002de0c
c001da1c:	68 20 de 02 c0       	push   0xc002de20
c001da21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da25:	e8 2b 2c fe ff       	call   c0000655 <memcpy>
c001da2a:	a1 0c de 02 c0       	mov    eax,ds:0xc002de0c
c001da2f:	c7 05 0c de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de0c,0x0
c001da39:	83 c4 1c             	add    esp,0x1c
c001da3c:	c3                   	ret    

c001da3d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001da3d:	55                   	push   ebp
c001da3e:	57                   	push   edi
c001da3f:	56                   	push   esi
c001da40:	53                   	push   ebx
c001da41:	83 ec 2c             	sub    esp,0x2c
c001da44:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001da48:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001da4c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001da50:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001da54:	e8 21 f2 ff ff       	call   c001cc7a <lockScheduler()>
c001da59:	a0 05 de 02 c0       	mov    al,ds:0xc002de05
c001da5e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da62:	84 c0                	test   al,al
c001da64:	75 0c                	jne    c001da72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001da66:	e8 4b f5 ff ff       	call   c001cfb6 <schedule()>
c001da6b:	e8 0c f2 ff ff       	call   c001cc7c <unlockScheduler()>
c001da70:	eb e2                	jmp    c001da54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001da72:	a1 08 de 02 c0       	mov    eax,ds:0xc002de08
c001da77:	c7 05 0c de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de0c,0x0
c001da81:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001da85:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001da89:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001da8d:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001da91:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001da95:	50                   	push   eax
c001da96:	6a 20                	push   0x20
c001da98:	6a 00                	push   0x0
c001da9a:	68 20 de 02 c0       	push   0xc002de20
c001da9f:	e8 e7 2b fe ff       	call   c000068b <memset>
c001daa4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001daab:	e8 24 1a ff ff       	call   c000f4d4 <malloc>
c001dab0:	83 c4 0c             	add    esp,0xc
c001dab3:	89 c7                	mov    edi,eax
c001dab5:	ff 35 d4 dd 02 c0    	push   DWORD PTR ds:0xc002ddd4
c001dabb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dabf:	50                   	push   eax
c001dac0:	e8 3b 51 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001dac5:	83 c4 10             	add    esp,0x10
c001dac8:	85 ff                	test   edi,edi
c001daca:	75 0a                	jne    c001dad6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001dacc:	83 ec 0c             	sub    esp,0xc
c001dacf:	68 a3 aa 02 c0       	push   0xc002aaa3
c001dad4:	eb 27                	jmp    c001dafd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001dad6:	50                   	push   eax
c001dad7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001dadb:	50                   	push   eax
c001dadc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dae0:	50                   	push   eax
c001dae1:	57                   	push   edi
c001dae2:	e8 29 54 ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c001dae7:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001daec:	83 c4 10             	add    esp,0x10
c001daef:	89 e8                	mov    eax,ebp
c001daf1:	84 c0                	test   al,al
c001daf3:	74 19                	je     c001db0e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001daf5:	83 ec 0c             	sub    esp,0xc
c001daf8:	68 b7 aa 02 c0       	push   0xc002aab7
c001dafd:	e8 e9 bc ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001db02:	31 ed                	xor    ebp,ebp
c001db04:	e8 73 f1 ff ff       	call   c001cc7c <unlockScheduler()>
c001db09:	83 c4 10             	add    esp,0x10
c001db0c:	eb 75                	jmp    c001db83 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001db0e:	50                   	push   eax
c001db0f:	50                   	push   eax
c001db10:	6a 01                	push   0x1
c001db12:	57                   	push   edi
c001db13:	e8 4c 51 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001db18:	83 c4 10             	add    esp,0x10
c001db1b:	85 c0                	test   eax,eax
c001db1d:	74 17                	je     c001db36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001db1f:	83 ec 0c             	sub    esp,0xc
c001db22:	68 d0 aa 02 c0       	push   0xc002aad0
c001db27:	e8 bf bc ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001db2c:	e8 4b f1 ff ff       	call   c001cc7c <unlockScheduler()>
c001db31:	83 c4 10             	add    esp,0x10
c001db34:	eb 4d                	jmp    c001db83 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001db36:	0f b7 f6             	movzx  esi,si
c001db39:	50                   	push   eax
c001db3a:	0f b7 db             	movzx  ebx,bx
c001db3d:	50                   	push   eax
c001db3e:	56                   	push   esi
c001db3f:	53                   	push   ebx
c001db40:	e8 b7 fd ff ff       	call   c001d8fc <Vm::realToLinear(unsigned short, unsigned short)>
c001db45:	5a                   	pop    edx
c001db46:	8b 17                	mov    edx,DWORD PTR [edi]
c001db48:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001db4c:	51                   	push   ecx
c001db4d:	50                   	push   eax
c001db4e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001db52:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001db56:	57                   	push   edi
c001db57:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001db5a:	83 c4 14             	add    esp,0x14
c001db5d:	57                   	push   edi
c001db5e:	e8 5f 51 ff ff       	call   c0012cc2 <File::close()>
c001db63:	c6 05 05 de 02 c0 00 	mov    BYTE PTR ds:0xc002de05,0x0
c001db6a:	e8 0d f1 ff ff       	call   c001cc7c <unlockScheduler()>
c001db6f:	59                   	pop    ecx
c001db70:	ff 35 08 de 02 c0    	push   DWORD PTR ds:0xc002de08
c001db76:	e8 17 f7 ff ff       	call   c001d292 <unblockTask(ThreadControlBlock*)>
c001db7b:	83 c4 10             	add    esp,0x10
c001db7e:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001db83:	83 c4 2c             	add    esp,0x2c
c001db86:	89 e8                	mov    eax,ebp
c001db88:	5b                   	pop    ebx
c001db89:	5e                   	pop    esi
c001db8a:	5f                   	pop    edi
c001db8b:	5d                   	pop    ebp
c001db8c:	c3                   	ret    

c001db8d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001db8d:	57                   	push   edi
c001db8e:	56                   	push   esi
c001db8f:	53                   	push   ebx
c001db90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db98:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001db9c:	83 e8 06             	sub    eax,0x6
c001db9f:	0f b7 c0             	movzx  eax,ax
c001dba2:	50                   	push   eax
c001dba3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001dba8:	50                   	push   eax
c001dba9:	e8 4e fd ff ff       	call   c001d8fc <Vm::realToLinear(unsigned short, unsigned short)>
c001dbae:	5a                   	pop    edx
c001dbaf:	5e                   	pop    esi
c001dbb0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dbb3:	8d 56 fa             	lea    edx,[esi-0x6]
c001dbb6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dbbc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001dbbf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001dbc2:	83 c2 02             	add    edx,0x2
c001dbc5:	66 89 10             	mov    WORD PTR [eax],dx
c001dbc8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dbcb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dbcf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dbd2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001dbd6:	89 d6                	mov    esi,edx
c001dbd8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001dbde:	66 81 e6 ff fd       	and    si,0xfdff
c001dbe3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001dbe7:	74 07                	je     c001dbf0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001dbe9:	89 d6                	mov    esi,edx
c001dbeb:	66 81 ce 00 02       	or     si,0x200
c001dbf0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dbf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbf9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dbfd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dc05:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dc08:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dc10:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dc13:	5b                   	pop    ebx
c001dc14:	5e                   	pop    esi
c001dc15:	5f                   	pop    edi
c001dc16:	c3                   	ret    

c001dc17 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dc17:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc1c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc21:	c1 e0 04             	shl    eax,0x4
c001dc24:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dc27:	c3                   	ret    

c001dc28 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dc28:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc2d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc32:	c1 e0 04             	shl    eax,0x4
c001dc35:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dc39:	c3                   	ret    

c001dc3a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dc3a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc3f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc44:	c1 e0 04             	shl    eax,0x4
c001dc47:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dc4a:	c3                   	ret    

c001dc4b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dc4b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc50:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc55:	c1 e0 04             	shl    eax,0x4
c001dc58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc5c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001dc5f:	c3                   	ret    

c001dc60 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001dc60:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc65:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc6a:	c1 e0 04             	shl    eax,0x4
c001dc6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc71:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001dc75:	c3                   	ret    

c001dc76 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001dc76:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc80:	c1 e0 04             	shl    eax,0x4
c001dc83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc87:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dc8a:	c3                   	ret    

c001dc8b <Vm::faultHandler(regs*)>:
c001dc8b:	55                   	push   ebp
c001dc8c:	57                   	push   edi
c001dc8d:	56                   	push   esi
c001dc8e:	53                   	push   ebx
c001dc8f:	83 ec 1c             	sub    esp,0x1c
c001dc92:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dc96:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001dc99:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dc9c:	0f b7 c1             	movzx  eax,cx
c001dc9f:	50                   	push   eax
c001dca0:	0f b7 c3             	movzx  eax,bx
c001dca3:	c1 e3 04             	shl    ebx,0x4
c001dca6:	50                   	push   eax
c001dca7:	e8 50 fc ff ff       	call   c001d8fc <Vm::realToLinear(unsigned short, unsigned short)>
c001dcac:	5a                   	pop    edx
c001dcad:	89 c5                	mov    ebp,eax
c001dcaf:	5e                   	pop    esi
c001dcb0:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001dcb4:	50                   	push   eax
c001dcb5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dcb9:	50                   	push   eax
c001dcba:	e8 3d fc ff ff       	call   c001d8fc <Vm::realToLinear(unsigned short, unsigned short)>
c001dcbf:	01 cb                	add    ebx,ecx
c001dcc1:	89 c6                	mov    esi,eax
c001dcc3:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001dcc7:	50                   	push   eax
c001dcc8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dccc:	50                   	push   eax
c001dccd:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dcd1:	50                   	push   eax
c001dcd2:	55                   	push   ebp
c001dcd3:	53                   	push   ebx
c001dcd4:	b3 06                	mov    bl,0x6
c001dcd6:	68 e9 aa 02 c0       	push   0xc002aae9
c001dcdb:	e8 f1 49 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001dce0:	83 c4 20             	add    esp,0x20
c001dce3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dce8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dced:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dcf1:	3c 9d                	cmp    al,0x9d
c001dcf3:	0f 84 d7 02 00 00    	je     c001dfd0 <Vm::faultHandler(regs*)+0x345>
c001dcf9:	0f 87 a3 00 00 00    	ja     c001dda2 <Vm::faultHandler(regs*)+0x117>
c001dcff:	3c 66                	cmp    al,0x66
c001dd01:	0f 84 15 02 00 00    	je     c001df1c <Vm::faultHandler(regs*)+0x291>
c001dd07:	77 5f                	ja     c001dd68 <Vm::faultHandler(regs*)+0xdd>
c001dd09:	3c 36                	cmp    al,0x36
c001dd0b:	0f 84 f1 01 00 00    	je     c001df02 <Vm::faultHandler(regs*)+0x277>
c001dd11:	77 28                	ja     c001dd3b <Vm::faultHandler(regs*)+0xb0>
c001dd13:	3c 26                	cmp    al,0x26
c001dd15:	0f 84 99 01 00 00    	je     c001deb4 <Vm::faultHandler(regs*)+0x229>
c001dd1b:	3c 2e                	cmp    al,0x2e
c001dd1d:	0f 85 3b 07 00 00    	jne    c001e45e <Vm::faultHandler(regs*)+0x7d3>
c001dd23:	83 ec 0c             	sub    esp,0xc
c001dd26:	31 db                	xor    ebx,ebx
c001dd28:	68 fe aa 02 c0       	push   0xc002aafe
c001dd2d:	e8 9f 49 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001dd32:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dd35:	83 c4 10             	add    esp,0x10
c001dd38:	45                   	inc    ebp
c001dd39:	eb b2                	jmp    c001dced <Vm::faultHandler(regs*)+0x62>
c001dd3b:	3c 64                	cmp    al,0x64
c001dd3d:	0f 84 8b 01 00 00    	je     c001dece <Vm::faultHandler(regs*)+0x243>
c001dd43:	0f 87 9f 01 00 00    	ja     c001dee8 <Vm::faultHandler(regs*)+0x25d>
c001dd49:	3c 3e                	cmp    al,0x3e
c001dd4b:	0f 85 0d 07 00 00    	jne    c001e45e <Vm::faultHandler(regs*)+0x7d3>
c001dd51:	83 ec 0c             	sub    esp,0xc
c001dd54:	b3 01                	mov    bl,0x1
c001dd56:	68 02 ab 02 c0       	push   0xc002ab02
c001dd5b:	e8 71 49 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001dd60:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dd63:	83 c4 10             	add    esp,0x10
c001dd66:	eb d0                	jmp    c001dd38 <Vm::faultHandler(regs*)+0xad>
c001dd68:	3c 6d                	cmp    al,0x6d
c001dd6a:	0f 84 af 03 00 00    	je     c001e11f <Vm::faultHandler(regs*)+0x494>
c001dd70:	77 15                	ja     c001dd87 <Vm::faultHandler(regs*)+0xfc>
c001dd72:	3c 67                	cmp    al,0x67
c001dd74:	0f 84 bf 01 00 00    	je     c001df39 <Vm::faultHandler(regs*)+0x2ae>
c001dd7a:	3c 6c                	cmp    al,0x6c
c001dd7c:	0f 84 3f 03 00 00    	je     c001e0c1 <Vm::faultHandler(regs*)+0x436>
c001dd82:	e9 d7 06 00 00       	jmp    c001e45e <Vm::faultHandler(regs*)+0x7d3>
c001dd87:	3c 6f                	cmp    al,0x6f
c001dd89:	0f 84 a4 04 00 00    	je     c001e233 <Vm::faultHandler(regs*)+0x5a8>
c001dd8f:	0f 82 11 04 00 00    	jb     c001e1a6 <Vm::faultHandler(regs*)+0x51b>
c001dd95:	3c 9c                	cmp    al,0x9c
c001dd97:	0f 84 ba 01 00 00    	je     c001df57 <Vm::faultHandler(regs*)+0x2cc>
c001dd9d:	e9 bc 06 00 00       	jmp    c001e45e <Vm::faultHandler(regs*)+0x7d3>
c001dda2:	3c ec                	cmp    al,0xec
c001dda4:	0f 84 24 06 00 00    	je     c001e3ce <Vm::faultHandler(regs*)+0x743>
c001ddaa:	0f 87 93 00 00 00    	ja     c001de43 <Vm::faultHandler(regs*)+0x1b8>
c001ddb0:	3c e4                	cmp    al,0xe4
c001ddb2:	0f 84 5c 05 00 00    	je     c001e314 <Vm::faultHandler(regs*)+0x689>
c001ddb8:	77 6a                	ja     c001de24 <Vm::faultHandler(regs*)+0x199>
c001ddba:	3c cd                	cmp    al,0xcd
c001ddbc:	0f 84 7e 02 00 00    	je     c001e040 <Vm::faultHandler(regs*)+0x3b5>
c001ddc2:	3c cf                	cmp    al,0xcf
c001ddc4:	0f 85 94 06 00 00    	jne    c001e45e <Vm::faultHandler(regs*)+0x7d3>
c001ddca:	83 ec 0c             	sub    esp,0xc
c001ddcd:	68 46 ab 02 c0       	push   0xc002ab46
c001ddd2:	e8 fa 48 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001ddd7:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ddda:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001dddd:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001dde1:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001dde4:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001dde8:	0d 00 02 02 00       	or     eax,0x20200
c001dded:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ddf0:	56                   	push   esi
c001ddf1:	53                   	push   ebx
c001ddf2:	52                   	push   edx
c001ddf3:	68 4c ab 02 c0       	push   0xc002ab4c
c001ddf8:	e8 d4 48 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001ddfd:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001de01:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001de07:	66 c1 e8 09          	shr    ax,0x9
c001de0b:	83 e0 01             	and    eax,0x1
c001de0e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001de11:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001de14:	83 c0 06             	add    eax,0x6
c001de17:	25 ff ff 00 00       	and    eax,0xffff
c001de1c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001de1f:	e9 95 02 00 00       	jmp    c001e0b9 <Vm::faultHandler(regs*)+0x42e>
c001de24:	3c e6                	cmp    al,0xe6
c001de26:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001de2a:	0f 84 4e 05 00 00    	je     c001e37e <Vm::faultHandler(regs*)+0x6f3>
c001de30:	0f 82 0a 05 00 00    	jb     c001e340 <Vm::faultHandler(regs*)+0x6b5>
c001de36:	3c e7                	cmp    al,0xe7
c001de38:	0f 84 69 05 00 00    	je     c001e3a7 <Vm::faultHandler(regs*)+0x71c>
c001de3e:	e9 1b 06 00 00       	jmp    c001e45e <Vm::faultHandler(regs*)+0x7d3>
c001de43:	3c ef                	cmp    al,0xef
c001de45:	0f 84 e6 05 00 00    	je     c001e431 <Vm::faultHandler(regs*)+0x7a6>
c001de4b:	77 37                	ja     c001de84 <Vm::faultHandler(regs*)+0x1f9>
c001de4d:	3c ed                	cmp    al,0xed
c001de4f:	0f 84 a3 05 00 00    	je     c001e3f8 <Vm::faultHandler(regs*)+0x76d>
c001de55:	3c ee                	cmp    al,0xee
c001de57:	0f 85 01 06 00 00    	jne    c001e45e <Vm::faultHandler(regs*)+0x7d3>
c001de5d:	52                   	push   edx
c001de5e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001de61:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001de64:	68 e7 ab 02 c0       	push   0xc002abe7
c001de69:	e8 63 48 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001de6e:	59                   	pop    ecx
c001de6f:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001de73:	5b                   	pop    ebx
c001de74:	50                   	push   eax
c001de75:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001de79:	50                   	push   eax
c001de7a:	e8 2a fa ff ff       	call   c001d8a9 <Vm::outbv(unsigned short, unsigned char)>
c001de7f:	e9 a5 05 00 00       	jmp    c001e429 <Vm::faultHandler(regs*)+0x79e>
c001de84:	3c fa                	cmp    al,0xfa
c001de86:	0f 84 f7 01 00 00    	je     c001e083 <Vm::faultHandler(regs*)+0x3f8>
c001de8c:	3c fb                	cmp    al,0xfb
c001de8e:	0f 84 0a 02 00 00    	je     c001e09e <Vm::faultHandler(regs*)+0x413>
c001de94:	3c f3                	cmp    al,0xf3
c001de96:	0f 85 c2 05 00 00    	jne    c001e45e <Vm::faultHandler(regs*)+0x7d3>
c001de9c:	83 ec 0c             	sub    esp,0xc
c001de9f:	68 1f ab 02 c0       	push   0xc002ab1f
c001dea4:	e8 28 48 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001dea9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001deac:	83 c4 10             	add    esp,0x10
c001deaf:	e9 84 fe ff ff       	jmp    c001dd38 <Vm::faultHandler(regs*)+0xad>
c001deb4:	83 ec 0c             	sub    esp,0xc
c001deb7:	b3 02                	mov    bl,0x2
c001deb9:	68 fa aa 02 c0       	push   0xc002aafa
c001debe:	e8 0e 48 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001dec3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dec6:	83 c4 10             	add    esp,0x10
c001dec9:	e9 6a fe ff ff       	jmp    c001dd38 <Vm::faultHandler(regs*)+0xad>
c001dece:	83 ec 0c             	sub    esp,0xc
c001ded1:	b3 03                	mov    bl,0x3
c001ded3:	68 06 ab 02 c0       	push   0xc002ab06
c001ded8:	e8 f4 47 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001dedd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dee0:	83 c4 10             	add    esp,0x10
c001dee3:	e9 50 fe ff ff       	jmp    c001dd38 <Vm::faultHandler(regs*)+0xad>
c001dee8:	83 ec 0c             	sub    esp,0xc
c001deeb:	b3 04                	mov    bl,0x4
c001deed:	68 0a ab 02 c0       	push   0xc002ab0a
c001def2:	e8 da 47 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001def7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001defa:	83 c4 10             	add    esp,0x10
c001defd:	e9 36 fe ff ff       	jmp    c001dd38 <Vm::faultHandler(regs*)+0xad>
c001df02:	83 ec 0c             	sub    esp,0xc
c001df05:	b3 05                	mov    bl,0x5
c001df07:	68 0e ab 02 c0       	push   0xc002ab0e
c001df0c:	e8 c0 47 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001df11:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df14:	83 c4 10             	add    esp,0x10
c001df17:	e9 1c fe ff ff       	jmp    c001dd38 <Vm::faultHandler(regs*)+0xad>
c001df1c:	83 ec 0c             	sub    esp,0xc
c001df1f:	68 12 ab 02 c0       	push   0xc002ab12
c001df24:	e8 a8 47 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001df29:	83 c4 10             	add    esp,0x10
c001df2c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df2f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001df34:	e9 ff fd ff ff       	jmp    c001dd38 <Vm::faultHandler(regs*)+0xad>
c001df39:	50                   	push   eax
c001df3a:	50                   	push   eax
c001df3b:	6a 01                	push   0x1
c001df3d:	68 17 ab 02 c0       	push   0xc002ab17
c001df42:	e8 8a 47 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001df47:	83 c4 10             	add    esp,0x10
c001df4a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df4d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001df52:	e9 e1 fd ff ff       	jmp    c001dd38 <Vm::faultHandler(regs*)+0xad>
c001df57:	83 ec 0c             	sub    esp,0xc
c001df5a:	68 25 ab 02 c0       	push   0xc002ab25
c001df5f:	e8 6d 47 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001df64:	83 c4 10             	add    esp,0x10
c001df67:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001df6a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001df6f:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001df72:	74 2f                	je     c001dfa3 <Vm::faultHandler(regs*)+0x318>
c001df74:	83 ea 04             	sub    edx,0x4
c001df77:	25 ff 0d 00 00       	and    eax,0xdff
c001df7c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001df82:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001df85:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001df88:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001df8e:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001df92:	0f 84 bf 04 00 00    	je     c001e457 <Vm::faultHandler(regs*)+0x7cc>
c001df98:	80 cc 02             	or     ah,0x2
c001df9b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001df9e:	e9 b4 04 00 00       	jmp    c001e457 <Vm::faultHandler(regs*)+0x7cc>
c001dfa3:	83 ea 02             	sub    edx,0x2
c001dfa6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dfac:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001dfaf:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001dfb3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dfb9:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001dfbd:	74 05                	je     c001dfc4 <Vm::faultHandler(regs*)+0x339>
c001dfbf:	80 cc 02             	or     ah,0x2
c001dfc2:	eb 03                	jmp    c001dfc7 <Vm::faultHandler(regs*)+0x33c>
c001dfc4:	80 e4 fd             	and    ah,0xfd
c001dfc7:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001dfcb:	e9 87 04 00 00       	jmp    c001e457 <Vm::faultHandler(regs*)+0x7cc>
c001dfd0:	83 ec 0c             	sub    esp,0xc
c001dfd3:	68 2c ab 02 c0       	push   0xc002ab2c
c001dfd8:	e8 f4 46 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001dfdd:	83 c4 10             	add    esp,0x10
c001dfe0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001dfe5:	74 28                	je     c001e00f <Vm::faultHandler(regs*)+0x384>
c001dfe7:	8b 06                	mov    eax,DWORD PTR [esi]
c001dfe9:	25 ff 0d 00 00       	and    eax,0xdff
c001dfee:	0d 00 02 02 00       	or     eax,0x20200
c001dff3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001dff6:	8b 06                	mov    eax,DWORD PTR [esi]
c001dff8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dffe:	c1 e8 09             	shr    eax,0x9
c001e001:	83 e0 01             	and    eax,0x1
c001e004:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e007:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e00a:	83 c0 04             	add    eax,0x4
c001e00d:	eb 24                	jmp    c001e033 <Vm::faultHandler(regs*)+0x3a8>
c001e00f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e012:	0d 00 02 02 00       	or     eax,0x20200
c001e017:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e01a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e01d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e023:	66 c1 e8 09          	shr    ax,0x9
c001e027:	83 e0 01             	and    eax,0x1
c001e02a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e02d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e030:	83 c0 02             	add    eax,0x2
c001e033:	25 ff ff 00 00       	and    eax,0xffff
c001e038:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e03b:	e9 17 04 00 00       	jmp    c001e457 <Vm::faultHandler(regs*)+0x7cc>
c001e040:	53                   	push   ebx
c001e041:	53                   	push   ebx
c001e042:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e046:	50                   	push   eax
c001e047:	68 32 ab 02 c0       	push   0xc002ab32
c001e04c:	e8 80 46 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e051:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e055:	83 c4 10             	add    esp,0x10
c001e058:	3c ee                	cmp    al,0xee
c001e05a:	75 10                	jne    c001e06c <Vm::faultHandler(regs*)+0x3e1>
c001e05c:	83 ec 0c             	sub    esp,0xc
c001e05f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e062:	e8 fa f8 ff ff       	call   c001d961 <Vm::mainloop3(unsigned long)>
c001e067:	e9 c0 03 00 00       	jmp    c001e42c <Vm::faultHandler(regs*)+0x7a1>
c001e06c:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e070:	83 ec 0c             	sub    esp,0xc
c001e073:	53                   	push   ebx
c001e074:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e078:	53                   	push   ebx
c001e079:	55                   	push   ebp
c001e07a:	50                   	push   eax
c001e07b:	57                   	push   edi
c001e07c:	e8 0c fb ff ff       	call   c001db8d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e081:	eb 36                	jmp    c001e0b9 <Vm::faultHandler(regs*)+0x42e>
c001e083:	83 ec 0c             	sub    esp,0xc
c001e086:	68 3c ab 02 c0       	push   0xc002ab3c
c001e08b:	e8 41 46 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e090:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e095:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e099:	e9 8b 03 00 00       	jmp    c001e429 <Vm::faultHandler(regs*)+0x79e>
c001e09e:	83 ec 0c             	sub    esp,0xc
c001e0a1:	68 41 ab 02 c0       	push   0xc002ab41
c001e0a6:	e8 26 46 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e0ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0b0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e0b4:	e9 70 03 00 00       	jmp    c001e429 <Vm::faultHandler(regs*)+0x79e>
c001e0b9:	83 c4 20             	add    esp,0x20
c001e0bc:	e9 99 03 00 00       	jmp    c001e45a <Vm::faultHandler(regs*)+0x7cf>
c001e0c1:	83 ec 0c             	sub    esp,0xc
c001e0c4:	68 7f ab 02 c0       	push   0xc002ab7f
c001e0c9:	e8 03 46 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e0ce:	83 c4 10             	add    esp,0x10
c001e0d1:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e0d4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e0d9:	74 0d                	je     c001e0e8 <Vm::faultHandler(regs*)+0x45d>
c001e0db:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e0e2:	0f 87 9e 01 00 00    	ja     c001e286 <Vm::faultHandler(regs*)+0x5fb>
c001e0e8:	83 ec 0c             	sub    esp,0xc
c001e0eb:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e0ef:	0f b7 db             	movzx  ebx,bx
c001e0f2:	50                   	push   eax
c001e0f3:	e8 9e f7 ff ff       	call   c001d896 <Vm::inbv(unsigned short)>
c001e0f8:	83 c4 0c             	add    esp,0xc
c001e0fb:	0f b6 c0             	movzx  eax,al
c001e0fe:	50                   	push   eax
c001e0ff:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e103:	50                   	push   eax
c001e104:	53                   	push   ebx
c001e105:	e8 41 fb ff ff       	call   c001dc4b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e10a:	83 c4 10             	add    esp,0x10
c001e10d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e110:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e114:	74 03                	je     c001e119 <Vm::faultHandler(regs*)+0x48e>
c001e116:	48                   	dec    eax
c001e117:	eb 01                	jmp    c001e11a <Vm::faultHandler(regs*)+0x48f>
c001e119:	40                   	inc    eax
c001e11a:	0f b7 c0             	movzx  eax,ax
c001e11d:	eb 7f                	jmp    c001e19e <Vm::faultHandler(regs*)+0x513>
c001e11f:	83 ec 0c             	sub    esp,0xc
c001e122:	68 b1 ab 02 c0       	push   0xc002abb1
c001e127:	e8 a5 45 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e12c:	83 c4 10             	add    esp,0x10
c001e12f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e132:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e137:	74 0d                	je     c001e146 <Vm::faultHandler(regs*)+0x4bb>
c001e139:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e140:	0f 87 40 01 00 00    	ja     c001e286 <Vm::faultHandler(regs*)+0x5fb>
c001e146:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e149:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e14d:	0f b7 db             	movzx  ebx,bx
c001e150:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e155:	74 20                	je     c001e177 <Vm::faultHandler(regs*)+0x4ec>
c001e157:	ed                   	in     eax,dx
c001e158:	51                   	push   ecx
c001e159:	50                   	push   eax
c001e15a:	56                   	push   esi
c001e15b:	53                   	push   ebx
c001e15c:	e8 15 fb ff ff       	call   c001dc76 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e161:	83 c4 10             	add    esp,0x10
c001e164:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e167:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e16b:	74 05                	je     c001e172 <Vm::faultHandler(regs*)+0x4e7>
c001e16d:	83 e8 04             	sub    eax,0x4
c001e170:	eb 27                	jmp    c001e199 <Vm::faultHandler(regs*)+0x50e>
c001e172:	83 c0 04             	add    eax,0x4
c001e175:	eb 22                	jmp    c001e199 <Vm::faultHandler(regs*)+0x50e>
c001e177:	66 ed                	in     ax,dx
c001e179:	0f b7 c0             	movzx  eax,ax
c001e17c:	52                   	push   edx
c001e17d:	50                   	push   eax
c001e17e:	56                   	push   esi
c001e17f:	53                   	push   ebx
c001e180:	e8 db fa ff ff       	call   c001dc60 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e185:	83 c4 10             	add    esp,0x10
c001e188:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e18b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e18f:	74 05                	je     c001e196 <Vm::faultHandler(regs*)+0x50b>
c001e191:	83 e8 02             	sub    eax,0x2
c001e194:	eb 03                	jmp    c001e199 <Vm::faultHandler(regs*)+0x50e>
c001e196:	83 c0 02             	add    eax,0x2
c001e199:	25 ff ff 00 00       	and    eax,0xffff
c001e19e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e1a1:	e9 b1 02 00 00       	jmp    c001e457 <Vm::faultHandler(regs*)+0x7cc>
c001e1a6:	83 ec 0c             	sub    esp,0xc
c001e1a9:	4b                   	dec    ebx
c001e1aa:	68 b7 ab 02 c0       	push   0xc002abb7
c001e1af:	e8 1d 45 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e1b4:	83 c4 10             	add    esp,0x10
c001e1b7:	80 fb 05             	cmp    bl,0x5
c001e1ba:	77 0a                	ja     c001e1c6 <Vm::faultHandler(regs*)+0x53b>
c001e1bc:	0f b6 db             	movzx  ebx,bl
c001e1bf:	ff 24 9d 28 ac 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd53d8]
c001e1c6:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e1ca:	eb 1b                	jmp    c001e1e7 <Vm::faultHandler(regs*)+0x55c>
c001e1cc:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e1d0:	eb 15                	jmp    c001e1e7 <Vm::faultHandler(regs*)+0x55c>
c001e1d2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e1d6:	eb 0f                	jmp    c001e1e7 <Vm::faultHandler(regs*)+0x55c>
c001e1d8:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e1dc:	eb 09                	jmp    c001e1e7 <Vm::faultHandler(regs*)+0x55c>
c001e1de:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e1e1:	eb 04                	jmp    c001e1e7 <Vm::faultHandler(regs*)+0x55c>
c001e1e3:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e1e7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e1ec:	74 0d                	je     c001e1fb <Vm::faultHandler(regs*)+0x570>
c001e1ee:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e1f5:	0f 87 8b 00 00 00    	ja     c001e286 <Vm::faultHandler(regs*)+0x5fb>
c001e1fb:	53                   	push   ebx
c001e1fc:	53                   	push   ebx
c001e1fd:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e201:	52                   	push   edx
c001e202:	50                   	push   eax
c001e203:	e8 0f fa ff ff       	call   c001dc17 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e208:	5e                   	pop    esi
c001e209:	0f b6 c0             	movzx  eax,al
c001e20c:	5d                   	pop    ebp
c001e20d:	50                   	push   eax
c001e20e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e212:	50                   	push   eax
c001e213:	e8 91 f6 ff ff       	call   c001d8a9 <Vm::outbv(unsigned short, unsigned char)>
c001e218:	83 c4 10             	add    esp,0x10
c001e21b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e21e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e222:	74 03                	je     c001e227 <Vm::faultHandler(regs*)+0x59c>
c001e224:	48                   	dec    eax
c001e225:	eb 01                	jmp    c001e228 <Vm::faultHandler(regs*)+0x59d>
c001e227:	40                   	inc    eax
c001e228:	0f b7 c0             	movzx  eax,ax
c001e22b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e22e:	e9 24 02 00 00       	jmp    c001e457 <Vm::faultHandler(regs*)+0x7cc>
c001e233:	83 ec 0c             	sub    esp,0xc
c001e236:	4b                   	dec    ebx
c001e237:	68 b7 ab 02 c0       	push   0xc002abb7
c001e23c:	e8 90 44 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e241:	83 c4 10             	add    esp,0x10
c001e244:	80 fb 05             	cmp    bl,0x5
c001e247:	77 0a                	ja     c001e253 <Vm::faultHandler(regs*)+0x5c8>
c001e249:	0f b6 db             	movzx  ebx,bl
c001e24c:	ff 24 9d 40 ac 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd53c0]
c001e253:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e257:	eb 1b                	jmp    c001e274 <Vm::faultHandler(regs*)+0x5e9>
c001e259:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e25d:	eb 15                	jmp    c001e274 <Vm::faultHandler(regs*)+0x5e9>
c001e25f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e263:	eb 0f                	jmp    c001e274 <Vm::faultHandler(regs*)+0x5e9>
c001e265:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e269:	eb 09                	jmp    c001e274 <Vm::faultHandler(regs*)+0x5e9>
c001e26b:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e26e:	eb 04                	jmp    c001e274 <Vm::faultHandler(regs*)+0x5e9>
c001e270:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e274:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e277:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e27c:	74 39                	je     c001e2b7 <Vm::faultHandler(regs*)+0x62c>
c001e27e:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e284:	76 31                	jbe    c001e2b7 <Vm::faultHandler(regs*)+0x62c>
c001e286:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e28a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e28e:	51                   	push   ecx
c001e28f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e293:	51                   	push   ecx
c001e294:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e298:	51                   	push   ecx
c001e299:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e29d:	51                   	push   ecx
c001e29e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e2a2:	52                   	push   edx
c001e2a3:	50                   	push   eax
c001e2a4:	50                   	push   eax
c001e2a5:	68 84 ab 02 c0       	push   0xc002ab84
c001e2aa:	e8 22 44 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e2af:	83 c4 20             	add    esp,0x20
c001e2b2:	e9 fb 01 00 00       	jmp    c001e4b2 <Vm::faultHandler(regs*)+0x827>
c001e2b7:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e2ba:	0f b7 d3             	movzx  edx,bx
c001e2bd:	81 e6 00 04 00 00    	and    esi,0x400
c001e2c3:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e2c6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e2cb:	74 1d                	je     c001e2ea <Vm::faultHandler(regs*)+0x65f>
c001e2cd:	51                   	push   ecx
c001e2ce:	51                   	push   ecx
c001e2cf:	52                   	push   edx
c001e2d0:	50                   	push   eax
c001e2d1:	e8 64 f9 ff ff       	call   c001dc3a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e2d6:	83 c4 10             	add    esp,0x10
c001e2d9:	89 ea                	mov    edx,ebp
c001e2db:	ef                   	out    dx,eax
c001e2dc:	85 f6                	test   esi,esi
c001e2de:	74 05                	je     c001e2e5 <Vm::faultHandler(regs*)+0x65a>
c001e2e0:	83 eb 04             	sub    ebx,0x4
c001e2e3:	eb 21                	jmp    c001e306 <Vm::faultHandler(regs*)+0x67b>
c001e2e5:	83 c3 04             	add    ebx,0x4
c001e2e8:	eb 1c                	jmp    c001e306 <Vm::faultHandler(regs*)+0x67b>
c001e2ea:	51                   	push   ecx
c001e2eb:	51                   	push   ecx
c001e2ec:	52                   	push   edx
c001e2ed:	50                   	push   eax
c001e2ee:	e8 35 f9 ff ff       	call   c001dc28 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e2f3:	83 c4 10             	add    esp,0x10
c001e2f6:	89 ea                	mov    edx,ebp
c001e2f8:	66 ef                	out    dx,ax
c001e2fa:	85 f6                	test   esi,esi
c001e2fc:	74 05                	je     c001e303 <Vm::faultHandler(regs*)+0x678>
c001e2fe:	83 eb 02             	sub    ebx,0x2
c001e301:	eb 03                	jmp    c001e306 <Vm::faultHandler(regs*)+0x67b>
c001e303:	83 c3 02             	add    ebx,0x2
c001e306:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e30c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e30f:	e9 43 01 00 00       	jmp    c001e457 <Vm::faultHandler(regs*)+0x7cc>
c001e314:	53                   	push   ebx
c001e315:	53                   	push   ebx
c001e316:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e31a:	50                   	push   eax
c001e31b:	68 bd ab 02 c0       	push   0xc002abbd
c001e320:	e8 ac 43 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e325:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e32c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e330:	89 04 24             	mov    DWORD PTR [esp],eax
c001e333:	e8 5e f5 ff ff       	call   c001d896 <Vm::inbv(unsigned short)>
c001e338:	0f b6 c0             	movzx  eax,al
c001e33b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e33e:	eb 5e                	jmp    c001e39e <Vm::faultHandler(regs*)+0x713>
c001e340:	51                   	push   ecx
c001e341:	51                   	push   ecx
c001e342:	53                   	push   ebx
c001e343:	68 c3 ab 02 c0       	push   0xc002abc3
c001e348:	e8 84 43 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e34d:	83 c4 10             	add    esp,0x10
c001e350:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e355:	74 07                	je     c001e35e <Vm::faultHandler(regs*)+0x6d3>
c001e357:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e35b:	ed                   	in     eax,dx
c001e35c:	eb 14                	jmp    c001e372 <Vm::faultHandler(regs*)+0x6e7>
c001e35e:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e361:	66 31 db             	xor    bx,bx
c001e364:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e367:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e36b:	66 ed                	in     ax,dx
c001e36d:	0f b7 c0             	movzx  eax,ax
c001e370:	09 d8                	or     eax,ebx
c001e372:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e375:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e379:	e9 dc 00 00 00       	jmp    c001e45a <Vm::faultHandler(regs*)+0x7cf>
c001e37e:	50                   	push   eax
c001e37f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e382:	53                   	push   ebx
c001e383:	68 c9 ab 02 c0       	push   0xc002abc9
c001e388:	e8 44 43 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e38d:	58                   	pop    eax
c001e38e:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e392:	5a                   	pop    edx
c001e393:	50                   	push   eax
c001e394:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e398:	50                   	push   eax
c001e399:	e8 0b f5 ff ff       	call   c001d8a9 <Vm::outbv(unsigned short, unsigned char)>
c001e39e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e3a2:	e9 85 00 00 00       	jmp    c001e42c <Vm::faultHandler(regs*)+0x7a1>
c001e3a7:	50                   	push   eax
c001e3a8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e3ab:	53                   	push   ebx
c001e3ac:	68 d2 ab 02 c0       	push   0xc002abd2
c001e3b1:	e8 1b 43 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e3b6:	83 c4 10             	add    esp,0x10
c001e3b9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e3bd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e3c2:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e3c5:	74 03                	je     c001e3ca <Vm::faultHandler(regs*)+0x73f>
c001e3c7:	ef                   	out    dx,eax
c001e3c8:	eb ab                	jmp    c001e375 <Vm::faultHandler(regs*)+0x6ea>
c001e3ca:	66 ef                	out    dx,ax
c001e3cc:	eb a7                	jmp    c001e375 <Vm::faultHandler(regs*)+0x6ea>
c001e3ce:	55                   	push   ebp
c001e3cf:	55                   	push   ebp
c001e3d0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e3d3:	68 db ab 02 c0       	push   0xc002abdb
c001e3d8:	e8 f4 42 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e3dd:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e3e4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e3e8:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3eb:	e8 a6 f4 ff ff       	call   c001d896 <Vm::inbv(unsigned short)>
c001e3f0:	0f b6 c0             	movzx  eax,al
c001e3f3:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e3f6:	eb 31                	jmp    c001e429 <Vm::faultHandler(regs*)+0x79e>
c001e3f8:	56                   	push   esi
c001e3f9:	56                   	push   esi
c001e3fa:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e3fd:	68 e1 ab 02 c0       	push   0xc002abe1
c001e402:	e8 ca 42 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e407:	83 c4 10             	add    esp,0x10
c001e40a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e40d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e412:	74 03                	je     c001e417 <Vm::faultHandler(regs*)+0x78c>
c001e414:	ed                   	in     eax,dx
c001e415:	eb 0d                	jmp    c001e424 <Vm::faultHandler(regs*)+0x799>
c001e417:	66 ed                	in     ax,dx
c001e419:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e41c:	0f b7 c0             	movzx  eax,ax
c001e41f:	66 31 d2             	xor    dx,dx
c001e422:	09 d0                	or     eax,edx
c001e424:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e427:	eb 2e                	jmp    c001e457 <Vm::faultHandler(regs*)+0x7cc>
c001e429:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e42c:	83 c4 10             	add    esp,0x10
c001e42f:	eb 29                	jmp    c001e45a <Vm::faultHandler(regs*)+0x7cf>
c001e431:	50                   	push   eax
c001e432:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e435:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e438:	68 f0 ab 02 c0       	push   0xc002abf0
c001e43d:	e8 8f 42 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e442:	83 c4 10             	add    esp,0x10
c001e445:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e448:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e44d:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e450:	74 03                	je     c001e455 <Vm::faultHandler(regs*)+0x7ca>
c001e452:	ef                   	out    dx,eax
c001e453:	eb 02                	jmp    c001e457 <Vm::faultHandler(regs*)+0x7cc>
c001e455:	66 ef                	out    dx,ax
c001e457:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e45a:	b0 01                	mov    al,0x1
c001e45c:	eb 56                	jmp    c001e4b4 <Vm::faultHandler(regs*)+0x829>
c001e45e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e462:	51                   	push   ecx
c001e463:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e467:	51                   	push   ecx
c001e468:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e46c:	51                   	push   ecx
c001e46d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e471:	51                   	push   ecx
c001e472:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e476:	52                   	push   edx
c001e477:	50                   	push   eax
c001e478:	50                   	push   eax
c001e479:	68 f9 ab 02 c0       	push   0xc002abf9
c001e47e:	e8 4e 42 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001e483:	83 c4 20             	add    esp,0x20
c001e486:	83 ec 0c             	sub    esp,0xc
c001e489:	6a 60                	push   0x60
c001e48b:	e8 06 f4 ff ff       	call   c001d896 <Vm::inbv(unsigned short)>
c001e490:	83 c4 10             	add    esp,0x10
c001e493:	3c 1c                	cmp    al,0x1c
c001e495:	74 04                	je     c001e49b <Vm::faultHandler(regs*)+0x810>
c001e497:	3c 5a                	cmp    al,0x5a
c001e499:	75 eb                	jne    c001e486 <Vm::faultHandler(regs*)+0x7fb>
c001e49b:	3c 1c                	cmp    al,0x1c
c001e49d:	74 04                	je     c001e4a3 <Vm::faultHandler(regs*)+0x818>
c001e49f:	3c 5a                	cmp    al,0x5a
c001e4a1:	75 0f                	jne    c001e4b2 <Vm::faultHandler(regs*)+0x827>
c001e4a3:	83 ec 0c             	sub    esp,0xc
c001e4a6:	6a 60                	push   0x60
c001e4a8:	e8 e9 f3 ff ff       	call   c001d896 <Vm::inbv(unsigned short)>
c001e4ad:	83 c4 10             	add    esp,0x10
c001e4b0:	eb e9                	jmp    c001e49b <Vm::faultHandler(regs*)+0x810>
c001e4b2:	31 c0                	xor    eax,eax
c001e4b4:	83 c4 1c             	add    esp,0x1c
c001e4b7:	5b                   	pop    ebx
c001e4b8:	5e                   	pop    esi
c001e4b9:	5f                   	pop    edi
c001e4ba:	5d                   	pop    ebp
c001e4bb:	c3                   	ret    

c001e4bc <Vm::fpuInternalTo32(unsigned long long)>:
c001e4bc:	57                   	push   edi
c001e4bd:	56                   	push   esi
c001e4be:	53                   	push   ebx
c001e4bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c7:	89 d6                	mov    esi,edx
c001e4c9:	89 d7                	mov    edi,edx
c001e4cb:	89 c1                	mov    ecx,eax
c001e4cd:	c1 ef 14             	shr    edi,0x14
c001e4d0:	89 d3                	mov    ebx,edx
c001e4d2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e4d8:	31 d2                	xor    edx,edx
c001e4da:	89 f8                	mov    eax,edi
c001e4dc:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e4e2:	bf ff 00 00 00       	mov    edi,0xff
c001e4e7:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e4ec:	83 d2 ff             	adc    edx,0xffffffff
c001e4ef:	39 c7                	cmp    edi,eax
c001e4f1:	bf 00 00 00 00       	mov    edi,0x0
c001e4f6:	19 d7                	sbb    edi,edx
c001e4f8:	72 15                	jb     c001e50f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e4fa:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e4fe:	c1 e0 17             	shl    eax,0x17
c001e501:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e507:	09 f1                	or     ecx,esi
c001e509:	09 c1                	or     ecx,eax
c001e50b:	89 cf                	mov    edi,ecx
c001e50d:	eb 02                	jmp    c001e511 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e50f:	31 ff                	xor    edi,edi
c001e511:	89 f8                	mov    eax,edi
c001e513:	5b                   	pop    ebx
c001e514:	5e                   	pop    esi
c001e515:	5f                   	pop    edi
c001e516:	c3                   	ret    

c001e517 <Vm::fpuInternalTo64(unsigned long long)>:
c001e517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e51b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e51f:	c3                   	ret    

c001e520 <Vm::fpu32ToInternal(unsigned int)>:
c001e520:	57                   	push   edi
c001e521:	31 ff                	xor    edi,edi
c001e523:	56                   	push   esi
c001e524:	53                   	push   ebx
c001e525:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e529:	89 cb                	mov    ebx,ecx
c001e52b:	89 ce                	mov    esi,ecx
c001e52d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e533:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e539:	c1 e9 17             	shr    ecx,0x17
c001e53c:	89 f0                	mov    eax,esi
c001e53e:	0f b6 d1             	movzx  edx,cl
c001e541:	81 c2 80 03 00 00    	add    edx,0x380
c001e547:	89 d1                	mov    ecx,edx
c001e549:	89 fa                	mov    edx,edi
c001e54b:	c1 e1 14             	shl    ecx,0x14
c001e54e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e552:	c1 e0 1d             	shl    eax,0x1d
c001e555:	89 d7                	mov    edi,edx
c001e557:	89 c6                	mov    esi,eax
c001e559:	89 ca                	mov    edx,ecx
c001e55b:	89 f0                	mov    eax,esi
c001e55d:	09 fa                	or     edx,edi
c001e55f:	09 da                	or     edx,ebx
c001e561:	5b                   	pop    ebx
c001e562:	5e                   	pop    esi
c001e563:	5f                   	pop    edi
c001e564:	c3                   	ret    

c001e565 <Vm::fpu64ToInternal(unsigned long long)>:
c001e565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e569:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e56d:	c3                   	ret    

c001e56e <Vm::fpuFloatToLong(unsigned long long)>:
c001e56e:	57                   	push   edi
c001e56f:	31 c0                	xor    eax,eax
c001e571:	56                   	push   esi
c001e572:	31 d2                	xor    edx,edx
c001e574:	53                   	push   ebx
c001e575:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e579:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e57d:	89 d9                	mov    ecx,ebx
c001e57f:	c1 e9 14             	shr    ecx,0x14
c001e582:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e588:	89 cf                	mov    edi,ecx
c001e58a:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e590:	78 33                	js     c001e5c5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e592:	89 d9                	mov    ecx,ebx
c001e594:	89 f0                	mov    eax,esi
c001e596:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e59c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e5a2:	89 ca                	mov    edx,ecx
c001e5a4:	b9 34 00 00 00       	mov    ecx,0x34
c001e5a9:	29 f9                	sub    ecx,edi
c001e5ab:	0f ad d0             	shrd   eax,edx,cl
c001e5ae:	d3 fa                	sar    edx,cl
c001e5b0:	f6 c1 20             	test   cl,0x20
c001e5b3:	74 05                	je     c001e5ba <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e5b5:	89 d0                	mov    eax,edx
c001e5b7:	c1 fa 1f             	sar    edx,0x1f
c001e5ba:	85 db                	test   ebx,ebx
c001e5bc:	79 07                	jns    c001e5c5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e5be:	f7 d8                	neg    eax
c001e5c0:	83 d2 00             	adc    edx,0x0
c001e5c3:	f7 da                	neg    edx
c001e5c5:	5b                   	pop    ebx
c001e5c6:	5e                   	pop    esi
c001e5c7:	5f                   	pop    edi
c001e5c8:	c3                   	ret    

c001e5c9 <Vm::fpuULongToFloat(unsigned long long)>:
c001e5c9:	57                   	push   edi
c001e5ca:	31 c9                	xor    ecx,ecx
c001e5cc:	56                   	push   esi
c001e5cd:	53                   	push   ebx
c001e5ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e5d6:	0f ba e7 14          	bt     edi,0x14
c001e5da:	72 07                	jb     c001e5e3 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e5dc:	01 f6                	add    esi,esi
c001e5de:	11 ff                	adc    edi,edi
c001e5e0:	41                   	inc    ecx
c001e5e1:	eb f3                	jmp    c001e5d6 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e5e3:	89 fa                	mov    edx,edi
c001e5e5:	89 f0                	mov    eax,esi
c001e5e7:	bb 33 04 00 00       	mov    ebx,0x433
c001e5ec:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e5f2:	29 cb                	sub    ebx,ecx
c001e5f4:	89 d9                	mov    ecx,ebx
c001e5f6:	5b                   	pop    ebx
c001e5f7:	c1 e1 14             	shl    ecx,0x14
c001e5fa:	5e                   	pop    esi
c001e5fb:	09 ca                	or     edx,ecx
c001e5fd:	5f                   	pop    edi
c001e5fe:	c3                   	ret    

c001e5ff <Vm::fpuLongToFloat(long long)>:
c001e5ff:	56                   	push   esi
c001e600:	31 c0                	xor    eax,eax
c001e602:	53                   	push   ebx
c001e603:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e607:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e60b:	39 c8                	cmp    eax,ecx
c001e60d:	19 d8                	sbb    eax,ebx
c001e60f:	7d 04                	jge    c001e615 <Vm::fpuLongToFloat(long long)+0x16>
c001e611:	31 f6                	xor    esi,esi
c001e613:	eb 0c                	jmp    c001e621 <Vm::fpuLongToFloat(long long)+0x22>
c001e615:	f7 d9                	neg    ecx
c001e617:	be 01 00 00 00       	mov    esi,0x1
c001e61c:	83 d3 00             	adc    ebx,0x0
c001e61f:	f7 db                	neg    ebx
c001e621:	31 c0                	xor    eax,eax
c001e623:	0f ba e3 14          	bt     ebx,0x14
c001e627:	72 07                	jb     c001e630 <Vm::fpuLongToFloat(long long)+0x31>
c001e629:	01 c9                	add    ecx,ecx
c001e62b:	11 db                	adc    ebx,ebx
c001e62d:	40                   	inc    eax
c001e62e:	eb f3                	jmp    c001e623 <Vm::fpuLongToFloat(long long)+0x24>
c001e630:	ba 33 04 00 00       	mov    edx,0x433
c001e635:	29 c2                	sub    edx,eax
c001e637:	89 c8                	mov    eax,ecx
c001e639:	c1 e2 14             	shl    edx,0x14
c001e63c:	89 d9                	mov    ecx,ebx
c001e63e:	89 f3                	mov    ebx,esi
c001e640:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e646:	09 ca                	or     edx,ecx
c001e648:	84 db                	test   bl,bl
c001e64a:	74 06                	je     c001e652 <Vm::fpuLongToFloat(long long)+0x53>
c001e64c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e652:	5b                   	pop    ebx
c001e653:	5e                   	pop    esi
c001e654:	c3                   	ret    

c001e655 <Vm::fpuGet0()>:
c001e655:	31 c0                	xor    eax,eax
c001e657:	31 d2                	xor    edx,edx
c001e659:	c3                   	ret    

c001e65a <Vm::fpuGet1()>:
c001e65a:	b8 01 00 00 00       	mov    eax,0x1
c001e65f:	31 d2                	xor    edx,edx
c001e661:	c3                   	ret    

c001e662 <Vm::fpuGetPi()>:
c001e662:	b8 03 00 00 00       	mov    eax,0x3
c001e667:	31 d2                	xor    edx,edx
c001e669:	c3                   	ret    

c001e66a <Vm::fpuGetLog2E()>:
c001e66a:	83 ec 18             	sub    esp,0x18
c001e66d:	68 58 ac 02 c0       	push   0xc002ac58
c001e672:	e8 74 b1 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001e677:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e67c:	31 d2                	xor    edx,edx
c001e67e:	83 c4 1c             	add    esp,0x1c
c001e681:	c3                   	ret    

c001e682 <Vm::fpuGetLogE2()>:
c001e682:	83 ec 18             	sub    esp,0x18
c001e685:	68 64 ac 02 c0       	push   0xc002ac64
c001e68a:	e8 5c b1 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001e68f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e694:	31 d2                	xor    edx,edx
c001e696:	83 c4 1c             	add    esp,0x1c
c001e699:	c3                   	ret    

c001e69a <Vm::fpuGetLog210()>:
c001e69a:	83 ec 18             	sub    esp,0x18
c001e69d:	68 70 ac 02 c0       	push   0xc002ac70
c001e6a2:	e8 44 b1 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001e6a7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e6ac:	31 d2                	xor    edx,edx
c001e6ae:	83 c4 1c             	add    esp,0x1c
c001e6b1:	c3                   	ret    

c001e6b2 <Vm::fpuGetLog102()>:
c001e6b2:	83 ec 18             	sub    esp,0x18
c001e6b5:	68 7d ac 02 c0       	push   0xc002ac7d
c001e6ba:	e8 2c b1 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001e6bf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e6c4:	31 d2                	xor    edx,edx
c001e6c6:	83 c4 1c             	add    esp,0x1c
c001e6c9:	c3                   	ret    

c001e6ca <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e6ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6ce:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e6d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e6d6:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e6da:	0f 92 c0             	setb   al
c001e6dd:	c3                   	ret    

c001e6de <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e6de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e6:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e6ea:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e6ee:	09 c2                	or     edx,eax
c001e6f0:	0f 94 c0             	sete   al
c001e6f3:	c3                   	ret    

c001e6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e6f4:	57                   	push   edi
c001e6f5:	56                   	push   esi
c001e6f6:	53                   	push   ebx
c001e6f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e6fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e6ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e703:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e707:	57                   	push   edi
c001e708:	56                   	push   esi
c001e709:	53                   	push   ebx
c001e70a:	51                   	push   ecx
c001e70b:	e8 ce ff ff ff       	call   c001e6de <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e710:	83 c4 10             	add    esp,0x10
c001e713:	88 c2                	mov    dl,al
c001e715:	31 c0                	xor    eax,eax
c001e717:	84 d2                	test   dl,dl
c001e719:	75 0c                	jne    c001e727 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e71b:	57                   	push   edi
c001e71c:	56                   	push   esi
c001e71d:	53                   	push   ebx
c001e71e:	51                   	push   ecx
c001e71f:	e8 a6 ff ff ff       	call   c001e6ca <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e724:	83 c4 10             	add    esp,0x10
c001e727:	83 e0 01             	and    eax,0x1
c001e72a:	5b                   	pop    ebx
c001e72b:	88 c1                	mov    cl,al
c001e72d:	83 e2 01             	and    edx,0x1
c001e730:	a0 41 de 02 c0       	mov    al,ds:0xc002de41
c001e735:	c1 e2 06             	shl    edx,0x6
c001e738:	83 e0 ba             	and    eax,0xffffffba
c001e73b:	5e                   	pop    esi
c001e73c:	09 c8                	or     eax,ecx
c001e73e:	5f                   	pop    edi
c001e73f:	09 d0                	or     eax,edx
c001e741:	a2 41 de 02 c0       	mov    ds:0xc002de41,al
c001e746:	c3                   	ret    

c001e747 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e747:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e74b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e74f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e753:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e757:	c3                   	ret    

c001e758 <Vm::fpuAbs(unsigned long long)>:
c001e758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e75c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e760:	c3                   	ret    

c001e761 <Vm::fpuChs(unsigned long long)>:
c001e761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e765:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e769:	f7 d8                	neg    eax
c001e76b:	83 d2 00             	adc    edx,0x0
c001e76e:	f7 da                	neg    edx
c001e770:	c3                   	ret    

c001e771 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e771:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e775:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e77a:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e77e:	eb c7                	jmp    c001e747 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e780:	53                   	push   ebx
c001e781:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e785:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e789:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e78d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e791:	0f af ca             	imul   ecx,edx
c001e794:	0f af d8             	imul   ebx,eax
c001e797:	f7 e2                	mul    edx
c001e799:	01 d9                	add    ecx,ebx
c001e79b:	5b                   	pop    ebx
c001e79c:	01 ca                	add    edx,ecx
c001e79e:	c3                   	ret    

c001e79f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e79f:	83 ec 0c             	sub    esp,0xc
c001e7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7b2:	e8 45 6b 00 00       	call   c00252fc <__udivdi3>
c001e7b7:	83 c4 1c             	add    esp,0x1c
c001e7ba:	c3                   	ret    

c001e7bb <Vm::fpuSquare(unsigned long long)>:
c001e7bb:	50                   	push   eax
c001e7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e7c4:	52                   	push   edx
c001e7c5:	50                   	push   eax
c001e7c6:	52                   	push   edx
c001e7c7:	50                   	push   eax
c001e7c8:	e8 b3 ff ff ff       	call   c001e780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e7cd:	83 c4 14             	add    esp,0x14
c001e7d0:	c3                   	ret    

c001e7d1 <Vm::fpuGetReg(int)>:
c001e7d1:	83 ec 0c             	sub    esp,0xc
c001e7d4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e7d9:	76 10                	jbe    c001e7eb <Vm::fpuGetReg(int)+0x1a>
c001e7db:	83 ec 0c             	sub    esp,0xc
c001e7de:	68 8a ac 02 c0       	push   0xc002ac8a
c001e7e3:	e8 03 b0 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001e7e8:	83 c4 10             	add    esp,0x10
c001e7eb:	a0 41 de 02 c0       	mov    al,ds:0xc002de41
c001e7f0:	b9 08 00 00 00       	mov    ecx,0x8
c001e7f5:	c0 e8 03             	shr    al,0x3
c001e7f8:	83 e0 07             	and    eax,0x7
c001e7fb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e7ff:	99                   	cdq    
c001e800:	f7 f9                	idiv   ecx
c001e802:	8b 04 d5 44 de 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd21bc]
c001e809:	8b 14 d5 48 de 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd21b8]
c001e810:	83 c4 0c             	add    esp,0xc
c001e813:	c3                   	ret    

c001e814 <Vm::fpuSetReg(int, unsigned long long)>:
c001e814:	57                   	push   edi
c001e815:	56                   	push   esi
c001e816:	52                   	push   edx
c001e817:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e81b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e81f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e824:	76 10                	jbe    c001e836 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e826:	83 ec 0c             	sub    esp,0xc
c001e829:	68 9d ac 02 c0       	push   0xc002ac9d
c001e82e:	e8 b8 af ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001e833:	83 c4 10             	add    esp,0x10
c001e836:	a0 41 de 02 c0       	mov    al,ds:0xc002de41
c001e83b:	b9 08 00 00 00       	mov    ecx,0x8
c001e840:	c0 e8 03             	shr    al,0x3
c001e843:	83 e0 07             	and    eax,0x7
c001e846:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e84a:	99                   	cdq    
c001e84b:	f7 f9                	idiv   ecx
c001e84d:	89 34 d5 44 de 02 c0 	mov    DWORD PTR [edx*8-0x3ffd21bc],esi
c001e854:	89 3c d5 48 de 02 c0 	mov    DWORD PTR [edx*8-0x3ffd21b8],edi
c001e85b:	58                   	pop    eax
c001e85c:	5e                   	pop    esi
c001e85d:	5f                   	pop    edi
c001e85e:	c3                   	ret    

c001e85f <Vm::fpuPush(unsigned long long)>:
c001e85f:	a0 41 de 02 c0       	mov    al,ds:0xc002de41
c001e864:	c0 e8 03             	shr    al,0x3
c001e867:	83 e0 07             	and    eax,0x7
c001e86a:	83 c0 07             	add    eax,0x7
c001e86d:	88 c2                	mov    dl,al
c001e86f:	83 e0 07             	and    eax,0x7
c001e872:	83 e2 07             	and    edx,0x7
c001e875:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e87c:	8a 15 41 de 02 c0    	mov    dl,BYTE PTR ds:0xc002de41
c001e882:	83 e2 c7             	and    edx,0xffffffc7
c001e885:	09 ca                	or     edx,ecx
c001e887:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e88b:	88 15 41 de 02 c0    	mov    BYTE PTR ds:0xc002de41,dl
c001e891:	89 0c c5 48 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd21b8],ecx
c001e898:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e89c:	89 14 c5 44 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd21bc],edx
c001e8a3:	a1 84 de 02 c0       	mov    eax,ds:0xc002de84
c001e8a8:	83 f8 08             	cmp    eax,0x8
c001e8ab:	75 08                	jne    c001e8b5 <Vm::fpuPush(unsigned long long)+0x56>
c001e8ad:	80 0d 40 de 02 c0 40 	or     BYTE PTR ds:0xc002de40,0x40
c001e8b4:	c3                   	ret    
c001e8b5:	40                   	inc    eax
c001e8b6:	a3 84 de 02 c0       	mov    ds:0xc002de84,eax
c001e8bb:	c3                   	ret    

c001e8bc <Vm::fpuPop()>:
c001e8bc:	8a 0d 41 de 02 c0    	mov    cl,BYTE PTR ds:0xc002de41
c001e8c2:	53                   	push   ebx
c001e8c3:	c0 e9 03             	shr    cl,0x3
c001e8c6:	8a 1d 41 de 02 c0    	mov    bl,BYTE PTR ds:0xc002de41
c001e8cc:	83 e1 07             	and    ecx,0x7
c001e8cf:	83 e3 c7             	and    ebx,0xffffffc7
c001e8d2:	8b 04 cd 44 de 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd21bc]
c001e8d9:	8b 14 cd 48 de 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd21b8]
c001e8e0:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001e8e7:	83 e1 38             	and    ecx,0x38
c001e8ea:	09 d9                	or     ecx,ebx
c001e8ec:	88 0d 41 de 02 c0    	mov    BYTE PTR ds:0xc002de41,cl
c001e8f2:	8b 0d 84 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de84
c001e8f8:	85 c9                	test   ecx,ecx
c001e8fa:	74 09                	je     c001e905 <Vm::fpuPop()+0x49>
c001e8fc:	49                   	dec    ecx
c001e8fd:	89 0d 84 de 02 c0    	mov    DWORD PTR ds:0xc002de84,ecx
c001e903:	eb 07                	jmp    c001e90c <Vm::fpuPop()+0x50>
c001e905:	80 0d 40 de 02 c0 40 	or     BYTE PTR ds:0xc002de40,0x40
c001e90c:	5b                   	pop    ebx
c001e90d:	c3                   	ret    

c001e90e <Vm::x87Handler(regs*)>:
c001e90e:	55                   	push   ebp
c001e90f:	57                   	push   edi
c001e910:	56                   	push   esi
c001e911:	53                   	push   ebx
c001e912:	83 ec 1c             	sub    esp,0x1c
c001e915:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e919:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001e91e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001e921:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001e929:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001e92d:	50                   	push   eax
c001e92e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001e932:	50                   	push   eax
c001e933:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e937:	50                   	push   eax
c001e938:	53                   	push   ebx
c001e939:	e8 de a6 ff ff       	call   c001901c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001e93e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001e941:	83 c4 10             	add    esp,0x10
c001e944:	89 c6                	mov    esi,eax
c001e946:	80 fa d9             	cmp    dl,0xd9
c001e949:	0f 85 52 01 00 00    	jne    c001eaa1 <Vm::x87Handler(regs*)+0x193>
c001e94f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e953:	8d 50 20             	lea    edx,[eax+0x20]
c001e956:	80 fa 0e             	cmp    dl,0xe
c001e959:	0f 87 86 00 00 00    	ja     c001e9e5 <Vm::x87Handler(regs*)+0xd7>
c001e95f:	0f b6 d2             	movzx  edx,dl
c001e962:	ff 24 95 b0 ac 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5350]
c001e969:	e8 e7 fc ff ff       	call   c001e655 <Vm::fpuGet0()>
c001e96e:	eb 05                	jmp    c001e975 <Vm::x87Handler(regs*)+0x67>
c001e970:	e8 e5 fc ff ff       	call   c001e65a <Vm::fpuGet1()>
c001e975:	57                   	push   edi
c001e976:	57                   	push   edi
c001e977:	52                   	push   edx
c001e978:	50                   	push   eax
c001e979:	e8 e1 fe ff ff       	call   c001e85f <Vm::fpuPush(unsigned long long)>
c001e97e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e982:	83 c4 10             	add    esp,0x10
c001e985:	b0 01                	mov    al,0x1
c001e987:	e9 e3 09 00 00       	jmp    c001f36f <Vm::x87Handler(regs*)+0xa61>
c001e98c:	83 ec 0c             	sub    esp,0xc
c001e98f:	6a 00                	push   0x0
c001e991:	e8 3b fe ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001e996:	59                   	pop    ecx
c001e997:	5e                   	pop    esi
c001e998:	52                   	push   edx
c001e999:	50                   	push   eax
c001e99a:	e8 c2 fd ff ff       	call   c001e761 <Vm::fpuChs(unsigned long long)>
c001e99f:	eb 13                	jmp    c001e9b4 <Vm::x87Handler(regs*)+0xa6>
c001e9a1:	83 ec 0c             	sub    esp,0xc
c001e9a4:	6a 00                	push   0x0
c001e9a6:	e8 26 fe ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001e9ab:	5f                   	pop    edi
c001e9ac:	5d                   	pop    ebp
c001e9ad:	52                   	push   edx
c001e9ae:	50                   	push   eax
c001e9af:	e8 a4 fd ff ff       	call   c001e758 <Vm::fpuAbs(unsigned long long)>
c001e9b4:	83 c4 0c             	add    esp,0xc
c001e9b7:	52                   	push   edx
c001e9b8:	50                   	push   eax
c001e9b9:	6a 00                	push   0x0
c001e9bb:	e8 54 fe ff ff       	call   c001e814 <Vm::fpuSetReg(int, unsigned long long)>
c001e9c0:	eb bc                	jmp    c001e97e <Vm::x87Handler(regs*)+0x70>
c001e9c2:	e8 d3 fc ff ff       	call   c001e69a <Vm::fpuGetLog210()>
c001e9c7:	eb ac                	jmp    c001e975 <Vm::x87Handler(regs*)+0x67>
c001e9c9:	e8 9c fc ff ff       	call   c001e66a <Vm::fpuGetLog2E()>
c001e9ce:	eb a5                	jmp    c001e975 <Vm::x87Handler(regs*)+0x67>
c001e9d0:	e8 8d fc ff ff       	call   c001e662 <Vm::fpuGetPi()>
c001e9d5:	eb 9e                	jmp    c001e975 <Vm::x87Handler(regs*)+0x67>
c001e9d7:	e8 d6 fc ff ff       	call   c001e6b2 <Vm::fpuGetLog102()>
c001e9dc:	eb 97                	jmp    c001e975 <Vm::x87Handler(regs*)+0x67>
c001e9de:	e8 9f fc ff ff       	call   c001e682 <Vm::fpuGetLogE2()>
c001e9e3:	eb 90                	jmp    c001e975 <Vm::x87Handler(regs*)+0x67>
c001e9e5:	8d 50 40             	lea    edx,[eax+0x40]
c001e9e8:	80 fa 07             	cmp    dl,0x7
c001e9eb:	77 15                	ja     c001ea02 <Vm::x87Handler(regs*)+0xf4>
c001e9ed:	83 ec 0c             	sub    esp,0xc
c001e9f0:	2d c0 00 00 00       	sub    eax,0xc0
c001e9f5:	50                   	push   eax
c001e9f6:	e8 d6 fd ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001e9fb:	59                   	pop    ecx
c001e9fc:	5e                   	pop    esi
c001e9fd:	e9 75 ff ff ff       	jmp    c001e977 <Vm::x87Handler(regs*)+0x69>
c001ea02:	8d 50 38             	lea    edx,[eax+0x38]
c001ea05:	80 fa 07             	cmp    dl,0x7
c001ea08:	77 3c                	ja     c001ea46 <Vm::x87Handler(regs*)+0x138>
c001ea0a:	83 ec 0c             	sub    esp,0xc
c001ea0d:	2d c8 00 00 00       	sub    eax,0xc8
c001ea12:	50                   	push   eax
c001ea13:	e8 b9 fd ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ea18:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ea1f:	89 c6                	mov    esi,eax
c001ea21:	89 d7                	mov    edi,edx
c001ea23:	e8 a9 fd ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ea28:	83 c4 0c             	add    esp,0xc
c001ea2b:	52                   	push   edx
c001ea2c:	50                   	push   eax
c001ea2d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea31:	2d c8 00 00 00       	sub    eax,0xc8
c001ea36:	50                   	push   eax
c001ea37:	e8 d8 fd ff ff       	call   c001e814 <Vm::fpuSetReg(int, unsigned long long)>
c001ea3c:	83 c4 0c             	add    esp,0xc
c001ea3f:	57                   	push   edi
c001ea40:	56                   	push   esi
c001ea41:	e9 73 ff ff ff       	jmp    c001e9b9 <Vm::x87Handler(regs*)+0xab>
c001ea46:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ea4a:	84 d2                	test   dl,dl
c001ea4c:	75 0f                	jne    c001ea5d <Vm::x87Handler(regs*)+0x14f>
c001ea4e:	83 ec 0c             	sub    esp,0xc
c001ea51:	ff 36                	push   DWORD PTR [esi]
c001ea53:	e8 c8 fa ff ff       	call   c001e520 <Vm::fpu32ToInternal(unsigned int)>
c001ea58:	e9 bf 00 00 00       	jmp    c001eb1c <Vm::x87Handler(regs*)+0x20e>
c001ea5d:	80 fa 03             	cmp    dl,0x3
c001ea60:	75 13                	jne    c001ea75 <Vm::x87Handler(regs*)+0x167>
c001ea62:	e8 55 fe ff ff       	call   c001e8bc <Vm::fpuPop()>
c001ea67:	55                   	push   ebp
c001ea68:	55                   	push   ebp
c001ea69:	52                   	push   edx
c001ea6a:	50                   	push   eax
c001ea6b:	e8 4c fa ff ff       	call   c001e4bc <Vm::fpuInternalTo32(unsigned long long)>
c001ea70:	e9 88 00 00 00       	jmp    c001eafd <Vm::x87Handler(regs*)+0x1ef>
c001ea75:	80 fa 05             	cmp    dl,0x5
c001ea78:	75 0e                	jne    c001ea88 <Vm::x87Handler(regs*)+0x17a>
c001ea7a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ea7d:	66 a3 42 de 02 c0    	mov    ds:0xc002de42,ax
c001ea83:	e9 df 00 00 00       	jmp    c001eb67 <Vm::x87Handler(regs*)+0x259>
c001ea88:	31 c0                	xor    eax,eax
c001ea8a:	80 fa 07             	cmp    dl,0x7
c001ea8d:	0f 85 dc 08 00 00    	jne    c001f36f <Vm::x87Handler(regs*)+0xa61>
c001ea93:	66 a1 42 de 02 c0    	mov    ax,ds:0xc002de42
c001ea99:	66 89 06             	mov    WORD PTR [esi],ax
c001ea9c:	e9 c6 00 00 00       	jmp    c001eb67 <Vm::x87Handler(regs*)+0x259>
c001eaa1:	80 fa d8             	cmp    dl,0xd8
c001eaa4:	0f 84 c9 00 00 00    	je     c001eb73 <Vm::x87Handler(regs*)+0x265>
c001eaaa:	80 fa dc             	cmp    dl,0xdc
c001eaad:	0f 84 0d 02 00 00    	je     c001ecc0 <Vm::x87Handler(regs*)+0x3b2>
c001eab3:	80 fa de             	cmp    dl,0xde
c001eab6:	0f 84 cd 02 00 00    	je     c001ed89 <Vm::x87Handler(regs*)+0x47b>
c001eabc:	80 fa dd             	cmp    dl,0xdd
c001eabf:	0f 84 5f 04 00 00    	je     c001ef24 <Vm::x87Handler(regs*)+0x616>
c001eac5:	80 fa da             	cmp    dl,0xda
c001eac8:	0f 84 24 05 00 00    	je     c001eff2 <Vm::x87Handler(regs*)+0x6e4>
c001eace:	80 fa df             	cmp    dl,0xdf
c001ead1:	0f 84 68 05 00 00    	je     c001f03f <Vm::x87Handler(regs*)+0x731>
c001ead7:	31 c0                	xor    eax,eax
c001ead9:	80 fa db             	cmp    dl,0xdb
c001eadc:	0f 85 8d 08 00 00    	jne    c001f36f <Vm::x87Handler(regs*)+0xa61>
c001eae2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eae6:	80 fa 03             	cmp    dl,0x3
c001eae9:	0f 85 70 06 00 00    	jne    c001f15f <Vm::x87Handler(regs*)+0x851>
c001eaef:	e8 c8 fd ff ff       	call   c001e8bc <Vm::fpuPop()>
c001eaf4:	55                   	push   ebp
c001eaf5:	55                   	push   ebp
c001eaf6:	52                   	push   edx
c001eaf7:	50                   	push   eax
c001eaf8:	e8 71 fa ff ff       	call   c001e56e <Vm::fpuFloatToLong(unsigned long long)>
c001eafd:	83 c4 10             	add    esp,0x10
c001eb00:	89 06                	mov    DWORD PTR [esi],eax
c001eb02:	eb 63                	jmp    c001eb67 <Vm::x87Handler(regs*)+0x259>
c001eb04:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb08:	84 d2                	test   dl,dl
c001eb0a:	0f 85 e6 05 00 00    	jne    c001f0f6 <Vm::x87Handler(regs*)+0x7e8>
c001eb10:	57                   	push   edi
c001eb11:	57                   	push   edi
c001eb12:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eb15:	ff 36                	push   DWORD PTR [esi]
c001eb17:	e8 49 fa ff ff       	call   c001e565 <Vm::fpu64ToInternal(unsigned long long)>
c001eb1c:	5e                   	pop    esi
c001eb1d:	5f                   	pop    edi
c001eb1e:	52                   	push   edx
c001eb1f:	50                   	push   eax
c001eb20:	e8 3a fd ff ff       	call   c001e85f <Vm::fpuPush(unsigned long long)>
c001eb25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb29:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001eb2c:	e9 51 fe ff ff       	jmp    c001e982 <Vm::x87Handler(regs*)+0x74>
c001eb31:	80 fa 03             	cmp    dl,0x3
c001eb34:	0f 85 d7 06 00 00    	jne    c001f211 <Vm::x87Handler(regs*)+0x903>
c001eb3a:	57                   	push   edi
c001eb3b:	57                   	push   edi
c001eb3c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eb3f:	ff 36                	push   DWORD PTR [esi]
c001eb41:	e8 1f fa ff ff       	call   c001e565 <Vm::fpu64ToInternal(unsigned long long)>
c001eb46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb4d:	89 c6                	mov    esi,eax
c001eb4f:	89 d7                	mov    edi,edx
c001eb51:	e8 7b fc ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001eb56:	57                   	push   edi
c001eb57:	56                   	push   esi
c001eb58:	52                   	push   edx
c001eb59:	50                   	push   eax
c001eb5a:	e8 95 fb ff ff       	call   c001e6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001eb5f:	83 c4 20             	add    esp,0x20
c001eb62:	e8 55 fd ff ff       	call   c001e8bc <Vm::fpuPop()>
c001eb67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb6b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001eb6e:	e9 12 fe ff ff       	jmp    c001e985 <Vm::x87Handler(regs*)+0x77>
c001eb73:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb77:	8d 50 40             	lea    edx,[eax+0x40]
c001eb7a:	80 fa 07             	cmp    dl,0x7
c001eb7d:	77 29                	ja     c001eba8 <Vm::x87Handler(regs*)+0x29a>
c001eb7f:	83 ec 0c             	sub    esp,0xc
c001eb82:	2d c0 00 00 00       	sub    eax,0xc0
c001eb87:	50                   	push   eax
c001eb88:	e8 44 fc ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001eb8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb94:	89 c6                	mov    esi,eax
c001eb96:	89 d7                	mov    edi,edx
c001eb98:	e8 34 fc ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001eb9d:	57                   	push   edi
c001eb9e:	56                   	push   esi
c001eb9f:	52                   	push   edx
c001eba0:	50                   	push   eax
c001eba1:	e8 a1 fb ff ff       	call   c001e747 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001eba6:	eb 2f                	jmp    c001ebd7 <Vm::x87Handler(regs*)+0x2c9>
c001eba8:	8d 50 38             	lea    edx,[eax+0x38]
c001ebab:	80 fa 07             	cmp    dl,0x7
c001ebae:	77 2f                	ja     c001ebdf <Vm::x87Handler(regs*)+0x2d1>
c001ebb0:	83 ec 0c             	sub    esp,0xc
c001ebb3:	2d c8 00 00 00       	sub    eax,0xc8
c001ebb8:	50                   	push   eax
c001ebb9:	e8 13 fc ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ebbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ebc5:	89 c6                	mov    esi,eax
c001ebc7:	89 d7                	mov    edi,edx
c001ebc9:	e8 03 fc ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ebce:	57                   	push   edi
c001ebcf:	56                   	push   esi
c001ebd0:	52                   	push   edx
c001ebd1:	50                   	push   eax
c001ebd2:	e8 a9 fb ff ff       	call   c001e780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ebd7:	83 c4 1c             	add    esp,0x1c
c001ebda:	e9 d8 fd ff ff       	jmp    c001e9b7 <Vm::x87Handler(regs*)+0xa9>
c001ebdf:	8d 50 30             	lea    edx,[eax+0x30]
c001ebe2:	80 fa 07             	cmp    dl,0x7
c001ebe5:	77 0d                	ja     c001ebf4 <Vm::x87Handler(regs*)+0x2e6>
c001ebe7:	83 ec 0c             	sub    esp,0xc
c001ebea:	2d d0 00 00 00       	sub    eax,0xd0
c001ebef:	e9 99 03 00 00       	jmp    c001ef8d <Vm::x87Handler(regs*)+0x67f>
c001ebf4:	8d 50 28             	lea    edx,[eax+0x28]
c001ebf7:	80 fa 07             	cmp    dl,0x7
c001ebfa:	77 0d                	ja     c001ec09 <Vm::x87Handler(regs*)+0x2fb>
c001ebfc:	83 ec 0c             	sub    esp,0xc
c001ebff:	2d d8 00 00 00       	sub    eax,0xd8
c001ec04:	e9 c0 03 00 00       	jmp    c001efc9 <Vm::x87Handler(regs*)+0x6bb>
c001ec09:	8d 50 20             	lea    edx,[eax+0x20]
c001ec0c:	80 fa 07             	cmp    dl,0x7
c001ec0f:	77 1b                	ja     c001ec2c <Vm::x87Handler(regs*)+0x31e>
c001ec11:	83 ec 0c             	sub    esp,0xc
c001ec14:	2d e0 00 00 00       	sub    eax,0xe0
c001ec19:	50                   	push   eax
c001ec1a:	e8 b2 fb ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ec1f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec26:	89 c6                	mov    esi,eax
c001ec28:	89 d7                	mov    edi,edx
c001ec2a:	eb 22                	jmp    c001ec4e <Vm::x87Handler(regs*)+0x340>
c001ec2c:	8d 50 18             	lea    edx,[eax+0x18]
c001ec2f:	80 fa 07             	cmp    dl,0x7
c001ec32:	77 2d                	ja     c001ec61 <Vm::x87Handler(regs*)+0x353>
c001ec34:	83 ec 0c             	sub    esp,0xc
c001ec37:	6a 00                	push   0x0
c001ec39:	e8 93 fb ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ec3e:	89 c6                	mov    esi,eax
c001ec40:	89 d7                	mov    edi,edx
c001ec42:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec46:	2d e8 00 00 00       	sub    eax,0xe8
c001ec4b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec4e:	e8 7e fb ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ec53:	57                   	push   edi
c001ec54:	56                   	push   esi
c001ec55:	52                   	push   edx
c001ec56:	50                   	push   eax
c001ec57:	e8 15 fb ff ff       	call   c001e771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ec5c:	e9 76 ff ff ff       	jmp    c001ebd7 <Vm::x87Handler(regs*)+0x2c9>
c001ec61:	8d 50 10             	lea    edx,[eax+0x10]
c001ec64:	80 fa 07             	cmp    dl,0x7
c001ec67:	77 1b                	ja     c001ec84 <Vm::x87Handler(regs*)+0x376>
c001ec69:	83 ec 0c             	sub    esp,0xc
c001ec6c:	2d f0 00 00 00       	sub    eax,0xf0
c001ec71:	50                   	push   eax
c001ec72:	e8 5a fb ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ec77:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec7e:	89 c6                	mov    esi,eax
c001ec80:	89 d7                	mov    edi,edx
c001ec82:	eb 22                	jmp    c001eca6 <Vm::x87Handler(regs*)+0x398>
c001ec84:	3c f7                	cmp    al,0xf7
c001ec86:	0f 86 d1 03 00 00    	jbe    c001f05d <Vm::x87Handler(regs*)+0x74f>
c001ec8c:	83 ec 0c             	sub    esp,0xc
c001ec8f:	6a 00                	push   0x0
c001ec91:	e8 3b fb ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ec96:	89 c6                	mov    esi,eax
c001ec98:	89 d7                	mov    edi,edx
c001ec9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec9e:	2d f8 00 00 00       	sub    eax,0xf8
c001eca3:	89 04 24             	mov    DWORD PTR [esp],eax
c001eca6:	e8 26 fb ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ecab:	57                   	push   edi
c001ecac:	56                   	push   esi
c001ecad:	52                   	push   edx
c001ecae:	50                   	push   eax
c001ecaf:	e8 eb fa ff ff       	call   c001e79f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ecb4:	83 c4 1c             	add    esp,0x1c
c001ecb7:	52                   	push   edx
c001ecb8:	50                   	push   eax
c001ecb9:	6a 00                	push   0x0
c001ecbb:	e9 51 02 00 00       	jmp    c001ef11 <Vm::x87Handler(regs*)+0x603>
c001ecc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecc4:	8d 50 40             	lea    edx,[eax+0x40]
c001ecc7:	80 fa 07             	cmp    dl,0x7
c001ecca:	77 37                	ja     c001ed03 <Vm::x87Handler(regs*)+0x3f5>
c001eccc:	83 ec 0c             	sub    esp,0xc
c001eccf:	2d c0 00 00 00       	sub    eax,0xc0
c001ecd4:	50                   	push   eax
c001ecd5:	e8 f7 fa ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ecda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ece1:	89 c6                	mov    esi,eax
c001ece3:	89 d7                	mov    edi,edx
c001ece5:	e8 e7 fa ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ecea:	57                   	push   edi
c001eceb:	56                   	push   esi
c001ecec:	52                   	push   edx
c001eced:	50                   	push   eax
c001ecee:	e8 54 fa ff ff       	call   c001e747 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ecf3:	83 c4 1c             	add    esp,0x1c
c001ecf6:	52                   	push   edx
c001ecf7:	50                   	push   eax
c001ecf8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecfc:	2d c0 00 00 00       	sub    eax,0xc0
c001ed01:	eb 3d                	jmp    c001ed40 <Vm::x87Handler(regs*)+0x432>
c001ed03:	8d 50 38             	lea    edx,[eax+0x38]
c001ed06:	80 fa 07             	cmp    dl,0x7
c001ed09:	77 3b                	ja     c001ed46 <Vm::x87Handler(regs*)+0x438>
c001ed0b:	83 ec 0c             	sub    esp,0xc
c001ed0e:	2d c8 00 00 00       	sub    eax,0xc8
c001ed13:	50                   	push   eax
c001ed14:	e8 b8 fa ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ed19:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed20:	89 c6                	mov    esi,eax
c001ed22:	89 d7                	mov    edi,edx
c001ed24:	e8 a8 fa ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ed29:	57                   	push   edi
c001ed2a:	56                   	push   esi
c001ed2b:	52                   	push   edx
c001ed2c:	50                   	push   eax
c001ed2d:	e8 4e fa ff ff       	call   c001e780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ed32:	83 c4 1c             	add    esp,0x1c
c001ed35:	52                   	push   edx
c001ed36:	50                   	push   eax
c001ed37:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed3b:	2d c8 00 00 00       	sub    eax,0xc8
c001ed40:	50                   	push   eax
c001ed41:	e9 75 fc ff ff       	jmp    c001e9bb <Vm::x87Handler(regs*)+0xad>
c001ed46:	83 c0 18             	add    eax,0x18
c001ed49:	3c 07                	cmp    al,0x7
c001ed4b:	0f 87 3b 04 00 00    	ja     c001f18c <Vm::x87Handler(regs*)+0x87e>
c001ed51:	83 ec 0c             	sub    esp,0xc
c001ed54:	6a 00                	push   0x0
c001ed56:	e8 76 fa ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ed5b:	89 c6                	mov    esi,eax
c001ed5d:	89 d7                	mov    edi,edx
c001ed5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed63:	2d e8 00 00 00       	sub    eax,0xe8
c001ed68:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed6b:	e8 61 fa ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ed70:	57                   	push   edi
c001ed71:	56                   	push   esi
c001ed72:	52                   	push   edx
c001ed73:	50                   	push   eax
c001ed74:	e8 f8 f9 ff ff       	call   c001e771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ed79:	83 c4 1c             	add    esp,0x1c
c001ed7c:	52                   	push   edx
c001ed7d:	50                   	push   eax
c001ed7e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed82:	2d e8 00 00 00       	sub    eax,0xe8
c001ed87:	eb b7                	jmp    c001ed40 <Vm::x87Handler(regs*)+0x432>
c001ed89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed8d:	8d 50 40             	lea    edx,[eax+0x40]
c001ed90:	80 fa 07             	cmp    dl,0x7
c001ed93:	77 3a                	ja     c001edcf <Vm::x87Handler(regs*)+0x4c1>
c001ed95:	83 ec 0c             	sub    esp,0xc
c001ed98:	2d c0 00 00 00       	sub    eax,0xc0
c001ed9d:	50                   	push   eax
c001ed9e:	e8 2e fa ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001eda3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001edaa:	89 c6                	mov    esi,eax
c001edac:	89 d7                	mov    edi,edx
c001edae:	e8 1e fa ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001edb3:	57                   	push   edi
c001edb4:	56                   	push   esi
c001edb5:	52                   	push   edx
c001edb6:	50                   	push   eax
c001edb7:	e8 8b f9 ff ff       	call   c001e747 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001edbc:	83 c4 1c             	add    esp,0x1c
c001edbf:	52                   	push   edx
c001edc0:	50                   	push   eax
c001edc1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edc5:	2d c0 00 00 00       	sub    eax,0xc0
c001edca:	e9 9e 01 00 00       	jmp    c001ef6d <Vm::x87Handler(regs*)+0x65f>
c001edcf:	8d 50 20             	lea    edx,[eax+0x20]
c001edd2:	80 fa 07             	cmp    dl,0x7
c001edd5:	77 3a                	ja     c001ee11 <Vm::x87Handler(regs*)+0x503>
c001edd7:	83 ec 0c             	sub    esp,0xc
c001edda:	2d e0 00 00 00       	sub    eax,0xe0
c001eddf:	50                   	push   eax
c001ede0:	e8 ec f9 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ede5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001edec:	89 c6                	mov    esi,eax
c001edee:	89 d7                	mov    edi,edx
c001edf0:	e8 dc f9 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001edf5:	57                   	push   edi
c001edf6:	56                   	push   esi
c001edf7:	52                   	push   edx
c001edf8:	50                   	push   eax
c001edf9:	e8 73 f9 ff ff       	call   c001e771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001edfe:	83 c4 1c             	add    esp,0x1c
c001ee01:	52                   	push   edx
c001ee02:	50                   	push   eax
c001ee03:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee07:	2d e0 00 00 00       	sub    eax,0xe0
c001ee0c:	e9 5c 01 00 00       	jmp    c001ef6d <Vm::x87Handler(regs*)+0x65f>
c001ee11:	8d 50 18             	lea    edx,[eax+0x18]
c001ee14:	80 fa 07             	cmp    dl,0x7
c001ee17:	77 3b                	ja     c001ee54 <Vm::x87Handler(regs*)+0x546>
c001ee19:	83 ec 0c             	sub    esp,0xc
c001ee1c:	6a 00                	push   0x0
c001ee1e:	e8 ae f9 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ee23:	89 c6                	mov    esi,eax
c001ee25:	89 d7                	mov    edi,edx
c001ee27:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee2b:	2d e8 00 00 00       	sub    eax,0xe8
c001ee30:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee33:	e8 99 f9 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ee38:	57                   	push   edi
c001ee39:	56                   	push   esi
c001ee3a:	52                   	push   edx
c001ee3b:	50                   	push   eax
c001ee3c:	e8 30 f9 ff ff       	call   c001e771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ee41:	83 c4 1c             	add    esp,0x1c
c001ee44:	52                   	push   edx
c001ee45:	50                   	push   eax
c001ee46:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee4a:	2d e8 00 00 00       	sub    eax,0xe8
c001ee4f:	e9 19 01 00 00       	jmp    c001ef6d <Vm::x87Handler(regs*)+0x65f>
c001ee54:	8d 50 38             	lea    edx,[eax+0x38]
c001ee57:	80 fa 07             	cmp    dl,0x7
c001ee5a:	77 37                	ja     c001ee93 <Vm::x87Handler(regs*)+0x585>
c001ee5c:	83 ec 0c             	sub    esp,0xc
c001ee5f:	2d c8 00 00 00       	sub    eax,0xc8
c001ee64:	50                   	push   eax
c001ee65:	e8 67 f9 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ee6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee71:	89 c6                	mov    esi,eax
c001ee73:	89 d7                	mov    edi,edx
c001ee75:	e8 57 f9 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ee7a:	57                   	push   edi
c001ee7b:	56                   	push   esi
c001ee7c:	52                   	push   edx
c001ee7d:	50                   	push   eax
c001ee7e:	e8 fd f8 ff ff       	call   c001e780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ee83:	83 c4 1c             	add    esp,0x1c
c001ee86:	52                   	push   edx
c001ee87:	50                   	push   eax
c001ee88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee8c:	2d c8 00 00 00       	sub    eax,0xc8
c001ee91:	eb 7d                	jmp    c001ef10 <Vm::x87Handler(regs*)+0x602>
c001ee93:	3c f7                	cmp    al,0xf7
c001ee95:	76 38                	jbe    c001eecf <Vm::x87Handler(regs*)+0x5c1>
c001ee97:	83 ec 0c             	sub    esp,0xc
c001ee9a:	6a 00                	push   0x0
c001ee9c:	e8 30 f9 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001eea1:	89 c6                	mov    esi,eax
c001eea3:	89 d7                	mov    edi,edx
c001eea5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eea9:	2d f8 00 00 00       	sub    eax,0xf8
c001eeae:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeb1:	e8 1b f9 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001eeb6:	57                   	push   edi
c001eeb7:	56                   	push   esi
c001eeb8:	52                   	push   edx
c001eeb9:	50                   	push   eax
c001eeba:	e8 e0 f8 ff ff       	call   c001e79f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001eebf:	83 c4 1c             	add    esp,0x1c
c001eec2:	52                   	push   edx
c001eec3:	50                   	push   eax
c001eec4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eec8:	2d f8 00 00 00       	sub    eax,0xf8
c001eecd:	eb 41                	jmp    c001ef10 <Vm::x87Handler(regs*)+0x602>
c001eecf:	8d 50 10             	lea    edx,[eax+0x10]
c001eed2:	80 fa 07             	cmp    dl,0x7
c001eed5:	0f 87 5a 01 00 00    	ja     c001f035 <Vm::x87Handler(regs*)+0x727>
c001eedb:	83 ec 0c             	sub    esp,0xc
c001eede:	2d f0 00 00 00       	sub    eax,0xf0
c001eee3:	50                   	push   eax
c001eee4:	e8 e8 f8 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001eee9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eef0:	89 c6                	mov    esi,eax
c001eef2:	89 d7                	mov    edi,edx
c001eef4:	e8 d8 f8 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001eef9:	57                   	push   edi
c001eefa:	56                   	push   esi
c001eefb:	52                   	push   edx
c001eefc:	50                   	push   eax
c001eefd:	e8 9d f8 ff ff       	call   c001e79f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ef02:	83 c4 1c             	add    esp,0x1c
c001ef05:	52                   	push   edx
c001ef06:	50                   	push   eax
c001ef07:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef0b:	2d f0 00 00 00       	sub    eax,0xf0
c001ef10:	50                   	push   eax
c001ef11:	e8 fe f8 ff ff       	call   c001e814 <Vm::fpuSetReg(int, unsigned long long)>
c001ef16:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef1a:	e8 9d f9 ff ff       	call   c001e8bc <Vm::fpuPop()>
c001ef1f:	e9 5e fa ff ff       	jmp    c001e982 <Vm::x87Handler(regs*)+0x74>
c001ef24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef28:	8d 50 30             	lea    edx,[eax+0x30]
c001ef2b:	80 fa 07             	cmp    dl,0x7
c001ef2e:	77 1d                	ja     c001ef4d <Vm::x87Handler(regs*)+0x63f>
c001ef30:	83 ec 0c             	sub    esp,0xc
c001ef33:	6a 00                	push   0x0
c001ef35:	e8 97 f8 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ef3a:	83 c4 0c             	add    esp,0xc
c001ef3d:	52                   	push   edx
c001ef3e:	50                   	push   eax
c001ef3f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef43:	2d d0 00 00 00       	sub    eax,0xd0
c001ef48:	e9 f3 fd ff ff       	jmp    c001ed40 <Vm::x87Handler(regs*)+0x432>
c001ef4d:	8d 50 28             	lea    edx,[eax+0x28]
c001ef50:	80 fa 07             	cmp    dl,0x7
c001ef53:	77 28                	ja     c001ef7d <Vm::x87Handler(regs*)+0x66f>
c001ef55:	83 ec 0c             	sub    esp,0xc
c001ef58:	6a 00                	push   0x0
c001ef5a:	e8 72 f8 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ef5f:	83 c4 0c             	add    esp,0xc
c001ef62:	52                   	push   edx
c001ef63:	50                   	push   eax
c001ef64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef68:	2d d8 00 00 00       	sub    eax,0xd8
c001ef6d:	50                   	push   eax
c001ef6e:	e8 a1 f8 ff ff       	call   c001e814 <Vm::fpuSetReg(int, unsigned long long)>
c001ef73:	e8 44 f9 ff ff       	call   c001e8bc <Vm::fpuPop()>
c001ef78:	e9 01 fa ff ff       	jmp    c001e97e <Vm::x87Handler(regs*)+0x70>
c001ef7d:	8d 50 20             	lea    edx,[eax+0x20]
c001ef80:	80 fa 07             	cmp    dl,0x7
c001ef83:	77 30                	ja     c001efb5 <Vm::x87Handler(regs*)+0x6a7>
c001ef85:	83 ec 0c             	sub    esp,0xc
c001ef88:	2d e0 00 00 00       	sub    eax,0xe0
c001ef8d:	50                   	push   eax
c001ef8e:	e8 3e f8 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001ef93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef9a:	89 c6                	mov    esi,eax
c001ef9c:	89 d7                	mov    edi,edx
c001ef9e:	e8 2e f8 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001efa3:	57                   	push   edi
c001efa4:	56                   	push   esi
c001efa5:	52                   	push   edx
c001efa6:	50                   	push   eax
c001efa7:	e8 48 f7 ff ff       	call   c001e6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001efac:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001efb0:	e9 54 02 00 00       	jmp    c001f209 <Vm::x87Handler(regs*)+0x8fb>
c001efb5:	8d 50 18             	lea    edx,[eax+0x18]
c001efb8:	80 fa 07             	cmp    dl,0x7
c001efbb:	0f 87 43 fb ff ff    	ja     c001eb04 <Vm::x87Handler(regs*)+0x1f6>
c001efc1:	83 ec 0c             	sub    esp,0xc
c001efc4:	2d e8 00 00 00       	sub    eax,0xe8
c001efc9:	50                   	push   eax
c001efca:	e8 02 f8 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001efcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efd6:	89 c6                	mov    esi,eax
c001efd8:	89 d7                	mov    edi,edx
c001efda:	e8 f2 f7 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001efdf:	57                   	push   edi
c001efe0:	56                   	push   esi
c001efe1:	52                   	push   edx
c001efe2:	50                   	push   eax
c001efe3:	e8 0c f7 ff ff       	call   c001e6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001efe8:	83 c4 20             	add    esp,0x20
c001efeb:	e8 cc f8 ff ff       	call   c001e8bc <Vm::fpuPop()>
c001eff0:	eb 62                	jmp    c001f054 <Vm::x87Handler(regs*)+0x746>
c001eff2:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001eff6:	0f 85 0f 01 00 00    	jne    c001f10b <Vm::x87Handler(regs*)+0x7fd>
c001effc:	83 ec 0c             	sub    esp,0xc
c001efff:	6a 01                	push   0x1
c001f001:	e8 cb f7 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f006:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f00d:	89 c6                	mov    esi,eax
c001f00f:	89 d7                	mov    edi,edx
c001f011:	e8 bb f7 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f016:	57                   	push   edi
c001f017:	56                   	push   esi
c001f018:	52                   	push   edx
c001f019:	50                   	push   eax
c001f01a:	e8 d5 f6 ff ff       	call   c001e6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f01f:	83 c4 20             	add    esp,0x20
c001f022:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f026:	e8 91 f8 ff ff       	call   c001e8bc <Vm::fpuPop()>
c001f02b:	e8 8c f8 ff ff       	call   c001e8bc <Vm::fpuPop()>
c001f030:	e9 50 f9 ff ff       	jmp    c001e985 <Vm::x87Handler(regs*)+0x77>
c001f035:	3c d9                	cmp    al,0xd9
c001f037:	0f 85 b5 02 00 00    	jne    c001f2f2 <Vm::x87Handler(regs*)+0x9e4>
c001f03d:	eb bd                	jmp    c001effc <Vm::x87Handler(regs*)+0x6ee>
c001f03f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f043:	0f 85 ea 02 00 00    	jne    c001f333 <Vm::x87Handler(regs*)+0xa25>
c001f049:	0f b7 05 40 de 02 c0 	movzx  eax,WORD PTR ds:0xc002de40
c001f050:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f054:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f058:	e9 28 f9 ff ff       	jmp    c001e985 <Vm::x87Handler(regs*)+0x77>
c001f05d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f061:	84 d2                	test   dl,dl
c001f063:	75 0f                	jne    c001f074 <Vm::x87Handler(regs*)+0x766>
c001f065:	83 ec 0c             	sub    esp,0xc
c001f068:	ff 36                	push   DWORD PTR [esi]
c001f06a:	e8 b1 f4 ff ff       	call   c001e520 <Vm::fpu32ToInternal(unsigned int)>
c001f06f:	e9 2c 01 00 00       	jmp    c001f1a0 <Vm::x87Handler(regs*)+0x892>
c001f074:	80 fa 01             	cmp    dl,0x1
c001f077:	75 0f                	jne    c001f088 <Vm::x87Handler(regs*)+0x77a>
c001f079:	83 ec 0c             	sub    esp,0xc
c001f07c:	ff 36                	push   DWORD PTR [esi]
c001f07e:	e8 9d f4 ff ff       	call   c001e520 <Vm::fpu32ToInternal(unsigned int)>
c001f083:	e9 81 02 00 00       	jmp    c001f309 <Vm::x87Handler(regs*)+0x9fb>
c001f088:	80 fa 04             	cmp    dl,0x4
c001f08b:	75 0f                	jne    c001f09c <Vm::x87Handler(regs*)+0x78e>
c001f08d:	83 ec 0c             	sub    esp,0xc
c001f090:	ff 36                	push   DWORD PTR [esi]
c001f092:	e8 89 f4 ff ff       	call   c001e520 <Vm::fpu32ToInternal(unsigned int)>
c001f097:	e9 86 01 00 00       	jmp    c001f222 <Vm::x87Handler(regs*)+0x914>
c001f09c:	80 fa 05             	cmp    dl,0x5
c001f09f:	75 1b                	jne    c001f0bc <Vm::x87Handler(regs*)+0x7ae>
c001f0a1:	83 ec 0c             	sub    esp,0xc
c001f0a4:	6a 00                	push   0x0
c001f0a6:	e8 26 f7 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f0ab:	89 c7                	mov    edi,eax
c001f0ad:	89 d5                	mov    ebp,edx
c001f0af:	58                   	pop    eax
c001f0b0:	ff 36                	push   DWORD PTR [esi]
c001f0b2:	e8 69 f4 ff ff       	call   c001e520 <Vm::fpu32ToInternal(unsigned int)>
c001f0b7:	e9 a3 01 00 00       	jmp    c001f25f <Vm::x87Handler(regs*)+0x951>
c001f0bc:	80 fa 06             	cmp    dl,0x6
c001f0bf:	75 0f                	jne    c001f0d0 <Vm::x87Handler(regs*)+0x7c2>
c001f0c1:	83 ec 0c             	sub    esp,0xc
c001f0c4:	ff 36                	push   DWORD PTR [esi]
c001f0c6:	e8 55 f4 ff ff       	call   c001e520 <Vm::fpu32ToInternal(unsigned int)>
c001f0cb:	e9 ae 01 00 00       	jmp    c001f27e <Vm::x87Handler(regs*)+0x970>
c001f0d0:	31 c0                	xor    eax,eax
c001f0d2:	80 fa 07             	cmp    dl,0x7
c001f0d5:	0f 85 94 02 00 00    	jne    c001f36f <Vm::x87Handler(regs*)+0xa61>
c001f0db:	83 ec 0c             	sub    esp,0xc
c001f0de:	6a 00                	push   0x0
c001f0e0:	e8 ec f6 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f0e5:	89 c7                	mov    edi,eax
c001f0e7:	89 d5                	mov    ebp,edx
c001f0e9:	58                   	pop    eax
c001f0ea:	ff 36                	push   DWORD PTR [esi]
c001f0ec:	e8 2f f4 ff ff       	call   c001e520 <Vm::fpu32ToInternal(unsigned int)>
c001f0f1:	e9 cb 01 00 00       	jmp    c001f2c1 <Vm::x87Handler(regs*)+0x9b3>
c001f0f6:	80 fa 03             	cmp    dl,0x3
c001f0f9:	0f 85 d3 01 00 00    	jne    c001f2d2 <Vm::x87Handler(regs*)+0x9c4>
c001f0ff:	e8 b8 f7 ff ff       	call   c001e8bc <Vm::fpuPop()>
c001f104:	51                   	push   ecx
c001f105:	51                   	push   ecx
c001f106:	e9 de 01 00 00       	jmp    c001f2e9 <Vm::x87Handler(regs*)+0x9db>
c001f10b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f10f:	80 fa 01             	cmp    dl,0x1
c001f112:	75 09                	jne    c001f11d <Vm::x87Handler(regs*)+0x80f>
c001f114:	57                   	push   edi
c001f115:	57                   	push   edi
c001f116:	8b 06                	mov    eax,DWORD PTR [esi]
c001f118:	e9 e3 01 00 00       	jmp    c001f300 <Vm::x87Handler(regs*)+0x9f2>
c001f11d:	80 fa 04             	cmp    dl,0x4
c001f120:	75 12                	jne    c001f134 <Vm::x87Handler(regs*)+0x826>
c001f122:	31 d2                	xor    edx,edx
c001f124:	51                   	push   ecx
c001f125:	51                   	push   ecx
c001f126:	8b 06                	mov    eax,DWORD PTR [esi]
c001f128:	52                   	push   edx
c001f129:	50                   	push   eax
c001f12a:	e8 d0 f4 ff ff       	call   c001e5ff <Vm::fpuLongToFloat(long long)>
c001f12f:	e9 ee 00 00 00       	jmp    c001f222 <Vm::x87Handler(regs*)+0x914>
c001f134:	31 c0                	xor    eax,eax
c001f136:	80 fa 07             	cmp    dl,0x7
c001f139:	0f 85 30 02 00 00    	jne    c001f36f <Vm::x87Handler(regs*)+0xa61>
c001f13f:	83 ec 0c             	sub    esp,0xc
c001f142:	6a 00                	push   0x0
c001f144:	e8 88 f6 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f149:	89 c7                	mov    edi,eax
c001f14b:	89 d5                	mov    ebp,edx
c001f14d:	58                   	pop    eax
c001f14e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f150:	5a                   	pop    edx
c001f151:	31 d2                	xor    edx,edx
c001f153:	52                   	push   edx
c001f154:	50                   	push   eax
c001f155:	e8 a5 f4 ff ff       	call   c001e5ff <Vm::fpuLongToFloat(long long)>
c001f15a:	e9 62 01 00 00       	jmp    c001f2c1 <Vm::x87Handler(regs*)+0x9b3>
c001f15f:	84 d2                	test   dl,dl
c001f161:	75 0d                	jne    c001f170 <Vm::x87Handler(regs*)+0x862>
c001f163:	31 d2                	xor    edx,edx
c001f165:	55                   	push   ebp
c001f166:	55                   	push   ebp
c001f167:	8b 06                	mov    eax,DWORD PTR [esi]
c001f169:	52                   	push   edx
c001f16a:	50                   	push   eax
c001f16b:	e9 d3 01 00 00       	jmp    c001f343 <Vm::x87Handler(regs*)+0xa35>
c001f170:	31 c0                	xor    eax,eax
c001f172:	80 fa 02             	cmp    dl,0x2
c001f175:	0f 85 f4 01 00 00    	jne    c001f36f <Vm::x87Handler(regs*)+0xa61>
c001f17b:	83 ec 0c             	sub    esp,0xc
c001f17e:	6a 00                	push   0x0
c001f180:	e8 4c f6 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f185:	59                   	pop    ecx
c001f186:	5f                   	pop    edi
c001f187:	e9 6a f9 ff ff       	jmp    c001eaf6 <Vm::x87Handler(regs*)+0x1e8>
c001f18c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f190:	84 d2                	test   dl,dl
c001f192:	75 2a                	jne    c001f1be <Vm::x87Handler(regs*)+0x8b0>
c001f194:	50                   	push   eax
c001f195:	50                   	push   eax
c001f196:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f199:	ff 36                	push   DWORD PTR [esi]
c001f19b:	e8 c5 f3 ff ff       	call   c001e565 <Vm::fpu64ToInternal(unsigned long long)>
c001f1a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1a7:	89 c6                	mov    esi,eax
c001f1a9:	89 d7                	mov    edi,edx
c001f1ab:	e8 21 f6 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f1b0:	57                   	push   edi
c001f1b1:	56                   	push   esi
c001f1b2:	52                   	push   edx
c001f1b3:	50                   	push   eax
c001f1b4:	e8 8e f5 ff ff       	call   c001e747 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f1b9:	e9 64 01 00 00       	jmp    c001f322 <Vm::x87Handler(regs*)+0xa14>
c001f1be:	80 fa 01             	cmp    dl,0x1
c001f1c1:	75 11                	jne    c001f1d4 <Vm::x87Handler(regs*)+0x8c6>
c001f1c3:	50                   	push   eax
c001f1c4:	50                   	push   eax
c001f1c5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f1c8:	ff 36                	push   DWORD PTR [esi]
c001f1ca:	e8 96 f3 ff ff       	call   c001e565 <Vm::fpu64ToInternal(unsigned long long)>
c001f1cf:	e9 35 01 00 00       	jmp    c001f309 <Vm::x87Handler(regs*)+0x9fb>
c001f1d4:	80 fa 02             	cmp    dl,0x2
c001f1d7:	0f 85 54 f9 ff ff    	jne    c001eb31 <Vm::x87Handler(regs*)+0x223>
c001f1dd:	55                   	push   ebp
c001f1de:	55                   	push   ebp
c001f1df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f1e2:	ff 36                	push   DWORD PTR [esi]
c001f1e4:	e8 7c f3 ff ff       	call   c001e565 <Vm::fpu64ToInternal(unsigned long long)>
c001f1e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1f0:	89 c6                	mov    esi,eax
c001f1f2:	89 d7                	mov    edi,edx
c001f1f4:	e8 d8 f5 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f1f9:	57                   	push   edi
c001f1fa:	56                   	push   esi
c001f1fb:	52                   	push   edx
c001f1fc:	50                   	push   eax
c001f1fd:	e8 f2 f4 ff ff       	call   c001e6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f206:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f209:	83 c4 20             	add    esp,0x20
c001f20c:	e9 74 f7 ff ff       	jmp    c001e985 <Vm::x87Handler(regs*)+0x77>
c001f211:	80 fa 04             	cmp    dl,0x4
c001f214:	75 2a                	jne    c001f240 <Vm::x87Handler(regs*)+0x932>
c001f216:	51                   	push   ecx
c001f217:	51                   	push   ecx
c001f218:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f21b:	ff 36                	push   DWORD PTR [esi]
c001f21d:	e8 43 f3 ff ff       	call   c001e565 <Vm::fpu64ToInternal(unsigned long long)>
c001f222:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f229:	89 c6                	mov    esi,eax
c001f22b:	89 d7                	mov    edi,edx
c001f22d:	e8 9f f5 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f232:	57                   	push   edi
c001f233:	56                   	push   esi
c001f234:	52                   	push   edx
c001f235:	50                   	push   eax
c001f236:	e8 36 f5 ff ff       	call   c001e771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f23b:	e9 e2 00 00 00       	jmp    c001f322 <Vm::x87Handler(regs*)+0xa14>
c001f240:	80 fa 05             	cmp    dl,0x5
c001f243:	75 28                	jne    c001f26d <Vm::x87Handler(regs*)+0x95f>
c001f245:	83 ec 0c             	sub    esp,0xc
c001f248:	6a 00                	push   0x0
c001f24a:	e8 82 f5 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f24f:	89 c7                	mov    edi,eax
c001f251:	89 d5                	mov    ebp,edx
c001f253:	58                   	pop    eax
c001f254:	5a                   	pop    edx
c001f255:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f258:	ff 36                	push   DWORD PTR [esi]
c001f25a:	e8 06 f3 ff ff       	call   c001e565 <Vm::fpu64ToInternal(unsigned long long)>
c001f25f:	83 c4 10             	add    esp,0x10
c001f262:	55                   	push   ebp
c001f263:	57                   	push   edi
c001f264:	52                   	push   edx
c001f265:	50                   	push   eax
c001f266:	e8 06 f5 ff ff       	call   c001e771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f26b:	eb 60                	jmp    c001f2cd <Vm::x87Handler(regs*)+0x9bf>
c001f26d:	80 fa 06             	cmp    dl,0x6
c001f270:	75 2a                	jne    c001f29c <Vm::x87Handler(regs*)+0x98e>
c001f272:	51                   	push   ecx
c001f273:	51                   	push   ecx
c001f274:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f277:	ff 36                	push   DWORD PTR [esi]
c001f279:	e8 e7 f2 ff ff       	call   c001e565 <Vm::fpu64ToInternal(unsigned long long)>
c001f27e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f285:	89 c6                	mov    esi,eax
c001f287:	89 d7                	mov    edi,edx
c001f289:	e8 43 f5 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f28e:	57                   	push   edi
c001f28f:	56                   	push   esi
c001f290:	52                   	push   edx
c001f291:	50                   	push   eax
c001f292:	e8 08 f5 ff ff       	call   c001e79f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f297:	e9 86 00 00 00       	jmp    c001f322 <Vm::x87Handler(regs*)+0xa14>
c001f29c:	31 c0                	xor    eax,eax
c001f29e:	80 fa 07             	cmp    dl,0x7
c001f2a1:	0f 85 c8 00 00 00    	jne    c001f36f <Vm::x87Handler(regs*)+0xa61>
c001f2a7:	83 ec 0c             	sub    esp,0xc
c001f2aa:	6a 00                	push   0x0
c001f2ac:	e8 20 f5 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f2b1:	89 c7                	mov    edi,eax
c001f2b3:	89 d5                	mov    ebp,edx
c001f2b5:	58                   	pop    eax
c001f2b6:	5a                   	pop    edx
c001f2b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2ba:	ff 36                	push   DWORD PTR [esi]
c001f2bc:	e8 a4 f2 ff ff       	call   c001e565 <Vm::fpu64ToInternal(unsigned long long)>
c001f2c1:	83 c4 10             	add    esp,0x10
c001f2c4:	55                   	push   ebp
c001f2c5:	57                   	push   edi
c001f2c6:	52                   	push   edx
c001f2c7:	50                   	push   eax
c001f2c8:	e8 d2 f4 ff ff       	call   c001e79f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f2cd:	83 c4 0c             	add    esp,0xc
c001f2d0:	eb 53                	jmp    c001f325 <Vm::x87Handler(regs*)+0xa17>
c001f2d2:	31 c0                	xor    eax,eax
c001f2d4:	80 fa 02             	cmp    dl,0x2
c001f2d7:	0f 85 92 00 00 00    	jne    c001f36f <Vm::x87Handler(regs*)+0xa61>
c001f2dd:	83 ec 0c             	sub    esp,0xc
c001f2e0:	6a 00                	push   0x0
c001f2e2:	e8 ea f4 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f2e7:	59                   	pop    ecx
c001f2e8:	5f                   	pop    edi
c001f2e9:	52                   	push   edx
c001f2ea:	50                   	push   eax
c001f2eb:	e8 27 f2 ff ff       	call   c001e517 <Vm::fpuInternalTo64(unsigned long long)>
c001f2f0:	eb 70                	jmp    c001f362 <Vm::x87Handler(regs*)+0xa54>
c001f2f2:	31 c0                	xor    eax,eax
c001f2f4:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f2f9:	75 74                	jne    c001f36f <Vm::x87Handler(regs*)+0xa61>
c001f2fb:	50                   	push   eax
c001f2fc:	50                   	push   eax
c001f2fd:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f300:	31 d2                	xor    edx,edx
c001f302:	52                   	push   edx
c001f303:	50                   	push   eax
c001f304:	e8 f6 f2 ff ff       	call   c001e5ff <Vm::fpuLongToFloat(long long)>
c001f309:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f310:	89 c6                	mov    esi,eax
c001f312:	89 d7                	mov    edi,edx
c001f314:	e8 b8 f4 ff ff       	call   c001e7d1 <Vm::fpuGetReg(int)>
c001f319:	57                   	push   edi
c001f31a:	56                   	push   esi
c001f31b:	52                   	push   edx
c001f31c:	50                   	push   eax
c001f31d:	e8 5e f4 ff ff       	call   c001e780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f322:	83 c4 1c             	add    esp,0x1c
c001f325:	52                   	push   edx
c001f326:	50                   	push   eax
c001f327:	6a 00                	push   0x0
c001f329:	e8 e6 f4 ff ff       	call   c001e814 <Vm::fpuSetReg(int, unsigned long long)>
c001f32e:	e9 f2 f7 ff ff       	jmp    c001eb25 <Vm::x87Handler(regs*)+0x217>
c001f333:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f337:	80 fa 05             	cmp    dl,0x5
c001f33a:	75 11                	jne    c001f34d <Vm::x87Handler(regs*)+0xa3f>
c001f33c:	55                   	push   ebp
c001f33d:	55                   	push   ebp
c001f33e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f341:	ff 36                	push   DWORD PTR [esi]
c001f343:	e8 81 f2 ff ff       	call   c001e5c9 <Vm::fpuULongToFloat(unsigned long long)>
c001f348:	e9 cf f7 ff ff       	jmp    c001eb1c <Vm::x87Handler(regs*)+0x20e>
c001f34d:	31 c0                	xor    eax,eax
c001f34f:	80 fa 07             	cmp    dl,0x7
c001f352:	75 1b                	jne    c001f36f <Vm::x87Handler(regs*)+0xa61>
c001f354:	e8 63 f5 ff ff       	call   c001e8bc <Vm::fpuPop()>
c001f359:	51                   	push   ecx
c001f35a:	51                   	push   ecx
c001f35b:	52                   	push   edx
c001f35c:	50                   	push   eax
c001f35d:	e8 0c f2 ff ff       	call   c001e56e <Vm::fpuFloatToLong(unsigned long long)>
c001f362:	83 c4 10             	add    esp,0x10
c001f365:	89 06                	mov    DWORD PTR [esi],eax
c001f367:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f36a:	e9 f8 f7 ff ff       	jmp    c001eb67 <Vm::x87Handler(regs*)+0x259>
c001f36f:	83 c4 1c             	add    esp,0x1c
c001f372:	5b                   	pop    ebx
c001f373:	5e                   	pop    esi
c001f374:	5f                   	pop    edi
c001f375:	5d                   	pop    ebp
c001f376:	c3                   	ret    

c001f377 <__static_initialization_and_destruction_0(int, int)>:
c001f377:	83 ec 0c             	sub    esp,0xc
c001f37a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f37f:	75 1a                	jne    c001f39b <__static_initialization_and_destruction_0(int, int)+0x24>
c001f381:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f389:	75 10                	jne    c001f39b <__static_initialization_and_destruction_0(int, int)+0x24>
c001f38b:	83 ec 0c             	sub    esp,0xc
c001f38e:	68 40 de 02 c0       	push   0xc002de40
c001f393:	e8 b8 82 00 00       	call   c0027650 <Vm::_FPUState::_FPUState()>
c001f398:	83 c4 10             	add    esp,0x10
c001f39b:	90                   	nop
c001f39c:	83 c4 0c             	add    esp,0xc
c001f39f:	c3                   	ret    

c001f3a0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f3a0:	83 ec 0c             	sub    esp,0xc
c001f3a3:	83 ec 08             	sub    esp,0x8
c001f3a6:	68 ff ff 00 00       	push   0xffff
c001f3ab:	6a 01                	push   0x1
c001f3ad:	e8 c5 ff ff ff       	call   c001f377 <__static_initialization_and_destruction_0(int, int)>
c001f3b2:	83 c4 10             	add    esp,0x10
c001f3b5:	83 c4 0c             	add    esp,0xc
c001f3b8:	c3                   	ret    
c001f3b9:	90                   	nop

c001f3ba <FAT::getName()>:
c001f3ba:	b8 ec ac 02 c0       	mov    eax,0xc002acec
c001f3bf:	c3                   	ret    

c001f3c0 <FAT::tell(void*, unsigned long long*)>:
c001f3c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f3c5:	75 06                	jne    c001f3cd <FAT::tell(void*, unsigned long long*)+0xd>
c001f3c7:	b8 04 00 00 00       	mov    eax,0x4
c001f3cc:	c3                   	ret    
c001f3cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f3d2:	75 06                	jne    c001f3da <FAT::tell(void*, unsigned long long*)+0x1a>
c001f3d4:	b8 04 00 00 00       	mov    eax,0x4
c001f3d9:	c3                   	ret    
c001f3da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f3de:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f3e1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f3e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3e8:	89 01                	mov    DWORD PTR [ecx],eax
c001f3ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f3ed:	b8 00 00 00 00       	mov    eax,0x0
c001f3f2:	c3                   	ret    
c001f3f3:	90                   	nop

c001f3f4 <FAT::stat(void*, unsigned long long*)>:
c001f3f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f3f9:	75 06                	jne    c001f401 <FAT::stat(void*, unsigned long long*)+0xd>
c001f3fb:	b8 04 00 00 00       	mov    eax,0x4
c001f400:	c3                   	ret    
c001f401:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f406:	75 06                	jne    c001f40e <FAT::stat(void*, unsigned long long*)+0x1a>
c001f408:	b8 04 00 00 00       	mov    eax,0x4
c001f40d:	c3                   	ret    
c001f40e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f412:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f415:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f418:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f41c:	89 01                	mov    DWORD PTR [ecx],eax
c001f41e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f421:	b8 00 00 00 00       	mov    eax,0x0
c001f426:	c3                   	ret    
c001f427:	90                   	nop

c001f428 <FAT::~FAT()>:
c001f428:	83 ec 0c             	sub    esp,0xc
c001f42b:	ba 70 ad 02 c0       	mov    edx,0xc002ad70
c001f430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f434:	89 10                	mov    DWORD PTR [eax],edx
c001f436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f43a:	83 ec 0c             	sub    esp,0xc
c001f43d:	50                   	push   eax
c001f43e:	e8 b7 35 ff ff       	call   c00129fa <Filesystem::~Filesystem()>
c001f443:	83 c4 10             	add    esp,0x10
c001f446:	90                   	nop
c001f447:	83 c4 0c             	add    esp,0xc
c001f44a:	c3                   	ret    
c001f44b:	90                   	nop

c001f44c <FAT::~FAT()>:
c001f44c:	83 ec 0c             	sub    esp,0xc
c001f44f:	83 ec 0c             	sub    esp,0xc
c001f452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f456:	e8 cd ff ff ff       	call   c001f428 <FAT::~FAT()>
c001f45b:	83 c4 10             	add    esp,0x10
c001f45e:	83 ec 08             	sub    esp,0x8
c001f461:	6a 08                	push   0x8
c001f463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f467:	e8 85 31 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c001f46c:	83 c4 10             	add    esp,0x10
c001f46f:	83 c4 0c             	add    esp,0xc
c001f472:	c3                   	ret    
c001f473:	90                   	nop

c001f474 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f474:	83 ec 1c             	sub    esp,0x1c
c001f477:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f47e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f483:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f487:	8b 04 85 c0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2140]
c001f48e:	83 f8 ff             	cmp    eax,0xffffffff
c001f491:	75 34                	jne    c001f4c7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f493:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f497:	88 c2                	mov    dl,al
c001f499:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c001f49e:	01 d0                	add    eax,edx
c001f4a0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f4a4:	8b 15 a0 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dea0
c001f4aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f4ae:	89 14 85 c0 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2140],edx
c001f4b5:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c001f4ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f4be:	89 14 85 40 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd20c0],edx
c001f4c5:	eb 17                	jmp    c001f4de <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f4c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f4cb:	88 c2                	mov    dl,al
c001f4cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f4d1:	8b 04 85 c0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2140]
c001f4d8:	01 d0                	add    eax,edx
c001f4da:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f4de:	83 ec 04             	sub    esp,0x4
c001f4e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f4e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f4e9:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f4ed:	50                   	push   eax
c001f4ee:	e8 f5 75 fe ff       	call   c0006ae8 <f_getlabel>
c001f4f3:	83 c4 10             	add    esp,0x10
c001f4f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f4fa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f4ff:	75 07                	jne    c001f508 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f501:	b8 00 00 00 00       	mov    eax,0x0
c001f506:	eb 05                	jmp    c001f50d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f508:	b8 01 00 00 00       	mov    eax,0x1
c001f50d:	83 c4 1c             	add    esp,0x1c
c001f510:	c3                   	ret    
c001f511:	90                   	nop

c001f512 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f512:	57                   	push   edi
c001f513:	83 ec 58             	sub    esp,0x58
c001f516:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f51e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f522:	b9 0f 00 00 00       	mov    ecx,0xf
c001f527:	b8 00 00 00 00       	mov    eax,0x0
c001f52c:	fc                   	cld    
c001f52d:	89 d7                	mov    edi,edx
c001f52f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f531:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f535:	8b 04 85 c0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2140]
c001f53c:	83 f8 ff             	cmp    eax,0xffffffff
c001f53f:	75 34                	jne    c001f575 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f541:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f545:	88 c2                	mov    dl,al
c001f547:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c001f54c:	01 d0                	add    eax,edx
c001f54e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f552:	8b 15 a0 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dea0
c001f558:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f55c:	89 14 85 c0 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2140],edx
c001f563:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c001f568:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f56c:	89 14 85 40 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd20c0],edx
c001f573:	eb 17                	jmp    c001f58c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f575:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f579:	88 c2                	mov    dl,al
c001f57b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f57f:	8b 04 85 c0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2140]
c001f586:	01 d0                	add    eax,edx
c001f588:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f58c:	83 ec 08             	sub    esp,0x8
c001f58f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f593:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f597:	50                   	push   eax
c001f598:	e8 44 12 fe ff       	call   c00007e1 <strcat>
c001f59d:	83 c4 10             	add    esp,0x10
c001f5a0:	83 ec 0c             	sub    esp,0xc
c001f5a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f5a7:	50                   	push   eax
c001f5a8:	e8 29 77 fe ff       	call   c0006cd6 <f_setlabel>
c001f5ad:	83 c4 10             	add    esp,0x10
c001f5b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f5b4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f5b9:	75 07                	jne    c001f5c2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f5bb:	b8 00 00 00 00       	mov    eax,0x0
c001f5c0:	eb 05                	jmp    c001f5c7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f5c2:	b8 01 00 00 00       	mov    eax,0x1
c001f5c7:	83 c4 58             	add    esp,0x58
c001f5ca:	5f                   	pop    edi
c001f5cb:	c3                   	ret    

c001f5cc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f5cc:	83 ec 2c             	sub    esp,0x2c
c001f5cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f5d7:	83 ec 08             	sub    esp,0x8
c001f5da:	68 10 ad 02 c0       	push   0xc002ad10
c001f5df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f5e3:	e8 93 11 fe ff       	call   c000077b <strcmp>
c001f5e8:	83 c4 10             	add    esp,0x10
c001f5eb:	85 c0                	test   eax,eax
c001f5ed:	0f 94 c0             	sete   al
c001f5f0:	84 c0                	test   al,al
c001f5f2:	74 0d                	je     c001f601 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f5f4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f5fc:	e9 a6 00 00 00       	jmp    c001f6a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f601:	83 ec 08             	sub    esp,0x8
c001f604:	68 02 ad 02 c0       	push   0xc002ad02
c001f609:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f60d:	e8 69 11 fe ff       	call   c000077b <strcmp>
c001f612:	83 c4 10             	add    esp,0x10
c001f615:	85 c0                	test   eax,eax
c001f617:	0f 94 c0             	sete   al
c001f61a:	84 c0                	test   al,al
c001f61c:	74 0a                	je     c001f628 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f61e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f626:	eb 7f                	jmp    c001f6a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f628:	83 ec 08             	sub    esp,0x8
c001f62b:	68 08 ad 02 c0       	push   0xc002ad08
c001f630:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f634:	e8 42 11 fe ff       	call   c000077b <strcmp>
c001f639:	83 c4 10             	add    esp,0x10
c001f63c:	85 c0                	test   eax,eax
c001f63e:	0f 94 c0             	sete   al
c001f641:	84 c0                	test   al,al
c001f643:	74 0a                	je     c001f64f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f645:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f64d:	eb 58                	jmp    c001f6a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f64f:	83 ec 08             	sub    esp,0x8
c001f652:	68 6c 7d 02 c0       	push   0xc0027d6c
c001f657:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f65b:	e8 1b 11 fe ff       	call   c000077b <strcmp>
c001f660:	83 c4 10             	add    esp,0x10
c001f663:	85 c0                	test   eax,eax
c001f665:	0f 94 c0             	sete   al
c001f668:	84 c0                	test   al,al
c001f66a:	74 0a                	je     c001f676 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f66c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f674:	eb 31                	jmp    c001f6a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f676:	83 ec 08             	sub    esp,0x8
c001f679:	68 0e ad 02 c0       	push   0xc002ad0e
c001f67e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f682:	e8 f4 10 fe ff       	call   c000077b <strcmp>
c001f687:	83 c4 10             	add    esp,0x10
c001f68a:	85 c0                	test   eax,eax
c001f68c:	0f 94 c0             	sete   al
c001f68f:	84 c0                	test   al,al
c001f691:	74 0a                	je     c001f69d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f693:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f69b:	eb 0a                	jmp    c001f6a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f69d:	b8 08 00 00 00       	mov    eax,0x8
c001f6a2:	e9 04 01 00 00       	jmp    c001f7ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f6a7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f6ae:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f6b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f6b7:	8b 04 85 c0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2140]
c001f6be:	83 f8 ff             	cmp    eax,0xffffffff
c001f6c1:	75 34                	jne    c001f6f7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f6c3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f6c7:	88 c2                	mov    dl,al
c001f6c9:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c001f6ce:	01 d0                	add    eax,edx
c001f6d0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f6d4:	8b 15 a0 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dea0
c001f6da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f6de:	89 14 85 c0 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2140],edx
c001f6e5:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c001f6ea:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f6ee:	89 14 85 40 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd20c0],edx
c001f6f5:	eb 17                	jmp    c001f70e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f6f7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f6fb:	88 c2                	mov    dl,al
c001f6fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f701:	8b 04 85 c0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2140]
c001f708:	01 d0                	add    eax,edx
c001f70a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f70e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f712:	88 04 24             	mov    BYTE PTR [esp],al
c001f715:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f719:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f71d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f725:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f72a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f732:	83 ec 0c             	sub    esp,0xc
c001f735:	68 00 20 00 00       	push   0x2000
c001f73a:	e8 95 fd fe ff       	call   c000f4d4 <malloc>
c001f73f:	83 c4 10             	add    esp,0x10
c001f742:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f746:	68 00 20 00 00       	push   0x2000
c001f74b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f74f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f753:	50                   	push   eax
c001f754:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f758:	50                   	push   eax
c001f759:	e8 c3 79 fe ff       	call   c0007121 <f_mkfs>
c001f75e:	83 c4 10             	add    esp,0x10
c001f761:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f765:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f76a:	75 07                	jne    c001f773 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f76c:	b8 00 00 00 00       	mov    eax,0x0
c001f771:	eb 38                	jmp    c001f7ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f773:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f778:	75 17                	jne    c001f791 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f77a:	83 ec 0c             	sub    esp,0xc
c001f77d:	68 40 ad 02 c0       	push   0xc002ad40
c001f782:	e8 4a 2f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001f787:	83 c4 10             	add    esp,0x10
c001f78a:	b8 09 00 00 00       	mov    eax,0x9
c001f78f:	eb 1a                	jmp    c001f7ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f791:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f795:	83 ec 08             	sub    esp,0x8
c001f798:	50                   	push   eax
c001f799:	68 14 ad 02 c0       	push   0xc002ad14
c001f79e:	e8 2e 2f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c001f7a3:	83 c4 10             	add    esp,0x10
c001f7a6:	b8 01 00 00 00       	mov    eax,0x1
c001f7ab:	83 c4 2c             	add    esp,0x2c
c001f7ae:	c3                   	ret    
c001f7af:	90                   	nop

c001f7b0 <FAT::tryMount(LogicalDisk*, int)>:
c001f7b0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f7b6:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c001f7bb:	83 f8 14             	cmp    eax,0x14
c001f7be:	75 17                	jne    c001f7d7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f7c0:	83 ec 0c             	sub    esp,0xc
c001f7c3:	68 26 ad 02 c0       	push   0xc002ad26
c001f7c8:	e8 1e a0 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c001f7cd:	83 c4 10             	add    esp,0x10
c001f7d0:	b0 00                	mov    al,0x0
c001f7d2:	e9 d7 01 00 00       	jmp    c001f9ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f7d7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f7de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f7e4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f7ea:	3d 00 02 00 00       	cmp    eax,0x200
c001f7ef:	74 07                	je     c001f7f8 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f7f1:	b0 00                	mov    al,0x0
c001f7f3:	e9 b6 01 00 00       	jmp    c001f9ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f7f8:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f800:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f807:	8b 04 85 c0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2140]
c001f80e:	83 f8 ff             	cmp    eax,0xffffffff
c001f811:	74 07                	je     c001f81a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f813:	b0 01                	mov    al,0x1
c001f815:	e9 94 01 00 00       	jmp    c001f9ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f81a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f824:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f82c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f833:	88 c2                	mov    dl,al
c001f835:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c001f83a:	01 d0                	add    eax,edx
c001f83c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f843:	8b 15 a0 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dea0
c001f849:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f850:	89 14 85 c0 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2140],edx
c001f857:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c001f85c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f863:	89 14 85 40 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd20c0],edx
c001f86a:	83 ec 0c             	sub    esp,0xc
c001f86d:	68 54 02 00 00       	push   0x254
c001f872:	e8 5d fc fe ff       	call   c000f4d4 <malloc>
c001f877:	83 c4 10             	add    esp,0x10
c001f87a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f881:	83 ec 04             	sub    esp,0x4
c001f884:	6a 00                	push   0x0
c001f886:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f88d:	50                   	push   eax
c001f88e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f895:	e8 45 54 fe ff       	call   c0004cdf <f_mount>
c001f89a:	83 c4 10             	add    esp,0x10
c001f89d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f8a4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f8ac:	74 19                	je     c001f8c7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f8ae:	83 ec 0c             	sub    esp,0xc
c001f8b1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f8b8:	e8 37 fc fe ff       	call   c000f4f4 <rfree>
c001f8bd:	83 c4 10             	add    esp,0x10
c001f8c0:	b0 00                	mov    al,0x0
c001f8c2:	e9 e7 00 00 00       	jmp    c001f9ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f8c7:	83 ec 04             	sub    esp,0x4
c001f8ca:	68 00 01 00 00       	push   0x100
c001f8cf:	6a 00                	push   0x0
c001f8d1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f8d8:	50                   	push   eax
c001f8d9:	e8 ad 0d fe ff       	call   c000068b <memset>
c001f8de:	83 c4 10             	add    esp,0x10
c001f8e1:	83 ec 08             	sub    esp,0x8
c001f8e4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f8eb:	50                   	push   eax
c001f8ec:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f8f3:	50                   	push   eax
c001f8f4:	e8 e8 0e fe ff       	call   c00007e1 <strcat>
c001f8f9:	83 c4 10             	add    esp,0x10
c001f8fc:	83 ec 08             	sub    esp,0x8
c001f8ff:	68 34 ad 02 c0       	push   0xc002ad34
c001f904:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f90b:	50                   	push   eax
c001f90c:	e8 d0 0e fe ff       	call   c00007e1 <strcat>
c001f911:	83 c4 10             	add    esp,0x10
c001f914:	83 ec 04             	sub    esp,0x4
c001f917:	6a 01                	push   0x1
c001f919:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001f920:	50                   	push   eax
c001f921:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f925:	50                   	push   eax
c001f926:	e8 16 54 fe ff       	call   c0004d41 <f_open>
c001f92b:	83 c4 10             	add    esp,0x10
c001f92e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f935:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001f93c:	85 c0                	test   eax,eax
c001f93e:	74 0a                	je     c001f94a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001f940:	78 2d                	js     c001f96f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f942:	83 e8 04             	sub    eax,0x4
c001f945:	83 f8 01             	cmp    eax,0x1
c001f948:	77 25                	ja     c001f96f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f94a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001f952:	83 ec 0c             	sub    esp,0xc
c001f955:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f959:	50                   	push   eax
c001f95a:	e8 34 5f fe ff       	call   c0005893 <f_close>
c001f95f:	83 c4 10             	add    esp,0x10
c001f962:	90                   	nop
c001f963:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001f96b:	74 3a                	je     c001f9a7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001f96d:	eb 2d                	jmp    c001f99c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001f96f:	83 ec 0c             	sub    esp,0xc
c001f972:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f979:	e8 76 fb fe ff       	call   c000f4f4 <rfree>
c001f97e:	83 c4 10             	add    esp,0x10
c001f981:	83 ec 04             	sub    esp,0x4
c001f984:	6a 00                	push   0x0
c001f986:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f98d:	50                   	push   eax
c001f98e:	6a 00                	push   0x0
c001f990:	e8 4a 53 fe ff       	call   c0004cdf <f_mount>
c001f995:	83 c4 10             	add    esp,0x10
c001f998:	b0 00                	mov    al,0x0
c001f99a:	eb 12                	jmp    c001f9ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f99c:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c001f9a1:	40                   	inc    eax
c001f9a2:	a3 a0 de 02 c0       	mov    ds:0xc002dea0,eax
c001f9a7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001f9ae:	81 c4 6c 03 00 00    	add    esp,0x36c
c001f9b4:	c3                   	ret    
c001f9b5:	90                   	nop

c001f9b6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001f9b6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001f9bc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001f9c4:	74 0a                	je     c001f9d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001f9c6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001f9ce:	75 0a                	jne    c001f9da <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001f9d0:	b8 04 00 00 00       	mov    eax,0x4
c001f9d5:	e9 db 00 00 00       	jmp    c001fab5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001f9da:	83 ec 08             	sub    esp,0x8
c001f9dd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f9e4:	50                   	push   eax
c001f9e5:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001f9ec:	e8 ac 64 fe ff       	call   c0005e9d <f_readdir>
c001f9f1:	83 c4 10             	add    esp,0x10
c001f9f4:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001f9fb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fa01:	83 ec 0c             	sub    esp,0xc
c001fa04:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fa0b:	83 c0 1a             	add    eax,0x1a
c001fa0e:	50                   	push   eax
c001fa0f:	e8 94 0c fe ff       	call   c00006a8 <strlen>
c001fa14:	83 c4 10             	add    esp,0x10
c001fa17:	ba 00 00 00 00       	mov    edx,0x0
c001fa1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fa20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fa24:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001fa2b:	0f b6 c0             	movzx  eax,al
c001fa2e:	83 e0 10             	and    eax,0x10
c001fa31:	74 07                	je     c001fa3a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001fa33:	b8 02 00 00 00       	mov    eax,0x2
c001fa38:	eb 05                	jmp    c001fa3f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001fa3a:	b8 01 00 00 00       	mov    eax,0x1
c001fa3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa43:	83 ec 08             	sub    esp,0x8
c001fa46:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fa4d:	83 c0 1a             	add    eax,0x1a
c001fa50:	50                   	push   eax
c001fa51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa55:	83 c0 10             	add    eax,0x10
c001fa58:	50                   	push   eax
c001fa59:	e8 cc 0c fe ff       	call   c000072a <strcpy>
c001fa5e:	83 c4 10             	add    esp,0x10
c001fa61:	83 ec 04             	sub    esp,0x4
c001fa64:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fa6b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fa6f:	50                   	push   eax
c001fa70:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fa77:	e8 d9 0b fe ff       	call   c0000655 <memcpy>
c001fa7c:	83 c4 10             	add    esp,0x10
c001fa7f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fa86:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fa8c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fa93:	84 c0                	test   al,al
c001fa95:	75 07                	jne    c001fa9e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fa97:	b8 07 00 00 00       	mov    eax,0x7
c001fa9c:	eb 17                	jmp    c001fab5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fa9e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001faa5:	85 c0                	test   eax,eax
c001faa7:	75 07                	jne    c001fab0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001faa9:	b8 00 00 00 00       	mov    eax,0x0
c001faae:	eb 05                	jmp    c001fab5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fab0:	b8 01 00 00 00       	mov    eax,0x1
c001fab5:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fabb:	c3                   	ret    

c001fabc <FAT::read(void*, unsigned long, void*, int*)>:
c001fabc:	83 ec 1c             	sub    esp,0x1c
c001fabf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fac4:	74 07                	je     c001facd <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fac6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001facb:	75 07                	jne    c001fad4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001facd:	b8 04 00 00 00       	mov    eax,0x4
c001fad2:	eb 3d                	jmp    c001fb11 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fad4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fad8:	50                   	push   eax
c001fad9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fadd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fae1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fae5:	e8 93 56 fe ff       	call   c000517d <f_read>
c001faea:	83 c4 10             	add    esp,0x10
c001faed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001faf5:	89 c2                	mov    edx,eax
c001faf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fafb:	89 10                	mov    DWORD PTR [eax],edx
c001fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb01:	85 c0                	test   eax,eax
c001fb03:	75 07                	jne    c001fb0c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fb05:	b8 00 00 00 00       	mov    eax,0x0
c001fb0a:	eb 05                	jmp    c001fb11 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fb0c:	b8 01 00 00 00       	mov    eax,0x1
c001fb11:	83 c4 1c             	add    esp,0x1c
c001fb14:	c3                   	ret    
c001fb15:	90                   	nop

c001fb16 <FAT::write(void*, unsigned long, void*, int*)>:
c001fb16:	83 ec 1c             	sub    esp,0x1c
c001fb19:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb1e:	74 07                	je     c001fb27 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fb20:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fb25:	75 07                	jne    c001fb2e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fb27:	b8 04 00 00 00       	mov    eax,0x4
c001fb2c:	eb 3d                	jmp    c001fb6b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fb2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb32:	50                   	push   eax
c001fb33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fb37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fb3b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb3f:	e8 b9 58 fe ff       	call   c00053fd <f_write>
c001fb44:	83 c4 10             	add    esp,0x10
c001fb47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb4f:	89 c2                	mov    edx,eax
c001fb51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fb55:	89 10                	mov    DWORD PTR [eax],edx
c001fb57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb5b:	85 c0                	test   eax,eax
c001fb5d:	75 07                	jne    c001fb66 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fb5f:	b8 00 00 00 00       	mov    eax,0x0
c001fb64:	eb 05                	jmp    c001fb6b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fb66:	b8 01 00 00 00       	mov    eax,0x1
c001fb6b:	83 c4 1c             	add    esp,0x1c
c001fb6e:	c3                   	ret    
c001fb6f:	90                   	nop

c001fb70 <FAT::close(void*)>:
c001fb70:	83 ec 1c             	sub    esp,0x1c
c001fb73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb78:	75 07                	jne    c001fb81 <FAT::close(void*)+0x11>
c001fb7a:	b8 04 00 00 00       	mov    eax,0x4
c001fb7f:	eb 36                	jmp    c001fbb7 <FAT::close(void*)+0x47>
c001fb81:	83 ec 0c             	sub    esp,0xc
c001fb84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb88:	e8 06 5d fe ff       	call   c0005893 <f_close>
c001fb8d:	83 c4 10             	add    esp,0x10
c001fb90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb9b:	e8 44 f9 fe ff       	call   c000f4e4 <free>
c001fba0:	83 c4 10             	add    esp,0x10
c001fba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba7:	85 c0                	test   eax,eax
c001fba9:	75 07                	jne    c001fbb2 <FAT::close(void*)+0x42>
c001fbab:	b8 00 00 00 00       	mov    eax,0x0
c001fbb0:	eb 05                	jmp    c001fbb7 <FAT::close(void*)+0x47>
c001fbb2:	b8 01 00 00 00       	mov    eax,0x1
c001fbb7:	83 c4 1c             	add    esp,0x1c
c001fbba:	c3                   	ret    
c001fbbb:	90                   	nop

c001fbbc <FAT::closeDir(void*)>:
c001fbbc:	83 ec 1c             	sub    esp,0x1c
c001fbbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fbc4:	75 07                	jne    c001fbcd <FAT::closeDir(void*)+0x11>
c001fbc6:	b8 04 00 00 00       	mov    eax,0x4
c001fbcb:	eb 36                	jmp    c001fc03 <FAT::closeDir(void*)+0x47>
c001fbcd:	83 ec 0c             	sub    esp,0xc
c001fbd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fbd4:	e8 a2 62 fe ff       	call   c0005e7b <f_closedir>
c001fbd9:	83 c4 10             	add    esp,0x10
c001fbdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbe0:	83 ec 0c             	sub    esp,0xc
c001fbe3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fbe7:	e8 f8 f8 fe ff       	call   c000f4e4 <free>
c001fbec:	83 c4 10             	add    esp,0x10
c001fbef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbf3:	85 c0                	test   eax,eax
c001fbf5:	75 07                	jne    c001fbfe <FAT::closeDir(void*)+0x42>
c001fbf7:	b8 00 00 00 00       	mov    eax,0x0
c001fbfc:	eb 05                	jmp    c001fc03 <FAT::closeDir(void*)+0x47>
c001fbfe:	b8 01 00 00 00       	mov    eax,0x1
c001fc03:	83 c4 1c             	add    esp,0x1c
c001fc06:	c3                   	ret    
c001fc07:	90                   	nop

c001fc08 <FAT::seek(void*, unsigned long long)>:
c001fc08:	83 ec 2c             	sub    esp,0x2c
c001fc0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fc0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fc17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc1b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fc20:	75 07                	jne    c001fc29 <FAT::seek(void*, unsigned long long)+0x21>
c001fc22:	b8 04 00 00 00       	mov    eax,0x4
c001fc27:	eb 2f                	jmp    c001fc58 <FAT::seek(void*, unsigned long long)+0x50>
c001fc29:	83 ec 04             	sub    esp,0x4
c001fc2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fc30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fc34:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fc38:	e8 85 5c fe ff       	call   c00058c2 <f_lseek>
c001fc3d:	83 c4 10             	add    esp,0x10
c001fc40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fc44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc48:	85 c0                	test   eax,eax
c001fc4a:	75 07                	jne    c001fc53 <FAT::seek(void*, unsigned long long)+0x4b>
c001fc4c:	b8 00 00 00 00       	mov    eax,0x0
c001fc51:	eb 05                	jmp    c001fc58 <FAT::seek(void*, unsigned long long)+0x50>
c001fc53:	b8 01 00 00 00       	mov    eax,0x1
c001fc58:	83 c4 2c             	add    esp,0x2c
c001fc5b:	c3                   	ret    

c001fc5c <fatWrapperReadDisk>:
c001fc5c:	83 ec 1c             	sub    esp,0x1c
c001fc5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fc63:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fc67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fc6b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fc76:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc7b:	8b 04 85 a0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3160]
c001fc82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fc86:	83 ec 0c             	sub    esp,0xc
c001fc89:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc8d:	52                   	push   edx
c001fc8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc96:	50                   	push   eax
c001fc97:	e8 c2 60 ff ff       	call   c0015d5e <LogicalDisk::read(unsigned long long, int, void*)>
c001fc9c:	83 c4 20             	add    esp,0x20
c001fc9f:	83 c4 1c             	add    esp,0x1c
c001fca2:	c3                   	ret    

c001fca3 <fatWrapperWriteDisk>:
c001fca3:	83 ec 1c             	sub    esp,0x1c
c001fca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fcaa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fcae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fcb2:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fcb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fcbd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fcc2:	8b 04 85 a0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3160]
c001fcc9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fccd:	83 ec 0c             	sub    esp,0xc
c001fcd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fcd4:	52                   	push   edx
c001fcd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fcd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fcdd:	50                   	push   eax
c001fcde:	e8 e7 60 ff ff       	call   c0015dca <LogicalDisk::write(unsigned long long, int, void*)>
c001fce3:	83 c4 20             	add    esp,0x20
c001fce6:	83 c4 1c             	add    esp,0x1c
c001fce9:	c3                   	ret    

c001fcea <fatWrapperIoctl>:
c001fcea:	53                   	push   ebx
c001fceb:	83 ec 28             	sub    esp,0x28
c001fcee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fcf2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fcf6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fcfa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fcfe:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fd03:	75 31                	jne    c001fd36 <fatWrapperIoctl+0x4c>
c001fd05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fd09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fd0d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd12:	8b 04 85 a0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3160]
c001fd19:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fd1f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fd25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fd29:	66 89 02             	mov    WORD PTR [edx],ax
c001fd2c:	b8 00 00 00 00       	mov    eax,0x0
c001fd31:	e9 b2 00 00 00       	jmp    c001fde8 <fatWrapperIoctl+0xfe>
c001fd36:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fd3b:	75 6a                	jne    c001fda7 <fatWrapperIoctl+0xbd>
c001fd3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fd45:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd4a:	8b 04 85 a0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3160]
c001fd51:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fd57:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001fd5d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001fd63:	89 c8                	mov    eax,ecx
c001fd65:	89 da                	mov    edx,ebx
c001fd67:	0f a4 c2 0a          	shld   edx,eax,0xa
c001fd6b:	c1 e0 0a             	shl    eax,0xa
c001fd6e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001fd73:	8b 0c 8d a0 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3160]
c001fd7a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fd80:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fd86:	89 cb                	mov    ebx,ecx
c001fd88:	c1 fb 1f             	sar    ebx,0x1f
c001fd8b:	53                   	push   ebx
c001fd8c:	51                   	push   ecx
c001fd8d:	52                   	push   edx
c001fd8e:	50                   	push   eax
c001fd8f:	e8 68 55 00 00       	call   c00252fc <__udivdi3>
c001fd94:	83 c4 10             	add    esp,0x10
c001fd97:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fd9b:	89 01                	mov    DWORD PTR [ecx],eax
c001fd9d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fda0:	b8 00 00 00 00       	mov    eax,0x0
c001fda5:	eb 41                	jmp    c001fde8 <fatWrapperIoctl+0xfe>
c001fda7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fdac:	75 07                	jne    c001fdb5 <fatWrapperIoctl+0xcb>
c001fdae:	b8 00 00 00 00       	mov    eax,0x0
c001fdb3:	eb 33                	jmp    c001fde8 <fatWrapperIoctl+0xfe>
c001fdb5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001fdba:	75 19                	jne    c001fdd5 <fatWrapperIoctl+0xeb>
c001fdbc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fdc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fdc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fdc8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fdce:	b8 00 00 00 00       	mov    eax,0x0
c001fdd3:	eb 13                	jmp    c001fde8 <fatWrapperIoctl+0xfe>
c001fdd5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001fdda:	75 07                	jne    c001fde3 <fatWrapperIoctl+0xf9>
c001fddc:	b8 00 00 00 00       	mov    eax,0x0
c001fde1:	eb 05                	jmp    c001fde8 <fatWrapperIoctl+0xfe>
c001fde3:	b8 04 00 00 00       	mov    eax,0x4
c001fde8:	83 c4 28             	add    esp,0x28
c001fdeb:	5b                   	pop    ebx
c001fdec:	c3                   	ret    
c001fded:	90                   	nop

c001fdee <FAT::FAT()>:
c001fdee:	83 ec 1c             	sub    esp,0x1c
c001fdf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdf5:	83 ec 0c             	sub    esp,0xc
c001fdf8:	50                   	push   eax
c001fdf9:	e8 d8 2b ff ff       	call   c00129d6 <Filesystem::Filesystem()>
c001fdfe:	83 c4 10             	add    esp,0x10
c001fe01:	ba 70 ad 02 c0       	mov    edx,0xc002ad70
c001fe06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe0a:	89 10                	mov    DWORD PTR [eax],edx
c001fe0c:	c7 05 a0 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dea0,0x0
c001fe16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fe1e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001fe23:	7f 15                	jg     c001fe3a <FAT::FAT()+0x4c>
c001fe25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe29:	c7 04 85 c0 de 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2140],0xffffffff
c001fe34:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fe38:	eb e4                	jmp    c001fe1e <FAT::FAT()+0x30>
c001fe3a:	90                   	nop
c001fe3b:	83 c4 1c             	add    esp,0x1c
c001fe3e:	c3                   	ret    
c001fe3f:	90                   	nop

c001fe40 <FAT::fixFilepath(char*)>:
c001fe40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe44:	8a 00                	mov    al,BYTE PTR [eax]
c001fe46:	3c 40                	cmp    al,0x40
c001fe48:	7e 2c                	jle    c001fe76 <FAT::fixFilepath(char*)+0x36>
c001fe4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe4e:	8a 00                	mov    al,BYTE PTR [eax]
c001fe50:	83 e8 41             	sub    eax,0x41
c001fe53:	88 c2                	mov    dl,al
c001fe55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe59:	88 10                	mov    BYTE PTR [eax],dl
c001fe5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe5f:	8a 00                	mov    al,BYTE PTR [eax]
c001fe61:	0f be c0             	movsx  eax,al
c001fe64:	8b 04 85 c0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2140]
c001fe6b:	83 c0 30             	add    eax,0x30
c001fe6e:	88 c2                	mov    dl,al
c001fe70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe74:	88 10                	mov    BYTE PTR [eax],dl
c001fe76:	90                   	nop
c001fe77:	c3                   	ret    

c001fe78 <FAT::open(char const*, void**, FileOpenMode)>:
c001fe78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fe7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001fe86:	74 0a                	je     c001fe92 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001fe88:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001fe90:	75 0a                	jne    c001fe9c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001fe92:	b8 04 00 00 00       	mov    eax,0x4
c001fe97:	e9 fd 00 00 00       	jmp    c001ff99 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001fe9c:	83 ec 08             	sub    esp,0x8
c001fe9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fea6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001feaa:	50                   	push   eax
c001feab:	e8 7a 08 fe ff       	call   c000072a <strcpy>
c001feb0:	83 c4 10             	add    esp,0x10
c001feb3:	83 ec 08             	sub    esp,0x8
c001feb6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001feba:	50                   	push   eax
c001febb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fec2:	e8 79 ff ff ff       	call   c001fe40 <FAT::fixFilepath(char*)>
c001fec7:	83 c4 10             	add    esp,0x10
c001feca:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001fed2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fed9:	83 e0 01             	and    eax,0x1
c001fedc:	74 08                	je     c001fee6 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001fede:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001fee6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001feed:	83 e0 04             	and    eax,0x4
c001fef0:	74 10                	je     c001ff02 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001fef2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001fefa:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ff02:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff09:	83 e0 02             	and    eax,0x2
c001ff0c:	74 08                	je     c001ff16 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001ff0e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ff16:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff1d:	83 e0 08             	and    eax,0x8
c001ff20:	74 08                	je     c001ff2a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001ff22:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ff2a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff31:	83 e0 10             	and    eax,0x10
c001ff34:	74 08                	je     c001ff3e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001ff36:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001ff3e:	83 ec 0c             	sub    esp,0xc
c001ff41:	68 50 02 00 00       	push   0x250
c001ff46:	e8 89 f5 fe ff       	call   c000f4d4 <malloc>
c001ff4b:	83 c4 10             	add    esp,0x10
c001ff4e:	89 c2                	mov    edx,eax
c001ff50:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ff57:	89 10                	mov    DWORD PTR [eax],edx
c001ff59:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ff61:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ff68:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff6a:	83 ec 04             	sub    esp,0x4
c001ff6d:	52                   	push   edx
c001ff6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff72:	52                   	push   edx
c001ff73:	50                   	push   eax
c001ff74:	e8 c8 4d fe ff       	call   c0004d41 <f_open>
c001ff79:	83 c4 10             	add    esp,0x10
c001ff7c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ff83:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ff8b:	74 07                	je     c001ff94 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001ff8d:	b8 01 00 00 00       	mov    eax,0x1
c001ff92:	eb 05                	jmp    c001ff99 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ff94:	b8 00 00 00 00       	mov    eax,0x0
c001ff99:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ff9f:	c3                   	ret    

c001ffa0 <FAT::openDir(char const*, void**)>:
c001ffa0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ffa6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ffae:	74 0a                	je     c001ffba <FAT::openDir(char const*, void**)+0x1a>
c001ffb0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ffb8:	75 07                	jne    c001ffc1 <FAT::openDir(char const*, void**)+0x21>
c001ffba:	b8 04 00 00 00       	mov    eax,0x4
c001ffbf:	eb 7d                	jmp    c002003e <FAT::openDir(char const*, void**)+0x9e>
c001ffc1:	83 ec 08             	sub    esp,0x8
c001ffc4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ffcb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ffcf:	50                   	push   eax
c001ffd0:	e8 55 07 fe ff       	call   c000072a <strcpy>
c001ffd5:	83 c4 10             	add    esp,0x10
c001ffd8:	83 ec 08             	sub    esp,0x8
c001ffdb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ffdf:	50                   	push   eax
c001ffe0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ffe7:	e8 54 fe ff ff       	call   c001fe40 <FAT::fixFilepath(char*)>
c001ffec:	83 c4 10             	add    esp,0x10
c001ffef:	83 ec 0c             	sub    esp,0xc
c001fff2:	6a 4c                	push   0x4c
c001fff4:	e8 db f4 fe ff       	call   c000f4d4 <malloc>
c001fff9:	83 c4 10             	add    esp,0x10
c001fffc:	89 c2                	mov    edx,eax
c001fffe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020005:	89 10                	mov    DWORD PTR [eax],edx
c0020007:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002000e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020010:	83 ec 08             	sub    esp,0x8
c0020013:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020017:	52                   	push   edx
c0020018:	50                   	push   eax
c0020019:	e8 5b 5d fe ff       	call   c0005d79 <f_opendir>
c002001e:	83 c4 10             	add    esp,0x10
c0020021:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020028:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020030:	74 07                	je     c0020039 <FAT::openDir(char const*, void**)+0x99>
c0020032:	b8 01 00 00 00       	mov    eax,0x1
c0020037:	eb 05                	jmp    c002003e <FAT::openDir(char const*, void**)+0x9e>
c0020039:	b8 00 00 00 00       	mov    eax,0x0
c002003e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020044:	c3                   	ret    
c0020045:	90                   	nop

c0020046 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020046:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002004c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020054:	75 0a                	jne    c0020060 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020056:	b8 04 00 00 00       	mov    eax,0x4
c002005b:	e9 c9 00 00 00       	jmp    c0020129 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020060:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020068:	75 0a                	jne    c0020074 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002006a:	b8 04 00 00 00       	mov    eax,0x4
c002006f:	e9 b5 00 00 00       	jmp    c0020129 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020074:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002007c:	75 0a                	jne    c0020088 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002007e:	b8 04 00 00 00       	mov    eax,0x4
c0020083:	e9 a1 00 00 00       	jmp    c0020129 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020088:	83 ec 08             	sub    esp,0x8
c002008b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020092:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020099:	50                   	push   eax
c002009a:	e8 8b 06 fe ff       	call   c000072a <strcpy>
c002009f:	83 c4 10             	add    esp,0x10
c00200a2:	83 ec 08             	sub    esp,0x8
c00200a5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00200ac:	50                   	push   eax
c00200ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00200b4:	e8 87 fd ff ff       	call   c001fe40 <FAT::fixFilepath(char*)>
c00200b9:	83 c4 10             	add    esp,0x10
c00200bc:	83 ec 08             	sub    esp,0x8
c00200bf:	8d 44 24 08          	lea    eax,[esp+0x8]
c00200c3:	50                   	push   eax
c00200c4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00200cb:	50                   	push   eax
c00200cc:	e8 67 5e fe ff       	call   c0005f38 <f_stat>
c00200d1:	83 c4 10             	add    esp,0x10
c00200d4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00200db:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00200e2:	85 c0                	test   eax,eax
c00200e4:	74 07                	je     c00200ed <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00200e6:	83 f8 04             	cmp    eax,0x4
c00200e9:	74 32                	je     c002011d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00200eb:	eb 37                	jmp    c0020124 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00200ed:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00200f1:	0f b6 c0             	movzx  eax,al
c00200f4:	83 e0 10             	and    eax,0x10
c00200f7:	0f 95 c2             	setne  dl
c00200fa:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020101:	88 10                	mov    BYTE PTR [eax],dl
c0020103:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020106:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002010a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020111:	89 01                	mov    DWORD PTR [ecx],eax
c0020113:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020116:	b8 00 00 00 00       	mov    eax,0x0
c002011b:	eb 0c                	jmp    c0020129 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002011d:	b8 02 00 00 00       	mov    eax,0x2
c0020122:	eb 05                	jmp    c0020129 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020124:	b8 01 00 00 00       	mov    eax,0x1
c0020129:	81 c4 2c 02 00 00    	add    esp,0x22c
c002012f:	c3                   	ret    

c0020130 <FAT::unlink(char const*)>:
c0020130:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020136:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002013e:	75 07                	jne    c0020147 <FAT::unlink(char const*)+0x17>
c0020140:	b8 04 00 00 00       	mov    eax,0x4
c0020145:	eb 5c                	jmp    c00201a3 <FAT::unlink(char const*)+0x73>
c0020147:	83 ec 08             	sub    esp,0x8
c002014a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020151:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020155:	50                   	push   eax
c0020156:	e8 cf 05 fe ff       	call   c000072a <strcpy>
c002015b:	83 c4 10             	add    esp,0x10
c002015e:	83 ec 08             	sub    esp,0x8
c0020161:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020165:	50                   	push   eax
c0020166:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002016d:	e8 ce fc ff ff       	call   c001fe40 <FAT::fixFilepath(char*)>
c0020172:	83 c4 10             	add    esp,0x10
c0020175:	83 ec 0c             	sub    esp,0xc
c0020178:	8d 44 24 18          	lea    eax,[esp+0x18]
c002017c:	50                   	push   eax
c002017d:	e8 08 61 fe ff       	call   c000628a <f_unlink>
c0020182:	83 c4 10             	add    esp,0x10
c0020185:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002018c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020193:	85 c0                	test   eax,eax
c0020195:	75 07                	jne    c002019e <FAT::unlink(char const*)+0x6e>
c0020197:	b8 00 00 00 00       	mov    eax,0x0
c002019c:	eb 05                	jmp    c00201a3 <FAT::unlink(char const*)+0x73>
c002019e:	b8 01 00 00 00       	mov    eax,0x1
c00201a3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00201a9:	c3                   	ret    

c00201aa <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00201aa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00201b0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00201b7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00201be:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00201c2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00201c6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00201ce:	75 0a                	jne    c00201da <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00201d0:	b8 04 00 00 00       	mov    eax,0x4
c00201d5:	e9 1c 01 00 00       	jmp    c00202f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00201da:	83 ec 08             	sub    esp,0x8
c00201dd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00201e4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00201e8:	50                   	push   eax
c00201e9:	e8 3c 05 fe ff       	call   c000072a <strcpy>
c00201ee:	83 c4 10             	add    esp,0x10
c00201f1:	83 ec 08             	sub    esp,0x8
c00201f4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00201f8:	50                   	push   eax
c00201f9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020200:	e8 3b fc ff ff       	call   c001fe40 <FAT::fixFilepath(char*)>
c0020205:	83 c4 10             	add    esp,0x10
c0020208:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020210:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020218:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002021d:	83 e0 01             	and    eax,0x1
c0020220:	74 08                	je     c002022a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020222:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002022a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002022f:	83 e0 02             	and    eax,0x2
c0020232:	74 08                	je     c002023c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020234:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002023c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020241:	83 e0 04             	and    eax,0x4
c0020244:	74 08                	je     c002024e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020246:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002024e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020253:	83 e0 08             	and    eax,0x8
c0020256:	74 08                	je     c0020260 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020258:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020260:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020265:	83 e0 01             	and    eax,0x1
c0020268:	74 08                	je     c0020272 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002026a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020272:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020277:	83 e0 02             	and    eax,0x2
c002027a:	74 08                	je     c0020284 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002027c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020284:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020289:	83 e0 04             	and    eax,0x4
c002028c:	74 08                	je     c0020296 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002028e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020296:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002029b:	83 e0 08             	and    eax,0x8
c002029e:	74 08                	je     c00202a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00202a0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00202a8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00202af:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00202b6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00202be:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00202c6:	83 ec 04             	sub    esp,0x4
c00202c9:	52                   	push   edx
c00202ca:	50                   	push   eax
c00202cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00202cf:	50                   	push   eax
c00202d0:	e8 57 66 fe ff       	call   c000692c <f_chmod>
c00202d5:	83 c4 10             	add    esp,0x10
c00202d8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00202df:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00202e6:	85 c0                	test   eax,eax
c00202e8:	75 07                	jne    c00202f1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00202ea:	b8 00 00 00 00       	mov    eax,0x0
c00202ef:	eb 05                	jmp    c00202f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00202f1:	b8 01 00 00 00       	mov    eax,0x1
c00202f6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00202fc:	c3                   	ret    
c00202fd:	90                   	nop

c00202fe <FAT::rename(char const*, char const*)>:
c00202fe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020304:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002030c:	74 0a                	je     c0020318 <FAT::rename(char const*, char const*)+0x1a>
c002030e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020316:	75 0a                	jne    c0020322 <FAT::rename(char const*, char const*)+0x24>
c0020318:	b8 04 00 00 00       	mov    eax,0x4
c002031d:	e9 98 00 00 00       	jmp    c00203ba <FAT::rename(char const*, char const*)+0xbc>
c0020322:	83 ec 08             	sub    esp,0x8
c0020325:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002032c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020333:	50                   	push   eax
c0020334:	e8 f1 03 fe ff       	call   c000072a <strcpy>
c0020339:	83 c4 10             	add    esp,0x10
c002033c:	83 ec 08             	sub    esp,0x8
c002033f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020346:	50                   	push   eax
c0020347:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002034e:	e8 ed fa ff ff       	call   c001fe40 <FAT::fixFilepath(char*)>
c0020353:	83 c4 10             	add    esp,0x10
c0020356:	83 ec 08             	sub    esp,0x8
c0020359:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020360:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020364:	50                   	push   eax
c0020365:	e8 c0 03 fe ff       	call   c000072a <strcpy>
c002036a:	83 c4 10             	add    esp,0x10
c002036d:	83 ec 08             	sub    esp,0x8
c0020370:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020374:	50                   	push   eax
c0020375:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002037c:	e8 bf fa ff ff       	call   c001fe40 <FAT::fixFilepath(char*)>
c0020381:	83 c4 10             	add    esp,0x10
c0020384:	83 ec 08             	sub    esp,0x8
c0020387:	8d 44 24 14          	lea    eax,[esp+0x14]
c002038b:	50                   	push   eax
c002038c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020393:	50                   	push   eax
c0020394:	e8 a0 62 fe ff       	call   c0006639 <f_rename>
c0020399:	83 c4 10             	add    esp,0x10
c002039c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00203a3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00203aa:	85 c0                	test   eax,eax
c00203ac:	75 07                	jne    c00203b5 <FAT::rename(char const*, char const*)+0xb7>
c00203ae:	b8 00 00 00 00       	mov    eax,0x0
c00203b3:	eb 05                	jmp    c00203ba <FAT::rename(char const*, char const*)+0xbc>
c00203b5:	b8 01 00 00 00       	mov    eax,0x1
c00203ba:	81 c4 1c 02 00 00    	add    esp,0x21c
c00203c0:	c3                   	ret    
c00203c1:	90                   	nop

c00203c2 <FAT::mkdir(char const*)>:
c00203c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00203c8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00203d0:	75 07                	jne    c00203d9 <FAT::mkdir(char const*)+0x17>
c00203d2:	b8 04 00 00 00       	mov    eax,0x4
c00203d7:	eb 5c                	jmp    c0020435 <FAT::mkdir(char const*)+0x73>
c00203d9:	83 ec 08             	sub    esp,0x8
c00203dc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00203e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00203e7:	50                   	push   eax
c00203e8:	e8 3d 03 fe ff       	call   c000072a <strcpy>
c00203ed:	83 c4 10             	add    esp,0x10
c00203f0:	83 ec 08             	sub    esp,0x8
c00203f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00203f7:	50                   	push   eax
c00203f8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00203ff:	e8 3c fa ff ff       	call   c001fe40 <FAT::fixFilepath(char*)>
c0020404:	83 c4 10             	add    esp,0x10
c0020407:	83 ec 0c             	sub    esp,0xc
c002040a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002040e:	50                   	push   eax
c002040f:	e8 f9 5f fe ff       	call   c000640d <f_mkdir>
c0020414:	83 c4 10             	add    esp,0x10
c0020417:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002041e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020425:	85 c0                	test   eax,eax
c0020427:	75 07                	jne    c0020430 <FAT::mkdir(char const*)+0x6e>
c0020429:	b8 00 00 00 00       	mov    eax,0x0
c002042e:	eb 05                	jmp    c0020435 <FAT::mkdir(char const*)+0x73>
c0020430:	b8 01 00 00 00       	mov    eax,0x1
c0020435:	81 c4 1c 01 00 00    	add    esp,0x11c
c002043b:	c3                   	ret    

c002043c <FAT::exists(char const*)>:
c002043c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020442:	83 ec 08             	sub    esp,0x8
c0020445:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002044c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020450:	50                   	push   eax
c0020451:	e8 d4 02 fe ff       	call   c000072a <strcpy>
c0020456:	83 c4 10             	add    esp,0x10
c0020459:	83 ec 08             	sub    esp,0x8
c002045c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020460:	50                   	push   eax
c0020461:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020468:	e8 d3 f9 ff ff       	call   c001fe40 <FAT::fixFilepath(char*)>
c002046d:	83 c4 10             	add    esp,0x10
c0020470:	83 ec 08             	sub    esp,0x8
c0020473:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002047a:	50                   	push   eax
c002047b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002047f:	50                   	push   eax
c0020480:	e8 b3 5a fe ff       	call   c0005f38 <f_stat>
c0020485:	83 c4 10             	add    esp,0x10
c0020488:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002048f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020496:	85 c0                	test   eax,eax
c0020498:	75 04                	jne    c002049e <FAT::exists(char const*)+0x62>
c002049a:	b0 01                	mov    al,0x1
c002049c:	eb 02                	jmp    c00204a0 <FAT::exists(char const*)+0x64>
c002049e:	b0 00                	mov    al,0x0
c00204a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00204a6:	c3                   	ret    
c00204a7:	90                   	nop

c00204a8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00204a8:	b8 08 00 00 00       	mov    eax,0x8
c00204ad:	c3                   	ret    

c00204ae <ISO9660::seek(void*, unsigned long long)>:
c00204ae:	53                   	push   ebx
c00204af:	b8 04 00 00 00       	mov    eax,0x4
c00204b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00204b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00204bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00204c0:	85 d2                	test   edx,edx
c00204c2:	74 17                	je     c00204db <ISO9660::seek(void*, unsigned long long)+0x2d>
c00204c4:	89 c8                	mov    eax,ecx
c00204c6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00204c9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00204cc:	b8 01 00 00 00       	mov    eax,0x1
c00204d1:	73 08                	jae    c00204db <ISO9660::seek(void*, unsigned long long)+0x2d>
c00204d3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00204d6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00204d9:	31 c0                	xor    eax,eax
c00204db:	5b                   	pop    ebx
c00204dc:	c3                   	ret    
c00204dd:	90                   	nop

c00204de <ISO9660::tell(void*, unsigned long long*)>:
c00204de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00204e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204e6:	85 d2                	test   edx,edx
c00204e8:	74 12                	je     c00204fc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00204ea:	85 c0                	test   eax,eax
c00204ec:	74 0e                	je     c00204fc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00204ee:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00204f1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00204f4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00204f7:	89 10                	mov    DWORD PTR [eax],edx
c00204f9:	31 c0                	xor    eax,eax
c00204fb:	c3                   	ret    
c00204fc:	b8 04 00 00 00       	mov    eax,0x4
c0020501:	c3                   	ret    

c0020502 <ISO9660::getName()>:
c0020502:	b8 cc ad 02 c0       	mov    eax,0xc002adcc
c0020507:	c3                   	ret    

c0020508 <ISO9660::stat(void*, unsigned long long*)>:
c0020508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002050c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020510:	85 d2                	test   edx,edx
c0020512:	74 12                	je     c0020526 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020514:	85 c0                	test   eax,eax
c0020516:	74 0e                	je     c0020526 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020518:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002051b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002051e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020521:	89 10                	mov    DWORD PTR [eax],edx
c0020523:	31 c0                	xor    eax,eax
c0020525:	c3                   	ret    
c0020526:	b8 04 00 00 00       	mov    eax,0x4
c002052b:	c3                   	ret    

c002052c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002052c:	b8 01 00 00 00       	mov    eax,0x1
c0020531:	c3                   	ret    

c0020532 <ISO9660::unlink(char const*)>:
c0020532:	b8 01 00 00 00       	mov    eax,0x1
c0020537:	c3                   	ret    

c0020538 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020538:	b8 01 00 00 00       	mov    eax,0x1
c002053d:	c3                   	ret    

c002053e <ISO9660::rename(char const*, char const*)>:
c002053e:	b8 01 00 00 00       	mov    eax,0x1
c0020543:	c3                   	ret    

c0020544 <ISO9660::mkdir(char const*)>:
c0020544:	b8 01 00 00 00       	mov    eax,0x1
c0020549:	c3                   	ret    

c002054a <ISO9660::close(void*)>:
c002054a:	83 ec 0c             	sub    esp,0xc
c002054d:	b8 04 00 00 00       	mov    eax,0x4
c0020552:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020556:	85 d2                	test   edx,edx
c0020558:	74 0e                	je     c0020568 <ISO9660::close(void*)+0x1e>
c002055a:	83 ec 0c             	sub    esp,0xc
c002055d:	52                   	push   edx
c002055e:	e8 81 ef fe ff       	call   c000f4e4 <free>
c0020563:	83 c4 10             	add    esp,0x10
c0020566:	31 c0                	xor    eax,eax
c0020568:	83 c4 0c             	add    esp,0xc
c002056b:	c3                   	ret    

c002056c <ISO9660::closeDir(void*)>:
c002056c:	83 ec 0c             	sub    esp,0xc
c002056f:	b8 04 00 00 00       	mov    eax,0x4
c0020574:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020578:	85 d2                	test   edx,edx
c002057a:	74 0e                	je     c002058a <ISO9660::closeDir(void*)+0x1e>
c002057c:	83 ec 0c             	sub    esp,0xc
c002057f:	52                   	push   edx
c0020580:	e8 5f ef fe ff       	call   c000f4e4 <free>
c0020585:	83 c4 10             	add    esp,0x10
c0020588:	31 c0                	xor    eax,eax
c002058a:	83 c4 0c             	add    esp,0xc
c002058d:	c3                   	ret    

c002058e <ISO9660::~ISO9660()>:
c002058e:	83 ec 0c             	sub    esp,0xc
c0020591:	ba 20 ae 02 c0       	mov    edx,0xc002ae20
c0020596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059a:	89 10                	mov    DWORD PTR [eax],edx
c002059c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a0:	83 ec 0c             	sub    esp,0xc
c00205a3:	50                   	push   eax
c00205a4:	e8 51 24 ff ff       	call   c00129fa <Filesystem::~Filesystem()>
c00205a9:	83 c4 10             	add    esp,0x10
c00205ac:	90                   	nop
c00205ad:	83 c4 0c             	add    esp,0xc
c00205b0:	c3                   	ret    
c00205b1:	90                   	nop

c00205b2 <ISO9660::~ISO9660()>:
c00205b2:	83 ec 0c             	sub    esp,0xc
c00205b5:	83 ec 0c             	sub    esp,0xc
c00205b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205bc:	e8 cd ff ff ff       	call   c002058e <ISO9660::~ISO9660()>
c00205c1:	83 c4 10             	add    esp,0x10
c00205c4:	83 ec 08             	sub    esp,0x8
c00205c7:	6a 08                	push   0x8
c00205c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205cd:	e8 1f 20 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00205d2:	83 c4 10             	add    esp,0x10
c00205d5:	83 c4 0c             	add    esp,0xc
c00205d8:	c3                   	ret    

c00205d9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00205d9:	55                   	push   ebp
c00205da:	31 c9                	xor    ecx,ecx
c00205dc:	57                   	push   edi
c00205dd:	56                   	push   esi
c00205de:	53                   	push   ebx
c00205df:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00205e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00205e7:	89 eb                	mov    ebx,ebp
c00205e9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00205ed:	39 ce                	cmp    esi,ecx
c00205ef:	7e 17                	jle    c0020608 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00205f1:	31 d2                	xor    edx,edx
c00205f3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00205f7:	7d 13                	jge    c002060c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00205f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00205fd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020600:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020603:	75 0d                	jne    c0020612 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020605:	42                   	inc    edx
c0020606:	eb eb                	jmp    c00205f3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020608:	31 c0                	xor    eax,eax
c002060a:	eb 0a                	jmp    c0020616 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002060c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020610:	eb 04                	jmp    c0020616 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020612:	41                   	inc    ecx
c0020613:	43                   	inc    ebx
c0020614:	eb d7                	jmp    c00205ed <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020616:	5b                   	pop    ebx
c0020617:	5e                   	pop    esi
c0020618:	5f                   	pop    edi
c0020619:	5d                   	pop    ebp
c002061a:	c3                   	ret    

c002061b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002061b:	56                   	push   esi
c002061c:	53                   	push   ebx
c002061d:	52                   	push   edx
c002061e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020622:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002062a:	39 0d a0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfa0,ecx
c0020630:	75 08                	jne    c002063a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020632:	38 05 34 be 02 c0    	cmp    BYTE PTR ds:0xc002be34,al
c0020638:	74 2b                	je     c0020665 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002063a:	83 ec 0c             	sub    esp,0xc
c002063d:	a2 34 be 02 c0       	mov    ds:0xc002be34,al
c0020642:	68 c0 df 02 c0       	push   0xc002dfc0
c0020647:	0f be c0             	movsx  eax,al
c002064a:	6a 01                	push   0x1
c002064c:	89 0d a0 df 02 c0    	mov    DWORD PTR ds:0xc002dfa0,ecx
c0020652:	31 db                	xor    ebx,ebx
c0020654:	53                   	push   ebx
c0020655:	51                   	push   ecx
c0020656:	ff 34 85 9c cd 02 c0 	push   DWORD PTR [eax*4-0x3ffd3264]
c002065d:	e8 fc 56 ff ff       	call   c0015d5e <LogicalDisk::read(unsigned long long, int, void*)>
c0020662:	83 c4 20             	add    esp,0x20
c0020665:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002066d:	c7 44 24 14 c0 df 02 c0 	mov    DWORD PTR [esp+0x14],0xc002dfc0
c0020675:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020679:	58                   	pop    eax
c002067a:	5b                   	pop    ebx
c002067b:	5e                   	pop    esi
c002067c:	e9 d4 ff fd ff       	jmp    c0000655 <memcpy>
c0020681:	90                   	nop

c0020682 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020682:	81 ec 10 08 00 00    	sub    esp,0x810
c0020688:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002068f:	83 c0 41             	add    eax,0x41
c0020692:	0f be c0             	movsx  eax,al
c0020695:	50                   	push   eax
c0020696:	8d 44 24 08          	lea    eax,[esp+0x8]
c002069a:	50                   	push   eax
c002069b:	6a 10                	push   0x10
c002069d:	e8 79 ff ff ff       	call   c002061b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00206a2:	83 c4 10             	add    esp,0x10
c00206a5:	31 c0                	xor    eax,eax
c00206a7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00206ac:	75 1d                	jne    c00206cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00206ae:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00206b3:	75 16                	jne    c00206cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00206b5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00206ba:	75 0f                	jne    c00206cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00206bc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00206c1:	75 08                	jne    c00206cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00206c3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00206c8:	0f 94 c0             	sete   al
c00206cb:	81 c4 0c 08 00 00    	add    esp,0x80c
c00206d1:	c3                   	ret    

c00206d2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00206d2:	55                   	push   ebp
c00206d3:	57                   	push   edi
c00206d4:	56                   	push   esi
c00206d5:	53                   	push   ebx
c00206d6:	81 ec 34 08 00 00    	sub    esp,0x834
c00206dc:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c00206e3:	55                   	push   ebp
c00206e4:	68 e7 ad 02 c0       	push   0xc002ade7
c00206e9:	e8 e3 1f ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00206ee:	83 c4 10             	add    esp,0x10
c00206f1:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c00206f9:	0f 84 06 02 00 00    	je     c0020905 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00206ff:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020707:	0f 84 f8 01 00 00    	je     c0020905 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c002070d:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0020714:	b8 01 00 00 00       	mov    eax,0x1
c0020719:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c002071d:	0f 85 e7 01 00 00    	jne    c002090a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0020723:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0020726:	31 d2                	xor    edx,edx
c0020728:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c002072b:	89 e9                	mov    ecx,ebp
c002072d:	89 d3                	mov    ebx,edx
c002072f:	01 f1                	add    ecx,esi
c0020731:	11 fb                	adc    ebx,edi
c0020733:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020737:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002073b:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c0020742:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0020745:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0020748:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002074c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020750:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020754:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020758:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002075c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0020760:	72 19                	jb     c002077b <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0020762:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002076a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002076e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0020771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020775:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020779:	eb 13                	jmp    c002078e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c002077b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002077f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020783:	29 f0                	sub    eax,esi
c0020785:	19 fa                	sbb    edx,edi
c0020787:	89 04 24             	mov    DWORD PTR [esp],eax
c002078a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002078e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0020795:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020798:	8b 00                	mov    eax,DWORD PTR [eax]
c002079a:	53                   	push   ebx
c002079b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002079f:	c1 e0 0b             	shl    eax,0xb
c00207a2:	01 c6                	add    esi,eax
c00207a4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00207ab:	11 d7                	adc    edi,edx
c00207ad:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c00207b1:	89 fa                	mov    edx,edi
c00207b3:	50                   	push   eax
c00207b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00207b8:	50                   	push   eax
c00207b9:	89 f0                	mov    eax,esi
c00207bb:	0f ac d0 0b          	shrd   eax,edx,0xb
c00207bf:	50                   	push   eax
c00207c0:	e8 56 fe ff ff       	call   c002061b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00207c5:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00207cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00207d0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00207d3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00207d7:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00207dd:	83 c4 10             	add    esp,0x10
c00207e0:	b8 00 08 00 00       	mov    eax,0x800
c00207e5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00207e9:	29 d0                	sub    eax,edx
c00207eb:	39 c1                	cmp    ecx,eax
c00207ed:	83 db 00             	sbb    ebx,0x0
c00207f0:	7d 19                	jge    c002080b <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c00207f2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00207f7:	75 16                	jne    c002080f <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c00207f9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020800:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020806:	e9 f6 00 00 00       	jmp    c0020901 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c002080b:	89 c5                	mov    ebp,eax
c002080d:	eb 03                	jmp    c0020812 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c002080f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0020812:	51                   	push   ecx
c0020813:	55                   	push   ebp
c0020814:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c0020818:	50                   	push   eax
c0020819:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c0020820:	e8 30 fe fd ff       	call   c0000655 <memcpy>
c0020825:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020829:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002082d:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c0020834:	01 e8                	add    eax,ebp
c0020836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002083a:	89 e8                	mov    eax,ebp
c002083c:	99                   	cdq    
c002083d:	01 ee                	add    esi,ebp
c002083f:	11 d7                	adc    edi,edx
c0020841:	29 e9                	sub    ecx,ebp
c0020843:	19 d3                	sbb    ebx,edx
c0020845:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020849:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002084d:	83 c4 10             	add    esp,0x10
c0020850:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020855:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020858:	b8 00 00 00 00       	mov    eax,0x0
c002085d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020861:	7d 3f                	jge    c00208a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020863:	52                   	push   edx
c0020864:	89 fa                	mov    edx,edi
c0020866:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002086d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020871:	50                   	push   eax
c0020872:	89 f0                	mov    eax,esi
c0020874:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020878:	0f ac d0 0b          	shrd   eax,edx,0xb
c002087c:	50                   	push   eax
c002087d:	e8 99 fd ff ff       	call   c002061b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020882:	81 c6 00 08 00 00    	add    esi,0x800
c0020888:	83 d7 00             	adc    edi,0x0
c002088b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020893:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002089b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00208a0:	eb ab                	jmp    c002084d <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c00208a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208a6:	0b 04 24             	or     eax,DWORD PTR [esp]
c00208a9:	74 34                	je     c00208df <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c00208ab:	89 fa                	mov    edx,edi
c00208ad:	50                   	push   eax
c00208ae:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00208b5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c00208b9:	50                   	push   eax
c00208ba:	89 f0                	mov    eax,esi
c00208bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00208c0:	0f ac d0 0b          	shrd   eax,edx,0xb
c00208c4:	55                   	push   ebp
c00208c5:	50                   	push   eax
c00208c6:	e8 50 fd ff ff       	call   c002061b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00208cb:	83 c4 0c             	add    esp,0xc
c00208ce:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00208d2:	55                   	push   ebp
c00208d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208d7:	e8 79 fd fd ff       	call   c0000655 <memcpy>
c00208dc:	83 c4 10             	add    esp,0x10
c00208df:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00208e6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00208ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00208ee:	89 38                	mov    DWORD PTR [eax],edi
c00208f0:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00208f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208fb:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c00208fe:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0020901:	31 c0                	xor    eax,eax
c0020903:	eb 05                	jmp    c002090a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0020905:	b8 04 00 00 00       	mov    eax,0x4
c002090a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020910:	5b                   	pop    ebx
c0020911:	5e                   	pop    esi
c0020912:	5f                   	pop    edi
c0020913:	5d                   	pop    ebp
c0020914:	c3                   	ret    
c0020915:	90                   	nop

c0020916 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020916:	55                   	push   ebp
c0020917:	57                   	push   edi
c0020918:	56                   	push   esi
c0020919:	53                   	push   ebx
c002091a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020920:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020927:	85 f6                	test   esi,esi
c0020929:	0f 84 64 02 00 00    	je     c0020b93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002092f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020937:	0f 84 56 02 00 00    	je     c0020b93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002093d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020940:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020943:	75 0a                	jne    c002094f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020945:	b8 07 00 00 00       	mov    eax,0x7
c002094a:	e9 49 02 00 00       	jmp    c0020b98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002094f:	50                   	push   eax
c0020950:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020954:	50                   	push   eax
c0020955:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002095c:	53                   	push   ebx
c002095d:	8b 06                	mov    eax,DWORD PTR [esi]
c002095f:	c1 e0 0b             	shl    eax,0xb
c0020962:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020965:	c1 e8 0b             	shr    eax,0xb
c0020968:	50                   	push   eax
c0020969:	e8 ad fc ff ff       	call   c002061b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002096e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020971:	83 c4 10             	add    esp,0x10
c0020974:	89 c1                	mov    ecx,eax
c0020976:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020979:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002097f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020982:	84 db                	test   bl,bl
c0020984:	0f 85 90 00 00 00    	jne    c0020a1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c002098a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020990:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020996:	29 c7                	sub    edi,eax
c0020998:	89 fb                	mov    ebx,edi
c002099a:	c1 fb 1f             	sar    ebx,0x1f
c002099d:	01 f8                	add    eax,edi
c002099f:	11 da                	adc    edx,ebx
c00209a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00209a9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00209ac:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00209af:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00209b2:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00209b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00209b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00209bc:	89 d8                	mov    eax,ebx
c00209be:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00209c1:	ba 00 00 00 00       	mov    edx,0x0
c00209c6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00209ca:	b8 00 00 00 00       	mov    eax,0x0
c00209cf:	73 0b                	jae    c00209dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00209d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00209d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00209d8:	29 f8                	sub    eax,edi
c00209da:	19 da                	sbb    edx,ebx
c00209dc:	89 d3                	mov    ebx,edx
c00209de:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00209e1:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00209e4:	09 c3                	or     ebx,eax
c00209e6:	0f 84 59 ff ff ff    	je     c0020945 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00209ec:	55                   	push   ebp
c00209ed:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00209f1:	50                   	push   eax
c00209f2:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00209f9:	53                   	push   ebx
c00209fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00209fc:	c1 e0 0b             	shl    eax,0xb
c00209ff:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020a03:	c1 e8 0b             	shr    eax,0xb
c0020a06:	50                   	push   eax
c0020a07:	e8 0f fc ff ff       	call   c002061b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a0c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020a0f:	83 c4 10             	add    esp,0x10
c0020a12:	25 ff 07 00 00       	and    eax,0x7ff
c0020a17:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020a1a:	57                   	push   edi
c0020a1b:	6a 28                	push   0x28
c0020a1d:	6a 00                	push   0x0
c0020a1f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020a23:	50                   	push   eax
c0020a24:	e8 62 fc fd ff       	call   c000068b <memset>
c0020a29:	31 d2                	xor    edx,edx
c0020a2b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020a2e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020a34:	89 f8                	mov    eax,edi
c0020a36:	83 c0 21             	add    eax,0x21
c0020a39:	83 d2 00             	adc    edx,0x0
c0020a3c:	89 c7                	mov    edi,eax
c0020a3e:	89 d5                	mov    ebp,edx
c0020a40:	83 c4 10             	add    esp,0x10
c0020a43:	31 c9                	xor    ecx,ecx
c0020a45:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020a4c:	83 f9 28             	cmp    ecx,0x28
c0020a4f:	88 04 24             	mov    BYTE PTR [esp],al
c0020a52:	0f 94 c2             	sete   dl
c0020a55:	88 d0                	mov    al,dl
c0020a57:	ba ff 07 00 00       	mov    edx,0x7ff
c0020a5c:	39 fa                	cmp    edx,edi
c0020a5e:	ba 00 00 00 00       	mov    edx,0x0
c0020a63:	19 ea                	sbb    edx,ebp
c0020a65:	0f 92 c2             	setb   dl
c0020a68:	09 c2                	or     edx,eax
c0020a6a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020a6e:	0f 94 c0             	sete   al
c0020a71:	08 d0                	or     al,dl
c0020a73:	75 16                	jne    c0020a8b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020a75:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020a79:	74 10                	je     c0020a8b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020a7b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020a7e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020a82:	41                   	inc    ecx
c0020a83:	83 c7 01             	add    edi,0x1
c0020a86:	83 d5 00             	adc    ebp,0x0
c0020a89:	eb ba                	jmp    c0020a45 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020a8b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020a92:	83 ec 0c             	sub    esp,0xc
c0020a95:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020a99:	57                   	push   edi
c0020a9a:	e8 09 fc fd ff       	call   c00006a8 <strlen>
c0020a9f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020aa7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020aab:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020ab2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020ab5:	5a                   	pop    edx
c0020ab6:	25 ff 07 00 00       	and    eax,0x7ff
c0020abb:	01 c8                	add    eax,ecx
c0020abd:	59                   	pop    ecx
c0020abe:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020ac4:	83 e0 02             	and    eax,0x2
c0020ac7:	3c 01                	cmp    al,0x1
c0020ac9:	19 c0                	sbb    eax,eax
c0020acb:	83 c0 02             	add    eax,0x2
c0020ace:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020ad2:	57                   	push   edi
c0020ad3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020ad7:	50                   	push   eax
c0020ad8:	e8 4d fc fd ff       	call   c000072a <strcpy>
c0020add:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020ae1:	83 c4 10             	add    esp,0x10
c0020ae4:	84 c0                	test   al,al
c0020ae6:	75 21                	jne    c0020b09 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020ae8:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020af0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020af8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020b00:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020b07:	eb 28                	jmp    c0020b31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020b09:	fe c8                	dec    al
c0020b0b:	75 24                	jne    c0020b31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020b0d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020b15:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020b1d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020b25:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020b2c:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020b31:	0f b6 fb             	movzx  edi,bl
c0020b34:	31 db                	xor    ebx,ebx
c0020b36:	50                   	push   eax
c0020b37:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020b3e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020b42:	50                   	push   eax
c0020b43:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020b4a:	e8 06 fb fd ff       	call   c0000655 <memcpy>
c0020b4f:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020b56:	89 f9                	mov    ecx,edi
c0020b58:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020b5e:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020b61:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020b64:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020b67:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020b6a:	83 c4 10             	add    esp,0x10
c0020b6d:	39 c7                	cmp    edi,eax
c0020b6f:	89 df                	mov    edi,ebx
c0020b71:	19 d7                	sbb    edi,edx
c0020b73:	72 10                	jb     c0020b85 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020b75:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020b7c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020b83:	eb 0a                	jmp    c0020b8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020b85:	29 c8                	sub    eax,ecx
c0020b87:	19 da                	sbb    edx,ebx
c0020b89:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020b8c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020b8f:	31 c0                	xor    eax,eax
c0020b91:	eb 05                	jmp    c0020b98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020b93:	b8 04 00 00 00       	mov    eax,0x4
c0020b98:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020b9e:	5b                   	pop    ebx
c0020b9f:	5e                   	pop    esi
c0020ba0:	5f                   	pop    edi
c0020ba1:	5d                   	pop    ebp
c0020ba2:	c3                   	ret    

c0020ba3 <readRoot(unsigned int*, unsigned int*, char)>:
c0020ba3:	81 ec 40 08 00 00    	sub    esp,0x840
c0020ba9:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020bb1:	50                   	push   eax
c0020bb2:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020bb6:	50                   	push   eax
c0020bb7:	6a 10                	push   0x10
c0020bb9:	e8 5d fa ff ff       	call   c002061b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020bbe:	83 c4 0c             	add    esp,0xc
c0020bc1:	6a 22                	push   0x22
c0020bc3:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020bca:	50                   	push   eax
c0020bcb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020bcf:	50                   	push   eax
c0020bd0:	e8 80 fa fd ff       	call   c0000655 <memcpy>
c0020bd5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020bdc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020be0:	89 10                	mov    DWORD PTR [eax],edx
c0020be2:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020be9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020bed:	89 10                	mov    DWORD PTR [eax],edx
c0020bef:	b0 01                	mov    al,0x1
c0020bf1:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020bf7:	c3                   	ret    

c0020bf8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020bf8:	55                   	push   ebp
c0020bf9:	57                   	push   edi
c0020bfa:	56                   	push   esi
c0020bfb:	53                   	push   ebx
c0020bfc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c02:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020c09:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020c10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c14:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020c18:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020c1c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c20:	75 03                	jne    c0020c25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020c22:	83 c3 02             	add    ebx,0x2
c0020c25:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020c28:	75 03                	jne    c0020c2d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020c2a:	43                   	inc    ebx
c0020c2b:	eb f8                	jmp    c0020c25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020c2d:	51                   	push   ecx
c0020c2e:	68 00 01 00 00       	push   0x100
c0020c33:	6a 00                	push   0x0
c0020c35:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020c39:	50                   	push   eax
c0020c3a:	e8 4c fa fd ff       	call   c000068b <memset>
c0020c3f:	83 c4 10             	add    esp,0x10
c0020c42:	31 d2                	xor    edx,edx
c0020c44:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020c47:	84 c0                	test   al,al
c0020c49:	74 21                	je     c0020c6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020c4b:	3c 2f                	cmp    al,0x2f
c0020c4d:	75 0b                	jne    c0020c5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020c4f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020c53:	bd 01 00 00 00       	mov    ebp,0x1
c0020c58:	eb 14                	jmp    c0020c6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020c5a:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020c5d:	80 f9 19             	cmp    cl,0x19
c0020c60:	77 03                	ja     c0020c65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020c62:	83 e8 20             	sub    eax,0x20
c0020c65:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020c69:	42                   	inc    edx
c0020c6a:	eb d8                	jmp    c0020c44 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020c6c:	31 ed                	xor    ebp,ebp
c0020c6e:	83 ec 0c             	sub    esp,0xc
c0020c71:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020c78:	e8 57 e8 fe ff       	call   c000f4d4 <malloc>
c0020c7d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020c84:	89 c6                	mov    esi,eax
c0020c86:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020c8c:	c1 ef 0b             	shr    edi,0xb
c0020c8f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020c96:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020c9a:	83 c4 10             	add    esp,0x10
c0020c9d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020ca2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020ca6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020cad:	74 28                	je     c0020cd7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020caf:	52                   	push   edx
c0020cb0:	57                   	push   edi
c0020cb1:	50                   	push   eax
c0020cb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020cb6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020cbd:	e8 59 f9 ff ff       	call   c002061b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020cc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020cc6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020ccd:	05 00 08 00 00       	add    eax,0x800
c0020cd2:	83 c4 10             	add    esp,0x10
c0020cd5:	eb cb                	jmp    c0020ca2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020cd7:	83 ec 0c             	sub    esp,0xc
c0020cda:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020cde:	57                   	push   edi
c0020cdf:	e8 c4 f9 fd ff       	call   c00006a8 <strlen>
c0020ce4:	50                   	push   eax
c0020ce5:	57                   	push   edi
c0020ce6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020ced:	56                   	push   esi
c0020cee:	e8 e6 f8 ff ff       	call   c00205d9 <__memmem(unsigned char*, int, unsigned char*, int)>
c0020cf3:	83 c4 20             	add    esp,0x20
c0020cf6:	85 c0                	test   eax,eax
c0020cf8:	75 13                	jne    c0020d0d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020cfa:	83 ec 0c             	sub    esp,0xc
c0020cfd:	56                   	push   esi
c0020cfe:	e8 e1 e7 fe ff       	call   c000f4e4 <free>
c0020d03:	83 c4 10             	add    esp,0x10
c0020d06:	31 c0                	xor    eax,eax
c0020d08:	e9 b3 00 00 00       	jmp    c0020dc0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020d0d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020d11:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020d15:	c1 e7 08             	shl    edi,0x8
c0020d18:	c1 e2 10             	shl    edx,0x10
c0020d1b:	09 d7                	or     edi,edx
c0020d1d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020d21:	09 d7                	or     edi,edx
c0020d23:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020d27:	c1 e2 18             	shl    edx,0x18
c0020d2a:	09 d7                	or     edi,edx
c0020d2c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020d30:	89 d1                	mov    ecx,edx
c0020d32:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020d36:	c1 e1 08             	shl    ecx,0x8
c0020d39:	c1 e2 10             	shl    edx,0x10
c0020d3c:	09 ca                	or     edx,ecx
c0020d3e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020d42:	09 ca                	or     edx,ecx
c0020d44:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020d48:	c1 e1 18             	shl    ecx,0x18
c0020d4b:	09 ca                	or     edx,ecx
c0020d4d:	89 e9                	mov    ecx,ebp
c0020d4f:	84 c9                	test   cl,cl
c0020d51:	74 3c                	je     c0020d8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020d53:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020d57:	83 ec 0c             	sub    esp,0xc
c0020d5a:	56                   	push   esi
c0020d5b:	e8 84 e7 fe ff       	call   c000f4e4 <free>
c0020d60:	83 c4 0c             	add    esp,0xc
c0020d63:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020d6a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020d6f:	50                   	push   eax
c0020d70:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020d77:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020d7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d82:	52                   	push   edx
c0020d83:	57                   	push   edi
c0020d84:	53                   	push   ebx
c0020d85:	e8 6e fe ff ff       	call   c0020bf8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020d8a:	83 c4 20             	add    esp,0x20
c0020d8d:	eb 31                	jmp    c0020dc0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020d8f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020d92:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020d99:	d0 e8                	shr    al,1
c0020d9b:	89 3b                	mov    DWORD PTR [ebx],edi
c0020d9d:	83 e0 01             	and    eax,0x1
c0020da0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020da7:	83 ec 0c             	sub    esp,0xc
c0020daa:	89 13                	mov    DWORD PTR [ebx],edx
c0020dac:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020db3:	89 03                	mov    DWORD PTR [ebx],eax
c0020db5:	56                   	push   esi
c0020db6:	e8 29 e7 fe ff       	call   c000f4e4 <free>
c0020dbb:	83 c4 10             	add    esp,0x10
c0020dbe:	b0 01                	mov    al,0x1
c0020dc0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020dc6:	5b                   	pop    ebx
c0020dc7:	5e                   	pop    esi
c0020dc8:	5f                   	pop    edi
c0020dc9:	5d                   	pop    ebp
c0020dca:	c3                   	ret    

c0020dcb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020dcb:	55                   	push   ebp
c0020dcc:	57                   	push   edi
c0020dcd:	56                   	push   esi
c0020dce:	53                   	push   ebx
c0020dcf:	83 ec 20             	sub    esp,0x20
c0020dd2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020dd6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020dda:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020dde:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020de6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020dee:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020df3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020df9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020dff:	57                   	push   edi
c0020e00:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e04:	50                   	push   eax
c0020e05:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e09:	50                   	push   eax
c0020e0a:	e8 94 fd ff ff       	call   c0020ba3 <readRoot(unsigned int*, unsigned int*, char)>
c0020e0f:	5a                   	pop    edx
c0020e10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020e14:	e8 8f f8 fd ff       	call   c00006a8 <strlen>
c0020e19:	83 c4 10             	add    esp,0x10
c0020e1c:	83 f8 03             	cmp    eax,0x3
c0020e1f:	77 17                	ja     c0020e38 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020e21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e25:	89 03                	mov    DWORD PTR [ebx],eax
c0020e27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e2b:	89 06                	mov    DWORD PTR [esi],eax
c0020e2d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020e34:	b0 01                	mov    al,0x1
c0020e36:	eb 19                	jmp    c0020e51 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020e38:	50                   	push   eax
c0020e39:	55                   	push   ebp
c0020e3a:	57                   	push   edi
c0020e3b:	56                   	push   esi
c0020e3c:	53                   	push   ebx
c0020e3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020e41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020e45:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020e49:	e8 aa fd ff ff       	call   c0020bf8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020e4e:	83 c4 20             	add    esp,0x20
c0020e51:	83 c4 1c             	add    esp,0x1c
c0020e54:	5b                   	pop    ebx
c0020e55:	5e                   	pop    esi
c0020e56:	5f                   	pop    edi
c0020e57:	5d                   	pop    ebp
c0020e58:	c3                   	ret    
c0020e59:	90                   	nop

c0020e5a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020e5a:	57                   	push   edi
c0020e5b:	56                   	push   esi
c0020e5c:	53                   	push   ebx
c0020e5d:	83 ec 10             	sub    esp,0x10
c0020e60:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020e64:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020e68:	85 ff                	test   edi,edi
c0020e6a:	74 7b                	je     c0020ee7 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020e6c:	85 f6                	test   esi,esi
c0020e6e:	74 77                	je     c0020ee7 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020e70:	83 ec 0c             	sub    esp,0xc
c0020e73:	6a 1c                	push   0x1c
c0020e75:	e8 5a e6 fe ff       	call   c000f4d4 <malloc>
c0020e7a:	89 07                	mov    DWORD PTR [edi],eax
c0020e7c:	89 c3                	mov    ebx,eax
c0020e7e:	58                   	pop    eax
c0020e7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e83:	50                   	push   eax
c0020e84:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020e87:	50                   	push   eax
c0020e88:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e8c:	50                   	push   eax
c0020e8d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e91:	50                   	push   eax
c0020e92:	56                   	push   esi
c0020e93:	e8 33 ff ff ff       	call   c0020dcb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020e98:	83 c4 20             	add    esp,0x20
c0020e9b:	84 c0                	test   al,al
c0020e9d:	74 07                	je     c0020ea6 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c0020e9f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020ea4:	74 0b                	je     c0020eb1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020ea6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020eaa:	b8 01 00 00 00       	mov    eax,0x1
c0020eaf:	eb 3b                	jmp    c0020eec <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020eb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020eb5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020eb9:	89 03                	mov    DWORD PTR [ebx],eax
c0020ebb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020ec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ec6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020ecd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020ed4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020ed7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020ede:	8a 06                	mov    al,BYTE PTR [esi]
c0020ee0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0020ee3:	31 c0                	xor    eax,eax
c0020ee5:	eb 05                	jmp    c0020eec <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020ee7:	b8 04 00 00 00       	mov    eax,0x4
c0020eec:	83 c4 10             	add    esp,0x10
c0020eef:	5b                   	pop    ebx
c0020ef0:	5e                   	pop    esi
c0020ef1:	5f                   	pop    edi
c0020ef2:	c3                   	ret    
c0020ef3:	90                   	nop

c0020ef4 <ISO9660::exists(char const*)>:
c0020ef4:	83 ec 28             	sub    esp,0x28
c0020ef7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020efb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020eff:	52                   	push   edx
c0020f00:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0020f03:	52                   	push   edx
c0020f04:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020f08:	52                   	push   edx
c0020f09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020f0d:	52                   	push   edx
c0020f0e:	50                   	push   eax
c0020f0f:	e8 b7 fe ff ff       	call   c0020dcb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f14:	83 c4 3c             	add    esp,0x3c
c0020f17:	c3                   	ret    

c0020f18 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020f18:	56                   	push   esi
c0020f19:	53                   	push   ebx
c0020f1a:	83 ec 14             	sub    esp,0x14
c0020f1d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020f21:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0020f25:	85 db                	test   ebx,ebx
c0020f27:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020f2b:	0f 94 c2             	sete   dl
c0020f2e:	85 f6                	test   esi,esi
c0020f30:	0f 94 c0             	sete   al
c0020f33:	08 c2                	or     dl,al
c0020f35:	75 68                	jne    c0020f9f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020f37:	85 c9                	test   ecx,ecx
c0020f39:	74 64                	je     c0020f9f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020f3b:	83 ec 0c             	sub    esp,0xc
c0020f3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020f41:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f45:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020f4b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f52:	50                   	push   eax
c0020f53:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0020f56:	50                   	push   eax
c0020f57:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f5b:	50                   	push   eax
c0020f5c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f60:	50                   	push   eax
c0020f61:	51                   	push   ecx
c0020f62:	e8 64 fe ff ff       	call   c0020dcb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f67:	83 c4 20             	add    esp,0x20
c0020f6a:	ba 01 00 00 00       	mov    edx,0x1
c0020f6f:	84 c0                	test   al,al
c0020f71:	74 31                	je     c0020fa4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020f73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f77:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f7e:	89 03                	mov    DWORD PTR [ebx],eax
c0020f80:	ba 00 00 00 00       	mov    edx,0x0
c0020f85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f89:	85 c0                	test   eax,eax
c0020f8b:	0f 95 06             	setne  BYTE PTR [esi]
c0020f8e:	74 14                	je     c0020fa4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020f90:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020f96:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f9d:	eb 05                	jmp    c0020fa4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020f9f:	ba 04 00 00 00       	mov    edx,0x4
c0020fa4:	83 c4 14             	add    esp,0x14
c0020fa7:	89 d0                	mov    eax,edx
c0020fa9:	5b                   	pop    ebx
c0020faa:	5e                   	pop    esi
c0020fab:	c3                   	ret    

c0020fac <ISO9660::openDir(char const*, void**)>:
c0020fac:	57                   	push   edi
c0020fad:	56                   	push   esi
c0020fae:	53                   	push   ebx
c0020faf:	83 ec 10             	sub    esp,0x10
c0020fb2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020fb6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020fba:	85 ff                	test   edi,edi
c0020fbc:	0f 84 95 00 00 00    	je     c0021057 <ISO9660::openDir(char const*, void**)+0xab>
c0020fc2:	85 f6                	test   esi,esi
c0020fc4:	0f 84 8d 00 00 00    	je     c0021057 <ISO9660::openDir(char const*, void**)+0xab>
c0020fca:	83 ec 0c             	sub    esp,0xc
c0020fcd:	6a 1c                	push   0x1c
c0020fcf:	e8 00 e5 fe ff       	call   c000f4d4 <malloc>
c0020fd4:	89 07                	mov    DWORD PTR [edi],eax
c0020fd6:	89 c3                	mov    ebx,eax
c0020fd8:	59                   	pop    ecx
c0020fd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fdd:	50                   	push   eax
c0020fde:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020fe1:	50                   	push   eax
c0020fe2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fe6:	50                   	push   eax
c0020fe7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020feb:	50                   	push   eax
c0020fec:	56                   	push   esi
c0020fed:	e8 d9 fd ff ff       	call   c0020dcb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020ff2:	83 c4 20             	add    esp,0x20
c0020ff5:	84 c0                	test   al,al
c0020ff7:	74 07                	je     c0021000 <ISO9660::openDir(char const*, void**)+0x54>
c0020ff9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020ffe:	75 21                	jne    c0021021 <ISO9660::openDir(char const*, void**)+0x75>
c0021000:	0f b6 c0             	movzx  eax,al
c0021003:	52                   	push   edx
c0021004:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021008:	50                   	push   eax
c0021009:	68 fa ad 02 c0       	push   0xc002adfa
c002100e:	e8 be 16 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0021013:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021017:	83 c4 10             	add    esp,0x10
c002101a:	b8 01 00 00 00       	mov    eax,0x1
c002101f:	eb 3b                	jmp    c002105c <ISO9660::openDir(char const*, void**)+0xb0>
c0021021:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021025:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021029:	89 03                	mov    DWORD PTR [ebx],eax
c002102b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021032:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021036:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002103d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021044:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021047:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002104e:	8a 06                	mov    al,BYTE PTR [esi]
c0021050:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021053:	31 c0                	xor    eax,eax
c0021055:	eb 05                	jmp    c002105c <ISO9660::openDir(char const*, void**)+0xb0>
c0021057:	b8 04 00 00 00       	mov    eax,0x4
c002105c:	83 c4 10             	add    esp,0x10
c002105f:	5b                   	pop    ebx
c0021060:	5e                   	pop    esi
c0021061:	5f                   	pop    edi
c0021062:	c3                   	ret    
c0021063:	90                   	nop

c0021064 <ISO9660::ISO9660()>:
c0021064:	83 ec 0c             	sub    esp,0xc
c0021067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002106b:	83 ec 0c             	sub    esp,0xc
c002106e:	50                   	push   eax
c002106f:	e8 62 19 ff ff       	call   c00129d6 <Filesystem::Filesystem()>
c0021074:	83 c4 10             	add    esp,0x10
c0021077:	ba 20 ae 02 c0       	mov    edx,0xc002ae20
c002107c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021080:	89 10                	mov    DWORD PTR [eax],edx
c0021082:	90                   	nop
c0021083:	83 c4 0c             	add    esp,0xc
c0021086:	c3                   	ret    
c0021087:	90                   	nop

c0021088 <SoundChannel::~SoundChannel()>:
c0021088:	83 ec 0c             	sub    esp,0xc
c002108b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002108f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021092:	83 ec 0c             	sub    esp,0xc
c0021095:	50                   	push   eax
c0021096:	e8 49 e4 fe ff       	call   c000f4e4 <free>
c002109b:	83 c4 10             	add    esp,0x10
c002109e:	90                   	nop
c002109f:	83 c4 0c             	add    esp,0xc
c00210a2:	c3                   	ret    
c00210a3:	90                   	nop

c00210a4 <SoundChannel::setSpeed(float)>:
c00210a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00210ac:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00210af:	c3                   	ret    

c00210b0 <SoundChannel::getSpeed()>:
c00210b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00210b7:	c3                   	ret    

c00210b8 <SoundChannel::setVolume(int)>:
c00210b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210bc:	83 f8 64             	cmp    eax,0x64
c00210bf:	7e 05                	jle    c00210c6 <SoundChannel::setVolume(int)+0xe>
c00210c1:	b8 64 00 00 00       	mov    eax,0x64
c00210c6:	85 c0                	test   eax,eax
c00210c8:	79 02                	jns    c00210cc <SoundChannel::setVolume(int)+0x14>
c00210ca:	31 c0                	xor    eax,eax
c00210cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00210d0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00210d3:	c3                   	ret    

c00210d4 <SoundChannel::getVolume()>:
c00210d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210d8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00210db:	c3                   	ret    

c00210dc <SoundChannel::pause()>:
c00210dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210e0:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00210e4:	c3                   	ret    
c00210e5:	90                   	nop

c00210e6 <SoundChannel::SoundChannel(int, int, int, int)>:
c00210e6:	83 ec 1c             	sub    esp,0x1c
c00210e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00210ed:	e8 ea ff ff ff       	call   c00210dc <SoundChannel::pause()>
c00210f2:	83 c4 04             	add    esp,0x4
c00210f5:	6a 50                	push   0x50
c00210f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00210fb:	e8 b8 ff ff ff       	call   c00210b8 <SoundChannel::setVolume(int)>
c0021100:	83 c4 08             	add    esp,0x8
c0021103:	a1 98 ae 02 c0       	mov    eax,ds:0xc002ae98
c0021108:	50                   	push   eax
c0021109:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002110d:	e8 92 ff ff ff       	call   c00210a4 <SoundChannel::setSpeed(float)>
c0021112:	83 c4 08             	add    esp,0x8
c0021115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021119:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002111d:	89 10                	mov    DWORD PTR [eax],edx
c002111f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021123:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021127:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002112a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002112e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021132:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021135:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002113a:	75 23                	jne    c002115f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002113c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021140:	8b 10                	mov    edx,DWORD PTR [eax]
c0021142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021146:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021149:	0f af c2             	imul   eax,edx
c002114c:	85 c0                	test   eax,eax
c002114e:	79 03                	jns    c0021153 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021150:	83 c0 03             	add    eax,0x3
c0021153:	c1 f8 02             	sar    eax,0x2
c0021156:	05 a0 0f 00 00       	add    eax,0xfa0
c002115b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002115f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021163:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021167:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002116a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002116e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021179:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021184:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021187:	c1 e0 02             	shl    eax,0x2
c002118a:	83 ec 0c             	sub    esp,0xc
c002118d:	50                   	push   eax
c002118e:	e8 41 e3 fe ff       	call   c000f4d4 <malloc>
c0021193:	83 c4 10             	add    esp,0x10
c0021196:	89 c2                	mov    edx,eax
c0021198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002119c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002119f:	83 ec 04             	sub    esp,0x4
c00211a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211a6:	50                   	push   eax
c00211a7:	6a 01                	push   0x1
c00211a9:	6a 04                	push   0x4
c00211ab:	e8 9f 77 fe ff       	call   c000894f <src_new>
c00211b0:	83 c4 10             	add    esp,0x10
c00211b3:	89 c2                	mov    edx,eax
c00211b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00211bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211c0:	85 c0                	test   eax,eax
c00211c2:	74 10                	je     c00211d4 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00211c4:	83 ec 0c             	sub    esp,0xc
c00211c7:	68 7c ae 02 c0       	push   0xc002ae7c
c00211cc:	e8 1a 86 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c00211d1:	83 c4 10             	add    esp,0x10
c00211d4:	a0 c0 eb 02 c0       	mov    al,ds:0xc002ebc0
c00211d9:	83 f0 01             	xor    eax,0x1
c00211dc:	84 c0                	test   al,al
c00211de:	74 57                	je     c0021237 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00211e0:	a1 9c ae 02 c0       	mov    eax,ds:0xc002ae9c
c00211e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00211e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00211f1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00211f9:	7f 35                	jg     c0021230 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00211fb:	83 ec 0c             	sub    esp,0xc
c00211fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021202:	e8 20 4a 00 00       	call   c0025c27 <__floatsisf>
c0021207:	83 c4 10             	add    esp,0x10
c002120a:	8b 15 9c ae 02 c0    	mov    edx,DWORD PTR ds:0xc002ae9c
c0021210:	83 ec 08             	sub    esp,0x8
c0021213:	52                   	push   edx
c0021214:	50                   	push   eax
c0021215:	e8 1f 46 00 00       	call   c0025839 <__mulsf3>
c002121a:	83 c4 10             	add    esp,0x10
c002121d:	89 c2                	mov    edx,eax
c002121f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021223:	89 14 85 c0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1840],edx
c002122a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002122e:	eb c1                	jmp    c00211f1 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021230:	c6 05 c0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebc0,0x1
c0021237:	90                   	nop
c0021238:	83 c4 1c             	add    esp,0x1c
c002123b:	c3                   	ret    

c002123c <SoundChannel::play()>:
c002123c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021240:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021244:	c3                   	ret    
c0021245:	90                   	nop

c0021246 <SoundChannel::paused()>:
c0021246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002124a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002124d:	c3                   	ret    

c002124e <SoundChannel::getSampleRate()>:
c002124e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021252:	8b 00                	mov    eax,DWORD PTR [eax]
c0021254:	c3                   	ret    
c0021255:	90                   	nop

c0021256 <SoundChannel::getBits()>:
c0021256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002125a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002125d:	c3                   	ret    

c002125e <SoundChannel::getBufferUsed()>:
c002125e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021262:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021265:	c3                   	ret    

c0021266 <SoundChannel::getBufferSize()>:
c0021266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002126a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002126d:	c3                   	ret    

c002126e <SoundChannel::unbuffer(float*, int, int)>:
c002126e:	56                   	push   esi
c002126f:	53                   	push   ebx
c0021270:	83 ec 40             	sub    esp,0x40
c0021273:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021277:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002127a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002127e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021281:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021285:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021289:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002128d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021291:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021295:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021299:	e8 89 49 00 00       	call   c0025c27 <__floatsisf>
c002129e:	5a                   	pop    edx
c002129f:	89 c6                	mov    esi,eax
c00212a1:	ff 33                	push   DWORD PTR [ebx]
c00212a3:	e8 7f 49 00 00       	call   c0025c27 <__floatsisf>
c00212a8:	59                   	pop    ecx
c00212a9:	5a                   	pop    edx
c00212aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00212ad:	50                   	push   eax
c00212ae:	e8 86 45 00 00       	call   c0025839 <__mulsf3>
c00212b3:	59                   	pop    ecx
c00212b4:	5a                   	pop    edx
c00212b5:	50                   	push   eax
c00212b6:	56                   	push   esi
c00212b7:	e8 40 47 00 00       	call   c00259fc <__divsf3>
c00212bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00212bf:	e8 33 5c 00 00       	call   c0026ef7 <__extendsfdf2>
c00212c4:	59                   	pop    ecx
c00212c5:	5e                   	pop    esi
c00212c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00212ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00212ce:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00212d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212da:	50                   	push   eax
c00212db:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00212de:	e8 61 72 fe ff       	call   c0008544 <src_process>
c00212e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00212e7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00212ea:	83 c4 0c             	add    esp,0xc
c00212ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00212f0:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00212f3:	29 d0                	sub    eax,edx
c00212f5:	c1 e0 02             	shl    eax,0x2
c00212f8:	50                   	push   eax
c00212f9:	8d 04 91             	lea    eax,[ecx+edx*4]
c00212fc:	50                   	push   eax
c00212fd:	51                   	push   ecx
c00212fe:	e8 1a f3 fd ff       	call   c000061d <memmove>
c0021303:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021307:	83 c4 44             	add    esp,0x44
c002130a:	5b                   	pop    ebx
c002130b:	5e                   	pop    esi
c002130c:	c3                   	ret    
c002130d:	90                   	nop

c002130e <SoundChannel::buffer8(unsigned char*, int)>:
c002130e:	55                   	push   ebp
c002130f:	57                   	push   edi
c0021310:	56                   	push   esi
c0021311:	53                   	push   ebx
c0021312:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021316:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002131a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002131d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021321:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021324:	74 7a                	je     c00213a0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021326:	85 ff                	test   edi,edi
c0021328:	7e 76                	jle    c00213a0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002132a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002132e:	8d 70 01             	lea    esi,[eax+0x1]
c0021331:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021334:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021337:	8b 1c 9d c0 e7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1840]
c002133e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021341:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021344:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021347:	74 5e                	je     c00213a7 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021349:	83 ff 01             	cmp    edi,0x1
c002134c:	74 4b                	je     c0021399 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002134e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021352:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021355:	8d 70 01             	lea    esi,[eax+0x1]
c0021358:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002135b:	8b 1c 9d c0 e7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1840]
c0021362:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021365:	b8 02 00 00 00       	mov    eax,0x2
c002136a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002136d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021370:	75 23                	jne    c0021395 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021372:	eb 27                	jmp    c002139b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021374:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021379:	8d 71 01             	lea    esi,[ecx+0x1]
c002137c:	40                   	inc    eax
c002137d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021380:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021383:	8b 1c 9d c0 e7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1840]
c002138a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002138d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021390:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021393:	74 06                	je     c002139b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021395:	39 c7                	cmp    edi,eax
c0021397:	75 db                	jne    c0021374 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021399:	89 f8                	mov    eax,edi
c002139b:	5b                   	pop    ebx
c002139c:	5e                   	pop    esi
c002139d:	5f                   	pop    edi
c002139e:	5d                   	pop    ebp
c002139f:	c3                   	ret    
c00213a0:	5b                   	pop    ebx
c00213a1:	31 c0                	xor    eax,eax
c00213a3:	5e                   	pop    esi
c00213a4:	5f                   	pop    edi
c00213a5:	5d                   	pop    ebp
c00213a6:	c3                   	ret    
c00213a7:	b8 01 00 00 00       	mov    eax,0x1
c00213ac:	eb ed                	jmp    c002139b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00213ae <SoundDevice::SoundDevice(char const*)>:
c00213ae:	83 ec 1c             	sub    esp,0x1c
c00213b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213b5:	83 ec 08             	sub    esp,0x8
c00213b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00213bc:	50                   	push   eax
c00213bd:	e8 ee 28 ff ff       	call   c0013cb0 <Device::Device(char const*)>
c00213c2:	83 c4 10             	add    esp,0x10
c00213c5:	ba a8 ae 02 c0       	mov    edx,0xc002aea8
c00213ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213ce:	89 10                	mov    DWORD PTR [eax],edx
c00213d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213d4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00213de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213e2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00213ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00213f4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00213f9:	7f 19                	jg     c0021414 <SoundDevice::SoundDevice(char const*)+0x66>
c00213fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021403:	83 c2 54             	add    edx,0x54
c0021406:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002140e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021412:	eb e0                	jmp    c00213f4 <SoundDevice::SoundDevice(char const*)+0x46>
c0021414:	90                   	nop
c0021415:	83 c4 1c             	add    esp,0x1c
c0021418:	c3                   	ret    
c0021419:	90                   	nop

c002141a <SoundDevice::~SoundDevice()>:
c002141a:	53                   	push   ebx
c002141b:	83 ec 18             	sub    esp,0x18
c002141e:	ba a8 ae 02 c0       	mov    edx,0xc002aea8
c0021423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021427:	89 10                	mov    DWORD PTR [eax],edx
c0021429:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021431:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021436:	7f 46                	jg     c002147e <SoundDevice::~SoundDevice()+0x64>
c0021438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002143c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021440:	83 c2 54             	add    edx,0x54
c0021443:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021447:	85 c0                	test   eax,eax
c0021449:	74 2d                	je     c0021478 <SoundDevice::~SoundDevice()+0x5e>
c002144b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002144f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021453:	83 c2 54             	add    edx,0x54
c0021456:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002145a:	85 db                	test   ebx,ebx
c002145c:	74 1a                	je     c0021478 <SoundDevice::~SoundDevice()+0x5e>
c002145e:	83 ec 0c             	sub    esp,0xc
c0021461:	53                   	push   ebx
c0021462:	e8 21 fc ff ff       	call   c0021088 <SoundChannel::~SoundChannel()>
c0021467:	83 c4 10             	add    esp,0x10
c002146a:	83 ec 08             	sub    esp,0x8
c002146d:	6a 2c                	push   0x2c
c002146f:	53                   	push   ebx
c0021470:	e8 7c 11 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0021475:	83 c4 10             	add    esp,0x10
c0021478:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002147c:	eb b3                	jmp    c0021431 <SoundDevice::~SoundDevice()+0x17>
c002147e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021482:	83 ec 0c             	sub    esp,0xc
c0021485:	50                   	push   eax
c0021486:	e8 07 25 ff ff       	call   c0013992 <Device::~Device()>
c002148b:	83 c4 10             	add    esp,0x10
c002148e:	90                   	nop
c002148f:	83 c4 18             	add    esp,0x18
c0021492:	5b                   	pop    ebx
c0021493:	c3                   	ret    

c0021494 <SoundDevice::~SoundDevice()>:
c0021494:	83 ec 0c             	sub    esp,0xc
c0021497:	83 ec 0c             	sub    esp,0xc
c002149a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002149e:	e8 77 ff ff ff       	call   c002141a <SoundDevice::~SoundDevice()>
c00214a3:	83 c4 10             	add    esp,0x10
c00214a6:	83 ec 08             	sub    esp,0x8
c00214a9:	68 e4 01 00 00       	push   0x1e4
c00214ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214b2:	e8 3a 11 ff ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00214b7:	83 c4 10             	add    esp,0x10
c00214ba:	83 c4 0c             	add    esp,0xc
c00214bd:	c3                   	ret    

c00214be <SoundDevice::getFreeChannelNum()>:
c00214be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00214c2:	31 c0                	xor    eax,eax
c00214c4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00214cc:	74 09                	je     c00214d7 <SoundDevice::getFreeChannelNum()+0x19>
c00214ce:	40                   	inc    eax
c00214cf:	83 f8 20             	cmp    eax,0x20
c00214d2:	75 f0                	jne    c00214c4 <SoundDevice::getFreeChannelNum()+0x6>
c00214d4:	83 c8 ff             	or     eax,0xffffffff
c00214d7:	c3                   	ret    

c00214d8 <SoundDevice::addChannel(SoundChannel*)>:
c00214d8:	56                   	push   esi
c00214d9:	53                   	push   ebx
c00214da:	51                   	push   ecx
c00214db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00214e3:	53                   	push   ebx
c00214e4:	e8 d5 ff ff ff       	call   c00214be <SoundDevice::getFreeChannelNum()>
c00214e9:	5a                   	pop    edx
c00214ea:	83 f8 ff             	cmp    eax,0xffffffff
c00214ed:	74 51                	je     c0021540 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00214ef:	85 f6                	test   esi,esi
c00214f1:	74 4d                	je     c0021540 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00214f3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00214fa:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021501:	75 30                	jne    c0021533 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021503:	83 ec 0c             	sub    esp,0xc
c0021506:	56                   	push   esi
c0021507:	e8 42 fd ff ff       	call   c002124e <SoundChannel::getSampleRate()>
c002150c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021512:	89 34 24             	mov    DWORD PTR [esp],esi
c0021515:	e8 3c fd ff ff       	call   c0021256 <SoundChannel::getBits()>
c002151a:	83 c4 0c             	add    esp,0xc
c002151d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021523:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021525:	50                   	push   eax
c0021526:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002152c:	53                   	push   ebx
c002152d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021530:	83 c4 10             	add    esp,0x10
c0021533:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021539:	b8 01 00 00 00       	mov    eax,0x1
c002153e:	eb 03                	jmp    c0021543 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021540:	83 c8 ff             	or     eax,0xffffffff
c0021543:	5a                   	pop    edx
c0021544:	5b                   	pop    ebx
c0021545:	5e                   	pop    esi
c0021546:	c3                   	ret    
c0021547:	90                   	nop

c0021548 <SoundDevice::removeChannel(int)>:
c0021548:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002154c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021550:	83 fa 1f             	cmp    edx,0x1f
c0021553:	77 23                	ja     c0021578 <SoundDevice::removeChannel(int)+0x30>
c0021555:	8d 14 90             	lea    edx,[eax+edx*4]
c0021558:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002155f:	74 17                	je     c0021578 <SoundDevice::removeChannel(int)+0x30>
c0021561:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002156b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021571:	75 05                	jne    c0021578 <SoundDevice::removeChannel(int)+0x30>
c0021573:	8b 00                	mov    eax,DWORD PTR [eax]
c0021575:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021578:	c3                   	ret    
c0021579:	90                   	nop

c002157a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002157a:	57                   	push   edi
c002157b:	56                   	push   esi
c002157c:	53                   	push   ebx
c002157d:	31 db                	xor    ebx,ebx
c002157f:	83 ec 10             	sub    esp,0x10
c0021582:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021586:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002158a:	0f 8d cb 00 00 00    	jge    c002165b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021590:	83 ec 0c             	sub    esp,0xc
c0021593:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021597:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002159a:	e8 58 59 00 00       	call   c0026ef7 <__extendsfdf2>
c002159f:	83 c4 10             	add    esp,0x10
c00215a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00215aa:	68 00 00 f0 3f       	push   0x3ff00000
c00215af:	6a 00                	push   0x0
c00215b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215b9:	e8 c5 48 00 00       	call   c0025e83 <__adddf3>
c00215be:	83 c4 10             	add    esp,0x10
c00215c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00215c9:	68 00 00 e0 3f       	push   0x3fe00000
c00215ce:	6a 00                	push   0x0
c00215d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215d8:	e8 23 4f 00 00       	call   c0026500 <__muldf3>
c00215dd:	83 c4 10             	add    esp,0x10
c00215e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00215e8:	68 00 00 60 40       	push   0x40600000
c00215ed:	6a 00                	push   0x0
c00215ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215f7:	e8 04 4f 00 00       	call   c0026500 <__muldf3>
c00215fc:	59                   	pop    ecx
c00215fd:	5f                   	pop    edi
c00215fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021602:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002160a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002160e:	e8 c0 57 00 00       	call   c0026dd3 <__truncdfsf2>
c0021613:	5a                   	pop    edx
c0021614:	89 c7                	mov    edi,eax
c0021616:	59                   	pop    ecx
c0021617:	68 00 00 fe 42       	push   0x42fe0000
c002161c:	50                   	push   eax
c002161d:	e8 5b 48 00 00       	call   c0025e7d <__gesf2>
c0021622:	83 c4 10             	add    esp,0x10
c0021625:	85 c0                	test   eax,eax
c0021627:	78 06                	js     c002162f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021629:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002162d:	eb 26                	jmp    c0021655 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002162f:	50                   	push   eax
c0021630:	50                   	push   eax
c0021631:	6a 00                	push   0x0
c0021633:	57                   	push   edi
c0021634:	e8 48 48 00 00       	call   c0025e81 <__lesf2>
c0021639:	83 c4 10             	add    esp,0x10
c002163c:	85 c0                	test   eax,eax
c002163e:	7f 06                	jg     c0021646 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021640:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021644:	eb 0f                	jmp    c0021655 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021646:	83 ec 0c             	sub    esp,0xc
c0021649:	57                   	push   edi
c002164a:	e8 3d 59 00 00       	call   c0026f8c <lrintf>
c002164f:	83 c4 10             	add    esp,0x10
c0021652:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021655:	43                   	inc    ebx
c0021656:	e9 2b ff ff ff       	jmp    c0021586 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002165b:	83 c4 10             	add    esp,0x10
c002165e:	5b                   	pop    ebx
c002165f:	5e                   	pop    esi
c0021660:	5f                   	pop    edi
c0021661:	c3                   	ret    

c0021662 <SoundDevice::getAudio(int, float*, float*)>:
c0021662:	55                   	push   ebp
c0021663:	57                   	push   edi
c0021664:	56                   	push   esi
c0021665:	53                   	push   ebx
c0021666:	31 db                	xor    ebx,ebx
c0021668:	83 ec 20             	sub    esp,0x20
c002166b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002166f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021673:	c1 e0 02             	shl    eax,0x2
c0021676:	50                   	push   eax
c0021677:	6a 00                	push   0x0
c0021679:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002167d:	e8 09 f0 fd ff       	call   c000068b <memset>
c0021682:	83 c4 10             	add    esp,0x10
c0021685:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021689:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021690:	85 c0                	test   eax,eax
c0021692:	0f 84 d7 00 00 00    	je     c002176f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021698:	83 ec 0c             	sub    esp,0xc
c002169b:	50                   	push   eax
c002169c:	e8 a5 fb ff ff       	call   c0021246 <SoundChannel::paused()>
c00216a1:	83 c4 10             	add    esp,0x10
c00216a4:	84 c0                	test   al,al
c00216a6:	0f 85 c3 00 00 00    	jne    c002176f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00216ac:	83 ec 0c             	sub    esp,0xc
c00216af:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00216b6:	e8 19 fa ff ff       	call   c00210d4 <SoundChannel::getVolume()>
c00216bb:	83 c4 10             	add    esp,0x10
c00216be:	85 c0                	test   eax,eax
c00216c0:	0f 84 a9 00 00 00    	je     c002176f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00216c6:	83 ec 0c             	sub    esp,0xc
c00216c9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00216d0:	e8 ff f9 ff ff       	call   c00210d4 <SoundChannel::getVolume()>
c00216d5:	83 ec 0c             	sub    esp,0xc
c00216d8:	50                   	push   eax
c00216d9:	e8 49 45 00 00       	call   c0025c27 <__floatsisf>
c00216de:	59                   	pop    ecx
c00216df:	5d                   	pop    ebp
c00216e0:	31 ed                	xor    ebp,ebp
c00216e2:	68 00 00 c8 42       	push   0x42c80000
c00216e7:	50                   	push   eax
c00216e8:	e8 0f 43 00 00       	call   c00259fc <__divsf3>
c00216ed:	83 c4 10             	add    esp,0x10
c00216f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00216f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00216f8:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00216fe:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021702:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021709:	e8 60 fb ff ff       	call   c002126e <SoundChannel::unbuffer(float*, int, int)>
c002170e:	83 c4 20             	add    esp,0x20
c0021711:	89 c1                	mov    ecx,eax
c0021713:	39 cd                	cmp    ebp,ecx
c0021715:	7d 52                	jge    c0021769 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021717:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002171b:	50                   	push   eax
c002171c:	50                   	push   eax
c002171d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021721:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021724:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021728:	e8 0c 41 00 00       	call   c0025839 <__mulsf3>
c002172d:	5a                   	pop    edx
c002172e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021732:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021738:	e8 ea 44 00 00       	call   c0025c27 <__floatsisf>
c002173d:	59                   	pop    ecx
c002173e:	5a                   	pop    edx
c002173f:	50                   	push   eax
c0021740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021744:	e8 b3 42 00 00       	call   c00259fc <__divsf3>
c0021749:	59                   	pop    ecx
c002174a:	5a                   	pop    edx
c002174b:	50                   	push   eax
c002174c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021750:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021753:	e8 be 3d 00 00       	call   c0025516 <__addsf3>
c0021758:	83 c4 10             	add    esp,0x10
c002175b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002175f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021763:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021766:	45                   	inc    ebp
c0021767:	eb aa                	jmp    c0021713 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021769:	39 cf                	cmp    edi,ecx
c002176b:	7e 02                	jle    c002176f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002176d:	89 cf                	mov    edi,ecx
c002176f:	43                   	inc    ebx
c0021770:	83 fb 20             	cmp    ebx,0x20
c0021773:	0f 85 10 ff ff ff    	jne    c0021689 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021779:	83 c4 1c             	add    esp,0x1c
c002177c:	89 f8                	mov    eax,edi
c002177e:	5b                   	pop    ebx
c002177f:	5e                   	pop    esi
c0021780:	5f                   	pop    edi
c0021781:	5d                   	pop    ebp
c0021782:	c3                   	ret    
c0021783:	90                   	nop

c0021784 <PCI::open(int, int, void*)>:
c0021784:	83 ec 18             	sub    esp,0x18
c0021787:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002178b:	8b 10                	mov    edx,DWORD PTR [eax]
c002178d:	50                   	push   eax
c002178e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021791:	31 c0                	xor    eax,eax
c0021793:	83 c4 1c             	add    esp,0x1c
c0021796:	c3                   	ret    
c0021797:	90                   	nop

c0021798 <PCI::close(int, int, void*)>:
c0021798:	31 c0                	xor    eax,eax
c002179a:	c3                   	ret    
c002179b:	90                   	nop

c002179c <PCI::PCI()>:
c002179c:	83 ec 0c             	sub    esp,0xc
c002179f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a3:	83 ec 08             	sub    esp,0x8
c00217a6:	68 d8 ae 02 c0       	push   0xc002aed8
c00217ab:	50                   	push   eax
c00217ac:	e8 bb 1b ff ff       	call   c001336c <Bus::Bus(char const*)>
c00217b1:	83 c4 10             	add    esp,0x10
c00217b4:	ba 44 af 02 c0       	mov    edx,0xc002af44
c00217b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217bd:	89 10                	mov    DWORD PTR [eax],edx
c00217bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00217c9:	0f b6 d0             	movzx  edx,al
c00217cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d0:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00217d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00217e1:	0f b6 d0             	movzx  edx,al
c00217e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e8:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00217ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00217f7:	8d 50 01             	lea    edx,[eax+0x1]
c00217fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217fe:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021804:	0f b6 d0             	movzx  edx,al
c0021807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002180b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002180f:	83 c9 c0             	or     ecx,0xffffffc0
c0021812:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021816:	90                   	nop
c0021817:	83 c4 0c             	add    esp,0xc
c002181a:	c3                   	ret    
c002181b:	90                   	nop

c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002181c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021820:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021825:	89 ca                	mov    edx,ecx
c0021827:	c1 e0 10             	shl    eax,0x10
c002182a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021830:	09 d0                	or     eax,edx
c0021832:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021837:	c1 e2 08             	shl    edx,0x8
c002183a:	09 d0                	or     eax,edx
c002183c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021841:	c1 e2 0b             	shl    edx,0xb
c0021844:	09 d0                	or     eax,edx
c0021846:	ba f8 0c 00 00       	mov    edx,0xcf8
c002184b:	0d 00 00 00 80       	or     eax,0x80000000
c0021850:	ef                   	out    dx,eax
c0021851:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021856:	ed                   	in     eax,dx
c0021857:	83 e1 02             	and    ecx,0x2
c002185a:	0f b6 c9             	movzx  ecx,cl
c002185d:	c1 e1 03             	shl    ecx,0x3
c0021860:	d3 e8                	shr    eax,cl
c0021862:	c3                   	ret    
c0021863:	90                   	nop

c0021864 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021864:	6a 00                	push   0x0
c0021866:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002186b:	50                   	push   eax
c002186c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021871:	50                   	push   eax
c0021872:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021877:	50                   	push   eax
c0021878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002187c:	e8 9b ff ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021881:	83 c4 14             	add    esp,0x14
c0021884:	c3                   	ret    
c0021885:	90                   	nop

c0021886 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021886:	6a 0e                	push   0xe
c0021888:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002188d:	50                   	push   eax
c002188e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021893:	50                   	push   eax
c0021894:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021899:	50                   	push   eax
c002189a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002189e:	e8 79 ff ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00218a3:	83 c4 14             	add    esp,0x14
c00218a6:	0f b6 c0             	movzx  eax,al
c00218a9:	c3                   	ret    

c00218aa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00218aa:	55                   	push   ebp
c00218ab:	57                   	push   edi
c00218ac:	56                   	push   esi
c00218ad:	53                   	push   ebx
c00218ae:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00218b3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00218b8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00218bd:	6a 0a                	push   0xa
c00218bf:	56                   	push   esi
c00218c0:	55                   	push   ebp
c00218c1:	57                   	push   edi
c00218c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00218c6:	e8 51 ff ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00218cb:	6a 0a                	push   0xa
c00218cd:	89 c3                	mov    ebx,eax
c00218cf:	56                   	push   esi
c00218d0:	0f b6 db             	movzx  ebx,bl
c00218d3:	55                   	push   ebp
c00218d4:	57                   	push   edi
c00218d5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00218d9:	e8 3e ff ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00218de:	83 c4 28             	add    esp,0x28
c00218e1:	25 00 ff 00 00       	and    eax,0xff00
c00218e6:	09 d8                	or     eax,ebx
c00218e8:	5b                   	pop    ebx
c00218e9:	5e                   	pop    esi
c00218ea:	5f                   	pop    edi
c00218eb:	5d                   	pop    ebp
c00218ec:	c3                   	ret    
c00218ed:	90                   	nop

c00218ee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00218ee:	6a 08                	push   0x8
c00218f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218f5:	50                   	push   eax
c00218f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218fb:	50                   	push   eax
c00218fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021901:	50                   	push   eax
c0021902:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021906:	e8 11 ff ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002190b:	83 c4 14             	add    esp,0x14
c002190e:	0f b6 c4             	movzx  eax,ah
c0021911:	c3                   	ret    

c0021912 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021912:	6a 08                	push   0x8
c0021914:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021919:	50                   	push   eax
c002191a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002191f:	50                   	push   eax
c0021920:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021925:	50                   	push   eax
c0021926:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002192a:	e8 ed fe ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002192f:	83 c4 14             	add    esp,0x14
c0021932:	c3                   	ret    
c0021933:	90                   	nop

c0021934 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021934:	6a 3c                	push   0x3c
c0021936:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002193b:	50                   	push   eax
c002193c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021941:	50                   	push   eax
c0021942:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021947:	50                   	push   eax
c0021948:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002194c:	e8 cb fe ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021951:	83 c4 14             	add    esp,0x14
c0021954:	c3                   	ret    
c0021955:	90                   	nop

c0021956 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021956:	6a 18                	push   0x18
c0021958:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002195d:	50                   	push   eax
c002195e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021963:	50                   	push   eax
c0021964:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021969:	50                   	push   eax
c002196a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002196e:	e8 a9 fe ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021973:	83 c4 14             	add    esp,0x14
c0021976:	0f b6 c4             	movzx  eax,ah
c0021979:	c3                   	ret    

c002197a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002197a:	55                   	push   ebp
c002197b:	57                   	push   edi
c002197c:	56                   	push   esi
c002197d:	53                   	push   ebx
c002197e:	50                   	push   eax
c002197f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021983:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021988:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002198d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021992:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021999:	8d 43 12             	lea    eax,[ebx+0x12]
c002199c:	83 c3 10             	add    ebx,0x10
c002199f:	0f b6 c0             	movzx  eax,al
c00219a2:	0f b6 db             	movzx  ebx,bl
c00219a5:	50                   	push   eax
c00219a6:	51                   	push   ecx
c00219a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00219ab:	57                   	push   edi
c00219ac:	55                   	push   ebp
c00219ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00219b1:	e8 66 fe ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219b6:	53                   	push   ebx
c00219b7:	89 c6                	mov    esi,eax
c00219b9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00219bd:	c1 e6 10             	shl    esi,0x10
c00219c0:	51                   	push   ecx
c00219c1:	57                   	push   edi
c00219c2:	55                   	push   ebp
c00219c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00219c7:	e8 50 fe ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219cc:	83 c4 2c             	add    esp,0x2c
c00219cf:	0f b7 c0             	movzx  eax,ax
c00219d2:	5b                   	pop    ebx
c00219d3:	09 f0                	or     eax,esi
c00219d5:	5e                   	pop    esi
c00219d6:	5f                   	pop    edi
c00219d7:	5d                   	pop    ebp
c00219d8:	c3                   	ret    
c00219d9:	90                   	nop

c00219da <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00219da:	53                   	push   ebx
c00219db:	ba f8 0c 00 00       	mov    edx,0xcf8
c00219e0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00219e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00219e9:	c1 e1 10             	shl    ecx,0x10
c00219ec:	25 fc 00 00 00       	and    eax,0xfc
c00219f1:	09 c1                	or     ecx,eax
c00219f3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219f8:	c1 e0 08             	shl    eax,0x8
c00219fb:	09 c1                	or     ecx,eax
c00219fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021a02:	c1 e0 0b             	shl    eax,0xb
c0021a05:	09 c1                	or     ecx,eax
c0021a07:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021a0d:	89 c8                	mov    eax,ecx
c0021a0f:	ef                   	out    dx,eax
c0021a10:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021a15:	ed                   	in     eax,dx
c0021a16:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021a1b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021a20:	74 0a                	je     c0021a2c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021a22:	0f b7 d8             	movzx  ebx,ax
c0021a25:	89 d0                	mov    eax,edx
c0021a27:	c1 e0 10             	shl    eax,0x10
c0021a2a:	eb 05                	jmp    c0021a31 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021a2c:	66 31 c0             	xor    ax,ax
c0021a2f:	89 d3                	mov    ebx,edx
c0021a31:	09 c3                	or     ebx,eax
c0021a33:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021a38:	89 c8                	mov    eax,ecx
c0021a3a:	ef                   	out    dx,eax
c0021a3b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021a40:	89 d8                	mov    eax,ebx
c0021a42:	ef                   	out    dx,eax
c0021a43:	5b                   	pop    ebx
c0021a44:	c3                   	ret    
c0021a45:	90                   	nop

c0021a46 <PCI::checkBus(unsigned char)>:
c0021a46:	56                   	push   esi
c0021a47:	53                   	push   ebx
c0021a48:	31 db                	xor    ebx,ebx
c0021a4a:	51                   	push   ecx
c0021a4b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021a50:	52                   	push   edx
c0021a51:	53                   	push   ebx
c0021a52:	43                   	inc    ebx
c0021a53:	56                   	push   esi
c0021a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a58:	e8 2b 03 00 00       	call   c0021d88 <PCI::checkDevice(unsigned char, unsigned char)>
c0021a5d:	83 c4 10             	add    esp,0x10
c0021a60:	83 fb 20             	cmp    ebx,0x20
c0021a63:	75 eb                	jne    c0021a50 <PCI::checkBus(unsigned char)+0xa>
c0021a65:	58                   	pop    eax
c0021a66:	5b                   	pop    ebx
c0021a67:	5e                   	pop    esi
c0021a68:	c3                   	ret    
c0021a69:	90                   	nop

c0021a6a <PCI::foundDevice(PCIDeviceInfo)>:
c0021a6a:	55                   	push   ebp
c0021a6b:	57                   	push   edi
c0021a6c:	56                   	push   esi
c0021a6d:	53                   	push   ebx
c0021a6e:	83 ec 1c             	sub    esp,0x1c
c0021a71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021a75:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021a7b:	0f 84 52 01 00 00    	je     c0021bd3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021a81:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021a85:	66 81 f9 06 04       	cmp    cx,0x406
c0021a8a:	75 2c                	jne    c0021ab8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021a8c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021a91:	50                   	push   eax
c0021a92:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021a97:	50                   	push   eax
c0021a98:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021a9d:	50                   	push   eax
c0021a9e:	56                   	push   esi
c0021a9f:	e8 b2 fe ff ff       	call   c0021956 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021aa4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021aa8:	0f b6 c0             	movzx  eax,al
c0021aab:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021aaf:	83 c4 2c             	add    esp,0x2c
c0021ab2:	5b                   	pop    ebx
c0021ab3:	5e                   	pop    esi
c0021ab4:	5f                   	pop    edi
c0021ab5:	5d                   	pop    ebp
c0021ab6:	eb 8e                	jmp    c0021a46 <PCI::checkBus(unsigned char)>
c0021ab8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021abc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021ac2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ac6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021aca:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021ace:	88 d3                	mov    bl,dl
c0021ad0:	85 c0                	test   eax,eax
c0021ad2:	74 33                	je     c0021b07 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021ad4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021ad7:	85 d2                	test   edx,edx
c0021ad9:	74 28                	je     c0021b03 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021adb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021ae1:	31 ef                	xor    edi,ebp
c0021ae3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021ae9:	75 18                	jne    c0021b03 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021aeb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021aef:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021af5:	75 0c                	jne    c0021b03 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021af7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021afd:	0f 84 d0 00 00 00    	je     c0021bd3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021b03:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b05:	eb c9                	jmp    c0021ad0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021b07:	66 81 f9 01 06       	cmp    cx,0x601
c0021b0c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021b10:	75 19                	jne    c0021b2b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021b12:	83 ec 0c             	sub    esp,0xc
c0021b15:	68 64 01 00 00       	push   0x164
c0021b1a:	e8 b5 d9 fe ff       	call   c000f4d4 <malloc>
c0021b1f:	89 c5                	mov    ebp,eax
c0021b21:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b24:	e8 95 0f 00 00       	call   c0022abe <SATABus::SATABus()>
c0021b29:	eb 1e                	jmp    c0021b49 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021b2b:	66 81 f9 01 01       	cmp    cx,0x101
c0021b30:	75 60                	jne    c0021b92 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021b32:	83 ec 0c             	sub    esp,0xc
c0021b35:	68 70 02 00 00       	push   0x270
c0021b3a:	e8 95 d9 fe ff       	call   c000f4d4 <malloc>
c0021b3f:	89 c5                	mov    ebp,eax
c0021b41:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b44:	e8 03 03 00 00       	call   c0021e4c <IDE::IDE()>
c0021b49:	58                   	pop    eax
c0021b4a:	5a                   	pop    edx
c0021b4b:	55                   	push   ebp
c0021b4c:	56                   	push   esi
c0021b4d:	e8 6e 1f ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c0021b52:	83 ec 1c             	sub    esp,0x1c
c0021b55:	b9 09 00 00 00       	mov    ecx,0x9
c0021b5a:	fc                   	cld    
c0021b5b:	89 e7                	mov    edi,esp
c0021b5d:	89 de                	mov    esi,ebx
c0021b5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021b61:	55                   	push   ebp
c0021b62:	e8 63 1e ff ff       	call   c00139ca <Device::preOpenPCI(PCIDeviceInfo)>
c0021b67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021b6a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021b6e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021b76:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021b7e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021b86:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b89:	83 c4 4c             	add    esp,0x4c
c0021b8c:	5b                   	pop    ebx
c0021b8d:	5e                   	pop    esi
c0021b8e:	5f                   	pop    edi
c0021b8f:	5d                   	pop    ebp
c0021b90:	ff e0                	jmp    eax
c0021b92:	83 ec 0c             	sub    esp,0xc
c0021b95:	68 58 01 00 00       	push   0x158
c0021b9a:	e8 35 d9 fe ff       	call   c000f4d4 <malloc>
c0021b9f:	89 c5                	mov    ebp,eax
c0021ba1:	58                   	pop    eax
c0021ba2:	5a                   	pop    edx
c0021ba3:	68 e0 ae 02 c0       	push   0xc002aee0
c0021ba8:	55                   	push   ebp
c0021ba9:	e8 08 22 ff ff       	call   c0013db6 <DriverlessDevice::DriverlessDevice(char const*)>
c0021bae:	59                   	pop    ecx
c0021baf:	5f                   	pop    edi
c0021bb0:	55                   	push   ebp
c0021bb1:	56                   	push   esi
c0021bb2:	e8 09 1f ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c0021bb7:	b9 09 00 00 00       	mov    ecx,0x9
c0021bbc:	fc                   	cld    
c0021bbd:	89 df                	mov    edi,ebx
c0021bbf:	89 de                	mov    esi,ebx
c0021bc1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021bc3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021bc7:	83 c4 2c             	add    esp,0x2c
c0021bca:	5b                   	pop    ebx
c0021bcb:	5e                   	pop    esi
c0021bcc:	5f                   	pop    edi
c0021bcd:	5d                   	pop    ebp
c0021bce:	e9 f7 1d ff ff       	jmp    c00139ca <Device::preOpenPCI(PCIDeviceInfo)>
c0021bd3:	83 c4 1c             	add    esp,0x1c
c0021bd6:	5b                   	pop    ebx
c0021bd7:	5e                   	pop    esi
c0021bd8:	5f                   	pop    edi
c0021bd9:	5d                   	pop    ebp
c0021bda:	c3                   	ret    
c0021bdb:	90                   	nop

c0021bdc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021bdc:	55                   	push   ebp
c0021bdd:	57                   	push   edi
c0021bde:	56                   	push   esi
c0021bdf:	53                   	push   ebx
c0021be0:	83 ec 5c             	sub    esp,0x5c
c0021be3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021be7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021beb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021bef:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021bf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021bf8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021bfc:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021c01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c05:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021c0a:	6a 0c                	push   0xc
c0021c0c:	55                   	push   ebp
c0021c0d:	53                   	push   ebx
c0021c0e:	57                   	push   edi
c0021c0f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021c16:	e8 01 fc ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c1b:	55                   	push   ebp
c0021c1c:	53                   	push   ebx
c0021c1d:	57                   	push   edi
c0021c1e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021c25:	e8 80 fc ff ff       	call   c00218aa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021c2a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021c2f:	83 c4 24             	add    esp,0x24
c0021c32:	55                   	push   ebp
c0021c33:	53                   	push   ebx
c0021c34:	57                   	push   edi
c0021c35:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021c39:	e8 f6 fc ff ff       	call   c0021934 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021c3e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021c42:	6a 3c                	push   0x3c
c0021c44:	55                   	push   ebp
c0021c45:	53                   	push   ebx
c0021c46:	57                   	push   edi
c0021c47:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021c4e:	e8 c9 fb ff ff       	call   c002181c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c53:	0f b6 c4             	movzx  eax,ah
c0021c56:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c5a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021c5e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021c62:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0021c67:	83 c4 24             	add    esp,0x24
c0021c6a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021c70:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021c77:	74 6c                	je     c0021ce5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021c79:	31 f6                	xor    esi,esi
c0021c7b:	8b 15 a8 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c8a8
c0021c81:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021c87:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021c8d:	7e 56                	jle    c0021ce5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021c8f:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021c92:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021c99:	39 cb                	cmp    ebx,ecx
c0021c9b:	75 45                	jne    c0021ce2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021c9d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021ca4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021ca8:	75 38                	jne    c0021ce2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021caa:	83 ec 0c             	sub    esp,0xc
c0021cad:	68 fa ae 02 c0       	push   0xc002aefa
c0021cb2:	e8 1a 0a ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0021cb7:	8b 15 a8 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c8a8
c0021cbd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021cc3:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021ccb:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021ccf:	52                   	push   edx
c0021cd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021cd4:	53                   	push   ebx
c0021cd5:	68 1f af 02 c0       	push   0xc002af1f
c0021cda:	e8 f2 09 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0021cdf:	83 c4 20             	add    esp,0x20
c0021ce2:	46                   	inc    esi
c0021ce3:	eb 96                	jmp    c0021c7b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021ce5:	31 d2                	xor    edx,edx
c0021ce7:	83 ec 0c             	sub    esp,0xc
c0021cea:	55                   	push   ebp
c0021ceb:	53                   	push   ebx
c0021cec:	57                   	push   edi
c0021ced:	52                   	push   edx
c0021cee:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021cf2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021cf9:	e8 7c fc ff ff       	call   c002197a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cfe:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021d02:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d06:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021d0a:	42                   	inc    edx
c0021d0b:	83 c4 20             	add    esp,0x20
c0021d0e:	83 fa 06             	cmp    edx,0x6
c0021d11:	75 d4                	jne    c0021ce7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021d13:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021d17:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021d1b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021d1f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021d23:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021d27:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021d2b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021d30:	86 e0                	xchg   al,ah
c0021d32:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021d37:	55                   	push   ebp
c0021d38:	53                   	push   ebx
c0021d39:	57                   	push   edi
c0021d3a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021d3e:	e8 ab fb ff ff       	call   c00218ee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021d43:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021d47:	55                   	push   ebp
c0021d48:	53                   	push   ebx
c0021d49:	57                   	push   edi
c0021d4a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021d51:	e8 0e fb ff ff       	call   c0021864 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021d56:	83 ec 0c             	sub    esp,0xc
c0021d59:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021d5e:	b9 09 00 00 00       	mov    ecx,0x9
c0021d63:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021d67:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021d6b:	fc                   	cld    
c0021d6c:	89 e7                	mov    edi,esp
c0021d6e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021d70:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021d77:	e8 ee fc ff ff       	call   c0021a6a <PCI::foundDevice(PCIDeviceInfo)>
c0021d7c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021d82:	5b                   	pop    ebx
c0021d83:	5e                   	pop    esi
c0021d84:	5f                   	pop    edi
c0021d85:	5d                   	pop    ebp
c0021d86:	c3                   	ret    
c0021d87:	90                   	nop

c0021d88 <PCI::checkDevice(unsigned char, unsigned char)>:
c0021d88:	55                   	push   ebp
c0021d89:	57                   	push   edi
c0021d8a:	56                   	push   esi
c0021d8b:	53                   	push   ebx
c0021d8c:	83 ec 0c             	sub    esp,0xc
c0021d8f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021d93:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021d98:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021d9d:	6a 00                	push   0x0
c0021d9f:	56                   	push   esi
c0021da0:	57                   	push   edi
c0021da1:	55                   	push   ebp
c0021da2:	e8 bd fa ff ff       	call   c0021864 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021da7:	6a 00                	push   0x0
c0021da9:	56                   	push   esi
c0021daa:	57                   	push   edi
c0021dab:	55                   	push   ebp
c0021dac:	e8 2b fe ff ff       	call   c0021bdc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021db1:	83 c4 20             	add    esp,0x20
c0021db4:	6a 00                	push   0x0
c0021db6:	56                   	push   esi
c0021db7:	57                   	push   edi
c0021db8:	55                   	push   ebp
c0021db9:	e8 c8 fa ff ff       	call   c0021886 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021dbe:	83 c4 10             	add    esp,0x10
c0021dc1:	84 c0                	test   al,al
c0021dc3:	79 27                	jns    c0021dec <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021dc5:	bb 01 00 00 00       	mov    ebx,0x1
c0021dca:	53                   	push   ebx
c0021dcb:	56                   	push   esi
c0021dcc:	57                   	push   edi
c0021dcd:	55                   	push   ebp
c0021dce:	e8 91 fa ff ff       	call   c0021864 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021dd3:	83 c4 10             	add    esp,0x10
c0021dd6:	66 40                	inc    ax
c0021dd8:	74 0c                	je     c0021de6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021dda:	53                   	push   ebx
c0021ddb:	56                   	push   esi
c0021ddc:	57                   	push   edi
c0021ddd:	55                   	push   ebp
c0021dde:	e8 f9 fd ff ff       	call   c0021bdc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021de3:	83 c4 10             	add    esp,0x10
c0021de6:	43                   	inc    ebx
c0021de7:	83 fb 08             	cmp    ebx,0x8
c0021dea:	75 de                	jne    c0021dca <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021dec:	83 c4 0c             	add    esp,0xc
c0021def:	5b                   	pop    ebx
c0021df0:	5e                   	pop    esi
c0021df1:	5f                   	pop    edi
c0021df2:	5d                   	pop    ebp
c0021df3:	c3                   	ret    

c0021df4 <PCI::detect()>:
c0021df4:	56                   	push   esi
c0021df5:	53                   	push   ebx
c0021df6:	53                   	push   ebx
c0021df7:	31 db                	xor    ebx,ebx
c0021df9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021dfd:	6a 00                	push   0x0
c0021dff:	6a 00                	push   0x0
c0021e01:	6a 00                	push   0x0
c0021e03:	56                   	push   esi
c0021e04:	e8 7d fa ff ff       	call   c0021886 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021e09:	83 c4 10             	add    esp,0x10
c0021e0c:	a8 80                	test   al,0x80
c0021e0e:	75 21                	jne    c0021e31 <PCI::detect()+0x3d>
c0021e10:	51                   	push   ecx
c0021e11:	51                   	push   ecx
c0021e12:	6a 00                	push   0x0
c0021e14:	56                   	push   esi
c0021e15:	e8 2c fc ff ff       	call   c0021a46 <PCI::checkBus(unsigned char)>
c0021e1a:	83 c4 10             	add    esp,0x10
c0021e1d:	eb 24                	jmp    c0021e43 <PCI::detect()+0x4f>
c0021e1f:	52                   	push   edx
c0021e20:	52                   	push   edx
c0021e21:	53                   	push   ebx
c0021e22:	43                   	inc    ebx
c0021e23:	56                   	push   esi
c0021e24:	e8 1d fc ff ff       	call   c0021a46 <PCI::checkBus(unsigned char)>
c0021e29:	83 c4 10             	add    esp,0x10
c0021e2c:	83 fb 08             	cmp    ebx,0x8
c0021e2f:	74 12                	je     c0021e43 <PCI::detect()+0x4f>
c0021e31:	53                   	push   ebx
c0021e32:	6a 00                	push   0x0
c0021e34:	6a 00                	push   0x0
c0021e36:	56                   	push   esi
c0021e37:	e8 28 fa ff ff       	call   c0021864 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e3c:	83 c4 10             	add    esp,0x10
c0021e3f:	66 40                	inc    ax
c0021e41:	74 dc                	je     c0021e1f <PCI::detect()+0x2b>
c0021e43:	58                   	pop    eax
c0021e44:	5b                   	pop    ebx
c0021e45:	5e                   	pop    esi
c0021e46:	c3                   	ret    
c0021e47:	90                   	nop

c0021e48 <IDE::close(int, int, void*)>:
c0021e48:	83 c8 ff             	or     eax,0xffffffff
c0021e4b:	c3                   	ret    

c0021e4c <IDE::IDE()>:
c0021e4c:	83 ec 0c             	sub    esp,0xc
c0021e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e53:	83 ec 08             	sub    esp,0x8
c0021e56:	68 68 af 02 c0       	push   0xc002af68
c0021e5b:	50                   	push   eax
c0021e5c:	e8 eb 1f ff ff       	call   c0013e4c <HardDiskController::HardDiskController(char const*)>
c0021e61:	83 c4 10             	add    esp,0x10
c0021e64:	ba a8 b1 02 c0       	mov    edx,0xc002b1a8
c0021e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e6d:	89 10                	mov    DWORD PTR [eax],edx
c0021e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e73:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021e7a:	90                   	nop
c0021e7b:	83 c4 0c             	add    esp,0xc
c0021e7e:	c3                   	ret    
c0021e7f:	90                   	nop

c0021e80 <IDE::prepareInterrupt(unsigned char)>:
c0021e80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021e85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e89:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021e91:	c3                   	ret    

c0021e92 <selectDrive(unsigned char, unsigned char)>:
c0021e92:	c3                   	ret    
c0021e93:	90                   	nop

c0021e94 <IDE::getBase(unsigned char)>:
c0021e94:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021e99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e9d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021ea5:	c3                   	ret    

c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021ea6:	55                   	push   ebp
c0021ea7:	57                   	push   edi
c0021ea8:	56                   	push   esi
c0021ea9:	53                   	push   ebx
c0021eaa:	83 ec 1c             	sub    esp,0x1c
c0021ead:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021eb1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021eb5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021eb8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021ebc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021ec0:	80 f9 03             	cmp    cl,0x3
c0021ec3:	77 51                	ja     c0021f16 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021ec5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ec9:	0f b6 f2             	movzx  esi,dl
c0021ecc:	0f b6 db             	movzx  ebx,bl
c0021ecf:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021ed2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021ed6:	83 ca 80             	or     edx,0xffffff80
c0021ed9:	0f b6 d2             	movzx  edx,dl
c0021edc:	52                   	push   edx
c0021edd:	6a 0c                	push   0xc
c0021edf:	56                   	push   esi
c0021ee0:	57                   	push   edi
c0021ee1:	e8 c0 ff ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ee6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021eef:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021ef3:	ee                   	out    dx,al
c0021ef4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021ef9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021efd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021f01:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021f05:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021f0d:	83 c4 2c             	add    esp,0x2c
c0021f10:	5b                   	pop    ebx
c0021f11:	5e                   	pop    esi
c0021f12:	5f                   	pop    edi
c0021f13:	5d                   	pop    ebp
c0021f14:	eb 90                	jmp    c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f16:	80 fb 07             	cmp    bl,0x7
c0021f19:	77 12                	ja     c0021f2d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021f1b:	0f b6 d2             	movzx  edx,dl
c0021f1e:	0f b6 db             	movzx  ebx,bl
c0021f21:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021f29:	89 da                	mov    edx,ebx
c0021f2b:	eb 2f                	jmp    c0021f5c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021f2d:	80 fb 0d             	cmp    bl,0xd
c0021f30:	77 13                	ja     c0021f45 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0021f32:	0f b6 d2             	movzx  edx,dl
c0021f35:	0f b6 db             	movzx  ebx,bl
c0021f38:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0021f3f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0021f43:	eb 17                	jmp    c0021f5c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021f45:	80 fb 15             	cmp    bl,0x15
c0021f48:	77 13                	ja     c0021f5d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021f4a:	0f b6 d2             	movzx  edx,dl
c0021f4d:	0f b6 db             	movzx  ebx,bl
c0021f50:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0021f58:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0021f5c:	ee                   	out    dx,al
c0021f5d:	83 c4 1c             	add    esp,0x1c
c0021f60:	5b                   	pop    ebx
c0021f61:	5e                   	pop    esi
c0021f62:	5f                   	pop    edi
c0021f63:	5d                   	pop    ebp
c0021f64:	c3                   	ret    
c0021f65:	90                   	nop

c0021f66 <IDE::read(unsigned char, unsigned char)>:
c0021f66:	55                   	push   ebp
c0021f67:	57                   	push   edi
c0021f68:	56                   	push   esi
c0021f69:	53                   	push   ebx
c0021f6a:	83 ec 1c             	sub    esp,0x1c
c0021f6d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f71:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021f75:	8d 43 f8             	lea    eax,[ebx-0x8]
c0021f78:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021f7c:	3c 03                	cmp    al,0x3
c0021f7e:	77 43                	ja     c0021fc3 <IDE::read(unsigned char, unsigned char)+0x5d>
c0021f80:	0f b6 f2             	movzx  esi,dl
c0021f83:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021f86:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0021f8a:	83 c8 80             	or     eax,0xffffff80
c0021f8d:	0f b6 c0             	movzx  eax,al
c0021f90:	50                   	push   eax
c0021f91:	6a 0c                	push   0xc
c0021f93:	56                   	push   esi
c0021f94:	57                   	push   edi
c0021f95:	e8 0c ff ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f9a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0021f9f:	0f b6 c3             	movzx  eax,bl
c0021fa2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0021fa6:	ec                   	in     al,dx
c0021fa7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021fab:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0021fb0:	52                   	push   edx
c0021fb1:	6a 0c                	push   0xc
c0021fb3:	56                   	push   esi
c0021fb4:	57                   	push   edi
c0021fb5:	e8 ec fe ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fba:	83 c4 20             	add    esp,0x20
c0021fbd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021fc1:	eb 49                	jmp    c002200c <IDE::read(unsigned char, unsigned char)+0xa6>
c0021fc3:	80 fb 07             	cmp    bl,0x7
c0021fc6:	77 12                	ja     c0021fda <IDE::read(unsigned char, unsigned char)+0x74>
c0021fc8:	0f b6 d2             	movzx  edx,dl
c0021fcb:	0f b6 c3             	movzx  eax,bl
c0021fce:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0021fd6:	89 c2                	mov    edx,eax
c0021fd8:	eb 31                	jmp    c002200b <IDE::read(unsigned char, unsigned char)+0xa5>
c0021fda:	80 fb 0d             	cmp    bl,0xd
c0021fdd:	77 13                	ja     c0021ff2 <IDE::read(unsigned char, unsigned char)+0x8c>
c0021fdf:	0f b6 d2             	movzx  edx,dl
c0021fe2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0021fe9:	0f b6 d3             	movzx  edx,bl
c0021fec:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0021ff0:	eb 19                	jmp    c002200b <IDE::read(unsigned char, unsigned char)+0xa5>
c0021ff2:	31 c0                	xor    eax,eax
c0021ff4:	80 fb 15             	cmp    bl,0x15
c0021ff7:	77 13                	ja     c002200c <IDE::read(unsigned char, unsigned char)+0xa6>
c0021ff9:	0f b6 d2             	movzx  edx,dl
c0021ffc:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022004:	0f b6 d3             	movzx  edx,bl
c0022007:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002200b:	ec                   	in     al,dx
c002200c:	83 c4 1c             	add    esp,0x1c
c002200f:	5b                   	pop    ebx
c0022010:	5e                   	pop    esi
c0022011:	5f                   	pop    edi
c0022012:	5d                   	pop    ebp
c0022013:	c3                   	ret    

c0022014 <IDE::waitInterrupt(unsigned char)>:
c0022014:	55                   	push   ebp
c0022015:	57                   	push   edi
c0022016:	56                   	push   esi
c0022017:	53                   	push   ebx
c0022018:	31 db                	xor    ebx,ebx
c002201a:	83 ec 0c             	sub    esp,0xc
c002201d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022021:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022026:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002202e:	89 e8                	mov    eax,ebp
c0022030:	84 c0                	test   al,al
c0022032:	75 34                	jne    c0022068 <IDE::waitInterrupt(unsigned char)+0x54>
c0022034:	52                   	push   edx
c0022035:	6a 0c                	push   0xc
c0022037:	56                   	push   esi
c0022038:	57                   	push   edi
c0022039:	e8 28 ff ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c002203e:	83 c4 10             	add    esp,0x10
c0022041:	a8 01                	test   al,0x1
c0022043:	75 2b                	jne    c0022070 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022045:	f6 c3 04             	test   bl,0x4
c0022048:	75 16                	jne    c0022060 <IDE::waitInterrupt(unsigned char)+0x4c>
c002204a:	83 fb 32             	cmp    ebx,0x32
c002204d:	7e 11                	jle    c0022060 <IDE::waitInterrupt(unsigned char)+0x4c>
c002204f:	50                   	push   eax
c0022050:	50                   	push   eax
c0022051:	6a 00                	push   0x0
c0022053:	68 80 96 98 00       	push   0x989680
c0022058:	e8 6d b1 ff ff       	call   c001d1ca <nanoSleep(unsigned long long)>
c002205d:	83 c4 10             	add    esp,0x10
c0022060:	83 fb 3c             	cmp    ebx,0x3c
c0022063:	74 0b                	je     c0022070 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022065:	43                   	inc    ebx
c0022066:	eb be                	jmp    c0022026 <IDE::waitInterrupt(unsigned char)+0x12>
c0022068:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022070:	83 c4 0c             	add    esp,0xc
c0022073:	89 e8                	mov    eax,ebp
c0022075:	5b                   	pop    ebx
c0022076:	5e                   	pop    esi
c0022077:	5f                   	pop    edi
c0022078:	5d                   	pop    ebp
c0022079:	c3                   	ret    

c002207a <ideChannel0IRQHandler(regs*, void*)>:
c002207a:	83 ec 10             	sub    esp,0x10
c002207d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022081:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022088:	6a 07                	push   0x7
c002208a:	6a 00                	push   0x0
c002208c:	50                   	push   eax
c002208d:	e8 d4 fe ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022092:	83 c4 1c             	add    esp,0x1c
c0022095:	c3                   	ret    

c0022096 <ideChannel1IRQHandler(regs*, void*)>:
c0022096:	83 ec 10             	sub    esp,0x10
c0022099:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002209d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00220a4:	6a 07                	push   0x7
c00220a6:	6a 01                	push   0x1
c00220a8:	50                   	push   eax
c00220a9:	e8 b8 fe ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c00220ae:	83 c4 1c             	add    esp,0x1c
c00220b1:	c3                   	ret    

c00220b2 <IDE::enableIRQs(unsigned char, bool)>:
c00220b2:	57                   	push   edi
c00220b3:	56                   	push   esi
c00220b4:	be 04 00 00 00       	mov    esi,0x4
c00220b9:	53                   	push   ebx
c00220ba:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00220bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00220c3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00220c8:	0f 94 c0             	sete   al
c00220cb:	d1 e0                	shl    eax,1
c00220cd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00220d4:	0f b6 c0             	movzx  eax,al
c00220d7:	50                   	push   eax
c00220d8:	6a 0c                	push   0xc
c00220da:	57                   	push   edi
c00220db:	53                   	push   ebx
c00220dc:	e8 c5 fd ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00220e1:	83 c4 10             	add    esp,0x10
c00220e4:	50                   	push   eax
c00220e5:	6a 0c                	push   0xc
c00220e7:	57                   	push   edi
c00220e8:	53                   	push   ebx
c00220e9:	e8 78 fe ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c00220ee:	83 c4 10             	add    esp,0x10
c00220f1:	4e                   	dec    esi
c00220f2:	75 f0                	jne    c00220e4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00220f4:	5b                   	pop    ebx
c00220f5:	5e                   	pop    esi
c00220f6:	5f                   	pop    edi
c00220f7:	c3                   	ret    

c00220f8 <IDE::open(int, int, void*)>:
c00220f8:	55                   	push   ebp
c00220f9:	57                   	push   edi
c00220fa:	56                   	push   esi
c00220fb:	53                   	push   ebx
c00220fc:	83 ec 1c             	sub    esp,0x1c
c00220ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022103:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002210c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022115:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002211c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022123:	0f 85 b0 02 00 00    	jne    c00223d9 <IDE::open(int, int, void*)+0x2e1>
c0022129:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002212f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022133:	83 e0 7f             	and    eax,0x7f
c0022136:	3c 05                	cmp    al,0x5
c0022138:	74 04                	je     c002213e <IDE::open(int, int, void*)+0x46>
c002213a:	3c 0f                	cmp    al,0xf
c002213c:	75 32                	jne    c0022170 <IDE::open(int, int, void*)+0x78>
c002213e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022144:	83 e0 fc             	and    eax,0xfffffffc
c0022147:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002214e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022154:	83 e0 fc             	and    eax,0xfffffffc
c0022157:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002215e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022164:	83 e0 fc             	and    eax,0xfffffffc
c0022167:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002216e:	eb 14                	jmp    c0022184 <IDE::open(int, int, void*)+0x8c>
c0022170:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002217a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022184:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002218b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022196:	89 c6                	mov    esi,eax
c0022198:	bf f8 0c 00 00       	mov    edi,0xcf8
c002219d:	c1 e6 10             	shl    esi,0x10
c00221a0:	89 e8                	mov    eax,ebp
c00221a2:	89 fa                	mov    edx,edi
c00221a4:	c1 e0 0b             	shl    eax,0xb
c00221a7:	09 f0                	or     eax,esi
c00221a9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00221b0:	c1 e6 08             	shl    esi,0x8
c00221b3:	09 c6                	or     esi,eax
c00221b5:	89 f0                	mov    eax,esi
c00221b7:	0d 08 00 00 80       	or     eax,0x80000008
c00221bc:	ef                   	out    dx,eax
c00221bd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00221c2:	89 ca                	mov    edx,ecx
c00221c4:	ed                   	in     eax,dx
c00221c5:	c1 e8 10             	shr    eax,0x10
c00221c8:	3d ff ff 00 00       	cmp    eax,0xffff
c00221cd:	0f 84 f5 00 00 00    	je     c00222c8 <IDE::open(int, int, void*)+0x1d0>
c00221d3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00221d9:	89 fa                	mov    edx,edi
c00221db:	89 f0                	mov    eax,esi
c00221dd:	ef                   	out    dx,eax
c00221de:	b0 fe                	mov    al,0xfe
c00221e0:	89 ca                	mov    edx,ecx
c00221e2:	ee                   	out    dx,al
c00221e3:	89 f0                	mov    eax,esi
c00221e5:	89 fa                	mov    edx,edi
c00221e7:	ef                   	out    dx,eax
c00221e8:	89 ca                	mov    edx,ecx
c00221ea:	ed                   	in     eax,dx
c00221eb:	3c fe                	cmp    al,0xfe
c00221ed:	0f 85 a9 00 00 00    	jne    c002229c <IDE::open(int, int, void*)+0x1a4>
c00221f3:	8b 15 a8 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c8a8
c00221f9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022200:	74 33                	je     c0022235 <IDE::open(int, int, void*)+0x13d>
c0022202:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022208:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002220c:	40                   	inc    eax
c002220d:	83 ec 0c             	sub    esp,0xc
c0022210:	0f b6 c0             	movzx  eax,al
c0022213:	50                   	push   eax
c0022214:	55                   	push   ebp
c0022215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022219:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002221f:	51                   	push   ecx
c0022220:	e8 bb 54 ff ff       	call   c00176e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022225:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002222a:	83 c4 1c             	add    esp,0x1c
c002222d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022233:	eb 0a                	jmp    c002223f <IDE::open(int, int, void*)+0x147>
c0022235:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002223f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022246:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002224d:	c1 e1 10             	shl    ecx,0x10
c0022250:	c1 e0 08             	shl    eax,0x8
c0022253:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022258:	09 c1                	or     ecx,eax
c002225a:	89 fa                	mov    edx,edi
c002225c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022263:	c1 e0 0b             	shl    eax,0xb
c0022266:	09 c1                	or     ecx,eax
c0022268:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002226e:	89 c8                	mov    eax,ecx
c0022270:	ef                   	out    dx,eax
c0022271:	be fc 0c 00 00       	mov    esi,0xcfc
c0022276:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002227c:	89 f2                	mov    edx,esi
c002227e:	ee                   	out    dx,al
c002227f:	89 c8                	mov    eax,ecx
c0022281:	89 fa                	mov    edx,edi
c0022283:	ef                   	out    dx,eax
c0022284:	89 f2                	mov    edx,esi
c0022286:	ed                   	in     eax,dx
c0022287:	0f b6 c0             	movzx  eax,al
c002228a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022290:	74 46                	je     c00222d8 <IDE::open(int, int, void*)+0x1e0>
c0022292:	83 ec 0c             	sub    esp,0xc
c0022295:	68 80 af 02 c0       	push   0xc002af80
c002229a:	eb 34                	jmp    c00222d0 <IDE::open(int, int, void*)+0x1d8>
c002229c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00222a5:	75 17                	jne    c00222be <IDE::open(int, int, void*)+0x1c6>
c00222a7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00222ac:	74 07                	je     c00222b5 <IDE::open(int, int, void*)+0x1bd>
c00222ae:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00222b3:	75 09                	jne    c00222be <IDE::open(int, int, void*)+0x1c6>
c00222b5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00222bc:	eb 1a                	jmp    c00222d8 <IDE::open(int, int, void*)+0x1e0>
c00222be:	83 ec 0c             	sub    esp,0xc
c00222c1:	68 88 af 02 c0       	push   0xc002af88
c00222c6:	eb 08                	jmp    c00222d0 <IDE::open(int, int, void*)+0x1d8>
c00222c8:	83 ec 0c             	sub    esp,0xc
c00222cb:	68 b9 af 02 c0       	push   0xc002afb9
c00222d0:	e8 16 75 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c00222d5:	83 c4 10             	add    esp,0x10
c00222d8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00222df:	79 1a                	jns    c00222fb <IDE::open(int, int, void*)+0x203>
c00222e1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00222e7:	83 e0 fc             	and    eax,0xfffffffc
c00222ea:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00222f1:	83 c0 08             	add    eax,0x8
c00222f4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00222fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022301:	89 c2                	mov    edx,eax
c0022303:	83 e2 0f             	and    edx,0xf
c0022306:	66 83 fa 08          	cmp    dx,0x8
c002230a:	75 0a                	jne    c0022316 <IDE::open(int, int, void*)+0x21e>
c002230c:	83 e8 02             	sub    eax,0x2
c002230f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022316:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002231c:	89 c2                	mov    edx,eax
c002231e:	83 e2 0f             	and    edx,0xf
c0022321:	66 83 fa 08          	cmp    dx,0x8
c0022325:	75 0a                	jne    c0022331 <IDE::open(int, int, void*)+0x239>
c0022327:	83 e8 02             	sub    eax,0x2
c002232a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022331:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022338:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002233f:	89 d0                	mov    eax,edx
c0022341:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022344:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022348:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002234c:	8d 4a 01             	lea    ecx,[edx+0x1]
c002234f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022354:	0f b6 c9             	movzx  ecx,cl
c0022357:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002235e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022361:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022365:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022369:	8d 50 02             	lea    edx,[eax+0x2]
c002236c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022371:	0f b6 d2             	movzx  edx,dl
c0022374:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002237a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002237d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022381:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022385:	8d 48 03             	lea    ecx,[eax+0x3]
c0022388:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002238d:	0f b6 c9             	movzx  ecx,cl
c0022390:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022396:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022399:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002239d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00223a1:	8d 50 04             	lea    edx,[eax+0x4]
c00223a4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00223aa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00223af:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00223b6:	66 85 f6             	test   si,si
c00223b9:	74 3e                	je     c00223f9 <IDE::open(int, int, void*)+0x301>
c00223bb:	0f b6 d2             	movzx  edx,dl
c00223be:	83 c0 05             	add    eax,0x5
c00223c1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00223c4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00223c8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00223cc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00223d2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00223d7:	eb 20                	jmp    c00223f9 <IDE::open(int, int, void*)+0x301>
c00223d9:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00223e3:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00223ed:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00223f4:	e9 02 ff ff ff       	jmp    c00222fb <IDE::open(int, int, void*)+0x203>
c00223f9:	52                   	push   edx
c00223fa:	52                   	push   edx
c00223fb:	6a 00                	push   0x0
c00223fd:	53                   	push   ebx
c00223fe:	e8 7d fa ff ff       	call   c0021e80 <IDE::prepareInterrupt(unsigned char)>
c0022403:	59                   	pop    ecx
c0022404:	5e                   	pop    esi
c0022405:	6a 01                	push   0x1
c0022407:	53                   	push   ebx
c0022408:	e8 73 fa ff ff       	call   c0021e80 <IDE::prepareInterrupt(unsigned char)>
c002240d:	83 c4 0c             	add    esp,0xc
c0022410:	6a 00                	push   0x0
c0022412:	6a 00                	push   0x0
c0022414:	53                   	push   ebx
c0022415:	e8 98 fc ff ff       	call   c00220b2 <IDE::enableIRQs(unsigned char, bool)>
c002241a:	83 c4 0c             	add    esp,0xc
c002241d:	6a 00                	push   0x0
c002241f:	6a 01                	push   0x1
c0022421:	53                   	push   ebx
c0022422:	e8 8b fc ff ff       	call   c00220b2 <IDE::enableIRQs(unsigned char, bool)>
c0022427:	83 c4 10             	add    esp,0x10
c002242a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022431:	74 40                	je     c0022473 <IDE::open(int, int, void*)+0x37b>
c0022433:	83 ec 0c             	sub    esp,0xc
c0022436:	68 e3 af 02 c0       	push   0xc002afe3
c002243b:	e8 91 02 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022440:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022443:	6a 01                	push   0x1
c0022445:	68 7a 20 02 c0       	push   0xc002207a
c002244a:	6a 0e                	push   0xe
c002244c:	53                   	push   ebx
c002244d:	e8 f2 15 ff ff       	call   c0013a44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022452:	83 c4 14             	add    esp,0x14
c0022455:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002245b:	53                   	push   ebx
c002245c:	6a 01                	push   0x1
c002245e:	68 96 20 02 c0       	push   0xc0022096
c0022463:	6a 0f                	push   0xf
c0022465:	53                   	push   ebx
c0022466:	e8 d9 15 ff ff       	call   c0013a44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002246b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022471:	eb 4a                	jmp    c00224bd <IDE::open(int, int, void*)+0x3c5>
c0022473:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002247d:	50                   	push   eax
c002247e:	6a 0f                	push   0xf
c0022480:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022486:	68 ff af 02 c0       	push   0xc002afff
c002248b:	e8 41 02 ff ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022490:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022493:	6a 00                	push   0x0
c0022495:	68 7a 20 02 c0       	push   0xc002207a
c002249a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00224a0:	53                   	push   ebx
c00224a1:	e8 9e 15 ff ff       	call   c0013a44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00224a6:	83 c4 14             	add    esp,0x14
c00224a9:	53                   	push   ebx
c00224aa:	6a 00                	push   0x0
c00224ac:	68 96 20 02 c0       	push   0xc0022096
c00224b1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00224b7:	53                   	push   ebx
c00224b8:	e8 87 15 ff ff       	call   c0013a44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00224bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00224bf:	83 c4 20             	add    esp,0x20
c00224c2:	83 ec 0c             	sub    esp,0xc
c00224c5:	53                   	push   ebx
c00224c6:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00224c9:	83 c4 0c             	add    esp,0xc
c00224cc:	6a 07                	push   0x7
c00224ce:	6a 00                	push   0x0
c00224d0:	53                   	push   ebx
c00224d1:	e8 90 fa ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c00224d6:	83 c4 0c             	add    esp,0xc
c00224d9:	6a 07                	push   0x7
c00224db:	6a 01                	push   0x1
c00224dd:	53                   	push   ebx
c00224de:	e8 83 fa ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c00224e3:	83 c4 0c             	add    esp,0xc
c00224e6:	6a 01                	push   0x1
c00224e8:	6a 00                	push   0x0
c00224ea:	53                   	push   ebx
c00224eb:	e8 c2 fb ff ff       	call   c00220b2 <IDE::enableIRQs(unsigned char, bool)>
c00224f0:	83 c4 0c             	add    esp,0xc
c00224f3:	6a 01                	push   0x1
c00224f5:	6a 01                	push   0x1
c00224f7:	53                   	push   ebx
c00224f8:	e8 b5 fb ff ff       	call   c00220b2 <IDE::enableIRQs(unsigned char, bool)>
c00224fd:	83 c4 2c             	add    esp,0x2c
c0022500:	31 c0                	xor    eax,eax
c0022502:	5b                   	pop    ebx
c0022503:	5e                   	pop    esi
c0022504:	5f                   	pop    edi
c0022505:	5d                   	pop    ebp
c0022506:	c3                   	ret    
c0022507:	90                   	nop

c0022508 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022508:	55                   	push   ebp
c0022509:	57                   	push   edi
c002250a:	56                   	push   esi
c002250b:	53                   	push   ebx
c002250c:	83 ec 1c             	sub    esp,0x1c
c002250f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022513:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022517:	8d 50 f8             	lea    edx,[eax-0x8]
c002251a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002251e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022522:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022526:	80 fa 03             	cmp    dl,0x3
c0022529:	77 5d                	ja     c0022588 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002252b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002252f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022533:	0f b6 db             	movzx  ebx,bl
c0022536:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022539:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002253d:	83 ca 80             	or     edx,0xffffff80
c0022540:	0f b6 d2             	movzx  edx,dl
c0022543:	52                   	push   edx
c0022544:	6a 0c                	push   0xc
c0022546:	53                   	push   ebx
c0022547:	56                   	push   esi
c0022548:	e8 59 f9 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002254d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022552:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002255a:	0f b6 c0             	movzx  eax,al
c002255d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022561:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022563:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022568:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002256c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022570:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022574:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002257c:	83 c4 2c             	add    esp,0x2c
c002257f:	5b                   	pop    ebx
c0022580:	5e                   	pop    esi
c0022581:	5f                   	pop    edi
c0022582:	5d                   	pop    ebp
c0022583:	e9 1e f9 ff ff       	jmp    c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022588:	3c 07                	cmp    al,0x7
c002258a:	77 10                	ja     c002259c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002258c:	0f b6 db             	movzx  ebx,bl
c002258f:	0f b6 d0             	movzx  edx,al
c0022592:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002259a:	eb 2d                	jmp    c00225c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002259c:	3c 0d                	cmp    al,0xd
c002259e:	77 13                	ja     c00225b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00225a0:	0f b6 db             	movzx  ebx,bl
c00225a3:	0f b6 c0             	movzx  eax,al
c00225a6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00225ad:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00225b1:	eb 16                	jmp    c00225c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00225b3:	3c 15                	cmp    al,0x15
c00225b5:	77 14                	ja     c00225cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00225b7:	0f b6 db             	movzx  ebx,bl
c00225ba:	0f b6 c0             	movzx  eax,al
c00225bd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00225c5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00225c9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00225cb:	83 c4 1c             	add    esp,0x1c
c00225ce:	5b                   	pop    ebx
c00225cf:	5e                   	pop    esi
c00225d0:	5f                   	pop    edi
c00225d1:	5d                   	pop    ebp
c00225d2:	c3                   	ret    
c00225d3:	90                   	nop

c00225d4 <IDE::detect()>:
c00225d4:	55                   	push   ebp
c00225d5:	57                   	push   edi
c00225d6:	56                   	push   esi
c00225d7:	53                   	push   ebx
c00225d8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00225de:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00225e5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00225ec:	0f 85 be 02 00 00    	jne    c00228b0 <IDE::detect()+0x2dc>
c00225f2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00225f9:	31 f6                	xor    esi,esi
c00225fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022603:	31 ed                	xor    ebp,ebp
c0022605:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022609:	c1 e0 06             	shl    eax,0x6
c002260c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022614:	89 e8                	mov    eax,ebp
c0022616:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002261a:	c1 e0 04             	shl    eax,0x4
c002261d:	83 c8 a0             	or     eax,0xffffffa0
c0022620:	0f b6 c0             	movzx  eax,al
c0022623:	50                   	push   eax
c0022624:	6a 06                	push   0x6
c0022626:	56                   	push   esi
c0022627:	53                   	push   ebx
c0022628:	e8 79 f8 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002262d:	83 c4 0c             	add    esp,0xc
c0022630:	6a 0c                	push   0xc
c0022632:	56                   	push   esi
c0022633:	53                   	push   ebx
c0022634:	e8 2d f9 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022639:	83 c4 0c             	add    esp,0xc
c002263c:	6a 0c                	push   0xc
c002263e:	56                   	push   esi
c002263f:	53                   	push   ebx
c0022640:	e8 21 f9 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022645:	83 c4 0c             	add    esp,0xc
c0022648:	6a 0c                	push   0xc
c002264a:	56                   	push   esi
c002264b:	53                   	push   ebx
c002264c:	e8 15 f9 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022651:	83 c4 0c             	add    esp,0xc
c0022654:	6a 0c                	push   0xc
c0022656:	56                   	push   esi
c0022657:	53                   	push   ebx
c0022658:	e8 09 f9 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c002265d:	68 ec 00 00 00       	push   0xec
c0022662:	6a 07                	push   0x7
c0022664:	56                   	push   esi
c0022665:	53                   	push   ebx
c0022666:	e8 3b f8 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002266b:	83 c4 1c             	add    esp,0x1c
c002266e:	6a 0c                	push   0xc
c0022670:	56                   	push   esi
c0022671:	53                   	push   ebx
c0022672:	e8 ef f8 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022677:	83 c4 0c             	add    esp,0xc
c002267a:	6a 0c                	push   0xc
c002267c:	56                   	push   esi
c002267d:	53                   	push   ebx
c002267e:	e8 e3 f8 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022683:	83 c4 0c             	add    esp,0xc
c0022686:	6a 0c                	push   0xc
c0022688:	56                   	push   esi
c0022689:	53                   	push   ebx
c002268a:	e8 d7 f8 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c002268f:	83 c4 0c             	add    esp,0xc
c0022692:	6a 0c                	push   0xc
c0022694:	56                   	push   esi
c0022695:	53                   	push   ebx
c0022696:	e8 cb f8 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c002269b:	83 c4 0c             	add    esp,0xc
c002269e:	6a 0c                	push   0xc
c00226a0:	56                   	push   esi
c00226a1:	53                   	push   ebx
c00226a2:	e8 bf f8 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c00226a7:	83 c4 10             	add    esp,0x10
c00226aa:	84 c0                	test   al,al
c00226ac:	0f 84 8b 01 00 00    	je     c002283d <IDE::detect()+0x269>
c00226b2:	31 ff                	xor    edi,edi
c00226b4:	50                   	push   eax
c00226b5:	6a 0c                	push   0xc
c00226b7:	56                   	push   esi
c00226b8:	53                   	push   ebx
c00226b9:	e8 a8 f8 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c00226be:	83 c4 10             	add    esp,0x10
c00226c1:	a8 01                	test   al,0x1
c00226c3:	0f 85 8e 01 00 00    	jne    c0022857 <IDE::detect()+0x283>
c00226c9:	84 c0                	test   al,al
c00226cb:	78 04                	js     c00226d1 <IDE::detect()+0xfd>
c00226cd:	a8 08                	test   al,0x8
c00226cf:	75 27                	jne    c00226f8 <IDE::detect()+0x124>
c00226d1:	47                   	inc    edi
c00226d2:	81 ff 17 01 00 00    	cmp    edi,0x117
c00226d8:	7e da                	jle    c00226b4 <IDE::detect()+0xe0>
c00226da:	50                   	push   eax
c00226db:	50                   	push   eax
c00226dc:	6a 00                	push   0x0
c00226de:	68 40 4b 4c 00       	push   0x4c4b40
c00226e3:	e8 e2 aa ff ff       	call   c001d1ca <nanoSleep(unsigned long long)>
c00226e8:	83 c4 10             	add    esp,0x10
c00226eb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00226f1:	75 c1                	jne    c00226b4 <IDE::detect()+0xe0>
c00226f3:	e9 5f 01 00 00       	jmp    c0022857 <IDE::detect()+0x283>
c00226f8:	31 c9                	xor    ecx,ecx
c00226fa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00226fe:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022702:	83 ec 0c             	sub    esp,0xc
c0022705:	68 80 00 00 00       	push   0x80
c002270a:	57                   	push   edi
c002270b:	6a 00                	push   0x0
c002270d:	56                   	push   esi
c002270e:	53                   	push   ebx
c002270f:	e8 f4 fd ff ff       	call   c0022508 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022714:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022719:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002271d:	89 d1                	mov    ecx,edx
c002271f:	c1 e0 06             	shl    eax,0x6
c0022722:	01 d8                	add    eax,ebx
c0022724:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002272b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022732:	89 f2                	mov    edx,esi
c0022734:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002273a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002273e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022744:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022748:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002274f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022757:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002275e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022766:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002276c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022773:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022779:	8d 54 24 58          	lea    edx,[esp+0x58]
c002277d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022781:	83 c4 20             	add    esp,0x20
c0022784:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022787:	83 c0 02             	add    eax,0x2
c002278a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022790:	83 c7 02             	add    edi,0x2
c0022793:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022796:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002279c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00227a0:	75 e2                	jne    c0022784 <IDE::detect()+0x1b0>
c00227a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00227a6:	c1 e0 06             	shl    eax,0x6
c00227a9:	01 d8                	add    eax,ebx
c00227ab:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00227b1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00227b8:	66 c1 ea 09          	shr    dx,0x9
c00227bc:	83 e2 01             	and    edx,0x1
c00227bf:	84 c9                	test   cl,cl
c00227c1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00227c7:	75 2f                	jne    c00227f8 <IDE::detect()+0x224>
c00227c9:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00227cf:	85 c0                	test   eax,eax
c00227d1:	74 66                	je     c0022839 <IDE::detect()+0x265>
c00227d3:	50                   	push   eax
c00227d4:	55                   	push   ebp
c00227d5:	56                   	push   esi
c00227d6:	68 1b b0 02 c0       	push   0xc002b01b
c00227db:	e8 f1 fe fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00227e0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00227e7:	e8 e8 cc fe ff       	call   c000f4d4 <malloc>
c00227ec:	89 c7                	mov    edi,eax
c00227ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00227f1:	e8 62 06 00 00       	call   c0022e58 <ATA::ATA()>
c00227f6:	eb 28                	jmp    c0022820 <IDE::detect()+0x24c>
c00227f8:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00227fe:	55                   	push   ebp
c00227ff:	56                   	push   esi
c0022800:	68 4a b0 02 c0       	push   0xc002b04a
c0022805:	e8 c7 fe fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c002280a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022811:	e8 be cc fe ff       	call   c000f4d4 <malloc>
c0022816:	89 c7                	mov    edi,eax
c0022818:	89 04 24             	mov    DWORD PTR [esp],eax
c002281b:	e8 68 0c 00 00       	call   c0023488 <ATAPI::ATAPI()>
c0022820:	5a                   	pop    edx
c0022821:	59                   	pop    ecx
c0022822:	57                   	push   edi
c0022823:	53                   	push   ebx
c0022824:	e8 97 12 ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c0022829:	8b 07                	mov    eax,DWORD PTR [edi]
c002282b:	53                   	push   ebx
c002282c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022830:	6a 00                	push   0x0
c0022832:	57                   	push   edi
c0022833:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022836:	83 c4 20             	add    esp,0x20
c0022839:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002283d:	4d                   	dec    ebp
c002283e:	74 0a                	je     c002284a <IDE::detect()+0x276>
c0022840:	bd 01 00 00 00       	mov    ebp,0x1
c0022845:	e9 bb fd ff ff       	jmp    c0022605 <IDE::detect()+0x31>
c002284a:	4e                   	dec    esi
c002284b:	74 63                	je     c00228b0 <IDE::detect()+0x2dc>
c002284d:	be 01 00 00 00       	mov    esi,0x1
c0022852:	e9 ac fd ff ff       	jmp    c0022603 <IDE::detect()+0x2f>
c0022857:	50                   	push   eax
c0022858:	6a 04                	push   0x4
c002285a:	56                   	push   esi
c002285b:	53                   	push   ebx
c002285c:	e8 05 f7 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022861:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022865:	83 c4 0c             	add    esp,0xc
c0022868:	6a 05                	push   0x5
c002286a:	56                   	push   esi
c002286b:	53                   	push   ebx
c002286c:	e8 f5 f6 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022871:	83 c4 10             	add    esp,0x10
c0022874:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022878:	80 fa 14             	cmp    dl,0x14
c002287b:	75 04                	jne    c0022881 <IDE::detect()+0x2ad>
c002287d:	3c eb                	cmp    al,0xeb
c002287f:	eb 07                	jmp    c0022888 <IDE::detect()+0x2b4>
c0022881:	3c 96                	cmp    al,0x96
c0022883:	75 b8                	jne    c002283d <IDE::detect()+0x269>
c0022885:	80 fa 69             	cmp    dl,0x69
c0022888:	75 b3                	jne    c002283d <IDE::detect()+0x269>
c002288a:	68 a1 00 00 00       	push   0xa1
c002288f:	6a 07                	push   0x7
c0022891:	56                   	push   esi
c0022892:	53                   	push   ebx
c0022893:	e8 0e f6 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022898:	5f                   	pop    edi
c0022899:	58                   	pop    eax
c002289a:	6a 00                	push   0x0
c002289c:	68 40 42 0f 00       	push   0xf4240
c00228a1:	e8 24 a9 ff ff       	call   c001d1ca <nanoSleep(unsigned long long)>
c00228a6:	83 c4 10             	add    esp,0x10
c00228a9:	b1 01                	mov    cl,0x1
c00228ab:	e9 4a fe ff ff       	jmp    c00226fa <IDE::detect()+0x126>
c00228b0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00228b6:	5b                   	pop    ebx
c00228b7:	5e                   	pop    esi
c00228b8:	5f                   	pop    edi
c00228b9:	5d                   	pop    ebp
c00228ba:	c3                   	ret    
c00228bb:	90                   	nop

c00228bc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00228bc:	55                   	push   ebp
c00228bd:	57                   	push   edi
c00228be:	56                   	push   esi
c00228bf:	53                   	push   ebx
c00228c0:	83 ec 1c             	sub    esp,0x1c
c00228c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00228c7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00228cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00228cf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00228d3:	88 c3                	mov    bl,al
c00228d5:	84 c0                	test   al,al
c00228d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00228db:	0f 84 67 01 00 00    	je     c0022a48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00228e1:	83 ec 0c             	sub    esp,0xc
c00228e4:	68 7b b0 02 c0       	push   0xc002b07b
c00228e9:	e8 e3 fd fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00228ee:	83 c4 10             	add    esp,0x10
c00228f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228f5:	3c 01                	cmp    al,0x1
c00228f7:	75 17                	jne    c0022910 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00228f9:	83 ec 0c             	sub    esp,0xc
c00228fc:	b3 13                	mov    bl,0x13
c00228fe:	68 87 b0 02 c0       	push   0xc002b087
c0022903:	e8 c9 fd fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022908:	83 c4 10             	add    esp,0x10
c002290b:	e9 25 01 00 00       	jmp    c0022a35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022910:	3c 02                	cmp    al,0x2
c0022912:	0f 85 ef 00 00 00    	jne    c0022a07 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022918:	d1 e6                	shl    esi,1
c002291a:	09 ee                	or     esi,ebp
c002291c:	52                   	push   edx
c002291d:	89 f0                	mov    eax,esi
c002291f:	6a 01                	push   0x1
c0022921:	0f b6 f0             	movzx  esi,al
c0022924:	c1 e6 06             	shl    esi,0x6
c0022927:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002292f:	50                   	push   eax
c0022930:	57                   	push   edi
c0022931:	e8 30 f6 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022936:	83 c4 10             	add    esp,0x10
c0022939:	89 c6                	mov    esi,eax
c002293b:	a8 01                	test   al,0x1
c002293d:	74 12                	je     c0022951 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002293f:	83 ec 0c             	sub    esp,0xc
c0022942:	b3 07                	mov    bl,0x7
c0022944:	68 9c b0 02 c0       	push   0xc002b09c
c0022949:	e8 83 fd fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c002294e:	83 c4 10             	add    esp,0x10
c0022951:	f7 c6 02 00 00 00    	test   esi,0x2
c0022957:	74 12                	je     c002296b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022959:	83 ec 0c             	sub    esp,0xc
c002295c:	b3 03                	mov    bl,0x3
c002295e:	68 ba b0 02 c0       	push   0xc002b0ba
c0022963:	e8 69 fd fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022968:	83 c4 10             	add    esp,0x10
c002296b:	f7 c6 04 00 00 00    	test   esi,0x4
c0022971:	74 12                	je     c0022985 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022973:	83 ec 0c             	sub    esp,0xc
c0022976:	b3 14                	mov    bl,0x14
c0022978:	68 da b0 02 c0       	push   0xc002b0da
c002297d:	e8 4f fd fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022982:	83 c4 10             	add    esp,0x10
c0022985:	f7 c6 08 00 00 00    	test   esi,0x8
c002298b:	74 12                	je     c002299f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002298d:	83 ec 0c             	sub    esp,0xc
c0022990:	b3 03                	mov    bl,0x3
c0022992:	68 ba b0 02 c0       	push   0xc002b0ba
c0022997:	e8 35 fd fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c002299c:	83 c4 10             	add    esp,0x10
c002299f:	f7 c6 10 00 00 00    	test   esi,0x10
c00229a5:	74 12                	je     c00229b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00229a7:	83 ec 0c             	sub    esp,0xc
c00229aa:	b3 15                	mov    bl,0x15
c00229ac:	68 f2 b0 02 c0       	push   0xc002b0f2
c00229b1:	e8 1b fd fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00229b6:	83 c4 10             	add    esp,0x10
c00229b9:	f7 c6 20 00 00 00    	test   esi,0x20
c00229bf:	74 12                	je     c00229d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00229c1:	83 ec 0c             	sub    esp,0xc
c00229c4:	b3 03                	mov    bl,0x3
c00229c6:	68 ba b0 02 c0       	push   0xc002b0ba
c00229cb:	e8 01 fd fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00229d0:	83 c4 10             	add    esp,0x10
c00229d3:	f7 c6 40 00 00 00    	test   esi,0x40
c00229d9:	74 12                	je     c00229ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00229db:	83 ec 0c             	sub    esp,0xc
c00229de:	b3 16                	mov    bl,0x16
c00229e0:	68 0c b1 02 c0       	push   0xc002b10c
c00229e5:	e8 e7 fc fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00229ea:	83 c4 10             	add    esp,0x10
c00229ed:	89 f0                	mov    eax,esi
c00229ef:	84 c0                	test   al,al
c00229f1:	79 42                	jns    c0022a35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229f3:	83 ec 0c             	sub    esp,0xc
c00229f6:	b3 0d                	mov    bl,0xd
c00229f8:	68 2d b1 02 c0       	push   0xc002b12d
c00229fd:	e8 cf fc fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022a02:	83 c4 10             	add    esp,0x10
c0022a05:	eb 2e                	jmp    c0022a35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022a07:	3c 03                	cmp    al,0x3
c0022a09:	75 14                	jne    c0022a1f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022a0b:	83 ec 0c             	sub    esp,0xc
c0022a0e:	b3 17                	mov    bl,0x17
c0022a10:	68 41 b1 02 c0       	push   0xc002b141
c0022a15:	e8 b7 fc fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022a1a:	83 c4 10             	add    esp,0x10
c0022a1d:	eb 16                	jmp    c0022a35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022a1f:	3c 04                	cmp    al,0x4
c0022a21:	75 12                	jne    c0022a35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022a23:	83 ec 0c             	sub    esp,0xc
c0022a26:	b3 08                	mov    bl,0x8
c0022a28:	68 57 b1 02 c0       	push   0xc002b157
c0022a2d:	e8 9f fc fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022a32:	83 c4 10             	add    esp,0x10
c0022a35:	50                   	push   eax
c0022a36:	50                   	push   eax
c0022a37:	0f b6 c3             	movzx  eax,bl
c0022a3a:	50                   	push   eax
c0022a3b:	68 6f b1 02 c0       	push   0xc002b16f
c0022a40:	e8 8c fc fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022a45:	83 c4 10             	add    esp,0x10
c0022a48:	83 c4 1c             	add    esp,0x1c
c0022a4b:	88 d8                	mov    al,bl
c0022a4d:	5b                   	pop    ebx
c0022a4e:	5e                   	pop    esi
c0022a4f:	5f                   	pop    edi
c0022a50:	5d                   	pop    ebp
c0022a51:	c3                   	ret    

c0022a52 <IDE::polling(unsigned char, unsigned int)>:
c0022a52:	57                   	push   edi
c0022a53:	56                   	push   esi
c0022a54:	53                   	push   ebx
c0022a55:	bb 04 00 00 00       	mov    ebx,0x4
c0022a5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022a5e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a63:	52                   	push   edx
c0022a64:	6a 0c                	push   0xc
c0022a66:	56                   	push   esi
c0022a67:	57                   	push   edi
c0022a68:	e8 f9 f4 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022a6d:	83 c4 10             	add    esp,0x10
c0022a70:	4b                   	dec    ebx
c0022a71:	75 f0                	jne    c0022a63 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022a73:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022a78:	50                   	push   eax
c0022a79:	6a 0c                	push   0xc
c0022a7b:	56                   	push   esi
c0022a7c:	57                   	push   edi
c0022a7d:	e8 e4 f4 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022a82:	83 c4 10             	add    esp,0x10
c0022a85:	a8 01                	test   al,0x1
c0022a87:	74 12                	je     c0022a9b <IDE::polling(unsigned char, unsigned int)+0x49>
c0022a89:	83 ec 0c             	sub    esp,0xc
c0022a8c:	68 89 b1 02 c0       	push   0xc002b189
c0022a91:	e8 3b fc fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022a96:	83 c4 10             	add    esp,0x10
c0022a99:	eb 17                	jmp    c0022ab2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022a9b:	a8 20                	test   al,0x20
c0022a9d:	75 0f                	jne    c0022aae <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022a9f:	4b                   	dec    ebx
c0022aa0:	74 10                	je     c0022ab2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022aa2:	84 c0                	test   al,al
c0022aa4:	78 d2                	js     c0022a78 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022aa6:	a8 08                	test   al,0x8
c0022aa8:	74 ce                	je     c0022a78 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022aaa:	31 c0                	xor    eax,eax
c0022aac:	eb 06                	jmp    c0022ab4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022aae:	b0 01                	mov    al,0x1
c0022ab0:	eb 02                	jmp    c0022ab4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022ab2:	b0 02                	mov    al,0x2
c0022ab4:	5b                   	pop    ebx
c0022ab5:	5e                   	pop    esi
c0022ab6:	5f                   	pop    edi
c0022ab7:	c3                   	ret    

c0022ab8 <SATABus::close(int, int, void*)>:
c0022ab8:	31 c0                	xor    eax,eax
c0022aba:	c3                   	ret    
c0022abb:	90                   	nop

c0022abc <SATABus::detect()>:
c0022abc:	c3                   	ret    
c0022abd:	90                   	nop

c0022abe <SATABus::SATABus()>:
c0022abe:	83 ec 0c             	sub    esp,0xc
c0022ac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac5:	83 ec 08             	sub    esp,0x8
c0022ac8:	68 cc b1 02 c0       	push   0xc002b1cc
c0022acd:	50                   	push   eax
c0022ace:	e8 79 13 ff ff       	call   c0013e4c <HardDiskController::HardDiskController(char const*)>
c0022ad3:	83 c4 10             	add    esp,0x10
c0022ad6:	ba 88 b2 02 c0       	mov    edx,0xc002b288
c0022adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022adf:	89 10                	mov    DWORD PTR [eax],edx
c0022ae1:	83 ec 0c             	sub    esp,0xc
c0022ae4:	6a 50                	push   0x50
c0022ae6:	e8 5b d0 fe ff       	call   c000fb46 <Phys::allocateContiguousPages(int)>
c0022aeb:	83 c4 10             	add    esp,0x10
c0022aee:	89 c2                	mov    edx,eax
c0022af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022afa:	83 ec 0c             	sub    esp,0xc
c0022afd:	6a 50                	push   0x50
c0022aff:	e8 dd eb fe ff       	call   c00116e1 <Virt::allocateKernelVirtualPages(int)>
c0022b04:	83 c4 10             	add    esp,0x10
c0022b07:	89 c2                	mov    edx,eax
c0022b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b0d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022b13:	e8 59 ed fe ff       	call   c0011871 <Virt::getAKernelVAS()>
c0022b18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022b1c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022b22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022b26:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022b2c:	83 ec 0c             	sub    esp,0xc
c0022b2f:	6a 03                	push   0x3
c0022b31:	6a 50                	push   0x50
c0022b33:	51                   	push   ecx
c0022b34:	52                   	push   edx
c0022b35:	50                   	push   eax
c0022b36:	e8 65 f5 fe ff       	call   c00120a0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022b3b:	83 c4 20             	add    esp,0x20
c0022b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b42:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b4c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022b52:	83 ec 04             	sub    esp,0x4
c0022b55:	52                   	push   edx
c0022b56:	50                   	push   eax
c0022b57:	68 f0 b1 02 c0       	push   0xc002b1f0
c0022b5c:	e8 70 fb fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022b61:	83 c4 10             	add    esp,0x10
c0022b64:	90                   	nop
c0022b65:	83 c4 0c             	add    esp,0xc
c0022b68:	c3                   	ret    
c0022b69:	90                   	nop

c0022b6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022b6a:	83 ec 0c             	sub    esp,0xc
c0022b6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b71:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022b74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022b77:	09 c2                	or     edx,eax
c0022b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022b83:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022b85:	31 c0                	xor    eax,eax
c0022b87:	c1 e9 08             	shr    ecx,0x8
c0022b8a:	83 e1 0f             	and    ecx,0xf
c0022b8d:	39 c8                	cmp    eax,ecx
c0022b8f:	74 0a                	je     c0022b9b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022b91:	f6 c2 01             	test   dl,0x1
c0022b94:	74 18                	je     c0022bae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022b96:	d1 ea                	shr    edx,1
c0022b98:	40                   	inc    eax
c0022b99:	eb f2                	jmp    c0022b8d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022b9b:	83 ec 0c             	sub    esp,0xc
c0022b9e:	68 14 b2 02 c0       	push   0xc002b214
c0022ba3:	e8 43 6c ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0022ba8:	83 c4 10             	add    esp,0x10
c0022bab:	83 c8 ff             	or     eax,0xffffffff
c0022bae:	83 c4 0c             	add    esp,0xc
c0022bb1:	c3                   	ret    

c0022bb2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022bb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022bb6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022bb9:	89 c2                	mov    edx,eax
c0022bbb:	c1 ea 08             	shr    edx,0x8
c0022bbe:	83 e2 0f             	and    edx,0xf
c0022bc1:	fe ca                	dec    dl
c0022bc3:	75 31                	jne    c0022bf6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022bc5:	83 e0 0f             	and    eax,0xf
c0022bc8:	3c 03                	cmp    al,0x3
c0022bca:	75 2a                	jne    c0022bf6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022bcc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022bcf:	b8 02 00 00 00       	mov    eax,0x2
c0022bd4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022bda:	74 1c                	je     c0022bf8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022bdc:	b8 04 00 00 00       	mov    eax,0x4
c0022be1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022be7:	74 0f                	je     c0022bf8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022be9:	31 c0                	xor    eax,eax
c0022beb:	83 fa 03             	cmp    edx,0x3
c0022bee:	0f 94 c0             	sete   al
c0022bf1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022bf5:	c3                   	ret    
c0022bf6:	31 c0                	xor    eax,eax
c0022bf8:	c3                   	ret    
c0022bf9:	90                   	nop

c0022bfa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022bfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022bfe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c01:	0f ba e2 0f          	bt     edx,0xf
c0022c05:	72 f7                	jb     c0022bfe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022c07:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c0a:	83 ca 10             	or     edx,0x10
c0022c0d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022c10:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c13:	83 ca 01             	or     edx,0x1
c0022c16:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022c19:	c3                   	ret    

c0022c1a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022c1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c1e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c21:	83 e2 fe             	and    edx,0xfffffffe
c0022c24:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022c27:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c2a:	83 e2 ef             	and    edx,0xffffffef
c0022c2d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022c30:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c33:	0f ba e2 0e          	bt     edx,0xe
c0022c37:	72 f7                	jb     c0022c30 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022c39:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c3c:	0f ba e2 0f          	bt     edx,0xf
c0022c40:	72 ee                	jb     c0022c30 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022c42:	c3                   	ret    
c0022c43:	90                   	nop

c0022c44 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022c44:	55                   	push   ebp
c0022c45:	57                   	push   edi
c0022c46:	56                   	push   esi
c0022c47:	53                   	push   ebx
c0022c48:	83 ec 1c             	sub    esp,0x1c
c0022c4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022c4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c53:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022c57:	53                   	push   ebx
c0022c58:	89 fd                	mov    ebp,edi
c0022c5a:	56                   	push   esi
c0022c5b:	c1 e5 0a             	shl    ebp,0xa
c0022c5e:	e8 b7 ff ff ff       	call   c0022c1a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022c63:	83 ec 0c             	sub    esp,0xc
c0022c66:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022c6c:	01 e8                	add    eax,ebp
c0022c6e:	89 03                	mov    DWORD PTR [ebx],eax
c0022c70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c72:	68 00 04 00 00       	push   0x400
c0022c77:	6a 00                	push   0x0
c0022c79:	50                   	push   eax
c0022c7a:	e8 0c da fd ff       	call   c000068b <memset>
c0022c7f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022c85:	89 fa                	mov    edx,edi
c0022c87:	01 e8                	add    eax,ebp
c0022c89:	c1 e7 0d             	shl    edi,0xd
c0022c8c:	89 03                	mov    DWORD PTR [ebx],eax
c0022c8e:	c1 e2 08             	shl    edx,0x8
c0022c91:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022c98:	81 c2 00 80 00 00    	add    edx,0x8000
c0022c9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022ca2:	89 d0                	mov    eax,edx
c0022ca4:	83 c4 1c             	add    esp,0x1c
c0022ca7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022cad:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022cb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022cb3:	68 00 01 00 00       	push   0x100
c0022cb8:	6a 00                	push   0x0
c0022cba:	50                   	push   eax
c0022cbb:	e8 cb d9 fd ff       	call   c000068b <memset>
c0022cc0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022cc4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022cca:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022cd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022cd4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022cd7:	83 c4 10             	add    esp,0x10
c0022cda:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022ce1:	31 ff                	xor    edi,edi
c0022ce3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022ce9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cf3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022cf9:	83 c5 20             	add    ebp,0x20
c0022cfc:	01 f8                	add    eax,edi
c0022cfe:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022d01:	52                   	push   edx
c0022d02:	68 00 01 00 00       	push   0x100
c0022d07:	6a 00                	push   0x0
c0022d09:	50                   	push   eax
c0022d0a:	e8 7c d9 fd ff       	call   c000068b <memset>
c0022d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d13:	83 c4 10             	add    esp,0x10
c0022d16:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022d1c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022d23:	01 f8                	add    eax,edi
c0022d25:	81 c7 00 01 00 00    	add    edi,0x100
c0022d2b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022d2e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022d34:	75 b3                	jne    c0022ce9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022d36:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022d3a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022d3e:	83 c4 1c             	add    esp,0x1c
c0022d41:	5b                   	pop    ebx
c0022d42:	5e                   	pop    esi
c0022d43:	5f                   	pop    edi
c0022d44:	5d                   	pop    ebp
c0022d45:	e9 b0 fe ff ff       	jmp    c0022bfa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022d4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022d4a:	55                   	push   ebp
c0022d4b:	57                   	push   edi
c0022d4c:	56                   	push   esi
c0022d4d:	53                   	push   ebx
c0022d4e:	31 db                	xor    ebx,ebx
c0022d50:	83 ec 0c             	sub    esp,0xc
c0022d53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022d57:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022d5b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022d5e:	f7 c7 01 00 00 00    	test   edi,0x1
c0022d64:	0f 84 94 00 00 00    	je     c0022dfe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022d6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022d6e:	89 d8                	mov    eax,ebx
c0022d70:	c1 e0 07             	shl    eax,0x7
c0022d73:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022d7a:	55                   	push   ebp
c0022d7b:	56                   	push   esi
c0022d7c:	e8 31 fe ff ff       	call   c0022bb2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022d81:	59                   	pop    ecx
c0022d82:	83 f8 01             	cmp    eax,0x1
c0022d85:	5a                   	pop    edx
c0022d86:	75 47                	jne    c0022dcf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022d88:	51                   	push   ecx
c0022d89:	51                   	push   ecx
c0022d8a:	53                   	push   ebx
c0022d8b:	68 39 b2 02 c0       	push   0xc002b239
c0022d90:	e8 3c f9 fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022d95:	83 c4 0c             	add    esp,0xc
c0022d98:	53                   	push   ebx
c0022d99:	55                   	push   ebp
c0022d9a:	56                   	push   esi
c0022d9b:	e8 a4 fe ff ff       	call   c0022c44 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022da0:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022da7:	e8 28 c7 fe ff       	call   c000f4d4 <malloc>
c0022dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0022daf:	89 c5                	mov    ebp,eax
c0022db1:	e8 de 0c 00 00       	call   c0023a94 <SATA::SATA()>
c0022db6:	58                   	pop    eax
c0022db7:	5a                   	pop    edx
c0022db8:	55                   	push   ebp
c0022db9:	56                   	push   esi
c0022dba:	e8 01 0d ff ff       	call   c0013ac0 <Device::addChild(Device*)>
c0022dbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022dc2:	56                   	push   esi
c0022dc3:	6a 00                	push   0x0
c0022dc5:	53                   	push   ebx
c0022dc6:	55                   	push   ebp
c0022dc7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022dca:	83 c4 20             	add    esp,0x20
c0022dcd:	eb 2f                	jmp    c0022dfe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022dcf:	83 f8 04             	cmp    eax,0x4
c0022dd2:	75 1a                	jne    c0022dee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022dd4:	52                   	push   edx
c0022dd5:	52                   	push   edx
c0022dd6:	53                   	push   ebx
c0022dd7:	68 50 b2 02 c0       	push   0xc002b250
c0022ddc:	e8 f0 f8 fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022de1:	83 c4 0c             	add    esp,0xc
c0022de4:	53                   	push   ebx
c0022de5:	55                   	push   ebp
c0022de6:	56                   	push   esi
c0022de7:	e8 58 fe ff ff       	call   c0022c44 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022dec:	eb 0d                	jmp    c0022dfb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022dee:	50                   	push   eax
c0022def:	50                   	push   eax
c0022df0:	53                   	push   ebx
c0022df1:	68 69 b2 02 c0       	push   0xc002b269
c0022df6:	e8 d6 f8 fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0022dfb:	83 c4 10             	add    esp,0x10
c0022dfe:	d1 ef                	shr    edi,1
c0022e00:	43                   	inc    ebx
c0022e01:	83 fb 20             	cmp    ebx,0x20
c0022e04:	0f 85 54 ff ff ff    	jne    c0022d5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022e0a:	83 c4 0c             	add    esp,0xc
c0022e0d:	5b                   	pop    ebx
c0022e0e:	5e                   	pop    esi
c0022e0f:	5f                   	pop    edi
c0022e10:	5d                   	pop    ebp
c0022e11:	c3                   	ret    

c0022e12 <SATABus::open(int, int, void*)>:
c0022e12:	83 ec 14             	sub    esp,0x14
c0022e15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e19:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022e1f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022e25:	52                   	push   edx
c0022e26:	50                   	push   eax
c0022e27:	e8 1e ff ff ff       	call   c0022d4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022e2c:	31 c0                	xor    eax,eax
c0022e2e:	83 c4 1c             	add    esp,0x1c
c0022e31:	c3                   	ret    

c0022e32 <ATA::close(int, int, void*)>:
c0022e32:	83 ec 0c             	sub    esp,0xc
c0022e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022e3f:	85 c0                	test   eax,eax
c0022e41:	74 0c                	je     c0022e4f <ATA::close(int, int, void*)+0x1d>
c0022e43:	83 ec 0c             	sub    esp,0xc
c0022e46:	8b 10                	mov    edx,DWORD PTR [eax]
c0022e48:	50                   	push   eax
c0022e49:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022e4c:	83 c4 10             	add    esp,0x10
c0022e4f:	31 c0                	xor    eax,eax
c0022e51:	83 c4 0c             	add    esp,0xc
c0022e54:	c3                   	ret    
c0022e55:	90                   	nop

c0022e56 <ATA::powerSaving(PowerSavingLevel)>:
c0022e56:	c3                   	ret    
c0022e57:	90                   	nop

c0022e58 <ATA::ATA()>:
c0022e58:	83 ec 0c             	sub    esp,0xc
c0022e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e5f:	83 ec 04             	sub    esp,0x4
c0022e62:	68 00 02 00 00       	push   0x200
c0022e67:	68 7c b3 02 c0       	push   0xc002b37c
c0022e6c:	50                   	push   eax
c0022e6d:	e8 5e 10 ff ff       	call   c0013ed0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022e72:	83 c4 10             	add    esp,0x10
c0022e75:	ba c8 b2 02 c0       	mov    edx,0xc002b2c8
c0022e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e7e:	89 10                	mov    DWORD PTR [eax],edx
c0022e80:	90                   	nop
c0022e81:	83 c4 0c             	add    esp,0xc
c0022e84:	c3                   	ret    
c0022e85:	90                   	nop

c0022e86 <ATA::flush(bool)>:
c0022e86:	53                   	push   ebx
c0022e87:	83 ec 08             	sub    esp,0x8
c0022e8a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022e8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022e93:	19 c0                	sbb    eax,eax
c0022e95:	83 e0 fd             	and    eax,0xfffffffd
c0022e98:	05 ea 00 00 00       	add    eax,0xea
c0022e9d:	50                   	push   eax
c0022e9e:	6a 07                	push   0x7
c0022ea0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022ea7:	50                   	push   eax
c0022ea8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022eae:	e8 f3 ef ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022eb3:	83 c4 0c             	add    esp,0xc
c0022eb6:	6a 00                	push   0x0
c0022eb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022ebf:	50                   	push   eax
c0022ec0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022ec6:	e8 87 fb ff ff       	call   c0022a52 <IDE::polling(unsigned char, unsigned int)>
c0022ecb:	83 c4 18             	add    esp,0x18
c0022ece:	5b                   	pop    ebx
c0022ecf:	c3                   	ret    

c0022ed0 <ATA::readyForCommand()>:
c0022ed0:	56                   	push   esi
c0022ed1:	53                   	push   ebx
c0022ed2:	31 db                	xor    ebx,ebx
c0022ed4:	50                   	push   eax
c0022ed5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ed9:	50                   	push   eax
c0022eda:	6a 0c                	push   0xc
c0022edc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022ee3:	50                   	push   eax
c0022ee4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022eea:	e8 77 f0 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c0022eef:	83 c4 10             	add    esp,0x10
c0022ef2:	a8 88                	test   al,0x88
c0022ef4:	74 23                	je     c0022f19 <ATA::readyForCommand()+0x49>
c0022ef6:	43                   	inc    ebx
c0022ef7:	83 fb 63             	cmp    ebx,0x63
c0022efa:	7e dd                	jle    c0022ed9 <ATA::readyForCommand()+0x9>
c0022efc:	51                   	push   ecx
c0022efd:	51                   	push   ecx
c0022efe:	6a 00                	push   0x0
c0022f00:	68 40 42 0f 00       	push   0xf4240
c0022f05:	e8 c0 a2 ff ff       	call   c001d1ca <nanoSleep(unsigned long long)>
c0022f0a:	83 c4 10             	add    esp,0x10
c0022f0d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022f13:	75 c4                	jne    c0022ed9 <ATA::readyForCommand()+0x9>
c0022f15:	31 c0                	xor    eax,eax
c0022f17:	eb 02                	jmp    c0022f1b <ATA::readyForCommand()+0x4b>
c0022f19:	b0 01                	mov    al,0x1
c0022f1b:	5a                   	pop    edx
c0022f1c:	5b                   	pop    ebx
c0022f1d:	5e                   	pop    esi
c0022f1e:	c3                   	ret    
c0022f1f:	90                   	nop

c0022f20 <ATA::access(unsigned long long, int, void*, bool)>:
c0022f20:	55                   	push   ebp
c0022f21:	57                   	push   edi
c0022f22:	56                   	push   esi
c0022f23:	53                   	push   ebx
c0022f24:	83 ec 2c             	sub    esp,0x2c
c0022f27:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022f2b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022f2f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022f33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022f37:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022f3b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022f3f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022f43:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022f49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022f4d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022f53:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022f57:	c1 e0 06             	shl    eax,0x6
c0022f5a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0022f62:	74 5d                	je     c0022fc1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0022f64:	89 fa                	mov    edx,edi
c0022f66:	89 f0                	mov    eax,esi
c0022f68:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0022f6c:	c1 ea 1c             	shr    edx,0x1c
c0022f6f:	89 d1                	mov    ecx,edx
c0022f71:	09 c1                	or     ecx,eax
c0022f73:	74 25                	je     c0022f9a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0022f75:	31 ed                	xor    ebp,ebp
c0022f77:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0022f7e:	89 fa                	mov    edx,edi
c0022f80:	89 f0                	mov    eax,esi
c0022f82:	0f ad d0             	shrd   eax,edx,cl
c0022f85:	d3 ea                	shr    edx,cl
c0022f87:	f6 c1 20             	test   cl,0x20
c0022f8a:	74 02                	je     c0022f8e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0022f8c:	89 d0                	mov    eax,edx
c0022f8e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0022f92:	45                   	inc    ebp
c0022f93:	83 fd 06             	cmp    ebp,0x6
c0022f96:	75 df                	jne    c0022f77 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0022f98:	eb 76                	jmp    c0023010 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0022f9a:	89 f0                	mov    eax,esi
c0022f9c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0022fa1:	89 fa                	mov    edx,edi
c0022fa3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022faa:	0f ac d0 10          	shrd   eax,edx,0x10
c0022fae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022fb3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022fb7:	c1 ee 18             	shr    esi,0x18
c0022fba:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0022fbf:	eb 56                	jmp    c0023017 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022fc1:	6a 00                	push   0x0
c0022fc3:	6a 3f                	push   0x3f
c0022fc5:	57                   	push   edi
c0022fc6:	56                   	push   esi
c0022fc7:	e8 30 24 00 00       	call   c00253fc <__umoddi3>
c0022fcc:	83 c4 10             	add    esp,0x10
c0022fcf:	40                   	inc    eax
c0022fd0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0022fd4:	6a 00                	push   0x0
c0022fd6:	68 f0 03 00 00       	push   0x3f0
c0022fdb:	57                   	push   edi
c0022fdc:	56                   	push   esi
c0022fdd:	e8 1a 23 00 00       	call   c00252fc <__udivdi3>
c0022fe2:	83 c4 10             	add    esp,0x10
c0022fe5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022fea:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022ff1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022ff6:	6a 00                	push   0x0
c0022ff8:	6a 3f                	push   0x3f
c0022ffa:	57                   	push   edi
c0022ffb:	56                   	push   esi
c0022ffc:	e8 fb 22 00 00       	call   c00252fc <__udivdi3>
c0023001:	83 c4 10             	add    esp,0x10
c0023004:	89 c6                	mov    esi,eax
c0023006:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002300b:	83 e6 0f             	and    esi,0xf
c002300e:	eb 07                	jmp    c0023017 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023010:	31 f6                	xor    esi,esi
c0023012:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023017:	bf 01 00 00 00       	mov    edi,0x1
c002301c:	50                   	push   eax
c002301d:	6a 00                	push   0x0
c002301f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023026:	50                   	push   eax
c0023027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002302b:	e8 82 f0 ff ff       	call   c00220b2 <IDE::enableIRQs(unsigned char, bool)>
c0023030:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023033:	e8 98 fe ff ff       	call   c0022ed0 <ATA::readyForCommand()>
c0023038:	83 c4 10             	add    esp,0x10
c002303b:	84 c0                	test   al,al
c002303d:	0f 84 50 02 00 00    	je     c0023293 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023043:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023049:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002304f:	c1 e0 04             	shl    eax,0x4
c0023052:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023059:	09 c6                	or     esi,eax
c002305b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023060:	75 05                	jne    c0023067 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023062:	83 ce a0             	or     esi,0xffffffa0
c0023065:	eb 03                	jmp    c002306a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023067:	83 ce e0             	or     esi,0xffffffe0
c002306a:	89 f0                	mov    eax,esi
c002306c:	0f b6 f0             	movzx  esi,al
c002306f:	56                   	push   esi
c0023070:	6a 06                	push   0x6
c0023072:	51                   	push   ecx
c0023073:	52                   	push   edx
c0023074:	e8 2d ee ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023079:	83 c4 10             	add    esp,0x10
c002307c:	6a 00                	push   0x0
c002307e:	6a 01                	push   0x1
c0023080:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023087:	50                   	push   eax
c0023088:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002308e:	e8 13 ee ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023093:	83 c4 10             	add    esp,0x10
c0023096:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002309b:	75 6e                	jne    c002310b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002309d:	6a 00                	push   0x0
c002309f:	6a 08                	push   0x8
c00230a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230a8:	50                   	push   eax
c00230a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00230af:	e8 f2 ed ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230b4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00230b9:	50                   	push   eax
c00230ba:	6a 09                	push   0x9
c00230bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230c3:	50                   	push   eax
c00230c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00230ca:	e8 d7 ed ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230cf:	83 c4 20             	add    esp,0x20
c00230d2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00230d7:	50                   	push   eax
c00230d8:	6a 0a                	push   0xa
c00230da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230e1:	50                   	push   eax
c00230e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00230e8:	e8 b9 ed ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230ed:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00230f2:	50                   	push   eax
c00230f3:	6a 0b                	push   0xb
c00230f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230fc:	50                   	push   eax
c00230fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023103:	e8 9e ed ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023108:	83 c4 20             	add    esp,0x20
c002310b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023110:	50                   	push   eax
c0023111:	6a 02                	push   0x2
c0023113:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002311a:	50                   	push   eax
c002311b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023121:	e8 80 ed ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023126:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002312b:	50                   	push   eax
c002312c:	6a 03                	push   0x3
c002312e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023135:	50                   	push   eax
c0023136:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002313c:	e8 65 ed ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023141:	83 c4 20             	add    esp,0x20
c0023144:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023149:	50                   	push   eax
c002314a:	6a 04                	push   0x4
c002314c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023153:	50                   	push   eax
c0023154:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002315a:	e8 47 ed ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002315f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023164:	50                   	push   eax
c0023165:	6a 05                	push   0x5
c0023167:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002316e:	50                   	push   eax
c002316f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023175:	e8 2c ed ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002317a:	83 c4 20             	add    esp,0x20
c002317d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023182:	0f 94 c0             	sete   al
c0023185:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002318a:	74 09                	je     c0023195 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002318c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023193:	eb 07                	jmp    c002319c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023195:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002319c:	0f b6 c0             	movzx  eax,al
c002319f:	50                   	push   eax
c00231a0:	6a 07                	push   0x7
c00231a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231a9:	50                   	push   eax
c00231aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231b0:	e8 f1 ec ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231b5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00231b9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00231bd:	83 c4 10             	add    esp,0x10
c00231c0:	85 f6                	test   esi,esi
c00231c2:	0f 84 ac 00 00 00    	je     c0023274 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c00231c8:	50                   	push   eax
c00231c9:	6a 01                	push   0x1
c00231cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231d2:	50                   	push   eax
c00231d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231d9:	e8 74 f8 ff ff       	call   c0022a52 <IDE::polling(unsigned char, unsigned int)>
c00231de:	83 c4 10             	add    esp,0x10
c00231e1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00231e7:	84 c0                	test   al,al
c00231e9:	74 20                	je     c002320b <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00231eb:	0f b6 f8             	movzx  edi,al
c00231ee:	0f b6 d2             	movzx  edx,dl
c00231f1:	57                   	push   edi
c00231f2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00231f9:	50                   	push   eax
c00231fa:	52                   	push   edx
c00231fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023201:	e8 b6 f6 ff ff       	call   c00228bc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023206:	e9 85 00 00 00       	jmp    c0023290 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c002320b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023210:	74 41                	je     c0023253 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0023212:	31 c9                	xor    ecx,ecx
c0023214:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0023218:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002321c:	50                   	push   eax
c002321d:	50                   	push   eax
c002321e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023225:	50                   	push   eax
c0023226:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002322c:	e8 63 ec ff ff       	call   c0021e94 <IDE::getBase(unsigned char)>
c0023231:	89 c2                	mov    edx,eax
c0023233:	89 e8                	mov    eax,ebp
c0023235:	66 ef                	out    dx,ax
c0023237:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002323b:	83 c4 10             	add    esp,0x10
c002323e:	41                   	inc    ecx
c002323f:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023245:	75 cd                	jne    c0023214 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0023247:	4e                   	dec    esi
c0023248:	81 c7 00 02 00 00    	add    edi,0x200
c002324e:	e9 6d ff ff ff       	jmp    c00231c0 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023253:	0f b6 d2             	movzx  edx,dl
c0023256:	51                   	push   ecx
c0023257:	51                   	push   ecx
c0023258:	52                   	push   edx
c0023259:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002325f:	e8 30 ec ff ff       	call   c0021e94 <IDE::getBase(unsigned char)>
c0023264:	b9 00 01 00 00       	mov    ecx,0x100
c0023269:	89 c2                	mov    edx,eax
c002326b:	fc                   	cld    
c002326c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002326f:	83 c4 10             	add    esp,0x10
c0023272:	eb d3                	jmp    c0023247 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023274:	31 ff                	xor    edi,edi
c0023276:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002327b:	74 16                	je     c0023293 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002327d:	50                   	push   eax
c002327e:	50                   	push   eax
c002327f:	31 c0                	xor    eax,eax
c0023281:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023286:	0f 94 c0             	sete   al
c0023289:	50                   	push   eax
c002328a:	53                   	push   ebx
c002328b:	e8 f6 fb ff ff       	call   c0022e86 <ATA::flush(bool)>
c0023290:	83 c4 10             	add    esp,0x10
c0023293:	83 c4 2c             	add    esp,0x2c
c0023296:	89 f8                	mov    eax,edi
c0023298:	5b                   	pop    ebx
c0023299:	5e                   	pop    esi
c002329a:	5f                   	pop    edi
c002329b:	5d                   	pop    ebp
c002329c:	c3                   	ret    
c002329d:	90                   	nop

c002329e <ATA::read(unsigned long long, int, void*)>:
c002329e:	57                   	push   edi
c002329f:	b8 04 00 00 00       	mov    eax,0x4
c00232a4:	56                   	push   esi
c00232a5:	53                   	push   ebx
c00232a6:	83 ec 10             	sub    esp,0x10
c00232a9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00232ad:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00232b1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00232b4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00232b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00232bc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00232c2:	77 3b                	ja     c00232ff <ATA::read(unsigned long long, int, void*)+0x61>
c00232c4:	b8 06 00 00 00       	mov    eax,0x6
c00232c9:	85 d2                	test   edx,edx
c00232cb:	74 32                	je     c00232ff <ATA::read(unsigned long long, int, void*)+0x61>
c00232cd:	50                   	push   eax
c00232ce:	50                   	push   eax
c00232cf:	6a 00                	push   0x0
c00232d1:	52                   	push   edx
c00232d2:	53                   	push   ebx
c00232d3:	57                   	push   edi
c00232d4:	56                   	push   esi
c00232d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00232d9:	e8 42 fc ff ff       	call   c0022f20 <ATA::access(unsigned long long, int, void*, bool)>
c00232de:	83 c4 20             	add    esp,0x20
c00232e1:	85 c0                	test   eax,eax
c00232e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00232e7:	75 11                	jne    c00232fa <ATA::read(unsigned long long, int, void*)+0x5c>
c00232e9:	01 1d c8 eb 02 c0    	add    DWORD PTR ds:0xc002ebc8,ebx
c00232ef:	e8 20 d2 fe ff       	call   c0010514 <VgaText::updateDiskUsage()>
c00232f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232f8:	eb 05                	jmp    c00232ff <ATA::read(unsigned long long, int, void*)+0x61>
c00232fa:	b8 01 00 00 00       	mov    eax,0x1
c00232ff:	83 c4 10             	add    esp,0x10
c0023302:	5b                   	pop    ebx
c0023303:	5e                   	pop    esi
c0023304:	5f                   	pop    edi
c0023305:	c3                   	ret    

c0023306 <ATA::write(unsigned long long, int, void*)>:
c0023306:	57                   	push   edi
c0023307:	b8 04 00 00 00       	mov    eax,0x4
c002330c:	56                   	push   esi
c002330d:	53                   	push   ebx
c002330e:	83 ec 10             	sub    esp,0x10
c0023311:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023315:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023319:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002331c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023320:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023324:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002332a:	77 3b                	ja     c0023367 <ATA::write(unsigned long long, int, void*)+0x61>
c002332c:	b8 06 00 00 00       	mov    eax,0x6
c0023331:	85 d2                	test   edx,edx
c0023333:	74 32                	je     c0023367 <ATA::write(unsigned long long, int, void*)+0x61>
c0023335:	50                   	push   eax
c0023336:	50                   	push   eax
c0023337:	6a 01                	push   0x1
c0023339:	52                   	push   edx
c002333a:	53                   	push   ebx
c002333b:	57                   	push   edi
c002333c:	56                   	push   esi
c002333d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023341:	e8 da fb ff ff       	call   c0022f20 <ATA::access(unsigned long long, int, void*, bool)>
c0023346:	83 c4 20             	add    esp,0x20
c0023349:	85 c0                	test   eax,eax
c002334b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002334f:	75 11                	jne    c0023362 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023351:	01 1d c4 eb 02 c0    	add    DWORD PTR ds:0xc002ebc4,ebx
c0023357:	e8 b8 d1 fe ff       	call   c0010514 <VgaText::updateDiskUsage()>
c002335c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023360:	eb 05                	jmp    c0023367 <ATA::write(unsigned long long, int, void*)+0x61>
c0023362:	b8 01 00 00 00       	mov    eax,0x1
c0023367:	83 c4 10             	add    esp,0x10
c002336a:	5b                   	pop    ebx
c002336b:	5e                   	pop    esi
c002336c:	5f                   	pop    edi
c002336d:	c3                   	ret    

c002336e <ATA::detectCHS()>:
c002336e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023372:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023378:	c1 e0 06             	shl    eax,0x6
c002337b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023381:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002338b:	c7 44 24 04 ac b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2ac
c0023393:	e9 53 64 ff ff       	jmp    c00197eb <Krnl::panic(char const*)>

c0023398 <ATA::open(int, int, void*)>:
c0023398:	53                   	push   ebx
c0023399:	83 ec 08             	sub    esp,0x8
c002339c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00233a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00233a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233a8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00233ae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00233b4:	c1 e0 06             	shl    eax,0x6
c00233b7:	01 d0                	add    eax,edx
c00233b9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00233c0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00233c6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00233cd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00233d7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00233dd:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00233e4:	75 0c                	jne    c00233f2 <ATA::open(int, int, void*)+0x5a>
c00233e6:	83 ec 0c             	sub    esp,0xc
c00233e9:	53                   	push   ebx
c00233ea:	e8 7f ff ff ff       	call   c002336e <ATA::detectCHS()>
c00233ef:	83 c4 10             	add    esp,0x10
c00233f2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00233f8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00233fe:	c1 e0 06             	shl    eax,0x6
c0023401:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023408:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023412:	d1 e8                	shr    eax,1
c0023414:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002341a:	6a 04                	push   0x4
c002341c:	6a 0c                	push   0xc
c002341e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023425:	50                   	push   eax
c0023426:	52                   	push   edx
c0023427:	e8 7a ea ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002342c:	90                   	nop
c002342d:	90                   	nop
c002342e:	6a 00                	push   0x0
c0023430:	6a 0c                	push   0xc
c0023432:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023439:	50                   	push   eax
c002343a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023440:	e8 61 ea ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023445:	83 c4 14             	add    esp,0x14
c0023448:	53                   	push   ebx
c0023449:	e8 ea 0a ff ff       	call   c0013f38 <PhysicalDisk::startCache()>
c002344e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023451:	e8 0c 2b ff ff       	call   c0015f62 <createPartitionsForDisk(PhysicalDisk*)>
c0023456:	31 c0                	xor    eax,eax
c0023458:	83 c4 18             	add    esp,0x18
c002345b:	5b                   	pop    ebx
c002345c:	c3                   	ret    
c002345d:	90                   	nop

c002345e <ATAPI::write(unsigned long long, int, void*)>:
c002345e:	b8 03 00 00 00       	mov    eax,0x3
c0023463:	c3                   	ret    

c0023464 <ATAPI::close(int, int, void*)>:
c0023464:	83 ec 0c             	sub    esp,0xc
c0023467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002346b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023471:	85 c0                	test   eax,eax
c0023473:	74 0c                	je     c0023481 <ATAPI::close(int, int, void*)+0x1d>
c0023475:	83 ec 0c             	sub    esp,0xc
c0023478:	8b 10                	mov    edx,DWORD PTR [eax]
c002347a:	50                   	push   eax
c002347b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002347e:	83 c4 10             	add    esp,0x10
c0023481:	31 c0                	xor    eax,eax
c0023483:	83 c4 0c             	add    esp,0xc
c0023486:	c3                   	ret    
c0023487:	90                   	nop

c0023488 <ATAPI::ATAPI()>:
c0023488:	83 ec 0c             	sub    esp,0xc
c002348b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002348f:	83 ec 04             	sub    esp,0x4
c0023492:	68 00 08 00 00       	push   0x800
c0023497:	68 f4 b2 02 c0       	push   0xc002b2f4
c002349c:	50                   	push   eax
c002349d:	e8 2e 0a ff ff       	call   c0013ed0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00234a2:	83 c4 10             	add    esp,0x10
c00234a5:	ba 34 b3 02 c0       	mov    edx,0xc002b334
c00234aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ae:	89 10                	mov    DWORD PTR [eax],edx
c00234b0:	90                   	nop
c00234b1:	83 c4 0c             	add    esp,0xc
c00234b4:	c3                   	ret    
c00234b5:	90                   	nop

c00234b6 <ATAPI::readyForCommand()>:
c00234b6:	56                   	push   esi
c00234b7:	53                   	push   ebx
c00234b8:	31 db                	xor    ebx,ebx
c00234ba:	50                   	push   eax
c00234bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00234bf:	50                   	push   eax
c00234c0:	6a 0c                	push   0xc
c00234c2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00234c9:	50                   	push   eax
c00234ca:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00234d0:	e8 91 ea ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c00234d5:	83 c4 10             	add    esp,0x10
c00234d8:	a8 88                	test   al,0x88
c00234da:	74 23                	je     c00234ff <ATAPI::readyForCommand()+0x49>
c00234dc:	43                   	inc    ebx
c00234dd:	83 fb 63             	cmp    ebx,0x63
c00234e0:	7e dd                	jle    c00234bf <ATAPI::readyForCommand()+0x9>
c00234e2:	51                   	push   ecx
c00234e3:	51                   	push   ecx
c00234e4:	6a 00                	push   0x0
c00234e6:	68 40 42 0f 00       	push   0xf4240
c00234eb:	e8 da 9c ff ff       	call   c001d1ca <nanoSleep(unsigned long long)>
c00234f0:	83 c4 10             	add    esp,0x10
c00234f3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00234f9:	75 c4                	jne    c00234bf <ATAPI::readyForCommand()+0x9>
c00234fb:	31 c0                	xor    eax,eax
c00234fd:	eb 02                	jmp    c0023501 <ATAPI::readyForCommand()+0x4b>
c00234ff:	b0 01                	mov    al,0x1
c0023501:	5a                   	pop    edx
c0023502:	5b                   	pop    ebx
c0023503:	5e                   	pop    esi
c0023504:	c3                   	ret    
c0023505:	90                   	nop

c0023506 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023506:	55                   	push   ebp
c0023507:	57                   	push   edi
c0023508:	56                   	push   esi
c0023509:	53                   	push   ebx
c002350a:	83 ec 20             	sub    esp,0x20
c002350d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023511:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023515:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023519:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002351d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023521:	6a 01                	push   0x1
c0023523:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002352a:	50                   	push   eax
c002352b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023531:	e8 7c eb ff ff       	call   c00220b2 <IDE::enableIRQs(unsigned char, bool)>
c0023536:	5e                   	pop    esi
c0023537:	58                   	pop    eax
c0023538:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002353f:	50                   	push   eax
c0023540:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023546:	e8 35 e9 ff ff       	call   c0021e80 <IDE::prepareInterrupt(unsigned char)>
c002354b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002354e:	e8 63 ff ff ff       	call   c00234b6 <ATAPI::readyForCommand()>
c0023553:	83 c4 10             	add    esp,0x10
c0023556:	84 c0                	test   al,al
c0023558:	75 0a                	jne    c0023564 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002355a:	bb 01 00 00 00       	mov    ebx,0x1
c002355f:	e9 57 02 00 00       	jmp    c00237bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023564:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002356a:	c1 e0 04             	shl    eax,0x4
c002356d:	0f b6 c0             	movzx  eax,al
c0023570:	50                   	push   eax
c0023571:	6a 06                	push   0x6
c0023573:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002357a:	50                   	push   eax
c002357b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023581:	e8 20 e9 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023586:	6a 00                	push   0x0
c0023588:	6a 01                	push   0x1
c002358a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023591:	50                   	push   eax
c0023592:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023598:	e8 09 e9 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002359d:	83 c4 20             	add    esp,0x20
c00235a0:	0f b6 c3             	movzx  eax,bl
c00235a3:	0f b6 df             	movzx  ebx,bh
c00235a6:	50                   	push   eax
c00235a7:	6a 04                	push   0x4
c00235a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235b0:	50                   	push   eax
c00235b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235b7:	e8 ea e8 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235bc:	53                   	push   ebx
c00235bd:	6a 05                	push   0x5
c00235bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235c6:	50                   	push   eax
c00235c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235cd:	e8 d4 e8 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235d2:	83 c4 20             	add    esp,0x20
c00235d5:	68 a0 00 00 00       	push   0xa0
c00235da:	6a 07                	push   0x7
c00235dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235e3:	50                   	push   eax
c00235e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235ea:	e8 b7 e8 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235ef:	83 c4 0c             	add    esp,0xc
c00235f2:	6a 01                	push   0x1
c00235f4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235fb:	50                   	push   eax
c00235fc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023602:	e8 4b f4 ff ff       	call   c0022a52 <IDE::polling(unsigned char, unsigned int)>
c0023607:	83 c4 10             	add    esp,0x10
c002360a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023610:	84 c0                	test   al,al
c0023612:	74 23                	je     c0023637 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023614:	0f b6 d8             	movzx  ebx,al
c0023617:	0f b6 d2             	movzx  edx,dl
c002361a:	53                   	push   ebx
c002361b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023622:	50                   	push   eax
c0023623:	52                   	push   edx
c0023624:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002362a:	e8 8d f2 ff ff       	call   c00228bc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002362f:	83 c4 10             	add    esp,0x10
c0023632:	e9 84 01 00 00       	jmp    c00237bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023637:	0f b6 d2             	movzx  edx,dl
c002363a:	53                   	push   ebx
c002363b:	53                   	push   ebx
c002363c:	52                   	push   edx
c002363d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023643:	e8 4c e8 ff ff       	call   c0021e94 <IDE::getBase(unsigned char)>
c0023648:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002364c:	b9 06 00 00 00       	mov    ecx,0x6
c0023651:	89 c2                	mov    edx,eax
c0023653:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023656:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002365a:	83 c4 10             	add    esp,0x10
c002365d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023663:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002366a:	85 db                	test   ebx,ebx
c002366c:	0f 84 ec 00 00 00    	je     c002375e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023672:	51                   	push   ecx
c0023673:	51                   	push   ecx
c0023674:	52                   	push   edx
c0023675:	50                   	push   eax
c0023676:	e8 99 e9 ff ff       	call   c0022014 <IDE::waitInterrupt(unsigned char)>
c002367b:	83 c4 10             	add    esp,0x10
c002367e:	84 c0                	test   al,al
c0023680:	0f 84 d4 fe ff ff    	je     c002355a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023686:	56                   	push   esi
c0023687:	56                   	push   esi
c0023688:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002368f:	50                   	push   eax
c0023690:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023696:	e8 e5 e7 ff ff       	call   c0021e80 <IDE::prepareInterrupt(unsigned char)>
c002369b:	83 c4 0c             	add    esp,0xc
c002369e:	6a 04                	push   0x4
c00236a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236a7:	50                   	push   eax
c00236a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236ae:	e8 b3 e8 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c00236b3:	83 c4 0c             	add    esp,0xc
c00236b6:	89 c6                	mov    esi,eax
c00236b8:	6a 05                	push   0x5
c00236ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236c1:	50                   	push   eax
c00236c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236c8:	e8 99 e8 ff ff       	call   c0021f66 <IDE::read(unsigned char, unsigned char)>
c00236cd:	89 f1                	mov    ecx,esi
c00236cf:	0f b6 c0             	movzx  eax,al
c00236d2:	0f b6 f1             	movzx  esi,cl
c00236d5:	c1 e0 08             	shl    eax,0x8
c00236d8:	09 c6                	or     esi,eax
c00236da:	d1 fe                	sar    esi,1
c00236dc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00236e0:	83 c4 10             	add    esp,0x10
c00236e3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00236e8:	74 41                	je     c002372b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00236ea:	31 c9                	xor    ecx,ecx
c00236ec:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00236f2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00236f9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00236fd:	75 0a                	jne    c0023709 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00236ff:	01 c9                	add    ecx,ecx
c0023701:	01 cd                	add    ebp,ecx
c0023703:	4b                   	dec    ebx
c0023704:	e9 54 ff ff ff       	jmp    c002365d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023709:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002370e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023712:	51                   	push   ecx
c0023713:	51                   	push   ecx
c0023714:	52                   	push   edx
c0023715:	50                   	push   eax
c0023716:	e8 79 e7 ff ff       	call   c0021e94 <IDE::getBase(unsigned char)>
c002371b:	89 c2                	mov    edx,eax
c002371d:	89 f0                	mov    eax,esi
c002371f:	66 ef                	out    dx,ax
c0023721:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023725:	83 c4 10             	add    esp,0x10
c0023728:	41                   	inc    ecx
c0023729:	eb c1                	jmp    c00236ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002372b:	31 f6                	xor    esi,esi
c002372d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023733:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002373a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002373e:	75 06                	jne    c0023746 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023740:	01 f6                	add    esi,esi
c0023742:	01 f5                	add    ebp,esi
c0023744:	eb bd                	jmp    c0023703 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023746:	51                   	push   ecx
c0023747:	51                   	push   ecx
c0023748:	52                   	push   edx
c0023749:	50                   	push   eax
c002374a:	e8 45 e7 ff ff       	call   c0021e94 <IDE::getBase(unsigned char)>
c002374f:	89 c2                	mov    edx,eax
c0023751:	66 ed                	in     ax,dx
c0023753:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023758:	83 c4 10             	add    esp,0x10
c002375b:	46                   	inc    esi
c002375c:	eb cf                	jmp    c002372d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002375e:	51                   	push   ecx
c002375f:	51                   	push   ecx
c0023760:	52                   	push   edx
c0023761:	50                   	push   eax
c0023762:	e8 ad e8 ff ff       	call   c0022014 <IDE::waitInterrupt(unsigned char)>
c0023767:	83 c4 10             	add    esp,0x10
c002376a:	84 c0                	test   al,al
c002376c:	0f 84 e8 fd ff ff    	je     c002355a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023772:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023777:	52                   	push   edx
c0023778:	52                   	push   edx
c0023779:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023780:	50                   	push   eax
c0023781:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023787:	e8 f4 e6 ff ff       	call   c0021e80 <IDE::prepareInterrupt(unsigned char)>
c002378c:	83 c4 10             	add    esp,0x10
c002378f:	50                   	push   eax
c0023790:	50                   	push   eax
c0023791:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023798:	50                   	push   eax
c0023799:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002379f:	e8 f0 e6 ff ff       	call   c0021e94 <IDE::getBase(unsigned char)>
c00237a4:	8d 50 07             	lea    edx,[eax+0x7]
c00237a7:	ec                   	in     al,dx
c00237a8:	83 c4 10             	add    esp,0x10
c00237ab:	a8 88                	test   al,0x88
c00237ad:	74 0a                	je     c00237b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00237af:	4b                   	dec    ebx
c00237b0:	75 dd                	jne    c002378f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00237b2:	bb 02 00 00 00       	mov    ebx,0x2
c00237b7:	eb 02                	jmp    c00237bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00237b9:	31 db                	xor    ebx,ebx
c00237bb:	83 c4 1c             	add    esp,0x1c
c00237be:	89 d8                	mov    eax,ebx
c00237c0:	5b                   	pop    ebx
c00237c1:	5e                   	pop    esi
c00237c2:	5f                   	pop    edi
c00237c3:	5d                   	pop    ebp
c00237c4:	c3                   	ret    
c00237c5:	90                   	nop

c00237c6 <ATAPI::diskRemoved()>:
c00237c6:	83 ec 18             	sub    esp,0x18
c00237c9:	68 ff b2 02 c0       	push   0xc002b2ff
c00237ce:	e8 fe ee fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00237d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00237d7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00237de:	83 c4 1c             	add    esp,0x1c
c00237e1:	c3                   	ret    

c00237e2 <ATAPI::eject()>:
c00237e2:	57                   	push   edi
c00237e3:	b9 03 00 00 00       	mov    ecx,0x3
c00237e8:	53                   	push   ebx
c00237e9:	83 ec 14             	sub    esp,0x14
c00237ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00237f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00237f4:	fc                   	cld    
c00237f5:	31 c0                	xor    eax,eax
c00237f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00237f9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00237fe:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023803:	50                   	push   eax
c0023804:	50                   	push   eax
c0023805:	6a 00                	push   0x0
c0023807:	6a 00                	push   0x0
c0023809:	6a 00                	push   0x0
c002380b:	6a 02                	push   0x2
c002380d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023811:	50                   	push   eax
c0023812:	53                   	push   ebx
c0023813:	e8 ee fc ff ff       	call   c0023506 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023818:	83 c4 14             	add    esp,0x14
c002381b:	53                   	push   ebx
c002381c:	e8 a5 ff ff ff       	call   c00237c6 <ATAPI::diskRemoved()>
c0023821:	83 c4 24             	add    esp,0x24
c0023824:	5b                   	pop    ebx
c0023825:	5f                   	pop    edi
c0023826:	c3                   	ret    
c0023827:	90                   	nop

c0023828 <ATAPI::diskInserted()>:
c0023828:	53                   	push   ebx
c0023829:	83 ec 14             	sub    esp,0x14
c002382c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023830:	68 15 b3 02 c0       	push   0xc002b315
c0023835:	e8 97 ee fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c002383a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023841:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023844:	e8 ef 06 ff ff       	call   c0013f38 <PhysicalDisk::startCache()>
c0023849:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002384d:	83 c4 18             	add    esp,0x18
c0023850:	5b                   	pop    ebx
c0023851:	e9 0c 27 ff ff       	jmp    c0015f62 <createPartitionsForDisk(PhysicalDisk*)>

c0023856 <ATAPI::detectMedia()>:
c0023856:	56                   	push   esi
c0023857:	53                   	push   ebx
c0023858:	83 ec 28             	sub    esp,0x28
c002385b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002385f:	6a 0c                	push   0xc
c0023861:	6a 00                	push   0x0
c0023863:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023867:	56                   	push   esi
c0023868:	e8 1e ce fd ff       	call   c000068b <memset>
c002386d:	58                   	pop    eax
c002386e:	5a                   	pop    edx
c002386f:	6a 00                	push   0x0
c0023871:	6a 00                	push   0x0
c0023873:	6a 00                	push   0x0
c0023875:	6a 00                	push   0x0
c0023877:	56                   	push   esi
c0023878:	53                   	push   ebx
c0023879:	e8 88 fc ff ff       	call   c0023506 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002387e:	83 c4 1c             	add    esp,0x1c
c0023881:	6a 0c                	push   0xc
c0023883:	6a 00                	push   0x0
c0023885:	56                   	push   esi
c0023886:	e8 00 ce fd ff       	call   c000068b <memset>
c002388b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023890:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023895:	59                   	pop    ecx
c0023896:	58                   	pop    eax
c0023897:	6a 01                	push   0x1
c0023899:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002389d:	50                   	push   eax
c002389e:	6a 00                	push   0x0
c00238a0:	6a 12                	push   0x12
c00238a2:	56                   	push   esi
c00238a3:	53                   	push   ebx
c00238a4:	e8 5d fc ff ff       	call   c0023506 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00238a9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00238ad:	83 c4 20             	add    esp,0x20
c00238b0:	83 e0 7f             	and    eax,0x7f
c00238b3:	3c 70                	cmp    al,0x70
c00238b5:	74 15                	je     c00238cc <ATAPI::detectMedia()+0x76>
c00238b7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00238be:	75 0c                	jne    c00238cc <ATAPI::detectMedia()+0x76>
c00238c0:	83 ec 0c             	sub    esp,0xc
c00238c3:	53                   	push   ebx
c00238c4:	e8 5f ff ff ff       	call   c0023828 <ATAPI::diskInserted()>
c00238c9:	83 c4 10             	add    esp,0x10
c00238cc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00238d0:	83 e0 0f             	and    eax,0xf
c00238d3:	3c 02                	cmp    al,0x2
c00238d5:	75 1b                	jne    c00238f2 <ATAPI::detectMedia()+0x9c>
c00238d7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00238dc:	75 2d                	jne    c002390b <ATAPI::detectMedia()+0xb5>
c00238de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00238e5:	74 24                	je     c002390b <ATAPI::detectMedia()+0xb5>
c00238e7:	83 ec 0c             	sub    esp,0xc
c00238ea:	53                   	push   ebx
c00238eb:	e8 d6 fe ff ff       	call   c00237c6 <ATAPI::diskRemoved()>
c00238f0:	eb 16                	jmp    c0023908 <ATAPI::detectMedia()+0xb2>
c00238f2:	84 c0                	test   al,al
c00238f4:	75 15                	jne    c002390b <ATAPI::detectMedia()+0xb5>
c00238f6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00238fd:	75 0c                	jne    c002390b <ATAPI::detectMedia()+0xb5>
c00238ff:	83 ec 0c             	sub    esp,0xc
c0023902:	53                   	push   ebx
c0023903:	e8 20 ff ff ff       	call   c0023828 <ATAPI::diskInserted()>
c0023908:	83 c4 10             	add    esp,0x10
c002390b:	83 c4 24             	add    esp,0x24
c002390e:	5b                   	pop    ebx
c002390f:	5e                   	pop    esi
c0023910:	c3                   	ret    
c0023911:	90                   	nop

c0023912 <ATAPI::open(int, int, void*)>:
c0023912:	53                   	push   ebx
c0023913:	83 ec 08             	sub    esp,0x8
c0023916:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002391a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002391e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023922:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023928:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002392e:	c1 e0 06             	shl    eax,0x6
c0023931:	01 d0                	add    eax,edx
c0023933:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002393a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023940:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023947:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023951:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023957:	6a 04                	push   0x4
c0023959:	6a 0c                	push   0xc
c002395b:	51                   	push   ecx
c002395c:	52                   	push   edx
c002395d:	e8 44 e5 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023962:	90                   	nop
c0023963:	90                   	nop
c0023964:	6a 00                	push   0x0
c0023966:	6a 0c                	push   0xc
c0023968:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002396f:	50                   	push   eax
c0023970:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023976:	e8 2b e5 ff ff       	call   c0021ea6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002397b:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023982:	83 c4 14             	add    esp,0x14
c0023985:	53                   	push   ebx
c0023986:	e8 cb fe ff ff       	call   c0023856 <ATAPI::detectMedia()>
c002398b:	31 c0                	xor    eax,eax
c002398d:	83 c4 18             	add    esp,0x18
c0023990:	5b                   	pop    ebx
c0023991:	c3                   	ret    

c0023992 <ATAPI::read(unsigned long long, int, void*)>:
c0023992:	55                   	push   ebp
c0023993:	57                   	push   edi
c0023994:	56                   	push   esi
c0023995:	53                   	push   ebx
c0023996:	83 ec 1c             	sub    esp,0x1c
c0023999:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002399d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00239a1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00239a5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00239ac:	74 41                	je     c00239ef <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00239ae:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00239b2:	b9 03 00 00 00       	mov    ecx,0x3
c00239b7:	fc                   	cld    
c00239b8:	31 c0                	xor    eax,eax
c00239ba:	86 fb                	xchg   bl,bh
c00239bc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00239be:	c1 c3 10             	rol    ebx,0x10
c00239c1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00239c6:	89 e8                	mov    eax,ebp
c00239c8:	86 fb                	xchg   bl,bh
c00239ca:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00239ce:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00239d2:	50                   	push   eax
c00239d3:	50                   	push   eax
c00239d4:	55                   	push   ebp
c00239d5:	c1 e5 0b             	shl    ebp,0xb
c00239d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00239dc:	6a 00                	push   0x0
c00239de:	55                   	push   ebp
c00239df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00239e3:	50                   	push   eax
c00239e4:	56                   	push   esi
c00239e5:	e8 1c fb ff ff       	call   c0023506 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00239ea:	83 c4 20             	add    esp,0x20
c00239ed:	eb 1a                	jmp    c0023a09 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00239ef:	83 ec 0c             	sub    esp,0xc
c00239f2:	56                   	push   esi
c00239f3:	e8 5e fe ff ff       	call   c0023856 <ATAPI::detectMedia()>
c00239f8:	83 c4 10             	add    esp,0x10
c00239fb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023a02:	75 aa                	jne    c00239ae <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023a04:	b8 02 00 00 00       	mov    eax,0x2
c0023a09:	83 c4 1c             	add    esp,0x1c
c0023a0c:	5b                   	pop    ebx
c0023a0d:	5e                   	pop    esi
c0023a0e:	5f                   	pop    edi
c0023a0f:	5d                   	pop    ebp
c0023a10:	c3                   	ret    
c0023a11:	90                   	nop

c0023a12 <SATA::close(int, int, void*)>:
c0023a12:	83 ec 0c             	sub    esp,0xc
c0023a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a19:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023a1f:	85 c0                	test   eax,eax
c0023a21:	74 0c                	je     c0023a2f <SATA::close(int, int, void*)+0x1d>
c0023a23:	83 ec 0c             	sub    esp,0xc
c0023a26:	8b 10                	mov    edx,DWORD PTR [eax]
c0023a28:	50                   	push   eax
c0023a29:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023a2c:	83 c4 10             	add    esp,0x10
c0023a2f:	31 c0                	xor    eax,eax
c0023a31:	83 c4 0c             	add    esp,0xc
c0023a34:	c3                   	ret    
c0023a35:	90                   	nop

c0023a36 <SATA::powerSaving(PowerSavingLevel)>:
c0023a36:	c3                   	ret    
c0023a37:	90                   	nop

c0023a38 <SATA::open(int, int, void*)>:
c0023a38:	53                   	push   ebx
c0023a39:	83 ec 14             	sub    esp,0x14
c0023a3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023a40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023a44:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023a4e:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023a54:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023a5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023a62:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023a6c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023a72:	68 60 b3 02 c0       	push   0xc002b360
c0023a77:	e8 55 ec fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0023a7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a7f:	e8 b4 04 ff ff       	call   c0013f38 <PhysicalDisk::startCache()>
c0023a84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a87:	e8 d6 24 ff ff       	call   c0015f62 <createPartitionsForDisk(PhysicalDisk*)>
c0023a8c:	31 c0                	xor    eax,eax
c0023a8e:	83 c4 18             	add    esp,0x18
c0023a91:	5b                   	pop    ebx
c0023a92:	c3                   	ret    
c0023a93:	90                   	nop

c0023a94 <SATA::SATA()>:
c0023a94:	83 ec 0c             	sub    esp,0xc
c0023a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a9b:	83 ec 04             	sub    esp,0x4
c0023a9e:	68 00 02 00 00       	push   0x200
c0023aa3:	68 7b b3 02 c0       	push   0xc002b37b
c0023aa8:	50                   	push   eax
c0023aa9:	e8 22 04 ff ff       	call   c0013ed0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023aae:	83 c4 10             	add    esp,0x10
c0023ab1:	ba 58 b4 02 c0       	mov    edx,0xc002b458
c0023ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aba:	89 10                	mov    DWORD PTR [eax],edx
c0023abc:	90                   	nop
c0023abd:	83 c4 0c             	add    esp,0xc
c0023ac0:	c3                   	ret    
c0023ac1:	90                   	nop

c0023ac2 <SATA::access(unsigned long long, int, void*, bool)>:
c0023ac2:	55                   	push   ebp
c0023ac3:	57                   	push   edi
c0023ac4:	56                   	push   esi
c0023ac5:	53                   	push   ebx
c0023ac6:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023acc:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023ad3:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023ada:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023ae1:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023ae8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023aec:	83 ff 08             	cmp    edi,0x8
c0023aef:	7e 10                	jle    c0023b01 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023af1:	83 ec 0c             	sub    esp,0xc
c0023af4:	68 8b b3 02 c0       	push   0xc002b38b
c0023af9:	e8 ed 5c ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0023afe:	83 c4 10             	add    esp,0x10
c0023b01:	51                   	push   ecx
c0023b02:	68 00 02 00 00       	push   0x200
c0023b07:	68 ee 00 00 00       	push   0xee
c0023b0c:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023b10:	55                   	push   ebp
c0023b11:	e8 75 cb fd ff       	call   c000068b <memset>
c0023b16:	83 c4 0c             	add    esp,0xc
c0023b19:	68 00 02 00 00       	push   0x200
c0023b1e:	68 ee 00 00 00       	push   0xee
c0023b23:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023b2a:	50                   	push   eax
c0023b2b:	e8 5b cb fd ff       	call   c000068b <memset>
c0023b30:	55                   	push   ebp
c0023b31:	57                   	push   edi
c0023b32:	56                   	push   esi
c0023b33:	68 bd b3 02 c0       	push   0xc002b3bd
c0023b38:	e8 94 eb fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0023b3d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023b43:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023b49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023b4d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023b53:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023b57:	c1 e0 07             	shl    eax,0x7
c0023b5a:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023b5e:	83 c4 18             	add    esp,0x18
c0023b61:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023b6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b6f:	8d 50 02             	lea    edx,[eax+0x2]
c0023b72:	c1 e2 07             	shl    edx,0x7
c0023b75:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023b79:	52                   	push   edx
c0023b7a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023b7e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023b84:	e8 e1 ef ff ff       	call   c0022b6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023b89:	89 c1                	mov    ecx,eax
c0023b8b:	58                   	pop    eax
c0023b8c:	5a                   	pop    edx
c0023b8d:	51                   	push   ecx
c0023b8e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023b92:	68 f2 b3 02 c0       	push   0xc002b3f2
c0023b97:	e8 35 eb fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0023b9c:	83 c4 10             	add    esp,0x10
c0023b9f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023ba3:	83 f9 ff             	cmp    ecx,0xffffffff
c0023ba6:	0f 84 9a 01 00 00    	je     c0023d46 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023bac:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023bb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023bb6:	8b 12                	mov    edx,DWORD PTR [edx]
c0023bb8:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023bbe:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023bc4:	89 c8                	mov    eax,ecx
c0023bc6:	c1 e0 05             	shl    eax,0x5
c0023bc9:	01 c2                	add    edx,eax
c0023bcb:	8a 02                	mov    al,BYTE PTR [edx]
c0023bcd:	83 e0 a0             	and    eax,0xffffffa0
c0023bd0:	83 c8 05             	or     eax,0x5
c0023bd3:	88 02                	mov    BYTE PTR [edx],al
c0023bd5:	8d 47 ff             	lea    eax,[edi-0x1]
c0023bd8:	c1 f8 04             	sar    eax,0x4
c0023bdb:	40                   	inc    eax
c0023bdc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023be0:	0f b7 c0             	movzx  eax,ax
c0023be3:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023be9:	83 c0 08             	add    eax,0x8
c0023bec:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023bf2:	c1 e0 04             	shl    eax,0x4
c0023bf5:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023bfb:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023bfe:	01 cb                	add    ebx,ecx
c0023c00:	52                   	push   edx
c0023c01:	50                   	push   eax
c0023c02:	6a 00                	push   0x0
c0023c04:	53                   	push   ebx
c0023c05:	e8 81 ca fd ff       	call   c000068b <memset>
c0023c0a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023c10:	83 c4 10             	add    esp,0x10
c0023c13:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023c19:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023c1e:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023c25:	0d ff 01 00 80       	or     eax,0x800001ff
c0023c2a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023c2e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023c34:	b8 01 00 00 00       	mov    eax,0x1
c0023c39:	89 c2                	mov    edx,eax
c0023c3b:	c1 e2 04             	shl    edx,0x4
c0023c3e:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023c45:	8d 50 08             	lea    edx,[eax+0x8]
c0023c48:	40                   	inc    eax
c0023c49:	c1 e2 04             	shl    edx,0x4
c0023c4c:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023c54:	83 f8 10             	cmp    eax,0x10
c0023c57:	75 e0                	jne    c0023c39 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023c59:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023c5c:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023c60:	66 25 00 7f          	and    ax,0x7f00
c0023c64:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023c68:	66 0d 27 80          	or     ax,0x8027
c0023c6c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023c70:	66 89 03             	mov    WORD PTR [ebx],ax
c0023c73:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023c77:	89 f0                	mov    eax,esi
c0023c79:	31 d2                	xor    edx,edx
c0023c7b:	c1 e8 10             	shr    eax,0x10
c0023c7e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023c81:	89 f0                	mov    eax,esi
c0023c83:	c1 e8 18             	shr    eax,0x18
c0023c86:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023c89:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023c8d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023c90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c94:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c9b:	c1 e0 07             	shl    eax,0x7
c0023c9e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023ca2:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023ca8:	80 e3 88             	and    bl,0x88
c0023cab:	74 0b                	je     c0023cb8 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023cad:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023cb3:	74 0b                	je     c0023cc0 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023cb5:	42                   	inc    edx
c0023cb6:	eb ea                	jmp    c0023ca2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023cb8:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023cbe:	75 0a                	jne    c0023cca <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023cc0:	83 ec 0c             	sub    esp,0xc
c0023cc3:	68 fb b3 02 c0       	push   0xc002b3fb
c0023cc8:	eb 60                	jmp    c0023d2a <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023cca:	be 01 00 00 00       	mov    esi,0x1
c0023ccf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023cd3:	d3 e6                	shl    esi,cl
c0023cd5:	c1 e3 07             	shl    ebx,0x7
c0023cd8:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023cde:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023ce2:	83 ec 0c             	sub    esp,0xc
c0023ce5:	68 09 b4 02 c0       	push   0xc002b409
c0023cea:	e8 e2 e9 fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0023cef:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023cf5:	83 c4 10             	add    esp,0x10
c0023cf8:	85 c6                	test   esi,eax
c0023cfa:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023d00:	74 1a                	je     c0023d1c <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023d02:	0f ba e0 1e          	bt     eax,0x1e
c0023d06:	73 da                	jae    c0023ce2 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023d08:	83 ec 0c             	sub    esp,0xc
c0023d0b:	68 16 b4 02 c0       	push   0xc002b416
c0023d10:	e8 d6 5a ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0023d15:	83 c4 10             	add    esp,0x10
c0023d18:	31 c0                	xor    eax,eax
c0023d1a:	eb 2f                	jmp    c0023d4b <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023d1c:	0f ba e0 1e          	bt     eax,0x1e
c0023d20:	73 12                	jae    c0023d34 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023d22:	83 ec 0c             	sub    esp,0xc
c0023d25:	68 16 b4 02 c0       	push   0xc002b416
c0023d2a:	e8 bc 5a ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0023d2f:	83 c4 10             	add    esp,0x10
c0023d32:	eb 12                	jmp    c0023d46 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023d34:	83 ec 0c             	sub    esp,0xc
c0023d37:	68 27 b4 02 c0       	push   0xc002b427
c0023d3c:	e8 aa 5a ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0023d41:	83 c4 10             	add    esp,0x10
c0023d44:	eb fe                	jmp    c0023d44 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023d46:	b8 01 00 00 00       	mov    eax,0x1
c0023d4b:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023d51:	5b                   	pop    ebx
c0023d52:	5e                   	pop    esi
c0023d53:	5f                   	pop    edi
c0023d54:	5d                   	pop    ebp
c0023d55:	c3                   	ret    

c0023d56 <SATA::read(unsigned long long, int, void*)>:
c0023d56:	57                   	push   edi
c0023d57:	b8 04 00 00 00       	mov    eax,0x4
c0023d5c:	56                   	push   esi
c0023d5d:	53                   	push   ebx
c0023d5e:	83 ec 10             	sub    esp,0x10
c0023d61:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023d65:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023d69:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023d6c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023d70:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023d74:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023d7a:	77 3b                	ja     c0023db7 <SATA::read(unsigned long long, int, void*)+0x61>
c0023d7c:	b8 06 00 00 00       	mov    eax,0x6
c0023d81:	85 d2                	test   edx,edx
c0023d83:	74 32                	je     c0023db7 <SATA::read(unsigned long long, int, void*)+0x61>
c0023d85:	50                   	push   eax
c0023d86:	50                   	push   eax
c0023d87:	6a 00                	push   0x0
c0023d89:	52                   	push   edx
c0023d8a:	53                   	push   ebx
c0023d8b:	57                   	push   edi
c0023d8c:	56                   	push   esi
c0023d8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023d91:	e8 2c fd ff ff       	call   c0023ac2 <SATA::access(unsigned long long, int, void*, bool)>
c0023d96:	83 c4 20             	add    esp,0x20
c0023d99:	85 c0                	test   eax,eax
c0023d9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d9f:	75 11                	jne    c0023db2 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023da1:	01 1d c8 eb 02 c0    	add    DWORD PTR ds:0xc002ebc8,ebx
c0023da7:	e8 68 c7 fe ff       	call   c0010514 <VgaText::updateDiskUsage()>
c0023dac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023db0:	eb 05                	jmp    c0023db7 <SATA::read(unsigned long long, int, void*)+0x61>
c0023db2:	b8 01 00 00 00       	mov    eax,0x1
c0023db7:	83 c4 10             	add    esp,0x10
c0023dba:	5b                   	pop    ebx
c0023dbb:	5e                   	pop    esi
c0023dbc:	5f                   	pop    edi
c0023dbd:	c3                   	ret    

c0023dbe <SATA::write(unsigned long long, int, void*)>:
c0023dbe:	57                   	push   edi
c0023dbf:	b8 04 00 00 00       	mov    eax,0x4
c0023dc4:	56                   	push   esi
c0023dc5:	53                   	push   ebx
c0023dc6:	83 ec 10             	sub    esp,0x10
c0023dc9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023dcd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023dd1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023dd4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023dd8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023ddc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023de2:	77 3b                	ja     c0023e1f <SATA::write(unsigned long long, int, void*)+0x61>
c0023de4:	b8 06 00 00 00       	mov    eax,0x6
c0023de9:	85 d2                	test   edx,edx
c0023deb:	74 32                	je     c0023e1f <SATA::write(unsigned long long, int, void*)+0x61>
c0023ded:	50                   	push   eax
c0023dee:	50                   	push   eax
c0023def:	6a 01                	push   0x1
c0023df1:	52                   	push   edx
c0023df2:	53                   	push   ebx
c0023df3:	57                   	push   edi
c0023df4:	56                   	push   esi
c0023df5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023df9:	e8 c4 fc ff ff       	call   c0023ac2 <SATA::access(unsigned long long, int, void*, bool)>
c0023dfe:	83 c4 20             	add    esp,0x20
c0023e01:	85 c0                	test   eax,eax
c0023e03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e07:	75 11                	jne    c0023e1a <SATA::write(unsigned long long, int, void*)+0x5c>
c0023e09:	01 1d c4 eb 02 c0    	add    DWORD PTR ds:0xc002ebc4,ebx
c0023e0f:	e8 00 c7 fe ff       	call   c0010514 <VgaText::updateDiskUsage()>
c0023e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e18:	eb 05                	jmp    c0023e1f <SATA::write(unsigned long long, int, void*)+0x61>
c0023e1a:	b8 01 00 00 00       	mov    eax,0x1
c0023e1f:	83 c4 10             	add    esp,0x10
c0023e22:	5b                   	pop    ebx
c0023e23:	5e                   	pop    esi
c0023e24:	5f                   	pop    edi
c0023e25:	c3                   	ret    

c0023e26 <AVX::open(int, int, void*)>:
c0023e26:	83 ec 0c             	sub    esp,0xc
c0023e29:	e8 3a 11 00 00       	call   c0024f68 <avxInit>
c0023e2e:	b8 00 00 00 00       	mov    eax,0x0
c0023e33:	83 c4 0c             	add    esp,0xc
c0023e36:	c3                   	ret    
c0023e37:	90                   	nop

c0023e38 <AVX::close(int, int, void*)>:
c0023e38:	83 ec 0c             	sub    esp,0xc
c0023e3b:	e8 29 11 00 00       	call   c0024f69 <avxClose>
c0023e40:	b8 00 00 00 00       	mov    eax,0x0
c0023e45:	83 c4 0c             	add    esp,0xc
c0023e48:	c3                   	ret    
c0023e49:	90                   	nop

c0023e4a <AVX::available()>:
c0023e4a:	83 ec 0c             	sub    esp,0xc
c0023e4d:	e8 0e 11 00 00       	call   c0024f60 <avxDetect>
c0023e52:	85 c0                	test   eax,eax
c0023e54:	0f 95 c0             	setne  al
c0023e57:	83 c4 0c             	add    esp,0xc
c0023e5a:	c3                   	ret    
c0023e5b:	90                   	nop

c0023e5c <AVX::save(void*)>:
c0023e5c:	83 ec 0c             	sub    esp,0xc
c0023e5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023e63:	83 ec 0c             	sub    esp,0xc
c0023e66:	50                   	push   eax
c0023e67:	e8 fa 10 00 00       	call   c0024f66 <avxSave>
c0023e6c:	83 c4 10             	add    esp,0x10
c0023e6f:	90                   	nop
c0023e70:	83 c4 0c             	add    esp,0xc
c0023e73:	c3                   	ret    

c0023e74 <AVX::load(void*)>:
c0023e74:	83 ec 0c             	sub    esp,0xc
c0023e77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023e7b:	83 ec 0c             	sub    esp,0xc
c0023e7e:	50                   	push   eax
c0023e7f:	e8 e3 10 00 00       	call   c0024f67 <avxLoad>
c0023e84:	83 c4 10             	add    esp,0x10
c0023e87:	90                   	nop
c0023e88:	83 c4 0c             	add    esp,0xc
c0023e8b:	c3                   	ret    

c0023e8c <AVX::AVX()>:
c0023e8c:	83 ec 0c             	sub    esp,0xc
c0023e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e93:	83 ec 08             	sub    esp,0x8
c0023e96:	68 84 b4 02 c0       	push   0xc002b484
c0023e9b:	50                   	push   eax
c0023e9c:	e8 0d 01 ff ff       	call   c0013fae <FPU::FPU(char const*)>
c0023ea1:	83 c4 10             	add    esp,0x10
c0023ea4:	ba 94 b4 02 c0       	mov    edx,0xc002b494
c0023ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ead:	89 10                	mov    DWORD PTR [eax],edx
c0023eaf:	90                   	nop
c0023eb0:	83 c4 0c             	add    esp,0xc
c0023eb3:	c3                   	ret    

c0023eb4 <MMX::available()>:
c0023eb4:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0023eb9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023ebf:	83 e0 20             	and    eax,0x20
c0023ec2:	84 c0                	test   al,al
c0023ec4:	0f 95 c0             	setne  al
c0023ec7:	c3                   	ret    

c0023ec8 <MMX::open(int, int, void*)>:
c0023ec8:	83 ec 0c             	sub    esp,0xc
c0023ecb:	e8 1c 11 00 00       	call   c0024fec <x87Init>
c0023ed0:	b8 00 00 00 00       	mov    eax,0x0
c0023ed5:	83 c4 0c             	add    esp,0xc
c0023ed8:	c3                   	ret    
c0023ed9:	90                   	nop

c0023eda <MMX::close(int, int, void*)>:
c0023eda:	83 ec 0c             	sub    esp,0xc
c0023edd:	e8 24 11 00 00       	call   c0025006 <x87Close>
c0023ee2:	b8 00 00 00 00       	mov    eax,0x0
c0023ee7:	83 c4 0c             	add    esp,0xc
c0023eea:	c3                   	ret    
c0023eeb:	90                   	nop

c0023eec <MMX::save(void*)>:
c0023eec:	83 ec 0c             	sub    esp,0xc
c0023eef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ef3:	83 ec 0c             	sub    esp,0xc
c0023ef6:	50                   	push   eax
c0023ef7:	e8 e5 10 00 00       	call   c0024fe1 <x87Save>
c0023efc:	83 c4 10             	add    esp,0x10
c0023eff:	90                   	nop
c0023f00:	83 c4 0c             	add    esp,0xc
c0023f03:	c3                   	ret    

c0023f04 <MMX::load(void*)>:
c0023f04:	83 ec 0c             	sub    esp,0xc
c0023f07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f0b:	83 ec 0c             	sub    esp,0xc
c0023f0e:	50                   	push   eax
c0023f0f:	e8 d3 10 00 00       	call   c0024fe7 <x87Load>
c0023f14:	83 c4 10             	add    esp,0x10
c0023f17:	90                   	nop
c0023f18:	83 c4 0c             	add    esp,0xc
c0023f1b:	c3                   	ret    

c0023f1c <MMX::MMX()>:
c0023f1c:	83 ec 0c             	sub    esp,0xc
c0023f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f23:	83 ec 08             	sub    esp,0x8
c0023f26:	68 c4 b4 02 c0       	push   0xc002b4c4
c0023f2b:	50                   	push   eax
c0023f2c:	e8 7d 00 ff ff       	call   c0013fae <FPU::FPU(char const*)>
c0023f31:	83 c4 10             	add    esp,0x10
c0023f34:	ba d4 b4 02 c0       	mov    edx,0xc002b4d4
c0023f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f3d:	89 10                	mov    DWORD PTR [eax],edx
c0023f3f:	90                   	nop
c0023f40:	83 c4 0c             	add    esp,0xc
c0023f43:	c3                   	ret    

c0023f44 <SSE::open(int, int, void*)>:
c0023f44:	83 ec 0c             	sub    esp,0xc
c0023f47:	e8 58 10 00 00       	call   c0024fa4 <sseInit>
c0023f4c:	b8 00 00 00 00       	mov    eax,0x0
c0023f51:	83 c4 0c             	add    esp,0xc
c0023f54:	c3                   	ret    
c0023f55:	90                   	nop

c0023f56 <SSE::close(int, int, void*)>:
c0023f56:	83 ec 0c             	sub    esp,0xc
c0023f59:	e8 56 10 00 00       	call   c0024fb4 <sseClose>
c0023f5e:	b8 00 00 00 00       	mov    eax,0x0
c0023f63:	83 c4 0c             	add    esp,0xc
c0023f66:	c3                   	ret    
c0023f67:	90                   	nop

c0023f68 <SSE::available()>:
c0023f68:	83 ec 1c             	sub    esp,0x1c
c0023f6b:	e8 10 10 00 00       	call   c0024f80 <absolutelyNoChanceInHell>
c0023f70:	85 c0                	test   eax,eax
c0023f72:	0f 95 c0             	setne  al
c0023f75:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f79:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023f7d:	83 c4 1c             	add    esp,0x1c
c0023f80:	c3                   	ret    
c0023f81:	90                   	nop

c0023f82 <SSE::save(void*)>:
c0023f82:	83 ec 0c             	sub    esp,0xc
c0023f85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f89:	83 ec 0c             	sub    esp,0xc
c0023f8c:	50                   	push   eax
c0023f8d:	e8 06 10 00 00       	call   c0024f98 <sseSave>
c0023f92:	83 c4 10             	add    esp,0x10
c0023f95:	90                   	nop
c0023f96:	83 c4 0c             	add    esp,0xc
c0023f99:	c3                   	ret    

c0023f9a <SSE::load(void*)>:
c0023f9a:	83 ec 0c             	sub    esp,0xc
c0023f9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fa1:	83 ec 0c             	sub    esp,0xc
c0023fa4:	50                   	push   eax
c0023fa5:	e8 f4 0f 00 00       	call   c0024f9e <sseLoad>
c0023faa:	83 c4 10             	add    esp,0x10
c0023fad:	90                   	nop
c0023fae:	83 c4 0c             	add    esp,0xc
c0023fb1:	c3                   	ret    

c0023fb2 <SSE::SSE()>:
c0023fb2:	83 ec 0c             	sub    esp,0xc
c0023fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fb9:	83 ec 08             	sub    esp,0x8
c0023fbc:	68 04 b5 02 c0       	push   0xc002b504
c0023fc1:	50                   	push   eax
c0023fc2:	e8 e7 ff fe ff       	call   c0013fae <FPU::FPU(char const*)>
c0023fc7:	83 c4 10             	add    esp,0x10
c0023fca:	ba 14 b5 02 c0       	mov    edx,0xc002b514
c0023fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fd3:	89 10                	mov    DWORD PTR [eax],edx
c0023fd5:	90                   	nop
c0023fd6:	83 c4 0c             	add    esp,0xc
c0023fd9:	c3                   	ret    

c0023fda <x87::open(int, int, void*)>:
c0023fda:	83 ec 0c             	sub    esp,0xc
c0023fdd:	e8 0a 10 00 00       	call   c0024fec <x87Init>
c0023fe2:	b8 00 00 00 00       	mov    eax,0x0
c0023fe7:	83 c4 0c             	add    esp,0xc
c0023fea:	c3                   	ret    
c0023feb:	90                   	nop

c0023fec <x87::close(int, int, void*)>:
c0023fec:	83 ec 0c             	sub    esp,0xc
c0023fef:	e8 12 10 00 00       	call   c0025006 <x87Close>
c0023ff4:	b8 00 00 00 00       	mov    eax,0x0
c0023ff9:	83 c4 0c             	add    esp,0xc
c0023ffc:	c3                   	ret    
c0023ffd:	90                   	nop

c0023ffe <x87::available()>:
c0023ffe:	83 ec 0c             	sub    esp,0xc
c0024001:	e8 c0 0f 00 00       	call   c0024fc6 <x87Detect>
c0024006:	85 c0                	test   eax,eax
c0024008:	0f 95 c0             	setne  al
c002400b:	83 c4 0c             	add    esp,0xc
c002400e:	c3                   	ret    
c002400f:	90                   	nop

c0024010 <x87::save(void*)>:
c0024010:	83 ec 0c             	sub    esp,0xc
c0024013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024017:	83 ec 0c             	sub    esp,0xc
c002401a:	50                   	push   eax
c002401b:	e8 c1 0f 00 00       	call   c0024fe1 <x87Save>
c0024020:	83 c4 10             	add    esp,0x10
c0024023:	90                   	nop
c0024024:	83 c4 0c             	add    esp,0xc
c0024027:	c3                   	ret    

c0024028 <x87::load(void*)>:
c0024028:	83 ec 0c             	sub    esp,0xc
c002402b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002402f:	83 ec 0c             	sub    esp,0xc
c0024032:	50                   	push   eax
c0024033:	e8 af 0f 00 00       	call   c0024fe7 <x87Load>
c0024038:	83 c4 10             	add    esp,0x10
c002403b:	90                   	nop
c002403c:	83 c4 0c             	add    esp,0xc
c002403f:	c3                   	ret    

c0024040 <x87::x87()>:
c0024040:	83 ec 0c             	sub    esp,0xc
c0024043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024047:	83 ec 08             	sub    esp,0x8
c002404a:	68 44 b5 02 c0       	push   0xc002b544
c002404f:	50                   	push   eax
c0024050:	e8 59 ff fe ff       	call   c0013fae <FPU::FPU(char const*)>
c0024055:	83 c4 10             	add    esp,0x10
c0024058:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c002405d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024061:	89 10                	mov    DWORD PTR [eax],edx
c0024063:	90                   	nop
c0024064:	83 c4 0c             	add    esp,0xc
c0024067:	c3                   	ret    

c0024068 <APIC::disable()>:
c0024068:	90                   	nop
c0024069:	c3                   	ret    

c002406a <APIC::close(int, int, void*)>:
c002406a:	55                   	push   ebp
c002406b:	89 e5                	mov    ebp,esp
c002406d:	83 ec 08             	sub    esp,0x8
c0024070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024073:	8b 00                	mov    eax,DWORD PTR [eax]
c0024075:	83 c0 3c             	add    eax,0x3c
c0024078:	8b 00                	mov    eax,DWORD PTR [eax]
c002407a:	83 ec 0c             	sub    esp,0xc
c002407d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024080:	ff d0                	call   eax
c0024082:	83 c4 10             	add    esp,0x10
c0024085:	b8 00 00 00 00       	mov    eax,0x0
c002408a:	c9                   	leave  
c002408b:	c3                   	ret    

c002408c <IOAPIC::close(int, int, void*)>:
c002408c:	b8 00 00 00 00       	mov    eax,0x0
c0024091:	c3                   	ret    

c0024092 <APIC::io_wait()>:
c0024092:	eb 00                	jmp    c0024094 <APIC::io_wait()+0x2>
c0024094:	eb 00                	jmp    c0024096 <APIC::io_wait()+0x4>
c0024096:	90                   	nop
c0024097:	c3                   	ret    

c0024098 <APIC::getBase()>:
c0024098:	55                   	push   ebp
c0024099:	89 e5                	mov    ebp,esp
c002409b:	83 ec 18             	sub    esp,0x18
c002409e:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00240a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00240a9:	83 e0 08             	and    eax,0x8
c00240ac:	84 c0                	test   al,al
c00240ae:	75 07                	jne    c00240b7 <APIC::getBase()+0x1f>
c00240b0:	b8 00 00 00 00       	mov    eax,0x0
c00240b5:	eb 21                	jmp    c00240d8 <APIC::getBase()+0x40>
c00240b7:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00240bc:	83 ec 08             	sub    esp,0x8
c00240bf:	6a 1b                	push   0x1b
c00240c1:	50                   	push   eax
c00240c2:	e8 b5 a9 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c00240c7:	83 c4 10             	add    esp,0x10
c00240ca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00240cd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00240d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00240d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00240d8:	c9                   	leave  
c00240d9:	c3                   	ret    

c00240da <APIC::eoi(unsigned char)>:
c00240da:	55                   	push   ebp
c00240db:	89 e5                	mov    ebp,esp
c00240dd:	83 ec 28             	sub    esp,0x28
c00240e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00240e3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00240e6:	83 ec 0c             	sub    esp,0xc
c00240e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00240ec:	e8 a7 ff ff ff       	call   c0024098 <APIC::getBase()>
c00240f1:	83 c4 10             	add    esp,0x10
c00240f4:	05 b0 00 00 00       	add    eax,0xb0
c00240f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00240fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00240ff:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024105:	90                   	nop
c0024106:	c9                   	leave  
c0024107:	c3                   	ret    

c0024108 <APIC::open(int, int, void*)>:
c0024108:	55                   	push   ebp
c0024109:	89 e5                	mov    ebp,esp
c002410b:	57                   	push   edi
c002410c:	56                   	push   esi
c002410d:	53                   	push   ebx
c002410e:	83 ec 2c             	sub    esp,0x2c
c0024111:	83 ec 0c             	sub    esp,0xc
c0024114:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024117:	e8 7c ff ff ff       	call   c0024098 <APIC::getBase()>
c002411c:	83 c4 10             	add    esp,0x10
c002411f:	89 c2                	mov    edx,eax
c0024121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024124:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002412a:	0f b6 f8             	movzx  edi,al
c002412d:	89 d0                	mov    eax,edx
c002412f:	ba 00 00 00 00       	mov    edx,0x0
c0024134:	89 c1                	mov    ecx,eax
c0024136:	80 e5 ff             	and    ch,0xff
c0024139:	89 cb                	mov    ebx,ecx
c002413b:	0f b6 f2             	movzx  esi,dl
c002413e:	89 d8                	mov    eax,ebx
c0024140:	89 f2                	mov    edx,esi
c0024142:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024145:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024148:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002414c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024150:	83 e0 00             	and    eax,0x0
c0024153:	09 d0                	or     eax,edx
c0024155:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002415c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024162:	8d 50 01             	lea    edx,[eax+0x1]
c0024165:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024168:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002416e:	0f b6 d0             	movzx  edx,al
c0024171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024174:	83 c2 08             	add    edx,0x8
c0024177:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002417b:	0f b6 c9             	movzx  ecx,cl
c002417e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024184:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024188:	83 ec 0c             	sub    esp,0xc
c002418b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002418e:	e8 05 ff ff ff       	call   c0024098 <APIC::getBase()>
c0024193:	83 c4 10             	add    esp,0x10
c0024196:	05 f0 00 00 00       	add    eax,0xf0
c002419b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002419e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00241a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00241a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00241a6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00241ad:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00241b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00241b7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00241ba:	89 10                	mov    DWORD PTR [eax],edx
c00241bc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00241c3:	a1 50 d1 02 c0       	mov    eax,ds:0xc002d150
c00241c8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00241cb:	7d 7c                	jge    c0024249 <APIC::open(int, int, void*)+0x141>
c00241cd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00241d0:	8b 04 85 60 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ea0]
c00241d7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00241da:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00241dd:	8b 04 85 60 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ea0]
c00241e4:	c1 e8 08             	shr    eax,0x8
c00241e7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00241eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00241ee:	8b 04 85 60 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ea0]
c00241f5:	c1 e8 18             	shr    eax,0x18
c00241f8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00241fb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00241ff:	75 40                	jne    c0024241 <APIC::open(int, int, void*)+0x139>
c0024201:	83 ec 0c             	sub    esp,0xc
c0024204:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024207:	e8 8c fe ff ff       	call   c0024098 <APIC::getBase()>
c002420c:	83 c4 10             	add    esp,0x10
c002420f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0024213:	75 07                	jne    c002421c <APIC::open(int, int, void*)+0x114>
c0024215:	ba 60 03 00 00       	mov    edx,0x360
c002421a:	eb 05                	jmp    c0024221 <APIC::open(int, int, void*)+0x119>
c002421c:	ba 50 03 00 00       	mov    edx,0x350
c0024221:	01 d0                	add    eax,edx
c0024223:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024226:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024229:	8b 00                	mov    eax,DWORD PTR [eax]
c002422b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002422e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0024235:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0024239:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002423c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002423f:	89 10                	mov    DWORD PTR [eax],edx
c0024241:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0024244:	e9 7a ff ff ff       	jmp    c00241c3 <APIC::open(int, int, void*)+0xbb>
c0024249:	b8 00 00 00 00       	mov    eax,0x0
c002424e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024251:	5b                   	pop    ebx
c0024252:	5e                   	pop    esi
c0024253:	5f                   	pop    edi
c0024254:	5d                   	pop    ebp
c0024255:	c3                   	ret    

c0024256 <IOAPIC::IOAPIC()>:
c0024256:	83 ec 0c             	sub    esp,0xc
c0024259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002425d:	83 ec 08             	sub    esp,0x8
c0024260:	68 84 b5 02 c0       	push   0xc002b584
c0024265:	50                   	push   eax
c0024266:	e8 45 fa fe ff       	call   c0013cb0 <Device::Device(char const*)>
c002426b:	83 c4 10             	add    esp,0x10
c002426e:	ba ac b6 02 c0       	mov    edx,0xc002b6ac
c0024273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024277:	89 10                	mov    DWORD PTR [eax],edx
c0024279:	90                   	nop
c002427a:	83 c4 0c             	add    esp,0xc
c002427d:	c3                   	ret    

c002427e <APIC::APIC()>:
c002427e:	53                   	push   ebx
c002427f:	83 ec 18             	sub    esp,0x18
c0024282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024286:	83 ec 08             	sub    esp,0x8
c0024289:	68 8c b5 02 c0       	push   0xc002b58c
c002428e:	50                   	push   eax
c002428f:	e8 74 01 ff ff       	call   c0014408 <InterruptController::InterruptController(char const*)>
c0024294:	83 c4 10             	add    esp,0x10
c0024297:	ba 64 b6 02 c0       	mov    edx,0xc002b664
c002429c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00242a0:	89 10                	mov    DWORD PTR [eax],edx
c00242a2:	a0 20 ec 02 c0       	mov    al,ds:0xc002ec20
c00242a7:	83 f0 01             	xor    eax,0x1
c00242aa:	84 c0                	test   al,al
c00242ac:	0f 84 a1 00 00 00    	je     c0024353 <APIC::APIC()+0xd5>
c00242b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00242b7:	a0 00 d2 02 c0       	mov    al,ds:0xc002d200
c00242bc:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00242c0:	0f 83 86 00 00 00    	jae    c002434c <APIC::APIC()+0xce>
c00242c6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00242ce:	83 ec 0c             	sub    esp,0xc
c00242d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00242d5:	e8 fa b1 fe ff       	call   c000f4d4 <malloc>
c00242da:	83 c4 10             	add    esp,0x10
c00242dd:	89 c3                	mov    ebx,eax
c00242df:	83 ec 0c             	sub    esp,0xc
c00242e2:	53                   	push   ebx
c00242e3:	e8 6e ff ff ff       	call   c0024256 <IOAPIC::IOAPIC()>
c00242e8:	83 c4 10             	add    esp,0x10
c00242eb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00242ef:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00242f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00242f8:	89 14 85 00 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1400],edx
c00242ff:	a1 e0 eb 02 c0       	mov    eax,ds:0xc002ebe0
c0024304:	40                   	inc    eax
c0024305:	a3 e0 eb 02 c0       	mov    ds:0xc002ebe0,eax
c002430a:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c002430f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0024315:	83 ec 08             	sub    esp,0x8
c0024318:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002431c:	50                   	push   eax
c002431d:	e8 9e f7 fe ff       	call   c0013ac0 <Device::addChild(Device*)>
c0024322:	83 c4 10             	add    esp,0x10
c0024325:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024329:	8b 00                	mov    eax,DWORD PTR [eax]
c002432b:	83 c0 08             	add    eax,0x8
c002432e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024330:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0024335:	6a 00                	push   0x0
c0024337:	6a 00                	push   0x0
c0024339:	52                   	push   edx
c002433a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002433e:	ff d0                	call   eax
c0024340:	83 c4 10             	add    esp,0x10
c0024343:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0024347:	e9 6b ff ff ff       	jmp    c00242b7 <APIC::APIC()+0x39>
c002434c:	c6 05 20 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec20,0x1
c0024353:	90                   	nop
c0024354:	83 c4 18             	add    esp,0x18
c0024357:	5b                   	pop    ebx
c0024358:	c3                   	ret    
c0024359:	90                   	nop

c002435a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002435a:	55                   	push   ebp
c002435b:	89 e5                	mov    ebp,esp
c002435d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024360:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024366:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024369:	72 1d                	jb     c0024388 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002436b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002436e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024377:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002437d:	01 d0                	add    eax,edx
c002437f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024382:	73 04                	jae    c0024388 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024384:	b0 01                	mov    al,0x1
c0024386:	eb 02                	jmp    c002438a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024388:	b0 00                	mov    al,0x0
c002438a:	5d                   	pop    ebp
c002438b:	c3                   	ret    

c002438c <IOAPIC::read(int)>:
c002438c:	55                   	push   ebp
c002438d:	89 e5                	mov    ebp,esp
c002438f:	83 ec 10             	sub    esp,0x10
c0024392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024395:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002439b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002439e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00243a1:	0f b6 d0             	movzx  edx,al
c00243a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00243a7:	89 10                	mov    DWORD PTR [eax],edx
c00243a9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00243ac:	83 c0 10             	add    eax,0x10
c00243af:	8b 00                	mov    eax,DWORD PTR [eax]
c00243b1:	c9                   	leave  
c00243b2:	c3                   	ret    
c00243b3:	90                   	nop

c00243b4 <IOAPIC::open(int, int, void*)>:
c00243b4:	55                   	push   ebp
c00243b5:	89 e5                	mov    ebp,esp
c00243b7:	57                   	push   edi
c00243b8:	56                   	push   esi
c00243b9:	53                   	push   ebx
c00243ba:	83 ec 0c             	sub    esp,0xc
c00243bd:	83 ec 0c             	sub    esp,0xc
c00243c0:	68 b7 b5 02 c0       	push   0xc002b5b7
c00243c5:	e8 07 e3 fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c00243ca:	83 c4 10             	add    esp,0x10
c00243cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00243d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00243d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243dc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00243e2:	8b 14 85 40 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2dc0]
c00243e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243ec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00243f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00243fb:	8b 14 85 c0 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2d40]
c0024402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024405:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002440b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002440e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0024414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024417:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002441d:	0f b6 f8             	movzx  edi,al
c0024420:	89 d0                	mov    eax,edx
c0024422:	ba 00 00 00 00       	mov    edx,0x0
c0024427:	89 c1                	mov    ecx,eax
c0024429:	80 e5 ff             	and    ch,0xff
c002442c:	89 cb                	mov    ebx,ecx
c002442e:	0f b6 f2             	movzx  esi,dl
c0024431:	89 d8                	mov    eax,ebx
c0024433:	89 f2                	mov    edx,esi
c0024435:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024438:	8d 5f 08             	lea    ebx,[edi+0x8]
c002443b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002443f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024443:	83 e0 00             	and    eax,0x0
c0024446:	09 d0                	or     eax,edx
c0024448:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002444c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002444f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024455:	8d 50 01             	lea    edx,[eax+0x1]
c0024458:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002445b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024461:	0f b6 d0             	movzx  edx,al
c0024464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024467:	83 c2 08             	add    edx,0x8
c002446a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002446e:	0f b6 c9             	movzx  ecx,cl
c0024471:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0024477:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002447b:	83 ec 08             	sub    esp,0x8
c002447e:	6a 01                	push   0x1
c0024480:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024483:	e8 04 ff ff ff       	call   c002438c <IOAPIC::read(int)>
c0024488:	83 c4 10             	add    esp,0x10
c002448b:	c1 f8 10             	sar    eax,0x10
c002448e:	0f b6 c0             	movzx  eax,al
c0024491:	8d 50 01             	lea    edx,[eax+0x1]
c0024494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024497:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002449d:	b8 00 00 00 00       	mov    eax,0x0
c00244a2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00244a5:	5b                   	pop    ebx
c00244a6:	5e                   	pop    esi
c00244a7:	5f                   	pop    edi
c00244a8:	5d                   	pop    ebp
c00244a9:	c3                   	ret    

c00244aa <IOAPIC::write(int, int)>:
c00244aa:	55                   	push   ebp
c00244ab:	89 e5                	mov    ebp,esp
c00244ad:	83 ec 10             	sub    esp,0x10
c00244b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00244b9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00244bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00244bf:	0f b6 d0             	movzx  edx,al
c00244c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00244c5:	89 10                	mov    DWORD PTR [eax],edx
c00244c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00244ca:	8d 50 10             	lea    edx,[eax+0x10]
c00244cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00244d0:	89 02                	mov    DWORD PTR [edx],eax
c00244d2:	90                   	nop
c00244d3:	c9                   	leave  
c00244d4:	c3                   	ret    
c00244d5:	90                   	nop

c00244d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00244d6:	55                   	push   ebp
c00244d7:	89 e5                	mov    ebp,esp
c00244d9:	53                   	push   ebx
c00244da:	83 ec 2c             	sub    esp,0x2c
c00244dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00244e0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00244e3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00244e6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00244e9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00244ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00244ef:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00244f2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00244f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00244f8:	88 d8                	mov    al,bl
c00244fa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00244fd:	88 c8                	mov    al,cl
c00244ff:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024502:	88 d0                	mov    al,dl
c0024504:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0024507:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002450b:	83 c0 08             	add    eax,0x8
c002450e:	01 c0                	add    eax,eax
c0024510:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024513:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024517:	83 c0 08             	add    eax,0x8
c002451a:	01 c0                	add    eax,eax
c002451c:	40                   	inc    eax
c002451d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024520:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024523:	50                   	push   eax
c0024524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024527:	e8 60 fe ff ff       	call   c002438c <IOAPIC::read(int)>
c002452c:	83 c4 08             	add    esp,0x8
c002452f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024532:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0024539:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002453c:	c1 e0 18             	shl    eax,0x18
c002453f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0024542:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024545:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024548:	52                   	push   edx
c0024549:	50                   	push   eax
c002454a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002454d:	e8 58 ff ff ff       	call   c00244aa <IOAPIC::write(int, int)>
c0024552:	83 c4 0c             	add    esp,0xc
c0024555:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024558:	50                   	push   eax
c0024559:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002455c:	e8 2b fe ff ff       	call   c002438c <IOAPIC::read(int)>
c0024561:	83 c4 08             	add    esp,0x8
c0024564:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024567:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002456e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0024575:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002457c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024580:	74 09                	je     c002458b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024582:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024589:	eb 07                	jmp    c0024592 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002458b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024592:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0024596:	74 09                	je     c00245a1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024598:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002459f:	eb 07                	jmp    c00245a8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00245a1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00245a8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00245af:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00245b3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00245b6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00245b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00245bc:	52                   	push   edx
c00245bd:	50                   	push   eax
c00245be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245c1:	e8 e4 fe ff ff       	call   c00244aa <IOAPIC::write(int, int)>
c00245c6:	83 c4 0c             	add    esp,0xc
c00245c9:	90                   	nop
c00245ca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00245cd:	c9                   	leave  
c00245ce:	c3                   	ret    
c00245cf:	90                   	nop

c00245d0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00245d0:	55                   	push   ebp
c00245d1:	89 e5                	mov    ebp,esp
c00245d3:	57                   	push   edi
c00245d4:	56                   	push   esi
c00245d5:	53                   	push   ebx
c00245d6:	83 ec 2c             	sub    esp,0x2c
c00245d9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00245dc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00245df:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00245e3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00245e7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00245eb:	74 5a                	je     c0024647 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00245ed:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00245f1:	7f 44                	jg     c0024637 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00245f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245f6:	05 00 bb 02 c0       	add    eax,0xc002bb00
c00245fb:	8a 00                	mov    al,BYTE PTR [eax]
c00245fd:	0f b6 c0             	movzx  eax,al
c0024600:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024603:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024606:	66 8b 84 00 e0 d1 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2e20]
c002460e:	0f b7 c0             	movzx  eax,ax
c0024611:	83 e0 02             	and    eax,0x2
c0024614:	85 c0                	test   eax,eax
c0024616:	74 04                	je     c002461c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0024618:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002461c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002461f:	66 8b 84 00 e0 d1 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2e20]
c0024627:	0f b7 c0             	movzx  eax,ax
c002462a:	83 e0 08             	and    eax,0x8
c002462d:	85 c0                	test   eax,eax
c002462f:	74 16                	je     c0024647 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024631:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024635:	eb 10                	jmp    c0024647 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024637:	83 ec 0c             	sub    esp,0xc
c002463a:	68 c8 b5 02 c0       	push   0xc002b5c8
c002463f:	e8 a7 51 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0024644:	83 c4 10             	add    esp,0x10
c0024647:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002464b:	a1 e0 eb 02 c0       	mov    eax,ds:0xc002ebe0
c0024650:	83 ec 08             	sub    esp,0x8
c0024653:	50                   	push   eax
c0024654:	68 00 b6 02 c0       	push   0xc002b600
c0024659:	e8 73 e0 fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c002465e:	83 c4 10             	add    esp,0x10
c0024661:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0024668:	a1 e0 eb 02 c0       	mov    eax,ds:0xc002ebe0
c002466d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024670:	7d 67                	jge    c00246d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024672:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024675:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c002467c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002467f:	83 ec 08             	sub    esp,0x8
c0024682:	52                   	push   edx
c0024683:	50                   	push   eax
c0024684:	e8 d1 fc ff ff       	call   c002435a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024689:	83 c4 10             	add    esp,0x10
c002468c:	84 c0                	test   al,al
c002468e:	74 44                	je     c00246d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024690:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024693:	8b 1c 85 00 ec 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1400]
c002469a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002469e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00246a1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00246a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246a8:	83 c0 20             	add    eax,0x20
c00246ab:	0f b6 f0             	movzx  esi,al
c00246ae:	b8 00 00 00 00       	mov    eax,0x0
c00246b3:	99                   	cdq    
c00246b4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00246b7:	0f b6 c9             	movzx  ecx,cl
c00246ba:	83 ec 04             	sub    esp,0x4
c00246bd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00246c0:	57                   	push   edi
c00246c1:	56                   	push   esi
c00246c2:	52                   	push   edx
c00246c3:	50                   	push   eax
c00246c4:	51                   	push   ecx
c00246c5:	53                   	push   ebx
c00246c6:	e8 0b fe ff ff       	call   c00244d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00246cb:	83 c4 20             	add    esp,0x20
c00246ce:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00246d2:	eb 05                	jmp    c00246d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00246d4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00246d7:	eb 8f                	jmp    c0024668 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00246d9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00246dc:	83 f0 01             	xor    eax,0x1
c00246df:	84 c0                	test   al,al
c00246e1:	74 10                	je     c00246f3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00246e3:	83 ec 0c             	sub    esp,0xc
c00246e6:	68 17 b6 02 c0       	push   0xc002b617
c00246eb:	e8 fb 50 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c00246f0:	83 c4 10             	add    esp,0x10
c00246f3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00246f7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00246fe:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0024702:	7f 65                	jg     c0024769 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0024704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024707:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002470a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024711:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024714:	01 ca                	add    edx,ecx
c0024716:	83 c2 54             	add    edx,0x54
c0024719:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002471d:	85 c0                	test   eax,eax
c002471f:	75 43                	jne    c0024764 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0024721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024724:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024727:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002472e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024731:	01 ca                	add    edx,ecx
c0024733:	8d 4a 54             	lea    ecx,[edx+0x54]
c0024736:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0024739:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002473d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024740:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024743:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002474a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002474d:	01 ca                	add    edx,ecx
c002474f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024755:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0024758:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002475c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002475f:	83 e8 20             	sub    eax,0x20
c0024762:	eb 1a                	jmp    c002477e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024764:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0024767:	eb 95                	jmp    c00246fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0024769:	83 ec 0c             	sub    esp,0xc
c002476c:	68 24 b6 02 c0       	push   0xc002b624
c0024771:	e8 75 50 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0024776:	83 c4 10             	add    esp,0x10
c0024779:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002477e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024781:	5b                   	pop    ebx
c0024782:	5e                   	pop    esi
c0024783:	5f                   	pop    edi
c0024784:	5d                   	pop    ebp
c0024785:	c3                   	ret    

c0024786 <PIC::disable()>:
c0024786:	55                   	push   ebp
c0024787:	89 e5                	mov    ebp,esp
c0024789:	83 ec 10             	sub    esp,0x10
c002478c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024792:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024796:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024799:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002479d:	ee                   	out    dx,al
c002479e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00247a4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00247a8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00247ab:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00247af:	ee                   	out    dx,al
c00247b0:	90                   	nop
c00247b1:	c9                   	leave  
c00247b2:	c3                   	ret    
c00247b3:	90                   	nop

c00247b4 <PIC::close(int, int, void*)>:
c00247b4:	55                   	push   ebp
c00247b5:	89 e5                	mov    ebp,esp
c00247b7:	83 ec 08             	sub    esp,0x8
c00247ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00247bf:	83 c0 3c             	add    eax,0x3c
c00247c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00247c4:	83 ec 0c             	sub    esp,0xc
c00247c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00247ca:	ff d0                	call   eax
c00247cc:	83 c4 10             	add    esp,0x10
c00247cf:	b8 00 00 00 00       	mov    eax,0x0
c00247d4:	c9                   	leave  
c00247d5:	c3                   	ret    

c00247d6 <PIC::PIC()>:
c00247d6:	83 ec 0c             	sub    esp,0xc
c00247d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247dd:	83 ec 08             	sub    esp,0x8
c00247e0:	68 d0 b6 02 c0       	push   0xc002b6d0
c00247e5:	50                   	push   eax
c00247e6:	e8 1d fc fe ff       	call   c0014408 <InterruptController::InterruptController(char const*)>
c00247eb:	83 c4 10             	add    esp,0x10
c00247ee:	ba fc b6 02 c0       	mov    edx,0xc002b6fc
c00247f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247f7:	89 10                	mov    DWORD PTR [eax],edx
c00247f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024803:	0f b6 d0             	movzx  edx,al
c0024806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002480a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002481b:	0f b6 d0             	movzx  edx,al
c002481e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024822:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002482b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024831:	8d 50 01             	lea    edx,[eax+0x1]
c0024834:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024838:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002483e:	0f b6 d0             	movzx  edx,al
c0024841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024845:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024849:	83 e1 3f             	and    ecx,0x3f
c002484c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024854:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002485a:	0f b6 d0             	movzx  edx,al
c002485d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024861:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002486c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024872:	0f b6 d0             	movzx  edx,al
c0024875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024879:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002487e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024882:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024888:	8d 50 01             	lea    edx,[eax+0x1]
c002488b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002488f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024895:	0f b6 d0             	movzx  edx,al
c0024898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002489c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00248a0:	83 e1 3f             	and    ecx,0x3f
c00248a3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00248a7:	90                   	nop
c00248a8:	83 c4 0c             	add    esp,0xc
c00248ab:	c3                   	ret    

c00248ac <PIC::ioWait()>:
c00248ac:	eb 00                	jmp    c00248ae <PIC::ioWait()+0x2>
c00248ae:	eb 00                	jmp    c00248b0 <PIC::ioWait()+0x4>
c00248b0:	90                   	nop
c00248b1:	c3                   	ret    

c00248b2 <PIC::getIRQReg(int)>:
c00248b2:	55                   	push   ebp
c00248b3:	89 e5                	mov    ebp,esp
c00248b5:	83 ec 10             	sub    esp,0x10
c00248b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00248bb:	0f b6 c0             	movzx  eax,al
c00248be:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00248c4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00248c7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00248ca:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00248ce:	ee                   	out    dx,al
c00248cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00248d2:	0f b6 c0             	movzx  eax,al
c00248d5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00248db:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00248de:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00248e1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00248e5:	ee                   	out    dx,al
c00248e6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00248ec:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00248f0:	89 c2                	mov    edx,eax
c00248f2:	ec                   	in     al,dx
c00248f3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00248f6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00248f9:	0f b6 c0             	movzx  eax,al
c00248fc:	c1 e0 08             	shl    eax,0x8
c00248ff:	89 c1                	mov    ecx,eax
c0024901:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024907:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002490b:	89 c2                	mov    edx,eax
c002490d:	ec                   	in     al,dx
c002490e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024911:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024914:	0f b6 c0             	movzx  eax,al
c0024917:	09 c8                	or     eax,ecx
c0024919:	c9                   	leave  
c002491a:	c3                   	ret    
c002491b:	90                   	nop

c002491c <PIC::eoi(unsigned char)>:
c002491c:	55                   	push   ebp
c002491d:	89 e5                	mov    ebp,esp
c002491f:	83 ec 14             	sub    esp,0x14
c0024922:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024925:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0024928:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002492c:	75 1e                	jne    c002494c <PIC::eoi(unsigned char)+0x30>
c002492e:	6a 0b                	push   0xb
c0024930:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024933:	e8 7a ff ff ff       	call   c00248b2 <PIC::getIRQReg(int)>
c0024938:	83 c4 08             	add    esp,0x8
c002493b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002493f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024943:	25 80 00 00 00       	and    eax,0x80
c0024948:	85 c0                	test   eax,eax
c002494a:	74 5f                	je     c00249ab <PIC::eoi(unsigned char)+0x8f>
c002494c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024950:	75 2d                	jne    c002497f <PIC::eoi(unsigned char)+0x63>
c0024952:	6a 0b                	push   0xb
c0024954:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024957:	e8 56 ff ff ff       	call   c00248b2 <PIC::getIRQReg(int)>
c002495c:	83 c4 08             	add    esp,0x8
c002495f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024963:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024966:	66 85 c0             	test   ax,ax
c0024969:	78 14                	js     c002497f <PIC::eoi(unsigned char)+0x63>
c002496b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024971:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024975:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024978:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002497c:	ee                   	out    dx,al
c002497d:	eb 2d                	jmp    c00249ac <PIC::eoi(unsigned char)+0x90>
c002497f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024983:	76 12                	jbe    c0024997 <PIC::eoi(unsigned char)+0x7b>
c0024985:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002498b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002498f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024992:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024996:	ee                   	out    dx,al
c0024997:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002499d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00249a1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00249a4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00249a8:	ee                   	out    dx,al
c00249a9:	eb 01                	jmp    c00249ac <PIC::eoi(unsigned char)+0x90>
c00249ab:	90                   	nop
c00249ac:	c9                   	leave  
c00249ad:	c3                   	ret    

c00249ae <PIC::remap()>:
c00249ae:	55                   	push   ebp
c00249af:	89 e5                	mov    ebp,esp
c00249b1:	83 ec 48             	sub    esp,0x48
c00249b4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00249bb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00249c2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00249c8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00249cb:	89 c2                	mov    edx,eax
c00249cd:	ec                   	in     al,dx
c00249ce:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00249d1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00249d4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00249d7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00249dd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00249e0:	89 c2                	mov    edx,eax
c00249e2:	ec                   	in     al,dx
c00249e3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00249e6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00249e9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00249ec:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00249f2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00249f6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00249f9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00249fc:	ee                   	out    dx,al
c00249fd:	83 ec 0c             	sub    esp,0xc
c0024a00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a03:	e8 a4 fe ff ff       	call   c00248ac <PIC::ioWait()>
c0024a08:	83 c4 10             	add    esp,0x10
c0024a0b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024a11:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024a15:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024a18:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024a1b:	ee                   	out    dx,al
c0024a1c:	83 ec 0c             	sub    esp,0xc
c0024a1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a22:	e8 85 fe ff ff       	call   c00248ac <PIC::ioWait()>
c0024a27:	83 c4 10             	add    esp,0x10
c0024a2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024a2d:	0f b6 c0             	movzx  eax,al
c0024a30:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024a36:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024a39:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024a3c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024a3f:	ee                   	out    dx,al
c0024a40:	83 ec 0c             	sub    esp,0xc
c0024a43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a46:	e8 61 fe ff ff       	call   c00248ac <PIC::ioWait()>
c0024a4b:	83 c4 10             	add    esp,0x10
c0024a4e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024a51:	0f b6 c0             	movzx  eax,al
c0024a54:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024a5a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024a5d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024a60:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024a63:	ee                   	out    dx,al
c0024a64:	83 ec 0c             	sub    esp,0xc
c0024a67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a6a:	e8 3d fe ff ff       	call   c00248ac <PIC::ioWait()>
c0024a6f:	83 c4 10             	add    esp,0x10
c0024a72:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024a78:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024a7c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024a7f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024a82:	ee                   	out    dx,al
c0024a83:	83 ec 0c             	sub    esp,0xc
c0024a86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a89:	e8 1e fe ff ff       	call   c00248ac <PIC::ioWait()>
c0024a8e:	83 c4 10             	add    esp,0x10
c0024a91:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024a97:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024a9b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024a9e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024aa1:	ee                   	out    dx,al
c0024aa2:	83 ec 0c             	sub    esp,0xc
c0024aa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024aa8:	e8 ff fd ff ff       	call   c00248ac <PIC::ioWait()>
c0024aad:	83 c4 10             	add    esp,0x10
c0024ab0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024ab6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024aba:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024abd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024ac0:	ee                   	out    dx,al
c0024ac1:	83 ec 0c             	sub    esp,0xc
c0024ac4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ac7:	e8 e0 fd ff ff       	call   c00248ac <PIC::ioWait()>
c0024acc:	83 c4 10             	add    esp,0x10
c0024acf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024ad5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024ad9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024adc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024adf:	ee                   	out    dx,al
c0024ae0:	83 ec 0c             	sub    esp,0xc
c0024ae3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ae6:	e8 c1 fd ff ff       	call   c00248ac <PIC::ioWait()>
c0024aeb:	83 c4 10             	add    esp,0x10
c0024aee:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024af2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024af8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024afb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024afe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024b01:	ee                   	out    dx,al
c0024b02:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024b06:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024b0c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024b0f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024b12:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024b15:	ee                   	out    dx,al
c0024b16:	90                   	nop
c0024b17:	c9                   	leave  
c0024b18:	c3                   	ret    
c0024b19:	90                   	nop

c0024b1a <PIC::open(int, int, void*)>:
c0024b1a:	55                   	push   ebp
c0024b1b:	89 e5                	mov    ebp,esp
c0024b1d:	83 ec 18             	sub    esp,0x18
c0024b20:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024b26:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024b2a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024b2d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024b31:	ee                   	out    dx,al
c0024b32:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024b38:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024b3c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024b3f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024b43:	ee                   	out    dx,al
c0024b44:	83 ec 0c             	sub    esp,0xc
c0024b47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b4a:	e8 5f fe ff ff       	call   c00249ae <PIC::remap()>
c0024b4f:	83 c4 10             	add    esp,0x10
c0024b52:	b8 00 00 00 00       	mov    eax,0x0
c0024b57:	c9                   	leave  
c0024b58:	c3                   	ret    
c0024b59:	90                   	nop

c0024b5a <APICTimer::close(int, int, void*)>:
c0024b5a:	b8 00 00 00 00       	mov    eax,0x0
c0024b5f:	c3                   	ret    

c0024b60 <apicTimerHandler(regs*, void*)>:
c0024b60:	83 ec 0c             	sub    esp,0xc
c0024b63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0024b69:	99                   	cdq    
c0024b6a:	52                   	push   edx
c0024b6b:	50                   	push   eax
c0024b6c:	6a 00                	push   0x0
c0024b6e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024b73:	e8 84 07 00 00       	call   c00252fc <__udivdi3>
c0024b78:	83 c4 10             	add    esp,0x10
c0024b7b:	83 ec 08             	sub    esp,0x8
c0024b7e:	52                   	push   edx
c0024b7f:	50                   	push   eax
c0024b80:	e8 82 17 ff ff       	call   c0016307 <timerHandler(unsigned long long)>
c0024b85:	83 c4 10             	add    esp,0x10
c0024b88:	90                   	nop
c0024b89:	83 c4 0c             	add    esp,0xc
c0024b8c:	c3                   	ret    
c0024b8d:	90                   	nop

c0024b8e <APICTimer::write(int)>:
c0024b8e:	53                   	push   ebx
c0024b8f:	83 ec 28             	sub    esp,0x28
c0024b92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024b96:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024b9a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024ba0:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0024ba5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024bab:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024bb1:	83 ec 0c             	sub    esp,0xc
c0024bb4:	50                   	push   eax
c0024bb5:	e8 de f4 ff ff       	call   c0024098 <APIC::getBase()>
c0024bba:	83 c4 10             	add    esp,0x10
c0024bbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024bc1:	a1 10 cf 02 c0       	mov    eax,ds:0xc002cf10
c0024bc6:	8b 15 14 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf14
c0024bcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024bd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bd8:	05 e0 03 00 00       	add    eax,0x3e0
c0024bdd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024be3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024be7:	05 80 03 00 00       	add    eax,0x380
c0024bec:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024bf2:	fb                   	sti    
c0024bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bf7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024bfb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024c00:	83 d2 00             	adc    edx,0x0
c0024c03:	89 c1                	mov    ecx,eax
c0024c05:	89 d3                	mov    ebx,edx
c0024c07:	a1 10 cf 02 c0       	mov    eax,ds:0xc002cf10
c0024c0c:	8b 15 14 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf14
c0024c12:	39 c8                	cmp    eax,ecx
c0024c14:	89 d0                	mov    eax,edx
c0024c16:	19 d8                	sbb    eax,ebx
c0024c18:	73 02                	jae    c0024c1c <APICTimer::write(int)+0x8e>
c0024c1a:	eb d7                	jmp    c0024bf3 <APICTimer::write(int)+0x65>
c0024c1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c20:	05 20 03 00 00       	add    eax,0x320
c0024c25:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024c2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c2f:	05 90 03 00 00       	add    eax,0x390
c0024c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c36:	f7 d0                	not    eax
c0024c38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c3c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024c40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024c44:	ba 00 00 00 00       	mov    edx,0x0
c0024c49:	f7 f3                	div    ebx
c0024c4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024c4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024c53:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024c59:	0d 00 00 02 00       	or     eax,0x20000
c0024c5e:	89 c2                	mov    edx,eax
c0024c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c64:	05 20 03 00 00       	add    eax,0x320
c0024c69:	89 10                	mov    DWORD PTR [eax],edx
c0024c6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c6f:	05 e0 03 00 00       	add    eax,0x3e0
c0024c74:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024c7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c7e:	05 80 03 00 00       	add    eax,0x380
c0024c83:	89 c2                	mov    edx,eax
c0024c85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024c89:	89 02                	mov    DWORD PTR [edx],eax
c0024c8b:	90                   	nop
c0024c8c:	83 c4 28             	add    esp,0x28
c0024c8f:	5b                   	pop    ebx
c0024c90:	c3                   	ret    
c0024c91:	90                   	nop

c0024c92 <APICTimer::open(int, int, void*)>:
c0024c92:	57                   	push   edi
c0024c93:	56                   	push   esi
c0024c94:	53                   	push   ebx
c0024c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c9b:	83 c0 24             	add    eax,0x24
c0024c9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ca0:	83 ec 08             	sub    esp,0x8
c0024ca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024cab:	ff d0                	call   eax
c0024cad:	83 c4 10             	add    esp,0x10
c0024cb0:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0024cb5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cbb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024cc1:	83 ec 0c             	sub    esp,0xc
c0024cc4:	50                   	push   eax
c0024cc5:	e8 ce f3 ff ff       	call   c0024098 <APIC::getBase()>
c0024cca:	83 c4 10             	add    esp,0x10
c0024ccd:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cd7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024cdd:	0f b6 f8             	movzx  edi,al
c0024ce0:	89 d0                	mov    eax,edx
c0024ce2:	ba 00 00 00 00       	mov    edx,0x0
c0024ce7:	89 c1                	mov    ecx,eax
c0024ce9:	80 e5 ff             	and    ch,0xff
c0024cec:	89 cb                	mov    ebx,ecx
c0024cee:	0f b6 f2             	movzx  esi,dl
c0024cf1:	89 d8                	mov    eax,ebx
c0024cf3:	89 f2                	mov    edx,esi
c0024cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024cf9:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024cfc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024d00:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024d04:	83 e0 00             	and    eax,0x0
c0024d07:	09 d0                	or     eax,edx
c0024d09:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d11:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024d17:	8d 50 01             	lea    edx,[eax+0x1]
c0024d1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d1e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024d24:	0f b6 d0             	movzx  edx,al
c0024d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d2b:	83 c2 08             	add    edx,0x8
c0024d2e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024d32:	0f b6 c9             	movzx  ecx,cl
c0024d35:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024d3b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024d47:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d51:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024d55:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024d5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024d5f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024d65:	83 ec 0c             	sub    esp,0xc
c0024d68:	51                   	push   ecx
c0024d69:	6a 01                	push   0x1
c0024d6b:	68 60 4b 02 c0       	push   0xc0024b60
c0024d70:	52                   	push   edx
c0024d71:	50                   	push   eax
c0024d72:	e8 cd ec fe ff       	call   c0013a44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024d77:	83 c4 20             	add    esp,0x20
c0024d7a:	89 c2                	mov    edx,eax
c0024d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d80:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024d86:	b8 00 00 00 00       	mov    eax,0x0
c0024d8b:	5b                   	pop    ebx
c0024d8c:	5e                   	pop    esi
c0024d8d:	5f                   	pop    edi
c0024d8e:	c3                   	ret    
c0024d8f:	90                   	nop

c0024d90 <APICTimer::APICTimer()>:
c0024d90:	83 ec 0c             	sub    esp,0xc
c0024d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d97:	83 ec 08             	sub    esp,0x8
c0024d9a:	68 3c b7 02 c0       	push   0xc002b73c
c0024d9f:	50                   	push   eax
c0024da0:	e8 d3 14 ff ff       	call   c0016278 <Timer::Timer(char const*)>
c0024da5:	83 c4 10             	add    esp,0x10
c0024da8:	ba 50 b7 02 c0       	mov    edx,0xc002b750
c0024dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024db1:	89 10                	mov    DWORD PTR [eax],edx
c0024db3:	90                   	nop
c0024db4:	83 c4 0c             	add    esp,0xc
c0024db7:	c3                   	ret    

c0024db8 <PIT::write(int)>:
c0024db8:	83 ec 10             	sub    esp,0x10
c0024dbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024dbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024dc3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024dc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024dcd:	a3 24 ec 02 c0       	mov    ds:0xc002ec24,eax
c0024dd2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024dd7:	99                   	cdq    
c0024dd8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024ddc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024de0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024de7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024dec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024df0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024df5:	ee                   	out    dx,al
c0024df6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024dfa:	0f b6 c0             	movzx  eax,al
c0024dfd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024e04:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024e08:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024e0c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024e11:	ee                   	out    dx,al
c0024e12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e16:	c1 f8 08             	sar    eax,0x8
c0024e19:	0f b6 c0             	movzx  eax,al
c0024e1c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024e23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024e27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024e2b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024e30:	ee                   	out    dx,al
c0024e31:	90                   	nop
c0024e32:	83 c4 10             	add    esp,0x10
c0024e35:	c3                   	ret    

c0024e36 <pitHandler(regs*, void*)>:
c0024e36:	83 ec 0c             	sub    esp,0xc
c0024e39:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0024e3e:	99                   	cdq    
c0024e3f:	52                   	push   edx
c0024e40:	50                   	push   eax
c0024e41:	6a 00                	push   0x0
c0024e43:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024e48:	e8 af 04 00 00       	call   c00252fc <__udivdi3>
c0024e4d:	83 c4 10             	add    esp,0x10
c0024e50:	83 ec 08             	sub    esp,0x8
c0024e53:	52                   	push   edx
c0024e54:	50                   	push   eax
c0024e55:	e8 ad 14 ff ff       	call   c0016307 <timerHandler(unsigned long long)>
c0024e5a:	83 c4 10             	add    esp,0x10
c0024e5d:	90                   	nop
c0024e5e:	83 c4 0c             	add    esp,0xc
c0024e61:	c3                   	ret    

c0024e62 <PIT::open(int, int, void*)>:
c0024e62:	83 ec 0c             	sub    esp,0xc
c0024e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e69:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e6b:	83 c0 24             	add    eax,0x24
c0024e6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e70:	83 ec 08             	sub    esp,0x8
c0024e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e7b:	ff d0                	call   eax
c0024e7d:	83 c4 10             	add    esp,0x10
c0024e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e84:	83 ec 0c             	sub    esp,0xc
c0024e87:	6a 00                	push   0x0
c0024e89:	6a 01                	push   0x1
c0024e8b:	68 36 4e 02 c0       	push   0xc0024e36
c0024e90:	6a 00                	push   0x0
c0024e92:	50                   	push   eax
c0024e93:	e8 ac eb fe ff       	call   c0013a44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024e98:	83 c4 20             	add    esp,0x20
c0024e9b:	89 c2                	mov    edx,eax
c0024e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ea1:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024ea7:	b8 00 00 00 00       	mov    eax,0x0
c0024eac:	83 c4 0c             	add    esp,0xc
c0024eaf:	c3                   	ret    

c0024eb0 <PIT::close(int, int, void*)>:
c0024eb0:	83 ec 0c             	sub    esp,0xc
c0024eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eb7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ec5:	6a 01                	push   0x1
c0024ec7:	68 36 4e 02 c0       	push   0xc0024e36
c0024ecc:	6a 00                	push   0x0
c0024ece:	50                   	push   eax
c0024ecf:	e8 ae eb fe ff       	call   c0013a82 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024ed4:	83 c4 10             	add    esp,0x10
c0024ed7:	b8 00 00 00 00       	mov    eax,0x0
c0024edc:	83 c4 0c             	add    esp,0xc
c0024edf:	c3                   	ret    

c0024ee0 <PIT::PIT()>:
c0024ee0:	83 ec 0c             	sub    esp,0xc
c0024ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ee7:	83 ec 08             	sub    esp,0x8
c0024eea:	68 78 b7 02 c0       	push   0xc002b778
c0024eef:	50                   	push   eax
c0024ef0:	e8 83 13 ff ff       	call   c0016278 <Timer::Timer(char const*)>
c0024ef5:	83 c4 10             	add    esp,0x10
c0024ef8:	ba a0 b7 02 c0       	mov    edx,0xc002b7a0
c0024efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f01:	89 10                	mov    DWORD PTR [eax],edx
c0024f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024f0d:	0f b6 d0             	movzx  edx,al
c0024f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f14:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024f25:	0f b6 d0             	movzx  edx,al
c0024f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f2c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024f3b:	8d 50 01             	lea    edx,[eax+0x1]
c0024f3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024f42:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024f48:	0f b6 d0             	movzx  edx,al
c0024f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f4f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024f53:	83 e1 3f             	and    ecx,0x3f
c0024f56:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024f5a:	90                   	nop
c0024f5b:	83 c4 0c             	add    esp,0xc
c0024f5e:	c3                   	ret    
c0024f5f:	90                   	nop

c0024f60 <avxDetect>:
c0024f60:	b8 00 00 00 00       	mov    eax,0x0
c0024f65:	c3                   	ret    

c0024f66 <avxSave>:
c0024f66:	c3                   	ret    

c0024f67 <avxLoad>:
c0024f67:	c3                   	ret    

c0024f68 <avxInit>:
c0024f68:	c3                   	ret    

c0024f69 <avxClose>:
c0024f69:	c3                   	ret    

c0024f6a <wouldSheSayYes>:
c0024f6a:	c3                   	ret    
c0024f6b:	49                   	dec    ecx
c0024f6c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0024f70:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0024f74:	75 20                	jne    c0024f96 <sseDetect.noSSE+0x1>
c0024f76:	4e                   	dec    esi
c0024f77:	79 61                	jns    c0024fda <x87Detect+0x14>
c0024f79:	68 2e 2e 2e 00       	push   0x2e2e2e
c0024f7e:	66 90                	xchg   ax,ax

c0024f80 <absolutelyNoChanceInHell>:
c0024f80:	b8 01 00 00 00       	mov    eax,0x1
c0024f85:	0f a2                	cpuid  
c0024f87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0024f8d:	74 06                	je     c0024f95 <sseDetect.noSSE>
c0024f8f:	b8 01 00 00 00       	mov    eax,0x1
c0024f94:	c3                   	ret    

c0024f95 <sseDetect.noSSE>:
c0024f95:	31 c0                	xor    eax,eax
c0024f97:	c3                   	ret    

c0024f98 <sseSave>:
c0024f98:	0f ae 44 24 08       	fxsave [esp+0x8]
c0024f9d:	c3                   	ret    

c0024f9e <sseLoad>:
c0024f9e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0024fa3:	c3                   	ret    

c0024fa4 <sseInit>:
c0024fa4:	e8 43 00 00 00       	call   c0024fec <x87Init>
c0024fa9:	0f 20 e0             	mov    eax,cr4
c0024fac:	66 0d 00 06          	or     ax,0x600
c0024fb0:	0f 22 e0             	mov    cr4,eax
c0024fb3:	c3                   	ret    

c0024fb4 <sseClose>:
c0024fb4:	c3                   	ret    
c0024fb5:	66 90                	xchg   ax,ax
c0024fb7:	66 90                	xchg   ax,ax
c0024fb9:	66 90                	xchg   ax,ax
c0024fbb:	66 90                	xchg   ax,ax
c0024fbd:	66 90                	xchg   ax,ax
c0024fbf:	90                   	nop

c0024fc0 <value_37F>:
c0024fc0:	7f 03                	jg     c0024fc5 <value_37A+0x1>

c0024fc2 <value_37E>:
c0024fc2:	7e 03                	jle    c0024fc7 <x87Detect+0x1>

c0024fc4 <value_37A>:
c0024fc4:	7a 03                	jp     c0024fc9 <x87Detect+0x3>

c0024fc6 <x87Detect>:
c0024fc6:	b8 01 00 00 00       	mov    eax,0x1
c0024fcb:	0f a2                	cpuid  
c0024fcd:	f7 c2 01 00 00 00    	test   edx,0x1
c0024fd3:	74 06                	je     c0024fdb <x87Detect.nox87>
c0024fd5:	b8 01 00 00 00       	mov    eax,0x1
c0024fda:	c3                   	ret    

c0024fdb <x87Detect.nox87>:
c0024fdb:	b8 00 00 00 00       	mov    eax,0x0
c0024fe0:	c3                   	ret    

c0024fe1 <x87Save>:
c0024fe1:	9b dd 74 24 08       	fsave  [esp+0x8]
c0024fe6:	c3                   	ret    

c0024fe7 <x87Load>:
c0024fe7:	dd 64 24 08          	frstor [esp+0x8]
c0024feb:	c3                   	ret    

c0024fec <x87Init>:
c0024fec:	9b db e3             	finit  
c0024fef:	0f 20 c0             	mov    eax,cr0
c0024ff2:	66 25 fb ff          	and    ax,0xfffb
c0024ff6:	66 0d 22 00          	or     ax,0x22
c0024ffa:	0f 22 c0             	mov    cr0,eax
c0024ffd:	0f 06                	clts   
c0024fff:	d9 2d c4 4f 02 c0    	fldcw  WORD PTR ds:0xc0024fc4
c0025005:	c3                   	ret    

c0025006 <x87Close>:
c0025006:	c3                   	ret    
c0025007:	90                   	nop

c0025008 <__do_global_ctors_aux>:
c0025008:	a1 fc 7a 02 c0       	mov    eax,ds:0xc0027afc
c002500d:	83 f8 ff             	cmp    eax,0xffffffff
c0025010:	74 1a                	je     c002502c <__do_global_ctors_aux+0x24>
c0025012:	55                   	push   ebp
c0025013:	89 e5                	mov    ebp,esp
c0025015:	53                   	push   ebx
c0025016:	52                   	push   edx
c0025017:	bb fc 7a 02 c0       	mov    ebx,0xc0027afc
c002501c:	ff d0                	call   eax
c002501e:	83 eb 04             	sub    ebx,0x4
c0025021:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025023:	83 f8 ff             	cmp    eax,0xffffffff
c0025026:	75 f4                	jne    c002501c <__do_global_ctors_aux+0x14>
c0025028:	58                   	pop    eax
c0025029:	5b                   	pop    ebx
c002502a:	5d                   	pop    ebp
c002502b:	c3                   	ret    
c002502c:	c3                   	ret    
c002502d:	66 90                	xchg   ax,ax
c002502f:	90                   	nop

c0025030 <__divdi3>:
c0025030:	55                   	push   ebp
c0025031:	57                   	push   edi
c0025032:	56                   	push   esi
c0025033:	53                   	push   ebx
c0025034:	83 ec 1c             	sub    esp,0x1c
c0025037:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002503b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002503f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025042:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025046:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002504a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002504e:	85 db                	test   ebx,ebx
c0025050:	0f 88 8e 00 00 00    	js     c00250e4 <__divdi3+0xb4>
c0025056:	89 dd                	mov    ebp,ebx
c0025058:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025060:	89 d3                	mov    ebx,edx
c0025062:	85 d2                	test   edx,edx
c0025064:	79 0d                	jns    c0025073 <__divdi3+0x43>
c0025066:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002506a:	f7 d8                	neg    eax
c002506c:	83 d2 00             	adc    edx,0x0
c002506f:	f7 da                	neg    edx
c0025071:	89 d3                	mov    ebx,edx
c0025073:	89 c7                	mov    edi,eax
c0025075:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025078:	85 db                	test   ebx,ebx
c002507a:	75 48                	jne    c00250c4 <__divdi3+0x94>
c002507c:	39 ef                	cmp    edi,ebp
c002507e:	76 24                	jbe    c00250a4 <__divdi3+0x74>
c0025080:	89 ea                	mov    edx,ebp
c0025082:	f7 f7                	div    edi
c0025084:	89 c1                	mov    ecx,eax
c0025086:	31 f6                	xor    esi,esi
c0025088:	89 c8                	mov    eax,ecx
c002508a:	89 f2                	mov    edx,esi
c002508c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025090:	85 c9                	test   ecx,ecx
c0025092:	74 07                	je     c002509b <__divdi3+0x6b>
c0025094:	f7 d8                	neg    eax
c0025096:	83 d2 00             	adc    edx,0x0
c0025099:	f7 da                	neg    edx
c002509b:	83 c4 1c             	add    esp,0x1c
c002509e:	5b                   	pop    ebx
c002509f:	5e                   	pop    esi
c00250a0:	5f                   	pop    edi
c00250a1:	5d                   	pop    ebp
c00250a2:	c3                   	ret    
c00250a3:	90                   	nop
c00250a4:	85 ff                	test   edi,edi
c00250a6:	75 0b                	jne    c00250b3 <__divdi3+0x83>
c00250a8:	b8 01 00 00 00       	mov    eax,0x1
c00250ad:	31 d2                	xor    edx,edx
c00250af:	f7 f3                	div    ebx
c00250b1:	89 c7                	mov    edi,eax
c00250b3:	31 d2                	xor    edx,edx
c00250b5:	89 e8                	mov    eax,ebp
c00250b7:	f7 f7                	div    edi
c00250b9:	89 c6                	mov    esi,eax
c00250bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00250be:	f7 f7                	div    edi
c00250c0:	89 c1                	mov    ecx,eax
c00250c2:	eb c4                	jmp    c0025088 <__divdi3+0x58>
c00250c4:	39 eb                	cmp    ebx,ebp
c00250c6:	77 3c                	ja     c0025104 <__divdi3+0xd4>
c00250c8:	0f bd f3             	bsr    esi,ebx
c00250cb:	83 f6 1f             	xor    esi,0x1f
c00250ce:	75 40                	jne    c0025110 <__divdi3+0xe0>
c00250d0:	39 eb                	cmp    ebx,ebp
c00250d2:	72 09                	jb     c00250dd <__divdi3+0xad>
c00250d4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00250d7:	0f 87 97 00 00 00    	ja     c0025174 <__divdi3+0x144>
c00250dd:	b9 01 00 00 00       	mov    ecx,0x1
c00250e2:	eb a4                	jmp    c0025088 <__divdi3+0x58>
c00250e4:	f7 d9                	neg    ecx
c00250e6:	83 d3 00             	adc    ebx,0x0
c00250e9:	f7 db                	neg    ebx
c00250eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00250ee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00250f2:	89 dd                	mov    ebp,ebx
c00250f4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00250fc:	e9 5f ff ff ff       	jmp    c0025060 <__divdi3+0x30>
c0025101:	8d 76 00             	lea    esi,[esi+0x0]
c0025104:	31 f6                	xor    esi,esi
c0025106:	31 c9                	xor    ecx,ecx
c0025108:	e9 7b ff ff ff       	jmp    c0025088 <__divdi3+0x58>
c002510d:	8d 76 00             	lea    esi,[esi+0x0]
c0025110:	b8 20 00 00 00       	mov    eax,0x20
c0025115:	29 f0                	sub    eax,esi
c0025117:	89 f1                	mov    ecx,esi
c0025119:	d3 e3                	shl    ebx,cl
c002511b:	89 fa                	mov    edx,edi
c002511d:	88 c1                	mov    cl,al
c002511f:	d3 ea                	shr    edx,cl
c0025121:	09 da                	or     edx,ebx
c0025123:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025127:	89 f1                	mov    ecx,esi
c0025129:	d3 e7                	shl    edi,cl
c002512b:	89 eb                	mov    ebx,ebp
c002512d:	88 c1                	mov    cl,al
c002512f:	d3 eb                	shr    ebx,cl
c0025131:	89 f1                	mov    ecx,esi
c0025133:	d3 e5                	shl    ebp,cl
c0025135:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025138:	88 c1                	mov    cl,al
c002513a:	d3 ea                	shr    edx,cl
c002513c:	09 d5                	or     ebp,edx
c002513e:	89 e8                	mov    eax,ebp
c0025140:	89 da                	mov    edx,ebx
c0025142:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025146:	89 d3                	mov    ebx,edx
c0025148:	89 c5                	mov    ebp,eax
c002514a:	f7 e7                	mul    edi
c002514c:	39 d3                	cmp    ebx,edx
c002514e:	72 18                	jb     c0025168 <__divdi3+0x138>
c0025150:	74 0a                	je     c002515c <__divdi3+0x12c>
c0025152:	89 e9                	mov    ecx,ebp
c0025154:	31 f6                	xor    esi,esi
c0025156:	e9 2d ff ff ff       	jmp    c0025088 <__divdi3+0x58>
c002515b:	90                   	nop
c002515c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002515f:	89 f1                	mov    ecx,esi
c0025161:	d3 e7                	shl    edi,cl
c0025163:	39 c7                	cmp    edi,eax
c0025165:	73 eb                	jae    c0025152 <__divdi3+0x122>
c0025167:	90                   	nop
c0025168:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002516b:	31 f6                	xor    esi,esi
c002516d:	e9 16 ff ff ff       	jmp    c0025088 <__divdi3+0x58>
c0025172:	66 90                	xchg   ax,ax
c0025174:	31 c9                	xor    ecx,ecx
c0025176:	e9 0d ff ff ff       	jmp    c0025088 <__divdi3+0x58>
c002517b:	90                   	nop

c002517c <__moddi3>:
c002517c:	55                   	push   ebp
c002517d:	57                   	push   edi
c002517e:	56                   	push   esi
c002517f:	53                   	push   ebx
c0025180:	83 ec 2c             	sub    esp,0x2c
c0025183:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025187:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002518b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002518f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025193:	85 db                	test   ebx,ebx
c0025195:	0f 88 85 00 00 00    	js     c0025220 <__moddi3+0xa4>
c002519b:	89 de                	mov    esi,ebx
c002519d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00251a5:	89 d7                	mov    edi,edx
c00251a7:	85 d2                	test   edx,edx
c00251a9:	79 09                	jns    c00251b4 <__moddi3+0x38>
c00251ab:	f7 d8                	neg    eax
c00251ad:	83 d2 00             	adc    edx,0x0
c00251b0:	f7 da                	neg    edx
c00251b2:	89 d7                	mov    edi,edx
c00251b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00251b8:	89 cd                	mov    ebp,ecx
c00251ba:	85 ff                	test   edi,edi
c00251bc:	75 52                	jne    c0025210 <__moddi3+0x94>
c00251be:	89 c3                	mov    ebx,eax
c00251c0:	39 f0                	cmp    eax,esi
c00251c2:	76 24                	jbe    c00251e8 <__moddi3+0x6c>
c00251c4:	89 c8                	mov    eax,ecx
c00251c6:	89 f2                	mov    edx,esi
c00251c8:	f7 f3                	div    ebx
c00251ca:	89 d6                	mov    esi,edx
c00251cc:	89 f0                	mov    eax,esi
c00251ce:	31 d2                	xor    edx,edx
c00251d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00251d4:	85 c9                	test   ecx,ecx
c00251d6:	74 07                	je     c00251df <__moddi3+0x63>
c00251d8:	f7 d8                	neg    eax
c00251da:	83 d2 00             	adc    edx,0x0
c00251dd:	f7 da                	neg    edx
c00251df:	83 c4 2c             	add    esp,0x2c
c00251e2:	5b                   	pop    ebx
c00251e3:	5e                   	pop    esi
c00251e4:	5f                   	pop    edi
c00251e5:	5d                   	pop    ebp
c00251e6:	c3                   	ret    
c00251e7:	90                   	nop
c00251e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00251ec:	85 db                	test   ebx,ebx
c00251ee:	75 0d                	jne    c00251fd <__moddi3+0x81>
c00251f0:	b8 01 00 00 00       	mov    eax,0x1
c00251f5:	31 d2                	xor    edx,edx
c00251f7:	f7 f7                	div    edi
c00251f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00251fd:	89 f0                	mov    eax,esi
c00251ff:	31 d2                	xor    edx,edx
c0025201:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025205:	f7 f7                	div    edi
c0025207:	89 e8                	mov    eax,ebp
c0025209:	f7 f7                	div    edi
c002520b:	89 d6                	mov    esi,edx
c002520d:	eb bd                	jmp    c00251cc <__moddi3+0x50>
c002520f:	90                   	nop
c0025210:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025214:	39 f7                	cmp    edi,esi
c0025216:	76 20                	jbe    c0025238 <__moddi3+0xbc>
c0025218:	89 c8                	mov    eax,ecx
c002521a:	89 f2                	mov    edx,esi
c002521c:	eb b2                	jmp    c00251d0 <__moddi3+0x54>
c002521e:	66 90                	xchg   ax,ax
c0025220:	f7 d9                	neg    ecx
c0025222:	83 d3 00             	adc    ebx,0x0
c0025225:	f7 db                	neg    ebx
c0025227:	89 de                	mov    esi,ebx
c0025229:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025231:	e9 6f ff ff ff       	jmp    c00251a5 <__moddi3+0x29>
c0025236:	66 90                	xchg   ax,ax
c0025238:	0f bd c7             	bsr    eax,edi
c002523b:	83 f0 1f             	xor    eax,0x1f
c002523e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025242:	75 24                	jne    c0025268 <__moddi3+0xec>
c0025244:	39 f7                	cmp    edi,esi
c0025246:	72 06                	jb     c002524e <__moddi3+0xd2>
c0025248:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002524c:	77 0c                	ja     c002525a <__moddi3+0xde>
c002524e:	89 e9                	mov    ecx,ebp
c0025250:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025254:	19 fe                	sbb    esi,edi
c0025256:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002525a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002525e:	89 f2                	mov    edx,esi
c0025260:	e9 6b ff ff ff       	jmp    c00251d0 <__moddi3+0x54>
c0025265:	8d 76 00             	lea    esi,[esi+0x0]
c0025268:	b8 20 00 00 00       	mov    eax,0x20
c002526d:	89 c2                	mov    edx,eax
c002526f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025273:	29 da                	sub    edx,ebx
c0025275:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025279:	88 d9                	mov    cl,bl
c002527b:	d3 e7                	shl    edi,cl
c002527d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025281:	88 d1                	mov    cl,dl
c0025283:	d3 e8                	shr    eax,cl
c0025285:	09 c7                	or     edi,eax
c0025287:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002528b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002528f:	89 d8                	mov    eax,ebx
c0025291:	88 d9                	mov    cl,bl
c0025293:	d3 e7                	shl    edi,cl
c0025295:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025299:	89 f3                	mov    ebx,esi
c002529b:	88 d1                	mov    cl,dl
c002529d:	d3 eb                	shr    ebx,cl
c002529f:	89 c7                	mov    edi,eax
c00252a1:	88 c1                	mov    cl,al
c00252a3:	d3 e6                	shl    esi,cl
c00252a5:	89 e8                	mov    eax,ebp
c00252a7:	88 d1                	mov    cl,dl
c00252a9:	d3 e8                	shr    eax,cl
c00252ab:	09 f0                	or     eax,esi
c00252ad:	89 f9                	mov    ecx,edi
c00252af:	d3 e5                	shl    ebp,cl
c00252b1:	89 da                	mov    edx,ebx
c00252b3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00252b7:	89 d3                	mov    ebx,edx
c00252b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00252bd:	89 c6                	mov    esi,eax
c00252bf:	89 d1                	mov    ecx,edx
c00252c1:	39 d3                	cmp    ebx,edx
c00252c3:	72 27                	jb     c00252ec <__moddi3+0x170>
c00252c5:	74 21                	je     c00252e8 <__moddi3+0x16c>
c00252c7:	29 f5                	sub    ebp,esi
c00252c9:	19 cb                	sbb    ebx,ecx
c00252cb:	89 de                	mov    esi,ebx
c00252cd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00252d1:	d3 e6                	shl    esi,cl
c00252d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00252d7:	89 f9                	mov    ecx,edi
c00252d9:	d3 ed                	shr    ebp,cl
c00252db:	09 ee                	or     esi,ebp
c00252dd:	89 f0                	mov    eax,esi
c00252df:	d3 eb                	shr    ebx,cl
c00252e1:	89 da                	mov    edx,ebx
c00252e3:	e9 e8 fe ff ff       	jmp    c00251d0 <__moddi3+0x54>
c00252e8:	39 c5                	cmp    ebp,eax
c00252ea:	73 db                	jae    c00252c7 <__moddi3+0x14b>
c00252ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00252f0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00252f4:	89 d1                	mov    ecx,edx
c00252f6:	89 c6                	mov    esi,eax
c00252f8:	eb cd                	jmp    c00252c7 <__moddi3+0x14b>
c00252fa:	66 90                	xchg   ax,ax

c00252fc <__udivdi3>:
c00252fc:	55                   	push   ebp
c00252fd:	57                   	push   edi
c00252fe:	56                   	push   esi
c00252ff:	53                   	push   ebx
c0025300:	83 ec 1c             	sub    esp,0x1c
c0025303:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025307:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002530b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002530f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025313:	85 d2                	test   edx,edx
c0025315:	75 41                	jne    c0025358 <__udivdi3+0x5c>
c0025317:	39 f7                	cmp    edi,esi
c0025319:	76 15                	jbe    c0025330 <__udivdi3+0x34>
c002531b:	89 e8                	mov    eax,ebp
c002531d:	89 f2                	mov    edx,esi
c002531f:	f7 f7                	div    edi
c0025321:	31 db                	xor    ebx,ebx
c0025323:	89 da                	mov    edx,ebx
c0025325:	83 c4 1c             	add    esp,0x1c
c0025328:	5b                   	pop    ebx
c0025329:	5e                   	pop    esi
c002532a:	5f                   	pop    edi
c002532b:	5d                   	pop    ebp
c002532c:	c3                   	ret    
c002532d:	8d 76 00             	lea    esi,[esi+0x0]
c0025330:	89 f9                	mov    ecx,edi
c0025332:	85 ff                	test   edi,edi
c0025334:	75 0b                	jne    c0025341 <__udivdi3+0x45>
c0025336:	b8 01 00 00 00       	mov    eax,0x1
c002533b:	31 d2                	xor    edx,edx
c002533d:	f7 f7                	div    edi
c002533f:	89 c1                	mov    ecx,eax
c0025341:	31 d2                	xor    edx,edx
c0025343:	89 f0                	mov    eax,esi
c0025345:	f7 f1                	div    ecx
c0025347:	89 c3                	mov    ebx,eax
c0025349:	89 e8                	mov    eax,ebp
c002534b:	f7 f1                	div    ecx
c002534d:	89 da                	mov    edx,ebx
c002534f:	83 c4 1c             	add    esp,0x1c
c0025352:	5b                   	pop    ebx
c0025353:	5e                   	pop    esi
c0025354:	5f                   	pop    edi
c0025355:	5d                   	pop    ebp
c0025356:	c3                   	ret    
c0025357:	90                   	nop
c0025358:	39 f2                	cmp    edx,esi
c002535a:	77 1c                	ja     c0025378 <__udivdi3+0x7c>
c002535c:	0f bd da             	bsr    ebx,edx
c002535f:	83 f3 1f             	xor    ebx,0x1f
c0025362:	75 24                	jne    c0025388 <__udivdi3+0x8c>
c0025364:	39 f2                	cmp    edx,esi
c0025366:	72 08                	jb     c0025370 <__udivdi3+0x74>
c0025368:	39 ef                	cmp    edi,ebp
c002536a:	0f 87 84 00 00 00    	ja     c00253f4 <__udivdi3+0xf8>
c0025370:	b8 01 00 00 00       	mov    eax,0x1
c0025375:	eb ac                	jmp    c0025323 <__udivdi3+0x27>
c0025377:	90                   	nop
c0025378:	31 db                	xor    ebx,ebx
c002537a:	31 c0                	xor    eax,eax
c002537c:	89 da                	mov    edx,ebx
c002537e:	83 c4 1c             	add    esp,0x1c
c0025381:	5b                   	pop    ebx
c0025382:	5e                   	pop    esi
c0025383:	5f                   	pop    edi
c0025384:	5d                   	pop    ebp
c0025385:	c3                   	ret    
c0025386:	66 90                	xchg   ax,ax
c0025388:	b8 20 00 00 00       	mov    eax,0x20
c002538d:	29 d8                	sub    eax,ebx
c002538f:	88 d9                	mov    cl,bl
c0025391:	d3 e2                	shl    edx,cl
c0025393:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025397:	89 fa                	mov    edx,edi
c0025399:	88 c1                	mov    cl,al
c002539b:	d3 ea                	shr    edx,cl
c002539d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00253a1:	09 d1                	or     ecx,edx
c00253a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00253a7:	88 d9                	mov    cl,bl
c00253a9:	d3 e7                	shl    edi,cl
c00253ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00253af:	89 f7                	mov    edi,esi
c00253b1:	88 c1                	mov    cl,al
c00253b3:	d3 ef                	shr    edi,cl
c00253b5:	88 d9                	mov    cl,bl
c00253b7:	d3 e6                	shl    esi,cl
c00253b9:	89 ea                	mov    edx,ebp
c00253bb:	88 c1                	mov    cl,al
c00253bd:	d3 ea                	shr    edx,cl
c00253bf:	09 d6                	or     esi,edx
c00253c1:	89 f0                	mov    eax,esi
c00253c3:	89 fa                	mov    edx,edi
c00253c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00253c9:	89 d7                	mov    edi,edx
c00253cb:	89 c6                	mov    esi,eax
c00253cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00253d1:	39 d7                	cmp    edi,edx
c00253d3:	72 13                	jb     c00253e8 <__udivdi3+0xec>
c00253d5:	74 09                	je     c00253e0 <__udivdi3+0xe4>
c00253d7:	89 f0                	mov    eax,esi
c00253d9:	31 db                	xor    ebx,ebx
c00253db:	e9 43 ff ff ff       	jmp    c0025323 <__udivdi3+0x27>
c00253e0:	88 d9                	mov    cl,bl
c00253e2:	d3 e5                	shl    ebp,cl
c00253e4:	39 c5                	cmp    ebp,eax
c00253e6:	73 ef                	jae    c00253d7 <__udivdi3+0xdb>
c00253e8:	8d 46 ff             	lea    eax,[esi-0x1]
c00253eb:	31 db                	xor    ebx,ebx
c00253ed:	e9 31 ff ff ff       	jmp    c0025323 <__udivdi3+0x27>
c00253f2:	66 90                	xchg   ax,ax
c00253f4:	31 c0                	xor    eax,eax
c00253f6:	e9 28 ff ff ff       	jmp    c0025323 <__udivdi3+0x27>
c00253fb:	90                   	nop

c00253fc <__umoddi3>:
c00253fc:	55                   	push   ebp
c00253fd:	57                   	push   edi
c00253fe:	56                   	push   esi
c00253ff:	53                   	push   ebx
c0025400:	83 ec 1c             	sub    esp,0x1c
c0025403:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025407:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002540b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002540f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0025413:	89 da                	mov    edx,ebx
c0025415:	85 c0                	test   eax,eax
c0025417:	75 37                	jne    c0025450 <__umoddi3+0x54>
c0025419:	39 df                	cmp    edi,ebx
c002541b:	76 13                	jbe    c0025430 <__umoddi3+0x34>
c002541d:	89 f0                	mov    eax,esi
c002541f:	f7 f7                	div    edi
c0025421:	89 d0                	mov    eax,edx
c0025423:	31 d2                	xor    edx,edx
c0025425:	83 c4 1c             	add    esp,0x1c
c0025428:	5b                   	pop    ebx
c0025429:	5e                   	pop    esi
c002542a:	5f                   	pop    edi
c002542b:	5d                   	pop    ebp
c002542c:	c3                   	ret    
c002542d:	8d 76 00             	lea    esi,[esi+0x0]
c0025430:	89 fd                	mov    ebp,edi
c0025432:	85 ff                	test   edi,edi
c0025434:	75 0b                	jne    c0025441 <__umoddi3+0x45>
c0025436:	b8 01 00 00 00       	mov    eax,0x1
c002543b:	31 d2                	xor    edx,edx
c002543d:	f7 f7                	div    edi
c002543f:	89 c5                	mov    ebp,eax
c0025441:	89 d8                	mov    eax,ebx
c0025443:	31 d2                	xor    edx,edx
c0025445:	f7 f5                	div    ebp
c0025447:	89 f0                	mov    eax,esi
c0025449:	f7 f5                	div    ebp
c002544b:	89 d0                	mov    eax,edx
c002544d:	eb d4                	jmp    c0025423 <__umoddi3+0x27>
c002544f:	90                   	nop
c0025450:	89 f1                	mov    ecx,esi
c0025452:	39 d8                	cmp    eax,ebx
c0025454:	76 0a                	jbe    c0025460 <__umoddi3+0x64>
c0025456:	89 f0                	mov    eax,esi
c0025458:	83 c4 1c             	add    esp,0x1c
c002545b:	5b                   	pop    ebx
c002545c:	5e                   	pop    esi
c002545d:	5f                   	pop    edi
c002545e:	5d                   	pop    ebp
c002545f:	c3                   	ret    
c0025460:	0f bd e8             	bsr    ebp,eax
c0025463:	83 f5 1f             	xor    ebp,0x1f
c0025466:	75 1c                	jne    c0025484 <__umoddi3+0x88>
c0025468:	39 d8                	cmp    eax,ebx
c002546a:	72 04                	jb     c0025470 <__umoddi3+0x74>
c002546c:	39 f7                	cmp    edi,esi
c002546e:	77 08                	ja     c0025478 <__umoddi3+0x7c>
c0025470:	89 da                	mov    edx,ebx
c0025472:	29 fe                	sub    esi,edi
c0025474:	19 c2                	sbb    edx,eax
c0025476:	89 f1                	mov    ecx,esi
c0025478:	89 c8                	mov    eax,ecx
c002547a:	83 c4 1c             	add    esp,0x1c
c002547d:	5b                   	pop    ebx
c002547e:	5e                   	pop    esi
c002547f:	5f                   	pop    edi
c0025480:	5d                   	pop    ebp
c0025481:	c3                   	ret    
c0025482:	66 90                	xchg   ax,ax
c0025484:	ba 20 00 00 00       	mov    edx,0x20
c0025489:	29 ea                	sub    edx,ebp
c002548b:	89 e9                	mov    ecx,ebp
c002548d:	d3 e0                	shl    eax,cl
c002548f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025493:	89 f8                	mov    eax,edi
c0025495:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025499:	88 d1                	mov    cl,dl
c002549b:	d3 e8                	shr    eax,cl
c002549d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00254a1:	09 c1                	or     ecx,eax
c00254a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00254a7:	89 e9                	mov    ecx,ebp
c00254a9:	d3 e7                	shl    edi,cl
c00254ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00254af:	89 d8                	mov    eax,ebx
c00254b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00254b5:	88 d1                	mov    cl,dl
c00254b7:	d3 e8                	shr    eax,cl
c00254b9:	89 c7                	mov    edi,eax
c00254bb:	89 e9                	mov    ecx,ebp
c00254bd:	d3 e3                	shl    ebx,cl
c00254bf:	89 f0                	mov    eax,esi
c00254c1:	88 d1                	mov    cl,dl
c00254c3:	d3 e8                	shr    eax,cl
c00254c5:	09 d8                	or     eax,ebx
c00254c7:	89 e9                	mov    ecx,ebp
c00254c9:	d3 e6                	shl    esi,cl
c00254cb:	89 f3                	mov    ebx,esi
c00254cd:	89 fa                	mov    edx,edi
c00254cf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00254d3:	89 d1                	mov    ecx,edx
c00254d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00254d9:	89 c6                	mov    esi,eax
c00254db:	89 d7                	mov    edi,edx
c00254dd:	39 d1                	cmp    ecx,edx
c00254df:	72 27                	jb     c0025508 <__umoddi3+0x10c>
c00254e1:	74 21                	je     c0025504 <__umoddi3+0x108>
c00254e3:	89 ca                	mov    edx,ecx
c00254e5:	29 f3                	sub    ebx,esi
c00254e7:	19 fa                	sbb    edx,edi
c00254e9:	89 d0                	mov    eax,edx
c00254eb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00254ef:	d3 e0                	shl    eax,cl
c00254f1:	89 e9                	mov    ecx,ebp
c00254f3:	d3 eb                	shr    ebx,cl
c00254f5:	09 d8                	or     eax,ebx
c00254f7:	d3 ea                	shr    edx,cl
c00254f9:	83 c4 1c             	add    esp,0x1c
c00254fc:	5b                   	pop    ebx
c00254fd:	5e                   	pop    esi
c00254fe:	5f                   	pop    edi
c00254ff:	5d                   	pop    ebp
c0025500:	c3                   	ret    
c0025501:	8d 76 00             	lea    esi,[esi+0x0]
c0025504:	39 c3                	cmp    ebx,eax
c0025506:	73 db                	jae    c00254e3 <__umoddi3+0xe7>
c0025508:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002550c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0025510:	89 d7                	mov    edi,edx
c0025512:	89 c6                	mov    esi,eax
c0025514:	eb cd                	jmp    c00254e3 <__umoddi3+0xe7>

c0025516 <__addsf3>:
c0025516:	55                   	push   ebp
c0025517:	89 e5                	mov    ebp,esp
c0025519:	57                   	push   edi
c002551a:	56                   	push   esi
c002551b:	53                   	push   ebx
c002551c:	83 ec 08             	sub    esp,0x8
c002551f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025522:	89 fa                	mov    edx,edi
c0025524:	89 f8                	mov    eax,edi
c0025526:	c1 f8 17             	sar    eax,0x17
c0025529:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002552c:	c1 e2 08             	shl    edx,0x8
c002552f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025535:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025538:	89 de                	mov    esi,ebx
c002553a:	c1 fe 17             	sar    esi,0x17
c002553d:	c1 e3 08             	shl    ebx,0x8
c0025540:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025546:	31 f0                	xor    eax,esi
c0025548:	0f 88 3b 01 00 00    	js     c0025689 <__addsf3+0x173>
c002554e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025551:	29 f1                	sub    ecx,esi
c0025553:	85 c9                	test   ecx,ecx
c0025555:	7e 54                	jle    c00255ab <__addsf3+0x95>
c0025557:	89 f0                	mov    eax,esi
c0025559:	84 c0                	test   al,al
c002555b:	75 10                	jne    c002556d <__addsf3+0x57>
c002555d:	85 db                	test   ebx,ebx
c002555f:	0f 84 aa 02 00 00    	je     c002580f <__addsf3+0x2f9>
c0025565:	49                   	dec    ecx
c0025566:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025569:	74 38                	je     c00255a3 <__addsf3+0x8d>
c002556b:	eb 13                	jmp    c0025580 <__addsf3+0x6a>
c002556d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025570:	f7 d0                	not    eax
c0025572:	84 c0                	test   al,al
c0025574:	0f 84 95 02 00 00    	je     c002580f <__addsf3+0x2f9>
c002557a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025580:	83 f9 1f             	cmp    ecx,0x1f
c0025583:	0f 8f 86 02 00 00    	jg     c002580f <__addsf3+0x2f9>
c0025589:	89 de                	mov    esi,ebx
c002558b:	d3 ee                	shr    esi,cl
c002558d:	b8 20 00 00 00       	mov    eax,0x20
c0025592:	29 c8                	sub    eax,ecx
c0025594:	89 c1                	mov    ecx,eax
c0025596:	d3 e3                	shl    ebx,cl
c0025598:	31 c0                	xor    eax,eax
c002559a:	85 db                	test   ebx,ebx
c002559c:	0f 95 c0             	setne  al
c002559f:	09 f0                	or     eax,esi
c00255a1:	01 d0                	add    eax,edx
c00255a3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00255a6:	e9 b6 00 00 00       	jmp    c0025661 <__addsf3+0x14b>
c00255ab:	74 5c                	je     c0025609 <__addsf3+0xf3>
c00255ad:	89 f1                	mov    ecx,esi
c00255af:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00255b2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00255b5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00255b9:	75 14                	jne    c00255cf <__addsf3+0xb9>
c00255bb:	85 d2                	test   edx,edx
c00255bd:	0f 84 4c 02 00 00    	je     c002580f <__addsf3+0x2f9>
c00255c3:	49                   	dec    ecx
c00255c4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00255c7:	0f 84 94 00 00 00    	je     c0025661 <__addsf3+0x14b>
c00255cd:	eb 12                	jmp    c00255e1 <__addsf3+0xcb>
c00255cf:	89 f0                	mov    eax,esi
c00255d1:	f7 d0                	not    eax
c00255d3:	84 c0                	test   al,al
c00255d5:	0f 84 34 02 00 00    	je     c002580f <__addsf3+0x2f9>
c00255db:	81 ca 00 00 00 80    	or     edx,0x80000000
c00255e1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00255e4:	83 f9 1f             	cmp    ecx,0x1f
c00255e7:	0f 8f 22 02 00 00    	jg     c002580f <__addsf3+0x2f9>
c00255ed:	89 d7                	mov    edi,edx
c00255ef:	d3 ef                	shr    edi,cl
c00255f1:	b8 20 00 00 00       	mov    eax,0x20
c00255f6:	29 c8                	sub    eax,ecx
c00255f8:	89 c1                	mov    ecx,eax
c00255fa:	d3 e2                	shl    edx,cl
c00255fc:	31 c0                	xor    eax,eax
c00255fe:	85 d2                	test   edx,edx
c0025600:	0f 95 c0             	setne  al
c0025603:	09 f8                	or     eax,edi
c0025605:	01 d8                	add    eax,ebx
c0025607:	eb 58                	jmp    c0025661 <__addsf3+0x14b>
c0025609:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002560c:	8d 70 01             	lea    esi,[eax+0x1]
c002560f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0025615:	75 32                	jne    c0025649 <__addsf3+0x133>
c0025617:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002561b:	75 1f                	jne    c002563c <__addsf3+0x126>
c002561d:	85 d2                	test   edx,edx
c002561f:	0f 84 e0 01 00 00    	je     c0025805 <__addsf3+0x2ef>
c0025625:	85 db                	test   ebx,ebx
c0025627:	0f 84 e2 01 00 00    	je     c002580f <__addsf3+0x2f9>
c002562d:	89 d0                	mov    eax,edx
c002562f:	01 d8                	add    eax,ebx
c0025631:	0f 89 a9 01 00 00    	jns    c00257e0 <__addsf3+0x2ca>
c0025637:	e9 9d 01 00 00       	jmp    c00257d9 <__addsf3+0x2c3>
c002563c:	85 d2                	test   edx,edx
c002563e:	0f 85 cb 01 00 00    	jne    c002580f <__addsf3+0x2f9>
c0025644:	e9 bc 01 00 00       	jmp    c0025805 <__addsf3+0x2ef>
c0025649:	31 c0                	xor    eax,eax
c002564b:	89 f1                	mov    ecx,esi
c002564d:	f7 d1                	not    ecx
c002564f:	84 c9                	test   cl,cl
c0025651:	0f 84 90 01 00 00    	je     c00257e7 <__addsf3+0x2d1>
c0025657:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002565a:	d1 e8                	shr    eax,1
c002565c:	e9 86 01 00 00       	jmp    c00257e7 <__addsf3+0x2d1>
c0025661:	85 c0                	test   eax,eax
c0025663:	0f 89 7e 01 00 00    	jns    c00257e7 <__addsf3+0x2d1>
c0025669:	46                   	inc    esi
c002566a:	89 f2                	mov    edx,esi
c002566c:	f7 d2                	not    edx
c002566e:	84 d2                	test   dl,dl
c0025670:	0f 84 6f 01 00 00    	je     c00257e5 <__addsf3+0x2cf>
c0025676:	89 c2                	mov    edx,eax
c0025678:	83 e2 01             	and    edx,0x1
c002567b:	d1 e8                	shr    eax,1
c002567d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025682:	09 d0                	or     eax,edx
c0025684:	e9 5e 01 00 00       	jmp    c00257e7 <__addsf3+0x2d1>
c0025689:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002568d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025690:	89 f0                	mov    eax,esi
c0025692:	0f b6 c0             	movzx  eax,al
c0025695:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025698:	29 c1                	sub    ecx,eax
c002569a:	85 c9                	test   ecx,ecx
c002569c:	7e 55                	jle    c00256f3 <__addsf3+0x1dd>
c002569e:	85 c0                	test   eax,eax
c00256a0:	75 11                	jne    c00256b3 <__addsf3+0x19d>
c00256a2:	85 db                	test   ebx,ebx
c00256a4:	0f 84 65 01 00 00    	je     c002580f <__addsf3+0x2f9>
c00256aa:	49                   	dec    ecx
c00256ab:	75 19                	jne    c00256c6 <__addsf3+0x1b0>
c00256ad:	89 d0                	mov    eax,edx
c00256af:	29 d8                	sub    eax,ebx
c00256b1:	eb 38                	jmp    c00256eb <__addsf3+0x1d5>
c00256b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256b6:	f7 d0                	not    eax
c00256b8:	84 c0                	test   al,al
c00256ba:	0f 84 4f 01 00 00    	je     c002580f <__addsf3+0x2f9>
c00256c0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00256c6:	83 f9 1f             	cmp    ecx,0x1f
c00256c9:	0f 8f 40 01 00 00    	jg     c002580f <__addsf3+0x2f9>
c00256cf:	89 de                	mov    esi,ebx
c00256d1:	d3 ee                	shr    esi,cl
c00256d3:	b8 20 00 00 00       	mov    eax,0x20
c00256d8:	29 c8                	sub    eax,ecx
c00256da:	89 c1                	mov    ecx,eax
c00256dc:	d3 e3                	shl    ebx,cl
c00256de:	31 c0                	xor    eax,eax
c00256e0:	85 db                	test   ebx,ebx
c00256e2:	0f 95 c0             	setne  al
c00256e5:	09 f0                	or     eax,esi
c00256e7:	29 c2                	sub    edx,eax
c00256e9:	89 d0                	mov    eax,edx
c00256eb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00256ee:	e9 af 00 00 00       	jmp    c00257a2 <__addsf3+0x28c>
c00256f3:	74 5c                	je     c0025751 <__addsf3+0x23b>
c00256f5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00256f8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00256fb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00256ff:	75 14                	jne    c0025715 <__addsf3+0x1ff>
c0025701:	85 d2                	test   edx,edx
c0025703:	0f 84 06 01 00 00    	je     c002580f <__addsf3+0x2f9>
c0025709:	48                   	dec    eax
c002570a:	75 1b                	jne    c0025727 <__addsf3+0x211>
c002570c:	89 d8                	mov    eax,ebx
c002570e:	29 d0                	sub    eax,edx
c0025710:	e9 8d 00 00 00       	jmp    c00257a2 <__addsf3+0x28c>
c0025715:	89 f1                	mov    ecx,esi
c0025717:	f7 d1                	not    ecx
c0025719:	84 c9                	test   cl,cl
c002571b:	0f 84 ee 00 00 00    	je     c002580f <__addsf3+0x2f9>
c0025721:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025727:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002572a:	83 f8 1f             	cmp    eax,0x1f
c002572d:	0f 8f dc 00 00 00    	jg     c002580f <__addsf3+0x2f9>
c0025733:	89 d7                	mov    edi,edx
c0025735:	88 c1                	mov    cl,al
c0025737:	d3 ef                	shr    edi,cl
c0025739:	b9 20 00 00 00       	mov    ecx,0x20
c002573e:	29 c1                	sub    ecx,eax
c0025740:	d3 e2                	shl    edx,cl
c0025742:	31 c0                	xor    eax,eax
c0025744:	85 d2                	test   edx,edx
c0025746:	0f 95 c0             	setne  al
c0025749:	09 f8                	or     eax,edi
c002574b:	29 c3                	sub    ebx,eax
c002574d:	89 d8                	mov    eax,ebx
c002574f:	eb 51                	jmp    c00257a2 <__addsf3+0x28c>
c0025751:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025754:	40                   	inc    eax
c0025755:	a8 fe                	test   al,0xfe
c0025757:	75 3d                	jne    c0025796 <__addsf3+0x280>
c0025759:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002575d:	0f 85 a7 00 00 00    	jne    c002580a <__addsf3+0x2f4>
c0025763:	85 d2                	test   edx,edx
c0025765:	75 12                	jne    c0025779 <__addsf3+0x263>
c0025767:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002576a:	85 db                	test   ebx,ebx
c002576c:	0f 85 9d 00 00 00    	jne    c002580f <__addsf3+0x2f9>
c0025772:	31 ff                	xor    edi,edi
c0025774:	e9 96 00 00 00       	jmp    c002580f <__addsf3+0x2f9>
c0025779:	85 db                	test   ebx,ebx
c002577b:	0f 84 8e 00 00 00    	je     c002580f <__addsf3+0x2f9>
c0025781:	89 d0                	mov    eax,edx
c0025783:	29 d8                	sub    eax,ebx
c0025785:	79 06                	jns    c002578d <__addsf3+0x277>
c0025787:	89 d8                	mov    eax,ebx
c0025789:	29 d0                	sub    eax,edx
c002578b:	eb 5a                	jmp    c00257e7 <__addsf3+0x2d1>
c002578d:	bf 00 00 00 00       	mov    edi,0x0
c0025792:	74 7b                	je     c002580f <__addsf3+0x2f9>
c0025794:	eb 4a                	jmp    c00257e0 <__addsf3+0x2ca>
c0025796:	89 d0                	mov    eax,edx
c0025798:	29 d8                	sub    eax,ebx
c002579a:	79 12                	jns    c00257ae <__addsf3+0x298>
c002579c:	89 d8                	mov    eax,ebx
c002579e:	29 d0                	sub    eax,edx
c00257a0:	eb 09                	jmp    c00257ab <__addsf3+0x295>
c00257a2:	85 c0                	test   eax,eax
c00257a4:	79 41                	jns    c00257e7 <__addsf3+0x2d1>
c00257a6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00257ab:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00257ae:	31 f6                	xor    esi,esi
c00257b0:	85 c0                	test   eax,eax
c00257b2:	74 33                	je     c00257e7 <__addsf3+0x2d1>
c00257b4:	0f bd c8             	bsr    ecx,eax
c00257b7:	83 f1 1f             	xor    ecx,0x1f
c00257ba:	d3 e0                	shl    eax,cl
c00257bc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00257c0:	39 ca                	cmp    edx,ecx
c00257c2:	7f 10                	jg     c00257d4 <__addsf3+0x2be>
c00257c4:	29 d1                	sub    ecx,edx
c00257c6:	41                   	inc    ecx
c00257c7:	d3 e8                	shr    eax,cl
c00257c9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00257cc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00257d2:	eb 13                	jmp    c00257e7 <__addsf3+0x2d1>
c00257d4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00257d7:	29 ce                	sub    esi,ecx
c00257d9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00257de:	eb 07                	jmp    c00257e7 <__addsf3+0x2d1>
c00257e0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00257e3:	eb 02                	jmp    c00257e7 <__addsf3+0x2d1>
c00257e5:	31 c0                	xor    eax,eax
c00257e7:	89 c2                	mov    edx,eax
c00257e9:	c1 ea 08             	shr    edx,0x8
c00257ec:	a8 7f                	test   al,0x7f
c00257ee:	0f 95 c1             	setne  cl
c00257f1:	09 d1                	or     ecx,edx
c00257f3:	83 e1 01             	and    ecx,0x1
c00257f6:	c1 e8 07             	shr    eax,0x7
c00257f9:	21 c8                	and    eax,ecx
c00257fb:	c1 e6 17             	shl    esi,0x17
c00257fe:	09 d6                	or     esi,edx
c0025800:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025803:	eb 0a                	jmp    c002580f <__addsf3+0x2f9>
c0025805:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025808:	eb 05                	jmp    c002580f <__addsf3+0x2f9>
c002580a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002580f:	89 f8                	mov    eax,edi
c0025811:	5a                   	pop    edx
c0025812:	59                   	pop    ecx
c0025813:	5b                   	pop    ebx
c0025814:	5e                   	pop    esi
c0025815:	5f                   	pop    edi
c0025816:	5d                   	pop    ebp
c0025817:	c3                   	ret    

c0025818 <__subsf3>:
c0025818:	55                   	push   ebp
c0025819:	89 e5                	mov    ebp,esp
c002581b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002581e:	05 00 00 00 80       	add    eax,0x80000000
c0025823:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025826:	5d                   	pop    ebp
c0025827:	e9 ea fc ff ff       	jmp    c0025516 <__addsf3>

c002582c <__negsf2>:
c002582c:	55                   	push   ebp
c002582d:	89 e5                	mov    ebp,esp
c002582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025832:	05 00 00 00 80       	add    eax,0x80000000
c0025837:	5d                   	pop    ebp
c0025838:	c3                   	ret    

c0025839 <__mulsf3>:
c0025839:	55                   	push   ebp
c002583a:	89 e5                	mov    ebp,esp
c002583c:	57                   	push   edi
c002583d:	56                   	push   esi
c002583e:	53                   	push   ebx
c002583f:	83 ec 1c             	sub    esp,0x1c
c0025842:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025845:	89 f0                	mov    eax,esi
c0025847:	89 f1                	mov    ecx,esi
c0025849:	c1 f9 17             	sar    ecx,0x17
c002584c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002584f:	c1 e0 08             	shl    eax,0x8
c0025852:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025857:	89 c1                	mov    ecx,eax
c0025859:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002585c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002585f:	89 c7                	mov    edi,eax
c0025861:	c1 ff 17             	sar    edi,0x17
c0025864:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025868:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002586b:	89 f8                	mov    eax,edi
c002586d:	0f b6 c0             	movzx  eax,al
c0025870:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025873:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025877:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002587a:	42                   	inc    edx
c002587b:	80 e2 fe             	and    dl,0xfe
c002587e:	75 7b                	jne    c00258fb <__mulsf3+0xc2>
c0025880:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025884:	74 54                	je     c00258da <__mulsf3+0xa1>
c0025886:	85 c9                	test   ecx,ecx
c0025888:	0f 85 64 01 00 00    	jne    c00259f2 <__mulsf3+0x1b9>
c002588e:	8d 57 01             	lea    edx,[edi+0x1]
c0025891:	80 e2 fe             	and    dl,0xfe
c0025894:	75 1f                	jne    c00258b5 <__mulsf3+0x7c>
c0025896:	85 c0                	test   eax,eax
c0025898:	b8 00 00 00 00       	mov    eax,0x0
c002589d:	74 29                	je     c00258c8 <__mulsf3+0x8f>
c002589f:	53                   	push   ebx
c00258a0:	53                   	push   ebx
c00258a1:	50                   	push   eax
c00258a2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00258a5:	e8 96 05 00 00       	call   c0025e40 <__nesf2>
c00258aa:	83 c4 10             	add    esp,0x10
c00258ad:	85 c0                	test   eax,eax
c00258af:	0f 85 3a 01 00 00    	jne    c00259ef <__mulsf3+0x1b6>
c00258b5:	85 ff                	test   edi,edi
c00258b7:	0f 89 35 01 00 00    	jns    c00259f2 <__mulsf3+0x1b9>
c00258bd:	81 c6 00 00 00 80    	add    esi,0x80000000
c00258c3:	e9 2a 01 00 00       	jmp    c00259f2 <__mulsf3+0x1b9>
c00258c8:	51                   	push   ecx
c00258c9:	51                   	push   ecx
c00258ca:	50                   	push   eax
c00258cb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00258ce:	e8 6d 05 00 00       	call   c0025e40 <__nesf2>
c00258d3:	83 c4 10             	add    esp,0x10
c00258d6:	85 c0                	test   eax,eax
c00258d8:	eb 15                	jmp    c00258ef <__mulsf3+0xb6>
c00258da:	85 c9                	test   ecx,ecx
c00258dc:	74 0b                	je     c00258e9 <__mulsf3+0xb0>
c00258de:	8d 53 ff             	lea    edx,[ebx-0x1]
c00258e1:	01 c9                	add    ecx,ecx
c00258e3:	78 16                	js     c00258fb <__mulsf3+0xc2>
c00258e5:	89 d3                	mov    ebx,edx
c00258e7:	eb f5                	jmp    c00258de <__mulsf3+0xa5>
c00258e9:	89 f8                	mov    eax,edi
c00258eb:	f7 d0                	not    eax
c00258ed:	84 c0                	test   al,al
c00258ef:	75 c4                	jne    c00258b5 <__mulsf3+0x7c>
c00258f1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00258f6:	e9 f7 00 00 00       	jmp    c00259f2 <__mulsf3+0x1b9>
c00258fb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00258fe:	c1 e6 08             	shl    esi,0x8
c0025901:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025907:	8d 57 01             	lea    edx,[edi+0x1]
c002590a:	80 e2 fe             	and    dl,0xfe
c002590d:	75 63                	jne    c0025972 <__mulsf3+0x139>
c002590f:	85 c0                	test   eax,eax
c0025911:	74 2f                	je     c0025942 <__mulsf3+0x109>
c0025913:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025917:	0f 89 d2 00 00 00    	jns    c00259ef <__mulsf3+0x1b6>
c002591d:	52                   	push   edx
c002591e:	52                   	push   edx
c002591f:	6a 00                	push   0x0
c0025921:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025924:	e8 dc 04 00 00       	call   c0025e05 <__eqsf2>
c0025929:	83 c4 10             	add    esp,0x10
c002592c:	85 c0                	test   eax,eax
c002592e:	0f 85 bb 00 00 00    	jne    c00259ef <__mulsf3+0x1b6>
c0025934:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025937:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002593d:	e9 b0 00 00 00       	jmp    c00259f2 <__mulsf3+0x1b9>
c0025942:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025945:	50                   	push   eax
c0025946:	50                   	push   eax
c0025947:	6a 00                	push   0x0
c0025949:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002594c:	e8 b4 04 00 00       	call   c0025e05 <__eqsf2>
c0025951:	83 c4 10             	add    esp,0x10
c0025954:	85 c0                	test   eax,eax
c0025956:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025959:	75 0c                	jne    c0025967 <__mulsf3+0x12e>
c002595b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002595f:	0f 89 8a 00 00 00    	jns    c00259ef <__mulsf3+0x1b6>
c0025965:	eb cd                	jmp    c0025934 <__mulsf3+0xfb>
c0025967:	8d 43 ff             	lea    eax,[ebx-0x1]
c002596a:	01 f6                	add    esi,esi
c002596c:	78 04                	js     c0025972 <__mulsf3+0x139>
c002596e:	89 c3                	mov    ebx,eax
c0025970:	eb f5                	jmp    c0025967 <__mulsf3+0x12e>
c0025972:	89 c8                	mov    eax,ecx
c0025974:	0d 00 00 00 80       	or     eax,0x80000000
c0025979:	81 ce 00 00 00 80    	or     esi,0x80000000
c002597f:	f7 e6                	mul    esi
c0025981:	85 c0                	test   eax,eax
c0025983:	0f 95 c0             	setne  al
c0025986:	0f b6 c0             	movzx  eax,al
c0025989:	09 c2                	or     edx,eax
c002598b:	78 03                	js     c0025990 <__mulsf3+0x157>
c002598d:	01 d2                	add    edx,edx
c002598f:	4b                   	dec    ebx
c0025990:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025996:	7f 22                	jg     c00259ba <__mulsf3+0x181>
c0025998:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002599e:	85 db                	test   ebx,ebx
c00259a0:	7f 23                	jg     c00259c5 <__mulsf3+0x18c>
c00259a2:	83 fb e9             	cmp    ebx,0xffffffe9
c00259a5:	7c 1a                	jl     c00259c1 <__mulsf3+0x188>
c00259a7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00259ad:	b9 01 00 00 00       	mov    ecx,0x1
c00259b2:	29 d9                	sub    ecx,ebx
c00259b4:	d3 ea                	shr    edx,cl
c00259b6:	31 db                	xor    ebx,ebx
c00259b8:	eb 0b                	jmp    c00259c5 <__mulsf3+0x18c>
c00259ba:	bb ff 00 00 00       	mov    ebx,0xff
c00259bf:	eb 02                	jmp    c00259c3 <__mulsf3+0x18a>
c00259c1:	31 db                	xor    ebx,ebx
c00259c3:	31 d2                	xor    edx,edx
c00259c5:	89 d0                	mov    eax,edx
c00259c7:	c1 e8 08             	shr    eax,0x8
c00259ca:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00259cd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00259d3:	09 fb                	or     ebx,edi
c00259d5:	c1 e3 17             	shl    ebx,0x17
c00259d8:	09 c3                	or     ebx,eax
c00259da:	f6 c2 7f             	test   dl,0x7f
c00259dd:	0f 95 c1             	setne  cl
c00259e0:	09 c8                	or     eax,ecx
c00259e2:	83 e0 01             	and    eax,0x1
c00259e5:	c1 ea 07             	shr    edx,0x7
c00259e8:	21 c2                	and    edx,eax
c00259ea:	8d 34 13             	lea    esi,[ebx+edx*1]
c00259ed:	eb 03                	jmp    c00259f2 <__mulsf3+0x1b9>
c00259ef:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00259f2:	89 f0                	mov    eax,esi
c00259f4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259f7:	5b                   	pop    ebx
c00259f8:	5e                   	pop    esi
c00259f9:	5f                   	pop    edi
c00259fa:	5d                   	pop    ebp
c00259fb:	c3                   	ret    

c00259fc <__divsf3>:
c00259fc:	55                   	push   ebp
c00259fd:	89 e5                	mov    ebp,esp
c00259ff:	57                   	push   edi
c0025a00:	56                   	push   esi
c0025a01:	53                   	push   ebx
c0025a02:	83 ec 1c             	sub    esp,0x1c
c0025a05:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025a08:	89 d8                	mov    eax,ebx
c0025a0a:	89 d9                	mov    ecx,ebx
c0025a0c:	c1 f9 17             	sar    ecx,0x17
c0025a0f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025a12:	c1 e0 08             	shl    eax,0x8
c0025a15:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025a1a:	89 c1                	mov    ecx,eax
c0025a1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a1f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a22:	89 c7                	mov    edi,eax
c0025a24:	c1 ff 17             	sar    edi,0x17
c0025a27:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a2b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025a2e:	89 f8                	mov    eax,edi
c0025a30:	0f b6 c0             	movzx  eax,al
c0025a33:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025a36:	29 c6                	sub    esi,eax
c0025a38:	83 c6 7f             	add    esi,0x7f
c0025a3b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025a3e:	42                   	inc    edx
c0025a3f:	80 e2 fe             	and    dl,0xfe
c0025a42:	0f 85 9c 00 00 00    	jne    c0025ae4 <__divsf3+0xe8>
c0025a48:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025a4c:	74 33                	je     c0025a81 <__divsf3+0x85>
c0025a4e:	85 c9                	test   ecx,ecx
c0025a50:	0f 85 c7 01 00 00    	jne    c0025c1d <__divsf3+0x221>
c0025a56:	8d 57 01             	lea    edx,[edi+0x1]
c0025a59:	80 e2 fe             	and    dl,0xfe
c0025a5c:	75 2f                	jne    c0025a8d <__divsf3+0x91>
c0025a5e:	85 c0                	test   eax,eax
c0025a60:	74 2b                	je     c0025a8d <__divsf3+0x91>
c0025a62:	51                   	push   ecx
c0025a63:	51                   	push   ecx
c0025a64:	6a 00                	push   0x0
c0025a66:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a69:	e8 d2 03 00 00       	call   c0025e40 <__nesf2>
c0025a6e:	83 c4 10             	add    esp,0x10
c0025a71:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025a74:	85 c0                	test   eax,eax
c0025a76:	0f 85 a1 01 00 00    	jne    c0025c1d <__divsf3+0x221>
c0025a7c:	e9 92 01 00 00       	jmp    c0025c13 <__divsf3+0x217>
c0025a81:	85 c9                	test   ecx,ecx
c0025a83:	75 1b                	jne    c0025aa0 <__divsf3+0xa4>
c0025a85:	8d 57 01             	lea    edx,[edi+0x1]
c0025a88:	80 e2 fe             	and    dl,0xfe
c0025a8b:	74 1e                	je     c0025aab <__divsf3+0xaf>
c0025a8d:	85 ff                	test   edi,edi
c0025a8f:	0f 89 88 01 00 00    	jns    c0025c1d <__divsf3+0x221>
c0025a95:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025a9b:	e9 7d 01 00 00       	jmp    c0025c1d <__divsf3+0x221>
c0025aa0:	8d 56 ff             	lea    edx,[esi-0x1]
c0025aa3:	01 c9                	add    ecx,ecx
c0025aa5:	78 3d                	js     c0025ae4 <__divsf3+0xe8>
c0025aa7:	89 d6                	mov    esi,edx
c0025aa9:	eb f5                	jmp    c0025aa0 <__divsf3+0xa4>
c0025aab:	85 c0                	test   eax,eax
c0025aad:	b8 00 00 00 00       	mov    eax,0x0
c0025ab2:	74 18                	je     c0025acc <__divsf3+0xd0>
c0025ab4:	52                   	push   edx
c0025ab5:	52                   	push   edx
c0025ab6:	50                   	push   eax
c0025ab7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025aba:	e8 81 03 00 00       	call   c0025e40 <__nesf2>
c0025abf:	83 c4 10             	add    esp,0x10
c0025ac2:	85 c0                	test   eax,eax
c0025ac4:	0f 85 50 01 00 00    	jne    c0025c1a <__divsf3+0x21e>
c0025aca:	eb c1                	jmp    c0025a8d <__divsf3+0x91>
c0025acc:	56                   	push   esi
c0025acd:	56                   	push   esi
c0025ace:	50                   	push   eax
c0025acf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ad2:	e8 69 03 00 00       	call   c0025e40 <__nesf2>
c0025ad7:	83 c4 10             	add    esp,0x10
c0025ada:	85 c0                	test   eax,eax
c0025adc:	0f 84 31 01 00 00    	je     c0025c13 <__divsf3+0x217>
c0025ae2:	eb a9                	jmp    c0025a8d <__divsf3+0x91>
c0025ae4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025ae7:	c1 e3 08             	shl    ebx,0x8
c0025aea:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025af0:	8d 57 01             	lea    edx,[edi+0x1]
c0025af3:	80 e2 fe             	and    dl,0xfe
c0025af6:	75 71                	jne    c0025b69 <__divsf3+0x16d>
c0025af8:	85 c0                	test   eax,eax
c0025afa:	ba 00 00 00 00       	mov    edx,0x0
c0025aff:	74 2f                	je     c0025b30 <__divsf3+0x134>
c0025b01:	51                   	push   ecx
c0025b02:	51                   	push   ecx
c0025b03:	52                   	push   edx
c0025b04:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b07:	e8 f9 02 00 00       	call   c0025e05 <__eqsf2>
c0025b0c:	83 c4 10             	add    esp,0x10
c0025b0f:	85 c0                	test   eax,eax
c0025b11:	0f 85 03 01 00 00    	jne    c0025c1a <__divsf3+0x21e>
c0025b17:	31 d2                	xor    edx,edx
c0025b19:	89 d3                	mov    ebx,edx
c0025b1b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025b1e:	31 f8                	xor    eax,edi
c0025b20:	0f 89 f7 00 00 00    	jns    c0025c1d <__divsf3+0x221>
c0025b26:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025b2b:	e9 ed 00 00 00       	jmp    c0025c1d <__divsf3+0x221>
c0025b30:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025b33:	50                   	push   eax
c0025b34:	50                   	push   eax
c0025b35:	52                   	push   edx
c0025b36:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b39:	e8 c7 02 00 00       	call   c0025e05 <__eqsf2>
c0025b3e:	83 c4 10             	add    esp,0x10
c0025b41:	85 c0                	test   eax,eax
c0025b43:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025b46:	75 16                	jne    c0025b5e <__divsf3+0x162>
c0025b48:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025b4b:	31 fb                	xor    ebx,edi
c0025b4d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025b53:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025b59:	e9 bf 00 00 00       	jmp    c0025c1d <__divsf3+0x221>
c0025b5e:	8d 46 01             	lea    eax,[esi+0x1]
c0025b61:	01 db                	add    ebx,ebx
c0025b63:	78 04                	js     c0025b69 <__divsf3+0x16d>
c0025b65:	89 c6                	mov    esi,eax
c0025b67:	eb f5                	jmp    c0025b5e <__divsf3+0x162>
c0025b69:	89 c8                	mov    eax,ecx
c0025b6b:	0d 00 00 00 80       	or     eax,0x80000000
c0025b70:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025b76:	31 d2                	xor    edx,edx
c0025b78:	39 d8                	cmp    eax,ebx
c0025b7a:	72 07                	jb     c0025b83 <__divsf3+0x187>
c0025b7c:	29 d8                	sub    eax,ebx
c0025b7e:	ba 01 00 00 00       	mov    edx,0x1
c0025b83:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025b8a:	01 d2                	add    edx,edx
c0025b8c:	89 c1                	mov    ecx,eax
c0025b8e:	01 c0                	add    eax,eax
c0025b90:	85 c9                	test   ecx,ecx
c0025b92:	78 04                	js     c0025b98 <__divsf3+0x19c>
c0025b94:	39 c3                	cmp    ebx,eax
c0025b96:	77 05                	ja     c0025b9d <__divsf3+0x1a1>
c0025b98:	29 d8                	sub    eax,ebx
c0025b9a:	83 ca 01             	or     edx,0x1
c0025b9d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025ba0:	75 e8                	jne    c0025b8a <__divsf3+0x18e>
c0025ba2:	85 c0                	test   eax,eax
c0025ba4:	0f 95 c0             	setne  al
c0025ba7:	0f b6 c0             	movzx  eax,al
c0025baa:	c1 e2 06             	shl    edx,0x6
c0025bad:	09 c2                	or     edx,eax
c0025baf:	78 03                	js     c0025bb4 <__divsf3+0x1b8>
c0025bb1:	01 d2                	add    edx,edx
c0025bb3:	4e                   	dec    esi
c0025bb4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025bba:	7f 22                	jg     c0025bde <__divsf3+0x1e2>
c0025bbc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025bc2:	85 f6                	test   esi,esi
c0025bc4:	7f 23                	jg     c0025be9 <__divsf3+0x1ed>
c0025bc6:	83 fe e9             	cmp    esi,0xffffffe9
c0025bc9:	7c 1a                	jl     c0025be5 <__divsf3+0x1e9>
c0025bcb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025bd1:	b9 01 00 00 00       	mov    ecx,0x1
c0025bd6:	29 f1                	sub    ecx,esi
c0025bd8:	d3 ea                	shr    edx,cl
c0025bda:	31 f6                	xor    esi,esi
c0025bdc:	eb 0b                	jmp    c0025be9 <__divsf3+0x1ed>
c0025bde:	be ff 00 00 00       	mov    esi,0xff
c0025be3:	eb 02                	jmp    c0025be7 <__divsf3+0x1eb>
c0025be5:	31 f6                	xor    esi,esi
c0025be7:	31 d2                	xor    edx,edx
c0025be9:	89 d0                	mov    eax,edx
c0025beb:	c1 e8 08             	shr    eax,0x8
c0025bee:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025bf1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025bf7:	09 fe                	or     esi,edi
c0025bf9:	c1 e6 17             	shl    esi,0x17
c0025bfc:	09 c6                	or     esi,eax
c0025bfe:	f6 c2 7f             	test   dl,0x7f
c0025c01:	0f 95 c1             	setne  cl
c0025c04:	09 c8                	or     eax,ecx
c0025c06:	83 e0 01             	and    eax,0x1
c0025c09:	c1 ea 07             	shr    edx,0x7
c0025c0c:	21 c2                	and    edx,eax
c0025c0e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025c11:	eb 0a                	jmp    c0025c1d <__divsf3+0x221>
c0025c13:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025c18:	eb 03                	jmp    c0025c1d <__divsf3+0x221>
c0025c1a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025c1d:	89 d8                	mov    eax,ebx
c0025c1f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c22:	5b                   	pop    ebx
c0025c23:	5e                   	pop    esi
c0025c24:	5f                   	pop    edi
c0025c25:	5d                   	pop    ebp
c0025c26:	c3                   	ret    

c0025c27 <__floatsisf>:
c0025c27:	55                   	push   ebp
c0025c28:	89 e5                	mov    ebp,esp
c0025c2a:	53                   	push   ebx
c0025c2b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025c2e:	85 d2                	test   edx,edx
c0025c30:	7e 2b                	jle    c0025c5d <__floatsisf+0x36>
c0025c32:	0f bd ca             	bsr    ecx,edx
c0025c35:	83 f1 1f             	xor    ecx,0x1f
c0025c38:	d3 e2                	shl    edx,cl
c0025c3a:	89 d0                	mov    eax,edx
c0025c3c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025c41:	89 c3                	mov    ebx,eax
c0025c43:	c1 eb 08             	shr    ebx,0x8
c0025c46:	80 e2 7f             	and    dl,0x7f
c0025c49:	0f 95 c2             	setne  dl
c0025c4c:	09 da                	or     edx,ebx
c0025c4e:	83 e2 01             	and    edx,0x1
c0025c51:	c1 e8 07             	shr    eax,0x7
c0025c54:	21 c2                	and    edx,eax
c0025c56:	b8 9e 00 00 00       	mov    eax,0x9e
c0025c5b:	eb 32                	jmp    c0025c8f <__floatsisf+0x68>
c0025c5d:	b8 00 00 00 00       	mov    eax,0x0
c0025c62:	74 34                	je     c0025c98 <__floatsisf+0x71>
c0025c64:	f7 da                	neg    edx
c0025c66:	0f bd ca             	bsr    ecx,edx
c0025c69:	83 f1 1f             	xor    ecx,0x1f
c0025c6c:	d3 e2                	shl    edx,cl
c0025c6e:	89 d0                	mov    eax,edx
c0025c70:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025c75:	89 c3                	mov    ebx,eax
c0025c77:	c1 eb 08             	shr    ebx,0x8
c0025c7a:	80 e2 7f             	and    dl,0x7f
c0025c7d:	0f 95 c2             	setne  dl
c0025c80:	09 da                	or     edx,ebx
c0025c82:	83 e2 01             	and    edx,0x1
c0025c85:	c1 e8 07             	shr    eax,0x7
c0025c88:	21 c2                	and    edx,eax
c0025c8a:	b8 9e 01 00 00       	mov    eax,0x19e
c0025c8f:	29 c8                	sub    eax,ecx
c0025c91:	c1 e0 17             	shl    eax,0x17
c0025c94:	09 d8                	or     eax,ebx
c0025c96:	01 d0                	add    eax,edx
c0025c98:	5b                   	pop    ebx
c0025c99:	5d                   	pop    ebp
c0025c9a:	c3                   	ret    

c0025c9b <__floatunsisf>:
c0025c9b:	55                   	push   ebp
c0025c9c:	89 e5                	mov    ebp,esp
c0025c9e:	53                   	push   ebx
c0025c9f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025ca2:	31 c0                	xor    eax,eax
c0025ca4:	85 d2                	test   edx,edx
c0025ca6:	74 32                	je     c0025cda <__floatunsisf+0x3f>
c0025ca8:	0f bd ca             	bsr    ecx,edx
c0025cab:	83 f1 1f             	xor    ecx,0x1f
c0025cae:	d3 e2                	shl    edx,cl
c0025cb0:	89 d0                	mov    eax,edx
c0025cb2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025cb7:	89 c3                	mov    ebx,eax
c0025cb9:	c1 eb 08             	shr    ebx,0x8
c0025cbc:	80 e2 7f             	and    dl,0x7f
c0025cbf:	0f 95 c2             	setne  dl
c0025cc2:	09 da                	or     edx,ebx
c0025cc4:	83 e2 01             	and    edx,0x1
c0025cc7:	c1 e8 07             	shr    eax,0x7
c0025cca:	21 c2                	and    edx,eax
c0025ccc:	b8 9e 00 00 00       	mov    eax,0x9e
c0025cd1:	29 c8                	sub    eax,ecx
c0025cd3:	c1 e0 17             	shl    eax,0x17
c0025cd6:	09 d8                	or     eax,ebx
c0025cd8:	01 d0                	add    eax,edx
c0025cda:	5b                   	pop    ebx
c0025cdb:	5d                   	pop    ebp
c0025cdc:	c3                   	ret    

c0025cdd <__fixsfsi>:
c0025cdd:	55                   	push   ebp
c0025cde:	89 e5                	mov    ebp,esp
c0025ce0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025ce3:	89 d1                	mov    ecx,edx
c0025ce5:	c1 e1 08             	shl    ecx,0x8
c0025ce8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025cee:	c1 fa 17             	sar    edx,0x17
c0025cf1:	78 1c                	js     c0025d0f <__fixsfsi+0x32>
c0025cf3:	83 ea 7f             	sub    edx,0x7f
c0025cf6:	31 c0                	xor    eax,eax
c0025cf8:	83 fa 1e             	cmp    edx,0x1e
c0025cfb:	77 40                	ja     c0025d3d <__fixsfsi+0x60>
c0025cfd:	89 c8                	mov    eax,ecx
c0025cff:	0d 00 00 00 80       	or     eax,0x80000000
c0025d04:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025d09:	29 d1                	sub    ecx,edx
c0025d0b:	d3 e8                	shr    eax,cl
c0025d0d:	eb 2e                	jmp    c0025d3d <__fixsfsi+0x60>
c0025d0f:	31 c0                	xor    eax,eax
c0025d11:	81 c2 81 00 00 00    	add    edx,0x81
c0025d17:	78 24                	js     c0025d3d <__fixsfsi+0x60>
c0025d19:	83 fa 1e             	cmp    edx,0x1e
c0025d1c:	7e 09                	jle    c0025d27 <__fixsfsi+0x4a>
c0025d1e:	83 fa 1f             	cmp    edx,0x1f
c0025d21:	75 18                	jne    c0025d3b <__fixsfsi+0x5e>
c0025d23:	85 c9                	test   ecx,ecx
c0025d25:	75 14                	jne    c0025d3b <__fixsfsi+0x5e>
c0025d27:	89 c8                	mov    eax,ecx
c0025d29:	0d 00 00 00 80       	or     eax,0x80000000
c0025d2e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025d33:	29 d1                	sub    ecx,edx
c0025d35:	d3 e8                	shr    eax,cl
c0025d37:	f7 d8                	neg    eax
c0025d39:	eb 02                	jmp    c0025d3d <__fixsfsi+0x60>
c0025d3b:	31 c0                	xor    eax,eax
c0025d3d:	5d                   	pop    ebp
c0025d3e:	c3                   	ret    

c0025d3f <__fixunssfsi>:
c0025d3f:	55                   	push   ebp
c0025d40:	89 e5                	mov    ebp,esp
c0025d42:	53                   	push   ebx
c0025d43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d46:	89 d3                	mov    ebx,edx
c0025d48:	c1 fb 17             	sar    ebx,0x17
c0025d4b:	83 eb 7f             	sub    ebx,0x7f
c0025d4e:	31 c0                	xor    eax,eax
c0025d50:	83 fb 1f             	cmp    ebx,0x1f
c0025d53:	77 18                	ja     c0025d6d <__fixunssfsi+0x2e>
c0025d55:	89 d0                	mov    eax,edx
c0025d57:	c1 e0 08             	shl    eax,0x8
c0025d5a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025d5f:	0d 00 00 00 80       	or     eax,0x80000000
c0025d64:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025d69:	29 d9                	sub    ecx,ebx
c0025d6b:	d3 e8                	shr    eax,cl
c0025d6d:	5b                   	pop    ebx
c0025d6e:	5d                   	pop    ebp
c0025d6f:	c3                   	ret    

c0025d70 <__cmpsf2>:
c0025d70:	55                   	push   ebp
c0025d71:	89 e5                	mov    ebp,esp
c0025d73:	57                   	push   edi
c0025d74:	56                   	push   esi
c0025d75:	53                   	push   ebx
c0025d76:	83 ec 24             	sub    esp,0x24
c0025d79:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d7f:	e8 4f 10 00 00       	call   c0026dd3 <__truncdfsf2>
c0025d84:	5a                   	pop    edx
c0025d85:	59                   	pop    ecx
c0025d86:	89 c3                	mov    ebx,eax
c0025d88:	c1 e8 17             	shr    eax,0x17
c0025d8b:	0f b6 f0             	movzx  esi,al
c0025d8e:	89 d8                	mov    eax,ebx
c0025d90:	c1 e8 1f             	shr    eax,0x1f
c0025d93:	31 c6                	xor    esi,eax
c0025d95:	c1 e3 08             	shl    ebx,0x8
c0025d98:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025d9b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025d9e:	e8 30 10 00 00       	call   c0026dd3 <__truncdfsf2>
c0025da3:	83 c4 10             	add    esp,0x10
c0025da6:	89 c1                	mov    ecx,eax
c0025da8:	c1 e9 17             	shr    ecx,0x17
c0025dab:	0f b6 c9             	movzx  ecx,cl
c0025dae:	89 c7                	mov    edi,eax
c0025db0:	c1 ef 1f             	shr    edi,0x1f
c0025db3:	89 ca                	mov    edx,ecx
c0025db5:	31 fa                	xor    edx,edi
c0025db7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025dba:	c1 e0 08             	shl    eax,0x8
c0025dbd:	89 c2                	mov    edx,eax
c0025dbf:	89 d8                	mov    eax,ebx
c0025dc1:	09 d0                	or     eax,edx
c0025dc3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025dc8:	09 f0                	or     eax,esi
c0025dca:	75 08                	jne    c0025dd4 <__cmpsf2+0x64>
c0025dcc:	31 c0                	xor    eax,eax
c0025dce:	39 f9                	cmp    ecx,edi
c0025dd0:	75 0c                	jne    c0025dde <__cmpsf2+0x6e>
c0025dd2:	eb 29                	jmp    c0025dfd <__cmpsf2+0x8d>
c0025dd4:	b8 01 00 00 00       	mov    eax,0x1
c0025dd9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025ddc:	7f 1f                	jg     c0025dfd <__cmpsf2+0x8d>
c0025dde:	83 c8 ff             	or     eax,0xffffffff
c0025de1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025de4:	7c 17                	jl     c0025dfd <__cmpsf2+0x8d>
c0025de6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025dec:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025df2:	b8 01 00 00 00       	mov    eax,0x1
c0025df7:	39 d3                	cmp    ebx,edx
c0025df9:	77 02                	ja     c0025dfd <__cmpsf2+0x8d>
c0025dfb:	19 c0                	sbb    eax,eax
c0025dfd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e00:	5b                   	pop    ebx
c0025e01:	5e                   	pop    esi
c0025e02:	5f                   	pop    edi
c0025e03:	5d                   	pop    ebp
c0025e04:	c3                   	ret    

c0025e05 <__eqsf2>:
c0025e05:	55                   	push   ebp
c0025e06:	89 e5                	mov    ebp,esp
c0025e08:	83 ec 24             	sub    esp,0x24
c0025e0b:	6a 01                	push   0x1
c0025e0d:	83 ec 0c             	sub    esp,0xc
c0025e10:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e13:	e8 df 10 00 00       	call   c0026ef7 <__extendsfdf2>
c0025e18:	83 c4 10             	add    esp,0x10
c0025e1b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e1e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025e21:	52                   	push   edx
c0025e22:	50                   	push   eax
c0025e23:	50                   	push   eax
c0025e24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e27:	e8 cb 10 00 00       	call   c0026ef7 <__extendsfdf2>
c0025e2c:	59                   	pop    ecx
c0025e2d:	59                   	pop    ecx
c0025e2e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e31:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025e34:	52                   	push   edx
c0025e35:	50                   	push   eax
c0025e36:	e8 35 ff ff ff       	call   c0025d70 <__cmpsf2>
c0025e3b:	83 c4 20             	add    esp,0x20
c0025e3e:	c9                   	leave  
c0025e3f:	c3                   	ret    

c0025e40 <__nesf2>:
c0025e40:	eb c3                	jmp    c0025e05 <__eqsf2>

c0025e42 <__gtsf2>:
c0025e42:	55                   	push   ebp
c0025e43:	89 e5                	mov    ebp,esp
c0025e45:	83 ec 24             	sub    esp,0x24
c0025e48:	6a ff                	push   0xffffffff
c0025e4a:	83 ec 0c             	sub    esp,0xc
c0025e4d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e50:	e8 a2 10 00 00       	call   c0026ef7 <__extendsfdf2>
c0025e55:	83 c4 10             	add    esp,0x10
c0025e58:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e5b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025e5e:	52                   	push   edx
c0025e5f:	50                   	push   eax
c0025e60:	50                   	push   eax
c0025e61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e64:	e8 8e 10 00 00       	call   c0026ef7 <__extendsfdf2>
c0025e69:	59                   	pop    ecx
c0025e6a:	59                   	pop    ecx
c0025e6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e6e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025e71:	52                   	push   edx
c0025e72:	50                   	push   eax
c0025e73:	e8 f8 fe ff ff       	call   c0025d70 <__cmpsf2>
c0025e78:	83 c4 20             	add    esp,0x20
c0025e7b:	c9                   	leave  
c0025e7c:	c3                   	ret    

c0025e7d <__gesf2>:
c0025e7d:	eb c3                	jmp    c0025e42 <__gtsf2>

c0025e7f <__ltsf2>:
c0025e7f:	eb 84                	jmp    c0025e05 <__eqsf2>

c0025e81 <__lesf2>:
c0025e81:	eb 82                	jmp    c0025e05 <__eqsf2>

c0025e83 <__adddf3>:
c0025e83:	55                   	push   ebp
c0025e84:	89 e5                	mov    ebp,esp
c0025e86:	57                   	push   edi
c0025e87:	56                   	push   esi
c0025e88:	53                   	push   ebx
c0025e89:	83 ec 24             	sub    esp,0x24
c0025e8c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025e8f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e95:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025e98:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025e9b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025e9e:	89 c8                	mov    eax,ecx
c0025ea0:	89 ce                	mov    esi,ecx
c0025ea2:	c1 fe 14             	sar    esi,0x14
c0025ea5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025ea8:	89 fb                	mov    ebx,edi
c0025eaa:	89 fa                	mov    edx,edi
c0025eac:	c1 e2 0b             	shl    edx,0xb
c0025eaf:	c1 e0 0b             	shl    eax,0xb
c0025eb2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025eb7:	c1 eb 15             	shr    ebx,0x15
c0025eba:	09 d8                	or     eax,ebx
c0025ebc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025ebf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025ec2:	c1 fe 14             	sar    esi,0x14
c0025ec5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025ec8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025ecb:	89 f3                	mov    ebx,esi
c0025ecd:	c1 e3 0b             	shl    ebx,0xb
c0025ed0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025ed3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025ed6:	c1 e3 0b             	shl    ebx,0xb
c0025ed9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0025edf:	c1 ee 15             	shr    esi,0x15
c0025ee2:	09 f3                	or     ebx,esi
c0025ee4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025ee7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025eea:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0025eed:	0f 88 5f 02 00 00    	js     c0026152 <__adddf3+0x2cf>
c0025ef3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025ef6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025ef9:	85 db                	test   ebx,ebx
c0025efb:	0f 8e c7 00 00 00    	jle    c0025fc8 <__adddf3+0x145>
c0025f01:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025f08:	75 1a                	jne    c0025f24 <__adddf3+0xa1>
c0025f0a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025f0d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025f10:	0f 84 b2 05 00 00    	je     c00264c8 <__adddf3+0x645>
c0025f16:	4b                   	dec    ebx
c0025f17:	75 23                	jne    c0025f3c <__adddf3+0xb9>
c0025f19:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025f1c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025f1f:	e9 99 00 00 00       	jmp    c0025fbd <__adddf3+0x13a>
c0025f24:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025f27:	f7 d6                	not    esi
c0025f29:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025f2f:	0f 84 93 05 00 00    	je     c00264c8 <__adddf3+0x645>
c0025f35:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0025f3c:	83 fb 1f             	cmp    ebx,0x1f
c0025f3f:	7e 42                	jle    c0025f83 <__adddf3+0x100>
c0025f41:	83 fb 3f             	cmp    ebx,0x3f
c0025f44:	0f 8f 7e 05 00 00    	jg     c00264c8 <__adddf3+0x645>
c0025f4a:	83 e3 1f             	and    ebx,0x1f
c0025f4d:	89 d9                	mov    ecx,ebx
c0025f4f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025f52:	d3 ef                	shr    edi,cl
c0025f54:	31 db                	xor    ebx,ebx
c0025f56:	85 c9                	test   ecx,ecx
c0025f58:	74 15                	je     c0025f6f <__adddf3+0xec>
c0025f5a:	be 20 00 00 00       	mov    esi,0x20
c0025f5f:	29 ce                	sub    esi,ecx
c0025f61:	89 f1                	mov    ecx,esi
c0025f63:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025f66:	d3 e6                	shl    esi,cl
c0025f68:	31 db                	xor    ebx,ebx
c0025f6a:	85 f6                	test   esi,esi
c0025f6c:	0f 95 c3             	setne  bl
c0025f6f:	31 c9                	xor    ecx,ecx
c0025f71:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025f75:	0f 95 c1             	setne  cl
c0025f78:	09 cf                	or     edi,ecx
c0025f7a:	09 fb                	or     ebx,edi
c0025f7c:	01 da                	add    edx,ebx
c0025f7e:	83 d0 00             	adc    eax,0x0
c0025f81:	eb 3a                	jmp    c0025fbd <__adddf3+0x13a>
c0025f83:	bf 20 00 00 00       	mov    edi,0x20
c0025f88:	29 df                	sub    edi,ebx
c0025f8a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025f8d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025f90:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025f93:	d3 e6                	shl    esi,cl
c0025f95:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025f98:	88 d9                	mov    cl,bl
c0025f9a:	d3 ef                	shr    edi,cl
c0025f9c:	09 fe                	or     esi,edi
c0025f9e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025fa1:	88 d9                	mov    cl,bl
c0025fa3:	d3 ef                	shr    edi,cl
c0025fa5:	89 fb                	mov    ebx,edi
c0025fa7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025faa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025fad:	d3 e7                	shl    edi,cl
c0025faf:	85 ff                	test   edi,edi
c0025fb1:	0f 95 c1             	setne  cl
c0025fb4:	0f b6 c9             	movzx  ecx,cl
c0025fb7:	09 ce                	or     esi,ecx
c0025fb9:	01 f2                	add    edx,esi
c0025fbb:	11 d8                	adc    eax,ebx
c0025fbd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025fc0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025fc3:	e9 52 01 00 00       	jmp    c002611a <__adddf3+0x297>
c0025fc8:	0f 84 d5 00 00 00    	je     c00260a3 <__adddf3+0x220>
c0025fce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025fd1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0025fd4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025fd7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025fda:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0025fe1:	75 20                	jne    c0026003 <__adddf3+0x180>
c0025fe3:	89 d6                	mov    esi,edx
c0025fe5:	09 c6                	or     esi,eax
c0025fe7:	0f 84 db 04 00 00    	je     c00264c8 <__adddf3+0x645>
c0025fed:	4b                   	dec    ebx
c0025fee:	75 29                	jne    c0026019 <__adddf3+0x196>
c0025ff0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025ff3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025ff6:	01 d1                	add    ecx,edx
c0025ff8:	11 c6                	adc    esi,eax
c0025ffa:	89 f0                	mov    eax,esi
c0025ffc:	89 ca                	mov    edx,ecx
c0025ffe:	e9 17 01 00 00       	jmp    c002611a <__adddf3+0x297>
c0026003:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026006:	f7 d6                	not    esi
c0026008:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002600e:	0f 84 b4 04 00 00    	je     c00264c8 <__adddf3+0x645>
c0026014:	0d 00 00 00 80       	or     eax,0x80000000
c0026019:	83 fb 1f             	cmp    ebx,0x1f
c002601c:	7e 48                	jle    c0026066 <__adddf3+0x1e3>
c002601e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026021:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026024:	83 fb 3f             	cmp    ebx,0x3f
c0026027:	0f 8f 9b 04 00 00    	jg     c00264c8 <__adddf3+0x645>
c002602d:	83 e3 1f             	and    ebx,0x1f
c0026030:	89 d9                	mov    ecx,ebx
c0026032:	89 c7                	mov    edi,eax
c0026034:	d3 ef                	shr    edi,cl
c0026036:	31 db                	xor    ebx,ebx
c0026038:	85 c9                	test   ecx,ecx
c002603a:	74 12                	je     c002604e <__adddf3+0x1cb>
c002603c:	be 20 00 00 00       	mov    esi,0x20
c0026041:	29 ce                	sub    esi,ecx
c0026043:	89 f1                	mov    ecx,esi
c0026045:	d3 e0                	shl    eax,cl
c0026047:	31 db                	xor    ebx,ebx
c0026049:	85 c0                	test   eax,eax
c002604b:	0f 95 c3             	setne  bl
c002604e:	31 c0                	xor    eax,eax
c0026050:	85 d2                	test   edx,edx
c0026052:	0f 95 c0             	setne  al
c0026055:	09 c7                	or     edi,eax
c0026057:	09 fb                	or     ebx,edi
c0026059:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002605c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002605f:	01 da                	add    edx,ebx
c0026061:	83 d6 00             	adc    esi,0x0
c0026064:	eb 39                	jmp    c002609f <__adddf3+0x21c>
c0026066:	be 20 00 00 00       	mov    esi,0x20
c002606b:	29 de                	sub    esi,ebx
c002606d:	89 c7                	mov    edi,eax
c002606f:	89 f1                	mov    ecx,esi
c0026071:	d3 e7                	shl    edi,cl
c0026073:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026076:	89 d7                	mov    edi,edx
c0026078:	88 d9                	mov    cl,bl
c002607a:	d3 ef                	shr    edi,cl
c002607c:	89 f9                	mov    ecx,edi
c002607e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026081:	09 cf                	or     edi,ecx
c0026083:	88 d9                	mov    cl,bl
c0026085:	d3 e8                	shr    eax,cl
c0026087:	89 f1                	mov    ecx,esi
c0026089:	d3 e2                	shl    edx,cl
c002608b:	85 d2                	test   edx,edx
c002608d:	0f 95 c2             	setne  dl
c0026090:	0f b6 d2             	movzx  edx,dl
c0026093:	09 d7                	or     edi,edx
c0026095:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026098:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002609b:	01 fa                	add    edx,edi
c002609d:	11 c6                	adc    esi,eax
c002609f:	89 f0                	mov    eax,esi
c00260a1:	eb 77                	jmp    c002611a <__adddf3+0x297>
c00260a3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00260a6:	46                   	inc    esi
c00260a7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00260aa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00260b0:	75 41                	jne    c00260f3 <__adddf3+0x270>
c00260b2:	89 d3                	mov    ebx,edx
c00260b4:	09 c3                	or     ebx,eax
c00260b6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00260bd:	75 27                	jne    c00260e6 <__adddf3+0x263>
c00260bf:	85 db                	test   ebx,ebx
c00260c1:	0f 84 fb 03 00 00    	je     c00264c2 <__adddf3+0x63f>
c00260c7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00260ca:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00260cd:	0f 84 f5 03 00 00    	je     c00264c8 <__adddf3+0x645>
c00260d3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00260d6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00260d9:	85 c0                	test   eax,eax
c00260db:	0f 89 91 03 00 00    	jns    c0026472 <__adddf3+0x5ef>
c00260e1:	e9 85 03 00 00       	jmp    c002646b <__adddf3+0x5e8>
c00260e6:	85 db                	test   ebx,ebx
c00260e8:	0f 85 da 03 00 00    	jne    c00264c8 <__adddf3+0x645>
c00260ee:	e9 cf 03 00 00       	jmp    c00264c2 <__adddf3+0x63f>
c00260f3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00260f6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00260f9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00260fc:	f7 d1                	not    ecx
c00260fe:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026104:	0f 84 70 03 00 00    	je     c002647a <__adddf3+0x5f7>
c002610a:	d1 ea                	shr    edx,1
c002610c:	89 c1                	mov    ecx,eax
c002610e:	c1 e1 1f             	shl    ecx,0x1f
c0026111:	09 ca                	or     edx,ecx
c0026113:	d1 e8                	shr    eax,1
c0026115:	e9 6f 03 00 00       	jmp    c0026489 <__adddf3+0x606>
c002611a:	85 c0                	test   eax,eax
c002611c:	0f 89 67 03 00 00    	jns    c0026489 <__adddf3+0x606>
c0026122:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026125:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026128:	f7 d1                	not    ecx
c002612a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026130:	0f 84 44 03 00 00    	je     c002647a <__adddf3+0x5f7>
c0026136:	89 d1                	mov    ecx,edx
c0026138:	d1 e9                	shr    ecx,1
c002613a:	83 e2 01             	and    edx,0x1
c002613d:	09 ca                	or     edx,ecx
c002613f:	89 c1                	mov    ecx,eax
c0026141:	c1 e1 1f             	shl    ecx,0x1f
c0026144:	09 ca                	or     edx,ecx
c0026146:	d1 e8                	shr    eax,1
c0026148:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002614d:	e9 37 03 00 00       	jmp    c0026489 <__adddf3+0x606>
c0026152:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026155:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002615b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002615e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026161:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026167:	29 de                	sub    esi,ebx
c0026169:	85 f6                	test   esi,esi
c002616b:	0f 8e bd 00 00 00    	jle    c002622e <__adddf3+0x3ab>
c0026171:	85 db                	test   ebx,ebx
c0026173:	75 17                	jne    c002618c <__adddf3+0x309>
c0026175:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026178:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002617b:	0f 84 47 03 00 00    	je     c00264c8 <__adddf3+0x645>
c0026181:	4e                   	dec    esi
c0026182:	75 20                	jne    c00261a4 <__adddf3+0x321>
c0026184:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026187:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002618a:	eb 5b                	jmp    c00261e7 <__adddf3+0x364>
c002618c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002618f:	f7 d3                	not    ebx
c0026191:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026197:	0f 84 2b 03 00 00    	je     c00264c8 <__adddf3+0x645>
c002619d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00261a4:	83 fe 1f             	cmp    esi,0x1f
c00261a7:	7e 49                	jle    c00261f2 <__adddf3+0x36f>
c00261a9:	83 fe 3f             	cmp    esi,0x3f
c00261ac:	0f 8f 16 03 00 00    	jg     c00264c8 <__adddf3+0x645>
c00261b2:	83 e6 1f             	and    esi,0x1f
c00261b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00261b8:	89 f1                	mov    ecx,esi
c00261ba:	d3 ef                	shr    edi,cl
c00261bc:	31 db                	xor    ebx,ebx
c00261be:	85 f6                	test   esi,esi
c00261c0:	74 13                	je     c00261d5 <__adddf3+0x352>
c00261c2:	b9 20 00 00 00       	mov    ecx,0x20
c00261c7:	29 f1                	sub    ecx,esi
c00261c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00261cc:	d3 e6                	shl    esi,cl
c00261ce:	31 db                	xor    ebx,ebx
c00261d0:	85 f6                	test   esi,esi
c00261d2:	0f 95 c3             	setne  bl
c00261d5:	31 c9                	xor    ecx,ecx
c00261d7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00261db:	0f 95 c1             	setne  cl
c00261de:	09 cf                	or     edi,ecx
c00261e0:	09 fb                	or     ebx,edi
c00261e2:	29 da                	sub    edx,ebx
c00261e4:	83 d8 00             	sbb    eax,0x0
c00261e7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00261ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00261ed:	e9 aa 01 00 00       	jmp    c002639c <__adddf3+0x519>
c00261f2:	bf 20 00 00 00       	mov    edi,0x20
c00261f7:	29 f7                	sub    edi,esi
c00261f9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00261fc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00261ff:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026202:	d3 e3                	shl    ebx,cl
c0026204:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026207:	89 f1                	mov    ecx,esi
c0026209:	d3 ef                	shr    edi,cl
c002620b:	09 fb                	or     ebx,edi
c002620d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026210:	89 f1                	mov    ecx,esi
c0026212:	d3 ef                	shr    edi,cl
c0026214:	89 fe                	mov    esi,edi
c0026216:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026219:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002621c:	d3 e7                	shl    edi,cl
c002621e:	85 ff                	test   edi,edi
c0026220:	0f 95 c1             	setne  cl
c0026223:	0f b6 c9             	movzx  ecx,cl
c0026226:	09 cb                	or     ebx,ecx
c0026228:	29 da                	sub    edx,ebx
c002622a:	19 f0                	sbb    eax,esi
c002622c:	eb b9                	jmp    c00261e7 <__adddf3+0x364>
c002622e:	0f 84 cd 00 00 00    	je     c0026301 <__adddf3+0x47e>
c0026234:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026237:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002623a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002623d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026241:	75 1b                	jne    c002625e <__adddf3+0x3db>
c0026243:	89 d6                	mov    esi,edx
c0026245:	09 c6                	or     esi,eax
c0026247:	0f 84 7b 02 00 00    	je     c00264c8 <__adddf3+0x645>
c002624d:	4b                   	dec    ebx
c002624e:	75 24                	jne    c0026274 <__adddf3+0x3f1>
c0026250:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026253:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026256:	29 d1                	sub    ecx,edx
c0026258:	19 c6                	sbb    esi,eax
c002625a:	89 ca                	mov    edx,ecx
c002625c:	eb 61                	jmp    c00262bf <__adddf3+0x43c>
c002625e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026261:	f7 d6                	not    esi
c0026263:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026269:	0f 84 59 02 00 00    	je     c00264c8 <__adddf3+0x645>
c002626f:	0d 00 00 00 80       	or     eax,0x80000000
c0026274:	83 fb 1f             	cmp    ebx,0x1f
c0026277:	7e 4d                	jle    c00262c6 <__adddf3+0x443>
c0026279:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002627c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002627f:	83 fb 3f             	cmp    ebx,0x3f
c0026282:	0f 8f 40 02 00 00    	jg     c00264c8 <__adddf3+0x645>
c0026288:	83 e3 1f             	and    ebx,0x1f
c002628b:	89 d9                	mov    ecx,ebx
c002628d:	89 c7                	mov    edi,eax
c002628f:	d3 ef                	shr    edi,cl
c0026291:	31 db                	xor    ebx,ebx
c0026293:	85 c9                	test   ecx,ecx
c0026295:	74 12                	je     c00262a9 <__adddf3+0x426>
c0026297:	be 20 00 00 00       	mov    esi,0x20
c002629c:	29 ce                	sub    esi,ecx
c002629e:	89 f1                	mov    ecx,esi
c00262a0:	d3 e0                	shl    eax,cl
c00262a2:	31 db                	xor    ebx,ebx
c00262a4:	85 c0                	test   eax,eax
c00262a6:	0f 95 c3             	setne  bl
c00262a9:	31 c0                	xor    eax,eax
c00262ab:	85 d2                	test   edx,edx
c00262ad:	0f 95 c0             	setne  al
c00262b0:	09 c7                	or     edi,eax
c00262b2:	09 fb                	or     ebx,edi
c00262b4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00262ba:	29 da                	sub    edx,ebx
c00262bc:	83 de 00             	sbb    esi,0x0
c00262bf:	89 f0                	mov    eax,esi
c00262c1:	e9 d6 00 00 00       	jmp    c002639c <__adddf3+0x519>
c00262c6:	be 20 00 00 00       	mov    esi,0x20
c00262cb:	29 de                	sub    esi,ebx
c00262cd:	89 c7                	mov    edi,eax
c00262cf:	89 f1                	mov    ecx,esi
c00262d1:	d3 e7                	shl    edi,cl
c00262d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00262d6:	89 d7                	mov    edi,edx
c00262d8:	88 d9                	mov    cl,bl
c00262da:	d3 ef                	shr    edi,cl
c00262dc:	89 f9                	mov    ecx,edi
c00262de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00262e1:	09 cf                	or     edi,ecx
c00262e3:	88 d9                	mov    cl,bl
c00262e5:	d3 e8                	shr    eax,cl
c00262e7:	89 f1                	mov    ecx,esi
c00262e9:	d3 e2                	shl    edx,cl
c00262eb:	85 d2                	test   edx,edx
c00262ed:	0f 95 c2             	setne  dl
c00262f0:	0f b6 d2             	movzx  edx,dl
c00262f3:	09 d7                	or     edi,edx
c00262f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00262fb:	29 fa                	sub    edx,edi
c00262fd:	19 c6                	sbb    esi,eax
c00262ff:	eb be                	jmp    c00262bf <__adddf3+0x43c>
c0026301:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026304:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026307:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002630d:	75 6a                	jne    c0026379 <__adddf3+0x4f6>
c002630f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026313:	75 58                	jne    c002636d <__adddf3+0x4ea>
c0026315:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026318:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002631b:	89 d6                	mov    esi,edx
c002631d:	09 c6                	or     esi,eax
c002631f:	75 17                	jne    c0026338 <__adddf3+0x4b5>
c0026321:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026324:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026327:	85 db                	test   ebx,ebx
c0026329:	0f 85 99 01 00 00    	jne    c00264c8 <__adddf3+0x645>
c002632f:	31 ff                	xor    edi,edi
c0026331:	31 c9                	xor    ecx,ecx
c0026333:	e9 90 01 00 00       	jmp    c00264c8 <__adddf3+0x645>
c0026338:	85 db                	test   ebx,ebx
c002633a:	0f 84 88 01 00 00    	je     c00264c8 <__adddf3+0x645>
c0026340:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026343:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026346:	85 c0                	test   eax,eax
c0026348:	79 10                	jns    c002635a <__adddf3+0x4d7>
c002634a:	31 c9                	xor    ecx,ecx
c002634c:	f7 da                	neg    edx
c002634e:	0f 95 c1             	setne  cl
c0026351:	01 c8                	add    eax,ecx
c0026353:	f7 d8                	neg    eax
c0026355:	e9 2f 01 00 00       	jmp    c0026489 <__adddf3+0x606>
c002635a:	31 ff                	xor    edi,edi
c002635c:	31 c9                	xor    ecx,ecx
c002635e:	89 c3                	mov    ebx,eax
c0026360:	09 d3                	or     ebx,edx
c0026362:	0f 84 60 01 00 00    	je     c00264c8 <__adddf3+0x645>
c0026368:	e9 05 01 00 00       	jmp    c0026472 <__adddf3+0x5ef>
c002636d:	31 ff                	xor    edi,edi
c002636f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026374:	e9 4f 01 00 00       	jmp    c00264c8 <__adddf3+0x645>
c0026379:	89 c1                	mov    ecx,eax
c002637b:	89 d0                	mov    eax,edx
c002637d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026380:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026383:	89 ca                	mov    edx,ecx
c0026385:	85 c9                	test   ecx,ecx
c0026387:	79 2c                	jns    c00263b5 <__adddf3+0x532>
c0026389:	31 c9                	xor    ecx,ecx
c002638b:	f7 d8                	neg    eax
c002638d:	0f 95 c1             	setne  cl
c0026390:	01 ca                	add    edx,ecx
c0026392:	f7 da                	neg    edx
c0026394:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026397:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002639a:	eb 19                	jmp    c00263b5 <__adddf3+0x532>
c002639c:	85 c0                	test   eax,eax
c002639e:	0f 89 e5 00 00 00    	jns    c0026489 <__adddf3+0x606>
c00263a4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00263a9:	89 c1                	mov    ecx,eax
c00263ab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263ae:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00263b1:	89 d0                	mov    eax,edx
c00263b3:	89 ca                	mov    edx,ecx
c00263b5:	85 d2                	test   edx,edx
c00263b7:	74 59                	je     c0026412 <__adddf3+0x58f>
c00263b9:	0f bd da             	bsr    ebx,edx
c00263bc:	83 f3 1f             	xor    ebx,0x1f
c00263bf:	88 d9                	mov    cl,bl
c00263c1:	d3 e2                	shl    edx,cl
c00263c3:	bf 20 00 00 00       	mov    edi,0x20
c00263c8:	89 f9                	mov    ecx,edi
c00263ca:	29 d9                	sub    ecx,ebx
c00263cc:	89 c6                	mov    esi,eax
c00263ce:	d3 ee                	shr    esi,cl
c00263d0:	09 d6                	or     esi,edx
c00263d2:	88 d9                	mov    cl,bl
c00263d4:	d3 e0                	shl    eax,cl
c00263d6:	89 c2                	mov    edx,eax
c00263d8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00263db:	25 ff 07 00 00       	and    eax,0x7ff
c00263e0:	39 d8                	cmp    eax,ebx
c00263e2:	7f 22                	jg     c0026406 <__adddf3+0x583>
c00263e4:	29 c3                	sub    ebx,eax
c00263e6:	43                   	inc    ebx
c00263e7:	88 d9                	mov    cl,bl
c00263e9:	d3 ea                	shr    edx,cl
c00263eb:	29 df                	sub    edi,ebx
c00263ed:	89 f9                	mov    ecx,edi
c00263ef:	89 f0                	mov    eax,esi
c00263f1:	d3 e0                	shl    eax,cl
c00263f3:	09 c2                	or     edx,eax
c00263f5:	89 f0                	mov    eax,esi
c00263f7:	88 d9                	mov    cl,bl
c00263f9:	d3 e8                	shr    eax,cl
c00263fb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00263fe:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0026404:	eb 6f                	jmp    c0026475 <__adddf3+0x5f2>
c0026406:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026409:	29 d8                	sub    eax,ebx
c002640b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002640e:	89 f0                	mov    eax,esi
c0026410:	eb 59                	jmp    c002646b <__adddf3+0x5e8>
c0026412:	85 c0                	test   eax,eax
c0026414:	74 6a                	je     c0026480 <__adddf3+0x5fd>
c0026416:	0f bd c8             	bsr    ecx,eax
c0026419:	83 f1 1f             	xor    ecx,0x1f
c002641c:	d3 e0                	shl    eax,cl
c002641e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026421:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026427:	83 c1 20             	add    ecx,0x20
c002642a:	39 cb                	cmp    ebx,ecx
c002642c:	7f 35                	jg     c0026463 <__adddf3+0x5e0>
c002642e:	29 d9                	sub    ecx,ebx
c0026430:	8d 71 01             	lea    esi,[ecx+0x1]
c0026433:	83 fe 1f             	cmp    esi,0x1f
c0026436:	7e 09                	jle    c0026441 <__adddf3+0x5be>
c0026438:	83 e9 1f             	sub    ecx,0x1f
c002643b:	d3 e8                	shr    eax,cl
c002643d:	89 c3                	mov    ebx,eax
c002643f:	eb 11                	jmp    c0026452 <__adddf3+0x5cf>
c0026441:	b9 20 00 00 00       	mov    ecx,0x20
c0026446:	29 f1                	sub    ecx,esi
c0026448:	89 c3                	mov    ebx,eax
c002644a:	d3 e3                	shl    ebx,cl
c002644c:	89 f1                	mov    ecx,esi
c002644e:	d3 e8                	shr    eax,cl
c0026450:	89 c2                	mov    edx,eax
c0026452:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026455:	25 00 f8 ff ff       	and    eax,0xfffff800
c002645a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002645d:	89 d0                	mov    eax,edx
c002645f:	89 da                	mov    edx,ebx
c0026461:	eb 26                	jmp    c0026489 <__adddf3+0x606>
c0026463:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026466:	29 cf                	sub    edi,ecx
c0026468:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002646b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026470:	eb 17                	jmp    c0026489 <__adddf3+0x606>
c0026472:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026475:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026478:	eb 0f                	jmp    c0026489 <__adddf3+0x606>
c002647a:	31 d2                	xor    edx,edx
c002647c:	31 c0                	xor    eax,eax
c002647e:	eb 09                	jmp    c0026489 <__adddf3+0x606>
c0026480:	89 c2                	mov    edx,eax
c0026482:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026489:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002648c:	c1 e1 14             	shl    ecx,0x14
c002648f:	89 c3                	mov    ebx,eax
c0026491:	c1 eb 0b             	shr    ebx,0xb
c0026494:	09 d9                	or     ecx,ebx
c0026496:	89 d3                	mov    ebx,edx
c0026498:	c1 eb 0b             	shr    ebx,0xb
c002649b:	c1 e0 15             	shl    eax,0x15
c002649e:	09 d8                	or     eax,ebx
c00264a0:	89 c7                	mov    edi,eax
c00264a2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00264a8:	0f 95 c0             	setne  al
c00264ab:	89 c6                	mov    esi,eax
c00264ad:	09 f3                	or     ebx,esi
c00264af:	83 e3 01             	and    ebx,0x1
c00264b2:	c1 ea 0a             	shr    edx,0xa
c00264b5:	21 da                	and    edx,ebx
c00264b7:	89 f8                	mov    eax,edi
c00264b9:	01 d0                	add    eax,edx
c00264bb:	83 d1 00             	adc    ecx,0x0
c00264be:	89 c7                	mov    edi,eax
c00264c0:	eb 06                	jmp    c00264c8 <__adddf3+0x645>
c00264c2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00264c5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00264c8:	89 f8                	mov    eax,edi
c00264ca:	89 ca                	mov    edx,ecx
c00264cc:	83 c4 24             	add    esp,0x24
c00264cf:	5b                   	pop    ebx
c00264d0:	5e                   	pop    esi
c00264d1:	5f                   	pop    edi
c00264d2:	5d                   	pop    ebp
c00264d3:	c3                   	ret    

c00264d4 <__subdf3>:
c00264d4:	55                   	push   ebp
c00264d5:	89 e5                	mov    ebp,esp
c00264d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00264da:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00264dd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00264e3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00264e6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00264e9:	5d                   	pop    ebp
c00264ea:	e9 94 f9 ff ff       	jmp    c0025e83 <__adddf3>

c00264ef <__negdf2>:
c00264ef:	55                   	push   ebp
c00264f0:	89 e5                	mov    ebp,esp
c00264f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264f5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00264f8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00264fe:	5d                   	pop    ebp
c00264ff:	c3                   	ret    

c0026500 <__muldf3>:
c0026500:	55                   	push   ebp
c0026501:	89 e5                	mov    ebp,esp
c0026503:	57                   	push   edi
c0026504:	56                   	push   esi
c0026505:	53                   	push   ebx
c0026506:	83 ec 24             	sub    esp,0x24
c0026509:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002650c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002650f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026512:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026515:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026518:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002651b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002651e:	89 c8                	mov    eax,ecx
c0026520:	c1 f8 14             	sar    eax,0x14
c0026523:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026526:	89 f8                	mov    eax,edi
c0026528:	89 fb                	mov    ebx,edi
c002652a:	c1 e3 0b             	shl    ebx,0xb
c002652d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026530:	c1 e1 0b             	shl    ecx,0xb
c0026533:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026539:	c1 e8 15             	shr    eax,0x15
c002653c:	09 c1                	or     ecx,eax
c002653e:	89 d6                	mov    esi,edx
c0026540:	89 d0                	mov    eax,edx
c0026542:	c1 f8 14             	sar    eax,0x14
c0026545:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026548:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002654b:	89 c3                	mov    ebx,eax
c002654d:	c1 e3 0b             	shl    ebx,0xb
c0026550:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026553:	c1 e6 0b             	shl    esi,0xb
c0026556:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002655c:	c1 e8 15             	shr    eax,0x15
c002655f:	09 c6                	or     esi,eax
c0026561:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026564:	25 ff 07 00 00       	and    eax,0x7ff
c0026569:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002656c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002656f:	25 ff 07 00 00       	and    eax,0x7ff
c0026574:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026577:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002657a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002657d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026584:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026587:	40                   	inc    eax
c0026588:	a9 fe 07 00 00       	test   eax,0x7fe
c002658d:	0f 85 8d 00 00 00    	jne    c0026620 <__muldf3+0x120>
c0026593:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026596:	09 c8                	or     eax,ecx
c0026598:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002659c:	74 44                	je     c00265e2 <__muldf3+0xe2>
c002659e:	85 c0                	test   eax,eax
c00265a0:	0f 85 31 02 00 00    	jne    c00267d7 <__muldf3+0x2d7>
c00265a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00265a9:	40                   	inc    eax
c00265aa:	a9 fe 07 00 00       	test   eax,0x7fe
c00265af:	75 13                	jne    c00265c4 <__muldf3+0xc4>
c00265b1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00265b4:	09 f1                	or     ecx,esi
c00265b6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00265ba:	74 22                	je     c00265de <__muldf3+0xde>
c00265bc:	85 c9                	test   ecx,ecx
c00265be:	0f 85 0d 02 00 00    	jne    c00267d1 <__muldf3+0x2d1>
c00265c4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00265c8:	0f 89 09 02 00 00    	jns    c00267d7 <__muldf3+0x2d7>
c00265ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00265d1:	05 00 00 00 80       	add    eax,0x80000000
c00265d6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265d9:	e9 f9 01 00 00       	jmp    c00267d7 <__muldf3+0x2d7>
c00265de:	85 c9                	test   ecx,ecx
c00265e0:	eb 2e                	jmp    c0026610 <__muldf3+0x110>
c00265e2:	85 c0                	test   eax,eax
c00265e4:	74 20                	je     c0026606 <__muldf3+0x106>
c00265e6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00265e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265ec:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00265ef:	c1 ef 1f             	shr    edi,0x1f
c00265f2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00265f5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00265f8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00265fb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265fe:	09 f9                	or     ecx,edi
c0026600:	78 1e                	js     c0026620 <__muldf3+0x120>
c0026602:	89 c3                	mov    ebx,eax
c0026604:	eb e0                	jmp    c00265e6 <__muldf3+0xe6>
c0026606:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026609:	f7 d0                	not    eax
c002660b:	a9 ff 07 00 00       	test   eax,0x7ff
c0026610:	75 b2                	jne    c00265c4 <__muldf3+0xc4>
c0026612:	31 ff                	xor    edi,edi
c0026614:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002661b:	e9 b7 01 00 00       	jmp    c00267d7 <__muldf3+0x2d7>
c0026620:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026623:	40                   	inc    eax
c0026624:	a9 fe 07 00 00       	test   eax,0x7fe
c0026629:	75 57                	jne    c0026682 <__muldf3+0x182>
c002662b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002662e:	09 f0                	or     eax,esi
c0026630:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026634:	74 23                	je     c0026659 <__muldf3+0x159>
c0026636:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002663a:	0f 89 91 01 00 00    	jns    c00267d1 <__muldf3+0x2d1>
c0026640:	85 c0                	test   eax,eax
c0026642:	0f 85 89 01 00 00    	jne    c00267d1 <__muldf3+0x2d1>
c0026648:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002664b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026651:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026654:	e9 7e 01 00 00       	jmp    c00267d7 <__muldf3+0x2d7>
c0026659:	85 c0                	test   eax,eax
c002665b:	75 0c                	jne    c0026669 <__muldf3+0x169>
c002665d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026661:	0f 89 6a 01 00 00    	jns    c00267d1 <__muldf3+0x2d1>
c0026667:	eb df                	jmp    c0026648 <__muldf3+0x148>
c0026669:	01 f6                	add    esi,esi
c002666b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002666e:	c1 ea 1f             	shr    edx,0x1f
c0026671:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026674:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026677:	8d 43 ff             	lea    eax,[ebx-0x1]
c002667a:	09 d6                	or     esi,edx
c002667c:	78 04                	js     c0026682 <__muldf3+0x182>
c002667e:	89 c3                	mov    ebx,eax
c0026680:	eb e7                	jmp    c0026669 <__muldf3+0x169>
c0026682:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026688:	81 ce 00 00 00 80    	or     esi,0x80000000
c002668e:	89 c8                	mov    eax,ecx
c0026690:	f7 e6                	mul    esi
c0026692:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026695:	89 c7                	mov    edi,eax
c0026697:	89 c8                	mov    eax,ecx
c0026699:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002669c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002669f:	89 c1                	mov    ecx,eax
c00266a1:	89 f0                	mov    eax,esi
c00266a3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00266a6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00266a9:	89 c6                	mov    esi,eax
c00266ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00266ae:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00266b1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00266b4:	31 c0                	xor    eax,eax
c00266b6:	01 f1                	add    ecx,esi
c00266b8:	0f 92 c0             	setb   al
c00266bb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00266be:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00266c1:	83 d6 00             	adc    esi,0x0
c00266c4:	01 c7                	add    edi,eax
c00266c6:	83 d6 00             	adc    esi,0x0
c00266c9:	01 ca                	add    edx,ecx
c00266cb:	0f 92 c1             	setb   cl
c00266ce:	0f b6 c9             	movzx  ecx,cl
c00266d1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00266d4:	83 d6 00             	adc    esi,0x0
c00266d7:	01 cf                	add    edi,ecx
c00266d9:	83 d6 00             	adc    esi,0x0
c00266dc:	31 c9                	xor    ecx,ecx
c00266de:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00266e1:	0f 95 c1             	setne  cl
c00266e4:	09 cf                	or     edi,ecx
c00266e6:	85 f6                	test   esi,esi
c00266e8:	78 0c                	js     c00266f6 <__muldf3+0x1f6>
c00266ea:	01 f6                	add    esi,esi
c00266ec:	89 f8                	mov    eax,edi
c00266ee:	c1 e8 1f             	shr    eax,0x1f
c00266f1:	09 c6                	or     esi,eax
c00266f3:	01 ff                	add    edi,edi
c00266f5:	4b                   	dec    ebx
c00266f6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00266fc:	0f 8f 85 00 00 00    	jg     c0026787 <__muldf3+0x287>
c0026702:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026708:	85 db                	test   ebx,ebx
c002670a:	0f 8f 84 00 00 00    	jg     c0026794 <__muldf3+0x294>
c0026710:	83 fb cc             	cmp    ebx,0xffffffcc
c0026713:	7c 79                	jl     c002678e <__muldf3+0x28e>
c0026715:	ba 01 00 00 00       	mov    edx,0x1
c002671a:	29 da                	sub    edx,ebx
c002671c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026722:	83 fa 1f             	cmp    edx,0x1f
c0026725:	7e 30                	jle    c0026757 <__muldf3+0x257>
c0026727:	83 fa 20             	cmp    edx,0x20
c002672a:	75 0b                	jne    c0026737 <__muldf3+0x237>
c002672c:	31 c0                	xor    eax,eax
c002672e:	85 ff                	test   edi,edi
c0026730:	0f 95 c0             	setne  al
c0026733:	89 c7                	mov    edi,eax
c0026735:	eb 1a                	jmp    c0026751 <__muldf3+0x251>
c0026737:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002673a:	89 f0                	mov    eax,esi
c002673c:	d3 e0                	shl    eax,cl
c002673e:	09 f8                	or     eax,edi
c0026740:	0f 95 c0             	setne  al
c0026743:	0f b6 c0             	movzx  eax,al
c0026746:	89 c7                	mov    edi,eax
c0026748:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002674d:	29 d9                	sub    ecx,ebx
c002674f:	d3 ee                	shr    esi,cl
c0026751:	09 f7                	or     edi,esi
c0026753:	31 db                	xor    ebx,ebx
c0026755:	eb 3b                	jmp    c0026792 <__muldf3+0x292>
c0026757:	83 c3 1f             	add    ebx,0x1f
c002675a:	89 f0                	mov    eax,esi
c002675c:	88 d9                	mov    cl,bl
c002675e:	d3 e0                	shl    eax,cl
c0026760:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026763:	89 f8                	mov    eax,edi
c0026765:	88 d1                	mov    cl,dl
c0026767:	d3 e8                	shr    eax,cl
c0026769:	89 c1                	mov    ecx,eax
c002676b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002676e:	09 c8                	or     eax,ecx
c0026770:	88 d9                	mov    cl,bl
c0026772:	d3 e7                	shl    edi,cl
c0026774:	31 db                	xor    ebx,ebx
c0026776:	85 ff                	test   edi,edi
c0026778:	0f 95 c3             	setne  bl
c002677b:	89 df                	mov    edi,ebx
c002677d:	09 c7                	or     edi,eax
c002677f:	88 d1                	mov    cl,dl
c0026781:	d3 ee                	shr    esi,cl
c0026783:	31 db                	xor    ebx,ebx
c0026785:	eb 0d                	jmp    c0026794 <__muldf3+0x294>
c0026787:	bb ff 07 00 00       	mov    ebx,0x7ff
c002678c:	eb 02                	jmp    c0026790 <__muldf3+0x290>
c002678e:	31 db                	xor    ebx,ebx
c0026790:	31 ff                	xor    edi,edi
c0026792:	31 f6                	xor    esi,esi
c0026794:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026797:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002679a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002679f:	09 c3                	or     ebx,eax
c00267a1:	c1 e3 14             	shl    ebx,0x14
c00267a4:	89 f0                	mov    eax,esi
c00267a6:	c1 e8 0b             	shr    eax,0xb
c00267a9:	09 c3                	or     ebx,eax
c00267ab:	89 f8                	mov    eax,edi
c00267ad:	c1 e8 0b             	shr    eax,0xb
c00267b0:	c1 e6 15             	shl    esi,0x15
c00267b3:	09 c6                	or     esi,eax
c00267b5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00267bb:	0f 95 c1             	setne  cl
c00267be:	09 c8                	or     eax,ecx
c00267c0:	83 e0 01             	and    eax,0x1
c00267c3:	c1 ef 0a             	shr    edi,0xa
c00267c6:	21 c7                	and    edi,eax
c00267c8:	01 f7                	add    edi,esi
c00267ca:	83 d3 00             	adc    ebx,0x0
c00267cd:	89 da                	mov    edx,ebx
c00267cf:	eb 03                	jmp    c00267d4 <__muldf3+0x2d4>
c00267d1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00267d4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00267d7:	89 f8                	mov    eax,edi
c00267d9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00267dc:	83 c4 24             	add    esp,0x24
c00267df:	5b                   	pop    ebx
c00267e0:	5e                   	pop    esi
c00267e1:	5f                   	pop    edi
c00267e2:	5d                   	pop    ebp
c00267e3:	c3                   	ret    

c00267e4 <__divdf3>:
c00267e4:	55                   	push   ebp
c00267e5:	89 e5                	mov    ebp,esp
c00267e7:	57                   	push   edi
c00267e8:	56                   	push   esi
c00267e9:	53                   	push   ebx
c00267ea:	83 ec 2c             	sub    esp,0x2c
c00267ed:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00267f0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00267f3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00267f6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00267f9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00267fc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00267ff:	89 ce                	mov    esi,ecx
c0026801:	89 c8                	mov    eax,ecx
c0026803:	c1 f8 14             	sar    eax,0x14
c0026806:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026809:	89 f8                	mov    eax,edi
c002680b:	89 fb                	mov    ebx,edi
c002680d:	c1 e3 0b             	shl    ebx,0xb
c0026810:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026813:	c1 e6 0b             	shl    esi,0xb
c0026816:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002681c:	c1 e8 15             	shr    eax,0x15
c002681f:	09 c6                	or     esi,eax
c0026821:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0026824:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026827:	89 c2                	mov    edx,eax
c0026829:	c1 fa 14             	sar    edx,0x14
c002682c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002682f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026832:	89 de                	mov    esi,ebx
c0026834:	c1 e6 0b             	shl    esi,0xb
c0026837:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002683a:	c1 e0 0b             	shl    eax,0xb
c002683d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026842:	c1 eb 15             	shr    ebx,0x15
c0026845:	09 d8                	or     eax,ebx
c0026847:	89 c2                	mov    edx,eax
c0026849:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002684c:	25 ff 07 00 00       	and    eax,0x7ff
c0026851:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026854:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026857:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002685d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026860:	29 d8                	sub    eax,ebx
c0026862:	05 ff 03 00 00       	add    eax,0x3ff
c0026867:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002686a:	46                   	inc    esi
c002686b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026871:	0f 85 a5 00 00 00    	jne    c002691c <__divdf3+0x138>
c0026877:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002687a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002687d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026881:	74 2a                	je     c00268ad <__divdf3+0xc9>
c0026883:	85 f6                	test   esi,esi
c0026885:	0f 85 cc 02 00 00    	jne    c0026b57 <__divdf3+0x373>
c002688b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002688e:	40                   	inc    eax
c002688f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026894:	75 26                	jne    c00268bc <__divdf3+0xd8>
c0026896:	85 db                	test   ebx,ebx
c0026898:	74 22                	je     c00268bc <__divdf3+0xd8>
c002689a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002689d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00268a0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00268a3:	09 d0                	or     eax,edx
c00268a5:	0f 85 ac 02 00 00    	jne    c0026b57 <__divdf3+0x373>
c00268ab:	eb 63                	jmp    c0026910 <__divdf3+0x12c>
c00268ad:	85 f6                	test   esi,esi
c00268af:	75 22                	jne    c00268d3 <__divdf3+0xef>
c00268b1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00268b4:	40                   	inc    eax
c00268b5:	a9 fe 07 00 00       	test   eax,0x7fe
c00268ba:	74 36                	je     c00268f2 <__divdf3+0x10e>
c00268bc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00268c0:	0f 89 91 02 00 00    	jns    c0026b57 <__divdf3+0x373>
c00268c6:	89 f8                	mov    eax,edi
c00268c8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00268ce:	e9 80 02 00 00       	jmp    c0026b53 <__divdf3+0x36f>
c00268d3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00268d6:	01 f6                	add    esi,esi
c00268d8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00268db:	c1 ef 1f             	shr    edi,0x1f
c00268de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00268e1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00268e4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00268e7:	09 f7                	or     edi,esi
c00268e9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00268ec:	78 2e                	js     c002691c <__divdf3+0x138>
c00268ee:	89 c8                	mov    eax,ecx
c00268f0:	eb e1                	jmp    c00268d3 <__divdf3+0xef>
c00268f2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00268f5:	09 d0                	or     eax,edx
c00268f7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00268fb:	74 0f                	je     c002690c <__divdf3+0x128>
c00268fd:	85 c0                	test   eax,eax
c00268ff:	74 bb                	je     c00268bc <__divdf3+0xd8>
c0026901:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026904:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026907:	e9 4b 02 00 00       	jmp    c0026b57 <__divdf3+0x373>
c002690c:	85 c0                	test   eax,eax
c002690e:	75 ac                	jne    c00268bc <__divdf3+0xd8>
c0026910:	31 ff                	xor    edi,edi
c0026912:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026917:	e9 3b 02 00 00       	jmp    c0026b57 <__divdf3+0x373>
c002691c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002691f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0026922:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0026928:	75 6b                	jne    c0026995 <__divdf3+0x1b1>
c002692a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002692d:	09 d6                	or     esi,edx
c002692f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026933:	74 28                	je     c002695d <__divdf3+0x179>
c0026935:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026938:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002693b:	85 f6                	test   esi,esi
c002693d:	0f 85 14 02 00 00    	jne    c0026b57 <__divdf3+0x373>
c0026943:	31 ff                	xor    edi,edi
c0026945:	31 c9                	xor    ecx,ecx
c0026947:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002694a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002694d:	0f 89 04 02 00 00    	jns    c0026b57 <__divdf3+0x373>
c0026953:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026958:	e9 fa 01 00 00       	jmp    c0026b57 <__divdf3+0x373>
c002695d:	85 f6                	test   esi,esi
c002695f:	75 1b                	jne    c002697c <__divdf3+0x198>
c0026961:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026964:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026967:	25 00 00 00 80       	and    eax,0x80000000
c002696c:	31 c9                	xor    ecx,ecx
c002696e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026973:	89 cf                	mov    edi,ecx
c0026975:	89 c1                	mov    ecx,eax
c0026977:	e9 db 01 00 00       	jmp    c0026b57 <__divdf3+0x373>
c002697c:	01 d2                	add    edx,edx
c002697e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026981:	c1 eb 1f             	shr    ebx,0x1f
c0026984:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026987:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002698a:	8d 48 01             	lea    ecx,[eax+0x1]
c002698d:	09 da                	or     edx,ebx
c002698f:	78 04                	js     c0026995 <__divdf3+0x1b1>
c0026991:	89 c8                	mov    eax,ecx
c0026993:	eb e7                	jmp    c002697c <__divdf3+0x198>
c0026995:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026998:	81 ce 00 00 00 80    	or     esi,0x80000000
c002699e:	81 ca 00 00 00 80    	or     edx,0x80000000
c00269a4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00269a7:	39 d6                	cmp    esi,edx
c00269a9:	77 0d                	ja     c00269b8 <__divdf3+0x1d4>
c00269ab:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00269ae:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00269b1:	72 1b                	jb     c00269ce <__divdf3+0x1ea>
c00269b3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00269b6:	75 16                	jne    c00269ce <__divdf3+0x1ea>
c00269b8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00269bb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00269be:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00269c1:	83 de 00             	sbb    esi,0x0
c00269c4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00269c7:	ba 01 00 00 00       	mov    edx,0x1
c00269cc:	eb 02                	jmp    c00269d0 <__divdf3+0x1ec>
c00269ce:	31 d2                	xor    edx,edx
c00269d0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00269d7:	31 ff                	xor    edi,edi
c00269d9:	01 ff                	add    edi,edi
c00269db:	89 d1                	mov    ecx,edx
c00269dd:	c1 e9 1f             	shr    ecx,0x1f
c00269e0:	09 cf                	or     edi,ecx
c00269e2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00269e5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00269e8:	89 da                	mov    edx,ebx
c00269ea:	89 f3                	mov    ebx,esi
c00269ec:	8d 34 36             	lea    esi,[esi+esi*1]
c00269ef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269f2:	c1 e9 1f             	shr    ecx,0x1f
c00269f5:	09 ce                	or     esi,ecx
c00269f7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269fa:	01 c9                	add    ecx,ecx
c00269fc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00269ff:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026a02:	85 db                	test   ebx,ebx
c0026a04:	78 29                	js     c0026a2f <__divdf3+0x24b>
c0026a06:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026a09:	72 07                	jb     c0026a12 <__divdf3+0x22e>
c0026a0b:	75 3c                	jne    c0026a49 <__divdf3+0x265>
c0026a0d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026a10:	77 37                	ja     c0026a49 <__divdf3+0x265>
c0026a12:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026a15:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026a18:	31 d2                	xor    edx,edx
c0026a1a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026a1d:	0f 97 c2             	seta   dl
c0026a20:	29 d6                	sub    esi,edx
c0026a22:	89 d9                	mov    ecx,ebx
c0026a24:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026a27:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026a2a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026a2d:	eb 17                	jmp    c0026a46 <__divdf3+0x262>
c0026a2f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026a32:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026a35:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026a38:	0f 97 c1             	seta   cl
c0026a3b:	0f b6 c9             	movzx  ecx,cl
c0026a3e:	29 ce                	sub    esi,ecx
c0026a40:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026a43:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026a46:	83 ca 01             	or     edx,0x1
c0026a49:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026a4c:	75 8b                	jne    c00269d9 <__divdf3+0x1f5>
c0026a4e:	c1 e7 09             	shl    edi,0x9
c0026a51:	89 d1                	mov    ecx,edx
c0026a53:	c1 e9 17             	shr    ecx,0x17
c0026a56:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026a59:	09 f3                	or     ebx,esi
c0026a5b:	0f 95 c3             	setne  bl
c0026a5e:	0f b6 db             	movzx  ebx,bl
c0026a61:	c1 e2 09             	shl    edx,0x9
c0026a64:	09 d3                	or     ebx,edx
c0026a66:	89 ca                	mov    edx,ecx
c0026a68:	09 fa                	or     edx,edi
c0026a6a:	78 0c                	js     c0026a78 <__divdf3+0x294>
c0026a6c:	01 d2                	add    edx,edx
c0026a6e:	89 d9                	mov    ecx,ebx
c0026a70:	c1 e9 1f             	shr    ecx,0x1f
c0026a73:	09 ca                	or     edx,ecx
c0026a75:	01 db                	add    ebx,ebx
c0026a77:	48                   	dec    eax
c0026a78:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026a7d:	0f 8f 83 00 00 00    	jg     c0026b06 <__divdf3+0x322>
c0026a83:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026a89:	85 c0                	test   eax,eax
c0026a8b:	0f 8f 82 00 00 00    	jg     c0026b13 <__divdf3+0x32f>
c0026a91:	83 f8 cc             	cmp    eax,0xffffffcc
c0026a94:	7c 77                	jl     c0026b0d <__divdf3+0x329>
c0026a96:	be 01 00 00 00       	mov    esi,0x1
c0026a9b:	29 c6                	sub    esi,eax
c0026a9d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026aa3:	83 fe 1f             	cmp    esi,0x1f
c0026aa6:	7e 2f                	jle    c0026ad7 <__divdf3+0x2f3>
c0026aa8:	83 fe 20             	cmp    esi,0x20
c0026aab:	75 0a                	jne    c0026ab7 <__divdf3+0x2d3>
c0026aad:	85 db                	test   ebx,ebx
c0026aaf:	0f 95 c3             	setne  bl
c0026ab2:	0f b6 db             	movzx  ebx,bl
c0026ab5:	eb 1a                	jmp    c0026ad1 <__divdf3+0x2ed>
c0026ab7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026aba:	89 d7                	mov    edi,edx
c0026abc:	d3 e7                	shl    edi,cl
c0026abe:	89 f9                	mov    ecx,edi
c0026ac0:	09 d9                	or     ecx,ebx
c0026ac2:	0f 95 c3             	setne  bl
c0026ac5:	0f b6 db             	movzx  ebx,bl
c0026ac8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026acd:	29 c1                	sub    ecx,eax
c0026acf:	d3 ea                	shr    edx,cl
c0026ad1:	09 d3                	or     ebx,edx
c0026ad3:	31 c0                	xor    eax,eax
c0026ad5:	eb 3a                	jmp    c0026b11 <__divdf3+0x32d>
c0026ad7:	83 c0 1f             	add    eax,0x1f
c0026ada:	89 d7                	mov    edi,edx
c0026adc:	88 c1                	mov    cl,al
c0026ade:	d3 e7                	shl    edi,cl
c0026ae0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026ae3:	89 df                	mov    edi,ebx
c0026ae5:	89 f1                	mov    ecx,esi
c0026ae7:	d3 ef                	shr    edi,cl
c0026ae9:	89 f9                	mov    ecx,edi
c0026aeb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026aee:	09 cf                	or     edi,ecx
c0026af0:	88 c1                	mov    cl,al
c0026af2:	d3 e3                	shl    ebx,cl
c0026af4:	85 db                	test   ebx,ebx
c0026af6:	0f 95 c3             	setne  bl
c0026af9:	0f b6 db             	movzx  ebx,bl
c0026afc:	09 fb                	or     ebx,edi
c0026afe:	89 f1                	mov    ecx,esi
c0026b00:	d3 ea                	shr    edx,cl
c0026b02:	31 c0                	xor    eax,eax
c0026b04:	eb 0d                	jmp    c0026b13 <__divdf3+0x32f>
c0026b06:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026b0b:	eb 02                	jmp    c0026b0f <__divdf3+0x32b>
c0026b0d:	31 c0                	xor    eax,eax
c0026b0f:	31 db                	xor    ebx,ebx
c0026b11:	31 d2                	xor    edx,edx
c0026b13:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026b16:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026b19:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026b1f:	09 c8                	or     eax,ecx
c0026b21:	c1 e0 14             	shl    eax,0x14
c0026b24:	89 d1                	mov    ecx,edx
c0026b26:	c1 e9 0b             	shr    ecx,0xb
c0026b29:	09 c8                	or     eax,ecx
c0026b2b:	89 c6                	mov    esi,eax
c0026b2d:	89 d9                	mov    ecx,ebx
c0026b2f:	c1 e9 0b             	shr    ecx,0xb
c0026b32:	c1 e2 15             	shl    edx,0x15
c0026b35:	09 ca                	or     edx,ecx
c0026b37:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026b3d:	0f 95 c0             	setne  al
c0026b40:	09 c1                	or     ecx,eax
c0026b42:	83 e1 01             	and    ecx,0x1
c0026b45:	c1 eb 0a             	shr    ebx,0xa
c0026b48:	21 cb                	and    ebx,ecx
c0026b4a:	01 d3                	add    ebx,edx
c0026b4c:	89 d8                	mov    eax,ebx
c0026b4e:	83 d6 00             	adc    esi,0x0
c0026b51:	89 f2                	mov    edx,esi
c0026b53:	89 c7                	mov    edi,eax
c0026b55:	89 d1                	mov    ecx,edx
c0026b57:	89 f8                	mov    eax,edi
c0026b59:	89 ca                	mov    edx,ecx
c0026b5b:	83 c4 2c             	add    esp,0x2c
c0026b5e:	5b                   	pop    ebx
c0026b5f:	5e                   	pop    esi
c0026b60:	5f                   	pop    edi
c0026b61:	5d                   	pop    ebp
c0026b62:	c3                   	ret    

c0026b63 <__floatsidf>:
c0026b63:	55                   	push   ebp
c0026b64:	89 e5                	mov    ebp,esp
c0026b66:	56                   	push   esi
c0026b67:	53                   	push   ebx
c0026b68:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026b6b:	85 db                	test   ebx,ebx
c0026b6d:	7e 15                	jle    c0026b84 <__floatsidf+0x21>
c0026b6f:	0f bd cb             	bsr    ecx,ebx
c0026b72:	83 f1 1f             	xor    ecx,0x1f
c0026b75:	d3 e3                	shl    ebx,cl
c0026b77:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026b7d:	b8 1e 04 00 00       	mov    eax,0x41e
c0026b82:	eb 21                	jmp    c0026ba5 <__floatsidf+0x42>
c0026b84:	b8 00 00 00 00       	mov    eax,0x0
c0026b89:	ba 00 00 00 00       	mov    edx,0x0
c0026b8e:	74 2a                	je     c0026bba <__floatsidf+0x57>
c0026b90:	f7 db                	neg    ebx
c0026b92:	0f bd cb             	bsr    ecx,ebx
c0026b95:	83 f1 1f             	xor    ecx,0x1f
c0026b98:	d3 e3                	shl    ebx,cl
c0026b9a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026ba0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026ba5:	29 c8                	sub    eax,ecx
c0026ba7:	c1 e0 14             	shl    eax,0x14
c0026baa:	89 c1                	mov    ecx,eax
c0026bac:	89 de                	mov    esi,ebx
c0026bae:	c1 ee 0b             	shr    esi,0xb
c0026bb1:	09 f1                	or     ecx,esi
c0026bb3:	89 ca                	mov    edx,ecx
c0026bb5:	c1 e3 15             	shl    ebx,0x15
c0026bb8:	89 d8                	mov    eax,ebx
c0026bba:	5b                   	pop    ebx
c0026bbb:	5e                   	pop    esi
c0026bbc:	5d                   	pop    ebp
c0026bbd:	c3                   	ret    

c0026bbe <__floatunsidf>:
c0026bbe:	55                   	push   ebp
c0026bbf:	89 e5                	mov    ebp,esp
c0026bc1:	56                   	push   esi
c0026bc2:	53                   	push   ebx
c0026bc3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026bc6:	85 db                	test   ebx,ebx
c0026bc8:	74 2a                	je     c0026bf4 <__floatunsidf+0x36>
c0026bca:	0f bd cb             	bsr    ecx,ebx
c0026bcd:	83 f1 1f             	xor    ecx,0x1f
c0026bd0:	d3 e3                	shl    ebx,cl
c0026bd2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026bd8:	b8 1e 04 00 00       	mov    eax,0x41e
c0026bdd:	29 c8                	sub    eax,ecx
c0026bdf:	c1 e0 14             	shl    eax,0x14
c0026be2:	89 c1                	mov    ecx,eax
c0026be4:	89 de                	mov    esi,ebx
c0026be6:	c1 ee 0b             	shr    esi,0xb
c0026be9:	09 f1                	or     ecx,esi
c0026beb:	89 ca                	mov    edx,ecx
c0026bed:	c1 e3 15             	shl    ebx,0x15
c0026bf0:	89 d8                	mov    eax,ebx
c0026bf2:	eb 04                	jmp    c0026bf8 <__floatunsidf+0x3a>
c0026bf4:	31 c0                	xor    eax,eax
c0026bf6:	31 d2                	xor    edx,edx
c0026bf8:	5b                   	pop    ebx
c0026bf9:	5e                   	pop    esi
c0026bfa:	5d                   	pop    ebp
c0026bfb:	c3                   	ret    

c0026bfc <__fixdfsi>:
c0026bfc:	55                   	push   ebp
c0026bfd:	89 e5                	mov    ebp,esp
c0026bff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026c02:	89 d1                	mov    ecx,edx
c0026c04:	c1 e1 0b             	shl    ecx,0xb
c0026c07:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c10:	c1 e8 15             	shr    eax,0x15
c0026c13:	09 c1                	or     ecx,eax
c0026c15:	c1 fa 14             	sar    edx,0x14
c0026c18:	78 1f                	js     c0026c39 <__fixdfsi+0x3d>
c0026c1a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026c20:	31 c0                	xor    eax,eax
c0026c22:	83 fa 1e             	cmp    edx,0x1e
c0026c25:	77 40                	ja     c0026c67 <__fixdfsi+0x6b>
c0026c27:	89 c8                	mov    eax,ecx
c0026c29:	0d 00 00 00 80       	or     eax,0x80000000
c0026c2e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026c33:	29 d1                	sub    ecx,edx
c0026c35:	d3 e8                	shr    eax,cl
c0026c37:	eb 2e                	jmp    c0026c67 <__fixdfsi+0x6b>
c0026c39:	31 c0                	xor    eax,eax
c0026c3b:	81 c2 01 04 00 00    	add    edx,0x401
c0026c41:	78 24                	js     c0026c67 <__fixdfsi+0x6b>
c0026c43:	83 fa 1e             	cmp    edx,0x1e
c0026c46:	7e 09                	jle    c0026c51 <__fixdfsi+0x55>
c0026c48:	83 fa 1f             	cmp    edx,0x1f
c0026c4b:	75 18                	jne    c0026c65 <__fixdfsi+0x69>
c0026c4d:	85 c9                	test   ecx,ecx
c0026c4f:	75 14                	jne    c0026c65 <__fixdfsi+0x69>
c0026c51:	89 c8                	mov    eax,ecx
c0026c53:	0d 00 00 00 80       	or     eax,0x80000000
c0026c58:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026c5d:	29 d1                	sub    ecx,edx
c0026c5f:	d3 e8                	shr    eax,cl
c0026c61:	f7 d8                	neg    eax
c0026c63:	eb 02                	jmp    c0026c67 <__fixdfsi+0x6b>
c0026c65:	31 c0                	xor    eax,eax
c0026c67:	5d                   	pop    ebp
c0026c68:	c3                   	ret    

c0026c69 <__fixunsdfsi>:
c0026c69:	55                   	push   ebp
c0026c6a:	89 e5                	mov    ebp,esp
c0026c6c:	53                   	push   ebx
c0026c6d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026c70:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026c73:	89 d3                	mov    ebx,edx
c0026c75:	c1 fb 14             	sar    ebx,0x14
c0026c78:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026c7e:	31 c0                	xor    eax,eax
c0026c80:	83 fb 1f             	cmp    ebx,0x1f
c0026c83:	77 1d                	ja     c0026ca2 <__fixunsdfsi+0x39>
c0026c85:	89 d0                	mov    eax,edx
c0026c87:	c1 e0 0b             	shl    eax,0xb
c0026c8a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026c8f:	c1 e9 15             	shr    ecx,0x15
c0026c92:	09 c8                	or     eax,ecx
c0026c94:	0d 00 00 00 80       	or     eax,0x80000000
c0026c99:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026c9e:	29 d9                	sub    ecx,ebx
c0026ca0:	d3 e8                	shr    eax,cl
c0026ca2:	5b                   	pop    ebx
c0026ca3:	5d                   	pop    ebp
c0026ca4:	c3                   	ret    

c0026ca5 <__cmpdf2>:
c0026ca5:	55                   	push   ebp
c0026ca6:	89 e5                	mov    ebp,esp
c0026ca8:	57                   	push   edi
c0026ca9:	56                   	push   esi
c0026caa:	53                   	push   ebx
c0026cab:	83 ec 0c             	sub    esp,0xc
c0026cae:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026cb1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026cb4:	89 ca                	mov    edx,ecx
c0026cb6:	c1 ea 14             	shr    edx,0x14
c0026cb9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026cbf:	89 cb                	mov    ebx,ecx
c0026cc1:	c1 fb 1f             	sar    ebx,0x1f
c0026cc4:	31 da                	xor    edx,ebx
c0026cc6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026cc9:	89 df                	mov    edi,ebx
c0026ccb:	c1 e7 0b             	shl    edi,0xb
c0026cce:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026cd1:	c1 e1 0b             	shl    ecx,0xb
c0026cd4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026cda:	c1 eb 15             	shr    ebx,0x15
c0026cdd:	09 d9                	or     ecx,ebx
c0026cdf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026ce2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026ce5:	89 ce                	mov    esi,ecx
c0026ce7:	c1 ee 14             	shr    esi,0x14
c0026cea:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026cf0:	89 cb                	mov    ebx,ecx
c0026cf2:	c1 fb 1f             	sar    ebx,0x1f
c0026cf5:	31 de                	xor    esi,ebx
c0026cf7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026cfa:	89 df                	mov    edi,ebx
c0026cfc:	c1 e7 0b             	shl    edi,0xb
c0026cff:	c1 e1 0b             	shl    ecx,0xb
c0026d02:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026d08:	c1 eb 15             	shr    ebx,0x15
c0026d0b:	09 d9                	or     ecx,ebx
c0026d0d:	89 d3                	mov    ebx,edx
c0026d0f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026d15:	43                   	inc    ebx
c0026d16:	83 fb 01             	cmp    ebx,0x1
c0026d19:	77 08                	ja     c0026d23 <__cmpdf2+0x7e>
c0026d1b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026d1e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026d21:	75 68                	jne    c0026d8b <__cmpdf2+0xe6>
c0026d23:	89 f3                	mov    ebx,esi
c0026d25:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026d2b:	43                   	inc    ebx
c0026d2c:	83 fb 01             	cmp    ebx,0x1
c0026d2f:	77 06                	ja     c0026d37 <__cmpdf2+0x92>
c0026d31:	89 fb                	mov    ebx,edi
c0026d33:	09 cb                	or     ebx,ecx
c0026d35:	75 54                	jne    c0026d8b <__cmpdf2+0xe6>
c0026d37:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026d3a:	09 f8                	or     eax,edi
c0026d3c:	09 c8                	or     eax,ecx
c0026d3e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026d41:	75 12                	jne    c0026d55 <__cmpdf2+0xb0>
c0026d43:	8d 42 01             	lea    eax,[edx+0x1]
c0026d46:	83 f8 01             	cmp    eax,0x1
c0026d49:	77 0a                	ja     c0026d55 <__cmpdf2+0xb0>
c0026d4b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026d4e:	31 c0                	xor    eax,eax
c0026d50:	83 fb 01             	cmp    ebx,0x1
c0026d53:	76 36                	jbe    c0026d8b <__cmpdf2+0xe6>
c0026d55:	b8 01 00 00 00       	mov    eax,0x1
c0026d5a:	39 f2                	cmp    edx,esi
c0026d5c:	7f 2d                	jg     c0026d8b <__cmpdf2+0xe6>
c0026d5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026d63:	7c 26                	jl     c0026d8b <__cmpdf2+0xe6>
c0026d65:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026d68:	77 07                	ja     c0026d71 <__cmpdf2+0xcc>
c0026d6a:	72 16                	jb     c0026d82 <__cmpdf2+0xdd>
c0026d6c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026d6f:	76 0a                	jbe    c0026d7b <__cmpdf2+0xd6>
c0026d71:	89 d0                	mov    eax,edx
c0026d73:	c1 f8 1f             	sar    eax,0x1f
c0026d76:	83 c8 01             	or     eax,0x1
c0026d79:	eb 10                	jmp    c0026d8b <__cmpdf2+0xe6>
c0026d7b:	b8 00 00 00 00       	mov    eax,0x0
c0026d80:	73 09                	jae    c0026d8b <__cmpdf2+0xe6>
c0026d82:	89 d0                	mov    eax,edx
c0026d84:	c1 f8 1f             	sar    eax,0x1f
c0026d87:	83 e0 02             	and    eax,0x2
c0026d8a:	48                   	dec    eax
c0026d8b:	83 c4 0c             	add    esp,0xc
c0026d8e:	5b                   	pop    ebx
c0026d8f:	5e                   	pop    esi
c0026d90:	5f                   	pop    edi
c0026d91:	5d                   	pop    ebp
c0026d92:	c3                   	ret    

c0026d93 <__eqdf2>:
c0026d93:	55                   	push   ebp
c0026d94:	89 e5                	mov    ebp,esp
c0026d96:	50                   	push   eax
c0026d97:	6a 01                	push   0x1
c0026d99:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026d9c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026d9f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026da2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026da5:	e8 fb fe ff ff       	call   c0026ca5 <__cmpdf2>
c0026daa:	83 c4 18             	add    esp,0x18
c0026dad:	c9                   	leave  
c0026dae:	c3                   	ret    

c0026daf <__nedf2>:
c0026daf:	eb e2                	jmp    c0026d93 <__eqdf2>

c0026db1 <__gtdf2>:
c0026db1:	55                   	push   ebp
c0026db2:	89 e5                	mov    ebp,esp
c0026db4:	50                   	push   eax
c0026db5:	6a ff                	push   0xffffffff
c0026db7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026dba:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026dbd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dc3:	e8 dd fe ff ff       	call   c0026ca5 <__cmpdf2>
c0026dc8:	83 c4 18             	add    esp,0x18
c0026dcb:	c9                   	leave  
c0026dcc:	c3                   	ret    

c0026dcd <__gedf2>:
c0026dcd:	eb e2                	jmp    c0026db1 <__gtdf2>

c0026dcf <__ltdf2>:
c0026dcf:	eb c2                	jmp    c0026d93 <__eqdf2>

c0026dd1 <__ledf2>:
c0026dd1:	eb c0                	jmp    c0026d93 <__eqdf2>

c0026dd3 <__truncdfsf2>:
c0026dd3:	55                   	push   ebp
c0026dd4:	89 e5                	mov    ebp,esp
c0026dd6:	57                   	push   edi
c0026dd7:	56                   	push   esi
c0026dd8:	53                   	push   ebx
c0026dd9:	83 ec 0c             	sub    esp,0xc
c0026ddc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026ddf:	89 d1                	mov    ecx,edx
c0026de1:	c1 f9 14             	sar    ecx,0x14
c0026de4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026de7:	89 df                	mov    edi,ebx
c0026de9:	c1 e7 0b             	shl    edi,0xb
c0026dec:	89 d0                	mov    eax,edx
c0026dee:	c1 e0 0b             	shl    eax,0xb
c0026df1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026df6:	c1 eb 15             	shr    ebx,0x15
c0026df9:	09 d8                	or     eax,ebx
c0026dfb:	89 cb                	mov    ebx,ecx
c0026dfd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026e03:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026e09:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026e0f:	0f 86 9e 00 00 00    	jbe    c0026eb3 <__truncdfsf2+0xe0>
c0026e15:	85 db                	test   ebx,ebx
c0026e17:	75 0a                	jne    c0026e23 <__truncdfsf2+0x50>
c0026e19:	c1 fa 17             	sar    edx,0x17
c0026e1c:	30 d2                	xor    dl,dl
c0026e1e:	e9 84 00 00 00       	jmp    c0026ea7 <__truncdfsf2+0xd4>
c0026e23:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026e29:	83 fe 83             	cmp    esi,0xffffff83
c0026e2c:	7d 4b                	jge    c0026e79 <__truncdfsf2+0xa6>
c0026e2e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026e33:	29 f1                	sub    ecx,esi
c0026e35:	83 f9 1f             	cmp    ecx,0x1f
c0026e38:	7f 6b                	jg     c0026ea5 <__truncdfsf2+0xd2>
c0026e3a:	0d 00 00 00 80       	or     eax,0x80000000
c0026e3f:	89 c3                	mov    ebx,eax
c0026e41:	d3 eb                	shr    ebx,cl
c0026e43:	be 01 00 00 00       	mov    esi,0x1
c0026e48:	d3 e6                	shl    esi,cl
c0026e4a:	4e                   	dec    esi
c0026e4b:	21 f0                	and    eax,esi
c0026e4d:	09 f8                	or     eax,edi
c0026e4f:	0f 95 c0             	setne  al
c0026e52:	0f b6 c0             	movzx  eax,al
c0026e55:	09 c3                	or     ebx,eax
c0026e57:	89 d9                	mov    ecx,ebx
c0026e59:	c1 e9 08             	shr    ecx,0x8
c0026e5c:	f6 c3 7f             	test   bl,0x7f
c0026e5f:	0f 95 c0             	setne  al
c0026e62:	09 c8                	or     eax,ecx
c0026e64:	83 e0 01             	and    eax,0x1
c0026e67:	c1 eb 07             	shr    ebx,0x7
c0026e6a:	21 c3                	and    ebx,eax
c0026e6c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026e72:	09 d1                	or     ecx,edx
c0026e74:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026e77:	eb 76                	jmp    c0026eef <__truncdfsf2+0x11c>
c0026e79:	83 c6 80             	add    esi,0xffffff80
c0026e7c:	7e 1d                	jle    c0026e9b <__truncdfsf2+0xc8>
c0026e7e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026e84:	75 0b                	jne    c0026e91 <__truncdfsf2+0xbe>
c0026e86:	09 f8                	or     eax,edi
c0026e88:	74 09                	je     c0026e93 <__truncdfsf2+0xc0>
c0026e8a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026e8f:	eb 02                	jmp    c0026e93 <__truncdfsf2+0xc0>
c0026e91:	31 c0                	xor    eax,eax
c0026e93:	c1 fa 17             	sar    edx,0x17
c0026e96:	80 ca ff             	or     dl,0xff
c0026e99:	eb 0e                	jmp    c0026ea9 <__truncdfsf2+0xd6>
c0026e9b:	c1 fa 1f             	sar    edx,0x1f
c0026e9e:	c1 e2 08             	shl    edx,0x8
c0026ea1:	09 ca                	or     edx,ecx
c0026ea3:	eb 04                	jmp    c0026ea9 <__truncdfsf2+0xd6>
c0026ea5:	31 d2                	xor    edx,edx
c0026ea7:	31 c0                	xor    eax,eax
c0026ea9:	c1 e2 17             	shl    edx,0x17
c0026eac:	c1 e8 08             	shr    eax,0x8
c0026eaf:	09 d0                	or     eax,edx
c0026eb1:	eb 3c                	jmp    c0026eef <__truncdfsf2+0x11c>
c0026eb3:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026eb9:	89 ca                	mov    edx,ecx
c0026ebb:	c1 fa 0b             	sar    edx,0xb
c0026ebe:	c1 e2 08             	shl    edx,0x8
c0026ec1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026ec4:	31 db                	xor    ebx,ebx
c0026ec6:	85 ff                	test   edi,edi
c0026ec8:	0f 95 c3             	setne  bl
c0026ecb:	09 d8                	or     eax,ebx
c0026ecd:	89 c3                	mov    ebx,eax
c0026ecf:	c1 eb 08             	shr    ebx,0x8
c0026ed2:	a8 7f                	test   al,0x7f
c0026ed4:	0f 95 c2             	setne  dl
c0026ed7:	89 d6                	mov    esi,edx
c0026ed9:	09 de                	or     esi,ebx
c0026edb:	83 e6 01             	and    esi,0x1
c0026ede:	c1 e8 07             	shr    eax,0x7
c0026ee1:	21 f0                	and    eax,esi
c0026ee3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026ee6:	09 ca                	or     edx,ecx
c0026ee8:	c1 e2 17             	shl    edx,0x17
c0026eeb:	09 da                	or     edx,ebx
c0026eed:	01 d0                	add    eax,edx
c0026eef:	83 c4 0c             	add    esp,0xc
c0026ef2:	5b                   	pop    ebx
c0026ef3:	5e                   	pop    esi
c0026ef4:	5f                   	pop    edi
c0026ef5:	5d                   	pop    ebp
c0026ef6:	c3                   	ret    

c0026ef7 <__extendsfdf2>:
c0026ef7:	55                   	push   ebp
c0026ef8:	89 e5                	mov    ebp,esp
c0026efa:	57                   	push   edi
c0026efb:	56                   	push   esi
c0026efc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026eff:	89 d1                	mov    ecx,edx
c0026f01:	c1 f9 17             	sar    ecx,0x17
c0026f04:	c1 e2 08             	shl    edx,0x8
c0026f07:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026f0d:	89 c8                	mov    eax,ecx
c0026f0f:	80 e4 f8             	and    ah,0xf8
c0026f12:	8d 71 01             	lea    esi,[ecx+0x1]
c0026f15:	81 e6 fe 00 00 00    	and    esi,0xfe
c0026f1b:	75 27                	jne    c0026f44 <__extendsfdf2+0x4d>
c0026f1d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026f23:	75 18                	jne    c0026f3d <__extendsfdf2+0x46>
c0026f25:	85 d2                	test   edx,edx
c0026f27:	74 20                	je     c0026f49 <__extendsfdf2+0x52>
c0026f29:	41                   	inc    ecx
c0026f2a:	01 d2                	add    edx,edx
c0026f2c:	79 fb                	jns    c0026f29 <__extendsfdf2+0x32>
c0026f2e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f34:	29 c8                	sub    eax,ecx
c0026f36:	05 81 03 00 00       	add    eax,0x381
c0026f3b:	eb 0c                	jmp    c0026f49 <__extendsfdf2+0x52>
c0026f3d:	05 00 07 00 00       	add    eax,0x700
c0026f42:	eb 05                	jmp    c0026f49 <__extendsfdf2+0x52>
c0026f44:	05 80 03 00 00       	add    eax,0x380
c0026f49:	c1 e0 14             	shl    eax,0x14
c0026f4c:	89 c1                	mov    ecx,eax
c0026f4e:	89 d0                	mov    eax,edx
c0026f50:	c1 e8 0b             	shr    eax,0xb
c0026f53:	09 c1                	or     ecx,eax
c0026f55:	c1 e2 15             	shl    edx,0x15
c0026f58:	89 d0                	mov    eax,edx
c0026f5a:	89 ca                	mov    edx,ecx
c0026f5c:	5e                   	pop    esi
c0026f5d:	5f                   	pop    edi
c0026f5e:	5d                   	pop    ebp
c0026f5f:	c3                   	ret    

c0026f60 <fabs>:
c0026f60:	83 ec 0c             	sub    esp,0xc
c0026f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f67:	89 04 24             	mov    DWORD PTR [esp],eax
c0026f6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f6e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026f77:	dd 04 24             	fld    QWORD PTR [esp]
c0026f7a:	83 c4 0c             	add    esp,0xc
c0026f7d:	c3                   	ret    
c0026f7e:	66 90                	xchg   ax,ax

c0026f80 <lrint>:
c0026f80:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026f84:	83 ec 04             	sub    esp,0x4
c0026f87:	db 1c 24             	fistp  DWORD PTR [esp]
c0026f8a:	58                   	pop    eax
c0026f8b:	c3                   	ret    

c0026f8c <lrintf>:
c0026f8c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0026f90:	83 ec 04             	sub    esp,0x4
c0026f93:	db 1c 24             	fistp  DWORD PTR [esp]
c0026f96:	58                   	pop    eax
c0026f97:	c3                   	ret    

Disassembly of section .init:

c0026f98 <_init>:
c0026f98:	55                   	push   ebp
c0026f99:	89 e5                	mov    ebp,esp
c0026f9b:	e8 78 91 fd ff       	call   c0000118 <frame_dummy>
c0026fa0:	e8 63 e0 ff ff       	call   c0025008 <__do_global_ctors_aux>
c0026fa5:	5d                   	pop    ebp
c0026fa6:	c3                   	ret    

Disassembly of section .fini:

c0026fa7 <_fini>:
c0026fa7:	55                   	push   ebp
c0026fa8:	89 e5                	mov    ebp,esp
c0026faa:	e8 f9 90 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0026faf:	5d                   	pop    ebp
c0026fb0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0026fb2 <Computer::~Computer()>:
c0026fb2:	83 ec 0c             	sub    esp,0xc
c0026fb5:	ba 50 8a 02 c0       	mov    edx,0xc0028a50
c0026fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fbe:	89 10                	mov    DWORD PTR [eax],edx
c0026fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fc4:	83 ec 0c             	sub    esp,0xc
c0026fc7:	50                   	push   eax
c0026fc8:	e8 c5 c9 fe ff       	call   c0013992 <Device::~Device()>
c0026fcd:	83 c4 10             	add    esp,0x10
c0026fd0:	90                   	nop
c0026fd1:	83 c4 0c             	add    esp,0xc
c0026fd4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0026fd6 <Computer::~Computer()>:
c0026fd6:	83 ec 0c             	sub    esp,0xc
c0026fd9:	83 ec 0c             	sub    esp,0xc
c0026fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fe0:	e8 cd ff ff ff       	call   c0026fb2 <Computer::~Computer()>
c0026fe5:	83 c4 10             	add    esp,0x10
c0026fe8:	83 ec 08             	sub    esp,0x8
c0026feb:	68 ec 01 00 00       	push   0x1ec
c0026ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ff4:	e8 f8 b5 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0026ff9:	83 c4 10             	add    esp,0x10
c0026ffc:	83 c4 0c             	add    esp,0xc
c0026fff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027000 <idleCommon()>:
c0027000:	83 ec 0c             	sub    esp,0xc
c0027003:	e8 72 5c ff ff       	call   c001cc7a <lockScheduler()>
c0027008:	e8 a9 5f ff ff       	call   c001cfb6 <schedule()>
c002700d:	83 c4 0c             	add    esp,0xc
c0027010:	e9 67 5c ff ff       	jmp    c001cc7c <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027016 <LinkedList<UnixFile>::~LinkedList()>:
c0027016:	90                   	nop
c0027017:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027018 <LinkedList<UnixFile>::LinkedList()>:
c0027018:	83 ec 0c             	sub    esp,0xc
c002701b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002701f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027029:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027034:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002703b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002703f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027049:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027054:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002705b:	83 ec 0c             	sub    esp,0xc
c002705e:	68 c6 8c 02 c0       	push   0xc0028cc6
c0027063:	e8 69 b6 fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0027068:	83 c4 10             	add    esp,0x10
c002706b:	90                   	nop
c002706c:	83 c4 0c             	add    esp,0xc
c002706f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027070 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027070:	83 ec 0c             	sub    esp,0xc
c0027073:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027078:	75 10                	jne    c002708a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002707a:	83 ec 0c             	sub    esp,0xc
c002707d:	68 e0 8c 02 c0       	push   0xc0028ce0
c0027082:	e8 64 27 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0027087:	83 c4 10             	add    esp,0x10
c002708a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002708e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027090:	85 c0                	test   eax,eax
c0027092:	74 34                	je     c00270c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002709b:	85 c0                	test   eax,eax
c002709d:	74 29                	je     c00270c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002709f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00270a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00270aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00270ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00270b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00270b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00270bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00270c6:	eb 65                	jmp    c002712d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00270c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00270ce:	85 c0                	test   eax,eax
c00270d0:	75 4b                	jne    c002711d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00270d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00270d9:	85 c0                	test   eax,eax
c00270db:	75 40                	jne    c002711d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00270dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00270e5:	89 10                	mov    DWORD PTR [eax],edx
c00270e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00270ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00270f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00270f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027104:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027107:	85 c0                	test   eax,eax
c0027109:	74 22                	je     c002712d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002710b:	83 ec 0c             	sub    esp,0xc
c002710e:	68 02 8d 02 c0       	push   0xc0028d02
c0027113:	e8 d3 26 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0027118:	83 c4 10             	add    esp,0x10
c002711b:	eb 10                	jmp    c002712d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002711d:	83 ec 0c             	sub    esp,0xc
c0027120:	68 0c 8d 02 c0       	push   0xc0028d0c
c0027125:	e8 c1 26 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c002712a:	83 c4 10             	add    esp,0x10
c002712d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027131:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027134:	8d 50 01             	lea    edx,[eax+0x1]
c0027137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002713b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002713e:	90                   	nop
c002713f:	83 c4 0c             	add    esp,0xc
c0027142:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027144 <LinkedList<UnixFile>::getFirstElement()>:
c0027144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027148:	8b 00                	mov    eax,DWORD PTR [eax]
c002714a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002714c <LinkedList<UnixFile>::removeFirst()>:
c002714c:	83 ec 0c             	sub    esp,0xc
c002714f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027153:	8b 00                	mov    eax,DWORD PTR [eax]
c0027155:	85 c0                	test   eax,eax
c0027157:	75 12                	jne    c002716b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027159:	83 ec 0c             	sub    esp,0xc
c002715c:	68 18 8d 02 c0       	push   0xc0028d18
c0027161:	e8 85 26 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0027166:	83 c4 10             	add    esp,0x10
c0027169:	eb 7e                	jmp    c00271e9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002716b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002716f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027172:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027175:	85 c0                	test   eax,eax
c0027177:	74 10                	je     c0027189 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027179:	83 ec 0c             	sub    esp,0xc
c002717c:	68 63 8d 02 c0       	push   0xc0028d63
c0027181:	e8 65 26 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0027186:	83 c4 10             	add    esp,0x10
c0027189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002718d:	8b 00                	mov    eax,DWORD PTR [eax]
c002718f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027192:	85 c0                	test   eax,eax
c0027194:	75 33                	jne    c00271c9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002719a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00271a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00271ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271b2:	83 f8 01             	cmp    eax,0x1
c00271b5:	74 21                	je     c00271d8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00271b7:	83 ec 0c             	sub    esp,0xc
c00271ba:	68 3c 8d 02 c0       	push   0xc0028d3c
c00271bf:	e8 27 26 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c00271c4:	83 c4 10             	add    esp,0x10
c00271c7:	eb 0f                	jmp    c00271d8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00271c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00271cf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00271d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271d6:	89 10                	mov    DWORD PTR [eax],edx
c00271d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271df:	8d 50 ff             	lea    edx,[eax-0x1]
c00271e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00271e9:	83 c4 0c             	add    esp,0xc
c00271ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00271ee <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00271ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00271f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271f5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00271f6 <DriverlessDevice::~DriverlessDevice()>:
c00271f6:	ba 24 94 02 c0       	mov    edx,0xc0029424
c00271fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00271ff:	89 10                	mov    DWORD PTR [eax],edx
c0027201:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027205:	50                   	push   eax
c0027206:	e8 87 c7 fe ff       	call   c0013992 <Device::~Device()>
c002720b:	83 c4 04             	add    esp,0x4
c002720e:	90                   	nop
c002720f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0027210 <DriverlessDevice::~DriverlessDevice()>:
c0027210:	83 ec 0c             	sub    esp,0xc
c0027213:	83 ec 0c             	sub    esp,0xc
c0027216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002721a:	e8 d7 ff ff ff       	call   c00271f6 <DriverlessDevice::~DriverlessDevice()>
c002721f:	83 c4 10             	add    esp,0x10
c0027222:	83 ec 08             	sub    esp,0x8
c0027225:	68 58 01 00 00       	push   0x158
c002722a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002722e:	e8 be b3 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0027233:	83 c4 10             	add    esp,0x10
c0027236:	83 c4 0c             	add    esp,0xc
c0027239:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002723a <LinkedList<Device>::addElement(Device*)>:
c002723a:	83 ec 0c             	sub    esp,0xc
c002723d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027242:	75 10                	jne    c0027254 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027244:	83 ec 0c             	sub    esp,0xc
c0027247:	68 e0 8c 02 c0       	push   0xc0028ce0
c002724c:	e8 9a 25 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0027251:	83 c4 10             	add    esp,0x10
c0027254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027258:	8b 00                	mov    eax,DWORD PTR [eax]
c002725a:	85 c0                	test   eax,eax
c002725c:	74 3a                	je     c0027298 <LinkedList<Device>::addElement(Device*)+0x5e>
c002725e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027262:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027265:	85 c0                	test   eax,eax
c0027267:	74 2f                	je     c0027298 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002726d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027270:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027274:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002727a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002727e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027282:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027289:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002728c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027296:	eb 68                	jmp    c0027300 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002729c:	8b 00                	mov    eax,DWORD PTR [eax]
c002729e:	85 c0                	test   eax,eax
c00272a0:	75 4e                	jne    c00272f0 <LinkedList<Device>::addElement(Device*)+0xb6>
c00272a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00272a9:	85 c0                	test   eax,eax
c00272ab:	75 43                	jne    c00272f0 <LinkedList<Device>::addElement(Device*)+0xb6>
c00272ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00272b5:	89 10                	mov    DWORD PTR [eax],edx
c00272b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00272bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00272c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00272c9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00272d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272da:	85 c0                	test   eax,eax
c00272dc:	74 22                	je     c0027300 <LinkedList<Device>::addElement(Device*)+0xc6>
c00272de:	83 ec 0c             	sub    esp,0xc
c00272e1:	68 02 8d 02 c0       	push   0xc0028d02
c00272e6:	e8 00 25 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c00272eb:	83 c4 10             	add    esp,0x10
c00272ee:	eb 10                	jmp    c0027300 <LinkedList<Device>::addElement(Device*)+0xc6>
c00272f0:	83 ec 0c             	sub    esp,0xc
c00272f3:	68 0c 8d 02 c0       	push   0xc0028d0c
c00272f8:	e8 ee 24 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c00272fd:	83 c4 10             	add    esp,0x10
c0027300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027304:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027307:	8d 50 01             	lea    edx,[eax+0x1]
c002730a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002730e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027311:	90                   	nop
c0027312:	83 c4 0c             	add    esp,0xc
c0027315:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0027316 <LinkedList<Device>::LinkedList()>:
c0027316:	83 ec 0c             	sub    esp,0xc
c0027319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002731d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027327:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002732e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027332:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002733d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027347:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002734e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027352:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027359:	83 ec 0c             	sub    esp,0xc
c002735c:	68 c6 8c 02 c0       	push   0xc0028cc6
c0027361:	e8 6b b3 fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0027366:	83 c4 10             	add    esp,0x10
c0027369:	90                   	nop
c002736a:	83 c4 0c             	add    esp,0xc
c002736d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002736e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002736e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027372:	8b 00                	mov    eax,DWORD PTR [eax]
c0027374:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027376 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002737a:	8b 00                	mov    eax,DWORD PTR [eax]
c002737c:	85 c0                	test   eax,eax
c002737e:	75 0e                	jne    c002738e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027387:	85 c0                	test   eax,eax
c0027389:	75 03                	jne    c002738e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002738b:	b0 01                	mov    al,0x1
c002738d:	c3                   	ret    
c002738e:	b0 00                	mov    al,0x0
c0027390:	90                   	nop
c0027391:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027392 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027392:	83 ec 0c             	sub    esp,0xc
c0027395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027399:	8b 00                	mov    eax,DWORD PTR [eax]
c002739b:	85 c0                	test   eax,eax
c002739d:	75 15                	jne    c00273b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002739f:	83 ec 0c             	sub    esp,0xc
c00273a2:	68 18 8d 02 c0       	push   0xc0028d18
c00273a7:	e8 3f 24 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c00273ac:	83 c4 10             	add    esp,0x10
c00273af:	e9 88 00 00 00       	jmp    c002743c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00273b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00273be:	85 c0                	test   eax,eax
c00273c0:	0f 95 c0             	setne  al
c00273c3:	84 c0                	test   al,al
c00273c5:	74 10                	je     c00273d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00273c7:	83 ec 0c             	sub    esp,0xc
c00273ca:	68 63 8d 02 c0       	push   0xc0028d63
c00273cf:	e8 17 24 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c00273d4:	83 c4 10             	add    esp,0x10
c00273d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273db:	8b 00                	mov    eax,DWORD PTR [eax]
c00273dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00273e0:	85 c0                	test   eax,eax
c00273e2:	0f 94 c0             	sete   al
c00273e5:	84 c0                	test   al,al
c00273e7:	74 33                	je     c002741c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00273e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027402:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027405:	83 f8 01             	cmp    eax,0x1
c0027408:	74 21                	je     c002742b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002740a:	83 ec 0c             	sub    esp,0xc
c002740d:	68 3c 8d 02 c0       	push   0xc0028d3c
c0027412:	e8 d4 23 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0027417:	83 c4 10             	add    esp,0x10
c002741a:	eb 0f                	jmp    c002742b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002741c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027420:	8b 00                	mov    eax,DWORD PTR [eax]
c0027422:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0027425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027429:	89 10                	mov    DWORD PTR [eax],edx
c002742b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002742f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027432:	8d 50 ff             	lea    edx,[eax-0x1]
c0027435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027439:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002743c:	83 c4 0c             	add    esp,0xc
c002743f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027440 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027440:	83 ec 0c             	sub    esp,0xc
c0027443:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027448:	75 10                	jne    c002745a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002744a:	83 ec 0c             	sub    esp,0xc
c002744d:	68 e0 8c 02 c0       	push   0xc0028ce0
c0027452:	e8 94 23 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c0027457:	83 c4 10             	add    esp,0x10
c002745a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002745e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027460:	85 c0                	test   eax,eax
c0027462:	74 34                	je     c0027498 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027468:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002746b:	85 c0                	test   eax,eax
c002746d:	74 29                	je     c0027498 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002746f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027473:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027476:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002747a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002747d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027481:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027485:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002748c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002748f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027496:	eb 65                	jmp    c00274fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002749c:	8b 00                	mov    eax,DWORD PTR [eax]
c002749e:	85 c0                	test   eax,eax
c00274a0:	75 4b                	jne    c00274ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00274a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274a9:	85 c0                	test   eax,eax
c00274ab:	75 40                	jne    c00274ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00274ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00274b5:	89 10                	mov    DWORD PTR [eax],edx
c00274b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00274bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00274c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00274d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274d7:	85 c0                	test   eax,eax
c00274d9:	74 22                	je     c00274fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00274db:	83 ec 0c             	sub    esp,0xc
c00274de:	68 02 8d 02 c0       	push   0xc0028d02
c00274e3:	e8 03 23 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c00274e8:	83 c4 10             	add    esp,0x10
c00274eb:	eb 10                	jmp    c00274fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00274ed:	83 ec 0c             	sub    esp,0xc
c00274f0:	68 0c 8d 02 c0       	push   0xc0028d0c
c00274f5:	e8 f1 22 ff ff       	call   c00197eb <Krnl::panic(char const*)>
c00274fa:	83 c4 10             	add    esp,0x10
c00274fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027501:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027504:	8d 50 01             	lea    edx,[eax+0x1]
c0027507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002750b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002750e:	90                   	nop
c002750f:	83 c4 0c             	add    esp,0xc
c0027512:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0027514 <ACPI::~ACPI()>:
c0027514:	83 ec 0c             	sub    esp,0xc
c0027517:	ba c8 9c 02 c0       	mov    edx,0xc0029cc8
c002751c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027520:	89 10                	mov    DWORD PTR [eax],edx
c0027522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027526:	83 ec 0c             	sub    esp,0xc
c0027529:	50                   	push   eax
c002752a:	e8 63 c4 fe ff       	call   c0013992 <Device::~Device()>
c002752f:	83 c4 10             	add    esp,0x10
c0027532:	90                   	nop
c0027533:	83 c4 0c             	add    esp,0xc
c0027536:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027538 <ACPI::~ACPI()>:
c0027538:	83 ec 0c             	sub    esp,0xc
c002753b:	83 ec 0c             	sub    esp,0xc
c002753e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027542:	e8 cd ff ff ff       	call   c0027514 <ACPI::~ACPI()>
c0027547:	83 c4 10             	add    esp,0x10
c002754a:	83 ec 08             	sub    esp,0x8
c002754d:	68 68 22 00 00       	push   0x2268
c0027552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027556:	e8 96 b0 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c002755b:	83 c4 10             	add    esp,0x10
c002755e:	83 c4 0c             	add    esp,0xc
c0027561:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027562 <CPU::~CPU()>:
c0027562:	83 ec 0c             	sub    esp,0xc
c0027565:	ba b8 a0 02 c0       	mov    edx,0xc002a0b8
c002756a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002756e:	89 10                	mov    DWORD PTR [eax],edx
c0027570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027574:	83 ec 0c             	sub    esp,0xc
c0027577:	50                   	push   eax
c0027578:	e8 15 c4 fe ff       	call   c0013992 <Device::~Device()>
c002757d:	83 c4 10             	add    esp,0x10
c0027580:	90                   	nop
c0027581:	83 c4 0c             	add    esp,0xc
c0027584:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027586 <CPU::~CPU()>:
c0027586:	83 ec 0c             	sub    esp,0xc
c0027589:	83 ec 0c             	sub    esp,0xc
c002758c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027590:	e8 cd ff ff ff       	call   c0027562 <CPU::~CPU()>
c0027595:	83 c4 10             	add    esp,0x10
c0027598:	83 ec 08             	sub    esp,0x8
c002759b:	68 98 11 00 00       	push   0x1198
c00275a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00275a4:	e8 48 b0 fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00275a9:	83 c4 10             	add    esp,0x10
c00275ac:	83 c4 0c             	add    esp,0xc
c00275af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00275b0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00275b0:	90                   	nop
c00275b1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00275b2 <ThreadControlBlock::ThreadControlBlock()>:
c00275b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275b6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00275bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275c1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00275c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275cc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00275d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275d7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00275de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275e2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00275e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275ea:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00275ee:	90                   	nop
c00275ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00275f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00275f0:	83 ec 0c             	sub    esp,0xc
c00275f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00275fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027601:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002760c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027617:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002761d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027621:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002762c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027633:	83 ec 0c             	sub    esp,0xc
c0027636:	68 c6 8c 02 c0       	push   0xc0028cc6
c002763b:	e8 91 b0 fe ff       	call   c00126d1 <Dbg::kprintf(char const*, ...)>
c0027640:	83 c4 10             	add    esp,0x10
c0027643:	90                   	nop
c0027644:	83 c4 0c             	add    esp,0xc
c0027647:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027648 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002764c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002764f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027650 <Vm::_FPUState::_FPUState()>:
c0027650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027654:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002765b:	90                   	nop
c002765c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002765e <PCI::~PCI()>:
c002765e:	83 ec 0c             	sub    esp,0xc
c0027661:	ba 44 af 02 c0       	mov    edx,0xc002af44
c0027666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002766a:	89 10                	mov    DWORD PTR [eax],edx
c002766c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027670:	83 ec 0c             	sub    esp,0xc
c0027673:	50                   	push   eax
c0027674:	e8 29 bd fe ff       	call   c00133a2 <Bus::~Bus()>
c0027679:	83 c4 10             	add    esp,0x10
c002767c:	90                   	nop
c002767d:	83 c4 0c             	add    esp,0xc
c0027680:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027682 <PCI::~PCI()>:
c0027682:	83 ec 0c             	sub    esp,0xc
c0027685:	83 ec 0c             	sub    esp,0xc
c0027688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002768c:	e8 cd ff ff ff       	call   c002765e <PCI::~PCI()>
c0027691:	83 c4 10             	add    esp,0x10
c0027694:	83 ec 08             	sub    esp,0x8
c0027697:	68 58 01 00 00       	push   0x158
c002769c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276a0:	e8 4c af fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00276a5:	83 c4 10             	add    esp,0x10
c00276a8:	83 c4 0c             	add    esp,0xc
c00276ab:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00276ac <IDE::~IDE()>:
c00276ac:	83 ec 0c             	sub    esp,0xc
c00276af:	ba a8 b1 02 c0       	mov    edx,0xc002b1a8
c00276b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276b8:	89 10                	mov    DWORD PTR [eax],edx
c00276ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276be:	83 ec 0c             	sub    esp,0xc
c00276c1:	50                   	push   eax
c00276c2:	e8 bb c7 fe ff       	call   c0013e82 <HardDiskController::~HardDiskController()>
c00276c7:	83 c4 10             	add    esp,0x10
c00276ca:	90                   	nop
c00276cb:	83 c4 0c             	add    esp,0xc
c00276ce:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00276d0 <IDE::~IDE()>:
c00276d0:	83 ec 0c             	sub    esp,0xc
c00276d3:	83 ec 0c             	sub    esp,0xc
c00276d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276da:	e8 cd ff ff ff       	call   c00276ac <IDE::~IDE()>
c00276df:	83 c4 10             	add    esp,0x10
c00276e2:	83 ec 08             	sub    esp,0x8
c00276e5:	68 70 02 00 00       	push   0x270
c00276ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276ee:	e8 fe ae fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00276f3:	83 c4 10             	add    esp,0x10
c00276f6:	83 c4 0c             	add    esp,0xc
c00276f9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00276fa <SATABus::~SATABus()>:
c00276fa:	83 ec 0c             	sub    esp,0xc
c00276fd:	ba 88 b2 02 c0       	mov    edx,0xc002b288
c0027702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027706:	89 10                	mov    DWORD PTR [eax],edx
c0027708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002770c:	83 ec 0c             	sub    esp,0xc
c002770f:	50                   	push   eax
c0027710:	e8 6d c7 fe ff       	call   c0013e82 <HardDiskController::~HardDiskController()>
c0027715:	83 c4 10             	add    esp,0x10
c0027718:	90                   	nop
c0027719:	83 c4 0c             	add    esp,0xc
c002771c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002771e <SATABus::~SATABus()>:
c002771e:	83 ec 0c             	sub    esp,0xc
c0027721:	83 ec 0c             	sub    esp,0xc
c0027724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027728:	e8 cd ff ff ff       	call   c00276fa <SATABus::~SATABus()>
c002772d:	83 c4 10             	add    esp,0x10
c0027730:	83 ec 08             	sub    esp,0x8
c0027733:	68 64 01 00 00       	push   0x164
c0027738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002773c:	e8 b0 ae fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0027741:	83 c4 10             	add    esp,0x10
c0027744:	83 c4 0c             	add    esp,0xc
c0027747:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027748 <ATA::~ATA()>:
c0027748:	83 ec 0c             	sub    esp,0xc
c002774b:	ba c8 b2 02 c0       	mov    edx,0xc002b2c8
c0027750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027754:	89 10                	mov    DWORD PTR [eax],edx
c0027756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002775a:	83 ec 0c             	sub    esp,0xc
c002775d:	50                   	push   eax
c002775e:	e8 fd c7 fe ff       	call   c0013f60 <PhysicalDisk::~PhysicalDisk()>
c0027763:	83 c4 10             	add    esp,0x10
c0027766:	90                   	nop
c0027767:	83 c4 0c             	add    esp,0xc
c002776a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002776c <ATA::~ATA()>:
c002776c:	83 ec 0c             	sub    esp,0xc
c002776f:	83 ec 0c             	sub    esp,0xc
c0027772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027776:	e8 cd ff ff ff       	call   c0027748 <ATA::~ATA()>
c002777b:	83 c4 10             	add    esp,0x10
c002777e:	83 ec 08             	sub    esp,0x8
c0027781:	68 7c 01 00 00       	push   0x17c
c0027786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002778a:	e8 62 ae fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c002778f:	83 c4 10             	add    esp,0x10
c0027792:	83 c4 0c             	add    esp,0xc
c0027795:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027796 <ATAPI::~ATAPI()>:
c0027796:	83 ec 0c             	sub    esp,0xc
c0027799:	ba 34 b3 02 c0       	mov    edx,0xc002b334
c002779e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277a2:	89 10                	mov    DWORD PTR [eax],edx
c00277a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277a8:	83 ec 0c             	sub    esp,0xc
c00277ab:	50                   	push   eax
c00277ac:	e8 af c7 fe ff       	call   c0013f60 <PhysicalDisk::~PhysicalDisk()>
c00277b1:	83 c4 10             	add    esp,0x10
c00277b4:	90                   	nop
c00277b5:	83 c4 0c             	add    esp,0xc
c00277b8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00277ba <ATAPI::~ATAPI()>:
c00277ba:	83 ec 0c             	sub    esp,0xc
c00277bd:	83 ec 0c             	sub    esp,0xc
c00277c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277c4:	e8 cd ff ff ff       	call   c0027796 <ATAPI::~ATAPI()>
c00277c9:	83 c4 10             	add    esp,0x10
c00277cc:	83 ec 08             	sub    esp,0x8
c00277cf:	68 80 01 00 00       	push   0x180
c00277d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277d8:	e8 14 ae fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00277dd:	83 c4 10             	add    esp,0x10
c00277e0:	83 c4 0c             	add    esp,0xc
c00277e3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00277e4 <SATA::~SATA()>:
c00277e4:	83 ec 0c             	sub    esp,0xc
c00277e7:	ba 58 b4 02 c0       	mov    edx,0xc002b458
c00277ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277f0:	89 10                	mov    DWORD PTR [eax],edx
c00277f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277f6:	83 ec 0c             	sub    esp,0xc
c00277f9:	50                   	push   eax
c00277fa:	e8 61 c7 fe ff       	call   c0013f60 <PhysicalDisk::~PhysicalDisk()>
c00277ff:	83 c4 10             	add    esp,0x10
c0027802:	90                   	nop
c0027803:	83 c4 0c             	add    esp,0xc
c0027806:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027808 <SATA::~SATA()>:
c0027808:	83 ec 0c             	sub    esp,0xc
c002780b:	83 ec 0c             	sub    esp,0xc
c002780e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027812:	e8 cd ff ff ff       	call   c00277e4 <SATA::~SATA()>
c0027817:	83 c4 10             	add    esp,0x10
c002781a:	83 ec 08             	sub    esp,0x8
c002781d:	68 74 01 00 00       	push   0x174
c0027822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027826:	e8 c6 ad fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c002782b:	83 c4 10             	add    esp,0x10
c002782e:	83 c4 0c             	add    esp,0xc
c0027831:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027832 <AVX::~AVX()>:
c0027832:	83 ec 0c             	sub    esp,0xc
c0027835:	ba 94 b4 02 c0       	mov    edx,0xc002b494
c002783a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002783e:	89 10                	mov    DWORD PTR [eax],edx
c0027840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027844:	83 ec 0c             	sub    esp,0xc
c0027847:	50                   	push   eax
c0027848:	e8 97 c7 fe ff       	call   c0013fe4 <FPU::~FPU()>
c002784d:	83 c4 10             	add    esp,0x10
c0027850:	90                   	nop
c0027851:	83 c4 0c             	add    esp,0xc
c0027854:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027856 <AVX::~AVX()>:
c0027856:	83 ec 0c             	sub    esp,0xc
c0027859:	83 ec 0c             	sub    esp,0xc
c002785c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027860:	e8 cd ff ff ff       	call   c0027832 <AVX::~AVX()>
c0027865:	83 c4 10             	add    esp,0x10
c0027868:	83 ec 08             	sub    esp,0x8
c002786b:	68 58 01 00 00       	push   0x158
c0027870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027874:	e8 78 ad fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0027879:	83 c4 10             	add    esp,0x10
c002787c:	83 c4 0c             	add    esp,0xc
c002787f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027880 <MMX::~MMX()>:
c0027880:	83 ec 0c             	sub    esp,0xc
c0027883:	ba d4 b4 02 c0       	mov    edx,0xc002b4d4
c0027888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002788c:	89 10                	mov    DWORD PTR [eax],edx
c002788e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027892:	83 ec 0c             	sub    esp,0xc
c0027895:	50                   	push   eax
c0027896:	e8 49 c7 fe ff       	call   c0013fe4 <FPU::~FPU()>
c002789b:	83 c4 10             	add    esp,0x10
c002789e:	90                   	nop
c002789f:	83 c4 0c             	add    esp,0xc
c00278a2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00278a4 <MMX::~MMX()>:
c00278a4:	83 ec 0c             	sub    esp,0xc
c00278a7:	83 ec 0c             	sub    esp,0xc
c00278aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278ae:	e8 cd ff ff ff       	call   c0027880 <MMX::~MMX()>
c00278b3:	83 c4 10             	add    esp,0x10
c00278b6:	83 ec 08             	sub    esp,0x8
c00278b9:	68 58 01 00 00       	push   0x158
c00278be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278c2:	e8 2a ad fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00278c7:	83 c4 10             	add    esp,0x10
c00278ca:	83 c4 0c             	add    esp,0xc
c00278cd:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00278ce <SSE::~SSE()>:
c00278ce:	83 ec 0c             	sub    esp,0xc
c00278d1:	ba 14 b5 02 c0       	mov    edx,0xc002b514
c00278d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278da:	89 10                	mov    DWORD PTR [eax],edx
c00278dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278e0:	83 ec 0c             	sub    esp,0xc
c00278e3:	50                   	push   eax
c00278e4:	e8 fb c6 fe ff       	call   c0013fe4 <FPU::~FPU()>
c00278e9:	83 c4 10             	add    esp,0x10
c00278ec:	90                   	nop
c00278ed:	83 c4 0c             	add    esp,0xc
c00278f0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00278f2 <SSE::~SSE()>:
c00278f2:	83 ec 0c             	sub    esp,0xc
c00278f5:	83 ec 0c             	sub    esp,0xc
c00278f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278fc:	e8 cd ff ff ff       	call   c00278ce <SSE::~SSE()>
c0027901:	83 c4 10             	add    esp,0x10
c0027904:	83 ec 08             	sub    esp,0x8
c0027907:	68 58 01 00 00       	push   0x158
c002790c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027910:	e8 dc ac fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0027915:	83 c4 10             	add    esp,0x10
c0027918:	83 c4 0c             	add    esp,0xc
c002791b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002791c <x87::~x87()>:
c002791c:	83 ec 0c             	sub    esp,0xc
c002791f:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c0027924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027928:	89 10                	mov    DWORD PTR [eax],edx
c002792a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002792e:	83 ec 0c             	sub    esp,0xc
c0027931:	50                   	push   eax
c0027932:	e8 ad c6 fe ff       	call   c0013fe4 <FPU::~FPU()>
c0027937:	83 c4 10             	add    esp,0x10
c002793a:	90                   	nop
c002793b:	83 c4 0c             	add    esp,0xc
c002793e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027940 <x87::~x87()>:
c0027940:	83 ec 0c             	sub    esp,0xc
c0027943:	83 ec 0c             	sub    esp,0xc
c0027946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002794a:	e8 cd ff ff ff       	call   c002791c <x87::~x87()>
c002794f:	83 c4 10             	add    esp,0x10
c0027952:	83 ec 08             	sub    esp,0x8
c0027955:	68 58 01 00 00       	push   0x158
c002795a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002795e:	e8 8e ac fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0027963:	83 c4 10             	add    esp,0x10
c0027966:	83 c4 0c             	add    esp,0xc
c0027969:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002796a <IOAPIC::~IOAPIC()>:
c002796a:	83 ec 0c             	sub    esp,0xc
c002796d:	ba ac b6 02 c0       	mov    edx,0xc002b6ac
c0027972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027976:	89 10                	mov    DWORD PTR [eax],edx
c0027978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002797c:	83 ec 0c             	sub    esp,0xc
c002797f:	50                   	push   eax
c0027980:	e8 0d c0 fe ff       	call   c0013992 <Device::~Device()>
c0027985:	83 c4 10             	add    esp,0x10
c0027988:	90                   	nop
c0027989:	83 c4 0c             	add    esp,0xc
c002798c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002798e <IOAPIC::~IOAPIC()>:
c002798e:	83 ec 0c             	sub    esp,0xc
c0027991:	83 ec 0c             	sub    esp,0xc
c0027994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027998:	e8 cd ff ff ff       	call   c002796a <IOAPIC::~IOAPIC()>
c002799d:	83 c4 10             	add    esp,0x10
c00279a0:	83 ec 08             	sub    esp,0x8
c00279a3:	68 68 01 00 00       	push   0x168
c00279a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279ac:	e8 40 ac fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00279b1:	83 c4 10             	add    esp,0x10
c00279b4:	83 c4 0c             	add    esp,0xc
c00279b7:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00279b8 <APIC::~APIC()>:
c00279b8:	83 ec 0c             	sub    esp,0xc
c00279bb:	ba 64 b6 02 c0       	mov    edx,0xc002b664
c00279c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279c4:	89 10                	mov    DWORD PTR [eax],edx
c00279c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279ca:	83 ec 0c             	sub    esp,0xc
c00279cd:	50                   	push   eax
c00279ce:	e8 db ca fe ff       	call   c00144ae <InterruptController::~InterruptController()>
c00279d3:	83 c4 10             	add    esp,0x10
c00279d6:	90                   	nop
c00279d7:	83 c4 0c             	add    esp,0xc
c00279da:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00279dc <APIC::~APIC()>:
c00279dc:	83 ec 0c             	sub    esp,0xc
c00279df:	83 ec 0c             	sub    esp,0xc
c00279e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279e6:	e8 cd ff ff ff       	call   c00279b8 <APIC::~APIC()>
c00279eb:	83 c4 10             	add    esp,0x10
c00279ee:	83 ec 08             	sub    esp,0x8
c00279f1:	68 58 21 00 00       	push   0x2158
c00279f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279fa:	e8 f2 ab fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c00279ff:	83 c4 10             	add    esp,0x10
c0027a02:	83 c4 0c             	add    esp,0xc
c0027a05:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027a06 <PIC::~PIC()>:
c0027a06:	83 ec 0c             	sub    esp,0xc
c0027a09:	ba fc b6 02 c0       	mov    edx,0xc002b6fc
c0027a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a12:	89 10                	mov    DWORD PTR [eax],edx
c0027a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a18:	83 ec 0c             	sub    esp,0xc
c0027a1b:	50                   	push   eax
c0027a1c:	e8 8d ca fe ff       	call   c00144ae <InterruptController::~InterruptController()>
c0027a21:	83 c4 10             	add    esp,0x10
c0027a24:	90                   	nop
c0027a25:	83 c4 0c             	add    esp,0xc
c0027a28:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027a2a <PIC::~PIC()>:
c0027a2a:	83 ec 0c             	sub    esp,0xc
c0027a2d:	83 ec 0c             	sub    esp,0xc
c0027a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a34:	e8 cd ff ff ff       	call   c0027a06 <PIC::~PIC()>
c0027a39:	83 c4 10             	add    esp,0x10
c0027a3c:	83 ec 08             	sub    esp,0x8
c0027a3f:	68 58 21 00 00       	push   0x2158
c0027a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a48:	e8 a4 ab fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0027a4d:	83 c4 10             	add    esp,0x10
c0027a50:	83 c4 0c             	add    esp,0xc
c0027a53:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027a54 <APICTimer::~APICTimer()>:
c0027a54:	83 ec 0c             	sub    esp,0xc
c0027a57:	ba 50 b7 02 c0       	mov    edx,0xc002b750
c0027a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a60:	89 10                	mov    DWORD PTR [eax],edx
c0027a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a66:	83 ec 0c             	sub    esp,0xc
c0027a69:	50                   	push   eax
c0027a6a:	e8 3f e8 fe ff       	call   c00162ae <Timer::~Timer()>
c0027a6f:	83 c4 10             	add    esp,0x10
c0027a72:	90                   	nop
c0027a73:	83 c4 0c             	add    esp,0xc
c0027a76:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027a78 <APICTimer::~APICTimer()>:
c0027a78:	83 ec 0c             	sub    esp,0xc
c0027a7b:	83 ec 0c             	sub    esp,0xc
c0027a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a82:	e8 cd ff ff ff       	call   c0027a54 <APICTimer::~APICTimer()>
c0027a87:	83 c4 10             	add    esp,0x10
c0027a8a:	83 ec 08             	sub    esp,0x8
c0027a8d:	68 60 01 00 00       	push   0x160
c0027a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a96:	e8 56 ab fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0027a9b:	83 c4 10             	add    esp,0x10
c0027a9e:	83 c4 0c             	add    esp,0xc
c0027aa1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027aa2 <PIT::~PIT()>:
c0027aa2:	83 ec 0c             	sub    esp,0xc
c0027aa5:	ba a0 b7 02 c0       	mov    edx,0xc002b7a0
c0027aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aae:	89 10                	mov    DWORD PTR [eax],edx
c0027ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ab4:	83 ec 0c             	sub    esp,0xc
c0027ab7:	50                   	push   eax
c0027ab8:	e8 f1 e7 fe ff       	call   c00162ae <Timer::~Timer()>
c0027abd:	83 c4 10             	add    esp,0x10
c0027ac0:	90                   	nop
c0027ac1:	83 c4 0c             	add    esp,0xc
c0027ac4:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027ac6 <PIT::~PIT()>:
c0027ac6:	83 ec 0c             	sub    esp,0xc
c0027ac9:	83 ec 0c             	sub    esp,0xc
c0027acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ad0:	e8 cd ff ff ff       	call   c0027aa2 <PIT::~PIT()>
c0027ad5:	83 c4 10             	add    esp,0x10
c0027ad8:	83 ec 08             	sub    esp,0x8
c0027adb:	68 5c 01 00 00       	push   0x15c
c0027ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ae4:	e8 08 ab fe ff       	call   c00125f1 <operator delete(void*, unsigned long)>
c0027ae9:	83 c4 10             	add    esp,0x10
c0027aec:	83 c4 0c             	add    esp,0xc
c0027aef:	c3                   	ret    
