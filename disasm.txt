
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bb 6c 00 00       	call   c0006cdb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e5 b8 01 00       	call   c001b90a <_init>
c0000025:	c3                   	ret    
c0000026:	bb a6 c3 01 c0       	mov    ebx,0xc001c3a6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb b0 c3 01 c0    	cmp    ebx,0xc001c3b0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 ee 01 c0       	mov    eax,0xc001eeb8
c0000049:	3d b8 ee 01 c0       	cmp    eax,0xc001eeb8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 ee 01 c0       	push   0xc001eeb8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 ee 01 c0       	mov    eax,0xc001eeb8
c0000075:	2d b8 ee 01 c0       	sub    eax,0xc001eeb8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 ee 01 c0       	push   0xc001eeb8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 40 f0 01 c0 00 	cmp    BYTE PTR ds:0xc001f040,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b8 c3 01 c0       	mov    ebx,0xc001c3b8
c00000bb:	81 eb b4 c3 01 c0    	sub    ebx,0xc001c3b4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b4 c3 01 c0       	mov    esi,0xc001c3b4
c00000ca:	a1 44 f0 01 c0       	mov    eax,ds:0xc001f044
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 44 f0 01 c0       	mov    ds:0xc001f044,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 44 f0 01 c0       	mov    eax,ds:0xc001f044
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 ee 01 c0       	push   0xc001eeb8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 40 f0 01 c0 01 	mov    BYTE PTR ds:0xc001f040,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 48 f0 01 c0       	push   0xc001f048
c000012c:	68 b8 ee 01 c0       	push   0xc001eeb8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 6c 1f 01 00       	call   c001223c <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 f0 94 00 00       	call   c00097d8 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 4a 1f 01 00       	call   c001223c <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 1b 24 01 00       	call   c001272c <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 6a 2a 01 00       	call   c0012d84 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 90 f4 01 c0 	lgdtd  ds:0xc001f490
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 4d 58 00 00       	jmp    c0005bef <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 60 f0 01 c0       	mov    ds:0xc001f060,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 60 f0 01 c0    	mov    DWORD PTR ds:0xc001f060,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 60 f0 01 c0    	mov    ebx,DWORD PTR ds:0xc001f060
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 c0 c3 01 c0 02 	test   BYTE PTR [edx-0x3ffe3c40],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 c0 c3 01 c0 01 	test   BYTE PTR [edx-0x3ffe3c40],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 c0 c3 01 c0 08 	test   BYTE PTR [edx-0x3ffe3c40],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 c0 c3 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3c40],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 c0 c3 01 c0 01 	test   BYTE PTR [edx-0x3ffe3c40],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 80 f0 01 c0    	mov    ecx,DWORD PTR ds:0xc001f080
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 80 f0 01 c0    	mov    DWORD PTR ds:0xc001f080,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 84 f0 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0f7c]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 84 f0 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0f7c],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 80 f0 01 c0    	mov    DWORD PTR ds:0xc001f080,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 ac f0 01 c0    	cmp    DWORD PTR ds:0xc001f0ac,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d bc f0 01 c0    	mov    ecx,DWORD PTR ds:0xc001f0bc
c0000d5d:	c7 42 0c b4 f0 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f0b4
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 bc f0 01 c0    	mov    DWORD PTR ds:0xc001f0bc,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 ac f0 01 c0    	mov    DWORD PTR ds:0xc001f0ac,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 80 f0 01 c0 02 	test   BYTE PTR ds:0xc001f080,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 80 f0 01 c0       	mov    eax,0xc001f080
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 ae 5c 00 00       	call   c0006aec <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 f0 5b 00 00       	call   c0006aec <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 da 5b 00 00       	call   c0006aec <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 b6 5b 00 00       	call   c0006aec <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 80 f0 01 c0    	mov    edi,DWORD PTR ds:0xc001f080
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 80 f0 01 c0       	mov    eax,0xc001f080
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 84 f0 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0f7c]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 84 f0 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0f7c],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 b4 f0 01 c0 	lea    edx,[eax*8-0x3ffe0f4c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 80 f0 01 c0       	mov    eax,0xc001f080
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d c0 f0 01 c0    	mov    ebx,DWORD PTR ds:0xc001f0c0
c00010df:	81 fb b4 f0 01 c0    	cmp    ebx,0xc001f0b4
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d b4 f0 01 c0       	cmp    eax,0xc001f0b4
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d b0 f0 01 c0    	cmp    DWORD PTR ds:0xc001f0b0,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 bc f0 01 c0       	mov    ds:0xc001f0bc,eax
c000111b:	a3 c0 f0 01 c0       	mov    ds:0xc001f0c0,eax
c0001120:	a3 b0 f0 01 c0       	mov    ds:0xc001f0b0,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 b4 f0 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f0b4
c000112e:	c7 40 0c b4 f0 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f0b4
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 c0 f0 01 c0       	mov    ds:0xc001f0c0,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 b4 f0 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f0b4
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 78 f0 01 c0 	lea    ebp,[edx*4-0x3ffe0f88]
c000117f:	8b 14 95 80 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0f80]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 80 f0 01 c0 	lea    ecx,[edx*4-0x3ffe0f80]
c000119a:	8b 14 95 80 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0f80]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd b4 f3 01 c0 	or     DWORD PTR [edi*4-0x3ffe0c4c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 b4 f0 01 c0 	lea    eax,[eax*8-0x3ffe0f4c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d bc f0 01 c0    	mov    DWORD PTR ds:0xc001f0bc,ecx
c0001254:	89 0d c0 f0 01 c0    	mov    DWORD PTR ds:0xc001f0c0,ecx
c000125a:	c7 41 08 b4 f0 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f0b4
c0001261:	c7 41 0c b4 f0 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f0b4
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd ac f0 01 c0 	lea    edx,[ecx*8-0x3ffe0f54]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d b4 f3 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0c4c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d b4 f3 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0c4c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 ac f0 01 c0 	lea    edx,[eax*4-0x3ffe0f54]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d b4 f3 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0c4c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d bc f0 01 c0    	mov    DWORD PTR ds:0xc001f0bc,edi
c0001327:	89 3d c0 f0 01 c0    	mov    DWORD PTR ds:0xc001f0c0,edi
c000132d:	c7 47 08 b4 f0 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f0b4
c0001334:	c7 47 0c b4 f0 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f0b4
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d b0 f0 01 c0    	mov    DWORD PTR ds:0xc001f0b0,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 ac f0 01 c0       	mov    eax,ds:0xc001f0ac
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d ac f0 01 c0    	mov    DWORD PTR ds:0xc001f0ac,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 80 f0 01 c0       	mov    edx,0xc001f080
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 80 f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f080,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 80 f0 01 c0       	mov    eax,0xc001f080
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d d4 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f3d4
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 d4 f3 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f3d4,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d d4 f3 01 c0    	mov    DWORD PTR ds:0xc001f3d4,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 ac f0 01 c0    	cmp    DWORD PTR ds:0xc001f0ac,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d ac f0 01 c0    	mov    DWORD PTR ds:0xc001f0ac,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 80 f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f080,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 80 f0 01 c0       	mov    eax,0xc001f080
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 dc f3 01 c0    	push   DWORD PTR ds:0xc001f3dc
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 80 f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f080,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 80 f0 01 c0       	mov    eax,0xc001f080
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 dc f3 01 c0       	mov    eax,ds:0xc001f3dc
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 80 f0 01 c0       	mov    eax,0xc001f080
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d ac f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f0ac,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 80 f0 01 c0       	mov    eax,0xc001f080
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 ac f0 01 c0       	mov    eax,ds:0xc001f0ac
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 84 f0 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0f7c]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 b4 f0 01 c0       	mov    eax,0xc001f0b4
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d ac f3 01 c0       	cmp    eax,0xc001f3ac
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 e8 f3 01 c0       	mov    eax,ds:0xc001f3e8
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 d0 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f3d0
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 e4 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f3e4
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 f4 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f3f4
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 80 f0 01 c0       	mov    eax,0xc001f080
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 c4 c4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe3b3c]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 80 f0 01 c0       	mov    eax,ds:0xc001f080
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 80 f0 01 c0       	mov    ds:0xc001f080,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d c4 f3 01 c0    	mov    DWORD PTR ds:0xc001f3c4,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d c8 f3 01 c0    	mov    DWORD PTR ds:0xc001f3c8,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d cc f3 01 c0    	mov    DWORD PTR ds:0xc001f3cc,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 d4 f3 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f3d4,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    

c0001afb <disk_status>:
c0001afb:	31 c0                	xor    eax,eax
c0001afd:	c3                   	ret    

c0001afe <disk_initialize>:
c0001afe:	31 c0                	xor    eax,eax
c0001b00:	c3                   	ret    

c0001b01 <disk_read>:
c0001b01:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b06:	0f b6 04 85 c0 2a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd540]
c0001b0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b12:	e9 71 44 01 00       	jmp    c0015f88 <fatWrapperReadDisk>

c0001b17 <disk_write>:
c0001b17:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b1c:	0f b6 04 85 c0 2a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd540]
c0001b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b28:	e9 9f 44 01 00       	jmp    c0015fcc <fatWrapperWriteDisk>

c0001b2d <disk_ioctl>:
c0001b2d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 c0 2a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd540]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 c4 44 01 00       	jmp    c0016010 <fatWrapperIoctl>

c0001b4c <ld_word>:
c0001b4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b53:	c1 e2 08             	shl    edx,0x8
c0001b56:	09 d0                	or     eax,edx
c0001b58:	c3                   	ret    

c0001b59 <ld_dword>:
c0001b59:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b5d:	89 d1                	mov    ecx,edx
c0001b5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b63:	c1 e1 08             	shl    ecx,0x8
c0001b66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b69:	09 ca                	or     edx,ecx
c0001b6b:	c1 e2 08             	shl    edx,0x8
c0001b6e:	09 d0                	or     eax,edx
c0001b70:	c3                   	ret    

c0001b71 <st_word>:
c0001b71:	66 89 10             	mov    WORD PTR [eax],dx
c0001b74:	c3                   	ret    

c0001b75 <st_dword>:
c0001b75:	89 10                	mov    DWORD PTR [eax],edx
c0001b77:	c3                   	ret    

c0001b78 <mem_cpy>:
c0001b78:	85 c9                	test   ecx,ecx
c0001b7a:	74 10                	je     c0001b8c <mem_cpy+0x14>
c0001b7c:	57                   	push   edi
c0001b7d:	01 c1                	add    ecx,eax
c0001b7f:	56                   	push   esi
c0001b80:	89 c7                	mov    edi,eax
c0001b82:	89 d6                	mov    esi,edx
c0001b84:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001b85:	39 f9                	cmp    ecx,edi
c0001b87:	75 fb                	jne    c0001b84 <mem_cpy+0xc>
c0001b89:	5e                   	pop    esi
c0001b8a:	5f                   	pop    edi
c0001b8b:	c3                   	ret    
c0001b8c:	c3                   	ret    

c0001b8d <mem_set>:
c0001b8d:	01 c1                	add    ecx,eax
c0001b8f:	40                   	inc    eax
c0001b90:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b93:	39 c8                	cmp    eax,ecx
c0001b95:	75 f8                	jne    c0001b8f <mem_set+0x2>
c0001b97:	c3                   	ret    

c0001b98 <mem_cmp>:
c0001b98:	57                   	push   edi
c0001b99:	56                   	push   esi
c0001b9a:	89 c6                	mov    esi,eax
c0001b9c:	53                   	push   ebx
c0001b9d:	46                   	inc    esi
c0001b9e:	42                   	inc    edx
c0001b9f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ba3:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ba7:	29 fb                	sub    ebx,edi
c0001ba9:	89 cf                	mov    edi,ecx
c0001bab:	29 f7                	sub    edi,esi
c0001bad:	01 c7                	add    edi,eax
c0001baf:	74 04                	je     c0001bb5 <mem_cmp+0x1d>
c0001bb1:	85 db                	test   ebx,ebx
c0001bb3:	74 e8                	je     c0001b9d <mem_cmp+0x5>
c0001bb5:	89 d8                	mov    eax,ebx
c0001bb7:	5b                   	pop    ebx
c0001bb8:	5e                   	pop    esi
c0001bb9:	5f                   	pop    edi
c0001bba:	c3                   	ret    

c0001bbb <chk_chr>:
c0001bbb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001bbe:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001bc1:	74 07                	je     c0001bca <chk_chr+0xf>
c0001bc3:	39 d1                	cmp    ecx,edx
c0001bc5:	74 03                	je     c0001bca <chk_chr+0xf>
c0001bc7:	40                   	inc    eax
c0001bc8:	eb f1                	jmp    c0001bbb <chk_chr>
c0001bca:	89 c8                	mov    eax,ecx
c0001bcc:	c3                   	ret    

c0001bcd <dbc_1st>:
c0001bcd:	31 c0                	xor    eax,eax
c0001bcf:	c3                   	ret    

c0001bd0 <dbc_2nd>:
c0001bd0:	31 c0                	xor    eax,eax
c0001bd2:	c3                   	ret    

c0001bd3 <tchar2uni>:
c0001bd3:	57                   	push   edi
c0001bd4:	89 c7                	mov    edi,eax
c0001bd6:	56                   	push   esi
c0001bd7:	53                   	push   ebx
c0001bd8:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001bda:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001bdc:	8d 73 01             	lea    esi,[ebx+0x1]
c0001bdf:	84 c9                	test   cl,cl
c0001be1:	78 0a                	js     c0001bed <tchar2uni+0x1a>
c0001be3:	0f b6 d1             	movzx  edx,cl
c0001be6:	89 f3                	mov    ebx,esi
c0001be8:	e9 9f 00 00 00       	jmp    c0001c8c <tchar2uni+0xb9>
c0001bed:	88 ca                	mov    dl,cl
c0001bef:	83 e2 e0             	and    edx,0xffffffe0
c0001bf2:	80 fa c0             	cmp    dl,0xc0
c0001bf5:	75 0c                	jne    c0001c03 <tchar2uni+0x30>
c0001bf7:	89 ca                	mov    edx,ecx
c0001bf9:	b9 01 00 00 00       	mov    ecx,0x1
c0001bfe:	83 e2 1f             	and    edx,0x1f
c0001c01:	eb 2e                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c03:	88 ca                	mov    dl,cl
c0001c05:	83 e2 f0             	and    edx,0xfffffff0
c0001c08:	80 fa e0             	cmp    dl,0xe0
c0001c0b:	75 0c                	jne    c0001c19 <tchar2uni+0x46>
c0001c0d:	89 ca                	mov    edx,ecx
c0001c0f:	b9 02 00 00 00       	mov    ecx,0x2
c0001c14:	83 e2 0f             	and    edx,0xf
c0001c17:	eb 18                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c19:	88 ca                	mov    dl,cl
c0001c1b:	83 e2 f8             	and    edx,0xfffffff8
c0001c1e:	88 d0                	mov    al,dl
c0001c20:	83 ca ff             	or     edx,0xffffffff
c0001c23:	3c f0                	cmp    al,0xf0
c0001c25:	75 6c                	jne    c0001c93 <tchar2uni+0xc0>
c0001c27:	89 ca                	mov    edx,ecx
c0001c29:	b9 03 00 00 00       	mov    ecx,0x3
c0001c2e:	83 e2 07             	and    edx,0x7
c0001c31:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c35:	46                   	inc    esi
c0001c36:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c39:	88 c8                	mov    al,cl
c0001c3b:	83 e0 c0             	and    eax,0xffffffc0
c0001c3e:	3c 80                	cmp    al,0x80
c0001c40:	75 4e                	jne    c0001c90 <tchar2uni+0xbd>
c0001c42:	c1 e2 06             	shl    edx,0x6
c0001c45:	83 e1 3f             	and    ecx,0x3f
c0001c48:	09 ca                	or     edx,ecx
c0001c4a:	39 de                	cmp    esi,ebx
c0001c4c:	75 e7                	jne    c0001c35 <tchar2uni+0x62>
c0001c4e:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001c51:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001c57:	77 37                	ja     c0001c90 <tchar2uni+0xbd>
c0001c59:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001c5f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c65:	76 29                	jbe    c0001c90 <tchar2uni+0xbd>
c0001c67:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001c6d:	76 1d                	jbe    c0001c8c <tchar2uni+0xb9>
c0001c6f:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001c75:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001c7b:	c1 e1 06             	shl    ecx,0x6
c0001c7e:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001c84:	09 ca                	or     edx,ecx
c0001c86:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001c8c:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c8e:	eb 03                	jmp    c0001c93 <tchar2uni+0xc0>
c0001c90:	83 ca ff             	or     edx,0xffffffff
c0001c93:	5b                   	pop    ebx
c0001c94:	89 d0                	mov    eax,edx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <put_utf>:
c0001c99:	53                   	push   ebx
c0001c9a:	83 f8 7f             	cmp    eax,0x7f
c0001c9d:	89 c3                	mov    ebx,eax
c0001c9f:	b0 00                	mov    al,0x0
c0001ca1:	77 11                	ja     c0001cb4 <put_utf+0x1b>
c0001ca3:	85 c9                	test   ecx,ecx
c0001ca5:	0f 84 e5 00 00 00    	je     c0001d90 <put_utf+0xf7>
c0001cab:	88 1a                	mov    BYTE PTR [edx],bl
c0001cad:	b0 01                	mov    al,0x1
c0001caf:	e9 dc 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cb4:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001cba:	77 23                	ja     c0001cdf <put_utf+0x46>
c0001cbc:	83 f9 01             	cmp    ecx,0x1
c0001cbf:	0f 86 cb 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	83 e3 3f             	and    ebx,0x3f
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 cb 80             	or     ebx,0xffffff80
c0001cd0:	83 c8 c0             	or     eax,0xffffffc0
c0001cd3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001cd6:	88 02                	mov    BYTE PTR [edx],al
c0001cd8:	b0 02                	mov    al,0x2
c0001cda:	e9 b1 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cdf:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ce5:	77 40                	ja     c0001d27 <put_utf+0x8e>
c0001ce7:	83 f9 02             	cmp    ecx,0x2
c0001cea:	0f 86 a0 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cf0:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001cf6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cfc:	0f 86 8e 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001d02:	89 d8                	mov    eax,ebx
c0001d04:	c1 e8 0c             	shr    eax,0xc
c0001d07:	83 c8 e0             	or     eax,0xffffffe0
c0001d0a:	88 02                	mov    BYTE PTR [edx],al
c0001d0c:	89 d8                	mov    eax,ebx
c0001d0e:	83 e3 3f             	and    ebx,0x3f
c0001d11:	c1 e8 06             	shr    eax,0x6
c0001d14:	83 cb 80             	or     ebx,0xffffff80
c0001d17:	83 e0 3f             	and    eax,0x3f
c0001d1a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d1d:	83 c8 80             	or     eax,0xffffff80
c0001d20:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d23:	b0 03                	mov    al,0x3
c0001d25:	eb 69                	jmp    c0001d90 <put_utf+0xf7>
c0001d27:	83 f9 03             	cmp    ecx,0x3
c0001d2a:	76 64                	jbe    c0001d90 <put_utf+0xf7>
c0001d2c:	89 d9                	mov    ecx,ebx
c0001d2e:	0f b7 c3             	movzx  eax,bx
c0001d31:	66 31 c9             	xor    cx,cx
c0001d34:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d3a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d40:	c1 e9 06             	shr    ecx,0x6
c0001d43:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001d49:	77 43                	ja     c0001d8e <put_utf+0xf5>
c0001d4b:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001d51:	77 3b                	ja     c0001d8e <put_utf+0xf5>
c0001d53:	09 cb                	or     ebx,ecx
c0001d55:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001d5b:	89 d8                	mov    eax,ebx
c0001d5d:	c1 e8 12             	shr    eax,0x12
c0001d60:	83 c8 f0             	or     eax,0xfffffff0
c0001d63:	88 02                	mov    BYTE PTR [edx],al
c0001d65:	89 d8                	mov    eax,ebx
c0001d67:	c1 e8 0c             	shr    eax,0xc
c0001d6a:	83 e0 3f             	and    eax,0x3f
c0001d6d:	83 c8 80             	or     eax,0xffffff80
c0001d70:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d73:	89 d8                	mov    eax,ebx
c0001d75:	83 e3 3f             	and    ebx,0x3f
c0001d78:	c1 e8 06             	shr    eax,0x6
c0001d7b:	83 cb 80             	or     ebx,0xffffff80
c0001d7e:	83 e0 3f             	and    eax,0x3f
c0001d81:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001d84:	83 c8 80             	or     eax,0xffffff80
c0001d87:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001d8a:	b0 04                	mov    al,0x4
c0001d8c:	eb 02                	jmp    c0001d90 <put_utf+0xf7>
c0001d8e:	31 c0                	xor    eax,eax
c0001d90:	5b                   	pop    ebx
c0001d91:	c3                   	ret    

c0001d92 <clst2sect>:
c0001d92:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001d95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001d98:	83 ea 02             	sub    edx,0x2
c0001d9b:	39 ca                	cmp    edx,ecx
c0001d9d:	76 0d                	jbe    c0001dac <clst2sect+0x1a>
c0001d9f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001da3:	0f af d1             	imul   edx,ecx
c0001da6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001da9:	89 d0                	mov    eax,edx
c0001dab:	c3                   	ret    
c0001dac:	31 c0                	xor    eax,eax
c0001dae:	c3                   	ret    

c0001daf <pick_lfn>:
c0001daf:	55                   	push   ebp
c0001db0:	57                   	push   edi
c0001db1:	56                   	push   esi
c0001db2:	89 d6                	mov    esi,edx
c0001db4:	53                   	push   ebx
c0001db5:	89 c3                	mov    ebx,eax
c0001db7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dba:	e8 8d fd ff ff       	call   c0001b4c <ld_word>
c0001dbf:	66 85 c0             	test   ax,ax
c0001dc2:	74 04                	je     c0001dc8 <pick_lfn+0x19>
c0001dc4:	31 c0                	xor    eax,eax
c0001dc6:	eb 5c                	jmp    c0001e24 <pick_lfn+0x75>
c0001dc8:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001dcb:	bd 01 00 00 00       	mov    ebp,0x1
c0001dd0:	83 e1 bf             	and    ecx,0xffffffbf
c0001dd3:	31 ff                	xor    edi,edi
c0001dd5:	49                   	dec    ecx
c0001dd6:	6b c9 0d             	imul   ecx,ecx,0xd
c0001dd9:	0f b6 87 20 c6 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe39e0]
c0001de0:	01 f0                	add    eax,esi
c0001de2:	e8 65 fd ff ff       	call   c0001b4c <ld_word>
c0001de7:	66 85 ed             	test   bp,bp
c0001dea:	74 11                	je     c0001dfd <pick_lfn+0x4e>
c0001dec:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001df2:	77 d0                	ja     c0001dc4 <pick_lfn+0x15>
c0001df4:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001df8:	89 c5                	mov    ebp,eax
c0001dfa:	41                   	inc    ecx
c0001dfb:	eb 04                	jmp    c0001e01 <pick_lfn+0x52>
c0001dfd:	66 40                	inc    ax
c0001dff:	75 c3                	jne    c0001dc4 <pick_lfn+0x15>
c0001e01:	47                   	inc    edi
c0001e02:	83 ff 0d             	cmp    edi,0xd
c0001e05:	75 d2                	jne    c0001dd9 <pick_lfn+0x2a>
c0001e07:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001e0a:	74 13                	je     c0001e1f <pick_lfn+0x70>
c0001e0c:	66 85 ed             	test   bp,bp
c0001e0f:	74 0e                	je     c0001e1f <pick_lfn+0x70>
c0001e11:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e17:	77 ab                	ja     c0001dc4 <pick_lfn+0x15>
c0001e19:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001e1f:	b8 01 00 00 00       	mov    eax,0x1
c0001e24:	5b                   	pop    ebx
c0001e25:	5e                   	pop    esi
c0001e26:	5f                   	pop    edi
c0001e27:	5d                   	pop    ebp
c0001e28:	c3                   	ret    

c0001e29 <put_lfn>:
c0001e29:	55                   	push   ebp
c0001e2a:	31 ed                	xor    ebp,ebp
c0001e2c:	57                   	push   edi
c0001e2d:	89 d7                	mov    edi,edx
c0001e2f:	56                   	push   esi
c0001e30:	31 f6                	xor    esi,esi
c0001e32:	53                   	push   ebx
c0001e33:	83 ec 08             	sub    esp,0x8
c0001e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e39:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e41:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e47:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e4a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e4d:	31 d2                	xor    edx,edx
c0001e4f:	e8 1d fd ff ff       	call   c0001b71 <st_word>
c0001e54:	0f b6 d9             	movzx  ebx,cl
c0001e57:	4b                   	dec    ebx
c0001e58:	6b db 0d             	imul   ebx,ebx,0xd
c0001e5b:	66 83 fe ff          	cmp    si,0xffff
c0001e5f:	74 08                	je     c0001e69 <put_lfn+0x40>
c0001e61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e64:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e68:	43                   	inc    ebx
c0001e69:	0f b6 85 20 c6 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe39e0]
c0001e70:	0f b7 d6             	movzx  edx,si
c0001e73:	01 f8                	add    eax,edi
c0001e75:	e8 f7 fc ff ff       	call   c0001b71 <st_word>
c0001e7a:	66 85 f6             	test   si,si
c0001e7d:	75 03                	jne    c0001e82 <put_lfn+0x59>
c0001e7f:	83 ce ff             	or     esi,0xffffffff
c0001e82:	45                   	inc    ebp
c0001e83:	83 fd 0d             	cmp    ebp,0xd
c0001e86:	75 d3                	jne    c0001e5b <put_lfn+0x32>
c0001e88:	66 46                	inc    si
c0001e8a:	74 0a                	je     c0001e96 <put_lfn+0x6d>
c0001e8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e94:	75 09                	jne    c0001e9f <put_lfn+0x76>
c0001e96:	88 c8                	mov    al,cl
c0001e98:	83 c8 40             	or     eax,0x40
c0001e9b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e9f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001ea3:	88 07                	mov    BYTE PTR [edi],al
c0001ea5:	83 c4 08             	add    esp,0x8
c0001ea8:	5b                   	pop    ebx
c0001ea9:	5e                   	pop    esi
c0001eaa:	5f                   	pop    edi
c0001eab:	5d                   	pop    ebp
c0001eac:	c3                   	ret    

c0001ead <gen_numname>:
c0001ead:	57                   	push   edi
c0001eae:	89 cf                	mov    edi,ecx
c0001eb0:	56                   	push   esi
c0001eb1:	b9 0b 00 00 00       	mov    ecx,0xb
c0001eb6:	53                   	push   ebx
c0001eb7:	89 c6                	mov    esi,eax
c0001eb9:	83 ec 10             	sub    esp,0x10
c0001ebc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001ec0:	e8 b3 fc ff ff       	call   c0001b78 <mem_cpy>
c0001ec5:	83 fb 05             	cmp    ebx,0x5
c0001ec8:	76 2d                	jbe    c0001ef7 <gen_numname+0x4a>
c0001eca:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001ecd:	66 85 c0             	test   ax,ax
c0001ed0:	74 25                	je     c0001ef7 <gen_numname+0x4a>
c0001ed2:	83 c7 02             	add    edi,0x2
c0001ed5:	ba 10 00 00 00       	mov    edx,0x10
c0001eda:	01 db                	add    ebx,ebx
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	66 d1 e8             	shr    ax,1
c0001ee1:	83 e1 01             	and    ecx,0x1
c0001ee4:	01 cb                	add    ebx,ecx
c0001ee6:	0f ba e3 10          	bt     ebx,0x10
c0001eea:	73 06                	jae    c0001ef2 <gen_numname+0x45>
c0001eec:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001ef2:	4a                   	dec    edx
c0001ef3:	75 e5                	jne    c0001eda <gen_numname+0x2d>
c0001ef5:	eb d3                	jmp    c0001eca <gen_numname+0x1d>
c0001ef7:	b8 07 00 00 00       	mov    eax,0x7
c0001efc:	88 d9                	mov    cl,bl
c0001efe:	83 e1 0f             	and    ecx,0xf
c0001f01:	8d 51 30             	lea    edx,[ecx+0x30]
c0001f04:	80 fa 39             	cmp    dl,0x39
c0001f07:	76 03                	jbe    c0001f0c <gen_numname+0x5f>
c0001f09:	8d 51 37             	lea    edx,[ecx+0x37]
c0001f0c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001f0f:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001f13:	89 da                	mov    edx,ebx
c0001f15:	c1 ea 04             	shr    edx,0x4
c0001f18:	83 fb 0f             	cmp    ebx,0xf
c0001f1b:	76 06                	jbe    c0001f23 <gen_numname+0x76>
c0001f1d:	89 c8                	mov    eax,ecx
c0001f1f:	89 d3                	mov    ebx,edx
c0001f21:	eb d9                	jmp    c0001efc <gen_numname+0x4f>
c0001f23:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001f28:	31 d2                	xor    edx,edx
c0001f2a:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001f2d:	8d 04 16             	lea    eax,[esi+edx*1]
c0001f30:	39 ca                	cmp    edx,ecx
c0001f32:	73 18                	jae    c0001f4c <gen_numname+0x9f>
c0001f34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f37:	3c 20                	cmp    al,0x20
c0001f39:	74 11                	je     c0001f4c <gen_numname+0x9f>
c0001f3b:	e8 8d fc ff ff       	call   c0001bcd <dbc_1st>
c0001f40:	85 c0                	test   eax,eax
c0001f42:	74 05                	je     c0001f49 <gen_numname+0x9c>
c0001f44:	39 d3                	cmp    ebx,edx
c0001f46:	74 04                	je     c0001f4c <gen_numname+0x9f>
c0001f48:	42                   	inc    edx
c0001f49:	42                   	inc    edx
c0001f4a:	eb e1                	jmp    c0001f2d <gen_numname+0x80>
c0001f4c:	b0 20                	mov    al,0x20
c0001f4e:	83 f9 07             	cmp    ecx,0x7
c0001f51:	77 05                	ja     c0001f58 <gen_numname+0xab>
c0001f53:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f57:	41                   	inc    ecx
c0001f58:	42                   	inc    edx
c0001f59:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f5d:	83 fa 07             	cmp    edx,0x7
c0001f60:	76 ea                	jbe    c0001f4c <gen_numname+0x9f>
c0001f62:	83 c4 10             	add    esp,0x10
c0001f65:	5b                   	pop    ebx
c0001f66:	5e                   	pop    esi
c0001f67:	5f                   	pop    edi
c0001f68:	c3                   	ret    

c0001f69 <sum_sfn>:
c0001f69:	31 c9                	xor    ecx,ecx
c0001f6b:	31 d2                	xor    edx,edx
c0001f6d:	d0 ca                	ror    dl,1
c0001f6f:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f72:	41                   	inc    ecx
c0001f73:	83 f9 0b             	cmp    ecx,0xb
c0001f76:	75 f5                	jne    c0001f6d <sum_sfn+0x4>
c0001f78:	88 d0                	mov    al,dl
c0001f7a:	c3                   	ret    

c0001f7b <get_ldnumber>:
c0001f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7d:	85 d2                	test   edx,edx
c0001f7f:	74 14                	je     c0001f95 <get_ldnumber+0x1a>
c0001f81:	56                   	push   esi
c0001f82:	53                   	push   ebx
c0001f83:	89 d3                	mov    ebx,edx
c0001f85:	43                   	inc    ebx
c0001f86:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f89:	80 f9 1f             	cmp    cl,0x1f
c0001f8c:	76 0d                	jbe    c0001f9b <get_ldnumber+0x20>
c0001f8e:	80 f9 3a             	cmp    cl,0x3a
c0001f91:	75 f2                	jne    c0001f85 <get_ldnumber+0xa>
c0001f93:	eb 0a                	jmp    c0001f9f <get_ldnumber+0x24>
c0001f95:	83 c9 ff             	or     ecx,0xffffffff
c0001f98:	89 c8                	mov    eax,ecx
c0001f9a:	c3                   	ret    
c0001f9b:	31 c9                	xor    ecx,ecx
c0001f9d:	eb 24                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001f9f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001fa2:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001fa5:	80 f9 09             	cmp    cl,0x9
c0001fa8:	77 16                	ja     c0001fc0 <get_ldnumber+0x45>
c0001faa:	83 c2 02             	add    edx,0x2
c0001fad:	83 c9 ff             	or     ecx,0xffffffff
c0001fb0:	39 d3                	cmp    ebx,edx
c0001fb2:	75 0f                	jne    c0001fc3 <get_ldnumber+0x48>
c0001fb4:	89 f2                	mov    edx,esi
c0001fb6:	89 18                	mov    DWORD PTR [eax],ebx
c0001fb8:	0f be ca             	movsx  ecx,dl
c0001fbb:	83 e9 30             	sub    ecx,0x30
c0001fbe:	eb 03                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001fc0:	83 c9 ff             	or     ecx,0xffffffff
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	5b                   	pop    ebx
c0001fc6:	5e                   	pop    esi
c0001fc7:	c3                   	ret    

c0001fc8 <validate>:
c0001fc8:	56                   	push   esi
c0001fc9:	53                   	push   ebx
c0001fca:	89 d6                	mov    esi,edx
c0001fcc:	51                   	push   ecx
c0001fcd:	85 c0                	test   eax,eax
c0001fcf:	75 09                	jne    c0001fda <validate+0x12>
c0001fd1:	b8 09 00 00 00       	mov    eax,0x9
c0001fd6:	31 c9                	xor    ecx,ecx
c0001fd8:	eb 2f                	jmp    c0002009 <validate+0x41>
c0001fda:	89 c3                	mov    ebx,eax
c0001fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0001fde:	85 c0                	test   eax,eax
c0001fe0:	74 ef                	je     c0001fd1 <validate+0x9>
c0001fe2:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001fe5:	74 ea                	je     c0001fd1 <validate+0x9>
c0001fe7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0001feb:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0001fef:	75 e0                	jne    c0001fd1 <validate+0x9>
c0001ff1:	83 ec 0c             	sub    esp,0xc
c0001ff4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001ff8:	50                   	push   eax
c0001ff9:	e8 fd fa ff ff       	call   c0001afb <disk_status>
c0001ffe:	83 c4 10             	add    esp,0x10
c0002001:	a8 01                	test   al,0x1
c0002003:	75 cc                	jne    c0001fd1 <validate+0x9>
c0002005:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002007:	31 c0                	xor    eax,eax
c0002009:	89 0e                	mov    DWORD PTR [esi],ecx
c000200b:	5a                   	pop    edx
c000200c:	5b                   	pop    ebx
c000200d:	5e                   	pop    esi
c000200e:	c3                   	ret    

c000200f <sync_window>:
c000200f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002013:	74 58                	je     c000206d <sync_window+0x5e>
c0002015:	56                   	push   esi
c0002016:	53                   	push   ebx
c0002017:	8d 70 34             	lea    esi,[eax+0x34]
c000201a:	51                   	push   ecx
c000201b:	89 c3                	mov    ebx,eax
c000201d:	6a 01                	push   0x1
c000201f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002022:	56                   	push   esi
c0002023:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002027:	50                   	push   eax
c0002028:	e8 ea fa ff ff       	call   c0001b17 <disk_write>
c000202d:	83 c4 10             	add    esp,0x10
c0002030:	ba 01 00 00 00       	mov    edx,0x1
c0002035:	85 c0                	test   eax,eax
c0002037:	75 2e                	jne    c0002067 <sync_window+0x58>
c0002039:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000203c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000203f:	89 c1                	mov    ecx,eax
c0002041:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002045:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002048:	39 d1                	cmp    ecx,edx
c000204a:	73 19                	jae    c0002065 <sync_window+0x56>
c000204c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002050:	75 13                	jne    c0002065 <sync_window+0x56>
c0002052:	6a 01                	push   0x1
c0002054:	01 d0                	add    eax,edx
c0002056:	50                   	push   eax
c0002057:	56                   	push   esi
c0002058:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000205c:	50                   	push   eax
c000205d:	e8 b5 fa ff ff       	call   c0001b17 <disk_write>
c0002062:	83 c4 10             	add    esp,0x10
c0002065:	31 d2                	xor    edx,edx
c0002067:	89 d0                	mov    eax,edx
c0002069:	5a                   	pop    edx
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    
c000206d:	31 d2                	xor    edx,edx
c000206f:	89 d0                	mov    eax,edx
c0002071:	c3                   	ret    

c0002072 <move_window>:
c0002072:	57                   	push   edi
c0002073:	56                   	push   esi
c0002074:	31 f6                	xor    esi,esi
c0002076:	53                   	push   ebx
c0002077:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000207a:	74 32                	je     c00020ae <move_window+0x3c>
c000207c:	89 c3                	mov    ebx,eax
c000207e:	89 d7                	mov    edi,edx
c0002080:	e8 8a ff ff ff       	call   c000200f <sync_window>
c0002085:	89 c6                	mov    esi,eax
c0002087:	85 c0                	test   eax,eax
c0002089:	75 23                	jne    c00020ae <move_window+0x3c>
c000208b:	6a 01                	push   0x1
c000208d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002090:	57                   	push   edi
c0002091:	50                   	push   eax
c0002092:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002096:	50                   	push   eax
c0002097:	e8 65 fa ff ff       	call   c0001b01 <disk_read>
c000209c:	83 c4 10             	add    esp,0x10
c000209f:	85 c0                	test   eax,eax
c00020a1:	74 08                	je     c00020ab <move_window+0x39>
c00020a3:	be 01 00 00 00       	mov    esi,0x1
c00020a8:	83 cf ff             	or     edi,0xffffffff
c00020ab:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00020ae:	89 f0                	mov    eax,esi
c00020b0:	5b                   	pop    ebx
c00020b1:	5e                   	pop    esi
c00020b2:	5f                   	pop    edi
c00020b3:	c3                   	ret    

c00020b4 <check_fs>:
c00020b4:	53                   	push   ebx
c00020b5:	89 c3                	mov    ebx,eax
c00020b7:	83 ec 08             	sub    esp,0x8
c00020ba:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00020be:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00020c5:	e8 a8 ff ff ff       	call   c0002072 <move_window>
c00020ca:	ba 04 00 00 00       	mov    edx,0x4
c00020cf:	85 c0                	test   eax,eax
c00020d1:	75 68                	jne    c000213b <check_fs+0x87>
c00020d3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00020d9:	e8 6e fa ff ff       	call   c0001b4c <ld_word>
c00020de:	ba 03 00 00 00       	mov    edx,0x3
c00020e3:	66 3d 55 aa          	cmp    ax,0xaa55
c00020e7:	75 52                	jne    c000213b <check_fs+0x87>
c00020e9:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00020ec:	8d 50 18             	lea    edx,[eax+0x18]
c00020ef:	80 fa 01             	cmp    dl,0x1
c00020f2:	76 09                	jbe    c00020fd <check_fs+0x49>
c00020f4:	ba 02 00 00 00       	mov    edx,0x2
c00020f9:	3c eb                	cmp    al,0xeb
c00020fb:	75 3e                	jne    c000213b <check_fs+0x87>
c00020fd:	ba f4 e4 01 c0       	mov    edx,0xc001e4f4
c0002102:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002105:	b9 03 00 00 00       	mov    ecx,0x3
c000210a:	e8 89 fa ff ff       	call   c0001b98 <mem_cmp>
c000210f:	31 d2                	xor    edx,edx
c0002111:	85 c0                	test   eax,eax
c0002113:	74 26                	je     c000213b <check_fs+0x87>
c0002115:	ba dc c4 01 c0       	mov    edx,0xc001c4dc
c000211a:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002120:	b9 05 00 00 00       	mov    ecx,0x5
c0002125:	e8 6e fa ff ff       	call   c0001b98 <mem_cmp>
c000212a:	31 d2                	xor    edx,edx
c000212c:	85 c0                	test   eax,eax
c000212e:	74 0b                	je     c000213b <check_fs+0x87>
c0002130:	31 d2                	xor    edx,edx
c0002132:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002136:	0f 95 c2             	setne  dl
c0002139:	01 d2                	add    edx,edx
c000213b:	89 d0                	mov    eax,edx
c000213d:	83 c4 08             	add    esp,0x8
c0002140:	5b                   	pop    ebx
c0002141:	c3                   	ret    

c0002142 <find_volume>:
c0002142:	55                   	push   ebp
c0002143:	57                   	push   edi
c0002144:	56                   	push   esi
c0002145:	89 c6                	mov    esi,eax
c0002147:	53                   	push   ebx
c0002148:	89 d3                	mov    ebx,edx
c000214a:	83 ec 2c             	sub    esp,0x2c
c000214d:	31 d2                	xor    edx,edx
c000214f:	e8 60 ff ff ff       	call   c00020b4 <check_fs>
c0002154:	83 f8 02             	cmp    eax,0x2
c0002157:	74 06                	je     c000215f <find_volume+0x1d>
c0002159:	77 62                	ja     c00021bd <find_volume+0x7b>
c000215b:	85 db                	test   ebx,ebx
c000215d:	74 5e                	je     c00021bd <find_volume+0x7b>
c000215f:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002163:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002169:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000216f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002173:	89 cf                	mov    edi,ecx
c0002175:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002179:	89 e8                	mov    eax,ebp
c000217b:	83 c5 10             	add    ebp,0x10
c000217e:	e8 d6 f9 ff ff       	call   c0001b59 <ld_dword>
c0002183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002187:	89 01                	mov    DWORD PTR [ecx],eax
c0002189:	83 c1 04             	add    ecx,0x4
c000218c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002190:	75 e3                	jne    c0002175 <find_volume+0x33>
c0002192:	31 ed                	xor    ebp,ebp
c0002194:	85 db                	test   ebx,ebx
c0002196:	74 03                	je     c000219b <find_volume+0x59>
c0002198:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000219b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000219e:	b8 03 00 00 00       	mov    eax,0x3
c00021a3:	85 d2                	test   edx,edx
c00021a5:	74 0c                	je     c00021b3 <find_volume+0x71>
c00021a7:	89 f0                	mov    eax,esi
c00021a9:	e8 06 ff ff ff       	call   c00020b4 <check_fs>
c00021ae:	83 f8 01             	cmp    eax,0x1
c00021b1:	76 0a                	jbe    c00021bd <find_volume+0x7b>
c00021b3:	85 db                	test   ebx,ebx
c00021b5:	75 06                	jne    c00021bd <find_volume+0x7b>
c00021b7:	45                   	inc    ebp
c00021b8:	83 fd 03             	cmp    ebp,0x3
c00021bb:	76 de                	jbe    c000219b <find_volume+0x59>
c00021bd:	83 c4 2c             	add    esp,0x2c
c00021c0:	5b                   	pop    ebx
c00021c1:	5e                   	pop    esi
c00021c2:	5f                   	pop    edi
c00021c3:	5d                   	pop    ebp
c00021c4:	c3                   	ret    

c00021c5 <mount_volume>:
c00021c5:	55                   	push   ebp
c00021c6:	89 d5                	mov    ebp,edx
c00021c8:	57                   	push   edi
c00021c9:	89 cf                	mov    edi,ecx
c00021cb:	56                   	push   esi
c00021cc:	53                   	push   ebx
c00021cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00021d2:	83 ec 2c             	sub    esp,0x2c
c00021d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00021db:	e8 9b fd ff ff       	call   c0001f7b <get_ldnumber>
c00021e0:	85 c0                	test   eax,eax
c00021e2:	0f 88 d6 02 00 00    	js     c00024be <mount_volume+0x2f9>
c00021e8:	8b 34 85 20 f4 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0be0]
c00021ef:	89 c2                	mov    edx,eax
c00021f1:	bb 0c 00 00 00       	mov    ebx,0xc
c00021f6:	85 f6                	test   esi,esi
c00021f8:	0f 84 c0 02 00 00    	je     c00024be <mount_volume+0x2f9>
c00021fe:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002201:	83 e7 fe             	and    edi,0xfffffffe
c0002204:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002207:	74 3a                	je     c0002243 <mount_volume+0x7e>
c0002209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000220d:	83 ec 0c             	sub    esp,0xc
c0002210:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002214:	50                   	push   eax
c0002215:	e8 e1 f8 ff ff       	call   c0001afb <disk_status>
c000221a:	83 c4 10             	add    esp,0x10
c000221d:	a8 01                	test   al,0x1
c000221f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002223:	75 1e                	jne    c0002243 <mount_volume+0x7e>
c0002225:	31 db                	xor    ebx,ebx
c0002227:	89 f9                	mov    ecx,edi
c0002229:	84 c9                	test   cl,cl
c000222b:	0f 84 8d 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002231:	a8 04                	test   al,0x4
c0002233:	0f 84 85 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002239:	bb 0a 00 00 00       	mov    ebx,0xa
c000223e:	e9 7b 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002243:	83 ec 0c             	sub    esp,0xc
c0002246:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002249:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000224c:	0f b6 c2             	movzx  eax,dl
c000224f:	bb 03 00 00 00       	mov    ebx,0x3
c0002254:	50                   	push   eax
c0002255:	e8 a4 f8 ff ff       	call   c0001afe <disk_initialize>
c000225a:	83 c4 10             	add    esp,0x10
c000225d:	a8 01                	test   al,0x1
c000225f:	0f 85 59 02 00 00    	jne    c00024be <mount_volume+0x2f9>
c0002265:	89 f9                	mov    ecx,edi
c0002267:	84 c9                	test   cl,cl
c0002269:	74 04                	je     c000226f <mount_volume+0xaa>
c000226b:	a8 04                	test   al,0x4
c000226d:	75 ca                	jne    c0002239 <mount_volume+0x74>
c000226f:	31 d2                	xor    edx,edx
c0002271:	89 f0                	mov    eax,esi
c0002273:	bb 01 00 00 00       	mov    ebx,0x1
c0002278:	e8 c5 fe ff ff       	call   c0002142 <find_volume>
c000227d:	83 f8 04             	cmp    eax,0x4
c0002280:	0f 84 38 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002286:	83 f8 01             	cmp    eax,0x1
c0002289:	76 0a                	jbe    c0002295 <mount_volume+0xd0>
c000228b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002290:	e9 29 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002295:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002298:	e8 af f8 ff ff       	call   c0001b4c <ld_word>
c000229d:	66 3d 00 02          	cmp    ax,0x200
c00022a1:	75 e8                	jne    c000228b <mount_volume+0xc6>
c00022a3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00022a6:	e8 a1 f8 ff ff       	call   c0001b4c <ld_word>
c00022ab:	0f b7 c0             	movzx  eax,ax
c00022ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022b2:	85 c0                	test   eax,eax
c00022b4:	75 0c                	jne    c00022c2 <mount_volume+0xfd>
c00022b6:	8d 46 58             	lea    eax,[esi+0x58]
c00022b9:	e8 9b f8 ff ff       	call   c0001b59 <ld_dword>
c00022be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022c2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00022c5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00022c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00022cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00022d0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00022d3:	89 e8                	mov    eax,ebp
c00022d5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00022d8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00022db:	3c 01                	cmp    al,0x1
c00022dd:	77 ac                	ja     c000228b <mount_volume+0xc6>
c00022df:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00022e3:	89 c3                	mov    ebx,eax
c00022e5:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00022e9:	66 85 c0             	test   ax,ax
c00022ec:	74 9d                	je     c000228b <mount_volume+0xc6>
c00022ee:	8d 40 ff             	lea    eax,[eax-0x1]
c00022f1:	85 d8                	test   eax,ebx
c00022f3:	75 96                	jne    c000228b <mount_volume+0xc6>
c00022f5:	8d 46 45             	lea    eax,[esi+0x45]
c00022f8:	e8 4f f8 ff ff       	call   c0001b4c <ld_word>
c00022fd:	89 c7                	mov    edi,eax
c00022ff:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002303:	a8 0f                	test   al,0xf
c0002305:	75 84                	jne    c000228b <mount_volume+0xc6>
c0002307:	8d 46 47             	lea    eax,[esi+0x47]
c000230a:	e8 3d f8 ff ff       	call   c0001b4c <ld_word>
c000230f:	0f b7 d0             	movzx  edx,ax
c0002312:	85 d2                	test   edx,edx
c0002314:	75 0a                	jne    c0002320 <mount_volume+0x15b>
c0002316:	8d 46 54             	lea    eax,[esi+0x54]
c0002319:	e8 3b f8 ff ff       	call   c0001b59 <ld_dword>
c000231e:	89 c2                	mov    edx,eax
c0002320:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002324:	8d 46 42             	lea    eax,[esi+0x42]
c0002327:	e8 20 f8 ff ff       	call   c0001b4c <ld_word>
c000232c:	66 85 c0             	test   ax,ax
c000232f:	0f 84 56 ff ff ff    	je     c000228b <mount_volume+0xc6>
c0002335:	89 e9                	mov    ecx,ebp
c0002337:	0f b7 c0             	movzx  eax,ax
c000233a:	0f b6 e9             	movzx  ebp,cl
c000233d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002341:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002345:	89 f8                	mov    eax,edi
c0002347:	0f af cd             	imul   ecx,ebp
c000234a:	66 c1 e8 04          	shr    ax,0x4
c000234e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002352:	0f b7 c0             	movzx  eax,ax
c0002355:	01 c8                	add    eax,ecx
c0002357:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000235b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000235f:	39 c2                	cmp    edx,eax
c0002361:	0f 82 24 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002367:	29 c2                	sub    edx,eax
c0002369:	89 d5                	mov    ebp,edx
c000236b:	89 d0                	mov    eax,edx
c000236d:	31 d2                	xor    edx,edx
c000236f:	f7 f3                	div    ebx
c0002371:	39 dd                	cmp    ebp,ebx
c0002373:	0f 82 12 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002379:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000237e:	0f 87 07 ff ff ff    	ja     c000228b <mount_volume+0xc6>
c0002384:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002389:	0f 86 1f 01 00 00    	jbe    c00024ae <mount_volume+0x2e9>
c000238f:	bb 03 00 00 00       	mov    ebx,0x3
c0002394:	8d 68 02             	lea    ebp,[eax+0x2]
c0002397:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000239b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000239f:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00023a3:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00023a6:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00023a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00023ad:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00023b0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00023b4:	83 fb 03             	cmp    ebx,0x3
c00023b7:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00023ba:	75 21                	jne    c00023dd <mount_volume+0x218>
c00023bc:	8d 46 5e             	lea    eax,[esi+0x5e]
c00023bf:	e8 88 f7 ff ff       	call   c0001b4c <ld_word>
c00023c4:	66 09 c7             	or     di,ax
c00023c7:	0f 85 be fe ff ff    	jne    c000228b <mount_volume+0xc6>
c00023cd:	8d 46 60             	lea    eax,[esi+0x60]
c00023d0:	c1 e5 02             	shl    ebp,0x2
c00023d3:	e8 81 f7 ff ff       	call   c0001b59 <ld_dword>
c00023d8:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023db:	eb 22                	jmp    c00023ff <mount_volume+0x23a>
c00023dd:	66 85 ff             	test   di,di
c00023e0:	0f 84 a5 fe ff ff    	je     c000228b <mount_volume+0xc6>
c00023e6:	01 c8                	add    eax,ecx
c00023e8:	83 fb 02             	cmp    ebx,0x2
c00023eb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023ee:	75 04                	jne    c00023f4 <mount_volume+0x22f>
c00023f0:	01 ed                	add    ebp,ebp
c00023f2:	eb 0b                	jmp    c00023ff <mount_volume+0x23a>
c00023f4:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00023f8:	83 e5 01             	and    ebp,0x1
c00023fb:	d1 e8                	shr    eax,1
c00023fd:	01 c5                	add    ebp,eax
c00023ff:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002405:	c1 ed 09             	shr    ebp,0x9
c0002408:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000240c:	0f 87 79 fe ff ff    	ja     c000228b <mount_volume+0xc6>
c0002412:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002419:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002420:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002424:	83 fb 03             	cmp    ebx,0x3
c0002427:	75 6e                	jne    c0002497 <mount_volume+0x2d2>
c0002429:	8d 46 64             	lea    eax,[esi+0x64]
c000242c:	e8 1b f7 ff ff       	call   c0001b4c <ld_word>
c0002431:	66 48                	dec    ax
c0002433:	75 62                	jne    c0002497 <mount_volume+0x2d2>
c0002435:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002439:	89 f0                	mov    eax,esi
c000243b:	42                   	inc    edx
c000243c:	e8 31 fc ff ff       	call   c0002072 <move_window>
c0002441:	85 c0                	test   eax,eax
c0002443:	75 52                	jne    c0002497 <mount_volume+0x2d2>
c0002445:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002449:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000244f:	e8 f8 f6 ff ff       	call   c0001b4c <ld_word>
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 3d                	jne    c0002497 <mount_volume+0x2d2>
c000245a:	8d 46 34             	lea    eax,[esi+0x34]
c000245d:	e8 f7 f6 ff ff       	call   c0001b59 <ld_dword>
c0002462:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002467:	75 2e                	jne    c0002497 <mount_volume+0x2d2>
c0002469:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000246f:	e8 e5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002474:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002479:	75 1c                	jne    c0002497 <mount_volume+0x2d2>
c000247b:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002481:	e8 d3 f6 ff ff       	call   c0001b59 <ld_dword>
c0002486:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002489:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000248f:	e8 c5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002494:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002497:	66 a1 00 f4 01 c0    	mov    ax,ds:0xc001f400
c000249d:	88 1e                	mov    BYTE PTR [esi],bl
c000249f:	40                   	inc    eax
c00024a0:	31 db                	xor    ebx,ebx
c00024a2:	66 a3 00 f4 01 c0    	mov    ds:0xc001f400,ax
c00024a8:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00024ac:	eb 10                	jmp    c00024be <mount_volume+0x2f9>
c00024ae:	31 db                	xor    ebx,ebx
c00024b0:	3d f5 0f 00 00       	cmp    eax,0xff5
c00024b5:	0f 97 c3             	seta   bl
c00024b8:	43                   	inc    ebx
c00024b9:	e9 d6 fe ff ff       	jmp    c0002394 <mount_volume+0x1cf>
c00024be:	83 c4 2c             	add    esp,0x2c
c00024c1:	89 d8                	mov    eax,ebx
c00024c3:	5b                   	pop    ebx
c00024c4:	5e                   	pop    esi
c00024c5:	5f                   	pop    edi
c00024c6:	5d                   	pop    ebp
c00024c7:	c3                   	ret    

c00024c8 <put_fat>:
c00024c8:	55                   	push   ebp
c00024c9:	bd 02 00 00 00       	mov    ebp,0x2
c00024ce:	57                   	push   edi
c00024cf:	56                   	push   esi
c00024d0:	53                   	push   ebx
c00024d1:	83 ec 1c             	sub    esp,0x1c
c00024d4:	83 fa 01             	cmp    edx,0x1
c00024d7:	0f 86 31 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024dd:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00024e0:	0f 86 28 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024e6:	89 c6                	mov    esi,eax
c00024e8:	89 cf                	mov    edi,ecx
c00024ea:	8a 00                	mov    al,BYTE PTR [eax]
c00024ec:	89 d3                	mov    ebx,edx
c00024ee:	3c 02                	cmp    al,0x2
c00024f0:	0f 84 ac 00 00 00    	je     c00025a2 <put_fat+0xda>
c00024f6:	3c 03                	cmp    al,0x3
c00024f8:	0f 84 d1 00 00 00    	je     c00025cf <put_fat+0x107>
c00024fe:	fe c8                	dec    al
c0002500:	0f 85 08 01 00 00    	jne    c000260e <put_fat+0x146>
c0002506:	89 d1                	mov    ecx,edx
c0002508:	89 f0                	mov    eax,esi
c000250a:	d1 e9                	shr    ecx,1
c000250c:	01 d1                	add    ecx,edx
c000250e:	89 ca                	mov    edx,ecx
c0002510:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002514:	c1 ea 09             	shr    edx,0x9
c0002517:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000251a:	e8 53 fb ff ff       	call   c0002072 <move_window>
c000251f:	89 c5                	mov    ebp,eax
c0002521:	85 c0                	test   eax,eax
c0002523:	0f 85 e5 00 00 00    	jne    c000260e <put_fat+0x146>
c0002529:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000252d:	8d 46 34             	lea    eax,[esi+0x34]
c0002530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002534:	8d 41 01             	lea    eax,[ecx+0x1]
c0002537:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000253d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002541:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002545:	89 f8                	mov    eax,edi
c0002547:	83 e3 01             	and    ebx,0x1
c000254a:	74 0c                	je     c0002558 <put_fat+0x90>
c000254c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000254e:	89 f8                	mov    eax,edi
c0002550:	83 e2 0f             	and    edx,0xf
c0002553:	c1 e0 04             	shl    eax,0x4
c0002556:	09 d0                	or     eax,edx
c0002558:	88 01                	mov    BYTE PTR [ecx],al
c000255a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000255e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002562:	c1 ea 09             	shr    edx,0x9
c0002565:	89 f0                	mov    eax,esi
c0002567:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000256a:	e8 03 fb ff ff       	call   c0002072 <move_window>
c000256f:	89 c5                	mov    ebp,eax
c0002571:	85 c0                	test   eax,eax
c0002573:	0f 85 95 00 00 00    	jne    c000260e <put_fat+0x146>
c0002579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000257d:	25 ff 01 00 00       	and    eax,0x1ff
c0002582:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002586:	85 db                	test   ebx,ebx
c0002588:	74 07                	je     c0002591 <put_fat+0xc9>
c000258a:	c1 ef 04             	shr    edi,0x4
c000258d:	89 f9                	mov    ecx,edi
c000258f:	eb 0d                	jmp    c000259e <put_fat+0xd6>
c0002591:	8a 08                	mov    cl,BYTE PTR [eax]
c0002593:	c1 ef 08             	shr    edi,0x8
c0002596:	83 e1 f0             	and    ecx,0xfffffff0
c0002599:	83 e7 0f             	and    edi,0xf
c000259c:	09 f9                	or     ecx,edi
c000259e:	88 08                	mov    BYTE PTR [eax],cl
c00025a0:	eb 27                	jmp    c00025c9 <put_fat+0x101>
c00025a2:	c1 ea 08             	shr    edx,0x8
c00025a5:	89 f0                	mov    eax,esi
c00025a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025aa:	e8 c3 fa ff ff       	call   c0002072 <move_window>
c00025af:	89 c5                	mov    ebp,eax
c00025b1:	85 c0                	test   eax,eax
c00025b3:	75 59                	jne    c000260e <put_fat+0x146>
c00025b5:	01 db                	add    ebx,ebx
c00025b7:	0f b7 d7             	movzx  edx,di
c00025ba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00025c0:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00025c4:	e8 a8 f5 ff ff       	call   c0001b71 <st_word>
c00025c9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00025cd:	eb 3f                	jmp    c000260e <put_fat+0x146>
c00025cf:	c1 ea 07             	shr    edx,0x7
c00025d2:	89 f0                	mov    eax,esi
c00025d4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025d7:	e8 96 fa ff ff       	call   c0002072 <move_window>
c00025dc:	89 c5                	mov    ebp,eax
c00025de:	85 c0                	test   eax,eax
c00025e0:	75 2c                	jne    c000260e <put_fat+0x146>
c00025e2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00025e8:	c1 e3 02             	shl    ebx,0x2
c00025eb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00025f1:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00025f5:	89 d8                	mov    eax,ebx
c00025f7:	e8 5d f5 ff ff       	call   c0001b59 <ld_dword>
c00025fc:	25 00 00 00 f0       	and    eax,0xf0000000
c0002601:	09 f8                	or     eax,edi
c0002603:	89 c2                	mov    edx,eax
c0002605:	89 d8                	mov    eax,ebx
c0002607:	e8 69 f5 ff ff       	call   c0001b75 <st_dword>
c000260c:	eb bb                	jmp    c00025c9 <put_fat+0x101>
c000260e:	83 c4 1c             	add    esp,0x1c
c0002611:	89 e8                	mov    eax,ebp
c0002613:	5b                   	pop    ebx
c0002614:	5e                   	pop    esi
c0002615:	5f                   	pop    edi
c0002616:	5d                   	pop    ebp
c0002617:	c3                   	ret    

c0002618 <dir_clear>:
c0002618:	55                   	push   ebp
c0002619:	57                   	push   edi
c000261a:	56                   	push   esi
c000261b:	89 c6                	mov    esi,eax
c000261d:	53                   	push   ebx
c000261e:	83 ec 1c             	sub    esp,0x1c
c0002621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002625:	e8 e5 f9 ff ff       	call   c000200f <sync_window>
c000262a:	85 c0                	test   eax,eax
c000262c:	0f 85 c0 00 00 00    	jne    c00026f2 <dir_clear+0xda>
c0002632:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002636:	89 f0                	mov    eax,esi
c0002638:	e8 55 f7 ff ff       	call   c0001d92 <clst2sect>
c000263d:	31 d2                	xor    edx,edx
c000263f:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002642:	89 c5                	mov    ebp,eax
c0002644:	b9 00 02 00 00       	mov    ecx,0x200
c0002649:	8d 46 34             	lea    eax,[esi+0x34]
c000264c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002650:	e8 38 f5 ff ff       	call   c0001b8d <mem_set>
c0002655:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002659:	c1 e3 09             	shl    ebx,0x9
c000265c:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002662:	76 1b                	jbe    c000267f <dir_clear+0x67>
c0002664:	bb 00 80 00 00       	mov    ebx,0x8000
c0002669:	eb 14                	jmp    c000267f <dir_clear+0x67>
c000266b:	83 ec 0c             	sub    esp,0xc
c000266e:	53                   	push   ebx
c000266f:	e8 24 32 00 00       	call   c0005898 <ff_memalloc>
c0002674:	83 c4 10             	add    esp,0x10
c0002677:	89 c7                	mov    edi,eax
c0002679:	85 c0                	test   eax,eax
c000267b:	75 7c                	jne    c00026f9 <dir_clear+0xe1>
c000267d:	d1 eb                	shr    ebx,1
c000267f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002685:	77 e4                	ja     c000266b <dir_clear+0x53>
c0002687:	31 db                	xor    ebx,ebx
c0002689:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000268d:	39 d8                	cmp    eax,ebx
c000268f:	76 53                	jbe    c00026e4 <dir_clear+0xcc>
c0002691:	6a 01                	push   0x1
c0002693:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002696:	50                   	push   eax
c0002697:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000269b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000269f:	50                   	push   eax
c00026a0:	e8 72 f4 ff ff       	call   c0001b17 <disk_write>
c00026a5:	83 c4 10             	add    esp,0x10
c00026a8:	85 c0                	test   eax,eax
c00026aa:	75 38                	jne    c00026e4 <dir_clear+0xcc>
c00026ac:	43                   	inc    ebx
c00026ad:	eb da                	jmp    c0002689 <dir_clear+0x71>
c00026af:	52                   	push   edx
c00026b0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00026b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00026b7:	50                   	push   eax
c00026b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026bc:	57                   	push   edi
c00026bd:	50                   	push   eax
c00026be:	e8 54 f4 ff ff       	call   c0001b17 <disk_write>
c00026c3:	83 c4 10             	add    esp,0x10
c00026c6:	85 c0                	test   eax,eax
c00026c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026cc:	75 0a                	jne    c00026d8 <dir_clear+0xc0>
c00026ce:	01 d3                	add    ebx,edx
c00026d0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026d4:	39 d8                	cmp    eax,ebx
c00026d6:	77 d7                	ja     c00026af <dir_clear+0x97>
c00026d8:	83 ec 0c             	sub    esp,0xc
c00026db:	57                   	push   edi
c00026dc:	e8 cf 31 00 00       	call   c00058b0 <ff_memfree>
c00026e1:	83 c4 10             	add    esp,0x10
c00026e4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026e8:	39 d8                	cmp    eax,ebx
c00026ea:	0f 95 c0             	setne  al
c00026ed:	0f b6 c0             	movzx  eax,al
c00026f0:	eb 19                	jmp    c000270b <dir_clear+0xf3>
c00026f2:	b8 01 00 00 00       	mov    eax,0x1
c00026f7:	eb 12                	jmp    c000270b <dir_clear+0xf3>
c00026f9:	89 d9                	mov    ecx,ebx
c00026fb:	31 d2                	xor    edx,edx
c00026fd:	e8 8b f4 ff ff       	call   c0001b8d <mem_set>
c0002702:	89 da                	mov    edx,ebx
c0002704:	31 db                	xor    ebx,ebx
c0002706:	c1 ea 09             	shr    edx,0x9
c0002709:	eb c5                	jmp    c00026d0 <dir_clear+0xb8>
c000270b:	83 c4 1c             	add    esp,0x1c
c000270e:	5b                   	pop    ebx
c000270f:	5e                   	pop    esi
c0002710:	5f                   	pop    edi
c0002711:	5d                   	pop    ebp
c0002712:	c3                   	ret    

c0002713 <create_name>:
c0002713:	55                   	push   ebp
c0002714:	89 d5                	mov    ebp,edx
c0002716:	57                   	push   edi
c0002717:	89 c7                	mov    edi,eax
c0002719:	56                   	push   esi
c000271a:	31 f6                	xor    esi,esi
c000271c:	53                   	push   ebx
c000271d:	83 ec 3c             	sub    esp,0x3c
c0002720:	8b 02                	mov    eax,DWORD PTR [edx]
c0002722:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002726:	8b 07                	mov    eax,DWORD PTR [edi]
c0002728:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000272b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000272f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002733:	e8 9b f4 ff ff       	call   c0001bd3 <tchar2uni>
c0002738:	89 c3                	mov    ebx,eax
c000273a:	83 f8 ff             	cmp    eax,0xffffffff
c000273d:	75 0a                	jne    c0002749 <create_name+0x36>
c000273f:	b8 06 00 00 00       	mov    eax,0x6
c0002744:	e9 9e 02 00 00       	jmp    c00029e7 <create_name+0x2d4>
c0002749:	3d ff ff 00 00       	cmp    eax,0xffff
c000274e:	76 0c                	jbe    c000275c <create_name+0x49>
c0002750:	c1 e8 10             	shr    eax,0x10
c0002753:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002757:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000275b:	46                   	inc    esi
c000275c:	66 83 fb 1f          	cmp    bx,0x1f
c0002760:	76 4f                	jbe    c00027b1 <create_name+0x9e>
c0002762:	66 83 fb 5c          	cmp    bx,0x5c
c0002766:	74 35                	je     c000279d <create_name+0x8a>
c0002768:	66 83 fb 2f          	cmp    bx,0x2f
c000276c:	74 2f                	je     c000279d <create_name+0x8a>
c000276e:	66 83 fb 7f          	cmp    bx,0x7f
c0002772:	77 11                	ja     c0002785 <create_name+0x72>
c0002774:	0f b7 d3             	movzx  edx,bx
c0002777:	b8 e2 c4 01 c0       	mov    eax,0xc001c4e2
c000277c:	e8 3a f4 ff ff       	call   c0001bbb <chk_chr>
c0002781:	85 c0                	test   eax,eax
c0002783:	75 ba                	jne    c000273f <create_name+0x2c>
c0002785:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000278b:	77 b2                	ja     c000273f <create_name+0x2c>
c000278d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002791:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002795:	46                   	inc    esi
c0002796:	eb 97                	jmp    c000272f <create_name+0x1c>
c0002798:	40                   	inc    eax
c0002799:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000279d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027a1:	8a 10                	mov    dl,BYTE PTR [eax]
c00027a3:	80 fa 2f             	cmp    dl,0x2f
c00027a6:	74 f0                	je     c0002798 <create_name+0x85>
c00027a8:	80 fa 5c             	cmp    dl,0x5c
c00027ab:	74 eb                	je     c0002798 <create_name+0x85>
c00027ad:	31 db                	xor    ebx,ebx
c00027af:	eb 02                	jmp    c00027b3 <create_name+0xa0>
c00027b1:	b3 04                	mov    bl,0x4
c00027b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00027ba:	85 f6                	test   esi,esi
c00027bc:	74 18                	je     c00027d6 <create_name+0xc3>
c00027be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027c2:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00027c7:	66 83 f8 20          	cmp    ax,0x20
c00027cb:	74 06                	je     c00027d3 <create_name+0xc0>
c00027cd:	66 83 f8 2e          	cmp    ax,0x2e
c00027d1:	75 03                	jne    c00027d6 <create_name+0xc3>
c00027d3:	4e                   	dec    esi
c00027d4:	eb e4                	jmp    c00027ba <create_name+0xa7>
c00027d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027da:	31 ed                	xor    ebp,ebp
c00027dc:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00027e2:	85 f6                	test   esi,esi
c00027e4:	0f 84 55 ff ff ff    	je     c000273f <create_name+0x2c>
c00027ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027ee:	8d 55 01             	lea    edx,[ebp+0x1]
c00027f1:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00027f5:	66 83 f8 20          	cmp    ax,0x20
c00027f9:	75 04                	jne    c00027ff <create_name+0xec>
c00027fb:	89 d5                	mov    ebp,edx
c00027fd:	eb eb                	jmp    c00027ea <create_name+0xd7>
c00027ff:	85 ed                	test   ebp,ebp
c0002801:	75 06                	jne    c0002809 <create_name+0xf6>
c0002803:	66 83 f8 2e          	cmp    ax,0x2e
c0002807:	75 08                	jne    c0002811 <create_name+0xfe>
c0002809:	83 cb 03             	or     ebx,0x3
c000280c:	eb 03                	jmp    c0002811 <create_name+0xfe>
c000280e:	4e                   	dec    esi
c000280f:	74 0c                	je     c000281d <create_name+0x10a>
c0002811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002815:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c000281b:	75 f1                	jne    c000280e <create_name+0xfb>
c000281d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002822:	8d 47 20             	lea    eax,[edi+0x20]
c0002825:	ba 20 00 00 00       	mov    edx,0x20
c000282a:	e8 5e f3 ff ff       	call   c0001b8d <mem_set>
c000282f:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002837:	31 c9                	xor    ecx,ecx
c0002839:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000283e:	8d 45 01             	lea    eax,[ebp+0x1]
c0002841:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002849:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c000284d:	66 85 ed             	test   bp,bp
c0002850:	0f 84 30 01 00 00    	je     c0002986 <create_name+0x273>
c0002856:	66 83 fd 20          	cmp    bp,0x20
c000285a:	74 10                	je     c000286c <create_name+0x159>
c000285c:	66 83 fd 2e          	cmp    bp,0x2e
c0002860:	75 13                	jne    c0002875 <create_name+0x162>
c0002862:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002866:	0f 84 6b 01 00 00    	je     c00029d7 <create_name+0x2c4>
c000286c:	83 cb 03             	or     ebx,0x3
c000286f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002873:	eb c9                	jmp    c000283e <create_name+0x12b>
c0002875:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002879:	73 0b                	jae    c0002886 <create_name+0x173>
c000287b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c000287f:	75 47                	jne    c00028c8 <create_name+0x1b5>
c0002881:	e9 51 01 00 00       	jmp    c00029d7 <create_name+0x2c4>
c0002886:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c000288b:	75 10                	jne    c000289d <create_name+0x18a>
c000288d:	83 cb 03             	or     ebx,0x3
c0002890:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002898:	e9 e9 00 00 00       	jmp    c0002986 <create_name+0x273>
c000289d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028a1:	74 0d                	je     c00028b0 <create_name+0x19d>
c00028a3:	83 cb 03             	or     ebx,0x3
c00028a6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028aa:	0f 87 d6 00 00 00    	ja     c0002986 <create_name+0x273>
c00028b0:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00028b5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00028b9:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00028c1:	b9 08 00 00 00       	mov    ecx,0x8
c00028c6:	eb a7                	jmp    c000286f <create_name+0x15c>
c00028c8:	66 83 fd 7f          	cmp    bp,0x7f
c00028cc:	76 68                	jbe    c0002936 <create_name+0x223>
c00028ce:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00028d2:	88 da                	mov    dl,bl
c00028d4:	83 ca 02             	or     edx,0x2
c00028d7:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00028db:	50                   	push   eax
c00028dc:	50                   	push   eax
c00028dd:	68 b5 01 00 00       	push   0x1b5
c00028e2:	55                   	push   ebp
c00028e3:	e8 e0 2f 00 00       	call   c00058c8 <ff_uni2oem>
c00028e8:	83 c4 10             	add    esp,0x10
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	a8 80                	test   al,0x80
c00028ef:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00028f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00028f7:	74 0c                	je     c0002905 <create_name+0x1f2>
c00028f9:	83 e5 7f             	and    ebp,0x7f
c00028fc:	0f b6 ad a0 c5 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3a60]
c0002903:	eb 2a                	jmp    c000292f <create_name+0x21c>
c0002905:	66 3d ff 00          	cmp    ax,0xff
c0002909:	76 24                	jbe    c000292f <create_name+0x21c>
c000290b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000290f:	48                   	dec    eax
c0002910:	39 c8                	cmp    eax,ecx
c0002912:	77 0c                	ja     c0002920 <create_name+0x20d>
c0002914:	83 cb 03             	or     ebx,0x3
c0002917:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000291b:	e9 4f ff ff ff       	jmp    c000286f <create_name+0x15c>
c0002920:	89 e8                	mov    eax,ebp
c0002922:	88 d3                	mov    bl,dl
c0002924:	66 c1 e8 08          	shr    ax,0x8
c0002928:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c000292c:	41                   	inc    ecx
c000292d:	eb 4b                	jmp    c000297a <create_name+0x267>
c000292f:	88 d3                	mov    bl,dl
c0002931:	66 85 ed             	test   bp,bp
c0002934:	74 19                	je     c000294f <create_name+0x23c>
c0002936:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000293a:	0f b7 d5             	movzx  edx,bp
c000293d:	b8 eb c4 01 c0       	mov    eax,0xc001c4eb
c0002942:	e8 74 f2 ff ff       	call   c0001bbb <chk_chr>
c0002947:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000294b:	85 c0                	test   eax,eax
c000294d:	74 0a                	je     c0002959 <create_name+0x246>
c000294f:	83 cb 03             	or     ebx,0x3
c0002952:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002957:	eb 21                	jmp    c000297a <create_name+0x267>
c0002959:	8d 45 bf             	lea    eax,[ebp-0x41]
c000295c:	66 83 f8 19          	cmp    ax,0x19
c0002960:	77 07                	ja     c0002969 <create_name+0x256>
c0002962:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002967:	eb 11                	jmp    c000297a <create_name+0x267>
c0002969:	8d 45 9f             	lea    eax,[ebp-0x61]
c000296c:	66 83 f8 19          	cmp    ax,0x19
c0002970:	77 08                	ja     c000297a <create_name+0x267>
c0002972:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002977:	83 ed 20             	sub    ebp,0x20
c000297a:	89 e8                	mov    eax,ebp
c000297c:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002980:	41                   	inc    ecx
c0002981:	e9 e9 fe ff ff       	jmp    c000286f <create_name+0x15c>
c0002986:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c000298a:	75 04                	jne    c0002990 <create_name+0x27d>
c000298c:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002990:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002995:	75 05                	jne    c000299c <create_name+0x289>
c0002997:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c000299c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029a0:	83 e0 0c             	and    eax,0xc
c00029a3:	3c 0c                	cmp    al,0xc
c00029a5:	74 0b                	je     c00029b2 <create_name+0x29f>
c00029a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029ab:	83 e0 03             	and    eax,0x3
c00029ae:	3c 03                	cmp    al,0x3
c00029b0:	75 05                	jne    c00029b7 <create_name+0x2a4>
c00029b2:	83 cb 02             	or     ebx,0x2
c00029b5:	eb 19                	jmp    c00029d0 <create_name+0x2bd>
c00029b7:	f6 c3 02             	test   bl,0x2
c00029ba:	75 14                	jne    c00029d0 <create_name+0x2bd>
c00029bc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00029c1:	74 03                	je     c00029c6 <create_name+0x2b3>
c00029c3:	83 cb 10             	or     ebx,0x10
c00029c6:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c00029cb:	74 03                	je     c00029d0 <create_name+0x2bd>
c00029cd:	83 cb 08             	or     ebx,0x8
c00029d0:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c00029d3:	31 c0                	xor    eax,eax
c00029d5:	eb 10                	jmp    c00029e7 <create_name+0x2d4>
c00029d7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c00029dc:	0f 85 ce fe ff ff    	jne    c00028b0 <create_name+0x19d>
c00029e2:	e9 a6 fe ff ff       	jmp    c000288d <create_name+0x17a>
c00029e7:	83 c4 3c             	add    esp,0x3c
c00029ea:	5b                   	pop    ebx
c00029eb:	5e                   	pop    esi
c00029ec:	5f                   	pop    edi
c00029ed:	5d                   	pop    ebp
c00029ee:	c3                   	ret    

c00029ef <cmp_lfn>:
c00029ef:	55                   	push   ebp
c00029f0:	57                   	push   edi
c00029f1:	89 d7                	mov    edi,edx
c00029f3:	56                   	push   esi
c00029f4:	53                   	push   ebx
c00029f5:	83 ec 1c             	sub    esp,0x1c
c00029f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029fc:	8d 42 1a             	lea    eax,[edx+0x1a]
c00029ff:	e8 48 f1 ff ff       	call   c0001b4c <ld_word>
c0002a04:	66 85 c0             	test   ax,ax
c0002a07:	74 07                	je     c0002a10 <cmp_lfn+0x21>
c0002a09:	31 c0                	xor    eax,eax
c0002a0b:	e9 9a 00 00 00       	jmp    c0002aaa <cmp_lfn+0xbb>
c0002a10:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002a12:	bd 01 00 00 00       	mov    ebp,0x1
c0002a17:	83 e3 3f             	and    ebx,0x3f
c0002a1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002a22:	4b                   	dec    ebx
c0002a23:	6b db 0d             	imul   ebx,ebx,0xd
c0002a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a2a:	0f b6 80 20 c6 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe39e0]
c0002a31:	01 f8                	add    eax,edi
c0002a33:	e8 14 f1 ff ff       	call   c0001b4c <ld_word>
c0002a38:	66 85 ed             	test   bp,bp
c0002a3b:	89 c6                	mov    esi,eax
c0002a3d:	74 3c                	je     c0002a7b <cmp_lfn+0x8c>
c0002a3f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002a45:	77 c2                	ja     c0002a09 <cmp_lfn+0x1a>
c0002a47:	83 ec 0c             	sub    esp,0xc
c0002a4a:	0f b7 c0             	movzx  eax,ax
c0002a4d:	50                   	push   eax
c0002a4e:	e8 8d 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a53:	89 c5                	mov    ebp,eax
c0002a55:	8d 43 01             	lea    eax,[ebx+0x1]
c0002a58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002a5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002a60:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0002a67:	e8 74 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a6c:	83 c4 10             	add    esp,0x10
c0002a6f:	39 c5                	cmp    ebp,eax
c0002a71:	75 96                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a73:	89 f5                	mov    ebp,esi
c0002a75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002a79:	eb 04                	jmp    c0002a7f <cmp_lfn+0x90>
c0002a7b:	66 46                	inc    si
c0002a7d:	75 8a                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a7f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002a83:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002a88:	75 9c                	jne    c0002a26 <cmp_lfn+0x37>
c0002a8a:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002a8d:	74 16                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a8f:	66 85 ed             	test   bp,bp
c0002a92:	74 11                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a98:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002a9d:	0f 94 c0             	sete   al
c0002aa0:	0f b6 c0             	movzx  eax,al
c0002aa3:	eb 05                	jmp    c0002aaa <cmp_lfn+0xbb>
c0002aa5:	b8 01 00 00 00       	mov    eax,0x1
c0002aaa:	83 c4 1c             	add    esp,0x1c
c0002aad:	5b                   	pop    ebx
c0002aae:	5e                   	pop    esi
c0002aaf:	5f                   	pop    edi
c0002ab0:	5d                   	pop    ebp
c0002ab1:	c3                   	ret    

c0002ab2 <sync_fs>:
c0002ab2:	56                   	push   esi
c0002ab3:	53                   	push   ebx
c0002ab4:	53                   	push   ebx
c0002ab5:	89 c3                	mov    ebx,eax
c0002ab7:	e8 53 f5 ff ff       	call   c000200f <sync_window>
c0002abc:	85 c0                	test   eax,eax
c0002abe:	0f 85 9a 00 00 00    	jne    c0002b5e <sync_fs+0xac>
c0002ac4:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002ac7:	75 7b                	jne    c0002b44 <sync_fs+0x92>
c0002ac9:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002acd:	75 75                	jne    c0002b44 <sync_fs+0x92>
c0002acf:	b9 00 02 00 00       	mov    ecx,0x200
c0002ad4:	8d 73 34             	lea    esi,[ebx+0x34]
c0002ad7:	31 d2                	xor    edx,edx
c0002ad9:	89 f0                	mov    eax,esi
c0002adb:	e8 ad f0 ff ff       	call   c0001b8d <mem_set>
c0002ae0:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ae6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002aeb:	e8 81 f0 ff ff       	call   c0001b71 <st_word>
c0002af0:	ba 52 52 61 41       	mov    edx,0x41615252
c0002af5:	89 f0                	mov    eax,esi
c0002af7:	e8 79 f0 ff ff       	call   c0001b75 <st_dword>
c0002afc:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002b02:	ba 72 72 41 61       	mov    edx,0x61417272
c0002b07:	e8 69 f0 ff ff       	call   c0001b75 <st_dword>
c0002b0c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002b0f:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002b15:	e8 5b f0 ff ff       	call   c0001b75 <st_dword>
c0002b1a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002b1d:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002b23:	e8 4d f0 ff ff       	call   c0001b75 <st_dword>
c0002b28:	6a 01                	push   0x1
c0002b2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002b2d:	40                   	inc    eax
c0002b2e:	50                   	push   eax
c0002b2f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002b32:	56                   	push   esi
c0002b33:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b37:	50                   	push   eax
c0002b38:	e8 da ef ff ff       	call   c0001b17 <disk_write>
c0002b3d:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002b41:	83 c4 10             	add    esp,0x10
c0002b44:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b48:	51                   	push   ecx
c0002b49:	6a 00                	push   0x0
c0002b4b:	6a 00                	push   0x0
c0002b4d:	50                   	push   eax
c0002b4e:	e8 da ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b53:	83 c4 10             	add    esp,0x10
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 95 c0             	setne  al
c0002b5b:	0f b6 c0             	movzx  eax,al
c0002b5e:	5a                   	pop    edx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	c3                   	ret    

c0002b62 <create_partition>:
c0002b62:	55                   	push   ebp
c0002b63:	0f b6 c0             	movzx  eax,al
c0002b66:	57                   	push   edi
c0002b67:	56                   	push   esi
c0002b68:	53                   	push   ebx
c0002b69:	83 ec 40             	sub    esp,0x40
c0002b6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002b74:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b78:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002b7c:	50                   	push   eax
c0002b7d:	6a 01                	push   0x1
c0002b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002b83:	e8 a5 ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b88:	83 c4 10             	add    esp,0x10
c0002b8b:	85 c0                	test   eax,eax
c0002b8d:	0f 85 69 01 00 00    	jne    c0002cfc <create_partition+0x19a>
c0002b93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b97:	b9 05 00 00 00       	mov    ecx,0x5
c0002b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ba0:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bb0:	f7 f3                	div    ebx
c0002bb2:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002bb7:	76 0c                	jbe    c0002bc5 <create_partition+0x63>
c0002bb9:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002bbd:	49                   	dec    ecx
c0002bbe:	75 e5                	jne    c0002ba5 <create_partition+0x43>
c0002bc0:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002bc5:	b9 00 02 00 00       	mov    ecx,0x200
c0002bca:	31 d2                	xor    edx,edx
c0002bcc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bd0:	e8 b8 ef ff ff       	call   c0001b8d <mem_set>
c0002bd5:	b9 64 00 00 00       	mov    ecx,0x64
c0002bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bde:	31 d2                	xor    edx,edx
c0002be0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002be8:	f7 f1                	div    ecx
c0002bea:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002bef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002bf3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bf7:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002bfd:	85 c9                	test   ecx,ecx
c0002bff:	75 34                	jne    c0002c35 <create_partition+0xd3>
c0002c01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002c05:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002c0a:	05 fe 01 00 00       	add    eax,0x1fe
c0002c0f:	e8 5d ef ff ff       	call   c0001b71 <st_word>
c0002c14:	6a 01                	push   0x1
c0002c16:	6a 00                	push   0x0
c0002c18:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002c20:	e8 f2 ee ff ff       	call   c0001b17 <disk_write>
c0002c25:	83 c4 10             	add    esp,0x10
c0002c28:	85 c0                	test   eax,eax
c0002c2a:	0f 95 c0             	setne  al
c0002c2d:	0f b6 c0             	movzx  eax,al
c0002c30:	e9 cc 00 00 00       	jmp    c0002d01 <create_partition+0x19f>
c0002c35:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002c39:	76 c6                	jbe    c0002c01 <create_partition+0x9f>
c0002c3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002c3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002c43:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002c46:	83 fe 64             	cmp    esi,0x64
c0002c49:	77 0d                	ja     c0002c58 <create_partition+0xf6>
c0002c4b:	74 07                	je     c0002c54 <create_partition+0xf2>
c0002c4d:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002c52:	eb 04                	jmp    c0002c58 <create_partition+0xf6>
c0002c54:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c58:	31 c0                	xor    eax,eax
c0002c5a:	89 f2                	mov    edx,esi
c0002c5c:	01 ca                	add    edx,ecx
c0002c5e:	0f 92 c0             	setb   al
c0002c61:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002c65:	77 04                	ja     c0002c6b <create_partition+0x109>
c0002c67:	85 c0                	test   eax,eax
c0002c69:	74 08                	je     c0002c73 <create_partition+0x111>
c0002c6b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c6f:	29 ce                	sub    esi,ecx
c0002c71:	eb 04                	jmp    c0002c77 <create_partition+0x115>
c0002c73:	85 f6                	test   esi,esi
c0002c75:	74 8a                	je     c0002c01 <create_partition+0x9f>
c0002c77:	89 ca                	mov    edx,ecx
c0002c79:	89 d8                	mov    eax,ebx
c0002c7b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002c80:	e8 f0 ee ff ff       	call   c0001b75 <st_dword>
c0002c85:	8d 43 04             	lea    eax,[ebx+0x4]
c0002c88:	89 f2                	mov    edx,esi
c0002c8a:	83 c3 10             	add    ebx,0x10
c0002c8d:	e8 e3 ee ff ff       	call   c0001b75 <st_dword>
c0002c92:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002c97:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002c9b:	31 d2                	xor    edx,edx
c0002c9d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002ca0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002ca4:	89 c8                	mov    eax,ecx
c0002ca6:	01 f1                	add    ecx,esi
c0002ca8:	f7 f5                	div    ebp
c0002caa:	89 d5                	mov    ebp,edx
c0002cac:	31 d2                	xor    edx,edx
c0002cae:	45                   	inc    ebp
c0002caf:	f7 f7                	div    edi
c0002cb1:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002cb4:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002cb7:	89 c2                	mov    edx,eax
c0002cb9:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002cbc:	c1 ea 02             	shr    edx,0x2
c0002cbf:	83 e2 c0             	and    edx,0xffffffc0
c0002cc2:	09 ea                	or     edx,ebp
c0002cc4:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002cc9:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ccc:	31 d2                	xor    edx,edx
c0002cce:	f7 f5                	div    ebp
c0002cd0:	89 d6                	mov    esi,edx
c0002cd2:	31 d2                	xor    edx,edx
c0002cd4:	46                   	inc    esi
c0002cd5:	f7 f7                	div    edi
c0002cd7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002cda:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002cdd:	89 c7                	mov    edi,eax
c0002cdf:	c1 ef 02             	shr    edi,0x2
c0002ce2:	83 e7 c0             	and    edi,0xffffffc0
c0002ce5:	09 fe                	or     esi,edi
c0002ce7:	89 f2                	mov    edx,esi
c0002ce9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002cec:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002cf1:	0f 85 06 ff ff ff    	jne    c0002bfd <create_partition+0x9b>
c0002cf7:	e9 05 ff ff ff       	jmp    c0002c01 <create_partition+0x9f>
c0002cfc:	b8 01 00 00 00       	mov    eax,0x1
c0002d01:	83 c4 3c             	add    esp,0x3c
c0002d04:	5b                   	pop    ebx
c0002d05:	5e                   	pop    esi
c0002d06:	5f                   	pop    edi
c0002d07:	5d                   	pop    ebp
c0002d08:	c3                   	ret    

c0002d09 <get_fileinfo>:
c0002d09:	55                   	push   ebp
c0002d0a:	57                   	push   edi
c0002d0b:	56                   	push   esi
c0002d0c:	53                   	push   ebx
c0002d0d:	83 ec 1c             	sub    esp,0x1c
c0002d10:	8b 30                	mov    esi,DWORD PTR [eax]
c0002d12:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002d16:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002d1a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002d1e:	0f 84 c1 01 00 00    	je     c0002ee5 <get_fileinfo+0x1dc>
c0002d24:	89 d3                	mov    ebx,edx
c0002d26:	89 c6                	mov    esi,eax
c0002d28:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002d2c:	74 6a                	je     c0002d98 <get_fileinfo+0x8f>
c0002d2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002d36:	31 ed                	xor    ebp,ebp
c0002d38:	31 ff                	xor    edi,edi
c0002d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d45:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002d49:	66 85 d2             	test   dx,dx
c0002d4c:	74 3e                	je     c0002d8c <get_fileinfo+0x83>
c0002d4e:	66 85 ed             	test   bp,bp
c0002d51:	75 0c                	jne    c0002d5f <get_fileinfo+0x56>
c0002d53:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002d59:	66 3d ff 07          	cmp    ax,0x7ff
c0002d5d:	76 22                	jbe    c0002d81 <get_fileinfo+0x78>
c0002d5f:	b9 ff 00 00 00       	mov    ecx,0xff
c0002d64:	89 e8                	mov    eax,ebp
c0002d66:	29 f9                	sub    ecx,edi
c0002d68:	c1 e0 10             	shl    eax,0x10
c0002d6b:	09 d0                	or     eax,edx
c0002d6d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002d71:	e8 23 ef ff ff       	call   c0001c99 <put_utf>
c0002d76:	84 c0                	test   al,al
c0002d78:	74 10                	je     c0002d8a <get_fileinfo+0x81>
c0002d7a:	0f b6 c0             	movzx  eax,al
c0002d7d:	31 d2                	xor    edx,edx
c0002d7f:	01 c7                	add    edi,eax
c0002d81:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002d86:	89 d5                	mov    ebp,edx
c0002d88:	eb b0                	jmp    c0002d3a <get_fileinfo+0x31>
c0002d8a:	31 ff                	xor    edi,edi
c0002d8c:	66 85 ed             	test   bp,bp
c0002d8f:	74 02                	je     c0002d93 <get_fileinfo+0x8a>
c0002d91:	31 ff                	xor    edi,edi
c0002d93:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002d98:	31 ff                	xor    edi,edi
c0002d9a:	31 c9                	xor    ecx,ecx
c0002d9c:	83 f9 0a             	cmp    ecx,0xa
c0002d9f:	0f 87 ad 00 00 00    	ja     c0002e52 <get_fileinfo+0x149>
c0002da5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002da8:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002dab:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002daf:	66 83 fa 20          	cmp    dx,0x20
c0002db3:	0f 84 92 00 00 00    	je     c0002e4b <get_fileinfo+0x142>
c0002db9:	66 83 fa 05          	cmp    dx,0x5
c0002dbd:	75 05                	jne    c0002dc4 <get_fileinfo+0xbb>
c0002dbf:	ba e5 00 00 00       	mov    edx,0xe5
c0002dc4:	83 ff 0b             	cmp    edi,0xb
c0002dc7:	77 0b                	ja     c0002dd4 <get_fileinfo+0xcb>
c0002dc9:	83 fd 09             	cmp    ebp,0x9
c0002dcc:	75 06                	jne    c0002dd4 <get_fileinfo+0xcb>
c0002dce:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002dd3:	47                   	inc    edi
c0002dd4:	0f b7 c2             	movzx  eax,dx
c0002dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ddb:	e8 ed ed ff ff       	call   c0001bcd <dbc_1st>
c0002de0:	85 c0                	test   eax,eax
c0002de2:	74 2f                	je     c0002e13 <get_fileinfo+0x10a>
c0002de4:	83 fd 08             	cmp    ebp,0x8
c0002de7:	74 2a                	je     c0002e13 <get_fileinfo+0x10a>
c0002de9:	83 fd 0b             	cmp    ebp,0xb
c0002dec:	74 25                	je     c0002e13 <get_fileinfo+0x10a>
c0002dee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002df1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002df5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002df9:	e8 d2 ed ff ff       	call   c0001bd0 <dbc_2nd>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	74 11                	je     c0002e13 <get_fileinfo+0x10a>
c0002e02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002e0b:	c1 e2 08             	shl    edx,0x8
c0002e0e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002e11:	09 c2                	or     edx,eax
c0002e13:	0f b7 d2             	movzx  edx,dx
c0002e16:	50                   	push   eax
c0002e17:	50                   	push   eax
c0002e18:	68 b5 01 00 00       	push   0x1b5
c0002e1d:	52                   	push   edx
c0002e1e:	e8 45 2b 00 00       	call   c0005968 <ff_oem2uni>
c0002e23:	83 c4 10             	add    esp,0x10
c0002e26:	66 85 c0             	test   ax,ax
c0002e29:	75 04                	jne    c0002e2f <get_fileinfo+0x126>
c0002e2b:	31 ff                	xor    edi,edi
c0002e2d:	eb 23                	jmp    c0002e52 <get_fileinfo+0x149>
c0002e2f:	b9 0c 00 00 00       	mov    ecx,0xc
c0002e34:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002e38:	29 f9                	sub    ecx,edi
c0002e3a:	0f b7 c0             	movzx  eax,ax
c0002e3d:	e8 57 ee ff ff       	call   c0001c99 <put_utf>
c0002e42:	84 c0                	test   al,al
c0002e44:	74 e5                	je     c0002e2b <get_fileinfo+0x122>
c0002e46:	0f b6 c0             	movzx  eax,al
c0002e49:	01 c7                	add    edi,eax
c0002e4b:	89 e9                	mov    ecx,ebp
c0002e4d:	e9 4a ff ff ff       	jmp    c0002d9c <get_fileinfo+0x93>
c0002e52:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0002e57:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0002e5b:	75 54                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002e5d:	85 ff                	test   edi,edi
c0002e5f:	75 0b                	jne    c0002e6c <get_fileinfo+0x163>
c0002e61:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0002e65:	ba 01 00 00 00       	mov    edx,0x1
c0002e6a:	eb 33                	jmp    c0002e9f <get_fileinfo+0x196>
c0002e6c:	b1 08                	mov    cl,0x8
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0002e76:	84 c0                	test   al,al
c0002e78:	74 25                	je     c0002e9f <get_fileinfo+0x196>
c0002e7a:	66 83 f8 2e          	cmp    ax,0x2e
c0002e7e:	74 16                	je     c0002e96 <get_fileinfo+0x18d>
c0002e80:	8d 78 bf             	lea    edi,[eax-0x41]
c0002e83:	66 83 ff 19          	cmp    di,0x19
c0002e87:	77 0f                	ja     c0002e98 <get_fileinfo+0x18f>
c0002e89:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0002e8c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0002e8f:	74 07                	je     c0002e98 <get_fileinfo+0x18f>
c0002e91:	83 c0 20             	add    eax,0x20
c0002e94:	eb 02                	jmp    c0002e98 <get_fileinfo+0x18f>
c0002e96:	b1 10                	mov    cl,0x10
c0002e98:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0002e9c:	42                   	inc    edx
c0002e9d:	eb d1                	jmp    c0002e70 <get_fileinfo+0x167>
c0002e9f:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0002ea4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ea7:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0002eab:	75 04                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002ead:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0002eb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eb4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0002eb7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0002eba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ebd:	83 c0 1c             	add    eax,0x1c
c0002ec0:	e8 94 ec ff ff       	call   c0001b59 <ld_dword>
c0002ec5:	89 03                	mov    DWORD PTR [ebx],eax
c0002ec7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eca:	83 c0 16             	add    eax,0x16
c0002ecd:	e8 7a ec ff ff       	call   c0001b4c <ld_word>
c0002ed2:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0002ed6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ed9:	83 c0 18             	add    eax,0x18
c0002edc:	e8 6b ec ff ff       	call   c0001b4c <ld_word>
c0002ee1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0002ee5:	83 c4 1c             	add    esp,0x1c
c0002ee8:	5b                   	pop    ebx
c0002ee9:	5e                   	pop    esi
c0002eea:	5f                   	pop    edi
c0002eeb:	5d                   	pop    ebp
c0002eec:	c3                   	ret    

c0002eed <ld_clust.isra.0>:
c0002eed:	56                   	push   esi
c0002eee:	89 c6                	mov    esi,eax
c0002ef0:	53                   	push   ebx
c0002ef1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ef4:	89 d3                	mov    ebx,edx
c0002ef6:	e8 51 ec ff ff       	call   c0001b4c <ld_word>
c0002efb:	0f b7 c8             	movzx  ecx,ax
c0002efe:	89 f0                	mov    eax,esi
c0002f00:	3c 03                	cmp    al,0x3
c0002f02:	75 0d                	jne    c0002f11 <ld_clust.isra.0+0x24>
c0002f04:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f07:	e8 40 ec ff ff       	call   c0001b4c <ld_word>
c0002f0c:	c1 e0 10             	shl    eax,0x10
c0002f0f:	09 c1                	or     ecx,eax
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	5b                   	pop    ebx
c0002f14:	5e                   	pop    esi
c0002f15:	c3                   	ret    

c0002f16 <st_clust.isra.1>:
c0002f16:	56                   	push   esi
c0002f17:	89 c6                	mov    esi,eax
c0002f19:	53                   	push   ebx
c0002f1a:	89 d3                	mov    ebx,edx
c0002f1c:	0f b7 d1             	movzx  edx,cx
c0002f1f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0002f22:	e8 4a ec ff ff       	call   c0001b71 <st_word>
c0002f27:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002f2a:	75 0f                	jne    c0002f3b <st_clust.isra.1+0x25>
c0002f2c:	c1 e9 10             	shr    ecx,0x10
c0002f2f:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f32:	89 ca                	mov    edx,ecx
c0002f34:	5b                   	pop    ebx
c0002f35:	5e                   	pop    esi
c0002f36:	e9 36 ec ff ff       	jmp    c0001b71 <st_word>
c0002f3b:	5b                   	pop    ebx
c0002f3c:	5e                   	pop    esi
c0002f3d:	c3                   	ret    

c0002f3e <get_fat.isra.2>:
c0002f3e:	b9 01 00 00 00       	mov    ecx,0x1
c0002f43:	83 fa 01             	cmp    edx,0x1
c0002f46:	0f 86 f1 00 00 00    	jbe    c000303d <get_fat.isra.2+0xff>
c0002f4c:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0002f4f:	0f 83 e8 00 00 00    	jae    c000303d <get_fat.isra.2+0xff>
c0002f55:	55                   	push   ebp
c0002f56:	57                   	push   edi
c0002f57:	89 c7                	mov    edi,eax
c0002f59:	56                   	push   esi
c0002f5a:	89 d6                	mov    esi,edx
c0002f5c:	53                   	push   ebx
c0002f5d:	83 ec 0c             	sub    esp,0xc
c0002f60:	8a 00                	mov    al,BYTE PTR [eax]
c0002f62:	3c 02                	cmp    al,0x2
c0002f64:	74 78                	je     c0002fde <get_fat.isra.2+0xa0>
c0002f66:	3c 03                	cmp    al,0x3
c0002f68:	0f 84 97 00 00 00    	je     c0003005 <get_fat.isra.2+0xc7>
c0002f6e:	fe c8                	dec    al
c0002f70:	0f 85 bd 00 00 00    	jne    c0003033 <get_fat.isra.2+0xf5>
c0002f76:	89 d3                	mov    ebx,edx
c0002f78:	89 f8                	mov    eax,edi
c0002f7a:	d1 eb                	shr    ebx,1
c0002f7c:	01 d3                	add    ebx,edx
c0002f7e:	89 da                	mov    edx,ebx
c0002f80:	c1 ea 09             	shr    edx,0x9
c0002f83:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002f86:	e8 e7 f0 ff ff       	call   c0002072 <move_window>
c0002f8b:	85 c0                	test   eax,eax
c0002f8d:	74 08                	je     c0002f97 <get_fat.isra.2+0x59>
c0002f8f:	83 c9 ff             	or     ecx,0xffffffff
c0002f92:	e9 9c 00 00 00       	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002f97:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f9a:	89 f8                	mov    eax,edi
c0002f9c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002fa2:	89 ea                	mov    edx,ebp
c0002fa4:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0002fa8:	c1 ea 09             	shr    edx,0x9
c0002fab:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fae:	e8 bf f0 ff ff       	call   c0002072 <move_window>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	75 d8                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fb7:	0f b6 c3             	movzx  eax,bl
c0002fba:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002fc0:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0002fc5:	c1 e3 08             	shl    ebx,0x8
c0002fc8:	09 c3                	or     ebx,eax
c0002fca:	89 d9                	mov    ecx,ebx
c0002fcc:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002fd2:	83 e6 01             	and    esi,0x1
c0002fd5:	74 5c                	je     c0003033 <get_fat.isra.2+0xf5>
c0002fd7:	89 d9                	mov    ecx,ebx
c0002fd9:	c1 e9 04             	shr    ecx,0x4
c0002fdc:	eb 55                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002fde:	c1 ea 08             	shr    edx,0x8
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fe6:	e8 87 f0 ff ff       	call   c0002072 <move_window>
c0002feb:	85 c0                	test   eax,eax
c0002fed:	75 a0                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fef:	01 f6                	add    esi,esi
c0002ff1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ff7:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002ffb:	e8 4c eb ff ff       	call   c0001b4c <ld_word>
c0003000:	0f b7 c8             	movzx  ecx,ax
c0003003:	eb 2e                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0003005:	c1 ea 07             	shr    edx,0x7
c0003008:	89 f8                	mov    eax,edi
c000300a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000300d:	e8 60 f0 ff ff       	call   c0002072 <move_window>
c0003012:	85 c0                	test   eax,eax
c0003014:	0f 85 75 ff ff ff    	jne    c0002f8f <get_fat.isra.2+0x51>
c000301a:	c1 e6 02             	shl    esi,0x2
c000301d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003023:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003027:	e8 2d eb ff ff       	call   c0001b59 <ld_dword>
c000302c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003031:	89 c1                	mov    ecx,eax
c0003033:	83 c4 0c             	add    esp,0xc
c0003036:	89 c8                	mov    eax,ecx
c0003038:	5b                   	pop    ebx
c0003039:	5e                   	pop    esi
c000303a:	5f                   	pop    edi
c000303b:	5d                   	pop    ebp
c000303c:	c3                   	ret    
c000303d:	89 c8                	mov    eax,ecx
c000303f:	c3                   	ret    

c0003040 <dir_sdi>:
c0003040:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003046:	0f 87 b6 00 00 00    	ja     c0003102 <dir_sdi+0xc2>
c000304c:	55                   	push   ebp
c000304d:	57                   	push   edi
c000304e:	56                   	push   esi
c000304f:	53                   	push   ebx
c0003050:	89 d3                	mov    ebx,edx
c0003052:	83 ec 1c             	sub    esp,0x1c
c0003055:	f6 c2 1f             	test   dl,0x1f
c0003058:	74 0a                	je     c0003064 <dir_sdi+0x24>
c000305a:	b8 02 00 00 00       	mov    eax,0x2
c000305f:	e9 96 00 00 00       	jmp    c00030fa <dir_sdi+0xba>
c0003064:	89 c6                	mov    esi,eax
c0003066:	8b 38                	mov    edi,DWORD PTR [eax]
c0003068:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000306b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000306e:	85 c9                	test   ecx,ecx
c0003070:	75 23                	jne    c0003095 <dir_sdi+0x55>
c0003072:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003075:	76 07                	jbe    c000307e <dir_sdi+0x3e>
c0003077:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000307a:	85 c0                	test   eax,eax
c000307c:	75 15                	jne    c0003093 <dir_sdi+0x53>
c000307e:	89 da                	mov    edx,ebx
c0003080:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003084:	c1 ea 05             	shr    edx,0x5
c0003087:	39 c2                	cmp    edx,eax
c0003089:	73 cf                	jae    c000305a <dir_sdi+0x1a>
c000308b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000308e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003091:	eb 3d                	jmp    c00030d0 <dir_sdi+0x90>
c0003093:	89 c1                	mov    ecx,eax
c0003095:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003099:	c1 e5 09             	shl    ebp,0x9
c000309c:	89 ca                	mov    edx,ecx
c000309e:	39 eb                	cmp    ebx,ebp
c00030a0:	72 1c                	jb     c00030be <dir_sdi+0x7e>
c00030a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00030a4:	e8 95 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c00030a9:	89 c1                	mov    ecx,eax
c00030ab:	83 f8 ff             	cmp    eax,0xffffffff
c00030ae:	74 45                	je     c00030f5 <dir_sdi+0xb5>
c00030b0:	83 f8 01             	cmp    eax,0x1
c00030b3:	76 a5                	jbe    c000305a <dir_sdi+0x1a>
c00030b5:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00030b8:	76 a0                	jbe    c000305a <dir_sdi+0x1a>
c00030ba:	29 eb                	sub    ebx,ebp
c00030bc:	eb de                	jmp    c000309c <dir_sdi+0x5c>
c00030be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	e8 c9 ec ff ff       	call   c0001d92 <clst2sect>
c00030c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00030cd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030d0:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00030d3:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00030d6:	85 d2                	test   edx,edx
c00030d8:	74 80                	je     c000305a <dir_sdi+0x1a>
c00030da:	89 d8                	mov    eax,ebx
c00030dc:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00030e2:	c1 e8 09             	shr    eax,0x9
c00030e5:	01 d0                	add    eax,edx
c00030e7:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030ea:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00030ee:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00030f1:	31 c0                	xor    eax,eax
c00030f3:	eb 05                	jmp    c00030fa <dir_sdi+0xba>
c00030f5:	b8 01 00 00 00       	mov    eax,0x1
c00030fa:	83 c4 1c             	add    esp,0x1c
c00030fd:	5b                   	pop    ebx
c00030fe:	5e                   	pop    esi
c00030ff:	5f                   	pop    edi
c0003100:	5d                   	pop    ebp
c0003101:	c3                   	ret    
c0003102:	b8 02 00 00 00       	mov    eax,0x2
c0003107:	c3                   	ret    

c0003108 <create_chain>:
c0003108:	55                   	push   ebp
c0003109:	89 c5                	mov    ebp,eax
c000310b:	57                   	push   edi
c000310c:	89 d7                	mov    edi,edx
c000310e:	56                   	push   esi
c000310f:	53                   	push   ebx
c0003110:	83 ec 1c             	sub    esp,0x1c
c0003113:	85 d2                	test   edx,edx
c0003115:	8b 30                	mov    esi,DWORD PTR [eax]
c0003117:	75 0e                	jne    c0003127 <create_chain+0x1f>
c0003119:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000311c:	85 c9                	test   ecx,ecx
c000311e:	74 34                	je     c0003154 <create_chain+0x4c>
c0003120:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003123:	77 34                	ja     c0003159 <create_chain+0x51>
c0003125:	eb 2d                	jmp    c0003154 <create_chain+0x4c>
c0003127:	89 f0                	mov    eax,esi
c0003129:	e8 10 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c000312e:	89 c3                	mov    ebx,eax
c0003130:	83 f8 01             	cmp    eax,0x1
c0003133:	77 0a                	ja     c000313f <create_chain+0x37>
c0003135:	bb 01 00 00 00       	mov    ebx,0x1
c000313a:	e9 f9 00 00 00       	jmp    c0003238 <create_chain+0x130>
c000313f:	83 f8 ff             	cmp    eax,0xffffffff
c0003142:	0f 84 ed 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003148:	89 f9                	mov    ecx,edi
c000314a:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000314d:	76 0a                	jbe    c0003159 <create_chain+0x51>
c000314f:	e9 e4 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003154:	b9 01 00 00 00       	mov    ecx,0x1
c0003159:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000315d:	75 07                	jne    c0003166 <create_chain+0x5e>
c000315f:	31 db                	xor    ebx,ebx
c0003161:	e9 d2 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003166:	39 f9                	cmp    ecx,edi
c0003168:	75 46                	jne    c00031b0 <create_chain+0xa8>
c000316a:	8d 59 01             	lea    ebx,[ecx+0x1]
c000316d:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003170:	77 05                	ja     c0003177 <create_chain+0x6f>
c0003172:	bb 02 00 00 00       	mov    ebx,0x2
c0003177:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000317b:	89 da                	mov    edx,ebx
c000317d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003180:	e8 b9 fd ff ff       	call   c0002f3e <get_fat.isra.2>
c0003185:	83 f8 01             	cmp    eax,0x1
c0003188:	74 ab                	je     c0003135 <create_chain+0x2d>
c000318a:	83 f8 ff             	cmp    eax,0xffffffff
c000318d:	0f 84 a2 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003193:	85 c0                	test   eax,eax
c0003195:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003199:	74 11                	je     c00031ac <create_chain+0xa4>
c000319b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000319e:	83 f8 01             	cmp    eax,0x1
c00031a1:	76 0d                	jbe    c00031b0 <create_chain+0xa8>
c00031a3:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00031a6:	73 08                	jae    c00031b0 <create_chain+0xa8>
c00031a8:	89 c1                	mov    ecx,eax
c00031aa:	eb 04                	jmp    c00031b0 <create_chain+0xa8>
c00031ac:	85 db                	test   ebx,ebx
c00031ae:	75 3d                	jne    c00031ed <create_chain+0xe5>
c00031b0:	89 cb                	mov    ebx,ecx
c00031b2:	43                   	inc    ebx
c00031b3:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00031b6:	77 0a                	ja     c00031c2 <create_chain+0xba>
c00031b8:	83 f9 01             	cmp    ecx,0x1
c00031bb:	76 a2                	jbe    c000315f <create_chain+0x57>
c00031bd:	bb 02 00 00 00       	mov    ebx,0x2
c00031c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00031c6:	89 da                	mov    edx,ebx
c00031c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00031cb:	e8 6e fd ff ff       	call   c0002f3e <get_fat.isra.2>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 19                	je     c00031ed <create_chain+0xe5>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	0f 84 58 ff ff ff    	je     c0003135 <create_chain+0x2d>
c00031dd:	40                   	inc    eax
c00031de:	74 55                	je     c0003235 <create_chain+0x12d>
c00031e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00031e4:	39 cb                	cmp    ebx,ecx
c00031e6:	75 ca                	jne    c00031b2 <create_chain+0xaa>
c00031e8:	e9 72 ff ff ff       	jmp    c000315f <create_chain+0x57>
c00031ed:	83 c9 ff             	or     ecx,0xffffffff
c00031f0:	89 da                	mov    edx,ebx
c00031f2:	89 f0                	mov    eax,esi
c00031f4:	e8 cf f2 ff ff       	call   c00024c8 <put_fat>
c00031f9:	85 c0                	test   eax,eax
c00031fb:	75 31                	jne    c000322e <create_chain+0x126>
c00031fd:	85 ff                	test   edi,edi
c00031ff:	75 16                	jne    c0003217 <create_chain+0x10f>
c0003201:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003204:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0003207:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000320a:	8d 57 fe             	lea    edx,[edi-0x2]
c000320d:	39 d0                	cmp    eax,edx
c000320f:	77 17                	ja     c0003228 <create_chain+0x120>
c0003211:	48                   	dec    eax
c0003212:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003215:	eb 11                	jmp    c0003228 <create_chain+0x120>
c0003217:	89 d9                	mov    ecx,ebx
c0003219:	89 fa                	mov    edx,edi
c000321b:	89 f0                	mov    eax,esi
c000321d:	e8 a6 f2 ff ff       	call   c00024c8 <put_fat>
c0003222:	85 c0                	test   eax,eax
c0003224:	74 db                	je     c0003201 <create_chain+0xf9>
c0003226:	eb 06                	jmp    c000322e <create_chain+0x126>
c0003228:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000322c:	eb 0a                	jmp    c0003238 <create_chain+0x130>
c000322e:	48                   	dec    eax
c000322f:	0f 85 00 ff ff ff    	jne    c0003135 <create_chain+0x2d>
c0003235:	83 cb ff             	or     ebx,0xffffffff
c0003238:	83 c4 1c             	add    esp,0x1c
c000323b:	89 d8                	mov    eax,ebx
c000323d:	5b                   	pop    ebx
c000323e:	5e                   	pop    esi
c000323f:	5f                   	pop    edi
c0003240:	5d                   	pop    ebp
c0003241:	c3                   	ret    

c0003242 <remove_chain>:
c0003242:	55                   	push   ebp
c0003243:	57                   	push   edi
c0003244:	56                   	push   esi
c0003245:	89 d6                	mov    esi,edx
c0003247:	53                   	push   ebx
c0003248:	83 ec 0c             	sub    esp,0xc
c000324b:	83 fa 01             	cmp    edx,0x1
c000324e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003250:	76 65                	jbe    c00032b7 <remove_chain+0x75>
c0003252:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003255:	76 60                	jbe    c00032b7 <remove_chain+0x75>
c0003257:	89 c5                	mov    ebp,eax
c0003259:	89 ca                	mov    edx,ecx
c000325b:	85 c9                	test   ecx,ecx
c000325d:	74 0e                	je     c000326d <remove_chain+0x2b>
c000325f:	83 c9 ff             	or     ecx,0xffffffff
c0003262:	89 d8                	mov    eax,ebx
c0003264:	e8 5f f2 ff ff       	call   c00024c8 <put_fat>
c0003269:	85 c0                	test   eax,eax
c000326b:	75 56                	jne    c00032c3 <remove_chain+0x81>
c000326d:	89 f2                	mov    edx,esi
c000326f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003272:	e8 c7 fc ff ff       	call   c0002f3e <get_fat.isra.2>
c0003277:	89 c7                	mov    edi,eax
c0003279:	85 c0                	test   eax,eax
c000327b:	75 04                	jne    c0003281 <remove_chain+0x3f>
c000327d:	31 c0                	xor    eax,eax
c000327f:	eb 42                	jmp    c00032c3 <remove_chain+0x81>
c0003281:	83 f8 01             	cmp    eax,0x1
c0003284:	74 31                	je     c00032b7 <remove_chain+0x75>
c0003286:	83 f8 ff             	cmp    eax,0xffffffff
c0003289:	74 33                	je     c00032be <remove_chain+0x7c>
c000328b:	31 c9                	xor    ecx,ecx
c000328d:	89 f2                	mov    edx,esi
c000328f:	89 d8                	mov    eax,ebx
c0003291:	e8 32 f2 ff ff       	call   c00024c8 <put_fat>
c0003296:	85 c0                	test   eax,eax
c0003298:	75 29                	jne    c00032c3 <remove_chain+0x81>
c000329a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000329d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00032a0:	8d 4a fe             	lea    ecx,[edx-0x2]
c00032a3:	39 c8                	cmp    eax,ecx
c00032a5:	73 08                	jae    c00032af <remove_chain+0x6d>
c00032a7:	40                   	inc    eax
c00032a8:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00032af:	89 fe                	mov    esi,edi
c00032b1:	39 fa                	cmp    edx,edi
c00032b3:	77 b8                	ja     c000326d <remove_chain+0x2b>
c00032b5:	eb c6                	jmp    c000327d <remove_chain+0x3b>
c00032b7:	b8 02 00 00 00       	mov    eax,0x2
c00032bc:	eb 05                	jmp    c00032c3 <remove_chain+0x81>
c00032be:	b8 01 00 00 00       	mov    eax,0x1
c00032c3:	83 c4 0c             	add    esp,0xc
c00032c6:	5b                   	pop    ebx
c00032c7:	5e                   	pop    esi
c00032c8:	5f                   	pop    edi
c00032c9:	5d                   	pop    ebp
c00032ca:	c3                   	ret    

c00032cb <dir_next>:
c00032cb:	55                   	push   ebp
c00032cc:	57                   	push   edi
c00032cd:	56                   	push   esi
c00032ce:	53                   	push   ebx
c00032cf:	83 ec 1c             	sub    esp,0x1c
c00032d2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00032d5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00032d7:	83 c7 20             	add    edi,0x20
c00032da:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00032e0:	76 07                	jbe    c00032e9 <dir_next+0x1e>
c00032e2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00032e9:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00032ec:	b9 04 00 00 00       	mov    ecx,0x4
c00032f1:	85 f6                	test   esi,esi
c00032f3:	0f 84 cd 00 00 00    	je     c00033c6 <dir_next+0xfb>
c00032f9:	89 c3                	mov    ebx,eax
c00032fb:	89 d1                	mov    ecx,edx
c00032fd:	89 f8                	mov    eax,edi
c00032ff:	25 ff 01 00 00       	and    eax,0x1ff
c0003304:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003308:	0f 85 a8 00 00 00    	jne    c00033b6 <dir_next+0xeb>
c000330e:	46                   	inc    esi
c000330f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003312:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003315:	85 d2                	test   edx,edx
c0003317:	75 22                	jne    c000333b <dir_next+0x70>
c0003319:	89 fa                	mov    edx,edi
c000331b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000331f:	c1 ea 05             	shr    edx,0x5
c0003322:	39 c2                	cmp    edx,eax
c0003324:	0f 82 8c 00 00 00    	jb     c00033b6 <dir_next+0xeb>
c000332a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003331:	b9 04 00 00 00       	mov    ecx,0x4
c0003336:	e9 8b 00 00 00       	jmp    c00033c6 <dir_next+0xfb>
c000333b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000333f:	89 fe                	mov    esi,edi
c0003341:	48                   	dec    eax
c0003342:	c1 ee 09             	shr    esi,0x9
c0003345:	85 f0                	test   eax,esi
c0003347:	75 6d                	jne    c00033b6 <dir_next+0xeb>
c0003349:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334d:	89 e8                	mov    eax,ebp
c000334f:	e8 ea fb ff ff       	call   c0002f3e <get_fat.isra.2>
c0003354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003358:	89 c6                	mov    esi,eax
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	77 07                	ja     c0003366 <dir_next+0x9b>
c000335f:	b9 02 00 00 00       	mov    ecx,0x2
c0003364:	eb 60                	jmp    c00033c6 <dir_next+0xfb>
c0003366:	83 f8 ff             	cmp    eax,0xffffffff
c0003369:	75 07                	jne    c0003372 <dir_next+0xa7>
c000336b:	b9 01 00 00 00       	mov    ecx,0x1
c0003370:	eb 54                	jmp    c00033c6 <dir_next+0xfb>
c0003372:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003375:	77 30                	ja     c00033a7 <dir_next+0xdc>
c0003377:	85 c9                	test   ecx,ecx
c0003379:	74 af                	je     c000332a <dir_next+0x5f>
c000337b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000337e:	89 d8                	mov    eax,ebx
c0003380:	e8 83 fd ff ff       	call   c0003108 <create_chain>
c0003385:	b9 07 00 00 00       	mov    ecx,0x7
c000338a:	89 c6                	mov    esi,eax
c000338c:	85 c0                	test   eax,eax
c000338e:	74 36                	je     c00033c6 <dir_next+0xfb>
c0003390:	83 f8 01             	cmp    eax,0x1
c0003393:	74 ca                	je     c000335f <dir_next+0x94>
c0003395:	83 f8 ff             	cmp    eax,0xffffffff
c0003398:	74 d1                	je     c000336b <dir_next+0xa0>
c000339a:	89 c2                	mov    edx,eax
c000339c:	89 e8                	mov    eax,ebp
c000339e:	e8 75 f2 ff ff       	call   c0002618 <dir_clear>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	75 c4                	jne    c000336b <dir_next+0xa0>
c00033a7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00033aa:	89 f2                	mov    edx,esi
c00033ac:	89 e8                	mov    eax,ebp
c00033ae:	e8 df e9 ff ff       	call   c0001d92 <clst2sect>
c00033b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00033b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00033ba:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00033bd:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00033c1:	31 c9                	xor    ecx,ecx
c00033c3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00033c6:	83 c4 1c             	add    esp,0x1c
c00033c9:	89 c8                	mov    eax,ecx
c00033cb:	5b                   	pop    ebx
c00033cc:	5e                   	pop    esi
c00033cd:	5f                   	pop    edi
c00033ce:	5d                   	pop    ebp
c00033cf:	c3                   	ret    

c00033d0 <dir_alloc>:
c00033d0:	55                   	push   ebp
c00033d1:	89 c5                	mov    ebp,eax
c00033d3:	57                   	push   edi
c00033d4:	89 d7                	mov    edi,edx
c00033d6:	56                   	push   esi
c00033d7:	31 d2                	xor    edx,edx
c00033d9:	53                   	push   ebx
c00033da:	83 ec 0c             	sub    esp,0xc
c00033dd:	8b 30                	mov    esi,DWORD PTR [eax]
c00033df:	e8 5c fc ff ff       	call   c0003040 <dir_sdi>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 37                	jne    c000341f <dir_alloc+0x4f>
c00033e8:	31 db                	xor    ebx,ebx
c00033ea:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00033ed:	89 f0                	mov    eax,esi
c00033ef:	e8 7e ec ff ff       	call   c0002072 <move_window>
c00033f4:	85 c0                	test   eax,eax
c00033f6:	75 27                	jne    c000341f <dir_alloc+0x4f>
c00033f8:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00033fb:	8a 12                	mov    dl,BYTE PTR [edx]
c00033fd:	84 d2                	test   dl,dl
c00033ff:	74 05                	je     c0003406 <dir_alloc+0x36>
c0003401:	80 fa e5             	cmp    dl,0xe5
c0003404:	75 07                	jne    c000340d <dir_alloc+0x3d>
c0003406:	43                   	inc    ebx
c0003407:	39 fb                	cmp    ebx,edi
c0003409:	75 04                	jne    c000340f <dir_alloc+0x3f>
c000340b:	eb 1c                	jmp    c0003429 <dir_alloc+0x59>
c000340d:	31 db                	xor    ebx,ebx
c000340f:	ba 01 00 00 00       	mov    edx,0x1
c0003414:	89 e8                	mov    eax,ebp
c0003416:	e8 b0 fe ff ff       	call   c00032cb <dir_next>
c000341b:	85 c0                	test   eax,eax
c000341d:	74 cb                	je     c00033ea <dir_alloc+0x1a>
c000341f:	83 f8 04             	cmp    eax,0x4
c0003422:	75 05                	jne    c0003429 <dir_alloc+0x59>
c0003424:	b8 07 00 00 00       	mov    eax,0x7
c0003429:	83 c4 0c             	add    esp,0xc
c000342c:	5b                   	pop    ebx
c000342d:	5e                   	pop    esi
c000342e:	5f                   	pop    edi
c000342f:	5d                   	pop    ebp
c0003430:	c3                   	ret    

c0003431 <dir_read>:
c0003431:	55                   	push   ebp
c0003432:	57                   	push   edi
c0003433:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003438:	56                   	push   esi
c0003439:	be 04 00 00 00       	mov    esi,0x4
c000343e:	53                   	push   ebx
c000343f:	89 c3                	mov    ebx,eax
c0003441:	83 ec 1c             	sub    esp,0x1c
c0003444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003448:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000344f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003452:	85 d2                	test   edx,edx
c0003454:	0f 84 d8 00 00 00    	je     c0003532 <dir_read+0x101>
c000345a:	89 e8                	mov    eax,ebp
c000345c:	e8 11 ec ff ff       	call   c0002072 <move_window>
c0003461:	89 c6                	mov    esi,eax
c0003463:	85 c0                	test   eax,eax
c0003465:	0f 85 d2 00 00 00    	jne    c000353d <dir_read+0x10c>
c000346b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000346e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003470:	84 c9                	test   cl,cl
c0003472:	0f 84 c0 00 00 00    	je     c0003538 <dir_read+0x107>
c0003478:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000347b:	83 e0 3f             	and    eax,0x3f
c000347e:	80 f9 2e             	cmp    cl,0x2e
c0003481:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003485:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003488:	0f 84 8a 00 00 00    	je     c0003518 <dir_read+0xe7>
c000348e:	80 f9 e5             	cmp    cl,0xe5
c0003491:	0f 84 81 00 00 00    	je     c0003518 <dir_read+0xe7>
c0003497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000349b:	83 e0 1f             	and    eax,0x1f
c000349e:	83 f8 08             	cmp    eax,0x8
c00034a1:	0f 94 c0             	sete   al
c00034a4:	0f b6 c0             	movzx  eax,al
c00034a7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00034ab:	75 6b                	jne    c0003518 <dir_read+0xe7>
c00034ad:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00034b2:	75 44                	jne    c00034f8 <dir_read+0xc7>
c00034b4:	f6 c1 40             	test   cl,0x40
c00034b7:	74 12                	je     c00034cb <dir_read+0x9a>
c00034b9:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00034bc:	83 e1 bf             	and    ecx,0xffffffbf
c00034bf:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00034c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034c6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00034c9:	eb 06                	jmp    c00034d1 <dir_read+0xa0>
c00034cb:	89 f8                	mov    eax,edi
c00034cd:	38 c8                	cmp    al,cl
c00034cf:	75 47                	jne    c0003518 <dir_read+0xe7>
c00034d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00034d5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00034da:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00034dd:	75 3e                	jne    c000351d <dir_read+0xec>
c00034df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00034e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00034e6:	e8 c4 e8 ff ff       	call   c0001daf <pick_lfn>
c00034eb:	85 c0                	test   eax,eax
c00034ed:	74 2e                	je     c000351d <dir_read+0xec>
c00034ef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00034f3:	8d 79 ff             	lea    edi,[ecx-0x1]
c00034f6:	eb 25                	jmp    c000351d <dir_read+0xec>
c00034f8:	89 f8                	mov    eax,edi
c00034fa:	84 c0                	test   al,al
c00034fc:	75 11                	jne    c000350f <dir_read+0xde>
c00034fe:	89 d0                	mov    eax,edx
c0003500:	e8 64 ea ff ff       	call   c0001f69 <sum_sfn>
c0003505:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003509:	75 04                	jne    c000350f <dir_read+0xde>
c000350b:	31 f6                	xor    esi,esi
c000350d:	eb 35                	jmp    c0003544 <dir_read+0x113>
c000350f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003516:	eb 2c                	jmp    c0003544 <dir_read+0x113>
c0003518:	bf ff ff ff ff       	mov    edi,0xffffffff
c000351d:	31 d2                	xor    edx,edx
c000351f:	89 d8                	mov    eax,ebx
c0003521:	e8 a5 fd ff ff       	call   c00032cb <dir_next>
c0003526:	89 c6                	mov    esi,eax
c0003528:	85 c0                	test   eax,eax
c000352a:	0f 84 1f ff ff ff    	je     c000344f <dir_read+0x1e>
c0003530:	eb 0b                	jmp    c000353d <dir_read+0x10c>
c0003532:	85 f6                	test   esi,esi
c0003534:	74 d5                	je     c000350b <dir_read+0xda>
c0003536:	eb 05                	jmp    c000353d <dir_read+0x10c>
c0003538:	be 04 00 00 00       	mov    esi,0x4
c000353d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003544:	83 c4 1c             	add    esp,0x1c
c0003547:	89 f0                	mov    eax,esi
c0003549:	5b                   	pop    ebx
c000354a:	5e                   	pop    esi
c000354b:	5f                   	pop    edi
c000354c:	5d                   	pop    ebp
c000354d:	c3                   	ret    

c000354e <dir_remove>:
c000354e:	57                   	push   edi
c000354f:	56                   	push   esi
c0003550:	53                   	push   ebx
c0003551:	89 c3                	mov    ebx,eax
c0003553:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003556:	8b 30                	mov    esi,DWORD PTR [eax]
c0003558:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000355b:	83 fa ff             	cmp    edx,0xffffffff
c000355e:	74 09                	je     c0003569 <dir_remove+0x1b>
c0003560:	e8 db fa ff ff       	call   c0003040 <dir_sdi>
c0003565:	85 c0                	test   eax,eax
c0003567:	75 34                	jne    c000359d <dir_remove+0x4f>
c0003569:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000356c:	89 f0                	mov    eax,esi
c000356e:	e8 ff ea ff ff       	call   c0002072 <move_window>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 1c                	jne    c0003593 <dir_remove+0x45>
c0003577:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000357a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000357d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003581:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003584:	73 17                	jae    c000359d <dir_remove+0x4f>
c0003586:	31 d2                	xor    edx,edx
c0003588:	89 d8                	mov    eax,ebx
c000358a:	e8 3c fd ff ff       	call   c00032cb <dir_next>
c000358f:	85 c0                	test   eax,eax
c0003591:	74 d6                	je     c0003569 <dir_remove+0x1b>
c0003593:	83 f8 04             	cmp    eax,0x4
c0003596:	75 05                	jne    c000359d <dir_remove+0x4f>
c0003598:	b8 02 00 00 00       	mov    eax,0x2
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	c3                   	ret    

c00035a1 <dir_find>:
c00035a1:	55                   	push   ebp
c00035a2:	31 d2                	xor    edx,edx
c00035a4:	57                   	push   edi
c00035a5:	56                   	push   esi
c00035a6:	53                   	push   ebx
c00035a7:	89 c3                	mov    ebx,eax
c00035a9:	83 ec 1c             	sub    esp,0x1c
c00035ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00035ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035b2:	89 d8                	mov    eax,ebx
c00035b4:	e8 87 fa ff ff       	call   c0003040 <dir_sdi>
c00035b9:	89 c6                	mov    esi,eax
c00035bb:	85 c0                	test   eax,eax
c00035bd:	0f 85 02 01 00 00    	jne    c00036c5 <dir_find+0x124>
c00035c3:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00035ca:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00035cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035db:	e8 92 ea ff ff       	call   c0002072 <move_window>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	85 c0                	test   eax,eax
c00035e4:	0f 85 db 00 00 00    	jne    c00036c5 <dir_find+0x124>
c00035ea:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00035ed:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00035f0:	84 c9                	test   cl,cl
c00035f2:	0f 84 c8 00 00 00    	je     c00036c0 <dir_find+0x11f>
c00035f8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00035fb:	88 d0                	mov    al,dl
c00035fd:	83 e0 3f             	and    eax,0x3f
c0003600:	80 f9 e5             	cmp    cl,0xe5
c0003603:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003606:	0f 84 93 00 00 00    	je     c000369f <dir_find+0xfe>
c000360c:	80 e2 08             	and    dl,0x8
c000360f:	74 0a                	je     c000361b <dir_find+0x7a>
c0003611:	3c 0f                	cmp    al,0xf
c0003613:	0f 85 86 00 00 00    	jne    c000369f <dir_find+0xfe>
c0003619:	eb 04                	jmp    c000361f <dir_find+0x7e>
c000361b:	3c 0f                	cmp    al,0xf
c000361d:	75 54                	jne    c0003673 <dir_find+0xd2>
c000361f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003623:	0f 85 82 00 00 00    	jne    c00036ab <dir_find+0x10a>
c0003629:	f6 c1 40             	test   cl,0x40
c000362c:	74 12                	je     c0003640 <dir_find+0x9f>
c000362e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003631:	83 e1 bf             	and    ecx,0xffffffbf
c0003634:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003638:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000363b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000363e:	eb 06                	jmp    c0003646 <dir_find+0xa5>
c0003640:	89 f8                	mov    eax,edi
c0003642:	38 c8                	cmp    al,cl
c0003644:	75 60                	jne    c00036a6 <dir_find+0x105>
c0003646:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000364a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000364f:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003652:	75 57                	jne    c00036ab <dir_find+0x10a>
c0003654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003658:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000365c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000365f:	89 ea                	mov    edx,ebp
c0003661:	e8 89 f3 ff ff       	call   c00029ef <cmp_lfn>
c0003666:	85 c0                	test   eax,eax
c0003668:	74 41                	je     c00036ab <dir_find+0x10a>
c000366a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000366e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003671:	eb 38                	jmp    c00036ab <dir_find+0x10a>
c0003673:	89 f8                	mov    eax,edi
c0003675:	84 c0                	test   al,al
c0003677:	75 0d                	jne    c0003686 <dir_find+0xe5>
c0003679:	89 e8                	mov    eax,ebp
c000367b:	e8 e9 e8 ff ff       	call   c0001f69 <sum_sfn>
c0003680:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003684:	74 3f                	je     c00036c5 <dir_find+0x124>
c0003686:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000368a:	75 13                	jne    c000369f <dir_find+0xfe>
c000368c:	8d 53 20             	lea    edx,[ebx+0x20]
c000368f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003694:	89 e8                	mov    eax,ebp
c0003696:	e8 fd e4 ff ff       	call   c0001b98 <mem_cmp>
c000369b:	85 c0                	test   eax,eax
c000369d:	74 26                	je     c00036c5 <dir_find+0x124>
c000369f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ab:	31 d2                	xor    edx,edx
c00036ad:	89 d8                	mov    eax,ebx
c00036af:	e8 17 fc ff ff       	call   c00032cb <dir_next>
c00036b4:	89 c6                	mov    esi,eax
c00036b6:	85 c0                	test   eax,eax
c00036b8:	0f 84 16 ff ff ff    	je     c00035d4 <dir_find+0x33>
c00036be:	eb 05                	jmp    c00036c5 <dir_find+0x124>
c00036c0:	be 04 00 00 00       	mov    esi,0x4
c00036c5:	83 c4 1c             	add    esp,0x1c
c00036c8:	89 f0                	mov    eax,esi
c00036ca:	5b                   	pop    ebx
c00036cb:	5e                   	pop    esi
c00036cc:	5f                   	pop    edi
c00036cd:	5d                   	pop    ebp
c00036ce:	c3                   	ret    

c00036cf <follow_path>:
c00036cf:	56                   	push   esi
c00036d0:	53                   	push   ebx
c00036d1:	89 c3                	mov    ebx,eax
c00036d3:	83 ec 14             	sub    esp,0x14
c00036d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036da:	8b 30                	mov    esi,DWORD PTR [eax]
c00036dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00036e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00036e2:	80 fa 5c             	cmp    dl,0x5c
c00036e5:	75 07                	jne    c00036ee <follow_path+0x1f>
c00036e7:	40                   	inc    eax
c00036e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00036ec:	eb ee                	jmp    c00036dc <follow_path+0xd>
c00036ee:	80 fa 2f             	cmp    dl,0x2f
c00036f1:	74 f4                	je     c00036e7 <follow_path+0x18>
c00036f3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00036fa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00036fd:	77 3e                	ja     c000373d <follow_path+0x6e>
c00036ff:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003703:	31 d2                	xor    edx,edx
c0003705:	89 d8                	mov    eax,ebx
c0003707:	e8 34 f9 ff ff       	call   c0003040 <dir_sdi>
c000370c:	eb 4f                	jmp    c000375d <follow_path+0x8e>
c000370e:	89 d8                	mov    eax,ebx
c0003710:	e8 8c fe ff ff       	call   c00035a1 <dir_find>
c0003715:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003718:	85 c0                	test   eax,eax
c000371a:	75 32                	jne    c000374e <follow_path+0x7f>
c000371c:	80 e2 04             	and    dl,0x4
c000371f:	75 3c                	jne    c000375d <follow_path+0x8e>
c0003721:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003725:	74 31                	je     c0003758 <follow_path+0x89>
c0003727:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000372a:	25 ff 01 00 00       	and    eax,0x1ff
c000372f:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003733:	8a 06                	mov    al,BYTE PTR [esi]
c0003735:	e8 b3 f7 ff ff       	call   c0002eed <ld_clust.isra.0>
c000373a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000373d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003741:	89 d8                	mov    eax,ebx
c0003743:	e8 cb ef ff ff       	call   c0002713 <create_name>
c0003748:	85 c0                	test   eax,eax
c000374a:	74 c2                	je     c000370e <follow_path+0x3f>
c000374c:	eb 0f                	jmp    c000375d <follow_path+0x8e>
c000374e:	83 f8 04             	cmp    eax,0x4
c0003751:	75 0a                	jne    c000375d <follow_path+0x8e>
c0003753:	80 e2 04             	and    dl,0x4
c0003756:	75 05                	jne    c000375d <follow_path+0x8e>
c0003758:	b8 05 00 00 00       	mov    eax,0x5
c000375d:	83 c4 14             	add    esp,0x14
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	c3                   	ret    

c0003763 <dir_register>:
c0003763:	55                   	push   ebp
c0003764:	57                   	push   edi
c0003765:	56                   	push   esi
c0003766:	be 06 00 00 00       	mov    esi,0x6
c000376b:	53                   	push   ebx
c000376c:	83 ec 2c             	sub    esp,0x2c
c000376f:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003773:	0f 85 65 01 00 00    	jne    c00038de <dir_register+0x17b>
c0003779:	8b 38                	mov    edi,DWORD PTR [eax]
c000377b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003783:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003786:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000378a:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c000378f:	74 06                	je     c0003797 <dir_register+0x34>
c0003791:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003795:	eb ef                	jmp    c0003786 <dir_register+0x23>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	b9 0c 00 00 00       	mov    ecx,0xc
c000379e:	8d 40 20             	lea    eax,[eax+0x20]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 c2                	mov    edx,eax
c00037a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00037ab:	e8 c8 e3 ff ff       	call   c0001b78 <mem_cpy>
c00037b0:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00037b5:	74 48                	je     c00037ff <dir_register+0x9c>
c00037b7:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00037bb:	bd 01 00 00 00       	mov    ebp,0x1
c00037c0:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00037c3:	55                   	push   ebp
c00037c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00037c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00037cc:	e8 dc e6 ff ff       	call   c0001ead <gen_numname>
c00037d1:	58                   	pop    eax
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 c8 fd ff ff       	call   c00035a1 <dir_find>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 10                	jne    c00037ef <dir_register+0x8c>
c00037df:	45                   	inc    ebp
c00037e0:	83 fd 64             	cmp    ebp,0x64
c00037e3:	75 db                	jne    c00037c0 <dir_register+0x5d>
c00037e5:	be 07 00 00 00       	mov    esi,0x7
c00037ea:	e9 ef 00 00 00       	jmp    c00038de <dir_register+0x17b>
c00037ef:	83 f8 04             	cmp    eax,0x4
c00037f2:	0f 85 e6 00 00 00    	jne    c00038de <dir_register+0x17b>
c00037f8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00037fc:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00037ff:	bd 01 00 00 00       	mov    ebp,0x1
c0003804:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003809:	74 13                	je     c000381e <dir_register+0xbb>
c000380b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000380f:	b9 0d 00 00 00       	mov    ecx,0xd
c0003814:	83 c0 0c             	add    eax,0xc
c0003817:	31 d2                	xor    edx,edx
c0003819:	f7 f1                	div    ecx
c000381b:	8d 68 01             	lea    ebp,[eax+0x1]
c000381e:	89 ea                	mov    edx,ebp
c0003820:	89 d8                	mov    eax,ebx
c0003822:	e8 a9 fb ff ff       	call   c00033d0 <dir_alloc>
c0003827:	89 c6                	mov    esi,eax
c0003829:	85 c0                	test   eax,eax
c000382b:	0f 85 ad 00 00 00    	jne    c00038de <dir_register+0x17b>
c0003831:	4d                   	dec    ebp
c0003832:	74 6a                	je     c000389e <dir_register+0x13b>
c0003834:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003837:	89 e8                	mov    eax,ebp
c0003839:	c1 e0 05             	shl    eax,0x5
c000383c:	29 c2                	sub    edx,eax
c000383e:	89 d8                	mov    eax,ebx
c0003840:	e8 fb f7 ff ff       	call   c0003040 <dir_sdi>
c0003845:	89 c6                	mov    esi,eax
c0003847:	85 c0                	test   eax,eax
c0003849:	0f 85 8f 00 00 00    	jne    c00038de <dir_register+0x17b>
c000384f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003853:	e8 11 e7 ff ff       	call   c0001f69 <sum_sfn>
c0003858:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000385c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385f:	89 f8                	mov    eax,edi
c0003861:	e8 0c e8 ff ff       	call   c0002072 <move_window>
c0003866:	89 c6                	mov    esi,eax
c0003868:	85 c0                	test   eax,eax
c000386a:	75 72                	jne    c00038de <dir_register+0x17b>
c000386c:	83 ec 0c             	sub    esp,0xc
c000386f:	89 e8                	mov    eax,ebp
c0003871:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003876:	0f b6 c8             	movzx  ecx,al
c0003879:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000387c:	52                   	push   edx
c000387d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003880:	e8 a4 e5 ff ff       	call   c0001e29 <put_lfn>
c0003885:	31 d2                	xor    edx,edx
c0003887:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 39 fa ff ff       	call   c00032cb <dir_next>
c0003892:	83 c4 10             	add    esp,0x10
c0003895:	89 c6                	mov    esi,eax
c0003897:	85 c0                	test   eax,eax
c0003899:	75 43                	jne    c00038de <dir_register+0x17b>
c000389b:	4d                   	dec    ebp
c000389c:	75 be                	jne    c000385c <dir_register+0xf9>
c000389e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038a1:	89 f8                	mov    eax,edi
c00038a3:	e8 ca e7 ff ff       	call   c0002072 <move_window>
c00038a8:	89 c6                	mov    esi,eax
c00038aa:	85 c0                	test   eax,eax
c00038ac:	75 30                	jne    c00038de <dir_register+0x17b>
c00038ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038b1:	b9 20 00 00 00       	mov    ecx,0x20
c00038b6:	31 d2                	xor    edx,edx
c00038b8:	e8 d0 e2 ff ff       	call   c0001b8d <mem_set>
c00038bd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00038c4:	b9 0b 00 00 00       	mov    ecx,0xb
c00038c9:	e8 aa e2 ff ff       	call   c0001b78 <mem_cpy>
c00038ce:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c00038d1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038d4:	83 e0 18             	and    eax,0x18
c00038d7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00038da:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00038de:	83 c4 2c             	add    esp,0x2c
c00038e1:	89 f0                	mov    eax,esi
c00038e3:	5b                   	pop    ebx
c00038e4:	5e                   	pop    esi
c00038e5:	5f                   	pop    edi
c00038e6:	5d                   	pop    ebp
c00038e7:	c3                   	ret    

c00038e8 <f_mount>:
c00038e8:	53                   	push   ebx
c00038e9:	83 ec 18             	sub    esp,0x18
c00038ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00038f0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00038f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00038fc:	e8 7a e6 ff ff       	call   c0001f7b <get_ldnumber>
c0003901:	89 c2                	mov    edx,eax
c0003903:	b8 0b 00 00 00       	mov    eax,0xb
c0003908:	85 d2                	test   edx,edx
c000390a:	78 39                	js     c0003945 <f_mount+0x5d>
c000390c:	8b 04 95 20 f4 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0be0]
c0003913:	85 c0                	test   eax,eax
c0003915:	74 03                	je     c000391a <f_mount+0x32>
c0003917:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000391a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000391e:	85 c0                	test   eax,eax
c0003920:	74 03                	je     c0003925 <f_mount+0x3d>
c0003922:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003929:	89 04 95 20 f4 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0be0],eax
c0003930:	31 c0                	xor    eax,eax
c0003932:	84 db                	test   bl,bl
c0003934:	74 0f                	je     c0003945 <f_mount+0x5d>
c0003936:	31 c9                	xor    ecx,ecx
c0003938:	8d 54 24 20          	lea    edx,[esp+0x20]
c000393c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003940:	e8 80 e8 ff ff       	call   c00021c5 <mount_volume>
c0003945:	83 c4 18             	add    esp,0x18
c0003948:	5b                   	pop    ebx
c0003949:	c3                   	ret    

c000394a <f_open>:
c000394a:	55                   	push   ebp
c000394b:	b8 09 00 00 00       	mov    eax,0x9
c0003950:	57                   	push   edi
c0003951:	56                   	push   esi
c0003952:	53                   	push   ebx
c0003953:	83 ec 5c             	sub    esp,0x5c
c0003956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000395a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000395e:	85 db                	test   ebx,ebx
c0003960:	0f 84 a7 02 00 00    	je     c0003c0d <f_open+0x2c3>
c0003966:	89 fe                	mov    esi,edi
c0003968:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000396c:	83 e6 3f             	and    esi,0x3f
c000396f:	89 f0                	mov    eax,esi
c0003971:	0f b6 c8             	movzx  ecx,al
c0003974:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003978:	e8 48 e8 ff ff       	call   c00021c5 <mount_volume>
c000397d:	85 c0                	test   eax,eax
c000397f:	0f 85 82 02 00 00    	jne    c0003c07 <f_open+0x2bd>
c0003985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003989:	83 ec 0c             	sub    esp,0xc
c000398c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003990:	68 00 02 00 00       	push   0x200
c0003995:	e8 fe 1e 00 00       	call   c0005898 <ff_memalloc>
c000399a:	83 c4 10             	add    esp,0x10
c000399d:	89 c5                	mov    ebp,eax
c000399f:	b8 11 00 00 00       	mov    eax,0x11
c00039a4:	85 ed                	test   ebp,ebp
c00039a6:	0f 84 61 02 00 00    	je     c0003c0d <f_open+0x2c3>
c00039ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00039b0:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00039b4:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c00039b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039bb:	e8 0f fd ff ff       	call   c00036cf <follow_path>
c00039c0:	85 c0                	test   eax,eax
c00039c2:	75 0c                	jne    c00039d0 <f_open+0x86>
c00039c4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00039c9:	79 05                	jns    c00039d0 <f_open+0x86>
c00039cb:	b8 06 00 00 00       	mov    eax,0x6
c00039d0:	f7 c7 1c 00 00 00    	test   edi,0x1c
c00039d6:	0f 84 de 00 00 00    	je     c0003aba <f_open+0x170>
c00039dc:	85 c0                	test   eax,eax
c00039de:	74 1e                	je     c00039fe <f_open+0xb4>
c00039e0:	83 f8 04             	cmp    eax,0x4
c00039e3:	0f 85 06 02 00 00    	jne    c0003bef <f_open+0x2a5>
c00039e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039ed:	83 ce 08             	or     esi,0x8
c00039f0:	e8 6e fd ff ff       	call   c0003763 <dir_register>
c00039f5:	85 c0                	test   eax,eax
c00039f7:	74 2f                	je     c0003a28 <f_open+0xde>
c00039f9:	e9 f1 01 00 00       	jmp    c0003bef <f_open+0x2a5>
c00039fe:	b8 07 00 00 00       	mov    eax,0x7
c0003a03:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003a08:	0f 85 e1 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a0e:	b8 08 00 00 00       	mov    eax,0x8
c0003a13:	f7 c7 04 00 00 00    	test   edi,0x4
c0003a19:	0f 85 d0 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a1f:	83 e7 08             	and    edi,0x8
c0003a22:	0f 84 bf 00 00 00    	je     c0003ae7 <f_open+0x19d>
c0003a28:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003a2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a30:	89 ca                	mov    edx,ecx
c0003a32:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003a36:	8a 00                	mov    al,BYTE PTR [eax]
c0003a38:	e8 b0 f4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003a3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a41:	89 c7                	mov    edi,eax
c0003a43:	ba 00 00 21 50       	mov    edx,0x50210000
c0003a48:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003a4b:	e8 25 e1 ff ff       	call   c0001b75 <st_dword>
c0003a50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a54:	31 c9                	xor    ecx,ecx
c0003a56:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003a5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003a62:	e8 af f4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0003a67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a6b:	31 d2                	xor    edx,edx
c0003a6d:	83 c0 1c             	add    eax,0x1c
c0003a70:	e8 00 e1 ff ff       	call   c0001b75 <st_dword>
c0003a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a79:	85 ff                	test   edi,edi
c0003a7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a7f:	74 66                	je     c0003ae7 <f_open+0x19d>
c0003a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a85:	31 c9                	xor    ecx,ecx
c0003a87:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003a8a:	89 fa                	mov    edx,edi
c0003a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a90:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003a94:	e8 a9 f7 ff ff       	call   c0003242 <remove_chain>
c0003a99:	85 c0                	test   eax,eax
c0003a9b:	0f 85 4e 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003aa1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003aa5:	4f                   	dec    edi
c0003aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003aaa:	e8 c3 e5 ff ff       	call   c0002072 <move_window>
c0003aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ab8:	eb 27                	jmp    c0003ae1 <f_open+0x197>
c0003aba:	85 c0                	test   eax,eax
c0003abc:	0f 85 2d 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ac2:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ac6:	b8 04 00 00 00       	mov    eax,0x4
c0003acb:	f6 c2 10             	test   dl,0x10
c0003ace:	0f 85 1b 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ad4:	83 e7 02             	and    edi,0x2
c0003ad7:	74 0e                	je     c0003ae7 <f_open+0x19d>
c0003ad9:	b8 07 00 00 00       	mov    eax,0x7
c0003ade:	80 e2 01             	and    dl,0x1
c0003ae1:	0f 85 08 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ae7:	f7 c6 08 00 00 00    	test   esi,0x8
c0003aed:	74 03                	je     c0003af2 <f_open+0x1a8>
c0003aef:	83 ce 40             	or     esi,0x40
c0003af2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003af6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003afa:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003afd:	89 fa                	mov    edx,edi
c0003aff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003b03:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003b06:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003b09:	8a 01                	mov    al,BYTE PTR [ecx]
c0003b0b:	e8 dd f3 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003b10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b13:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003b16:	e8 3e e0 ff ff       	call   c0001b59 <ld_dword>
c0003b1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003b22:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003b24:	31 d2                	xor    edx,edx
c0003b26:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003b2a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003b2e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003b32:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003b39:	89 f0                	mov    eax,esi
c0003b3b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003b42:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003b45:	b9 00 02 00 00       	mov    ecx,0x200
c0003b4a:	8d 43 28             	lea    eax,[ebx+0x28]
c0003b4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003b51:	e8 37 e0 ff ff       	call   c0001b8d <mem_set>
c0003b56:	83 e6 20             	and    esi,0x20
c0003b59:	75 07                	jne    c0003b62 <f_open+0x218>
c0003b5b:	31 c0                	xor    eax,eax
c0003b5d:	e9 8d 00 00 00       	jmp    c0003bef <f_open+0x2a5>
c0003b62:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003b65:	85 ff                	test   edi,edi
c0003b67:	74 f2                	je     c0003b5b <f_open+0x211>
c0003b69:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b70:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003b73:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003b77:	c1 e6 09             	shl    esi,0x9
c0003b7a:	39 fe                	cmp    esi,edi
c0003b7c:	73 1c                	jae    c0003b9a <f_open+0x250>
c0003b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003b80:	29 f7                	sub    edi,esi
c0003b82:	e8 b7 f3 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003b87:	89 c2                	mov    edx,eax
c0003b89:	83 f8 01             	cmp    eax,0x1
c0003b8c:	76 10                	jbe    c0003b9e <f_open+0x254>
c0003b8e:	83 f8 ff             	cmp    eax,0xffffffff
c0003b91:	75 e7                	jne    c0003b7a <f_open+0x230>
c0003b93:	b8 01 00 00 00       	mov    eax,0x1
c0003b98:	eb 09                	jmp    c0003ba3 <f_open+0x259>
c0003b9a:	31 c0                	xor    eax,eax
c0003b9c:	eb 05                	jmp    c0003ba3 <f_open+0x259>
c0003b9e:	b8 02 00 00 00       	mov    eax,0x2
c0003ba3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ba6:	85 c0                	test   eax,eax
c0003ba8:	75 45                	jne    c0003bef <f_open+0x2a5>
c0003baa:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003bb0:	74 a9                	je     c0003b5b <f_open+0x211>
c0003bb2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003bb6:	89 f0                	mov    eax,esi
c0003bb8:	e8 d5 e1 ff ff       	call   c0001d92 <clst2sect>
c0003bbd:	89 c2                	mov    edx,eax
c0003bbf:	b8 02 00 00 00       	mov    eax,0x2
c0003bc4:	85 d2                	test   edx,edx
c0003bc6:	74 27                	je     c0003bef <f_open+0x2a5>
c0003bc8:	89 f9                	mov    ecx,edi
c0003bca:	c1 e9 09             	shr    ecx,0x9
c0003bcd:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003bd0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003bd3:	6a 01                	push   0x1
c0003bd5:	50                   	push   eax
c0003bd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003bda:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003bde:	50                   	push   eax
c0003bdf:	e8 1d df ff ff       	call   c0001b01 <disk_read>
c0003be4:	83 c4 10             	add    esp,0x10
c0003be7:	85 c0                	test   eax,eax
c0003be9:	0f 95 c0             	setne  al
c0003bec:	0f b6 c0             	movzx  eax,al
c0003bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bf3:	83 ec 0c             	sub    esp,0xc
c0003bf6:	55                   	push   ebp
c0003bf7:	e8 b4 1c 00 00       	call   c00058b0 <ff_memfree>
c0003bfc:	83 c4 10             	add    esp,0x10
c0003bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c03:	85 c0                	test   eax,eax
c0003c05:	74 06                	je     c0003c0d <f_open+0x2c3>
c0003c07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003c0d:	83 c4 5c             	add    esp,0x5c
c0003c10:	5b                   	pop    ebx
c0003c11:	5e                   	pop    esi
c0003c12:	5f                   	pop    edi
c0003c13:	5d                   	pop    ebp
c0003c14:	c3                   	ret    

c0003c15 <f_read>:
c0003c15:	55                   	push   ebp
c0003c16:	57                   	push   edi
c0003c17:	56                   	push   esi
c0003c18:	53                   	push   ebx
c0003c19:	83 ec 2c             	sub    esp,0x2c
c0003c1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003c20:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003c24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003c2a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003c2e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c32:	89 d8                	mov    eax,ebx
c0003c34:	e8 8f e3 ff ff       	call   c0001fc8 <validate>
c0003c39:	89 c5                	mov    ebp,eax
c0003c3b:	85 c0                	test   eax,eax
c0003c3d:	0f 85 c7 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c43:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003c47:	85 ed                	test   ebp,ebp
c0003c49:	0f 85 bb 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c4f:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003c53:	0f 84 ac 01 00 00    	je     c0003e05 <f_read+0x1f0>
c0003c59:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003c5c:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003c5f:	89 c7                	mov    edi,eax
c0003c61:	39 f0                	cmp    eax,esi
c0003c63:	0f 86 ad 00 00 00    	jbe    c0003d16 <f_read+0x101>
c0003c69:	89 f7                	mov    edi,esi
c0003c6b:	e9 a6 00 00 00       	jmp    c0003d16 <f_read+0x101>
c0003c70:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003c73:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003c79:	0f 85 5b 01 00 00    	jne    c0003dda <f_read+0x1c5>
c0003c7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c83:	89 d1                	mov    ecx,edx
c0003c85:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003c89:	c1 e9 09             	shr    ecx,0x9
c0003c8c:	48                   	dec    eax
c0003c8d:	21 c8                	and    eax,ecx
c0003c8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c93:	0f 84 8a 00 00 00    	je     c0003d23 <f_read+0x10e>
c0003c99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c9d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ca0:	89 c8                	mov    eax,ecx
c0003ca2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ca6:	e8 e7 e0 ff ff       	call   c0001d92 <clst2sect>
c0003cab:	85 c0                	test   eax,eax
c0003cad:	0f 84 88 00 00 00    	je     c0003d3b <f_read+0x126>
c0003cb3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003cb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003cbf:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003cc5:	0f 86 bd 00 00 00    	jbe    c0003d88 <f_read+0x173>
c0003ccb:	89 fe                	mov    esi,edi
c0003ccd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003cd1:	c1 ee 09             	shr    esi,0x9
c0003cd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003cd8:	01 f2                	add    edx,esi
c0003cda:	39 c2                	cmp    edx,eax
c0003cdc:	76 06                	jbe    c0003ce4 <f_read+0xcf>
c0003cde:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ce2:	89 c6                	mov    esi,eax
c0003ce4:	56                   	push   esi
c0003ce5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ce9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ced:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003cf1:	50                   	push   eax
c0003cf2:	e8 0a de ff ff       	call   c0001b01 <disk_read>
c0003cf7:	83 c4 10             	add    esp,0x10
c0003cfa:	85 c0                	test   eax,eax
c0003cfc:	75 50                	jne    c0003d4e <f_read+0x139>
c0003cfe:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d02:	78 60                	js     c0003d64 <f_read+0x14f>
c0003d04:	c1 e6 09             	shl    esi,0x9
c0003d07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003d0b:	29 f7                	sub    edi,esi
c0003d0d:	01 30                	add    DWORD PTR [eax],esi
c0003d0f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003d13:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003d16:	85 ff                	test   edi,edi
c0003d18:	0f 85 52 ff ff ff    	jne    c0003c70 <f_read+0x5b>
c0003d1e:	e9 e7 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d23:	85 d2                	test   edx,edx
c0003d25:	75 05                	jne    c0003d2c <f_read+0x117>
c0003d27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003d2a:	eb 0a                	jmp    c0003d36 <f_read+0x121>
c0003d2c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d31:	e8 08 f2 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003d36:	83 f8 01             	cmp    eax,0x1
c0003d39:	77 0e                	ja     c0003d49 <f_read+0x134>
c0003d3b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003d3f:	bd 02 00 00 00       	mov    ebp,0x2
c0003d44:	e9 c1 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d49:	83 f8 ff             	cmp    eax,0xffffffff
c0003d4c:	75 0e                	jne    c0003d5c <f_read+0x147>
c0003d4e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003d52:	bd 01 00 00 00       	mov    ebp,0x1
c0003d57:	e9 ae 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d5c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003d5f:	e9 35 ff ff ff       	jmp    c0003c99 <f_read+0x84>
c0003d64:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d67:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003d6b:	39 f0                	cmp    eax,esi
c0003d6d:	73 95                	jae    c0003d04 <f_read+0xef>
c0003d6f:	c1 e0 09             	shl    eax,0x9
c0003d72:	8d 53 28             	lea    edx,[ebx+0x28]
c0003d75:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003d79:	b9 00 02 00 00       	mov    ecx,0x200
c0003d7e:	e8 f5 dd ff ff       	call   c0001b78 <mem_cpy>
c0003d83:	e9 7c ff ff ff       	jmp    c0003d04 <f_read+0xef>
c0003d88:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d8b:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003d8f:	74 42                	je     c0003dd3 <f_read+0x1be>
c0003d91:	8d 73 28             	lea    esi,[ebx+0x28]
c0003d94:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d98:	79 19                	jns    c0003db3 <f_read+0x19e>
c0003d9a:	6a 01                	push   0x1
c0003d9c:	50                   	push   eax
c0003d9d:	56                   	push   esi
c0003d9e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003da2:	50                   	push   eax
c0003da3:	e8 6f dd ff ff       	call   c0001b17 <disk_write>
c0003da8:	83 c4 10             	add    esp,0x10
c0003dab:	85 c0                	test   eax,eax
c0003dad:	75 9f                	jne    c0003d4e <f_read+0x139>
c0003daf:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003db3:	6a 01                	push   0x1
c0003db5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003db9:	56                   	push   esi
c0003dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003dbe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003dc2:	50                   	push   eax
c0003dc3:	e8 39 dd ff ff       	call   c0001b01 <disk_read>
c0003dc8:	83 c4 10             	add    esp,0x10
c0003dcb:	85 c0                	test   eax,eax
c0003dcd:	0f 85 7b ff ff ff    	jne    c0003d4e <f_read+0x139>
c0003dd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dd7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dda:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003ddd:	ba 00 02 00 00       	mov    edx,0x200
c0003de2:	25 ff 01 00 00       	and    eax,0x1ff
c0003de7:	89 fe                	mov    esi,edi
c0003de9:	29 c2                	sub    edx,eax
c0003deb:	39 d7                	cmp    edi,edx
c0003ded:	76 02                	jbe    c0003df1 <f_read+0x1dc>
c0003def:	89 d6                	mov    esi,edx
c0003df1:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003df5:	89 f1                	mov    ecx,esi
c0003df7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003dfb:	e8 78 dd ff ff       	call   c0001b78 <mem_cpy>
c0003e00:	e9 02 ff ff ff       	jmp    c0003d07 <f_read+0xf2>
c0003e05:	bd 07 00 00 00       	mov    ebp,0x7
c0003e0a:	83 c4 2c             	add    esp,0x2c
c0003e0d:	89 e8                	mov    eax,ebp
c0003e0f:	5b                   	pop    ebx
c0003e10:	5e                   	pop    esi
c0003e11:	5f                   	pop    edi
c0003e12:	5d                   	pop    ebp
c0003e13:	c3                   	ret    

c0003e14 <f_write>:
c0003e14:	55                   	push   ebp
c0003e15:	57                   	push   edi
c0003e16:	56                   	push   esi
c0003e17:	53                   	push   ebx
c0003e18:	83 ec 2c             	sub    esp,0x2c
c0003e1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 94 e1 ff ff       	call   c0001fc8 <validate>
c0003e34:	89 c5                	mov    ebp,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	0f 85 00 02 00 00    	jne    c000403e <f_write+0x22a>
c0003e3e:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e42:	85 ed                	test   ebp,ebp
c0003e44:	0f 85 f4 01 00 00    	jne    c000403e <f_write+0x22a>
c0003e4a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003e4e:	0f 84 e5 01 00 00    	je     c0004039 <f_write+0x225>
c0003e54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e57:	89 c7                	mov    edi,eax
c0003e59:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0003e5d:	0f 83 ea 00 00 00    	jae    c0003f4d <f_write+0x139>
c0003e63:	f7 d0                	not    eax
c0003e65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0003e69:	e9 df 00 00 00       	jmp    c0003f4d <f_write+0x139>
c0003e6e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e71:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e77:	0f 85 8b 01 00 00    	jne    c0004008 <f_write+0x1f4>
c0003e7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e81:	89 d1                	mov    ecx,edx
c0003e83:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e87:	c1 e9 09             	shr    ecx,0x9
c0003e8a:	48                   	dec    eax
c0003e8b:	21 c8                	and    eax,ecx
c0003e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e91:	0f 84 c3 00 00 00    	je     c0003f5a <f_write+0x146>
c0003e97:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003e9b:	0f 88 18 01 00 00    	js     c0003fb9 <f_write+0x1a5>
c0003ea1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ea5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ea8:	89 c8                	mov    eax,ecx
c0003eaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003eae:	e8 df de ff ff       	call   c0001d92 <clst2sect>
c0003eb3:	85 c0                	test   eax,eax
c0003eb5:	0f 84 c8 00 00 00    	je     c0003f83 <f_write+0x16f>
c0003ebb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003ebf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ec3:	01 c7                	add    edi,eax
c0003ec5:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0003ecd:	0f 86 0d 01 00 00    	jbe    c0003fe0 <f_write+0x1cc>
c0003ed3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003ed7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003edb:	c1 ee 09             	shr    esi,0x9
c0003ede:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ee2:	01 f2                	add    edx,esi
c0003ee4:	39 c2                	cmp    edx,eax
c0003ee6:	76 06                	jbe    c0003eee <f_write+0xda>
c0003ee8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eec:	89 c6                	mov    esi,eax
c0003eee:	56                   	push   esi
c0003eef:	57                   	push   edi
c0003ef0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ef4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ef8:	50                   	push   eax
c0003ef9:	e8 19 dc ff ff       	call   c0001b17 <disk_write>
c0003efe:	83 c4 10             	add    esp,0x10
c0003f01:	85 c0                	test   eax,eax
c0003f03:	0f 85 8d 00 00 00    	jne    c0003f96 <f_write+0x182>
c0003f09:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f0c:	29 fa                	sub    edx,edi
c0003f0e:	39 f2                	cmp    edx,esi
c0003f10:	73 18                	jae    c0003f2a <f_write+0x116>
c0003f12:	c1 e2 09             	shl    edx,0x9
c0003f15:	8d 43 28             	lea    eax,[ebx+0x28]
c0003f18:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0003f1c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f21:	e8 52 dc ff ff       	call   c0001b78 <mem_cpy>
c0003f26:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f2a:	c1 e6 09             	shl    esi,0x9
c0003f2d:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0003f31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f35:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f39:	01 30                	add    DWORD PTR [eax],esi
c0003f3b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0003f3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f41:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003f44:	39 f0                	cmp    eax,esi
c0003f46:	73 02                	jae    c0003f4a <f_write+0x136>
c0003f48:	89 f0                	mov    eax,esi
c0003f4a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f4d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0003f52:	0f 85 16 ff ff ff    	jne    c0003e6e <f_write+0x5a>
c0003f58:	eb 1b                	jmp    c0003f75 <f_write+0x161>
c0003f5a:	85 d2                	test   edx,edx
c0003f5c:	75 09                	jne    c0003f67 <f_write+0x153>
c0003f5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f61:	85 c0                	test   eax,eax
c0003f63:	75 19                	jne    c0003f7e <f_write+0x16a>
c0003f65:	eb 03                	jmp    c0003f6a <f_write+0x156>
c0003f67:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f6a:	89 d8                	mov    eax,ebx
c0003f6c:	e8 97 f1 ff ff       	call   c0003108 <create_chain>
c0003f71:	85 c0                	test   eax,eax
c0003f73:	75 09                	jne    c0003f7e <f_write+0x16a>
c0003f75:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003f79:	e9 c0 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f7e:	83 f8 01             	cmp    eax,0x1
c0003f81:	75 0e                	jne    c0003f91 <f_write+0x17d>
c0003f83:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f87:	bd 02 00 00 00       	mov    ebp,0x2
c0003f8c:	e9 ad 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f91:	83 f8 ff             	cmp    eax,0xffffffff
c0003f94:	75 0e                	jne    c0003fa4 <f_write+0x190>
c0003f96:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f9a:	bd 01 00 00 00       	mov    ebp,0x1
c0003f9f:	e9 9a 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003fa4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003fa7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003fab:	0f 85 e6 fe ff ff    	jne    c0003e97 <f_write+0x83>
c0003fb1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003fb4:	e9 de fe ff ff       	jmp    c0003e97 <f_write+0x83>
c0003fb9:	6a 01                	push   0x1
c0003fbb:	8d 43 28             	lea    eax,[ebx+0x28]
c0003fbe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003fc1:	50                   	push   eax
c0003fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fc6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fca:	50                   	push   eax
c0003fcb:	e8 47 db ff ff       	call   c0001b17 <disk_write>
c0003fd0:	83 c4 10             	add    esp,0x10
c0003fd3:	85 c0                	test   eax,eax
c0003fd5:	75 bf                	jne    c0003f96 <f_write+0x182>
c0003fd7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fdb:	e9 c1 fe ff ff       	jmp    c0003ea1 <f_write+0x8d>
c0003fe0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0003fe3:	74 20                	je     c0004005 <f_write+0x1f1>
c0003fe5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fe8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0003feb:	76 18                	jbe    c0004005 <f_write+0x1f1>
c0003fed:	6a 01                	push   0x1
c0003fef:	8d 43 28             	lea    eax,[ebx+0x28]
c0003ff2:	57                   	push   edi
c0003ff3:	50                   	push   eax
c0003ff4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ff8:	50                   	push   eax
c0003ff9:	e8 03 db ff ff       	call   c0001b01 <disk_read>
c0003ffe:	83 c4 10             	add    esp,0x10
c0004001:	85 c0                	test   eax,eax
c0004003:	75 91                	jne    c0003f96 <f_write+0x182>
c0004005:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004008:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000400b:	ba 00 02 00 00       	mov    edx,0x200
c0004010:	25 ff 01 00 00       	and    eax,0x1ff
c0004015:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004019:	29 c2                	sub    edx,eax
c000401b:	39 d6                	cmp    esi,edx
c000401d:	76 02                	jbe    c0004021 <f_write+0x20d>
c000401f:	89 d6                	mov    esi,edx
c0004021:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004025:	89 f1                	mov    ecx,esi
c0004027:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000402b:	e8 48 db ff ff       	call   c0001b78 <mem_cpy>
c0004030:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004034:	e9 f4 fe ff ff       	jmp    c0003f2d <f_write+0x119>
c0004039:	bd 07 00 00 00       	mov    ebp,0x7
c000403e:	83 c4 2c             	add    esp,0x2c
c0004041:	89 e8                	mov    eax,ebp
c0004043:	5b                   	pop    ebx
c0004044:	5e                   	pop    esi
c0004045:	5f                   	pop    edi
c0004046:	5d                   	pop    ebp
c0004047:	c3                   	ret    

c0004048 <f_sync>:
c0004048:	56                   	push   esi
c0004049:	53                   	push   ebx
c000404a:	83 ec 14             	sub    esp,0x14
c000404d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004051:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004055:	89 d8                	mov    eax,ebx
c0004057:	e8 6c df ff ff       	call   c0001fc8 <validate>
c000405c:	85 c0                	test   eax,eax
c000405e:	0f 85 93 00 00 00    	jne    c00040f7 <f_sync+0xaf>
c0004064:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004067:	f6 c2 40             	test   dl,0x40
c000406a:	0f 84 87 00 00 00    	je     c00040f7 <f_sync+0xaf>
c0004070:	84 d2                	test   dl,dl
c0004072:	79 29                	jns    c000409d <f_sync+0x55>
c0004074:	6a 01                	push   0x1
c0004076:	8d 43 28             	lea    eax,[ebx+0x28]
c0004079:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000407c:	50                   	push   eax
c000407d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004081:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004085:	50                   	push   eax
c0004086:	e8 8c da ff ff       	call   c0001b17 <disk_write>
c000408b:	83 c4 10             	add    esp,0x10
c000408e:	89 c2                	mov    edx,eax
c0004090:	b8 01 00 00 00       	mov    eax,0x1
c0004095:	85 d2                	test   edx,edx
c0004097:	75 5e                	jne    c00040f7 <f_sync+0xaf>
c0004099:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000409d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00040a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040a4:	e8 c9 df ff ff       	call   c0002072 <move_window>
c00040a9:	85 c0                	test   eax,eax
c00040ab:	75 4a                	jne    c00040f7 <f_sync+0xaf>
c00040ad:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00040b0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00040b4:	89 f2                	mov    edx,esi
c00040b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00040b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040bb:	e8 56 ee ff ff       	call   c0002f16 <st_clust.isra.1>
c00040c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040c3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00040c6:	e8 aa da ff ff       	call   c0001b75 <st_dword>
c00040cb:	8d 46 16             	lea    eax,[esi+0x16]
c00040ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00040d3:	e8 9d da ff ff       	call   c0001b75 <st_dword>
c00040d8:	8d 46 12             	lea    eax,[esi+0x12]
c00040db:	31 d2                	xor    edx,edx
c00040dd:	e8 8f da ff ff       	call   c0001b71 <st_word>
c00040e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040ee:	e8 bf e9 ff ff       	call   c0002ab2 <sync_fs>
c00040f3:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00040f7:	83 c4 14             	add    esp,0x14
c00040fa:	5b                   	pop    ebx
c00040fb:	5e                   	pop    esi
c00040fc:	c3                   	ret    

c00040fd <f_close>:
c00040fd:	53                   	push   ebx
c00040fe:	83 ec 24             	sub    esp,0x24
c0004101:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004105:	53                   	push   ebx
c0004106:	e8 3d ff ff ff       	call   c0004048 <f_sync>
c000410b:	83 c4 10             	add    esp,0x10
c000410e:	85 c0                	test   eax,eax
c0004110:	75 15                	jne    c0004127 <f_close+0x2a>
c0004112:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004116:	89 d8                	mov    eax,ebx
c0004118:	e8 ab de ff ff       	call   c0001fc8 <validate>
c000411d:	85 c0                	test   eax,eax
c000411f:	75 06                	jne    c0004127 <f_close+0x2a>
c0004121:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004127:	83 c4 18             	add    esp,0x18
c000412a:	5b                   	pop    ebx
c000412b:	c3                   	ret    

c000412c <f_lseek>:
c000412c:	55                   	push   ebp
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	83 ec 2c             	sub    esp,0x2c
c0004133:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004137:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000413b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 82 de ff ff       	call   c0001fc8 <validate>
c0004146:	89 c5                	mov    ebp,eax
c0004148:	85 c0                	test   eax,eax
c000414a:	0f 85 79 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c0004150:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004154:	85 ed                	test   ebp,ebp
c0004156:	0f 85 6d 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c000415c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000415f:	39 f0                	cmp    eax,esi
c0004161:	73 08                	jae    c000416b <f_lseek+0x3f>
c0004163:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004167:	75 02                	jne    c000416b <f_lseek+0x3f>
c0004169:	89 c6                	mov    esi,eax
c000416b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000416e:	85 f6                	test   esi,esi
c0004170:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004177:	75 07                	jne    c0004180 <f_lseek+0x54>
c0004179:	31 f6                	xor    esi,esi
c000417b:	e9 e2 00 00 00       	jmp    c0004262 <f_lseek+0x136>
c0004180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004184:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004188:	c1 e7 09             	shl    edi,0x9
c000418b:	85 c9                	test   ecx,ecx
c000418d:	74 28                	je     c00041b7 <f_lseek+0x8b>
c000418f:	49                   	dec    ecx
c0004190:	31 d2                	xor    edx,edx
c0004192:	8d 46 ff             	lea    eax,[esi-0x1]
c0004195:	f7 f7                	div    edi
c0004197:	31 d2                	xor    edx,edx
c0004199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000419d:	89 c8                	mov    eax,ecx
c000419f:	f7 f7                	div    edi
c00041a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00041a5:	72 10                	jb     c00041b7 <f_lseek+0x8b>
c00041a7:	89 f8                	mov    eax,edi
c00041a9:	f7 d8                	neg    eax
c00041ab:	21 c1                	and    ecx,eax
c00041ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00041b0:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00041b3:	29 ce                	sub    esi,ecx
c00041b5:	eb 3c                	jmp    c00041f3 <f_lseek+0xc7>
c00041b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041ba:	85 c0                	test   eax,eax
c00041bc:	75 32                	jne    c00041f0 <f_lseek+0xc4>
c00041be:	31 d2                	xor    edx,edx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 41 ef ff ff       	call   c0003108 <create_chain>
c00041c7:	83 f8 01             	cmp    eax,0x1
c00041ca:	75 0e                	jne    c00041da <f_lseek+0xae>
c00041cc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041d0:	bd 02 00 00 00       	mov    ebp,0x2
c00041d5:	e9 ef 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041da:	83 f8 ff             	cmp    eax,0xffffffff
c00041dd:	75 0e                	jne    c00041ed <f_lseek+0xc1>
c00041df:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041e3:	bd 01 00 00 00       	mov    ebp,0x1
c00041e8:	e9 dc 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041ed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041f3:	85 c0                	test   eax,eax
c00041f5:	74 82                	je     c0004179 <f_lseek+0x4d>
c00041f7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00041fa:	39 fe                	cmp    esi,edi
c00041fc:	76 3d                	jbe    c000423b <f_lseek+0x10f>
c00041fe:	01 fa                	add    edx,edi
c0004200:	29 fe                	sub    esi,edi
c0004202:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004205:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004209:	89 c2                	mov    edx,eax
c000420b:	74 0d                	je     c000421a <f_lseek+0xee>
c000420d:	89 d8                	mov    eax,ebx
c000420f:	e8 f4 ee ff ff       	call   c0003108 <create_chain>
c0004214:	85 c0                	test   eax,eax
c0004216:	75 09                	jne    c0004221 <f_lseek+0xf5>
c0004218:	eb 1f                	jmp    c0004239 <f_lseek+0x10d>
c000421a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000421c:	e8 1d ed ff ff       	call   c0002f3e <get_fat.isra.2>
c0004221:	83 f8 ff             	cmp    eax,0xffffffff
c0004224:	74 b9                	je     c00041df <f_lseek+0xb3>
c0004226:	83 f8 01             	cmp    eax,0x1
c0004229:	76 a1                	jbe    c00041cc <f_lseek+0xa0>
c000422b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000422f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004232:	76 98                	jbe    c00041cc <f_lseek+0xa0>
c0004234:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004237:	eb be                	jmp    c00041f7 <f_lseek+0xcb>
c0004239:	31 f6                	xor    esi,esi
c000423b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000423e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004244:	0f 84 2f ff ff ff    	je     c0004179 <f_lseek+0x4d>
c000424a:	89 c2                	mov    edx,eax
c000424c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004250:	e8 3d db ff ff       	call   c0001d92 <clst2sect>
c0004255:	85 c0                	test   eax,eax
c0004257:	0f 84 6f ff ff ff    	je     c00041cc <f_lseek+0xa0>
c000425d:	c1 ee 09             	shr    esi,0x9
c0004260:	01 c6                	add    esi,eax
c0004262:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004265:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004268:	76 07                	jbe    c0004271 <f_lseek+0x145>
c000426a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000426d:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004271:	a9 ff 01 00 00       	test   eax,0x1ff
c0004276:	74 51                	je     c00042c9 <f_lseek+0x19d>
c0004278:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000427b:	39 f0                	cmp    eax,esi
c000427d:	74 4a                	je     c00042c9 <f_lseek+0x19d>
c000427f:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004282:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004286:	79 21                	jns    c00042a9 <f_lseek+0x17d>
c0004288:	6a 01                	push   0x1
c000428a:	50                   	push   eax
c000428b:	57                   	push   edi
c000428c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004290:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004294:	50                   	push   eax
c0004295:	e8 7d d8 ff ff       	call   c0001b17 <disk_write>
c000429a:	83 c4 10             	add    esp,0x10
c000429d:	85 c0                	test   eax,eax
c000429f:	0f 85 3a ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042a5:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00042a9:	6a 01                	push   0x1
c00042ab:	56                   	push   esi
c00042ac:	57                   	push   edi
c00042ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b5:	50                   	push   eax
c00042b6:	e8 46 d8 ff ff       	call   c0001b01 <disk_read>
c00042bb:	83 c4 10             	add    esp,0x10
c00042be:	85 c0                	test   eax,eax
c00042c0:	0f 85 19 ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042c6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00042c9:	83 c4 2c             	add    esp,0x2c
c00042cc:	89 e8                	mov    eax,ebp
c00042ce:	5b                   	pop    ebx
c00042cf:	5e                   	pop    esi
c00042d0:	5f                   	pop    edi
c00042d1:	5d                   	pop    ebp
c00042d2:	c3                   	ret    

c00042d3 <f_opendir>:
c00042d3:	56                   	push   esi
c00042d4:	b8 09 00 00 00       	mov    eax,0x9
c00042d9:	53                   	push   ebx
c00042da:	83 ec 24             	sub    esp,0x24
c00042dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00042e1:	85 db                	test   ebx,ebx
c00042e3:	0f 84 af 00 00 00    	je     c0004398 <f_opendir+0xc5>
c00042e9:	31 c9                	xor    ecx,ecx
c00042eb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042ef:	8d 44 24 34          	lea    eax,[esp+0x34]
c00042f3:	e8 cd de ff ff       	call   c00021c5 <mount_volume>
c00042f8:	85 c0                	test   eax,eax
c00042fa:	0f 85 92 00 00 00    	jne    c0004392 <f_opendir+0xbf>
c0004300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004304:	83 ec 0c             	sub    esp,0xc
c0004307:	89 03                	mov    DWORD PTR [ebx],eax
c0004309:	68 00 02 00 00       	push   0x200
c000430e:	e8 85 15 00 00       	call   c0005898 <ff_memalloc>
c0004313:	83 c4 10             	add    esp,0x10
c0004316:	89 c6                	mov    esi,eax
c0004318:	b8 11 00 00 00       	mov    eax,0x11
c000431d:	85 f6                	test   esi,esi
c000431f:	74 77                	je     c0004398 <f_opendir+0xc5>
c0004321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004325:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004329:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000432c:	89 d8                	mov    eax,ebx
c000432e:	e8 9c f3 ff ff       	call   c00036cf <follow_path>
c0004333:	85 c0                	test   eax,eax
c0004335:	75 37                	jne    c000436e <f_opendir+0x9b>
c0004337:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000433b:	78 1c                	js     c0004359 <f_opendir+0x86>
c000433d:	b8 05 00 00 00       	mov    eax,0x5
c0004342:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004346:	74 26                	je     c000436e <f_opendir+0x9b>
c0004348:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000434b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000434f:	8a 00                	mov    al,BYTE PTR [eax]
c0004351:	e8 97 eb ff ff       	call   c0002eed <ld_clust.isra.0>
c0004356:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000435d:	31 d2                	xor    edx,edx
c000435f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004363:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004367:	89 d8                	mov    eax,ebx
c0004369:	e8 d2 ec ff ff       	call   c0003040 <dir_sdi>
c000436e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004372:	83 ec 0c             	sub    esp,0xc
c0004375:	56                   	push   esi
c0004376:	e8 35 15 00 00       	call   c00058b0 <ff_memfree>
c000437b:	83 c4 10             	add    esp,0x10
c000437e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004382:	83 f8 04             	cmp    eax,0x4
c0004385:	74 06                	je     c000438d <f_opendir+0xba>
c0004387:	85 c0                	test   eax,eax
c0004389:	74 0d                	je     c0004398 <f_opendir+0xc5>
c000438b:	eb 05                	jmp    c0004392 <f_opendir+0xbf>
c000438d:	b8 05 00 00 00       	mov    eax,0x5
c0004392:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004398:	83 c4 24             	add    esp,0x24
c000439b:	5b                   	pop    ebx
c000439c:	5e                   	pop    esi
c000439d:	c3                   	ret    

c000439e <f_closedir>:
c000439e:	53                   	push   ebx
c000439f:	83 ec 18             	sub    esp,0x18
c00043a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00043a6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00043aa:	89 d8                	mov    eax,ebx
c00043ac:	e8 17 dc ff ff       	call   c0001fc8 <validate>
c00043b1:	85 c0                	test   eax,eax
c00043b3:	75 06                	jne    c00043bb <f_closedir+0x1d>
c00043b5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00043bb:	83 c4 18             	add    esp,0x18
c00043be:	5b                   	pop    ebx
c00043bf:	c3                   	ret    

c00043c0 <f_readdir>:
c00043c0:	57                   	push   edi
c00043c1:	56                   	push   esi
c00043c2:	53                   	push   ebx
c00043c3:	83 ec 20             	sub    esp,0x20
c00043c6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00043ca:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00043ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00043d2:	89 d8                	mov    eax,ebx
c00043d4:	e8 ef db ff ff       	call   c0001fc8 <validate>
c00043d9:	85 c0                	test   eax,eax
c00043db:	75 6e                	jne    c000444b <f_readdir+0x8b>
c00043dd:	85 ff                	test   edi,edi
c00043df:	75 0b                	jne    c00043ec <f_readdir+0x2c>
c00043e1:	31 d2                	xor    edx,edx
c00043e3:	89 d8                	mov    eax,ebx
c00043e5:	e8 56 ec ff ff       	call   c0003040 <dir_sdi>
c00043ea:	eb 5f                	jmp    c000444b <f_readdir+0x8b>
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	68 00 02 00 00       	push   0x200
c00043f4:	e8 9f 14 00 00       	call   c0005898 <ff_memalloc>
c00043f9:	83 c4 10             	add    esp,0x10
c00043fc:	89 c6                	mov    esi,eax
c00043fe:	b8 11 00 00 00       	mov    eax,0x11
c0004403:	85 f6                	test   esi,esi
c0004405:	74 44                	je     c000444b <f_readdir+0x8b>
c0004407:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000440b:	31 d2                	xor    edx,edx
c000440d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004410:	89 d8                	mov    eax,ebx
c0004412:	e8 1a f0 ff ff       	call   c0003431 <dir_read>
c0004417:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000441c:	75 19                	jne    c0004437 <f_readdir+0x77>
c000441e:	89 fa                	mov    edx,edi
c0004420:	89 d8                	mov    eax,ebx
c0004422:	e8 e2 e8 ff ff       	call   c0002d09 <get_fileinfo>
c0004427:	31 d2                	xor    edx,edx
c0004429:	89 d8                	mov    eax,ebx
c000442b:	e8 9b ee ff ff       	call   c00032cb <dir_next>
c0004430:	83 f8 04             	cmp    eax,0x4
c0004433:	75 02                	jne    c0004437 <f_readdir+0x77>
c0004435:	31 c0                	xor    eax,eax
c0004437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000443b:	83 ec 0c             	sub    esp,0xc
c000443e:	56                   	push   esi
c000443f:	e8 6c 14 00 00       	call   c00058b0 <ff_memfree>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000444b:	83 c4 20             	add    esp,0x20
c000444e:	5b                   	pop    ebx
c000444f:	5e                   	pop    esi
c0004450:	5f                   	pop    edi
c0004451:	c3                   	ret    

c0004452 <f_stat>:
c0004452:	57                   	push   edi
c0004453:	31 c9                	xor    ecx,ecx
c0004455:	56                   	push   esi
c0004456:	53                   	push   ebx
c0004457:	83 ec 30             	sub    esp,0x30
c000445a:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000445e:	89 e2                	mov    edx,esp
c0004460:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004464:	e8 5c dd ff ff       	call   c00021c5 <mount_volume>
c0004469:	89 c3                	mov    ebx,eax
c000446b:	85 c0                	test   eax,eax
c000446d:	75 59                	jne    c00044c8 <f_stat+0x76>
c000446f:	83 ec 0c             	sub    esp,0xc
c0004472:	bb 11 00 00 00       	mov    ebx,0x11
c0004477:	68 00 02 00 00       	push   0x200
c000447c:	e8 17 14 00 00       	call   c0005898 <ff_memalloc>
c0004481:	83 c4 10             	add    esp,0x10
c0004484:	89 c6                	mov    esi,eax
c0004486:	85 c0                	test   eax,eax
c0004488:	74 3e                	je     c00044c8 <f_stat+0x76>
c000448a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000448d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004491:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004494:	89 e0                	mov    eax,esp
c0004496:	e8 34 f2 ff ff       	call   c00036cf <follow_path>
c000449b:	89 c3                	mov    ebx,eax
c000449d:	85 c0                	test   eax,eax
c000449f:	75 1b                	jne    c00044bc <f_stat+0x6a>
c00044a1:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00044a6:	78 0f                	js     c00044b7 <f_stat+0x65>
c00044a8:	85 ff                	test   edi,edi
c00044aa:	74 10                	je     c00044bc <f_stat+0x6a>
c00044ac:	89 fa                	mov    edx,edi
c00044ae:	89 e0                	mov    eax,esp
c00044b0:	e8 54 e8 ff ff       	call   c0002d09 <get_fileinfo>
c00044b5:	eb 05                	jmp    c00044bc <f_stat+0x6a>
c00044b7:	bb 06 00 00 00       	mov    ebx,0x6
c00044bc:	83 ec 0c             	sub    esp,0xc
c00044bf:	56                   	push   esi
c00044c0:	e8 eb 13 00 00       	call   c00058b0 <ff_memfree>
c00044c5:	83 c4 10             	add    esp,0x10
c00044c8:	83 c4 30             	add    esp,0x30
c00044cb:	89 d8                	mov    eax,ebx
c00044cd:	5b                   	pop    ebx
c00044ce:	5e                   	pop    esi
c00044cf:	5f                   	pop    edi
c00044d0:	c3                   	ret    

c00044d1 <f_getfree>:
c00044d1:	55                   	push   ebp
c00044d2:	31 c9                	xor    ecx,ecx
c00044d4:	57                   	push   edi
c00044d5:	56                   	push   esi
c00044d6:	53                   	push   ebx
c00044d7:	83 ec 2c             	sub    esp,0x2c
c00044da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044de:	8d 44 24 40          	lea    eax,[esp+0x40]
c00044e2:	e8 de dc ff ff       	call   c00021c5 <mount_volume>
c00044e7:	89 c7                	mov    edi,eax
c00044e9:	85 c0                	test   eax,eax
c00044eb:	0f 85 d8 00 00 00    	jne    c00045c9 <f_getfree+0xf8>
c00044f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00044f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00044f9:	89 30                	mov    DWORD PTR [eax],esi
c00044fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00044fe:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004501:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004504:	39 d0                	cmp    eax,edx
c0004506:	77 0b                	ja     c0004513 <f_getfree+0x42>
c0004508:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000450c:	89 01                	mov    DWORD PTR [ecx],eax
c000450e:	e9 b6 00 00 00       	jmp    c00045c9 <f_getfree+0xf8>
c0004513:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004516:	75 29                	jne    c0004541 <f_getfree+0x70>
c0004518:	bd 02 00 00 00       	mov    ebp,0x2
c000451d:	31 db                	xor    ebx,ebx
c000451f:	89 ea                	mov    edx,ebp
c0004521:	89 f0                	mov    eax,esi
c0004523:	e8 16 ea ff ff       	call   c0002f3e <get_fat.isra.2>
c0004528:	83 f8 ff             	cmp    eax,0xffffffff
c000452b:	74 7b                	je     c00045a8 <f_getfree+0xd7>
c000452d:	83 f8 01             	cmp    eax,0x1
c0004530:	74 7d                	je     c00045af <f_getfree+0xde>
c0004532:	83 d3 00             	adc    ebx,0x0
c0004535:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004539:	45                   	inc    ebp
c000453a:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000453d:	77 e0                	ja     c000451f <f_getfree+0x4e>
c000453f:	eb 77                	jmp    c00045b8 <f_getfree+0xe7>
c0004541:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004544:	31 db                	xor    ebx,ebx
c0004546:	31 f6                	xor    esi,esi
c0004548:	85 f6                	test   esi,esi
c000454a:	75 18                	jne    c0004564 <f_getfree+0x93>
c000454c:	8d 42 01             	lea    eax,[edx+0x1]
c000454f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004557:	e8 16 db ff ff       	call   c0002072 <move_window>
c000455c:	85 c0                	test   eax,eax
c000455e:	75 56                	jne    c00045b6 <f_getfree+0xe5>
c0004560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004564:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004568:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000456c:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004570:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004573:	75 11                	jne    c0004586 <f_getfree+0xb5>
c0004575:	e8 d2 d5 ff ff       	call   c0001b4c <ld_word>
c000457a:	66 83 f8 01          	cmp    ax,0x1
c000457e:	83 d3 00             	adc    ebx,0x0
c0004581:	83 c6 02             	add    esi,0x2
c0004584:	eb 13                	jmp    c0004599 <f_getfree+0xc8>
c0004586:	e8 ce d5 ff ff       	call   c0001b59 <ld_dword>
c000458b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004590:	83 f8 01             	cmp    eax,0x1
c0004593:	83 d3 00             	adc    ebx,0x0
c0004596:	83 c6 04             	add    esi,0x4
c0004599:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000459f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00045a3:	4d                   	dec    ebp
c00045a4:	75 a2                	jne    c0004548 <f_getfree+0x77>
c00045a6:	eb 10                	jmp    c00045b8 <f_getfree+0xe7>
c00045a8:	bf 01 00 00 00       	mov    edi,0x1
c00045ad:	eb 09                	jmp    c00045b8 <f_getfree+0xe7>
c00045af:	bf 02 00 00 00       	mov    edi,0x2
c00045b4:	eb 02                	jmp    c00045b8 <f_getfree+0xe7>
c00045b6:	89 c7                	mov    edi,eax
c00045b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00045bc:	89 18                	mov    DWORD PTR [eax],ebx
c00045be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045c2:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00045c5:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00045c9:	83 c4 2c             	add    esp,0x2c
c00045cc:	89 f8                	mov    eax,edi
c00045ce:	5b                   	pop    ebx
c00045cf:	5e                   	pop    esi
c00045d0:	5f                   	pop    edi
c00045d1:	5d                   	pop    ebp
c00045d2:	c3                   	ret    

c00045d3 <f_truncate>:
c00045d3:	56                   	push   esi
c00045d4:	53                   	push   ebx
c00045d5:	83 ec 14             	sub    esp,0x14
c00045d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00045dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045e0:	89 d8                	mov    eax,ebx
c00045e2:	e8 e1 d9 ff ff       	call   c0001fc8 <validate>
c00045e7:	89 c6                	mov    esi,eax
c00045e9:	85 c0                	test   eax,eax
c00045eb:	0f 85 be 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045f1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00045f5:	85 f6                	test   esi,esi
c00045f7:	0f 85 b2 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045fd:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004601:	0f 84 a3 00 00 00    	je     c00046aa <f_truncate+0xd7>
c0004607:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000460a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000460d:	0f 83 9c 00 00 00    	jae    c00046af <f_truncate+0xdc>
c0004613:	85 c0                	test   eax,eax
c0004615:	75 15                	jne    c000462c <f_truncate+0x59>
c0004617:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000461a:	31 c9                	xor    ecx,ecx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 1f ec ff ff       	call   c0003242 <remove_chain>
c0004623:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000462a:	eb 35                	jmp    c0004661 <f_truncate+0x8e>
c000462c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000462f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004631:	e8 08 e9 ff ff       	call   c0002f3e <get_fat.isra.2>
c0004636:	89 c2                	mov    edx,eax
c0004638:	b8 01 00 00 00       	mov    eax,0x1
c000463d:	83 fa ff             	cmp    edx,0xffffffff
c0004640:	74 1f                	je     c0004661 <f_truncate+0x8e>
c0004642:	b8 02 00 00 00       	mov    eax,0x2
c0004647:	83 fa 01             	cmp    edx,0x1
c000464a:	74 15                	je     c0004661 <f_truncate+0x8e>
c000464c:	31 c0                	xor    eax,eax
c000464e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004652:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004655:	76 0a                	jbe    c0004661 <f_truncate+0x8e>
c0004657:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000465a:	89 d8                	mov    eax,ebx
c000465c:	e8 e1 eb ff ff       	call   c0003242 <remove_chain>
c0004661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004664:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004667:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000466a:	83 ca 40             	or     edx,0x40
c000466d:	85 c0                	test   eax,eax
c000466f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004672:	75 2f                	jne    c00046a3 <f_truncate+0xd0>
c0004674:	84 d2                	test   dl,dl
c0004676:	79 37                	jns    c00046af <f_truncate+0xdc>
c0004678:	6a 01                	push   0x1
c000467a:	8d 43 28             	lea    eax,[ebx+0x28]
c000467d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004680:	50                   	push   eax
c0004681:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004685:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004689:	50                   	push   eax
c000468a:	e8 88 d4 ff ff       	call   c0001b17 <disk_write>
c000468f:	83 c4 10             	add    esp,0x10
c0004692:	85 c0                	test   eax,eax
c0004694:	75 08                	jne    c000469e <f_truncate+0xcb>
c0004696:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000469a:	31 f6                	xor    esi,esi
c000469c:	eb 11                	jmp    c00046af <f_truncate+0xdc>
c000469e:	b8 01 00 00 00       	mov    eax,0x1
c00046a3:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00046a6:	89 c6                	mov    esi,eax
c00046a8:	eb 05                	jmp    c00046af <f_truncate+0xdc>
c00046aa:	be 07 00 00 00       	mov    esi,0x7
c00046af:	89 f0                	mov    eax,esi
c00046b1:	83 c4 14             	add    esp,0x14
c00046b4:	5b                   	pop    ebx
c00046b5:	5e                   	pop    esi
c00046b6:	c3                   	ret    

c00046b7 <f_unlink>:
c00046b7:	55                   	push   ebp
c00046b8:	b9 02 00 00 00       	mov    ecx,0x2
c00046bd:	57                   	push   edi
c00046be:	56                   	push   esi
c00046bf:	53                   	push   ebx
c00046c0:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00046c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046ca:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00046d1:	e8 ef da ff ff       	call   c00021c5 <mount_volume>
c00046d6:	85 c0                	test   eax,eax
c00046d8:	0f 85 f0 00 00 00    	jne    c00047ce <f_unlink+0x117>
c00046de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046e2:	83 ec 0c             	sub    esp,0xc
c00046e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00046e9:	68 00 02 00 00       	push   0x200
c00046ee:	e8 a5 11 00 00       	call   c0005898 <ff_memalloc>
c00046f3:	83 c4 10             	add    esp,0x10
c00046f6:	89 c3                	mov    ebx,eax
c00046f8:	b8 11 00 00 00       	mov    eax,0x11
c00046fd:	85 db                	test   ebx,ebx
c00046ff:	0f 84 c9 00 00 00    	je     c00047ce <f_unlink+0x117>
c0004705:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004709:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004710:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004713:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004717:	e8 b3 ef ff ff       	call   c00036cf <follow_path>
c000471c:	85 c0                	test   eax,eax
c000471e:	0f 85 96 00 00 00    	jne    c00047ba <f_unlink+0x103>
c0004724:	b8 06 00 00 00       	mov    eax,0x6
c0004729:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000472e:	0f 88 86 00 00 00    	js     c00047ba <f_unlink+0x103>
c0004734:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004739:	f7 c5 01 00 00 00    	test   ebp,0x1
c000473f:	74 07                	je     c0004748 <f_unlink+0x91>
c0004741:	b8 07 00 00 00       	mov    eax,0x7
c0004746:	eb 72                	jmp    c00047ba <f_unlink+0x103>
c0004748:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000474c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004750:	8a 07                	mov    al,BYTE PTR [edi]
c0004752:	e8 96 e7 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004757:	83 e5 10             	and    ebp,0x10
c000475a:	89 c6                	mov    esi,eax
c000475c:	75 0f                	jne    c000476d <f_unlink+0xb6>
c000475e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004762:	e8 e7 ed ff ff       	call   c000354e <dir_remove>
c0004767:	85 c0                	test   eax,eax
c0004769:	74 2f                	je     c000479a <f_unlink+0xe3>
c000476b:	eb 4d                	jmp    c00047ba <f_unlink+0x103>
c000476d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004771:	31 d2                	xor    edx,edx
c0004773:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004777:	8d 44 24 50          	lea    eax,[esp+0x50]
c000477b:	e8 c0 e8 ff ff       	call   c0003040 <dir_sdi>
c0004780:	85 c0                	test   eax,eax
c0004782:	75 36                	jne    c00047ba <f_unlink+0x103>
c0004784:	31 d2                	xor    edx,edx
c0004786:	8d 44 24 50          	lea    eax,[esp+0x50]
c000478a:	e8 a2 ec ff ff       	call   c0003431 <dir_read>
c000478f:	85 c0                	test   eax,eax
c0004791:	74 ae                	je     c0004741 <f_unlink+0x8a>
c0004793:	83 f8 04             	cmp    eax,0x4
c0004796:	75 22                	jne    c00047ba <f_unlink+0x103>
c0004798:	eb c4                	jmp    c000475e <f_unlink+0xa7>
c000479a:	85 f6                	test   esi,esi
c000479c:	75 0b                	jne    c00047a9 <f_unlink+0xf2>
c000479e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047a2:	e8 0b e3 ff ff       	call   c0002ab2 <sync_fs>
c00047a7:	eb 11                	jmp    c00047ba <f_unlink+0x103>
c00047a9:	31 c9                	xor    ecx,ecx
c00047ab:	89 f2                	mov    edx,esi
c00047ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00047b1:	e8 8c ea ff ff       	call   c0003242 <remove_chain>
c00047b6:	85 c0                	test   eax,eax
c00047b8:	74 e4                	je     c000479e <f_unlink+0xe7>
c00047ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047be:	83 ec 0c             	sub    esp,0xc
c00047c1:	53                   	push   ebx
c00047c2:	e8 e9 10 00 00       	call   c00058b0 <ff_memfree>
c00047c7:	83 c4 10             	add    esp,0x10
c00047ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ce:	81 c4 8c 00 00 00    	add    esp,0x8c
c00047d4:	5b                   	pop    ebx
c00047d5:	5e                   	pop    esi
c00047d6:	5f                   	pop    edi
c00047d7:	5d                   	pop    ebp
c00047d8:	c3                   	ret    

c00047d9 <f_mkdir>:
c00047d9:	57                   	push   edi
c00047da:	b9 02 00 00 00       	mov    ecx,0x2
c00047df:	56                   	push   esi
c00047e0:	53                   	push   ebx
c00047e1:	83 ec 50             	sub    esp,0x50
c00047e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047e8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00047ec:	e8 d4 d9 ff ff       	call   c00021c5 <mount_volume>
c00047f1:	89 c3                	mov    ebx,eax
c00047f3:	85 c0                	test   eax,eax
c00047f5:	0f 85 70 01 00 00    	jne    c000496b <f_mkdir+0x192>
c00047fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ff:	bb 11 00 00 00       	mov    ebx,0x11
c0004804:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004808:	83 ec 0c             	sub    esp,0xc
c000480b:	68 00 02 00 00       	push   0x200
c0004810:	e8 83 10 00 00       	call   c0005898 <ff_memalloc>
c0004815:	83 c4 10             	add    esp,0x10
c0004818:	89 c7                	mov    edi,eax
c000481a:	85 c0                	test   eax,eax
c000481c:	0f 84 49 01 00 00    	je     c000496b <f_mkdir+0x192>
c0004822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004826:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000482a:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000482d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004831:	e8 99 ee ff ff       	call   c00036cf <follow_path>
c0004836:	89 c3                	mov    ebx,eax
c0004838:	85 c0                	test   eax,eax
c000483a:	74 3e                	je     c000487a <f_mkdir+0xa1>
c000483c:	83 f8 04             	cmp    eax,0x4
c000483f:	75 3e                	jne    c000487f <f_mkdir+0xa6>
c0004841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004845:	31 d2                	xor    edx,edx
c0004847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000484b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000484f:	e8 b4 e8 ff ff       	call   c0003108 <create_chain>
c0004854:	89 c6                	mov    esi,eax
c0004856:	85 c0                	test   eax,eax
c0004858:	74 0c                	je     c0004866 <f_mkdir+0x8d>
c000485a:	bb 02 00 00 00       	mov    ebx,0x2
c000485f:	83 f8 01             	cmp    eax,0x1
c0004862:	74 07                	je     c000486b <f_mkdir+0x92>
c0004864:	eb 2a                	jmp    c0004890 <f_mkdir+0xb7>
c0004866:	bb 07 00 00 00       	mov    ebx,0x7
c000486b:	31 c9                	xor    ecx,ecx
c000486d:	89 f2                	mov    edx,esi
c000486f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004873:	e8 ca e9 ff ff       	call   c0003242 <remove_chain>
c0004878:	eb 05                	jmp    c000487f <f_mkdir+0xa6>
c000487a:	bb 08 00 00 00       	mov    ebx,0x8
c000487f:	83 ec 0c             	sub    esp,0xc
c0004882:	57                   	push   edi
c0004883:	e8 28 10 00 00       	call   c00058b0 <ff_memfree>
c0004888:	83 c4 10             	add    esp,0x10
c000488b:	e9 db 00 00 00       	jmp    c000496b <f_mkdir+0x192>
c0004890:	bb 01 00 00 00       	mov    ebx,0x1
c0004895:	83 f8 ff             	cmp    eax,0xffffffff
c0004898:	74 d1                	je     c000486b <f_mkdir+0x92>
c000489a:	89 f2                	mov    edx,esi
c000489c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a0:	e8 73 dd ff ff       	call   c0002618 <dir_clear>
c00048a5:	89 c3                	mov    ebx,eax
c00048a7:	85 c0                	test   eax,eax
c00048a9:	75 c0                	jne    c000486b <f_mkdir+0x92>
c00048ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00048b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048b4:	ba 20 00 00 00       	mov    edx,0x20
c00048b9:	83 c0 34             	add    eax,0x34
c00048bc:	e8 cc d2 ff ff       	call   c0001b8d <mem_set>
c00048c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00048ca:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c00048ce:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c00048d2:	83 c0 4a             	add    eax,0x4a
c00048d5:	e8 9b d2 ff ff       	call   c0001b75 <st_dword>
c00048da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048de:	89 f1                	mov    ecx,esi
c00048e0:	8d 50 34             	lea    edx,[eax+0x34]
c00048e3:	e8 2e e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c00048e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048ec:	b9 20 00 00 00       	mov    ecx,0x20
c00048f1:	8d 50 34             	lea    edx,[eax+0x34]
c00048f4:	83 c0 54             	add    eax,0x54
c00048f7:	e8 7c d2 ff ff       	call   c0001b78 <mem_cpy>
c00048fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004900:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004904:	8d 50 54             	lea    edx,[eax+0x54]
c0004907:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c000490b:	e8 06 e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004914:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004918:	8d 44 24 20          	lea    eax,[esp+0x20]
c000491c:	e8 42 ee ff ff       	call   c0003763 <dir_register>
c0004921:	89 c3                	mov    ebx,eax
c0004923:	85 c0                	test   eax,eax
c0004925:	0f 85 40 ff ff ff    	jne    c000486b <f_mkdir+0x92>
c000492b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000492f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004934:	83 c0 16             	add    eax,0x16
c0004937:	e8 39 d2 ff ff       	call   c0001b75 <st_dword>
c000493c:	89 f1                	mov    ecx,esi
c000493e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004946:	e8 cb e5 ff ff       	call   c0002f16 <st_clust.isra.1>
c000494b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004953:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004957:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000495f:	e8 4e e1 ff ff       	call   c0002ab2 <sync_fs>
c0004964:	89 c3                	mov    ebx,eax
c0004966:	e9 14 ff ff ff       	jmp    c000487f <f_mkdir+0xa6>
c000496b:	83 c4 50             	add    esp,0x50
c000496e:	89 d8                	mov    eax,ebx
c0004970:	5b                   	pop    ebx
c0004971:	5e                   	pop    esi
c0004972:	5f                   	pop    edi
c0004973:	c3                   	ret    

c0004974 <f_rename>:
c0004974:	57                   	push   edi
c0004975:	56                   	push   esi
c0004976:	53                   	push   ebx
c0004977:	81 ec a0 00 00 00    	sub    esp,0xa0
c000497d:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004984:	e8 f2 d5 ff ff       	call   c0001f7b <get_ldnumber>
c0004989:	b9 02 00 00 00       	mov    ecx,0x2
c000498e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004992:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004999:	e8 27 d8 ff ff       	call   c00021c5 <mount_volume>
c000499e:	85 c0                	test   eax,eax
c00049a0:	0f 85 7a 01 00 00    	jne    c0004b20 <f_rename+0x1ac>
c00049a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049aa:	83 ec 0c             	sub    esp,0xc
c00049ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00049b1:	68 00 02 00 00       	push   0x200
c00049b6:	e8 dd 0e 00 00       	call   c0005898 <ff_memalloc>
c00049bb:	83 c4 10             	add    esp,0x10
c00049be:	89 c6                	mov    esi,eax
c00049c0:	b8 11 00 00 00       	mov    eax,0x11
c00049c5:	85 f6                	test   esi,esi
c00049c7:	0f 84 53 01 00 00    	je     c0004b20 <f_rename+0x1ac>
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c00049d8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049db:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049df:	e8 eb ec ff ff       	call   c00036cf <follow_path>
c00049e4:	85 c0                	test   eax,eax
c00049e6:	0f 85 20 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049ec:	b8 06 00 00 00       	mov    eax,0x6
c00049f1:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c00049f6:	0f 85 10 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049fc:	b9 20 00 00 00       	mov    ecx,0x20
c0004a01:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a05:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a09:	e8 6a d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a0e:	b9 30 00 00 00       	mov    ecx,0x30
c0004a13:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004a17:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a1b:	e8 58 d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a20:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004a27:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a2b:	e8 9f ec ff ff       	call   c00036cf <follow_path>
c0004a30:	85 c0                	test   eax,eax
c0004a32:	75 20                	jne    c0004a54 <f_rename+0xe0>
c0004a34:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004a38:	b8 08 00 00 00       	mov    eax,0x8
c0004a3d:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004a41:	0f 85 c5 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a47:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004a4b:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004a52:	eb 03                	jmp    c0004a57 <f_rename+0xe3>
c0004a54:	83 f8 04             	cmp    eax,0x4
c0004a57:	0f 85 af 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a5d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a61:	e8 fd ec ff ff       	call   c0003763 <dir_register>
c0004a66:	85 c0                	test   eax,eax
c0004a68:	0f 85 9e 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a6e:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004a75:	b9 13 00 00 00       	mov    ecx,0x13
c0004a7a:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004a7d:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004a81:	e8 f2 d0 ff ff       	call   c0001b78 <mem_cpy>
c0004a86:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004a8a:	a8 10                	test   al,0x10
c0004a8c:	75 03                	jne    c0004a91 <f_rename+0x11d>
c0004a8e:	83 c8 20             	or     eax,0x20
c0004a91:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a98:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004a9c:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004aa0:	74 54                	je     c0004af6 <f_rename+0x182>
c0004aa2:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004aa6:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004aaa:	74 4a                	je     c0004af6 <f_rename+0x182>
c0004aac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab0:	89 da                	mov    edx,ebx
c0004ab2:	8a 07                	mov    al,BYTE PTR [edi]
c0004ab4:	e8 34 e4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004ab9:	89 c2                	mov    edx,eax
c0004abb:	89 f8                	mov    eax,edi
c0004abd:	e8 d0 d2 ff ff       	call   c0001d92 <clst2sect>
c0004ac2:	89 c2                	mov    edx,eax
c0004ac4:	b8 02 00 00 00       	mov    eax,0x2
c0004ac9:	85 d2                	test   edx,edx
c0004acb:	74 3f                	je     c0004b0c <f_rename+0x198>
c0004acd:	89 f8                	mov    eax,edi
c0004acf:	e8 9e d5 ff ff       	call   c0002072 <move_window>
c0004ad4:	85 c0                	test   eax,eax
c0004ad6:	75 34                	jne    c0004b0c <f_rename+0x198>
c0004ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004adc:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ae0:	75 14                	jne    c0004af6 <f_rename+0x182>
c0004ae2:	8d 50 54             	lea    edx,[eax+0x54]
c0004ae5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ae9:	e8 28 e4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004af6:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004afa:	e8 4f ea ff ff       	call   c000354e <dir_remove>
c0004aff:	85 c0                	test   eax,eax
c0004b01:	75 09                	jne    c0004b0c <f_rename+0x198>
c0004b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b07:	e8 a6 df ff ff       	call   c0002ab2 <sync_fs>
c0004b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b10:	83 ec 0c             	sub    esp,0xc
c0004b13:	56                   	push   esi
c0004b14:	e8 97 0d 00 00       	call   c00058b0 <ff_memfree>
c0004b19:	83 c4 10             	add    esp,0x10
c0004b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b20:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004b26:	5b                   	pop    ebx
c0004b27:	5e                   	pop    esi
c0004b28:	5f                   	pop    edi
c0004b29:	c3                   	ret    

c0004b2a <f_chmod>:
c0004b2a:	57                   	push   edi
c0004b2b:	b9 02 00 00 00       	mov    ecx,0x2
c0004b30:	56                   	push   esi
c0004b31:	53                   	push   ebx
c0004b32:	83 ec 50             	sub    esp,0x50
c0004b35:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004b39:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004b3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b41:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b45:	e8 7b d6 ff ff       	call   c00021c5 <mount_volume>
c0004b4a:	85 c0                	test   eax,eax
c0004b4c:	75 7e                	jne    c0004bcc <f_chmod+0xa2>
c0004b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b52:	83 ec 0c             	sub    esp,0xc
c0004b55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b59:	68 00 02 00 00       	push   0x200
c0004b5e:	e8 35 0d 00 00       	call   c0005898 <ff_memalloc>
c0004b63:	83 c4 10             	add    esp,0x10
c0004b66:	89 c6                	mov    esi,eax
c0004b68:	b8 11 00 00 00       	mov    eax,0x11
c0004b6d:	85 f6                	test   esi,esi
c0004b6f:	74 5b                	je     c0004bcc <f_chmod+0xa2>
c0004b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b75:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b79:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b80:	e8 4a eb ff ff       	call   c00036cf <follow_path>
c0004b85:	85 c0                	test   eax,eax
c0004b87:	75 2f                	jne    c0004bb8 <f_chmod+0x8e>
c0004b89:	b8 06 00 00 00       	mov    eax,0x6
c0004b8e:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004b93:	75 23                	jne    c0004bb8 <f_chmod+0x8e>
c0004b95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b99:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004b9c:	21 fb                	and    ebx,edi
c0004b9e:	83 e3 27             	and    ebx,0x27
c0004ba1:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004ba4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bb3:	e8 fa de ff ff       	call   c0002ab2 <sync_fs>
c0004bb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	56                   	push   esi
c0004bc0:	e8 eb 0c 00 00       	call   c00058b0 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bcc:	83 c4 50             	add    esp,0x50
c0004bcf:	5b                   	pop    ebx
c0004bd0:	5e                   	pop    esi
c0004bd1:	5f                   	pop    edi
c0004bd2:	c3                   	ret    

c0004bd3 <f_utime>:
c0004bd3:	56                   	push   esi
c0004bd4:	b9 02 00 00 00       	mov    ecx,0x2
c0004bd9:	53                   	push   ebx
c0004bda:	83 ec 54             	sub    esp,0x54
c0004bdd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004be1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004be5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004be9:	e8 d7 d5 ff ff       	call   c00021c5 <mount_volume>
c0004bee:	85 c0                	test   eax,eax
c0004bf0:	0f 85 85 00 00 00    	jne    c0004c7b <f_utime+0xa8>
c0004bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bfa:	83 ec 0c             	sub    esp,0xc
c0004bfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c01:	68 00 02 00 00       	push   0x200
c0004c06:	e8 8d 0c 00 00       	call   c0005898 <ff_memalloc>
c0004c0b:	83 c4 10             	add    esp,0x10
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	b8 11 00 00 00       	mov    eax,0x11
c0004c15:	85 db                	test   ebx,ebx
c0004c17:	74 62                	je     c0004c7b <f_utime+0xa8>
c0004c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c1d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c21:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c28:	e8 a2 ea ff ff       	call   c00036cf <follow_path>
c0004c2d:	85 c0                	test   eax,eax
c0004c2f:	75 36                	jne    c0004c67 <f_utime+0x94>
c0004c31:	b8 06 00 00 00       	mov    eax,0x6
c0004c36:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004c3b:	75 2a                	jne    c0004c67 <f_utime+0x94>
c0004c3d:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004c41:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004c45:	c1 e2 10             	shl    edx,0x10
c0004c48:	09 c2                	or     edx,eax
c0004c4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c4e:	83 c0 16             	add    eax,0x16
c0004c51:	e8 1f cf ff ff       	call   c0001b75 <st_dword>
c0004c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c62:	e8 4b de ff ff       	call   c0002ab2 <sync_fs>
c0004c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6b:	83 ec 0c             	sub    esp,0xc
c0004c6e:	53                   	push   ebx
c0004c6f:	e8 3c 0c 00 00       	call   c00058b0 <ff_memfree>
c0004c74:	83 c4 10             	add    esp,0x10
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	83 c4 54             	add    esp,0x54
c0004c7e:	5b                   	pop    ebx
c0004c7f:	5e                   	pop    esi
c0004c80:	c3                   	ret    

c0004c81 <f_getlabel>:
c0004c81:	55                   	push   ebp
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	57                   	push   edi
c0004c85:	56                   	push   esi
c0004c86:	53                   	push   ebx
c0004c87:	83 ec 5c             	sub    esp,0x5c
c0004c8a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c8e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c92:	e8 2e d5 ff ff       	call   c00021c5 <mount_volume>
c0004c97:	89 c6                	mov    esi,eax
c0004c99:	85 c0                	test   eax,eax
c0004c9b:	0f 85 27 01 00 00    	jne    c0004dc8 <f_getlabel+0x147>
c0004ca1:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ca6:	0f 84 d1 00 00 00    	je     c0004d7d <f_getlabel+0xfc>
c0004cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cb6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004cbe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc2:	e8 79 e3 ff ff       	call   c0003040 <dir_sdi>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	0f 85 a2 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ccf:	ba 01 00 00 00       	mov    edx,0x1
c0004cd4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cd8:	e8 54 e7 ff ff       	call   c0003431 <dir_read>
c0004cdd:	85 c0                	test   eax,eax
c0004cdf:	0f 85 8c 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ce5:	31 db                	xor    ebx,ebx
c0004ce7:	31 c9                	xor    ecx,ecx
c0004ce9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ced:	8d 79 01             	lea    edi,[ecx+0x1]
c0004cf0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004cf5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004cfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cfe:	e8 ca ce ff ff       	call   c0001bcd <dbc_1st>
c0004d03:	85 c0                	test   eax,eax
c0004d05:	74 16                	je     c0004d1d <f_getlabel+0x9c>
c0004d07:	83 ff 0b             	cmp    edi,0xb
c0004d0a:	74 11                	je     c0004d1d <f_getlabel+0x9c>
c0004d0c:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004d11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d15:	8d 79 02             	lea    edi,[ecx+0x2]
c0004d18:	c1 e0 08             	shl    eax,0x8
c0004d1b:	09 c2                	or     edx,eax
c0004d1d:	0f b7 d2             	movzx  edx,dx
c0004d20:	50                   	push   eax
c0004d21:	50                   	push   eax
c0004d22:	68 b5 01 00 00       	push   0x1b5
c0004d27:	52                   	push   edx
c0004d28:	e8 3b 0c 00 00       	call   c0005968 <ff_oem2uni>
c0004d2d:	83 c4 10             	add    esp,0x10
c0004d30:	66 85 c0             	test   ax,ax
c0004d33:	74 25                	je     c0004d5a <f_getlabel+0xd9>
c0004d35:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004d39:	0f b7 c0             	movzx  eax,ax
c0004d3c:	01 da                	add    edx,ebx
c0004d3e:	b9 04 00 00 00       	mov    ecx,0x4
c0004d43:	e8 51 cf ff ff       	call   c0001c99 <put_utf>
c0004d48:	84 c0                	test   al,al
c0004d4a:	74 0e                	je     c0004d5a <f_getlabel+0xd9>
c0004d4c:	0f b6 c0             	movzx  eax,al
c0004d4f:	01 c3                	add    ebx,eax
c0004d51:	83 ff 0b             	cmp    edi,0xb
c0004d54:	74 06                	je     c0004d5c <f_getlabel+0xdb>
c0004d56:	89 f9                	mov    ecx,edi
c0004d58:	eb 8f                	jmp    c0004ce9 <f_getlabel+0x68>
c0004d5a:	31 db                	xor    ebx,ebx
c0004d5c:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004d60:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004d63:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004d67:	74 14                	je     c0004d7d <f_getlabel+0xfc>
c0004d69:	4b                   	dec    ebx
c0004d6a:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004d6d:	74 f1                	je     c0004d60 <f_getlabel+0xdf>
c0004d6f:	eb 0c                	jmp    c0004d7d <f_getlabel+0xfc>
c0004d71:	83 f8 04             	cmp    eax,0x4
c0004d74:	75 50                	jne    c0004dc6 <f_getlabel+0x145>
c0004d76:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004d7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d7d:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004d82:	74 44                	je     c0004dc8 <f_getlabel+0x147>
c0004d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d88:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004d8b:	e8 e2 d2 ff ff       	call   c0002072 <move_window>
c0004d90:	89 c6                	mov    esi,eax
c0004d92:	85 c0                	test   eax,eax
c0004d94:	75 32                	jne    c0004dc8 <f_getlabel+0x147>
c0004d96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004d9a:	b8 43 00 00 00       	mov    eax,0x43
c0004d9f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004da1:	80 f9 03             	cmp    cl,0x3
c0004da4:	74 0f                	je     c0004db5 <f_getlabel+0x134>
c0004da6:	31 c0                	xor    eax,eax
c0004da8:	80 f9 04             	cmp    cl,0x4
c0004dab:	0f 94 c0             	sete   al
c0004dae:	48                   	dec    eax
c0004daf:	83 e0 c3             	and    eax,0xffffffc3
c0004db2:	83 c0 64             	add    eax,0x64
c0004db5:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004db9:	e8 9b cd ff ff       	call   c0001b59 <ld_dword>
c0004dbe:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004dc2:	89 07                	mov    DWORD PTR [edi],eax
c0004dc4:	eb 02                	jmp    c0004dc8 <f_getlabel+0x147>
c0004dc6:	89 c6                	mov    esi,eax
c0004dc8:	83 c4 5c             	add    esp,0x5c
c0004dcb:	89 f0                	mov    eax,esi
c0004dcd:	5b                   	pop    ebx
c0004dce:	5e                   	pop    esi
c0004dcf:	5f                   	pop    edi
c0004dd0:	5d                   	pop    ebp
c0004dd1:	c3                   	ret    

c0004dd2 <f_setlabel>:
c0004dd2:	56                   	push   esi
c0004dd3:	b9 02 00 00 00       	mov    ecx,0x2
c0004dd8:	53                   	push   ebx
c0004dd9:	83 ec 54             	sub    esp,0x54
c0004ddc:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004de0:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004de4:	e8 dc d3 ff ff       	call   c00021c5 <mount_volume>
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	85 c0                	test   eax,eax
c0004ded:	0f 85 67 01 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004df3:	b9 0b 00 00 00       	mov    ecx,0xb
c0004df8:	ba 20 00 00 00       	mov    edx,0x20
c0004dfd:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004e01:	31 db                	xor    ebx,ebx
c0004e03:	e8 85 cd ff ff       	call   c0001b8d <mem_set>
c0004e08:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004e0c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e0f:	76 5b                	jbe    c0004e6c <f_setlabel+0x9a>
c0004e11:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e15:	e8 b9 cd ff ff       	call   c0001bd3 <tchar2uni>
c0004e1a:	3d ff ff 00 00       	cmp    eax,0xffff
c0004e1f:	76 0a                	jbe    c0004e2b <f_setlabel+0x59>
c0004e21:	be 06 00 00 00       	mov    esi,0x6
c0004e26:	e9 2f 01 00 00       	jmp    c0004f5a <f_setlabel+0x188>
c0004e2b:	83 ec 0c             	sub    esp,0xc
c0004e2e:	50                   	push   eax
c0004e2f:	e8 ac 0b 00 00       	call   c00059e0 <ff_wtoupper>
c0004e34:	5a                   	pop    edx
c0004e35:	59                   	pop    ecx
c0004e36:	68 b5 01 00 00       	push   0x1b5
c0004e3b:	50                   	push   eax
c0004e3c:	e8 87 0a 00 00       	call   c00058c8 <ff_uni2oem>
c0004e41:	83 c4 10             	add    esp,0x10
c0004e44:	89 c6                	mov    esi,eax
c0004e46:	66 85 c0             	test   ax,ax
c0004e49:	74 d6                	je     c0004e21 <f_setlabel+0x4f>
c0004e4b:	0f b7 d0             	movzx  edx,ax
c0004e4e:	b8 70 c5 01 c0       	mov    eax,0xc001c570
c0004e53:	e8 63 cd ff ff       	call   c0001bbb <chk_chr>
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	75 c5                	jne    c0004e21 <f_setlabel+0x4f>
c0004e5c:	66 81 fe ff 00       	cmp    si,0xff
c0004e61:	0f 87 c9 00 00 00    	ja     c0004f30 <f_setlabel+0x15e>
c0004e67:	e9 e4 00 00 00       	jmp    c0004f50 <f_setlabel+0x17e>
c0004e6c:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0004e71:	74 ae                	je     c0004e21 <f_setlabel+0x4f>
c0004e73:	85 db                	test   ebx,ebx
c0004e75:	74 0e                	je     c0004e85 <f_setlabel+0xb3>
c0004e77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0004e7a:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0004e7f:	75 04                	jne    c0004e85 <f_setlabel+0xb3>
c0004e81:	89 c3                	mov    ebx,eax
c0004e83:	eb ee                	jmp    c0004e73 <f_setlabel+0xa1>
c0004e85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004e89:	31 d2                	xor    edx,edx
c0004e8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e8f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 a0 e1 ff ff       	call   c0003040 <dir_sdi>
c0004ea0:	89 c6                	mov    esi,eax
c0004ea2:	85 c0                	test   eax,eax
c0004ea4:	0f 85 b0 00 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004eaa:	ba 01 00 00 00       	mov    edx,0x1
c0004eaf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb3:	e8 79 e5 ff ff       	call   c0003431 <dir_read>
c0004eb8:	85 c0                	test   eax,eax
c0004eba:	75 18                	jne    c0004ed4 <f_setlabel+0x102>
c0004ebc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ec0:	85 db                	test   ebx,ebx
c0004ec2:	74 0b                	je     c0004ecf <f_setlabel+0xfd>
c0004ec4:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ec9:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004ecd:	eb 47                	jmp    c0004f16 <f_setlabel+0x144>
c0004ecf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0004ed2:	eb 47                	jmp    c0004f1b <f_setlabel+0x149>
c0004ed4:	83 f8 04             	cmp    eax,0x4
c0004ed7:	75 53                	jne    c0004f2c <f_setlabel+0x15a>
c0004ed9:	85 db                	test   ebx,ebx
c0004edb:	74 7d                	je     c0004f5a <f_setlabel+0x188>
c0004edd:	ba 01 00 00 00       	mov    edx,0x1
c0004ee2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ee6:	e8 e5 e4 ff ff       	call   c00033d0 <dir_alloc>
c0004eeb:	89 c6                	mov    esi,eax
c0004eed:	85 c0                	test   eax,eax
c0004eef:	75 69                	jne    c0004f5a <f_setlabel+0x188>
c0004ef1:	b9 20 00 00 00       	mov    ecx,0x20
c0004ef6:	31 d2                	xor    edx,edx
c0004ef8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004efc:	e8 8c cc ff ff       	call   c0001b8d <mem_set>
c0004f01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f05:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f0a:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0004f0e:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004f12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f16:	e8 5d cc ff ff       	call   c0001b78 <mem_cpy>
c0004f1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f27:	e8 86 db ff ff       	call   c0002ab2 <sync_fs>
c0004f2c:	89 c6                	mov    esi,eax
c0004f2e:	eb 2a                	jmp    c0004f5a <f_setlabel+0x188>
c0004f30:	83 fb 09             	cmp    ebx,0x9
c0004f33:	0f 87 e8 fe ff ff    	ja     c0004e21 <f_setlabel+0x4f>
c0004f39:	89 f0                	mov    eax,esi
c0004f3b:	66 c1 e8 08          	shr    ax,0x8
c0004f3f:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f43:	43                   	inc    ebx
c0004f44:	89 f0                	mov    eax,esi
c0004f46:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f4a:	43                   	inc    ebx
c0004f4b:	e9 b8 fe ff ff       	jmp    c0004e08 <f_setlabel+0x36>
c0004f50:	83 fb 0a             	cmp    ebx,0xa
c0004f53:	76 ef                	jbe    c0004f44 <f_setlabel+0x172>
c0004f55:	e9 c7 fe ff ff       	jmp    c0004e21 <f_setlabel+0x4f>
c0004f5a:	89 f0                	mov    eax,esi
c0004f5c:	83 c4 54             	add    esp,0x54
c0004f5f:	5b                   	pop    ebx
c0004f60:	5e                   	pop    esi
c0004f61:	c3                   	ret    

c0004f62 <f_expand>:
c0004f62:	55                   	push   ebp
c0004f63:	57                   	push   edi
c0004f64:	56                   	push   esi
c0004f65:	53                   	push   ebx
c0004f66:	83 ec 2c             	sub    esp,0x2c
c0004f69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f75:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f79:	89 d8                	mov    eax,ebx
c0004f7b:	e8 48 d0 ff ff       	call   c0001fc8 <validate>
c0004f80:	89 c6                	mov    esi,eax
c0004f82:	85 c0                	test   eax,eax
c0004f84:	0f 85 2e 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f8a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004f8e:	85 f6                	test   esi,esi
c0004f90:	0f 85 22 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f96:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0004f9b:	75 0a                	jne    c0004fa7 <f_expand+0x45>
c0004f9d:	be 07 00 00 00       	mov    esi,0x7
c0004fa2:	e9 11 01 00 00       	jmp    c00050b8 <f_expand+0x156>
c0004fa7:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0004fab:	75 f0                	jne    c0004f9d <f_expand+0x3b>
c0004fad:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004fb1:	74 ea                	je     c0004f9d <f_expand+0x3b>
c0004fb3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004fb7:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0004fbb:	c1 e1 09             	shl    ecx,0x9
c0004fbe:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004fc1:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0004fc5:	0f 95 c0             	setne  al
c0004fc8:	31 d2                	xor    edx,edx
c0004fca:	0f b6 c0             	movzx  eax,al
c0004fcd:	89 c7                	mov    edi,eax
c0004fcf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004fd3:	f7 f1                	div    ecx
c0004fd5:	01 f8                	add    eax,edi
c0004fd7:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0004fda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004fde:	83 ff 01             	cmp    edi,0x1
c0004fe1:	76 05                	jbe    c0004fe8 <f_expand+0x86>
c0004fe3:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0004fe6:	77 05                	ja     c0004fed <f_expand+0x8b>
c0004fe8:	bf 02 00 00 00       	mov    edi,0x2
c0004fed:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004ff0:	89 fd                	mov    ebp,edi
c0004ff2:	31 c9                	xor    ecx,ecx
c0004ff4:	89 ea                	mov    edx,ebp
c0004ff6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004ffa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004ffc:	45                   	inc    ebp
c0004ffd:	e8 3c df ff ff       	call   c0002f3e <get_fat.isra.2>
c0005002:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000500a:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000500d:	77 05                	ja     c0005014 <f_expand+0xb2>
c000500f:	bd 02 00 00 00       	mov    ebp,0x2
c0005014:	83 f8 01             	cmp    eax,0x1
c0005017:	74 20                	je     c0005039 <f_expand+0xd7>
c0005019:	83 f8 ff             	cmp    eax,0xffffffff
c000501c:	74 22                	je     c0005040 <f_expand+0xde>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 09                	jne    c000502b <f_expand+0xc9>
c0005022:	41                   	inc    ecx
c0005023:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005027:	75 07                	jne    c0005030 <f_expand+0xce>
c0005029:	eb 1c                	jmp    c0005047 <f_expand+0xe5>
c000502b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000502e:	31 c9                	xor    ecx,ecx
c0005030:	39 fd                	cmp    ebp,edi
c0005032:	75 c0                	jne    c0004ff4 <f_expand+0x92>
c0005034:	e9 64 ff ff ff       	jmp    c0004f9d <f_expand+0x3b>
c0005039:	be 02 00 00 00       	mov    esi,0x2
c000503e:	eb 78                	jmp    c00050b8 <f_expand+0x156>
c0005040:	be 01 00 00 00       	mov    esi,0x1
c0005045:	eb 71                	jmp    c00050b8 <f_expand+0x156>
c0005047:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000504c:	74 2b                	je     c0005079 <f_expand+0x117>
c000504e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005051:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005055:	85 ed                	test   ebp,ebp
c0005057:	74 24                	je     c000507d <f_expand+0x11b>
c0005059:	83 c9 ff             	or     ecx,0xffffffff
c000505c:	83 fd 01             	cmp    ebp,0x1
c000505f:	74 03                	je     c0005064 <f_expand+0x102>
c0005061:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005064:	89 fa                	mov    edx,edi
c0005066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000506a:	e8 59 d4 ff ff       	call   c00024c8 <put_fat>
c000506f:	85 c0                	test   eax,eax
c0005071:	75 43                	jne    c00050b6 <f_expand+0x154>
c0005073:	89 f8                	mov    eax,edi
c0005075:	4d                   	dec    ebp
c0005076:	47                   	inc    edi
c0005077:	eb dc                	jmp    c0005055 <f_expand+0xf3>
c0005079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000507c:	48                   	dec    eax
c000507d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005081:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005086:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005089:	74 2d                	je     c00050b8 <f_expand+0x156>
c000508b:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000508f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005092:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005095:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005099:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000509c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000509f:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00050a2:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00050a5:	39 c8                	cmp    eax,ecx
c00050a7:	77 0f                	ja     c00050b8 <f_expand+0x156>
c00050a9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00050ad:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00050b1:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050b4:	eb 02                	jmp    c00050b8 <f_expand+0x156>
c00050b6:	89 c6                	mov    esi,eax
c00050b8:	83 c4 2c             	add    esp,0x2c
c00050bb:	89 f0                	mov    eax,esi
c00050bd:	5b                   	pop    ebx
c00050be:	5e                   	pop    esi
c00050bf:	5f                   	pop    edi
c00050c0:	5d                   	pop    ebp
c00050c1:	c3                   	ret    

c00050c2 <f_mkfs>:
c00050c2:	55                   	push   ebp
c00050c3:	57                   	push   edi
c00050c4:	bf 0b 00 00 00       	mov    edi,0xb
c00050c9:	56                   	push   esi
c00050ca:	53                   	push   ebx
c00050cb:	83 ec 4c             	sub    esp,0x4c
c00050ce:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00050d2:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00050d6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050da:	e8 9c ce ff ff       	call   c0001f7b <get_ldnumber>
c00050df:	85 c0                	test   eax,eax
c00050e1:	0f 88 a6 07 00 00    	js     c000588d <f_mkfs+0x7cb>
c00050e7:	8b 14 85 20 f4 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0be0]
c00050ee:	85 d2                	test   edx,edx
c00050f0:	74 03                	je     c00050f5 <f_mkfs+0x33>
c00050f2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00050f5:	85 db                	test   ebx,ebx
c00050f7:	75 05                	jne    c00050fe <f_mkfs+0x3c>
c00050f9:	bb 60 c5 01 c0       	mov    ebx,0xc001c560
c00050fe:	83 ec 0c             	sub    esp,0xc
c0005101:	0f b6 c0             	movzx  eax,al
c0005104:	bf 03 00 00 00       	mov    edi,0x3
c0005109:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000510d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005111:	e8 e8 c9 ff ff       	call   c0001afe <disk_initialize>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	a8 01                	test   al,0x1
c000511b:	0f 85 6c 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c0005121:	bf 0a 00 00 00       	mov    edi,0xa
c0005126:	a8 04                	test   al,0x4
c0005128:	0f 85 5f 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c000512e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005131:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005135:	85 c0                	test   eax,eax
c0005137:	75 20                	jne    c0005159 <f_mkfs+0x97>
c0005139:	51                   	push   ecx
c000513a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000513e:	50                   	push   eax
c000513f:	6a 03                	push   0x3
c0005141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005145:	e8 e3 c9 ff ff       	call   c0001b2d <disk_ioctl>
c000514a:	83 c4 10             	add    esp,0x10
c000514d:	85 c0                	test   eax,eax
c000514f:	74 08                	je     c0005159 <f_mkfs+0x97>
c0005151:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005159:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000515d:	8d 42 ff             	lea    eax,[edx-0x1]
c0005160:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005165:	77 04                	ja     c000516b <f_mkfs+0xa9>
c0005167:	85 c2                	test   edx,eax
c0005169:	74 08                	je     c0005173 <f_mkfs+0xb1>
c000516b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005173:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005176:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000517a:	48                   	dec    eax
c000517b:	3c 01                	cmp    al,0x1
c000517d:	76 05                	jbe    c0005184 <f_mkfs+0xc2>
c000517f:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005184:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518b:	48                   	dec    eax
c000518c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005191:	77 07                	ja     c000519a <f_mkfs+0xd8>
c0005193:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0005198:	74 08                	je     c00051a2 <f_mkfs+0xe0>
c000519a:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00051a2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00051a5:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00051ab:	77 07                	ja     c00051b4 <f_mkfs+0xf2>
c00051ad:	8d 47 ff             	lea    eax,[edi-0x1]
c00051b0:	85 f8                	test   eax,edi
c00051b2:	74 02                	je     c00051b6 <f_mkfs+0xf4>
c00051b4:	31 ff                	xor    edi,edi
c00051b6:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00051be:	77 0a                	ja     c00051ca <f_mkfs+0x108>
c00051c0:	bf 11 00 00 00       	mov    edi,0x11
c00051c5:	e9 c3 06 00 00       	jmp    c000588d <f_mkfs+0x7cb>
c00051ca:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00051cc:	89 ee                	mov    esi,ebp
c00051ce:	85 ed                	test   ebp,ebp
c00051d0:	75 1b                	jne    c00051ed <f_mkfs+0x12b>
c00051d2:	83 ec 0c             	sub    esp,0xc
c00051d5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00051d9:	25 00 fe ff ff       	and    eax,0xfffffe00
c00051de:	50                   	push   eax
c00051df:	e8 b4 06 00 00       	call   c0005898 <ff_memalloc>
c00051e4:	83 c4 10             	add    esp,0x10
c00051e7:	89 c6                	mov    esi,eax
c00051e9:	85 c0                	test   eax,eax
c00051eb:	74 d3                	je     c00051c0 <f_mkfs+0xfe>
c00051ed:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00051f5:	52                   	push   edx
c00051f6:	8d 44 24 38          	lea    eax,[esp+0x38]
c00051fa:	50                   	push   eax
c00051fb:	6a 01                	push   0x1
c00051fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005201:	e8 27 c9 ff ff       	call   c0001b2d <disk_ioctl>
c0005206:	83 c4 10             	add    esp,0x10
c0005209:	85 c0                	test   eax,eax
c000520b:	0f 85 25 06 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005211:	88 d8                	mov    al,bl
c0005213:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000521b:	24 08                	and    al,0x8
c000521d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005221:	75 18                	jne    c000523b <f_mkfs+0x179>
c0005223:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005227:	83 f8 3f             	cmp    eax,0x3f
c000522a:	76 0f                	jbe    c000523b <f_mkfs+0x179>
c000522c:	83 e8 3f             	sub    eax,0x3f
c000522f:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c0005237:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000523b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000523f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005243:	83 f8 7f             	cmp    eax,0x7f
c0005246:	0f 86 52 02 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c000524c:	b9 80 00 00 00       	mov    ecx,0x80
c0005251:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005257:	77 05                	ja     c000525e <f_mkfs+0x19c>
c0005259:	89 f9                	mov    ecx,edi
c000525b:	c1 e9 09             	shr    ecx,0x9
c000525e:	88 d8                	mov    al,bl
c0005260:	83 e0 01             	and    eax,0x1
c0005263:	80 e3 02             	and    bl,0x2
c0005266:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000526a:	74 0a                	je     c0005276 <f_mkfs+0x1b4>
c000526c:	84 c0                	test   al,al
c000526e:	0f 84 4c 01 00 00    	je     c00053c0 <f_mkfs+0x2fe>
c0005274:	eb 38                	jmp    c00052ae <f_mkfs+0x1ec>
c0005276:	bf 13 00 00 00       	mov    edi,0x13
c000527b:	84 c0                	test   al,al
c000527d:	75 2f                	jne    c00052ae <f_mkfs+0x1ec>
c000527f:	e9 c9 05 00 00       	jmp    c000584d <f_mkfs+0x78b>
c0005284:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005289:	0f 85 08 02 00 00    	jne    c0005497 <f_mkfs+0x3d5>
c000528f:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005294:	0f 86 e1 01 00 00    	jbe    c000547b <f_mkfs+0x3b9>
c000529a:	85 c9                	test   ecx,ecx
c000529c:	0f 85 bd 05 00 00    	jne    c000585f <f_mkfs+0x79d>
c00052a2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00052a5:	83 f9 40             	cmp    ecx,0x40
c00052a8:	0f 87 c1 05 00 00    	ja     c000586f <f_mkfs+0x7ad>
c00052ae:	89 cf                	mov    edi,ecx
c00052b0:	85 c9                	test   ecx,ecx
c00052b2:	75 1d                	jne    c00052d1 <f_mkfs+0x20f>
c00052b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00052b8:	ba 40 c5 01 c0       	mov    edx,0xc001c540
c00052bd:	c1 eb 0c             	shr    ebx,0xc
c00052c0:	bf 01 00 00 00       	mov    edi,0x1
c00052c5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00052c8:	66 85 c0             	test   ax,ax
c00052cb:	0f 85 5f 01 00 00    	jne    c0005430 <f_mkfs+0x36e>
c00052d1:	31 d2                	xor    edx,edx
c00052d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00052d7:	f7 f7                	div    edi
c00052d9:	3d f5 0f 00 00       	cmp    eax,0xff5
c00052de:	0f 86 5e 01 00 00    	jbe    c0005442 <f_mkfs+0x380>
c00052e4:	83 c0 02             	add    eax,0x2
c00052e7:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00052ec:	01 c0                	add    eax,eax
c00052ee:	05 ff 01 00 00       	add    eax,0x1ff
c00052f3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00052fb:	c1 e8 09             	shr    eax,0x9
c00052fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005306:	c1 e0 05             	shl    eax,0x5
c0005309:	c1 e8 09             	shr    eax,0x9
c000530c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005310:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005319:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531d:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005321:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005329:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c000532e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005332:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000533a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000533e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005342:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005346:	f7 d8                	neg    eax
c0005348:	21 c3                	and    ebx,eax
c000534a:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c000534e:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005353:	0f 85 fc 00 00 00    	jne    c0005455 <f_mkfs+0x393>
c0005359:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c000535d:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005361:	89 f8                	mov    eax,edi
c0005363:	c1 e0 04             	shl    eax,0x4
c0005366:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000536a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000536e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005372:	0f 82 26 01 00 00    	jb     c000549e <f_mkfs+0x3dc>
c0005378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000537c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005380:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005384:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c0005389:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000538d:	29 d0                	sub    eax,edx
c000538f:	31 d2                	xor    edx,edx
c0005391:	f7 f7                	div    edi
c0005393:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005398:	89 c3                	mov    ebx,eax
c000539a:	0f 85 e4 fe ff ff    	jne    c0005284 <f_mkfs+0x1c2>
c00053a0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00053a5:	0f 87 02 01 00 00    	ja     c00054ad <f_mkfs+0x3eb>
c00053ab:	85 c9                	test   ecx,ecx
c00053ad:	0f 85 eb 00 00 00    	jne    c000549e <f_mkfs+0x3dc>
c00053b3:	83 ff 01             	cmp    edi,0x1
c00053b6:	0f 86 e2 00 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c00053bc:	89 f9                	mov    ecx,edi
c00053be:	d1 e9                	shr    ecx,1
c00053c0:	89 cb                	mov    ebx,ecx
c00053c2:	85 c9                	test   ecx,ecx
c00053c4:	75 26                	jne    c00053ec <f_mkfs+0x32a>
c00053c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00053ca:	ba 50 c5 01 c0       	mov    edx,0xc001c550
c00053cf:	c1 eb 11             	shr    ebx,0x11
c00053d2:	b9 01 00 00 00       	mov    ecx,0x1
c00053d7:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00053da:	66 85 c0             	test   ax,ax
c00053dd:	74 0b                	je     c00053ea <f_mkfs+0x328>
c00053df:	83 c2 02             	add    edx,0x2
c00053e2:	39 d8                	cmp    eax,ebx
c00053e4:	77 04                	ja     c00053ea <f_mkfs+0x328>
c00053e6:	01 c9                	add    ecx,ecx
c00053e8:	eb ed                	jmp    c00053d7 <f_mkfs+0x315>
c00053ea:	31 db                	xor    ebx,ebx
c00053ec:	31 d2                	xor    edx,edx
c00053ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00053f2:	f7 f1                	div    ecx
c00053f4:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00053fb:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005400:	c1 ea 09             	shr    edx,0x9
c0005403:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005408:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000540c:	0f 87 8c 00 00 00    	ja     c000549e <f_mkfs+0x3dc>
c0005412:	89 cf                	mov    edi,ecx
c0005414:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000541c:	89 d9                	mov    ecx,ebx
c000541e:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005426:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000542b:	e9 e0 fe ff ff       	jmp    c0005310 <f_mkfs+0x24e>
c0005430:	83 c2 02             	add    edx,0x2
c0005433:	39 d8                	cmp    eax,ebx
c0005435:	0f 87 96 fe ff ff    	ja     c00052d1 <f_mkfs+0x20f>
c000543b:	01 ff                	add    edi,edi
c000543d:	e9 83 fe ff ff       	jmp    c00052c5 <f_mkfs+0x203>
c0005442:	8d 04 40             	lea    eax,[eax+eax*2]
c0005445:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000544a:	40                   	inc    eax
c000544b:	d1 e8                	shr    eax,1
c000544d:	83 c0 03             	add    eax,0x3
c0005450:	e9 99 fe ff ff       	jmp    c00052ee <f_mkfs+0x22c>
c0005455:	31 d2                	xor    edx,edx
c0005457:	89 d8                	mov    eax,ebx
c0005459:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000545d:	85 d2                	test   edx,edx
c000545f:	74 09                	je     c000546a <f_mkfs+0x3a8>
c0005461:	4b                   	dec    ebx
c0005462:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005466:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000546a:	89 d8                	mov    eax,ebx
c000546c:	31 d2                	xor    edx,edx
c000546e:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005472:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005476:	e9 e6 fe ff ff       	jmp    c0005361 <f_mkfs+0x29f>
c000547b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005480:	77 2b                	ja     c00054ad <f_mkfs+0x3eb>
c0005482:	85 c9                	test   ecx,ecx
c0005484:	75 18                	jne    c000549e <f_mkfs+0x3dc>
c0005486:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005489:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000548f:	0f 86 19 fe ff ff    	jbe    c00052ae <f_mkfs+0x1ec>
c0005495:	eb 07                	jmp    c000549e <f_mkfs+0x3dc>
c0005497:	3d f5 0f 00 00       	cmp    eax,0xff5
c000549c:	76 0a                	jbe    c00054a8 <f_mkfs+0x3e6>
c000549e:	bf 0e 00 00 00       	mov    edi,0xe
c00054a3:	e9 a5 03 00 00       	jmp    c000584d <f_mkfs+0x78b>
c00054a8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054ad:	31 d2                	xor    edx,edx
c00054af:	b9 00 02 00 00       	mov    ecx,0x200
c00054b4:	89 f0                	mov    eax,esi
c00054b6:	e8 d2 c6 ff ff       	call   c0001b8d <mem_set>
c00054bb:	b9 0b 00 00 00       	mov    ecx,0xb
c00054c0:	ba f2 c4 01 c0       	mov    edx,0xc001c4f2
c00054c5:	89 f0                	mov    eax,esi
c00054c7:	e8 ac c6 ff ff       	call   c0001b78 <mem_cpy>
c00054cc:	8d 46 0b             	lea    eax,[esi+0xb]
c00054cf:	ba 00 02 00 00       	mov    edx,0x200
c00054d4:	e8 98 c6 ff ff       	call   c0001b71 <st_word>
c00054d9:	89 f8                	mov    eax,edi
c00054db:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00054e0:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00054e3:	8d 46 0e             	lea    eax,[esi+0xe]
c00054e6:	e8 86 c6 ff ff       	call   c0001b71 <st_word>
c00054eb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00054ef:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00054f4:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00054f7:	75 08                	jne    c0005501 <f_mkfs+0x43f>
c00054f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005501:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005505:	8d 46 11             	lea    eax,[esi+0x11]
c0005508:	e8 64 c6 ff ff       	call   c0001b71 <st_word>
c000550d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005511:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005517:	77 0a                	ja     c0005523 <f_mkfs+0x461>
c0005519:	8d 46 13             	lea    eax,[esi+0x13]
c000551c:	e8 50 c6 ff ff       	call   c0001b71 <st_word>
c0005521:	eb 08                	jmp    c000552b <f_mkfs+0x469>
c0005523:	8d 46 20             	lea    eax,[esi+0x20]
c0005526:	e8 4a c6 ff ff       	call   c0001b75 <st_dword>
c000552b:	8d 46 18             	lea    eax,[esi+0x18]
c000552e:	ba 3f 00 00 00       	mov    edx,0x3f
c0005533:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c0005537:	e8 35 c6 ff ff       	call   c0001b71 <st_word>
c000553c:	8d 46 1a             	lea    eax,[esi+0x1a]
c000553f:	ba ff 00 00 00       	mov    edx,0xff
c0005544:	e8 28 c6 ff ff       	call   c0001b71 <st_word>
c0005549:	8d 46 1c             	lea    eax,[esi+0x1c]
c000554c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005550:	e8 20 c6 ff ff       	call   c0001b75 <st_dword>
c0005555:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555a:	75 57                	jne    c00055b3 <f_mkfs+0x4f1>
c000555c:	8d 46 43             	lea    eax,[esi+0x43]
c000555f:	ba 00 00 21 50       	mov    edx,0x50210000
c0005564:	e8 0c c6 ff ff       	call   c0001b75 <st_dword>
c0005569:	8d 46 24             	lea    eax,[esi+0x24]
c000556c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005570:	e8 00 c6 ff ff       	call   c0001b75 <st_dword>
c0005575:	8d 46 2c             	lea    eax,[esi+0x2c]
c0005578:	ba 02 00 00 00       	mov    edx,0x2
c000557d:	e8 f3 c5 ff ff       	call   c0001b75 <st_dword>
c0005582:	8d 46 30             	lea    eax,[esi+0x30]
c0005585:	ba 01 00 00 00       	mov    edx,0x1
c000558a:	e8 e2 c5 ff ff       	call   c0001b71 <st_word>
c000558f:	8d 46 32             	lea    eax,[esi+0x32]
c0005592:	ba 06 00 00 00       	mov    edx,0x6
c0005597:	e8 d5 c5 ff ff       	call   c0001b71 <st_word>
c000559c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c00055a0:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c00055a4:	8d 46 47             	lea    eax,[esi+0x47]
c00055a7:	b9 13 00 00 00       	mov    ecx,0x13
c00055ac:	ba fe c4 01 c0       	mov    edx,0xc001c4fe
c00055b1:	eb 2f                	jmp    c00055e2 <f_mkfs+0x520>
c00055b3:	8d 46 27             	lea    eax,[esi+0x27]
c00055b6:	ba 00 00 21 50       	mov    edx,0x50210000
c00055bb:	e8 b5 c5 ff ff       	call   c0001b75 <st_dword>
c00055c0:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00055c5:	8d 46 16             	lea    eax,[esi+0x16]
c00055c8:	e8 a4 c5 ff ff       	call   c0001b71 <st_word>
c00055cd:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00055d1:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00055d5:	8d 46 2b             	lea    eax,[esi+0x2b]
c00055d8:	b9 13 00 00 00       	mov    ecx,0x13
c00055dd:	ba 12 c5 01 c0       	mov    edx,0xc001c512
c00055e2:	e8 91 c5 ff ff       	call   c0001b78 <mem_cpy>
c00055e7:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00055ed:	ba 55 aa 00 00       	mov    edx,0xaa55
c00055f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055f6:	e8 76 c5 ff ff       	call   c0001b71 <st_word>
c00055fb:	6a 01                	push   0x1
c00055fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005601:	56                   	push   esi
c0005602:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005606:	e8 0c c5 ff ff       	call   c0001b17 <disk_write>
c000560b:	83 c4 10             	add    esp,0x10
c000560e:	85 c0                	test   eax,eax
c0005610:	0f 85 20 02 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005616:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000561b:	0f 85 98 00 00 00    	jne    c00056b9 <f_mkfs+0x5f7>
c0005621:	6a 01                	push   0x1
c0005623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005627:	83 c0 06             	add    eax,0x6
c000562a:	50                   	push   eax
c000562b:	56                   	push   esi
c000562c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005630:	e8 e2 c4 ff ff       	call   c0001b17 <disk_write>
c0005635:	b9 00 02 00 00       	mov    ecx,0x200
c000563a:	31 d2                	xor    edx,edx
c000563c:	89 f0                	mov    eax,esi
c000563e:	e8 4a c5 ff ff       	call   c0001b8d <mem_set>
c0005643:	ba 52 52 61 41       	mov    edx,0x41615252
c0005648:	89 f0                	mov    eax,esi
c000564a:	e8 26 c5 ff ff       	call   c0001b75 <st_dword>
c000564f:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005655:	ba 72 72 41 61       	mov    edx,0x61417272
c000565a:	e8 16 c5 ff ff       	call   c0001b75 <st_dword>
c000565f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005662:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c0005668:	e8 08 c5 ff ff       	call   c0001b75 <st_dword>
c000566d:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005673:	ba 02 00 00 00       	mov    edx,0x2
c0005678:	e8 f8 c4 ff ff       	call   c0001b75 <st_dword>
c000567d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005682:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c0005688:	e8 e4 c4 ff ff       	call   c0001b71 <st_word>
c000568d:	6a 01                	push   0x1
c000568f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005693:	83 c0 07             	add    eax,0x7
c0005696:	50                   	push   eax
c0005697:	56                   	push   esi
c0005698:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000569c:	e8 76 c4 ff ff       	call   c0001b17 <disk_write>
c00056a1:	83 c4 20             	add    esp,0x20
c00056a4:	6a 01                	push   0x1
c00056a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00056aa:	40                   	inc    eax
c00056ab:	50                   	push   eax
c00056ac:	56                   	push   esi
c00056ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00056b1:	e8 61 c4 ff ff       	call   c0001b17 <disk_write>
c00056b6:	83 c4 10             	add    esp,0x10
c00056b9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00056bd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00056c1:	c1 e8 09             	shr    eax,0x9
c00056c4:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00056ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056ce:	31 d2                	xor    edx,edx
c00056d0:	31 db                	xor    ebx,ebx
c00056d2:	89 f0                	mov    eax,esi
c00056d4:	e8 b4 c4 ff ff       	call   c0001b8d <mem_set>
c00056d9:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00056de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00056e6:	0f 94 c3             	sete   bl
c00056e9:	4b                   	dec    ebx
c00056ea:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00056f0:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00056f6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056fb:	75 21                	jne    c000571e <f_mkfs+0x65c>
c00056fd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005702:	89 f0                	mov    eax,esi
c0005704:	e8 6c c4 ff ff       	call   c0001b75 <st_dword>
c0005709:	8d 46 04             	lea    eax,[esi+0x4]
c000570c:	83 ca ff             	or     edx,0xffffffff
c000570f:	e8 61 c4 ff ff       	call   c0001b75 <st_dword>
c0005714:	8d 46 08             	lea    eax,[esi+0x8]
c0005717:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000571c:	eb 04                	jmp    c0005722 <f_mkfs+0x660>
c000571e:	89 da                	mov    edx,ebx
c0005720:	89 f0                	mov    eax,esi
c0005722:	e8 4e c4 ff ff       	call   c0001b75 <st_dword>
c0005727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000572f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005737:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573b:	76 08                	jbe    c0005745 <f_mkfs+0x683>
c000573d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005745:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000574d:	56                   	push   esi
c000574e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005752:	e8 c0 c3 ff ff       	call   c0001b17 <disk_write>
c0005757:	83 c4 10             	add    esp,0x10
c000575a:	85 c0                	test   eax,eax
c000575c:	0f 85 d4 00 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005762:	b9 00 02 00 00       	mov    ecx,0x200
c0005767:	31 d2                	xor    edx,edx
c0005769:	89 f0                	mov    eax,esi
c000576b:	e8 1d c4 ff ff       	call   c0001b8d <mem_set>
c0005770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005774:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c0005778:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000577c:	75 b1                	jne    c000572f <f_mkfs+0x66d>
c000577e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005782:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000578a:	40                   	inc    eax
c000578b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000578f:	0f 87 61 ff ff ff    	ja     c00056f6 <f_mkfs+0x634>
c0005795:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000579a:	74 04                	je     c00057a0 <f_mkfs+0x6de>
c000579c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00057a0:	89 fb                	mov    ebx,edi
c00057a2:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00057a6:	76 04                	jbe    c00057ac <f_mkfs+0x6ea>
c00057a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00057ac:	53                   	push   ebx
c00057ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00057b1:	56                   	push   esi
c00057b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057b6:	e8 5c c3 ff ff       	call   c0001b17 <disk_write>
c00057bb:	83 c4 10             	add    esp,0x10
c00057be:	85 c0                	test   eax,eax
c00057c0:	75 74                	jne    c0005836 <f_mkfs+0x774>
c00057c2:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00057c6:	29 df                	sub    edi,ebx
c00057c8:	75 d6                	jne    c00057a0 <f_mkfs+0x6de>
c00057ca:	b1 0c                	mov    cl,0xc
c00057cc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057d1:	74 18                	je     c00057eb <f_mkfs+0x729>
c00057d3:	b1 06                	mov    cl,0x6
c00057d5:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00057dd:	77 0c                	ja     c00057eb <f_mkfs+0x729>
c00057df:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00057e4:	0f 94 c1             	sete   cl
c00057e7:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00057eb:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00057f0:	75 2d                	jne    c000581f <f_mkfs+0x75d>
c00057f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00057f6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00057fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0005802:	0f b6 c9             	movzx  ecx,cl
c0005805:	83 ec 0c             	sub    esp,0xc
c0005808:	56                   	push   esi
c0005809:	8d 54 24 48          	lea    edx,[esp+0x48]
c000580d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005811:	e8 4c d3 ff ff       	call   c0002b62 <create_partition>
c0005816:	83 c4 10             	add    esp,0x10
c0005819:	89 c7                	mov    edi,eax
c000581b:	85 c0                	test   eax,eax
c000581d:	75 2e                	jne    c000584d <f_mkfs+0x78b>
c000581f:	31 ff                	xor    edi,edi
c0005821:	50                   	push   eax
c0005822:	6a 00                	push   0x0
c0005824:	6a 00                	push   0x0
c0005826:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000582a:	e8 fe c2 ff ff       	call   c0001b2d <disk_ioctl>
c000582f:	83 c4 10             	add    esp,0x10
c0005832:	85 c0                	test   eax,eax
c0005834:	74 17                	je     c000584d <f_mkfs+0x78b>
c0005836:	85 ed                	test   ebp,ebp
c0005838:	75 0c                	jne    c0005846 <f_mkfs+0x784>
c000583a:	83 ec 0c             	sub    esp,0xc
c000583d:	56                   	push   esi
c000583e:	e8 6d 00 00 00       	call   c00058b0 <ff_memfree>
c0005843:	83 c4 10             	add    esp,0x10
c0005846:	bf 01 00 00 00       	mov    edi,0x1
c000584b:	eb 40                	jmp    c000588d <f_mkfs+0x7cb>
c000584d:	85 ed                	test   ebp,ebp
c000584f:	75 3c                	jne    c000588d <f_mkfs+0x7cb>
c0005851:	83 ec 0c             	sub    esp,0xc
c0005854:	56                   	push   esi
c0005855:	e8 56 00 00 00       	call   c00058b0 <ff_memfree>
c000585a:	83 c4 10             	add    esp,0x10
c000585d:	eb 2e                	jmp    c000588d <f_mkfs+0x7cb>
c000585f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005864:	0f 85 56 fb ff ff    	jne    c00053c0 <f_mkfs+0x2fe>
c000586a:	e9 2f fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000586f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005874:	0f 85 4c fb ff ff    	jne    c00053c6 <f_mkfs+0x304>
c000587a:	89 cf                	mov    edi,ecx
c000587c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005882:	0f 86 49 fa ff ff    	jbe    c00052d1 <f_mkfs+0x20f>
c0005888:	e9 11 fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000588d:	83 c4 4c             	add    esp,0x4c
c0005890:	89 f8                	mov    eax,edi
c0005892:	5b                   	pop    ebx
c0005893:	5e                   	pop    esi
c0005894:	5f                   	pop    edi
c0005895:	5d                   	pop    ebp
c0005896:	c3                   	ret    
c0005897:	90                   	nop

c0005898 <ff_memalloc>:
c0005898:	83 ec 0c             	sub    esp,0xc
c000589b:	83 ec 0c             	sub    esp,0xc
c000589e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058a2:	e8 6e 13 00 00       	call   c0006c15 <malloc>
c00058a7:	83 c4 10             	add    esp,0x10
c00058aa:	83 c4 0c             	add    esp,0xc
c00058ad:	c3                   	ret    
c00058ae:	66 90                	xchg   ax,ax

c00058b0 <ff_memfree>:
c00058b0:	83 ec 0c             	sub    esp,0xc
c00058b3:	83 ec 0c             	sub    esp,0xc
c00058b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058ba:	e8 66 13 00 00       	call   c0006c25 <free>
c00058bf:	83 c4 10             	add    esp,0x10
c00058c2:	90                   	nop
c00058c3:	83 c4 0c             	add    esp,0xc
c00058c6:	c3                   	ret    
c00058c7:	90                   	nop

c00058c8 <ff_uni2oem>:
c00058c8:	83 ec 14             	sub    esp,0x14
c00058cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cf:	66 89 04 24          	mov    WORD PTR [esp],ax
c00058d3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00058da:	c7 44 24 0c 40 c9 01 c0 	mov    DWORD PTR [esp+0xc],0xc001c940
c00058e2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00058e7:	77 0b                	ja     c00058f4 <ff_uni2oem+0x2c>
c00058e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00058f2:	eb 68                	jmp    c000595c <ff_uni2oem+0x94>
c00058f4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00058fc:	77 5e                	ja     c000595c <ff_uni2oem+0x94>
c00058fe:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005904:	75 56                	jne    c000595c <ff_uni2oem+0x94>
c0005906:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000590d:	eb 0d                	jmp    c000591c <ff_uni2oem+0x54>
c000590f:	90                   	nop
c0005910:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005915:	40                   	inc    eax
c0005916:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000591b:	90                   	nop
c000591c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005922:	77 24                	ja     c0005948 <ff_uni2oem+0x80>
c0005924:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005929:	25 ff ff 00 00       	and    eax,0xffff
c000592e:	01 c0                	add    eax,eax
c0005930:	89 c2                	mov    edx,eax
c0005932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005936:	01 d0                	add    eax,edx
c0005938:	66 8b 00             	mov    ax,WORD PTR [eax]
c000593b:	25 ff ff 00 00       	and    eax,0xffff
c0005940:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005944:	75 ca                	jne    c0005910 <ff_uni2oem+0x48>
c0005946:	66 90                	xchg   ax,ax
c0005948:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000594d:	83 e8 80             	sub    eax,0xffffff80
c0005950:	25 ff 00 00 00       	and    eax,0xff
c0005955:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000595a:	66 90                	xchg   ax,ax
c000595c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005961:	83 c4 14             	add    esp,0x14
c0005964:	c3                   	ret    
c0005965:	8d 76 00             	lea    esi,[esi+0x0]

c0005968 <ff_oem2uni>:
c0005968:	83 ec 18             	sub    esp,0x18
c000596b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000596f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005973:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005978:	66 89 04 24          	mov    WORD PTR [esp],ax
c000597c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005983:	c7 44 24 10 40 c9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001c940
c000598b:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005991:	77 0d                	ja     c00059a0 <ff_oem2uni+0x38>
c0005993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005997:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000599c:	eb 36                	jmp    c00059d4 <ff_oem2uni+0x6c>
c000599e:	66 90                	xchg   ax,ax
c00059a0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00059a6:	75 2c                	jne    c00059d4 <ff_oem2uni+0x6c>
c00059a8:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00059af:	77 23                	ja     c00059d4 <ff_oem2uni+0x6c>
c00059b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059b5:	25 ff ff 00 00       	and    eax,0xffff
c00059ba:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00059bf:	01 c0                	add    eax,eax
c00059c1:	89 c2                	mov    edx,eax
c00059c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c7:	01 d0                	add    eax,edx
c00059c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00059cc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00059d1:	8d 76 00             	lea    esi,[esi+0x0]
c00059d4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00059d9:	83 c4 18             	add    esp,0x18
c00059dc:	c3                   	ret    
c00059dd:	8d 76 00             	lea    esi,[esi+0x0]

c00059e0 <ff_wtoupper>:
c00059e0:	83 ec 10             	sub    esp,0x10
c00059e3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00059eb:	0f 87 77 01 00 00    	ja     c0005b68 <ff_wtoupper+0x188>
c00059f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059f5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00059fa:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005a01:	77 09                	ja     c0005a0c <ff_wtoupper+0x2c>
c0005a03:	b8 40 c7 01 c0       	mov    eax,0xc001c740
c0005a08:	eb 0a                	jmp    c0005a14 <ff_wtoupper+0x34>
c0005a0a:	66 90                	xchg   ax,ax
c0005a0c:	b8 80 c6 01 c0       	mov    eax,0xc001c680
c0005a11:	8d 76 00             	lea    esi,[esi+0x0]
c0005a14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1c:	8d 50 02             	lea    edx,[eax+0x2]
c0005a1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a23:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a26:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005a2b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005a31:	0f 84 21 01 00 00    	je     c0005b58 <ff_wtoupper+0x178>
c0005a37:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a3c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005a41:	0f 82 11 01 00 00    	jb     c0005b58 <ff_wtoupper+0x178>
c0005a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a4b:	8d 50 02             	lea    edx,[eax+0x2]
c0005a4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a52:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a55:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005a5a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a5f:	66 c1 e8 08          	shr    ax,0x8
c0005a63:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005a68:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005a6f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a74:	31 d2                	xor    edx,edx
c0005a76:	66 89 c2             	mov    dx,ax
c0005a79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a7d:	31 c9                	xor    ecx,ecx
c0005a7f:	66 89 c1             	mov    cx,ax
c0005a82:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a87:	25 ff ff 00 00       	and    eax,0xffff
c0005a8c:	01 c8                	add    eax,ecx
c0005a8e:	39 c2                	cmp    edx,eax
c0005a90:	0f 8d 9a 00 00 00    	jge    c0005b30 <ff_wtoupper+0x150>
c0005a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a9a:	25 ff ff 00 00       	and    eax,0xffff
c0005a9f:	83 f8 08             	cmp    eax,0x8
c0005aa2:	0f 87 ac 00 00 00    	ja     c0005b54 <ff_wtoupper+0x174>
c0005aa8:	8b 04 85 40 c6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe39c0]
c0005aaf:	ff e0                	jmp    eax
c0005ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ab4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ab9:	31 d2                	xor    edx,edx
c0005abb:	66 89 c2             	mov    dx,ax
c0005abe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005ac2:	25 ff ff 00 00       	and    eax,0xffff
c0005ac7:	29 c2                	sub    edx,eax
c0005ac9:	89 d0                	mov    eax,edx
c0005acb:	01 c0                	add    eax,eax
c0005acd:	89 c2                	mov    edx,eax
c0005acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ad3:	01 d0                	add    eax,edx
c0005ad5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ad8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005add:	eb 4d                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005adf:	90                   	nop
c0005ae0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ae5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005ae9:	83 e0 01             	and    eax,0x1
c0005aec:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005af1:	eb 39                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005af3:	90                   	nop
c0005af4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005afa:	eb 30                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005afc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005b02:	eb 28                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b04:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005b0a:	eb 20                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b0c:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005b12:	eb 18                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b14:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005b1a:	eb 10                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b1c:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005b22:	eb 08                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b24:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005b2b:	90                   	nop
c0005b2c:	eb 26                	jmp    c0005b54 <ff_wtoupper+0x174>
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005b36:	0f 85 dc fe ff ff    	jne    c0005a18 <ff_wtoupper+0x38>
c0005b3c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005b41:	25 ff ff 00 00       	and    eax,0xffff
c0005b46:	01 c0                	add    eax,eax
c0005b48:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005b4c:	e9 c7 fe ff ff       	jmp    c0005a18 <ff_wtoupper+0x38>
c0005b51:	8d 76 00             	lea    esi,[esi+0x0]
c0005b54:	90                   	nop
c0005b55:	8d 76 00             	lea    esi,[esi+0x0]
c0005b58:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005b5d:	25 ff ff 00 00       	and    eax,0xffff
c0005b62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b66:	66 90                	xchg   ax,ax
c0005b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b6c:	83 c4 10             	add    esp,0x10
c0005b6f:	c3                   	ret    

c0005b70 <CPU::current()>:
c0005b70:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0005b75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0005b7b:	c3                   	ret    

c0005b7c <operator new(unsigned long)>:
c0005b7c:	e9 94 10 00 00       	jmp    c0006c15 <malloc>

c0005b81 <operator delete(void*)>:
c0005b81:	e9 af 10 00 00       	jmp    c0006c35 <rfree>

c0005b86 <disableIRQs()>:
c0005b86:	fa                   	cli    
c0005b87:	c3                   	ret    

c0005b88 <enableIRQs()>:
c0005b88:	fb                   	sti    
c0005b89:	c3                   	ret    

c0005b8a <lockScheduler()>:
c0005b8a:	fa                   	cli    
c0005b8b:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0005b91:	c3                   	ret    

c0005b92 <unlockScheduler()>:
c0005b92:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0005b97:	48                   	dec    eax
c0005b98:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0005b9d:	75 01                	jne    c0005ba0 <unlockScheduler()+0xe>
c0005b9f:	fb                   	sti    
c0005ba0:	c3                   	ret    

c0005ba1 <lockStuff()>:
c0005ba1:	fa                   	cli    
c0005ba2:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0005ba8:	ff 05 64 29 02 c0    	inc    DWORD PTR ds:0xc0022964
c0005bae:	c3                   	ret    

c0005baf <unlockStuff()>:
c0005baf:	83 ec 0c             	sub    esp,0xc
c0005bb2:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c0005bb7:	48                   	dec    eax
c0005bb8:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c0005bbd:	75 18                	jne    c0005bd7 <unlockStuff()+0x28>
c0005bbf:	83 3d 60 29 02 c0 00 	cmp    DWORD PTR ds:0xc0022960,0x0
c0005bc6:	74 0f                	je     c0005bd7 <unlockStuff()+0x28>
c0005bc8:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c0005bd2:	e8 c5 cd 00 00       	call   c001299c <schedule()>
c0005bd7:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0005bdc:	48                   	dec    eax
c0005bdd:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0005be2:	75 01                	jne    c0005be5 <unlockStuff()+0x36>
c0005be4:	fb                   	sti    
c0005be5:	83 c4 0c             	add    esp,0xc
c0005be8:	c3                   	ret    

c0005be9 <Virt::getAKernelVAS()>:
c0005be9:	a1 74 f5 01 c0       	mov    eax,ds:0xc001f574
c0005bee:	c3                   	ret    

c0005bef <__not_memcpy>:
c0005bef:	57                   	push   edi
c0005bf0:	56                   	push   esi
c0005bf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005bfd:	89 c7                	mov    edi,eax
c0005bff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0005c01:	5e                   	pop    esi
c0005c02:	5f                   	pop    edi
c0005c03:	c3                   	ret    

c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>:
c0005c04:	83 ec 0c             	sub    esp,0xc
c0005c07:	83 ec 08             	sub    esp,0x8
c0005c0a:	68 40 ca 01 c0       	push   0xc001ca40
c0005c0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c13:	e8 e8 aa ff ff       	call   c0000700 <strcmp>
c0005c18:	83 c4 10             	add    esp,0x10
c0005c1b:	85 c0                	test   eax,eax
c0005c1d:	0f 94 c0             	sete   al
c0005c20:	84 c0                	test   al,al
c0005c22:	74 0c                	je     c0005c30 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0005c24:	b8 88 f4 01 c0       	mov    eax,0xc001f488
c0005c29:	e9 ea 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c2e:	66 90                	xchg   ax,ax
c0005c30:	83 ec 08             	sub    esp,0x8
c0005c33:	68 49 ca 01 c0       	push   0xc001ca49
c0005c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c3c:	e8 bf aa ff ff       	call   c0000700 <strcmp>
c0005c41:	83 c4 10             	add    esp,0x10
c0005c44:	85 c0                	test   eax,eax
c0005c46:	0f 94 c0             	sete   al
c0005c49:	84 c0                	test   al,al
c0005c4b:	74 0b                	je     c0005c58 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0005c4d:	b8 f0 b6 01 c0       	mov    eax,0xc001b6f0
c0005c52:	e9 c1 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c57:	90                   	nop
c0005c58:	83 ec 08             	sub    esp,0x8
c0005c5b:	68 53 ca 01 c0       	push   0xc001ca53
c0005c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c64:	e8 97 aa ff ff       	call   c0000700 <strcmp>
c0005c69:	83 c4 10             	add    esp,0x10
c0005c6c:	85 c0                	test   eax,eax
c0005c6e:	0f 94 c0             	sete   al
c0005c71:	84 c0                	test   al,al
c0005c73:	74 0b                	je     c0005c80 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0005c75:	b8 24 b4 01 c0       	mov    eax,0xc001b424
c0005c7a:	e9 99 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c7f:	90                   	nop
c0005c80:	83 ec 08             	sub    esp,0x8
c0005c83:	68 5c ca 01 c0       	push   0xc001ca5c
c0005c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c8c:	e8 6f aa ff ff       	call   c0000700 <strcmp>
c0005c91:	83 c4 10             	add    esp,0x10
c0005c94:	85 c0                	test   eax,eax
c0005c96:	0f 94 c0             	sete   al
c0005c99:	84 c0                	test   al,al
c0005c9b:	74 07                	je     c0005ca4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0005c9d:	b8 f0 b7 01 c0       	mov    eax,0xc001b7f0
c0005ca2:	eb 74                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005ca4:	83 ec 08             	sub    esp,0x8
c0005ca7:	68 66 ca 01 c0       	push   0xc001ca66
c0005cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cb0:	e8 4b aa ff ff       	call   c0000700 <strcmp>
c0005cb5:	83 c4 10             	add    esp,0x10
c0005cb8:	85 c0                	test   eax,eax
c0005cba:	0f 94 c0             	sete   al
c0005cbd:	84 c0                	test   al,al
c0005cbf:	74 07                	je     c0005cc8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0005cc1:	b8 70 b5 01 c0       	mov    eax,0xc001b570
c0005cc6:	eb 50                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cc8:	83 ec 08             	sub    esp,0x8
c0005ccb:	68 6f ca 01 c0       	push   0xc001ca6f
c0005cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cd4:	e8 27 aa ff ff       	call   c0000700 <strcmp>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	85 c0                	test   eax,eax
c0005cde:	0f 94 c0             	sete   al
c0005ce1:	84 c0                	test   al,al
c0005ce3:	74 07                	je     c0005cec <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0005ce5:	b8 8c f4 01 c0       	mov    eax,0xc001f48c
c0005cea:	eb 2c                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cec:	83 ec 08             	sub    esp,0x8
c0005cef:	68 7c ca 01 c0       	push   0xc001ca7c
c0005cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cf8:	e8 03 aa ff ff       	call   c0000700 <strcmp>
c0005cfd:	83 c4 10             	add    esp,0x10
c0005d00:	85 c0                	test   eax,eax
c0005d02:	0f 94 c0             	sete   al
c0005d05:	84 c0                	test   al,al
c0005d07:	74 07                	je     c0005d10 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0005d09:	b8 8d f4 01 c0       	mov    eax,0xc001f48d
c0005d0e:	eb 08                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005d10:	b8 00 00 00 00       	mov    eax,0x0
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	83 c4 0c             	add    esp,0xc
c0005d1b:	c3                   	ret    

c0005d1c <Computer::close(int, int, void*)>:
c0005d1c:	57                   	push   edi
c0005d1d:	56                   	push   esi
c0005d1e:	53                   	push   ebx
c0005d1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0005d23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005d27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005d2b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0005d31:	83 ec 0c             	sub    esp,0xc
c0005d34:	50                   	push   eax
c0005d35:	e8 fc 51 00 00       	call   c000af36 <Device::closeAll()>
c0005d3a:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0005d45:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0005d49:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0005d51:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0005d55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d59:	5b                   	pop    ebx
c0005d5a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0005d5d:	5e                   	pop    esi
c0005d5e:	5f                   	pop    edi
c0005d5f:	ff e0                	jmp    eax

c0005d61 <Krnl::firstTask()>:
c0005d61:	53                   	push   ebx
c0005d62:	83 ec 14             	sub    esp,0x14
c0005d65:	fb                   	sti    
c0005d66:	68 89 ca 01 c0       	push   0xc001ca89
c0005d6b:	e8 ff 0e 00 00       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c0005d70:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0005d77:	e8 99 0e 00 00       	call   c0006c15 <malloc>
c0005d7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005d83:	89 c3                	mov    ebx,eax
c0005d85:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0005d8a:	50                   	push   eax
c0005d8b:	68 a2 ca 01 c0       	push   0xc001caa2
c0005d90:	6a 01                	push   0x1
c0005d92:	53                   	push   ebx
c0005d93:	e8 d8 c7 00 00       	call   c0012570 <Process::Process(bool, char const*, Process*, char**)>
c0005d98:	83 c4 20             	add    esp,0x20
c0005d9b:	68 ff 00 00 00       	push   0xff
c0005da0:	6a 00                	push   0x0
c0005da2:	68 6d 66 00 c0       	push   0xc000666d
c0005da7:	53                   	push   ebx
c0005da8:	e8 cf c9 00 00       	call   c001277c <Process::createThread(void (*)(void*), void*, int)>
c0005dad:	8b 15 90 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022990
c0005db3:	6a 7a                	push   0x7a
c0005db5:	6a 00                	push   0x0
c0005db7:	68 d0 31 01 c0       	push   0xc00131d0
c0005dbc:	52                   	push   edx
c0005dbd:	e8 ba c9 00 00       	call   c001277c <Process::createThread(void (*)(void*), void*, int)>
c0005dc2:	83 c4 14             	add    esp,0x14
c0005dc5:	a3 48 29 02 c0       	mov    ds:0xc0022948,eax
c0005dca:	68 a0 cb 01 c0       	push   0xc001cba0
c0005dcf:	c6 05 8d f4 01 c0 01 	mov    BYTE PTR ds:0xc001f48d,0x1
c0005dd6:	e8 94 0e 00 00       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c0005ddb:	e8 cf d7 00 00       	call   c00135af <Vm::initialise8086()>
c0005de0:	e8 95 3f 00 00       	call   c0009d7a <Fs::initVFS()>
c0005de5:	c7 04 24 af ca 01 c0 	mov    DWORD PTR [esp],0xc001caaf
c0005dec:	e8 7e 0e 00 00       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c0005df1:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0005df6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0005dfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0005dfe:	6a 00                	push   0x0
c0005e00:	6a 00                	push   0x0
c0005e02:	6a 00                	push   0x0
c0005e04:	50                   	push   eax
c0005e05:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0005e08:	83 c4 14             	add    esp,0x14
c0005e0b:	68 a0 cb 01 c0       	push   0xc001cba0
c0005e10:	e8 5a 0e 00 00       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c0005e15:	e8 e5 af 00 00       	call   c0010dff <Sys::loadSyscalls()>
c0005e1a:	e8 ff 95 00 00       	call   c000f41e <Krnl::loadSystemEnv()>
c0005e1f:	e8 e1 99 00 00       	call   c000f805 <Krnl::setupPowerManager()>
c0005e24:	83 c4 0c             	add    esp,0xc
c0005e27:	6a 3a                	push   0x3a
c0005e29:	68 c9 ca 01 c0       	push   0xc001cac9
c0005e2e:	68 d2 ca 01 c0       	push   0xc001cad2
c0005e33:	e8 f7 9e 00 00       	call   c000fd2f <Reg::readIntWithDefault(char*, char*, int)>
c0005e38:	89 04 24             	mov    DWORD PTR [esp],eax
c0005e3b:	e8 48 4a 00 00       	call   c000a888 <User::loadClockSettings(int)>
c0005e40:	c7 04 24 c4 cb 01 c0 	mov    DWORD PTR [esp],0xc001cbc4
c0005e47:	e8 23 0e 00 00       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c0005e4c:	59                   	pop    ecx
c0005e4d:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0005e52:	8b 98 e4 01 00 00    	mov    ebx,DWORD PTR [eax+0x1e4]
c0005e58:	53                   	push   ebx
c0005e59:	e8 d6 50 00 00       	call   c000af34 <Device::loadDriversForAll()>
c0005e5e:	c7 04 24 da ca 01 c0 	mov    DWORD PTR [esp],0xc001cada
c0005e65:	e8 05 0e 00 00       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c0005e6a:	58                   	pop    eax
c0005e6b:	8b 1d 88 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f488
c0005e71:	5a                   	pop    edx
c0005e72:	6a 01                	push   0x1
c0005e74:	68 eb ca 01 c0       	push   0xc001caeb
c0005e79:	e8 29 c1 00 00       	call   c0011fa7 <Thr::loadDLL(char const*, bool)>
c0005e7e:	59                   	pop    ecx
c0005e7f:	5a                   	pop    edx
c0005e80:	53                   	push   ebx
c0005e81:	50                   	push   eax
c0005e82:	e8 51 c3 00 00       	call   c00121d8 <Thr::executeDLL(unsigned long, void*)>
c0005e87:	83 c4 10             	add    esp,0x10
c0005e8a:	83 ec 0c             	sub    esp,0xc
c0005e8d:	6a 02                	push   0x2
c0005e8f:	e8 04 cd 00 00       	call   c0012b98 <blockTask(TaskState)>
c0005e94:	83 c4 10             	add    esp,0x10
c0005e97:	eb f1                	jmp    c0005e8a <Krnl::firstTask()+0x129>
c0005e99:	90                   	nop

c0005e9a <Computer::Computer()>:
c0005e9a:	83 ec 0c             	sub    esp,0xc
c0005e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ea1:	83 ec 08             	sub    esp,0x8
c0005ea4:	68 07 cb 01 c0       	push   0xc001cb07
c0005ea9:	50                   	push   eax
c0005eaa:	e8 01 51 00 00       	call   c000afb0 <Device::Device(char const*)>
c0005eaf:	83 c4 10             	add    esp,0x10
c0005eb2:	ba 10 cc 01 c0       	mov    edx,0xc001cc10
c0005eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ebb:	89 10                	mov    DWORD PTR [eax],edx
c0005ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ec1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0005ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ecf:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0005ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005edd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0005ee3:	83 ca 04             	or     edx,0x4
c0005ee6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0005eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ef0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005ef6:	31 d2                	xor    edx,edx
c0005ef8:	88 c2                	mov    dl,al
c0005efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005efe:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0005f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f0f:	31 d2                	xor    edx,edx
c0005f11:	88 c2                	mov    dl,al
c0005f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f17:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0005f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f26:	8d 50 01             	lea    edx,[eax+0x1]
c0005f29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005f2d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005f33:	31 d2                	xor    edx,edx
c0005f35:	88 c2                	mov    dl,al
c0005f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f3b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005f3f:	83 e1 3f             	and    ecx,0x3f
c0005f42:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f50:	31 d2                	xor    edx,edx
c0005f52:	88 c2                	mov    dl,al
c0005f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f58:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0005f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f69:	31 d2                	xor    edx,edx
c0005f6b:	88 c2                	mov    dl,al
c0005f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f71:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0005f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f80:	8d 50 01             	lea    edx,[eax+0x1]
c0005f83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005f87:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005f8d:	31 d2                	xor    edx,edx
c0005f8f:	88 c2                	mov    dl,al
c0005f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f95:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005f99:	83 e1 3f             	and    ecx,0x3f
c0005f9c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fa4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005faa:	31 d2                	xor    edx,edx
c0005fac:	88 c2                	mov    dl,al
c0005fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fb2:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0005fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fbd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005fc3:	31 d2                	xor    edx,edx
c0005fc5:	88 c2                	mov    dl,al
c0005fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fcb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0005fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005fda:	8d 50 01             	lea    edx,[eax+0x1]
c0005fdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005fe1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005fe7:	31 d2                	xor    edx,edx
c0005fe9:	88 c2                	mov    dl,al
c0005feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fef:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005ff3:	83 e1 3f             	and    ecx,0x3f
c0005ff6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005ffa:	90                   	nop
c0005ffb:	83 c4 0c             	add    esp,0xc
c0005ffe:	c3                   	ret    
c0005fff:	90                   	nop

c0006000 <Computer::setBootMessage(char const*)>:
c0006000:	c3                   	ret    
c0006001:	90                   	nop

c0006002 <Computer::detectFeatures()>:
c0006002:	55                   	push   ebp
c0006003:	57                   	push   edi
c0006004:	56                   	push   esi
c0006005:	53                   	push   ebx
c0006006:	83 ec 1c             	sub    esp,0x1c
c0006009:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000600d:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0006017:	e8 fd a1 ff ff       	call   c0000219 <detectCPUID>
c000601c:	85 c0                	test   eax,eax
c000601e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006024:	0f 95 c2             	setne  dl
c0006027:	83 e0 fd             	and    eax,0xfffffffd
c000602a:	01 d2                	add    edx,edx
c000602c:	09 d0                	or     eax,edx
c000602e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006034:	a8 02                	test   al,0x2
c0006036:	75 46                	jne    c000607e <Computer::detectFeatures()+0x7c>
c0006038:	f6 05 a1 f4 01 c0 04 	test   BYTE PTR ds:0xc001f4a1,0x4
c000603f:	74 07                	je     c0006048 <Computer::detectFeatures()+0x46>
c0006041:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0006048:	e8 69 53 01 00       	call   c001b3b6 <x87Detect>
c000604d:	83 e0 01             	and    eax,0x1
c0006050:	c1 e0 04             	shl    eax,0x4
c0006053:	88 c2                	mov    dl,al
c0006055:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000605b:	83 e0 ef             	and    eax,0xffffffef
c000605e:	09 d0                	or     eax,edx
c0006060:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006066:	a8 10                	test   al,0x10
c0006068:	0f 85 2a 01 00 00    	jne    c0006198 <Computer::detectFeatures()+0x196>
c000606e:	84 c0                	test   al,al
c0006070:	0f 88 45 01 00 00    	js     c00061bb <Computer::detectFeatures()+0x1b9>
c0006076:	83 c4 1c             	add    esp,0x1c
c0006079:	5b                   	pop    ebx
c000607a:	5e                   	pop    esi
c000607b:	5f                   	pop    edi
c000607c:	5d                   	pop    ebp
c000607d:	c3                   	ret    
c000607e:	83 ec 0c             	sub    esp,0xc
c0006081:	6a 20                	push   0x20
c0006083:	e8 b8 84 00 00       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c0006088:	83 e0 01             	and    eax,0x1
c000608b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006092:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006098:	83 e0 f7             	and    eax,0xfffffff7
c000609b:	09 d0                	or     eax,edx
c000609d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c00060a3:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00060aa:	e8 91 84 00 00       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c00060af:	83 e0 01             	and    eax,0x1
c00060b2:	88 c2                	mov    dl,al
c00060b4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c00060ba:	83 e0 fe             	and    eax,0xfffffffe
c00060bd:	09 d0                	or     eax,edx
c00060bf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c00060c5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c00060cc:	e8 6f 84 00 00       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c00060d1:	c1 e0 07             	shl    eax,0x7
c00060d4:	88 c2                	mov    dl,al
c00060d6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c00060dc:	83 e0 7f             	and    eax,0x7f
c00060df:	09 d0                	or     eax,edx
c00060e1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c00060e7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c00060ee:	e8 4d 84 00 00       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c00060f3:	83 c4 10             	add    esp,0x10
c00060f6:	83 e0 01             	and    eax,0x1
c00060f9:	c1 e0 05             	shl    eax,0x5
c00060fc:	88 c2                	mov    dl,al
c00060fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006104:	83 e0 df             	and    eax,0xffffffdf
c0006107:	09 d0                	or     eax,edx
c0006109:	f7 05 a0 f4 01 c0 01 04 00 00 	test   DWORD PTR ds:0xc001f4a0,0x401
c0006113:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006119:	0f 84 c2 00 00 00    	je     c00061e1 <Computer::detectFeatures()+0x1df>
c000611f:	83 e0 fe             	and    eax,0xfffffffe
c0006122:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006128:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000612e:	88 c2                	mov    dl,al
c0006130:	83 e2 09             	and    edx,0x9
c0006133:	fe ca                	dec    dl
c0006135:	75 09                	jne    c0006140 <Computer::detectFeatures()+0x13e>
c0006137:	83 e0 fe             	and    eax,0xfffffffe
c000613a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006140:	83 ec 0c             	sub    esp,0xc
c0006143:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006147:	50                   	push   eax
c0006148:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000614c:	55                   	push   ebp
c000614d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006151:	57                   	push   edi
c0006152:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006156:	56                   	push   esi
c0006157:	68 00 00 00 80       	push   0x80000000
c000615c:	e8 5b 83 00 00       	call   c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006161:	83 c4 20             	add    esp,0x20
c0006164:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000616b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000616f:	0f 86 c3 fe ff ff    	jbe    c0006038 <Computer::detectFeatures()+0x36>
c0006175:	83 ec 0c             	sub    esp,0xc
c0006178:	50                   	push   eax
c0006179:	55                   	push   ebp
c000617a:	57                   	push   edi
c000617b:	56                   	push   esi
c000617c:	68 01 00 00 80       	push   0x80000001
c0006181:	e8 36 83 00 00       	call   c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006186:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0006190:	83 c4 20             	add    esp,0x20
c0006193:	e9 a0 fe ff ff       	jmp    c0006038 <Computer::detectFeatures()+0x36>
c0006198:	e8 d3 51 01 00       	call   c001b370 <absolutelyNoChanceInHell>
c000619d:	88 c2                	mov    dl,al
c000619f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c00061a5:	c1 e2 07             	shl    edx,0x7
c00061a8:	83 e0 7f             	and    eax,0x7f
c00061ab:	09 d0                	or     eax,edx
c00061ad:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c00061b3:	84 c0                	test   al,al
c00061b5:	0f 89 bb fe ff ff    	jns    c0006076 <Computer::detectFeatures()+0x74>
c00061bb:	e8 30 4f 01 00       	call   c001b0f0 <avxDetect>
c00061c0:	83 e0 01             	and    eax,0x1
c00061c3:	c1 e0 05             	shl    eax,0x5
c00061c6:	88 c2                	mov    dl,al
c00061c8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c00061ce:	83 e0 df             	and    eax,0xffffffdf
c00061d1:	09 d0                	or     eax,edx
c00061d3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c00061d9:	83 c4 1c             	add    esp,0x1c
c00061dc:	5b                   	pop    ebx
c00061dd:	5e                   	pop    esi
c00061de:	5f                   	pop    edi
c00061df:	5d                   	pop    ebp
c00061e0:	c3                   	ret    
c00061e1:	83 ec 0c             	sub    esp,0xc
c00061e4:	68 00 02 00 00       	push   0x200
c00061e9:	e8 52 83 00 00       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c00061ee:	83 c4 10             	add    esp,0x10
c00061f1:	83 e0 01             	and    eax,0x1
c00061f4:	88 c2                	mov    dl,al
c00061f6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c00061fc:	83 e0 fe             	and    eax,0xfffffffe
c00061ff:	09 d0                	or     eax,edx
c0006201:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006207:	e9 1c ff ff ff       	jmp    c0006128 <Computer::detectFeatures()+0x126>

c000620c <Computer::displayFeatures()>:
c000620c:	c3                   	ret    
c000620d:	90                   	nop

c000620e <Computer::rdmsr(unsigned int)>:
c000620e:	83 ec 0c             	sub    esp,0xc
c0006211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006215:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000621c:	74 0a                	je     c0006228 <Computer::rdmsr(unsigned int)+0x1a>
c000621e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006222:	0f 32                	rdmsr  
c0006224:	83 c4 0c             	add    esp,0xc
c0006227:	c3                   	ret    
c0006228:	83 ec 0c             	sub    esp,0xc
c000622b:	68 10 cb 01 c0       	push   0xc001cb10
c0006230:	e8 f2 92 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0006235:	83 c4 10             	add    esp,0x10
c0006238:	eb e4                	jmp    c000621e <Computer::rdmsr(unsigned int)+0x10>

c000623a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000623a:	57                   	push   edi
c000623b:	56                   	push   esi
c000623c:	52                   	push   edx
c000623d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006241:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006245:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006249:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0006250:	74 0e                	je     c0006260 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006252:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006256:	89 f0                	mov    eax,esi
c0006258:	89 fa                	mov    edx,edi
c000625a:	0f 30                	wrmsr  
c000625c:	58                   	pop    eax
c000625d:	5e                   	pop    esi
c000625e:	5f                   	pop    edi
c000625f:	c3                   	ret    
c0006260:	83 ec 0c             	sub    esp,0xc
c0006263:	68 16 cb 01 c0       	push   0xc001cb16
c0006268:	e8 ba 92 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000626d:	83 c4 10             	add    esp,0x10
c0006270:	eb e0                	jmp    c0006252 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006272 <Computer::shutdown()>:
c0006272:	83 ec 0c             	sub    esp,0xc
c0006275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006279:	8b 10                	mov    edx,DWORD PTR [eax]
c000627b:	6a 00                	push   0x0
c000627d:	6a 00                	push   0x0
c000627f:	6a 00                	push   0x0
c0006281:	50                   	push   eax
c0006282:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006285:	83 c4 1c             	add    esp,0x1c
c0006288:	c3                   	ret    
c0006289:	90                   	nop

c000628a <Computer::restart()>:
c000628a:	83 ec 0c             	sub    esp,0xc
c000628d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006291:	8b 10                	mov    edx,DWORD PTR [eax]
c0006293:	6a 00                	push   0x0
c0006295:	6a 00                	push   0x0
c0006297:	6a 01                	push   0x1
c0006299:	50                   	push   eax
c000629a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000629d:	83 c4 1c             	add    esp,0x1c
c00062a0:	c3                   	ret    
c00062a1:	90                   	nop

c00062a2 <Computer::sleep()>:
c00062a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062a6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00062ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00062b0:	e9 03 7d 00 00       	jmp    c000dfb8 <ACPI::sleep()>
c00062b5:	90                   	nop

c00062b6 <Computer::nmiEnabled()>:
c00062b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062ba:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00062c0:	c3                   	ret    
c00062c1:	90                   	nop

c00062c2 <Computer::readCMOS(unsigned char)>:
c00062c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062c6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00062cd:	19 c0                	sbb    eax,eax
c00062cf:	83 e0 80             	and    eax,0xffffff80
c00062d2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00062d6:	e6 70                	out    0x70,al
c00062d8:	e4 71                	in     al,0x71
c00062da:	c3                   	ret    
c00062db:	90                   	nop

c00062dc <Computer::enableNMI(bool)>:
c00062dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00062e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062e4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00062ea:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00062f2:	eb ce                	jmp    c00062c2 <Computer::readCMOS(unsigned char)>

c00062f4 <Computer::open(int, int, void*)>:
c00062f4:	56                   	push   esi
c00062f5:	53                   	push   ebx
c00062f6:	83 ec 10             	sub    esp,0x10
c00062f9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00062fd:	f6 05 a0 f4 01 c0 04 	test   BYTE PTR ds:0xc001f4a0,0x4
c0006304:	68 1c cb 01 c0       	push   0xc001cb1c
c0006309:	0f 94 05 c0 ed 01 c0 	sete   BYTE PTR ds:0xc001edc0
c0006310:	e8 5a 09 00 00       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c0006315:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000631c:	e8 f4 08 00 00       	call   c0006c15 <malloc>
c0006321:	89 04 24             	mov    DWORD PTR [esp],eax
c0006324:	89 c6                	mov    esi,eax
c0006326:	e8 25 78 00 00       	call   c000db50 <ACPI::ACPI()>
c000632b:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0006331:	58                   	pop    eax
c0006332:	5a                   	pop    edx
c0006333:	56                   	push   esi
c0006334:	53                   	push   ebx
c0006335:	e8 de 4a 00 00       	call   c000ae18 <Device::addChild(Device*)>
c000633a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000633d:	e8 c0 fc ff ff       	call   c0006002 <Computer::detectFeatures()>
c0006342:	59                   	pop    ecx
c0006343:	5e                   	pop    esi
c0006344:	6a 01                	push   0x1
c0006346:	53                   	push   ebx
c0006347:	e8 90 ff ff ff       	call   c00062dc <Computer::enableNMI(bool)>
c000634c:	c7 04 24 34 cb 01 c0 	mov    DWORD PTR [esp],0xc001cb34
c0006353:	e8 17 09 00 00       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c0006358:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000635f:	e8 b1 08 00 00       	call   c0006c15 <malloc>
c0006364:	89 04 24             	mov    DWORD PTR [esp],eax
c0006367:	89 c6                	mov    esi,eax
c0006369:	e8 8a 82 00 00       	call   c000e5f8 <CPU::CPU()>
c000636e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006374:	58                   	pop    eax
c0006375:	5a                   	pop    edx
c0006376:	56                   	push   esi
c0006377:	53                   	push   ebx
c0006378:	e8 9b 4a 00 00       	call   c000ae18 <Device::addChild(Device*)>
c000637d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006383:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006387:	8b 10                	mov    edx,DWORD PTR [eax]
c0006389:	51                   	push   ecx
c000638a:	6a 00                	push   0x0
c000638c:	6a 00                	push   0x0
c000638e:	50                   	push   eax
c000638f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006392:	83 c4 14             	add    esp,0x14
c0006395:	68 e4 cb 01 c0       	push   0xc001cbe4
c000639a:	e8 d0 08 00 00       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c000639f:	e8 a8 e2 00 00       	call   c001464c <HalInitialiseCoprocessor()>
c00063a4:	c7 04 24 4e cb 01 c0 	mov    DWORD PTR [esp],0xc001cb4e
c00063ab:	e8 bf 08 00 00       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c00063b0:	c7 04 24 61 5d 00 c0 	mov    DWORD PTR [esp],0xc0005d61
c00063b7:	e8 d8 c4 00 00       	call   c0012894 <setupMultitasking(void (*)())>
c00063bc:	83 c4 14             	add    esp,0x14
c00063bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00063c4:	5b                   	pop    ebx
c00063c5:	5e                   	pop    esi
c00063c6:	c3                   	ret    
c00063c7:	90                   	nop

c00063c8 <Computer::disableNMI()>:
c00063c8:	6a 00                	push   0x0
c00063ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063ce:	50                   	push   eax
c00063cf:	e8 08 ff ff ff       	call   c00062dc <Computer::enableNMI(bool)>
c00063d4:	5a                   	pop    edx
c00063d5:	59                   	pop    ecx
c00063d6:	c3                   	ret    
c00063d7:	90                   	nop

c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00063d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063dc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00063e3:	19 c0                	sbb    eax,eax
c00063e5:	83 e0 80             	and    eax,0xffffff80
c00063e8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00063ec:	e6 70                	out    0x70,al
c00063ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f2:	e6 71                	out    0x71,al
c00063f4:	c3                   	ret    
c00063f5:	90                   	nop

c00063f6 <Computer::handleNMI()>:
c00063f6:	56                   	push   esi
c00063f7:	53                   	push   ebx
c00063f8:	83 ec 10             	sub    esp,0x10
c00063fb:	e4 92                	in     al,0x92
c00063fd:	89 c6                	mov    esi,eax
c00063ff:	e4 61                	in     al,0x61
c0006401:	68 69 cb 01 c0       	push   0xc001cb69
c0006406:	88 c3                	mov    bl,al
c0006408:	e8 cb 35 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000640d:	83 c4 10             	add    esp,0x10
c0006410:	83 e6 10             	and    esi,0x10
c0006413:	75 0d                	jne    c0006422 <Computer::handleNMI()+0x2c>
c0006415:	f6 c3 40             	test   bl,0x40
c0006418:	75 1d                	jne    c0006437 <Computer::handleNMI()+0x41>
c000641a:	84 db                	test   bl,bl
c000641c:	78 2d                	js     c000644b <Computer::handleNMI()+0x55>
c000641e:	58                   	pop    eax
c000641f:	5b                   	pop    ebx
c0006420:	5e                   	pop    esi
c0006421:	c3                   	ret    
c0006422:	83 ec 0c             	sub    esp,0xc
c0006425:	68 7a cb 01 c0       	push   0xc001cb7a
c000642a:	e8 f8 90 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000642f:	83 c4 10             	add    esp,0x10
c0006432:	f6 c3 40             	test   bl,0x40
c0006435:	74 e3                	je     c000641a <Computer::handleNMI()+0x24>
c0006437:	83 ec 0c             	sub    esp,0xc
c000643a:	68 87 cb 01 c0       	push   0xc001cb87
c000643f:	e8 e3 90 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0006444:	83 c4 10             	add    esp,0x10
c0006447:	84 db                	test   bl,bl
c0006449:	79 d3                	jns    c000641e <Computer::handleNMI()+0x28>
c000644b:	c7 44 24 10 91 cb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cb91
c0006453:	5a                   	pop    edx
c0006454:	5b                   	pop    ebx
c0006455:	5e                   	pop    esi
c0006456:	e9 cc 90 00 00       	jmp    c000f527 <Krnl::panic(char const*)>
c000645b:	90                   	nop

c000645c <GDTEntry::setBase(unsigned int)>:
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006464:	89 c1                	mov    ecx,eax
c0006466:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000646a:	c1 e9 10             	shr    ecx,0x10
c000646d:	c1 e8 18             	shr    eax,0x18
c0006470:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0006473:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0006476:	c3                   	ret    
c0006477:	90                   	nop

c0006478 <GDTEntry::setLimit(unsigned int)>:
c0006478:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000647c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006480:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0006483:	66 89 01             	mov    WORD PTR [ecx],ax
c0006486:	83 e2 f0             	and    edx,0xfffffff0
c0006489:	c1 e8 10             	shr    eax,0x10
c000648c:	83 e0 0f             	and    eax,0xf
c000648f:	09 d0                	or     eax,edx
c0006491:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0006494:	c3                   	ret    
c0006495:	90                   	nop

c0006496 <GDT::GDT()>:
c0006496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000649a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00064a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00064a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00064aa:	90                   	nop
c00064ab:	c3                   	ret    

c00064ac <GDT::addEntry(GDTEntry)>:
c00064ac:	53                   	push   ebx
c00064ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00064b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00064b5:	8b 02                	mov    eax,DWORD PTR [edx]
c00064b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00064bb:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00064bf:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00064c3:	8d 48 01             	lea    ecx,[eax+0x1]
c00064c6:	c1 e0 03             	shl    eax,0x3
c00064c9:	89 0a                	mov    DWORD PTR [edx],ecx
c00064cb:	5b                   	pop    ebx
c00064cc:	c3                   	ret    
c00064cd:	90                   	nop

c00064ce <GDT::getNumberOfEntries()>:
c00064ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00064d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00064d4:	c3                   	ret    
c00064d5:	90                   	nop

c00064d6 <GDT::flush()>:
c00064d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00064da:	8b 10                	mov    edx,DWORD PTR [eax]
c00064dc:	83 c0 04             	add    eax,0x4
c00064df:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00064e6:	a3 92 f4 01 c0       	mov    ds:0xc001f492,eax
c00064eb:	66 89 15 90 f4 01 c0 	mov    WORD PTR ds:0xc001f490,dx
c00064f2:	e9 86 9e ff ff       	jmp    c000037d <loadGDT>
c00064f7:	90                   	nop

c00064f8 <GDT::setup()>:
c00064f8:	57                   	push   edi
c00064f9:	56                   	push   esi
c00064fa:	53                   	push   ebx
c00064fb:	83 ec 40             	sub    esp,0x40
c00064fe:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006502:	6a 00                	push   0x0
c0006504:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0006508:	56                   	push   esi
c0006509:	e8 4e ff ff ff       	call   c000645c <GDTEntry::setBase(unsigned int)>
c000650e:	6a 00                	push   0x0
c0006510:	56                   	push   esi
c0006511:	e8 62 ff ff ff       	call   c0006478 <GDTEntry::setLimit(unsigned int)>
c0006516:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c000651e:	6a 00                	push   0x0
c0006520:	8d 74 24 44          	lea    esi,[esp+0x44]
c0006524:	56                   	push   esi
c0006525:	e8 32 ff ff ff       	call   c000645c <GDTEntry::setBase(unsigned int)>
c000652a:	68 ff ff ff 00       	push   0xffffff
c000652f:	56                   	push   esi
c0006530:	e8 43 ff ff ff       	call   c0006478 <GDTEntry::setLimit(unsigned int)>
c0006535:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006539:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000653e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0006543:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006547:	83 c4 20             	add    esp,0x20
c000654a:	6a 00                	push   0x0
c000654c:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0006550:	56                   	push   esi
c0006551:	e8 06 ff ff ff       	call   c000645c <GDTEntry::setBase(unsigned int)>
c0006556:	68 ff ff ff 00       	push   0xffffff
c000655b:	56                   	push   esi
c000655c:	e8 17 ff ff ff       	call   c0006478 <GDTEntry::setLimit(unsigned int)>
c0006561:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0006565:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006569:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000656d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0006571:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006575:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000657a:	0d 00 92 c0 00       	or     eax,0xc09200
c000657f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0006583:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0006587:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000658b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000658f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006593:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006597:	89 fa                	mov    edx,edi
c0006599:	80 cc 60             	or     ah,0x60
c000659c:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00065a2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00065a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00065aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00065ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065b2:	80 cc 60             	or     ah,0x60
c00065b5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00065b9:	89 f8                	mov    eax,edi
c00065bb:	25 ff ff 00 ff       	and    eax,0xff00ffff
c00065c0:	09 d0                	or     eax,edx
c00065c2:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00065c6:	89 c7                	mov    edi,eax
c00065c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00065cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00065d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00065d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00065d8:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00065de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065e2:	25 ff ff 00 ff       	and    eax,0xff00ffff
c00065e7:	09 d0                	or     eax,edx
c00065e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00065ed:	83 c4 0c             	add    esp,0xc
c00065f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00065f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00065f8:	53                   	push   ebx
c00065f9:	e8 ae fe ff ff       	call   c00064ac <GDT::addEntry(GDTEntry)>
c00065fe:	83 c4 0c             	add    esp,0xc
c0006601:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006605:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006609:	53                   	push   ebx
c000660a:	e8 9d fe ff ff       	call   c00064ac <GDT::addEntry(GDTEntry)>
c000660f:	83 c4 0c             	add    esp,0xc
c0006612:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006616:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000661a:	53                   	push   ebx
c000661b:	e8 8c fe ff ff       	call   c00064ac <GDT::addEntry(GDTEntry)>
c0006620:	83 c4 0c             	add    esp,0xc
c0006623:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006627:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000662b:	53                   	push   ebx
c000662c:	e8 7b fe ff ff       	call   c00064ac <GDT::addEntry(GDTEntry)>
c0006631:	83 c4 0c             	add    esp,0xc
c0006634:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006638:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000663c:	53                   	push   ebx
c000663d:	e8 6a fe ff ff       	call   c00064ac <GDT::addEntry(GDTEntry)>
c0006642:	83 c4 0c             	add    esp,0xc
c0006645:	57                   	push   edi
c0006646:	56                   	push   esi
c0006647:	53                   	push   ebx
c0006648:	e8 5f fe ff ff       	call   c00064ac <GDT::addEntry(GDTEntry)>
c000664d:	83 c4 0c             	add    esp,0xc
c0006650:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0006654:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0006658:	53                   	push   ebx
c0006659:	e8 4e fe ff ff       	call   c00064ac <GDT::addEntry(GDTEntry)>
c000665e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006661:	e8 70 fe ff ff       	call   c00064d6 <GDT::flush()>
c0006666:	83 c4 50             	add    esp,0x50
c0006669:	5b                   	pop    ebx
c000666a:	5e                   	pop    esi
c000666b:	5f                   	pop    edi
c000666c:	c3                   	ret    

c000666d <idleFunction(void*)>:
c000666d:	83 ec 0c             	sub    esp,0xc
c0006670:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0006675:	48                   	dec    eax
c0006676:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000667b:	75 01                	jne    c000667e <idleFunction(void*)+0x11>
c000667d:	fb                   	sti    
c000667e:	f4                   	hlt    
c000667f:	e8 ee 52 01 00       	call   c001b972 <idleCommon()>
c0006684:	eb f8                	jmp    c000667e <idleFunction(void*)+0x11>
c0006686:	66 90                	xchg   ax,ax

c0006688 <IDTEntry::IDTEntry(bool)>:
c0006688:	83 ec 04             	sub    esp,0x4
c000668b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000668f:	88 04 24             	mov    BYTE PTR [esp],al
c0006692:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006696:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000669c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00066a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00066ab:	83 e2 f0             	and    edx,0xfffffff0
c00066ae:	83 ca 0e             	or     edx,0xe
c00066b1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00066b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00066bb:	83 e2 ef             	and    edx,0xffffffef
c00066be:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00066c1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00066c5:	74 05                	je     c00066cc <IDTEntry::IDTEntry(bool)+0x44>
c00066c7:	b2 03                	mov    dl,0x3
c00066c9:	eb 05                	jmp    c00066d0 <IDTEntry::IDTEntry(bool)+0x48>
c00066cb:	90                   	nop
c00066cc:	b2 00                	mov    dl,0x0
c00066ce:	66 90                	xchg   ax,ax
c00066d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d4:	83 e2 03             	and    edx,0x3
c00066d7:	88 d1                	mov    cl,dl
c00066d9:	c1 e1 05             	shl    ecx,0x5
c00066dc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00066df:	83 e2 9f             	and    edx,0xffffff9f
c00066e2:	09 ca                	or     edx,ecx
c00066e4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00066ee:	83 ca 80             	or     edx,0xffffff80
c00066f1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00066f4:	90                   	nop
c00066f5:	83 c4 04             	add    esp,0x4
c00066f8:	c3                   	ret    
c00066f9:	90                   	nop

c00066fa <IDTEntry::setOffset(unsigned int)>:
c00066fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00066fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006702:	66 89 02             	mov    WORD PTR [edx],ax
c0006705:	c1 e8 10             	shr    eax,0x10
c0006708:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000670c:	c3                   	ret    
c000670d:	90                   	nop
c000670e:	66 90                	xchg   ax,ax

c0006710 <IDT::IDT()>:
c0006710:	90                   	nop
c0006711:	c3                   	ret    

c0006712 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0006712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006716:	83 c0 30             	add    eax,0x30
c0006719:	c3                   	ret    

c000671a <IDT::addEntry(IDTEntry, int)>:
c000671a:	53                   	push   ebx
c000671b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000671f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006723:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006727:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000672b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000672e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0006732:	5b                   	pop    ebx
c0006733:	c3                   	ret    

c0006734 <IDT::addEntry(int, void (*)(), bool)>:
c0006734:	53                   	push   ebx
c0006735:	83 ec 10             	sub    esp,0x10
c0006738:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000673d:	50                   	push   eax
c000673e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0006742:	53                   	push   ebx
c0006743:	e8 40 ff ff ff       	call   c0006688 <IDTEntry::IDTEntry(bool)>
c0006748:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000674c:	53                   	push   ebx
c000674d:	e8 a8 ff ff ff       	call   c00066fa <IDTEntry::setOffset(unsigned int)>
c0006752:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0006756:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000675a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000675e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0006762:	e8 b3 ff ff ff       	call   c000671a <IDT::addEntry(IDTEntry, int)>
c0006767:	83 c4 30             	add    esp,0x30
c000676a:	5b                   	pop    ebx
c000676b:	c3                   	ret    

c000676c <IDT::flush()>:
c000676c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006770:	66 c7 05 98 f4 01 c0 ff 07 	mov    WORD PTR ds:0xc001f498,0x7ff
c0006779:	a3 9a f4 01 c0       	mov    ds:0xc001f49a,eax
c000677e:	0f 01 1d 98 f4 01 c0 	lidtd  ds:0xc001f498
c0006785:	c3                   	ret    

c0006786 <IDT::setup()>:
c0006786:	57                   	push   edi
c0006787:	56                   	push   esi
c0006788:	53                   	push   ebx
c0006789:	83 ec 10             	sub    esp,0x10
c000678c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006790:	6a 00                	push   0x0
c0006792:	68 80 b1 01 c0       	push   0xc001b180
c0006797:	6a 00                	push   0x0
c0006799:	53                   	push   ebx
c000679a:	e8 95 ff ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c000679f:	6a 00                	push   0x0
c00067a1:	68 90 b1 01 c0       	push   0xc001b190
c00067a6:	6a 01                	push   0x1
c00067a8:	53                   	push   ebx
c00067a9:	e8 86 ff ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00067ae:	83 c4 20             	add    esp,0x20
c00067b1:	6a 00                	push   0x0
c00067b3:	68 9a b1 01 c0       	push   0xc001b19a
c00067b8:	6a 02                	push   0x2
c00067ba:	53                   	push   ebx
c00067bb:	e8 74 ff ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00067c0:	6a 00                	push   0x0
c00067c2:	68 a4 b1 01 c0       	push   0xc001b1a4
c00067c7:	6a 03                	push   0x3
c00067c9:	53                   	push   ebx
c00067ca:	e8 65 ff ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00067cf:	83 c4 20             	add    esp,0x20
c00067d2:	6a 00                	push   0x0
c00067d4:	68 ae b1 01 c0       	push   0xc001b1ae
c00067d9:	6a 04                	push   0x4
c00067db:	53                   	push   ebx
c00067dc:	e8 53 ff ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00067e1:	6a 00                	push   0x0
c00067e3:	68 b8 b1 01 c0       	push   0xc001b1b8
c00067e8:	6a 05                	push   0x5
c00067ea:	53                   	push   ebx
c00067eb:	e8 44 ff ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00067f0:	83 c4 20             	add    esp,0x20
c00067f3:	6a 00                	push   0x0
c00067f5:	68 c2 b1 01 c0       	push   0xc001b1c2
c00067fa:	6a 06                	push   0x6
c00067fc:	53                   	push   ebx
c00067fd:	e8 32 ff ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006802:	6a 00                	push   0x0
c0006804:	68 cc b1 01 c0       	push   0xc001b1cc
c0006809:	6a 07                	push   0x7
c000680b:	53                   	push   ebx
c000680c:	e8 23 ff ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006811:	83 c4 20             	add    esp,0x20
c0006814:	6a 00                	push   0x0
c0006816:	68 d6 b1 01 c0       	push   0xc001b1d6
c000681b:	6a 08                	push   0x8
c000681d:	53                   	push   ebx
c000681e:	e8 11 ff ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006823:	6a 00                	push   0x0
c0006825:	68 de b1 01 c0       	push   0xc001b1de
c000682a:	6a 09                	push   0x9
c000682c:	53                   	push   ebx
c000682d:	e8 02 ff ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006832:	83 c4 20             	add    esp,0x20
c0006835:	6a 00                	push   0x0
c0006837:	68 e8 b1 01 c0       	push   0xc001b1e8
c000683c:	6a 0a                	push   0xa
c000683e:	53                   	push   ebx
c000683f:	e8 f0 fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006844:	6a 00                	push   0x0
c0006846:	68 f0 b1 01 c0       	push   0xc001b1f0
c000684b:	6a 0b                	push   0xb
c000684d:	53                   	push   ebx
c000684e:	e8 e1 fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006853:	83 c4 20             	add    esp,0x20
c0006856:	6a 00                	push   0x0
c0006858:	68 f8 b1 01 c0       	push   0xc001b1f8
c000685d:	6a 0c                	push   0xc
c000685f:	53                   	push   ebx
c0006860:	e8 cf fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006865:	6a 00                	push   0x0
c0006867:	68 00 b2 01 c0       	push   0xc001b200
c000686c:	6a 0d                	push   0xd
c000686e:	53                   	push   ebx
c000686f:	e8 c0 fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006874:	83 c4 20             	add    esp,0x20
c0006877:	6a 00                	push   0x0
c0006879:	68 08 b2 01 c0       	push   0xc001b208
c000687e:	6a 0e                	push   0xe
c0006880:	53                   	push   ebx
c0006881:	e8 ae fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006886:	6a 00                	push   0x0
c0006888:	68 10 b2 01 c0       	push   0xc001b210
c000688d:	6a 0f                	push   0xf
c000688f:	53                   	push   ebx
c0006890:	e8 9f fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006895:	83 c4 20             	add    esp,0x20
c0006898:	6a 00                	push   0x0
c000689a:	68 1a b2 01 c0       	push   0xc001b21a
c000689f:	6a 10                	push   0x10
c00068a1:	53                   	push   ebx
c00068a2:	e8 8d fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00068a7:	6a 00                	push   0x0
c00068a9:	68 24 b2 01 c0       	push   0xc001b224
c00068ae:	6a 11                	push   0x11
c00068b0:	53                   	push   ebx
c00068b1:	e8 7e fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00068b6:	83 c4 20             	add    esp,0x20
c00068b9:	6a 00                	push   0x0
c00068bb:	68 2e b2 01 c0       	push   0xc001b22e
c00068c0:	6a 12                	push   0x12
c00068c2:	53                   	push   ebx
c00068c3:	e8 6c fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00068c8:	6a 01                	push   0x1
c00068ca:	68 c8 b2 01 c0       	push   0xc001b2c8
c00068cf:	6a 60                	push   0x60
c00068d1:	53                   	push   ebx
c00068d2:	e8 5d fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00068d7:	83 c4 20             	add    esp,0x20
c00068da:	6a 00                	push   0x0
c00068dc:	68 cf b2 01 c0       	push   0xc001b2cf
c00068e1:	6a 20                	push   0x20
c00068e3:	53                   	push   ebx
c00068e4:	e8 4b fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00068e9:	6a 00                	push   0x0
c00068eb:	68 ba b2 01 c0       	push   0xc001b2ba
c00068f0:	6a 21                	push   0x21
c00068f2:	53                   	push   ebx
c00068f3:	e8 3c fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00068f8:	83 c4 20             	add    esp,0x20
c00068fb:	6a 00                	push   0x0
c00068fd:	68 c1 b2 01 c0       	push   0xc001b2c1
c0006902:	6a 22                	push   0x22
c0006904:	53                   	push   ebx
c0006905:	e8 2a fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c000690a:	6a 00                	push   0x0
c000690c:	68 38 b2 01 c0       	push   0xc001b238
c0006911:	6a 23                	push   0x23
c0006913:	53                   	push   ebx
c0006914:	e8 1b fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006919:	83 c4 20             	add    esp,0x20
c000691c:	6a 00                	push   0x0
c000691e:	68 42 b2 01 c0       	push   0xc001b242
c0006923:	6a 24                	push   0x24
c0006925:	53                   	push   ebx
c0006926:	e8 09 fe ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c000692b:	6a 00                	push   0x0
c000692d:	68 4c b2 01 c0       	push   0xc001b24c
c0006932:	6a 25                	push   0x25
c0006934:	53                   	push   ebx
c0006935:	e8 fa fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c000693a:	83 c4 20             	add    esp,0x20
c000693d:	6a 00                	push   0x0
c000693f:	68 56 b2 01 c0       	push   0xc001b256
c0006944:	6a 26                	push   0x26
c0006946:	53                   	push   ebx
c0006947:	e8 e8 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c000694c:	6a 00                	push   0x0
c000694e:	68 60 b2 01 c0       	push   0xc001b260
c0006953:	6a 27                	push   0x27
c0006955:	53                   	push   ebx
c0006956:	e8 d9 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c000695b:	83 c4 20             	add    esp,0x20
c000695e:	6a 00                	push   0x0
c0006960:	68 6a b2 01 c0       	push   0xc001b26a
c0006965:	6a 28                	push   0x28
c0006967:	53                   	push   ebx
c0006968:	e8 c7 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c000696d:	6a 00                	push   0x0
c000696f:	68 74 b2 01 c0       	push   0xc001b274
c0006974:	6a 29                	push   0x29
c0006976:	53                   	push   ebx
c0006977:	e8 b8 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c000697c:	83 c4 20             	add    esp,0x20
c000697f:	6a 00                	push   0x0
c0006981:	68 7e b2 01 c0       	push   0xc001b27e
c0006986:	6a 2a                	push   0x2a
c0006988:	53                   	push   ebx
c0006989:	e8 a6 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c000698e:	6a 00                	push   0x0
c0006990:	68 88 b2 01 c0       	push   0xc001b288
c0006995:	6a 2b                	push   0x2b
c0006997:	53                   	push   ebx
c0006998:	e8 97 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c000699d:	83 c4 20             	add    esp,0x20
c00069a0:	6a 00                	push   0x0
c00069a2:	68 92 b2 01 c0       	push   0xc001b292
c00069a7:	6a 2c                	push   0x2c
c00069a9:	53                   	push   ebx
c00069aa:	e8 85 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00069af:	6a 00                	push   0x0
c00069b1:	68 9c b2 01 c0       	push   0xc001b29c
c00069b6:	6a 2d                	push   0x2d
c00069b8:	53                   	push   ebx
c00069b9:	e8 76 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00069be:	83 c4 20             	add    esp,0x20
c00069c1:	6a 00                	push   0x0
c00069c3:	68 a6 b2 01 c0       	push   0xc001b2a6
c00069c8:	6a 2e                	push   0x2e
c00069ca:	53                   	push   ebx
c00069cb:	e8 64 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00069d0:	6a 00                	push   0x0
c00069d2:	68 b0 b2 01 c0       	push   0xc001b2b0
c00069d7:	6a 2f                	push   0x2f
c00069d9:	53                   	push   ebx
c00069da:	e8 55 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00069df:	83 c4 20             	add    esp,0x20
c00069e2:	6a 00                	push   0x0
c00069e4:	68 06 b3 01 c0       	push   0xc001b306
c00069e9:	6a 30                	push   0x30
c00069eb:	53                   	push   ebx
c00069ec:	e8 43 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c00069f1:	6a 00                	push   0x0
c00069f3:	68 10 b3 01 c0       	push   0xc001b310
c00069f8:	6a 31                	push   0x31
c00069fa:	53                   	push   ebx
c00069fb:	e8 34 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006a00:	83 c4 20             	add    esp,0x20
c0006a03:	6a 00                	push   0x0
c0006a05:	68 1a b3 01 c0       	push   0xc001b31a
c0006a0a:	6a 32                	push   0x32
c0006a0c:	53                   	push   ebx
c0006a0d:	e8 22 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006a12:	6a 00                	push   0x0
c0006a14:	68 24 b3 01 c0       	push   0xc001b324
c0006a19:	6a 33                	push   0x33
c0006a1b:	53                   	push   ebx
c0006a1c:	e8 13 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006a21:	83 c4 20             	add    esp,0x20
c0006a24:	6a 00                	push   0x0
c0006a26:	68 2e b3 01 c0       	push   0xc001b32e
c0006a2b:	6a 34                	push   0x34
c0006a2d:	53                   	push   ebx
c0006a2e:	e8 01 fd ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006a33:	6a 00                	push   0x0
c0006a35:	68 38 b3 01 c0       	push   0xc001b338
c0006a3a:	6a 35                	push   0x35
c0006a3c:	53                   	push   ebx
c0006a3d:	e8 f2 fc ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006a42:	83 c4 20             	add    esp,0x20
c0006a45:	6a 00                	push   0x0
c0006a47:	68 42 b3 01 c0       	push   0xc001b342
c0006a4c:	6a 36                	push   0x36
c0006a4e:	53                   	push   ebx
c0006a4f:	e8 e0 fc ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006a54:	6a 00                	push   0x0
c0006a56:	68 4c b3 01 c0       	push   0xc001b34c
c0006a5b:	6a 37                	push   0x37
c0006a5d:	53                   	push   ebx
c0006a5e:	e8 d1 fc ff ff       	call   c0006734 <IDT::addEntry(int, void (*)(), bool)>
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	6a 03                	push   0x3
c0006a68:	6a 02                	push   0x2
c0006a6a:	ff 35 74 f5 01 c0    	push   DWORD PTR ds:0xc001f574
c0006a70:	e8 39 24 00 00       	call   c0008eae <VAS::allocatePages(int, int)>
c0006a75:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0006a7c:	89 c6                	mov    esi,eax
c0006a7e:	e8 92 01 00 00       	call   c0006c15 <malloc>
c0006a83:	81 c6 00 20 00 00    	add    esi,0x2000
c0006a89:	89 04 24             	mov    DWORD PTR [esp],eax
c0006a8c:	89 c7                	mov    edi,eax
c0006a8e:	e8 01 16 00 00       	call   c0008094 <TSS::TSS()>
c0006a93:	83 c4 0c             	add    esp,0xc
c0006a96:	68 d6 b1 01 c0       	push   0xc001b1d6
c0006a9b:	56                   	push   esi
c0006a9c:	57                   	push   edi
c0006a9d:	e8 36 16 00 00       	call   c00080d8 <TSS::setup(unsigned long, unsigned long)>
c0006aa2:	89 c6                	mov    esi,eax
c0006aa4:	58                   	pop    eax
c0006aa5:	5a                   	pop    edx
c0006aa6:	6a 00                	push   0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	50                   	push   eax
c0006aad:	e8 d6 fb ff ff       	call   c0006688 <IDTEntry::IDTEntry(bool)>
c0006ab2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006ab6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0006abb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0006ac2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0006ac8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006acc:	80 ce 05             	or     dh,0x5
c0006acf:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0006ad2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006ad6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006ada:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0006add:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006ae0:	e8 87 fc ff ff       	call   c000676c <IDT::flush()>
c0006ae5:	83 c4 20             	add    esp,0x20
c0006ae8:	5b                   	pop    ebx
c0006ae9:	5e                   	pop    esi
c0006aea:	5f                   	pop    edi
c0006aeb:	c3                   	ret    

c0006aec <sbrk>:
c0006aec:	55                   	push   ebp
c0006aed:	57                   	push   edi
c0006aee:	56                   	push   esi
c0006aef:	53                   	push   ebx
c0006af0:	83 ec 1c             	sub    esp,0x1c
c0006af3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006af7:	85 c0                	test   eax,eax
c0006af9:	74 5f                	je     c0006b5a <sbrk+0x6e>
c0006afb:	78 64                	js     c0006b61 <sbrk+0x75>
c0006afd:	8b 15 48 ec 01 c0    	mov    edx,DWORD PTR ds:0xc001ec48
c0006b03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006b07:	05 ff 0f 00 00       	add    eax,0xfff
c0006b0c:	89 c5                	mov    ebp,eax
c0006b0e:	78 69                	js     c0006b79 <sbrk+0x8d>
c0006b10:	c1 fd 0c             	sar    ebp,0xc
c0006b13:	bb 00 00 00 00       	mov    ebx,0x0
c0006b18:	8b 35 74 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f574
c0006b1e:	8b 3d 48 ec 01 c0    	mov    edi,DWORD PTR ds:0xc001ec48
c0006b24:	e8 b9 04 00 00       	call   c0006fe2 <Phys::allocatePage()>
c0006b29:	68 01 04 00 00       	push   0x401
c0006b2e:	57                   	push   edi
c0006b2f:	50                   	push   eax
c0006b30:	56                   	push   esi
c0006b31:	e8 74 22 00 00       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c0006b36:	81 05 48 ec 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001ec48,0x1000
c0006b40:	43                   	inc    ebx
c0006b41:	83 c4 10             	add    esp,0x10
c0006b44:	39 dd                	cmp    ebp,ebx
c0006b46:	75 d0                	jne    c0006b18 <sbrk+0x2c>
c0006b48:	0f 20 d8             	mov    eax,cr3
c0006b4b:	0f 22 d8             	mov    cr3,eax
c0006b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b52:	83 c4 1c             	add    esp,0x1c
c0006b55:	5b                   	pop    ebx
c0006b56:	5e                   	pop    esi
c0006b57:	5f                   	pop    edi
c0006b58:	5d                   	pop    ebp
c0006b59:	c3                   	ret    
c0006b5a:	a1 48 ec 01 c0       	mov    eax,ds:0xc001ec48
c0006b5f:	eb f1                	jmp    c0006b52 <sbrk+0x66>
c0006b61:	83 ec 08             	sub    esp,0x8
c0006b64:	50                   	push   eax
c0006b65:	68 34 cc 01 c0       	push   0xc001cc34
c0006b6a:	e8 69 2e 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0006b6f:	83 c4 10             	add    esp,0x10
c0006b72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006b77:	eb d9                	jmp    c0006b52 <sbrk+0x66>
c0006b79:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0006b7f:	eb 8f                	jmp    c0006b10 <sbrk+0x24>

c0006b81 <mmap>:
c0006b81:	83 ec 18             	sub    esp,0x18
c0006b84:	68 64 cc 01 c0       	push   0xc001cc64
c0006b89:	e8 99 89 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0006b8e:	b8 00 00 00 00       	mov    eax,0x0
c0006b93:	83 c4 1c             	add    esp,0x1c
c0006b96:	c3                   	ret    

c0006b97 <munmap>:
c0006b97:	83 ec 18             	sub    esp,0x18
c0006b9a:	68 69 cc 01 c0       	push   0xc001cc69
c0006b9f:	e8 83 89 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0006ba4:	b8 00 00 00 00       	mov    eax,0x0
c0006ba9:	83 c4 1c             	add    esp,0x1c
c0006bac:	c3                   	ret    

c0006bad <liballoc_lock()>:
c0006bad:	fa                   	cli    
c0006bae:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0006bb4:	b8 00 00 00 00       	mov    eax,0x0
c0006bb9:	c3                   	ret    

c0006bba <liballoc_unlock()>:
c0006bba:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0006bbf:	48                   	dec    eax
c0006bc0:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0006bc5:	75 01                	jne    c0006bc8 <liballoc_unlock()+0xe>
c0006bc7:	fb                   	sti    
c0006bc8:	b8 00 00 00 00       	mov    eax,0x0
c0006bcd:	c3                   	ret    

c0006bce <liballoc_alloc(int)>:
c0006bce:	83 ec 10             	sub    esp,0x10
c0006bd1:	6a 01                	push   0x1
c0006bd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006bd7:	ff 35 74 f5 01 c0    	push   DWORD PTR ds:0xc001f574
c0006bdd:	e8 cc 22 00 00       	call   c0008eae <VAS::allocatePages(int, int)>
c0006be2:	83 c4 1c             	add    esp,0x1c
c0006be5:	c3                   	ret    

c0006be6 <liballoc_free(void*, int)>:
c0006be6:	83 ec 14             	sub    esp,0x14
c0006be9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006bed:	ff 35 74 f5 01 c0    	push   DWORD PTR ds:0xc001f574
c0006bf3:	e8 72 1f 00 00       	call   c0008b6a <VAS::freeAllocatedPages(unsigned long)>
c0006bf8:	b8 00 00 00 00       	mov    eax,0x0
c0006bfd:	83 c4 1c             	add    esp,0x1c
c0006c00:	c3                   	ret    

c0006c01 <realloc>:
c0006c01:	83 ec 14             	sub    esp,0x14
c0006c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c0c:	e8 40 a9 ff ff       	call   c0001551 <dlrealloc>
c0006c11:	83 c4 1c             	add    esp,0x1c
c0006c14:	c3                   	ret    

c0006c15 <malloc>:
c0006c15:	83 ec 18             	sub    esp,0x18
c0006c18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c1c:	e8 f3 a3 ff ff       	call   c0001014 <dlmalloc>
c0006c21:	83 c4 1c             	add    esp,0x1c
c0006c24:	c3                   	ret    

c0006c25 <free>:
c0006c25:	83 ec 18             	sub    esp,0x18
c0006c28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c2c:	e8 88 a0 ff ff       	call   c0000cb9 <dlfree>
c0006c31:	83 c4 1c             	add    esp,0x1c
c0006c34:	c3                   	ret    

c0006c35 <rfree>:
c0006c35:	83 ec 18             	sub    esp,0x18
c0006c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c3c:	e8 78 a0 ff ff       	call   c0000cb9 <dlfree>
c0006c41:	83 c4 1c             	add    esp,0x1c
c0006c44:	c3                   	ret    

c0006c45 <calloc>:
c0006c45:	56                   	push   esi
c0006c46:	53                   	push   ebx
c0006c47:	83 ec 10             	sub    esp,0x10
c0006c4a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006c4e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0006c53:	53                   	push   ebx
c0006c54:	e8 bc ff ff ff       	call   c0006c15 <malloc>
c0006c59:	89 c6                	mov    esi,eax
c0006c5b:	83 c4 0c             	add    esp,0xc
c0006c5e:	53                   	push   ebx
c0006c5f:	6a 00                	push   0x0
c0006c61:	50                   	push   eax
c0006c62:	e8 89 98 ff ff       	call   c00004f0 <memset>
c0006c67:	89 f0                	mov    eax,esi
c0006c69:	83 c4 14             	add    esp,0x14
c0006c6c:	5b                   	pop    ebx
c0006c6d:	5e                   	pop    esi
c0006c6e:	c3                   	ret    

c0006c6f <Krnl::setBootMessage(char const*)>:
c0006c6f:	57                   	push   edi
c0006c70:	56                   	push   esi
c0006c71:	53                   	push   ebx
c0006c72:	81 ec a4 00 00 00    	sub    esp,0xa4
c0006c78:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0006c7f:	68 9e 00 00 00       	push   0x9e
c0006c84:	6a 00                	push   0x0
c0006c86:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0006c8a:	56                   	push   esi
c0006c8b:	e8 60 98 ff ff       	call   c00004f0 <memset>
c0006c90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006c93:	e8 c8 98 ff ff       	call   c0000560 <strlen>
c0006c98:	ba 50 00 00 00       	mov    edx,0x50
c0006c9d:	83 c4 10             	add    esp,0x10
c0006ca0:	29 c2                	sub    edx,eax
c0006ca2:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0006ca6:	d1 ea                	shr    edx,1
c0006ca8:	84 c0                	test   al,al
c0006caa:	74 19                	je     c0006cc5 <Krnl::setBootMessage(char const*)+0x56>
c0006cac:	01 d2                	add    edx,edx
c0006cae:	43                   	inc    ebx
c0006caf:	01 f2                	add    edx,esi
c0006cb1:	80 cc 0f             	or     ah,0xf
c0006cb4:	83 c2 02             	add    edx,0x2
c0006cb7:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0006cbb:	43                   	inc    ebx
c0006cbc:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0006cc1:	84 c0                	test   al,al
c0006cc3:	75 ec                	jne    c0006cb1 <Krnl::setBootMessage(char const*)+0x42>
c0006cc5:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0006cca:	b9 9e 00 00 00       	mov    ecx,0x9e
c0006ccf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cd1:	81 c4 a0 00 00 00    	add    esp,0xa0
c0006cd7:	5b                   	pop    ebx
c0006cd8:	5e                   	pop    esi
c0006cd9:	5f                   	pop    edi
c0006cda:	c3                   	ret    

c0006cdb <kernel_main>:
c0006cdb:	55                   	push   ebp
c0006cdc:	57                   	push   edi
c0006cdd:	bf f9 03 00 00       	mov    edi,0x3f9
c0006ce2:	56                   	push   esi
c0006ce3:	89 fa                	mov    edx,edi
c0006ce5:	53                   	push   ebx
c0006ce6:	31 f6                	xor    esi,esi
c0006ce8:	83 ec 38             	sub    esp,0x38
c0006ceb:	a1 00 05 00 00       	mov    eax,ds:0x500
c0006cf0:	a3 a0 f4 01 c0       	mov    ds:0xc001f4a0,eax
c0006cf5:	89 f0                	mov    eax,esi
c0006cf7:	ee                   	out    dx,al
c0006cf8:	bb fb 03 00 00       	mov    ebx,0x3fb
c0006cfd:	b0 80                	mov    al,0x80
c0006cff:	89 da                	mov    edx,ebx
c0006d01:	ee                   	out    dx,al
c0006d02:	b1 03                	mov    cl,0x3
c0006d04:	ba f8 03 00 00       	mov    edx,0x3f8
c0006d09:	88 c8                	mov    al,cl
c0006d0b:	ee                   	out    dx,al
c0006d0c:	89 f0                	mov    eax,esi
c0006d0e:	89 fa                	mov    edx,edi
c0006d10:	ee                   	out    dx,al
c0006d11:	88 c8                	mov    al,cl
c0006d13:	89 da                	mov    edx,ebx
c0006d15:	ee                   	out    dx,al
c0006d16:	b0 c7                	mov    al,0xc7
c0006d18:	ba fa 03 00 00       	mov    edx,0x3fa
c0006d1d:	ee                   	out    dx,al
c0006d1e:	b0 0b                	mov    al,0xb
c0006d20:	ba fc 03 00 00       	mov    edx,0x3fc
c0006d25:	ee                   	out    dx,al
c0006d26:	68 70 cc 01 c0       	push   0xc001cc70
c0006d2b:	e8 a8 2c 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0006d30:	0f be 05 60 ec 01 c0 	movsx  eax,BYTE PTR ds:0xc001ec60
c0006d37:	83 c4 10             	add    esp,0x10
c0006d3a:	84 c0                	test   al,al
c0006d3c:	74 5c                	je     c0006d9a <kernel_main+0xbf>
c0006d3e:	31 db                	xor    ebx,ebx
c0006d40:	bd 0a 00 00 00       	mov    ebp,0xa
c0006d45:	bf 05 00 00 00       	mov    edi,0x5
c0006d4a:	31 f6                	xor    esi,esi
c0006d4c:	eb 14                	jmp    c0006d62 <kernel_main+0x87>
c0006d4e:	47                   	inc    edi
c0006d4f:	bd 0a 00 00 00       	mov    ebp,0xa
c0006d54:	31 f6                	xor    esi,esi
c0006d56:	43                   	inc    ebx
c0006d57:	0f be 83 60 ec 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe13a0]
c0006d5e:	84 c0                	test   al,al
c0006d60:	74 38                	je     c0006d9a <kernel_main+0xbf>
c0006d62:	80 be 96 ec 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe136a],0xdb
c0006d69:	0f 84 97 00 00 00    	je     c0006e06 <kernel_main+0x12b>
c0006d6f:	3c 0d                	cmp    al,0xd
c0006d71:	74 e3                	je     c0006d56 <kernel_main+0x7b>
c0006d73:	3c 0a                	cmp    al,0xa
c0006d75:	74 d7                	je     c0006d4e <kernel_main+0x73>
c0006d77:	83 ec 0c             	sub    esp,0xc
c0006d7a:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0006d7e:	57                   	push   edi
c0006d7f:	43                   	inc    ebx
c0006d80:	52                   	push   edx
c0006d81:	46                   	inc    esi
c0006d82:	6a 00                	push   0x0
c0006d84:	6a 0e                	push   0xe
c0006d86:	50                   	push   eax
c0006d87:	e8 f4 e5 00 00       	call   c0015380 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0006d8c:	83 c4 20             	add    esp,0x20
c0006d8f:	0f be 83 60 ec 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe13a0]
c0006d96:	84 c0                	test   al,al
c0006d98:	75 c8                	jne    c0006d62 <kernel_main+0x87>
c0006d9a:	83 ec 0c             	sub    esp,0xc
c0006d9d:	a1 24 05 00 00       	mov    eax,ds:0x524
c0006da2:	05 ff 0f 00 00       	add    eax,0xfff
c0006da7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006dac:	50                   	push   eax
c0006dad:	e8 82 03 00 00       	call   c0007134 <Phys::physicalMemorySetup(unsigned int)>
c0006db2:	e8 59 1b 00 00       	call   c0008910 <Virt::virtualMemorySetup()>
c0006db7:	58                   	pop    eax
c0006db8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0006dbc:	53                   	push   ebx
c0006dbd:	e8 16 27 00 00       	call   c00094d8 <VAS::VAS()>
c0006dc2:	89 1d 74 f5 01 c0    	mov    DWORD PTR ds:0xc001f574,ebx
c0006dc8:	e8 53 92 ff ff       	call   c0000020 <callGlobalConstructors>
c0006dcd:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0006dd4:	e8 3c fe ff ff       	call   c0006c15 <malloc>
c0006dd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ddc:	89 c6                	mov    esi,eax
c0006dde:	e8 b7 f0 ff ff       	call   c0005e9a <Computer::Computer()>
c0006de3:	6a 00                	push   0x0
c0006de5:	89 35 88 f4 01 c0    	mov    DWORD PTR ds:0xc001f488,esi
c0006deb:	6a 00                	push   0x0
c0006ded:	6a 00                	push   0x0
c0006def:	56                   	push   esi
c0006df0:	e8 ff f4 ff ff       	call   c00062f4 <Computer::open(int, int, void*)>
c0006df5:	83 c4 14             	add    esp,0x14
c0006df8:	53                   	push   ebx
c0006df9:	e8 48 1e 00 00       	call   c0008c46 <VAS::~VAS()>
c0006dfe:	83 c4 3c             	add    esp,0x3c
c0006e01:	5b                   	pop    ebx
c0006e02:	5e                   	pop    esi
c0006e03:	5f                   	pop    edi
c0006e04:	5d                   	pop    ebp
c0006e05:	c3                   	ret    
c0006e06:	31 d2                	xor    edx,edx
c0006e08:	8a 96 95 ec 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe136b]
c0006e0e:	83 e2 fe             	and    edx,0xfffffffe
c0006e11:	81 fa ba 00 00 00    	cmp    edx,0xba
c0006e17:	0f 85 52 ff ff ff    	jne    c0006d6f <kernel_main+0x94>
c0006e1d:	45                   	inc    ebp
c0006e1e:	e9 4c ff ff ff       	jmp    c0006d6f <kernel_main+0x94>

c0006e23 <Phys::allocateDMA(unsigned long)>:
c0006e23:	55                   	push   ebp
c0006e24:	31 ed                	xor    ebp,ebp
c0006e26:	57                   	push   edi
c0006e27:	56                   	push   esi
c0006e28:	53                   	push   ebx
c0006e29:	31 db                	xor    ebx,ebx
c0006e2b:	83 ec 1c             	sub    esp,0x1c
c0006e2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006e32:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006e3a:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0006e40:	31 c0                	xor    eax,eax
c0006e42:	c1 ef 0c             	shr    edi,0xc
c0006e45:	eb 19                	jmp    c0006e60 <Phys::allocateDMA(unsigned long)+0x3d>
c0006e47:	85 c0                	test   eax,eax
c0006e49:	75 06                	jne    c0006e51 <Phys::allocateDMA(unsigned long)+0x2e>
c0006e4b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006e4f:	89 dd                	mov    ebp,ebx
c0006e51:	8d 70 01             	lea    esi,[eax+0x1]
c0006e54:	39 f7                	cmp    edi,esi
c0006e56:	74 33                	je     c0006e8b <Phys::allocateDMA(unsigned long)+0x68>
c0006e58:	89 f0                	mov    eax,esi
c0006e5a:	43                   	inc    ebx
c0006e5b:	83 fb 0f             	cmp    ebx,0xf
c0006e5e:	7f 11                	jg     c0006e71 <Phys::allocateDMA(unsigned long)+0x4e>
c0006e60:	80 bb bc f4 01 c0 00 	cmp    BYTE PTR [ebx-0x3ffe0b44],0x0
c0006e67:	74 de                	je     c0006e47 <Phys::allocateDMA(unsigned long)+0x24>
c0006e69:	31 c0                	xor    eax,eax
c0006e6b:	43                   	inc    ebx
c0006e6c:	83 fb 0f             	cmp    ebx,0xf
c0006e6f:	7e ef                	jle    c0006e60 <Phys::allocateDMA(unsigned long)+0x3d>
c0006e71:	83 ec 0c             	sub    esp,0xc
c0006e74:	68 88 cc 01 c0       	push   0xc001cc88
c0006e79:	e8 a9 86 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0006e7e:	83 c4 10             	add    esp,0x10
c0006e81:	31 c0                	xor    eax,eax
c0006e83:	83 c4 1c             	add    esp,0x1c
c0006e86:	5b                   	pop    ebx
c0006e87:	5e                   	pop    esi
c0006e88:	5f                   	pop    edi
c0006e89:	5d                   	pop    ebp
c0006e8a:	c3                   	ret    
c0006e8b:	89 e9                	mov    ecx,ebp
c0006e8d:	c1 f9 04             	sar    ecx,0x4
c0006e90:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006e94:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0006e98:	89 ca                	mov    edx,ecx
c0006e9a:	4a                   	dec    edx
c0006e9b:	79 03                	jns    c0006ea0 <Phys::allocateDMA(unsigned long)+0x7d>
c0006e9d:	8d 51 0e             	lea    edx,[ecx+0xe]
c0006ea0:	c1 fa 04             	sar    edx,0x4
c0006ea3:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0006ea7:	74 08                	je     c0006eb1 <Phys::allocateDMA(unsigned long)+0x8e>
c0006ea9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ead:	31 c0                	xor    eax,eax
c0006eaf:	eb ba                	jmp    c0006e6b <Phys::allocateDMA(unsigned long)+0x48>
c0006eb1:	85 f6                	test   esi,esi
c0006eb3:	74 15                	je     c0006eca <Phys::allocateDMA(unsigned long)+0xa7>
c0006eb5:	8d 95 bc f4 01 c0    	lea    edx,[ebp-0x3ffe0b44]
c0006ebb:	8d 84 05 bd f4 01 c0 	lea    eax,[ebp+eax*1-0x3ffe0b43]
c0006ec2:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0006ec5:	42                   	inc    edx
c0006ec6:	39 d0                	cmp    eax,edx
c0006ec8:	75 f8                	jne    c0006ec2 <Phys::allocateDMA(unsigned long)+0x9f>
c0006eca:	01 3d b4 f4 01 c0    	add    DWORD PTR ds:0xc001f4b4,edi
c0006ed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ed4:	85 c0                	test   eax,eax
c0006ed6:	74 17                	je     c0006eef <Phys::allocateDMA(unsigned long)+0xcc>
c0006ed8:	83 ec 0c             	sub    esp,0xc
c0006edb:	68 88 cc 01 c0       	push   0xc001cc88
c0006ee0:	e8 42 86 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0006ee5:	83 c4 10             	add    esp,0x10
c0006ee8:	89 f0                	mov    eax,esi
c0006eea:	e9 6b ff ff ff       	jmp    c0006e5a <Phys::allocateDMA(unsigned long)+0x37>
c0006eef:	c1 e5 0c             	shl    ebp,0xc
c0006ef2:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0006ef8:	eb 89                	jmp    c0006e83 <Phys::allocateDMA(unsigned long)+0x60>

c0006efa <Phys::freeDMA(unsigned long, unsigned long)>:
c0006efa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efe:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0006f04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f08:	c1 ea 0c             	shr    edx,0xc
c0006f0b:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0006f10:	29 15 b4 f4 01 c0    	sub    DWORD PTR ds:0xc001f4b4,edx
c0006f16:	c1 e8 0c             	shr    eax,0xc
c0006f19:	85 d2                	test   edx,edx
c0006f1b:	74 0f                	je     c0006f2c <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0006f1d:	05 bc f4 01 c0       	add    eax,0xc001f4bc
c0006f22:	01 c2                	add    edx,eax
c0006f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006f27:	40                   	inc    eax
c0006f28:	39 d0                	cmp    eax,edx
c0006f2a:	75 f8                	jne    c0006f24 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0006f2c:	c3                   	ret    

c0006f2d <Phys::setPageState(unsigned long, bool)>:
c0006f2d:	56                   	push   esi
c0006f2e:	ba 01 00 00 00       	mov    edx,0x1
c0006f33:	53                   	push   ebx
c0006f34:	8b 35 a4 ed 01 c0    	mov    esi,DWORD PTR ds:0xc001eda4
c0006f3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f42:	89 c8                	mov    eax,ecx
c0006f44:	83 e1 07             	and    ecx,0x7
c0006f47:	c1 e8 03             	shr    eax,0x3
c0006f4a:	d3 e3                	shl    ebx,cl
c0006f4c:	01 c6                	add    esi,eax
c0006f4e:	d3 e2                	shl    edx,cl
c0006f50:	f7 d2                	not    edx
c0006f52:	20 16                	and    BYTE PTR [esi],dl
c0006f54:	03 05 a4 ed 01 c0    	add    eax,DWORD PTR ds:0xc001eda4
c0006f5a:	08 18                	or     BYTE PTR [eax],bl
c0006f5c:	5b                   	pop    ebx
c0006f5d:	5e                   	pop    esi
c0006f5e:	c3                   	ret    

c0006f5f <Phys::getPageState(unsigned long)>:
c0006f5f:	53                   	push   ebx
c0006f60:	8b 15 a4 ed 01 c0    	mov    edx,DWORD PTR ds:0xc001eda4
c0006f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006f6a:	31 db                	xor    ebx,ebx
c0006f6c:	89 c8                	mov    eax,ecx
c0006f6e:	83 e1 07             	and    ecx,0x7
c0006f71:	c1 e8 03             	shr    eax,0x3
c0006f74:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0006f77:	89 d8                	mov    eax,ebx
c0006f79:	5b                   	pop    ebx
c0006f7a:	d3 f8                	sar    eax,cl
c0006f7c:	83 e0 01             	and    eax,0x1
c0006f7f:	c3                   	ret    

c0006f80 <Phys::freePage(unsigned long)>:
c0006f80:	53                   	push   ebx
c0006f81:	83 ec 08             	sub    esp,0x8
c0006f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f88:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0006f8e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0006f94:	76 3a                	jbe    c0006fd0 <Phys::freePage(unsigned long)+0x50>
c0006f96:	c1 e8 0c             	shr    eax,0xc
c0006f99:	50                   	push   eax
c0006f9a:	89 c3                	mov    ebx,eax
c0006f9c:	e8 be ff ff ff       	call   c0006f5f <Phys::getPageState(unsigned long)>
c0006fa1:	5a                   	pop    edx
c0006fa2:	84 c0                	test   al,al
c0006fa4:	74 19                	je     c0006fbf <Phys::freePage(unsigned long)+0x3f>
c0006fa6:	83 ec 08             	sub    esp,0x8
c0006fa9:	ff 0d b4 f4 01 c0    	dec    DWORD PTR ds:0xc001f4b4
c0006faf:	6a 00                	push   0x0
c0006fb1:	53                   	push   ebx
c0006fb2:	e8 76 ff ff ff       	call   c0006f2d <Phys::setPageState(unsigned long, bool)>
c0006fb7:	83 c4 10             	add    esp,0x10
c0006fba:	83 c4 08             	add    esp,0x8
c0006fbd:	5b                   	pop    ebx
c0006fbe:	c3                   	ret    
c0006fbf:	c7 44 24 10 2d cd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cd2d
c0006fc7:	83 c4 08             	add    esp,0x8
c0006fca:	5b                   	pop    ebx
c0006fcb:	e9 57 85 00 00       	jmp    c000f527 <Krnl::panic(char const*)>
c0006fd0:	68 00 10 00 00       	push   0x1000
c0006fd5:	50                   	push   eax
c0006fd6:	e8 1f ff ff ff       	call   c0006efa <Phys::freeDMA(unsigned long, unsigned long)>
c0006fdb:	59                   	pop    ecx
c0006fdc:	5b                   	pop    ebx
c0006fdd:	83 c4 08             	add    esp,0x8
c0006fe0:	5b                   	pop    ebx
c0006fe1:	c3                   	ret    

c0006fe2 <Phys::allocatePage()>:
c0006fe2:	56                   	push   esi
c0006fe3:	53                   	push   ebx
c0006fe4:	83 ec 14             	sub    esp,0x14
c0006fe7:	8b 35 a8 f4 01 c0    	mov    esi,DWORD PTR ds:0xc001f4a8
c0006fed:	89 f3                	mov    ebx,esi
c0006fef:	eb 0a                	jmp    c0006ffb <Phys::allocatePage()+0x19>
c0006ff1:	89 1d a8 f4 01 c0    	mov    DWORD PTR ds:0xc001f4a8,ebx
c0006ff7:	39 de                	cmp    esi,ebx
c0006ff9:	74 24                	je     c000701f <Phys::allocatePage()+0x3d>
c0006ffb:	53                   	push   ebx
c0006ffc:	e8 5e ff ff ff       	call   c0006f5f <Phys::getPageState(unsigned long)>
c0007001:	5a                   	pop    edx
c0007002:	84 c0                	test   al,al
c0007004:	74 5f                	je     c0007065 <Phys::allocatePage()+0x83>
c0007006:	43                   	inc    ebx
c0007007:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000700d:	75 e2                	jne    c0006ff1 <Phys::allocatePage()+0xf>
c000700f:	31 db                	xor    ebx,ebx
c0007011:	c7 05 a8 f4 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f4a8,0x0
c000701b:	39 de                	cmp    esi,ebx
c000701d:	75 dc                	jne    c0006ffb <Phys::allocatePage()+0x19>
c000701f:	83 ec 0c             	sub    esp,0xc
c0007022:	80 35 cc f4 01 c0 01 	xor    BYTE PTR ds:0xc001f4cc,0x1
c0007029:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000702e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007031:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007037:	50                   	push   eax
c0007038:	e8 bb 26 00 00       	call   c00096f8 <VAS::scanForEviction()>
c000703d:	83 c4 10             	add    esp,0x10
c0007040:	85 c0                	test   eax,eax
c0007042:	75 3f                	jne    c0007083 <Phys::allocatePage()+0xa1>
c0007044:	83 ec 0c             	sub    esp,0xc
c0007047:	68 b0 cc 01 c0       	push   0xc001ccb0
c000704c:	e8 d6 84 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0007051:	83 c4 10             	add    esp,0x10
c0007054:	8b 1d a8 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f4a8
c000705a:	53                   	push   ebx
c000705b:	e8 ff fe ff ff       	call   c0006f5f <Phys::getPageState(unsigned long)>
c0007060:	5a                   	pop    edx
c0007061:	84 c0                	test   al,al
c0007063:	75 a1                	jne    c0007006 <Phys::allocatePage()+0x24>
c0007065:	6a 01                	push   0x1
c0007067:	53                   	push   ebx
c0007068:	e8 c0 fe ff ff       	call   c0006f2d <Phys::setPageState(unsigned long, bool)>
c000706d:	a1 a8 f4 01 c0       	mov    eax,ds:0xc001f4a8
c0007072:	5a                   	pop    edx
c0007073:	ff 05 b4 f4 01 c0    	inc    DWORD PTR ds:0xc001f4b4
c0007079:	c1 e0 0c             	shl    eax,0xc
c000707c:	59                   	pop    ecx
c000707d:	83 c4 14             	add    esp,0x14
c0007080:	5b                   	pop    ebx
c0007081:	5e                   	pop    esi
c0007082:	c3                   	ret    
c0007083:	83 ec 08             	sub    esp,0x8
c0007086:	89 c2                	mov    edx,eax
c0007088:	6a 01                	push   0x1
c000708a:	c1 ea 0c             	shr    edx,0xc
c000708d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007091:	52                   	push   edx
c0007092:	e8 96 fe ff ff       	call   c0006f2d <Phys::setPageState(unsigned long, bool)>
c0007097:	83 c4 10             	add    esp,0x10
c000709a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000709e:	eb dd                	jmp    c000707d <Phys::allocatePage()+0x9b>

c00070a0 <Phys::allocateContiguousPages(int)>:
c00070a0:	57                   	push   edi
c00070a1:	56                   	push   esi
c00070a2:	53                   	push   ebx
c00070a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00070a7:	fa                   	cli    
c00070a8:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c00070ae:	31 db                	xor    ebx,ebx
c00070b0:	85 db                	test   ebx,ebx
c00070b2:	75 11                	jne    c00070c5 <Phys::allocateContiguousPages(int)+0x25>
c00070b4:	e8 29 ff ff ff       	call   c0006fe2 <Phys::allocatePage()>
c00070b9:	83 fe 01             	cmp    esi,0x1
c00070bc:	89 c7                	mov    edi,eax
c00070be:	74 21                	je     c00070e1 <Phys::allocateContiguousPages(int)+0x41>
c00070c0:	bb 01 00 00 00       	mov    ebx,0x1
c00070c5:	e8 18 ff ff ff       	call   c0006fe2 <Phys::allocatePage()>
c00070ca:	89 da                	mov    edx,ebx
c00070cc:	c1 e2 0c             	shl    edx,0xc
c00070cf:	01 fa                	add    edx,edi
c00070d1:	39 c2                	cmp    edx,eax
c00070d3:	74 20                	je     c00070f5 <Phys::allocateContiguousPages(int)+0x55>
c00070d5:	bb 01 00 00 00       	mov    ebx,0x1
c00070da:	89 c7                	mov    edi,eax
c00070dc:	83 fe 01             	cmp    esi,0x1
c00070df:	75 e4                	jne    c00070c5 <Phys::allocateContiguousPages(int)+0x25>
c00070e1:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00070e6:	48                   	dec    eax
c00070e7:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c00070ec:	75 01                	jne    c00070ef <Phys::allocateContiguousPages(int)+0x4f>
c00070ee:	fb                   	sti    
c00070ef:	89 f8                	mov    eax,edi
c00070f1:	5b                   	pop    ebx
c00070f2:	5e                   	pop    esi
c00070f3:	5f                   	pop    edi
c00070f4:	c3                   	ret    
c00070f5:	43                   	inc    ebx
c00070f6:	39 f3                	cmp    ebx,esi
c00070f8:	75 b6                	jne    c00070b0 <Phys::allocateContiguousPages(int)+0x10>
c00070fa:	eb e5                	jmp    c00070e1 <Phys::allocateContiguousPages(int)+0x41>

c00070fc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00070fc:	56                   	push   esi
c00070fd:	53                   	push   ebx
c00070fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007102:	39 1d ac f4 01 c0    	cmp    DWORD PTR ds:0xc001f4ac,ebx
c0007108:	73 06                	jae    c0007110 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000710a:	89 1d ac f4 01 c0    	mov    DWORD PTR ds:0xc001f4ac,ebx
c0007110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007114:	c1 eb 0c             	shr    ebx,0xc
c0007117:	c1 e8 0c             	shr    eax,0xc
c000711a:	39 d8                	cmp    eax,ebx
c000711c:	73 13                	jae    c0007131 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000711e:	6a 00                	push   0x0
c0007120:	8d 70 01             	lea    esi,[eax+0x1]
c0007123:	50                   	push   eax
c0007124:	e8 04 fe ff ff       	call   c0006f2d <Phys::setPageState(unsigned long, bool)>
c0007129:	5a                   	pop    edx
c000712a:	89 f0                	mov    eax,esi
c000712c:	59                   	pop    ecx
c000712d:	39 f3                	cmp    ebx,esi
c000712f:	75 ed                	jne    c000711e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007131:	5b                   	pop    ebx
c0007132:	5e                   	pop    esi
c0007133:	c3                   	ret    

c0007134 <Phys::physicalMemorySetup(unsigned int)>:
c0007134:	55                   	push   ebp
c0007135:	57                   	push   edi
c0007136:	56                   	push   esi
c0007137:	53                   	push   ebx
c0007138:	31 db                	xor    ebx,ebx
c000713a:	83 ec 40             	sub    esp,0x40
c000713d:	6a 10                	push   0x10
c000713f:	6a 00                	push   0x0
c0007141:	68 bc f4 01 c0       	push   0xc001f4bc
c0007146:	e8 a5 93 ff ff       	call   c00004f0 <memset>
c000714b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000714f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007154:	05 00 10 00 00       	add    eax,0x1000
c0007159:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000715d:	5a                   	pop    edx
c000715e:	59                   	pop    ecx
c000715f:	50                   	push   eax
c0007160:	68 43 cd 01 c0       	push   0xc001cd43
c0007165:	e8 6e 28 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000716a:	83 c4 10             	add    esp,0x10
c000716d:	83 ec 08             	sub    esp,0x8
c0007170:	6a 01                	push   0x1
c0007172:	53                   	push   ebx
c0007173:	43                   	inc    ebx
c0007174:	e8 b4 fd ff ff       	call   c0006f2d <Phys::setPageState(unsigned long, bool)>
c0007179:	83 c4 10             	add    esp,0x10
c000717c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007182:	75 e9                	jne    c000716d <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007184:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000718a:	66 85 c0             	test   ax,ax
c000718d:	0f 84 97 01 00 00    	je     c000732a <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007193:	89 c7                	mov    edi,eax
c0007195:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000719d:	81 e7 ff ff 00 00    	and    edi,0xffff
c00071a3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00071a8:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00071ac:	eb 15                	jmp    c00071c3 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00071ae:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071b2:	83 c3 18             	add    ebx,0x18
c00071b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00071b9:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00071bd:	0f 84 77 01 00 00    	je     c000733a <Phys::physicalMemorySetup(unsigned int)+0x206>
c00071c3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00071c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00071c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00071cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00071d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00071d6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00071d9:	01 f0                	add    eax,esi
c00071db:	55                   	push   ebp
c00071dc:	11 fa                	adc    edx,edi
c00071de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00071e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00071e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071ea:	50                   	push   eax
c00071eb:	56                   	push   esi
c00071ec:	68 e0 cc 01 c0       	push   0xc001cce0
c00071f1:	e8 e2 27 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00071f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	09 f8                	or     eax,edi
c00071ff:	0f 85 35 01 00 00    	jne    c000733a <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007205:	4d                   	dec    ebp
c0007206:	75 a6                	jne    c00071ae <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007208:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000720c:	ba 00 00 08 00       	mov    edx,0x80000
c0007211:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007215:	39 f2                	cmp    edx,esi
c0007217:	89 c1                	mov    ecx,eax
c0007219:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007221:	19 f9                	sbb    ecx,edi
c0007223:	0f 82 a7 00 00 00    	jb     c00072d0 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007229:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000722d:	89 c1                	mov    ecx,eax
c000722f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007233:	0f 83 97 00 00 00    	jae    c00072d0 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007239:	ba 00 00 0a 00       	mov    edx,0xa0000
c000723e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007242:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007246:	39 fa                	cmp    edx,edi
c0007248:	19 e8                	sbb    eax,ebp
c000724a:	0f 82 9a 01 00 00    	jb     c00073ea <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007250:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007254:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007258:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000725e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007263:	83 d5 ff             	adc    ebp,0xffffffff
c0007266:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000726a:	31 c0                	xor    eax,eax
c000726c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007270:	39 fa                	cmp    edx,edi
c0007272:	89 c1                	mov    ecx,eax
c0007274:	19 e9                	sbb    ecx,ebp
c0007276:	0f 83 32 ff ff ff    	jae    c00071ae <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000727c:	be 00 00 08 00       	mov    esi,0x80000
c0007281:	51                   	push   ecx
c0007282:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007286:	57                   	push   edi
c0007287:	56                   	push   esi
c0007288:	68 04 cd 01 c0       	push   0xc001cd04
c000728d:	e8 46 27 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0007292:	5d                   	pop    ebp
c0007293:	58                   	pop    eax
c0007294:	57                   	push   edi
c0007295:	56                   	push   esi
c0007296:	e8 61 fe ff ff       	call   c00070fc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000729b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000729f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00072a3:	83 c4 0c             	add    esp,0xc
c00072a6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00072aa:	03 05 b8 f4 01 c0    	add    eax,DWORD PTR ds:0xc001f4b8
c00072b0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00072b7:	a3 b8 f4 01 c0       	mov    ds:0xc001f4b8,eax
c00072bc:	52                   	push   edx
c00072bd:	50                   	push   eax
c00072be:	68 69 cd 01 c0       	push   0xc001cd69
c00072c3:	e8 10 27 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00072c8:	83 c4 10             	add    esp,0x10
c00072cb:	e9 de fe ff ff       	jmp    c00071ae <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00072d0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00072d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00072d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072dc:	39 ea                	cmp    edx,ebp
c00072de:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00072e2:	0f 82 c6 fe ff ff    	jb     c00071ae <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00072e8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00072ed:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00072f1:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00072f5:	0f 83 b3 fe ff ff    	jae    c00071ae <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00072fb:	39 ee                	cmp    esi,ebp
c00072fd:	89 f8                	mov    eax,edi
c00072ff:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007303:	0f 83 78 ff ff ff    	jae    c0007281 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007309:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000730d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007311:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007315:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007319:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000731d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007321:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007325:	e9 57 ff ff ff       	jmp    c0007281 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000732a:	83 ec 0c             	sub    esp,0xc
c000732d:	68 5b cd 01 c0       	push   0xc001cd5b
c0007332:	e8 f0 81 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0007337:	83 c4 10             	add    esp,0x10
c000733a:	83 ec 08             	sub    esp,0x8
c000733d:	bb 60 00 00 00       	mov    ebx,0x60
c0007342:	6a 00                	push   0x0
c0007344:	6a 06                	push   0x6
c0007346:	e8 e2 fb ff ff       	call   c0006f2d <Phys::setPageState(unsigned long, bool)>
c000734b:	58                   	pop    eax
c000734c:	5a                   	pop    edx
c000734d:	6a 00                	push   0x0
c000734f:	6a 07                	push   0x7
c0007351:	e8 d7 fb ff ff       	call   c0006f2d <Phys::setPageState(unsigned long, bool)>
c0007356:	83 05 b8 f4 01 c0 02 	add    DWORD PTR ds:0xc001f4b8,0x2
c000735d:	83 c4 10             	add    esp,0x10
c0007360:	83 ec 08             	sub    esp,0x8
c0007363:	6a 00                	push   0x0
c0007365:	53                   	push   ebx
c0007366:	43                   	inc    ebx
c0007367:	e8 c1 fb ff ff       	call   c0006f2d <Phys::setPageState(unsigned long, bool)>
c000736c:	83 c4 10             	add    esp,0x10
c000736f:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007375:	75 e9                	jne    c0007360 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007377:	a1 b8 f4 01 c0       	mov    eax,ds:0xc001f4b8
c000737c:	bb 40 01 00 00       	mov    ebx,0x140
c0007381:	83 c0 20             	add    eax,0x20
c0007384:	a3 b8 f4 01 c0       	mov    ds:0xc001f4b8,eax
c0007389:	eb 22                	jmp    c00073ad <Phys::physicalMemorySetup(unsigned int)+0x279>
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	6a 00                	push   0x0
c0007390:	53                   	push   ebx
c0007391:	43                   	inc    ebx
c0007392:	e8 96 fb ff ff       	call   c0006f2d <Phys::setPageState(unsigned long, bool)>
c0007397:	a1 b8 f4 01 c0       	mov    eax,ds:0xc001f4b8
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	40                   	inc    eax
c00073a0:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00073a6:	a3 b8 f4 01 c0       	mov    ds:0xc001f4b8,eax
c00073ab:	74 07                	je     c00073b4 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00073ad:	3d ff 03 00 00       	cmp    eax,0x3ff
c00073b2:	7e d7                	jle    c000738b <Phys::physicalMemorySetup(unsigned int)+0x257>
c00073b4:	bb d0 01 00 00       	mov    ebx,0x1d0
c00073b9:	3d ff 07 00 00       	cmp    eax,0x7ff
c00073be:	7f 22                	jg     c00073e2 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c00073c0:	83 ec 08             	sub    esp,0x8
c00073c3:	6a 00                	push   0x0
c00073c5:	53                   	push   ebx
c00073c6:	43                   	inc    ebx
c00073c7:	e8 61 fb ff ff       	call   c0006f2d <Phys::setPageState(unsigned long, bool)>
c00073cc:	a1 b8 f4 01 c0       	mov    eax,ds:0xc001f4b8
c00073d1:	83 c4 10             	add    esp,0x10
c00073d4:	40                   	inc    eax
c00073d5:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00073db:	a3 b8 f4 01 c0       	mov    ds:0xc001f4b8,eax
c00073e0:	75 d7                	jne    c00073b9 <Phys::physicalMemorySetup(unsigned int)+0x285>
c00073e2:	83 c4 3c             	add    esp,0x3c
c00073e5:	5b                   	pop    ebx
c00073e6:	5e                   	pop    esi
c00073e7:	5f                   	pop    edi
c00073e8:	5d                   	pop    ebp
c00073e9:	c3                   	ret    
c00073ea:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00073f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00073fa:	e9 51 fe ff ff       	jmp    c0007250 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c00073ff:	90                   	nop

c0007400 <Pipe::isAtty()>:
c0007400:	31 c0                	xor    eax,eax
c0007402:	c3                   	ret    
c0007403:	90                   	nop

c0007404 <Pipe::~Pipe()>:
c0007404:	83 ec 0c             	sub    esp,0xc
c0007407:	ba c8 cd 01 c0       	mov    edx,0xc001cdc8
c000740c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007410:	89 10                	mov    DWORD PTR [eax],edx
c0007412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007416:	83 ec 0c             	sub    esp,0xc
c0007419:	50                   	push   eax
c000741a:	e8 d1 10 00 00       	call   c00084f0 <UnixFile::~UnixFile()>
c000741f:	83 c4 10             	add    esp,0x10
c0007422:	90                   	nop
c0007423:	83 c4 0c             	add    esp,0xc
c0007426:	c3                   	ret    
c0007427:	90                   	nop

c0007428 <Pipe::~Pipe()>:
c0007428:	83 ec 0c             	sub    esp,0xc
c000742b:	83 ec 0c             	sub    esp,0xc
c000742e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007432:	e8 cd ff ff ff       	call   c0007404 <Pipe::~Pipe()>
c0007437:	83 c4 10             	add    esp,0x10
c000743a:	83 ec 08             	sub    esp,0x8
c000743d:	6a 20                	push   0x20
c000743f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007443:	e8 9a 24 00 00       	call   c00098e2 <operator delete(void*, unsigned long)>
c0007448:	83 c4 10             	add    esp,0x10
c000744b:	83 c4 0c             	add    esp,0xc
c000744e:	c3                   	ret    
c000744f:	90                   	nop

c0007450 <Pipe::write(unsigned long long, void*, int*)>:
c0007450:	55                   	push   ebp
c0007451:	57                   	push   edi
c0007452:	56                   	push   esi
c0007453:	53                   	push   ebx
c0007454:	83 ec 1c             	sub    esp,0x1c
c0007457:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000745b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000745f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007462:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007466:	89 04 24             	mov    DWORD PTR [esp],eax
c0007469:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000746d:	89 d8                	mov    eax,ebx
c000746f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007472:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007476:	89 d6                	mov    esi,edx
c0007478:	89 d7                	mov    edi,edx
c000747a:	c1 ff 1f             	sar    edi,0x1f
c000747d:	03 34 24             	add    esi,DWORD PTR [esp]
c0007480:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007484:	c1 f8 1f             	sar    eax,0x1f
c0007487:	39 f3                	cmp    ebx,esi
c0007489:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000748d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007491:	19 f8                	sbb    eax,edi
c0007493:	b8 01 00 00 00       	mov    eax,0x1
c0007498:	72 6e                	jb     c0007508 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000749a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000749d:	01 d0                	add    eax,edx
c000749f:	99                   	cdq    
c00074a0:	f7 fb                	idiv   ebx
c00074a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074a6:	29 d3                	sub    ebx,edx
c00074a8:	89 d7                	mov    edi,edx
c00074aa:	89 de                	mov    esi,ebx
c00074ac:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00074af:	c1 fb 1f             	sar    ebx,0x1f
c00074b2:	39 f2                	cmp    edx,esi
c00074b4:	19 d8                	sbb    eax,ebx
c00074b6:	b8 00 00 00 00       	mov    eax,0x0
c00074bb:	72 04                	jb     c00074c1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00074bd:	89 d0                	mov    eax,edx
c00074bf:	29 f0                	sub    eax,esi
c00074c1:	89 d3                	mov    ebx,edx
c00074c3:	29 c3                	sub    ebx,eax
c00074c5:	74 0b                	je     c00074d2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00074c7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00074ca:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00074ce:	89 d9                	mov    ecx,ebx
c00074d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00074d2:	85 c0                	test   eax,eax
c00074d4:	74 0d                	je     c00074e3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00074d6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00074da:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00074dd:	89 de                	mov    esi,ebx
c00074df:	89 c1                	mov    ecx,eax
c00074e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00074e3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00074e6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00074eb:	75 10                	jne    c00074fd <Pipe::write(unsigned long long, void*, int*)+0xad>
c00074ed:	83 ec 0c             	sub    esp,0xc
c00074f0:	68 85 cd 01 c0       	push   0xc001cd85
c00074f5:	e8 2d 80 00 00       	call   c000f527 <Krnl::panic(char const*)>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007501:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007504:	89 08                	mov    DWORD PTR [eax],ecx
c0007506:	31 c0                	xor    eax,eax
c0007508:	83 c4 1c             	add    esp,0x1c
c000750b:	5b                   	pop    ebx
c000750c:	5e                   	pop    esi
c000750d:	5f                   	pop    edi
c000750e:	5d                   	pop    ebp
c000750f:	c3                   	ret    

c0007510 <Pipe::read(unsigned long long, void*, int*)>:
c0007510:	55                   	push   ebp
c0007511:	57                   	push   edi
c0007512:	56                   	push   esi
c0007513:	53                   	push   ebx
c0007514:	83 ec 1c             	sub    esp,0x1c
c0007517:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000751b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000751f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007523:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007526:	89 c8                	mov    eax,ecx
c0007528:	99                   	cdq    
c0007529:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000752d:	74 24                	je     c0007553 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000752f:	39 f9                	cmp    ecx,edi
c0007531:	89 d1                	mov    ecx,edx
c0007533:	19 f1                	sbb    ecx,esi
c0007535:	73 1c                	jae    c0007553 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007537:	fa                   	cli    
c0007538:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c000753e:	e8 59 b4 00 00       	call   c001299c <schedule()>
c0007543:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0007548:	48                   	dec    eax
c0007549:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000754e:	75 d3                	jne    c0007523 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0007550:	fb                   	sti    
c0007551:	eb d0                	jmp    c0007523 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0007553:	39 f8                	cmp    eax,edi
c0007555:	89 d1                	mov    ecx,edx
c0007557:	89 3c 24             	mov    DWORD PTR [esp],edi
c000755a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000755e:	19 f1                	sbb    ecx,esi
c0007560:	73 07                	jae    c0007569 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0007562:	89 04 24             	mov    DWORD PTR [esp],eax
c0007565:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007569:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000756c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000756f:	29 f7                	sub    edi,esi
c0007571:	89 f8                	mov    eax,edi
c0007573:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0007577:	99                   	cdq    
c0007578:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000757b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000757f:	19 d0                	sbb    eax,edx
c0007581:	73 07                	jae    c000758a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0007583:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007586:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000758a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000758d:	89 ea                	mov    edx,ebp
c000758f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0007593:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007598:	74 0d                	je     c00075a7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000759a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000759d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00075a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00075a7:	85 d2                	test   edx,edx
c00075a9:	74 11                	je     c00075bc <Pipe::read(unsigned long long, void*, int*)+0xac>
c00075ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075af:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00075b2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00075b6:	89 d1                	mov    ecx,edx
c00075b8:	89 c7                	mov    edi,eax
c00075ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00075bc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00075bf:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00075c2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00075c5:	99                   	cdq    
c00075c6:	89 f7                	mov    edi,esi
c00075c8:	03 04 24             	add    eax,DWORD PTR [esp]
c00075cb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00075cf:	c1 ff 1f             	sar    edi,0x1f
c00075d2:	57                   	push   edi
c00075d3:	56                   	push   esi
c00075d4:	52                   	push   edx
c00075d5:	50                   	push   eax
c00075d6:	e8 15 42 01 00       	call   c001b7f0 <__umoddi3>
c00075db:	83 c4 10             	add    esp,0x10
c00075de:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00075e1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00075e6:	75 10                	jne    c00075f8 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00075e8:	83 ec 0c             	sub    esp,0xc
c00075eb:	68 a2 cd 01 c0       	push   0xc001cda2
c00075f0:	e8 32 7f 00 00       	call   c000f527 <Krnl::panic(char const*)>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00075fc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075ff:	89 10                	mov    DWORD PTR [eax],edx
c0007601:	83 c4 1c             	add    esp,0x1c
c0007604:	31 c0                	xor    eax,eax
c0007606:	5b                   	pop    ebx
c0007607:	5e                   	pop    esi
c0007608:	5f                   	pop    edi
c0007609:	5d                   	pop    ebp
c000760a:	c3                   	ret    
c000760b:	90                   	nop

c000760c <Pipe::Pipe(int)>:
c000760c:	83 ec 0c             	sub    esp,0xc
c000760f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007613:	83 ec 08             	sub    esp,0x8
c0007616:	6a 00                	push   0x0
c0007618:	50                   	push   eax
c0007619:	e8 f0 0c 00 00       	call   c000830e <UnixFile::UnixFile(int)>
c000761e:	83 c4 10             	add    esp,0x10
c0007621:	ba c8 cd 01 c0       	mov    edx,0xc001cdc8
c0007626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000762a:	89 10                	mov    DWORD PTR [eax],edx
c000762c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007630:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007634:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000763b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0007642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007646:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000764d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	50                   	push   eax
c0007655:	e8 bb f5 ff ff       	call   c0006c15 <malloc>
c000765a:	83 c4 10             	add    esp,0x10
c000765d:	89 c2                	mov    edx,eax
c000765f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007663:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000766a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000766e:	90                   	nop
c000766f:	83 c4 0c             	add    esp,0xc
c0007672:	c3                   	ret    
c0007673:	90                   	nop

c0007674 <VgaText::isAtty()>:
c0007674:	b0 01                	mov    al,0x1
c0007676:	c3                   	ret    
c0007677:	90                   	nop

c0007678 <VgaText::~VgaText()>:
c0007678:	83 ec 0c             	sub    esp,0xc
c000767b:	ba 50 ce 01 c0       	mov    edx,0xc001ce50
c0007680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007684:	89 10                	mov    DWORD PTR [eax],edx
c0007686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	50                   	push   eax
c000768e:	e8 5d 0e 00 00       	call   c00084f0 <UnixFile::~UnixFile()>
c0007693:	83 c4 10             	add    esp,0x10
c0007696:	90                   	nop
c0007697:	83 c4 0c             	add    esp,0xc
c000769a:	c3                   	ret    
c000769b:	90                   	nop

c000769c <VgaText::~VgaText()>:
c000769c:	83 ec 0c             	sub    esp,0xc
c000769f:	83 ec 0c             	sub    esp,0xc
c00076a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00076a6:	e8 cd ff ff ff       	call   c0007678 <VgaText::~VgaText()>
c00076ab:	83 c4 10             	add    esp,0x10
c00076ae:	83 ec 08             	sub    esp,0x8
c00076b1:	68 34 01 00 00       	push   0x134
c00076b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00076ba:	e8 23 22 00 00       	call   c00098e2 <operator delete(void*, unsigned long)>
c00076bf:	83 c4 10             	add    esp,0x10
c00076c2:	83 c4 0c             	add    esp,0xc
c00076c5:	c3                   	ret    

c00076c6 <VgaText::read(unsigned long long, void*, int*)>:
c00076c6:	83 ec 10             	sub    esp,0x10
c00076c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00076d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00076d5:	e8 58 45 00 00       	call   c000bc32 <readKeyboard(VgaText*, char*, unsigned long)>
c00076da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00076de:	89 02                	mov    DWORD PTR [edx],eax
c00076e0:	31 c0                	xor    eax,eax
c00076e2:	83 c4 1c             	add    esp,0x1c
c00076e5:	c3                   	ret    

c00076e6 <setTerminalScrollLock(bool)>:
c00076e6:	c3                   	ret    

c00076e7 <doTerminalCycle()>:
c00076e7:	c3                   	ret    

c00076e8 <addToTerminalCycle(VgaText*)>:
c00076e8:	c3                   	ret    

c00076e9 <scrollTerminalScrollLock(int)>:
c00076e9:	c3                   	ret    

c00076ea <VgaText::updateTitle()>:
c00076ea:	c3                   	ret    
c00076eb:	90                   	nop

c00076ec <VgaText::load()>:
c00076ec:	c3                   	ret    
c00076ed:	90                   	nop

c00076ee <VgaText::updateCursor()>:
c00076ee:	83 ec 14             	sub    esp,0x14
c00076f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076f5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00076f8:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00076fb:	e8 ec dc 00 00       	call   c00153ec <HalConsoleCursorUpdate(int, int)>
c0007700:	83 c4 1c             	add    esp,0x1c
c0007703:	c3                   	ret    

c0007704 <VgaText::doANSI_SGR(int)>:
c0007704:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000770c:	85 d2                	test   edx,edx
c000770e:	75 0b                	jne    c000771b <VgaText::doANSI_SGR(int)+0x17>
c0007710:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0007713:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007716:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0007719:	eb 59                	jmp    c0007774 <VgaText::doANSI_SGR(int)+0x70>
c000771b:	83 fa 07             	cmp    edx,0x7
c000771e:	75 0b                	jne    c000772b <VgaText::doANSI_SGR(int)+0x27>
c0007720:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0007723:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0007726:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0007729:	eb 49                	jmp    c0007774 <VgaText::doANSI_SGR(int)+0x70>
c000772b:	83 fa 1b             	cmp    edx,0x1b
c000772e:	74 e0                	je     c0007710 <VgaText::doANSI_SGR(int)+0xc>
c0007730:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0007733:	83 f9 07             	cmp    ecx,0x7
c0007736:	77 09                	ja     c0007741 <VgaText::doANSI_SGR(int)+0x3d>
c0007738:	8b 14 8d e0 ed 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe1220]
c000773f:	eb 20                	jmp    c0007761 <VgaText::doANSI_SGR(int)+0x5d>
c0007741:	8d 4a d8             	lea    ecx,[edx-0x28]
c0007744:	83 f9 07             	cmp    ecx,0x7
c0007747:	77 09                	ja     c0007752 <VgaText::doANSI_SGR(int)+0x4e>
c0007749:	8b 14 8d e0 ed 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe1220]
c0007750:	eb 22                	jmp    c0007774 <VgaText::doANSI_SGR(int)+0x70>
c0007752:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0007755:	83 f9 07             	cmp    ecx,0x7
c0007758:	77 0b                	ja     c0007765 <VgaText::doANSI_SGR(int)+0x61>
c000775a:	8b 14 95 98 ec 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1368]
c0007761:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007764:	c3                   	ret    
c0007765:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0007768:	83 f9 07             	cmp    ecx,0x7
c000776b:	77 0a                	ja     c0007777 <VgaText::doANSI_SGR(int)+0x73>
c000776d:	8b 14 95 70 ec 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1390]
c0007774:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0007777:	c3                   	ret    

c0007778 <VgaText::setDefaultBgColour(VgaColour)>:
c0007778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000777c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007780:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0007783:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0007786:	c3                   	ret    
c0007787:	90                   	nop

c0007788 <VgaText::setDefaultFgColour(VgaColour)>:
c0007788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000778c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007790:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0007793:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007796:	c3                   	ret    
c0007797:	90                   	nop

c0007798 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0007798:	53                   	push   ebx
c0007799:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000779d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00077a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00077a5:	51                   	push   ecx
c00077a6:	e8 cd ff ff ff       	call   c0007778 <VgaText::setDefaultBgColour(VgaColour)>
c00077ab:	58                   	pop    eax
c00077ac:	5a                   	pop    edx
c00077ad:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00077b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00077b5:	5b                   	pop    ebx
c00077b6:	eb d0                	jmp    c0007788 <VgaText::setDefaultFgColour(VgaColour)>

c00077b8 <VgaText::setTitleTextColour(VgaColour)>:
c00077b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00077bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00077c0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00077c3:	c3                   	ret    

c00077c4 <VgaText::setTitleColour(VgaColour)>:
c00077c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00077c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00077cc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00077cf:	c3                   	ret    

c00077d0 <VgaText::setTitle(char*)>:
c00077d0:	c3                   	ret    
c00077d1:	90                   	nop

c00077d2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00077d2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00077d6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00077db:	83 e0 0f             	and    eax,0xf
c00077de:	c1 e2 04             	shl    edx,0x4
c00077e1:	09 d0                	or     eax,edx
c00077e3:	c3                   	ret    

c00077e4 <VgaText::scrollScreen()>:
c00077e4:	55                   	push   ebp
c00077e5:	b9 01 00 00 00       	mov    ecx,0x1
c00077ea:	57                   	push   edi
c00077eb:	56                   	push   esi
c00077ec:	53                   	push   ebx
c00077ed:	83 ec 0c             	sub    esp,0xc
c00077f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f4:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00077fa:	31 ff                	xor    edi,edi
c00077fc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00077ff:	83 f9 18             	cmp    ecx,0x18
c0007802:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0007805:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000780c:	75 27                	jne    c0007835 <VgaText::scrollScreen()+0x51>
c000780e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0007811:	01 f5                	add    ebp,esi
c0007813:	f7 c7 01 00 00 00    	test   edi,0x1
c0007819:	74 16                	je     c0007831 <VgaText::scrollScreen()+0x4d>
c000781b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000781f:	50                   	push   eax
c0007820:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007824:	50                   	push   eax
c0007825:	e8 a8 ff ff ff       	call   c00077d2 <VgaText::combineColours(unsigned char, unsigned char)>
c000782a:	5a                   	pop    edx
c000782b:	5a                   	pop    edx
c000782c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000782f:	eb 04                	jmp    c0007835 <VgaText::scrollScreen()+0x51>
c0007831:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0007835:	47                   	inc    edi
c0007836:	46                   	inc    esi
c0007837:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000783d:	75 bd                	jne    c00077fc <VgaText::scrollScreen()+0x18>
c000783f:	41                   	inc    ecx
c0007840:	83 f9 19             	cmp    ecx,0x19
c0007843:	75 af                	jne    c00077f4 <VgaText::scrollScreen()+0x10>
c0007845:	39 1d d4 f4 01 c0    	cmp    DWORD PTR ds:0xc001f4d4,ebx
c000784b:	75 1f                	jne    c000786c <VgaText::scrollScreen()+0x88>
c000784d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0007851:	74 05                	je     c0007858 <VgaText::scrollScreen()+0x74>
c0007853:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0007856:	eb 14                	jmp    c000786c <VgaText::scrollScreen()+0x88>
c0007858:	50                   	push   eax
c0007859:	50                   	push   eax
c000785a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000785e:	50                   	push   eax
c000785f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007863:	50                   	push   eax
c0007864:	e8 0f da 00 00       	call   c0015278 <HalConsoleScroll(int, int)>
c0007869:	83 c4 10             	add    esp,0x10
c000786c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0007870:	83 c4 0c             	add    esp,0xc
c0007873:	5b                   	pop    ebx
c0007874:	5e                   	pop    esi
c0007875:	5f                   	pop    edi
c0007876:	5d                   	pop    ebp
c0007877:	e9 72 fe ff ff       	jmp    c00076ee <VgaText::updateCursor()>

c000787c <VgaText::combineCharAndColour(char, unsigned char)>:
c000787c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0007881:	c1 e0 08             	shl    eax,0x8
c0007884:	89 c2                	mov    edx,eax
c0007886:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000788b:	09 d0                	or     eax,edx
c000788d:	c3                   	ret    

c000788e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000788e:	55                   	push   ebp
c000788f:	57                   	push   edi
c0007890:	56                   	push   esi
c0007891:	53                   	push   ebx
c0007892:	83 ec 1c             	sub    esp,0x1c
c0007895:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007899:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000789d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00078a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00078a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00078a9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00078ad:	0f b6 c3             	movzx  eax,bl
c00078b0:	50                   	push   eax
c00078b1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00078b6:	50                   	push   eax
c00078b7:	e8 16 ff ff ff       	call   c00077d2 <VgaText::combineColours(unsigned char, unsigned char)>
c00078bc:	5a                   	pop    edx
c00078bd:	0f b6 c0             	movzx  eax,al
c00078c0:	59                   	pop    ecx
c00078c1:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00078c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00078ca:	50                   	push   eax
c00078cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00078cf:	e8 a8 ff ff ff       	call   c000787c <VgaText::combineCharAndColour(char, unsigned char)>
c00078d4:	5a                   	pop    edx
c00078d5:	66 6b d7 50          	imul   dx,di,0x50
c00078d9:	59                   	pop    ecx
c00078da:	01 f2                	add    edx,esi
c00078dc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00078df:	0f b7 d2             	movzx  edx,dx
c00078e2:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00078e6:	39 2d d4 f4 01 c0    	cmp    DWORD PTR ds:0xc001f4d4,ebp
c00078ec:	75 28                	jne    c0007916 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00078ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078f2:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00078f6:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00078fa:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00078fe:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007902:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007906:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000790a:	83 c4 1c             	add    esp,0x1c
c000790d:	5b                   	pop    ebx
c000790e:	5e                   	pop    esi
c000790f:	5f                   	pop    edi
c0007910:	5d                   	pop    ebp
c0007911:	e9 6a da 00 00       	jmp    c0015380 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007916:	83 c4 1c             	add    esp,0x1c
c0007919:	5b                   	pop    ebx
c000791a:	5e                   	pop    esi
c000791b:	5f                   	pop    edi
c000791c:	5d                   	pop    ebp
c000791d:	c3                   	ret    

c000791e <VgaText::getCursorX()>:
c000791e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007922:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0007925:	c3                   	ret    

c0007926 <VgaText::getCursorY()>:
c0007926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000792a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000792d:	c3                   	ret    

c000792e <VgaText::setCursor(int, int)>:
c000792e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007932:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007936:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007939:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000793d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007940:	e9 a9 fd ff ff       	jmp    c00076ee <VgaText::updateCursor()>

c0007945 <setActiveTerminal(VgaText*)>:
c0007945:	53                   	push   ebx
c0007946:	83 ec 08             	sub    esp,0x8
c0007949:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000794d:	85 db                	test   ebx,ebx
c000794f:	75 11                	jne    c0007962 <setActiveTerminal(VgaText*)+0x1d>
c0007951:	c7 44 24 10 dc cd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cddc
c0007959:	83 c4 08             	add    esp,0x8
c000795c:	5b                   	pop    ebx
c000795d:	e9 c5 7b 00 00       	jmp    c000f527 <Krnl::panic(char const*)>
c0007962:	a1 d4 f4 01 c0       	mov    eax,ds:0xc001f4d4
c0007967:	85 c0                	test   eax,eax
c0007969:	74 0c                	je     c0007977 <setActiveTerminal(VgaText*)+0x32>
c000796b:	83 ec 0c             	sub    esp,0xc
c000796e:	50                   	push   eax
c000796f:	e8 7a fd ff ff       	call   c00076ee <VgaText::updateCursor()>
c0007974:	83 c4 10             	add    esp,0x10
c0007977:	89 1d d4 f4 01 c0    	mov    DWORD PTR ds:0xc001f4d4,ebx
c000797d:	50                   	push   eax
c000797e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007981:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007984:	53                   	push   ebx
c0007985:	e8 a4 ff ff ff       	call   c000792e <VgaText::setCursor(int, int)>
c000798a:	83 c4 18             	add    esp,0x18
c000798d:	5b                   	pop    ebx
c000798e:	c3                   	ret    
c000798f:	90                   	nop

c0007990 <VgaText::clearScreen()>:
c0007990:	57                   	push   edi
c0007991:	56                   	push   esi
c0007992:	31 f6                	xor    esi,esi
c0007994:	53                   	push   ebx
c0007995:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007999:	52                   	push   edx
c000799a:	6a 00                	push   0x0
c000799c:	6a 00                	push   0x0
c000799e:	53                   	push   ebx
c000799f:	e8 8a ff ff ff       	call   c000792e <VgaText::setCursor(int, int)>
c00079a4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00079ab:	83 c4 10             	add    esp,0x10
c00079ae:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00079b1:	7e 20                	jle    c00079d3 <VgaText::clearScreen()+0x43>
c00079b3:	31 ff                	xor    edi,edi
c00079b5:	50                   	push   eax
c00079b6:	50                   	push   eax
c00079b7:	56                   	push   esi
c00079b8:	57                   	push   edi
c00079b9:	47                   	inc    edi
c00079ba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00079bd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00079c0:	6a 20                	push   0x20
c00079c2:	53                   	push   ebx
c00079c3:	e8 c6 fe ff ff       	call   c000788e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00079c8:	83 c4 20             	add    esp,0x20
c00079cb:	83 ff 50             	cmp    edi,0x50
c00079ce:	75 e5                	jne    c00079b5 <VgaText::clearScreen()+0x25>
c00079d0:	46                   	inc    esi
c00079d1:	eb db                	jmp    c00079ae <VgaText::clearScreen()+0x1e>
c00079d3:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00079da:	5b                   	pop    ebx
c00079db:	5e                   	pop    esi
c00079dc:	5f                   	pop    edi
c00079dd:	c3                   	ret    

c00079de <VgaText::setCursorX(int)>:
c00079de:	83 ec 10             	sub    esp,0x10
c00079e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00079e5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00079e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00079ec:	50                   	push   eax
c00079ed:	e8 3c ff ff ff       	call   c000792e <VgaText::setCursor(int, int)>
c00079f2:	83 c4 1c             	add    esp,0x1c
c00079f5:	c3                   	ret    

c00079f6 <VgaText::setCursorY(int)>:
c00079f6:	83 ec 10             	sub    esp,0x10
c00079f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00079fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a01:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007a04:	50                   	push   eax
c0007a05:	e8 24 ff ff ff       	call   c000792e <VgaText::setCursor(int, int)>
c0007a0a:	83 c4 1c             	add    esp,0x1c
c0007a0d:	c3                   	ret    

c0007a0e <VgaText::incrementCursor(bool)>:
c0007a0e:	56                   	push   esi
c0007a0f:	53                   	push   ebx
c0007a10:	51                   	push   ecx
c0007a11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007a19:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0007a1c:	40                   	inc    eax
c0007a1d:	83 f8 50             	cmp    eax,0x50
c0007a20:	74 05                	je     c0007a27 <VgaText::incrementCursor(bool)+0x19>
c0007a22:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0007a25:	eb 24                	jmp    c0007a4b <VgaText::incrementCursor(bool)+0x3d>
c0007a27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007a2a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a31:	8d 50 01             	lea    edx,[eax+0x1]
c0007a34:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007a37:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007a3a:	75 0f                	jne    c0007a4b <VgaText::incrementCursor(bool)+0x3d>
c0007a3c:	83 ec 0c             	sub    esp,0xc
c0007a3f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007a42:	53                   	push   ebx
c0007a43:	e8 9c fd ff ff       	call   c00077e4 <VgaText::scrollScreen()>
c0007a48:	83 c4 10             	add    esp,0x10
c0007a4b:	89 f0                	mov    eax,esi
c0007a4d:	84 c0                	test   al,al
c0007a4f:	74 0c                	je     c0007a5d <VgaText::incrementCursor(bool)+0x4f>
c0007a51:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007a55:	5a                   	pop    edx
c0007a56:	5b                   	pop    ebx
c0007a57:	5e                   	pop    esi
c0007a58:	e9 91 fc ff ff       	jmp    c00076ee <VgaText::updateCursor()>
c0007a5d:	58                   	pop    eax
c0007a5e:	5b                   	pop    ebx
c0007a5f:	5e                   	pop    esi
c0007a60:	c3                   	ret    
c0007a61:	90                   	nop

c0007a62 <VgaText::decrementCursor(bool)>:
c0007a62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007a66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a6a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0007a6d:	85 c0                	test   eax,eax
c0007a6f:	74 04                	je     c0007a75 <VgaText::decrementCursor(bool)+0x13>
c0007a71:	48                   	dec    eax
c0007a72:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0007a75:	84 c9                	test   cl,cl
c0007a77:	74 09                	je     c0007a82 <VgaText::decrementCursor(bool)+0x20>
c0007a79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a7d:	e9 6c fc ff ff       	jmp    c00076ee <VgaText::updateCursor()>
c0007a82:	c3                   	ret    
c0007a83:	90                   	nop

c0007a84 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0007a84:	53                   	push   ebx
c0007a85:	83 ec 08             	sub    esp,0x8
c0007a88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007a94:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007a98:	3c 07                	cmp    al,0x7
c0007a9a:	75 21                	jne    c0007abd <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0007a9c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007aa4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0007aac:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0007ab4:	83 c4 08             	add    esp,0x8
c0007ab7:	5b                   	pop    ebx
c0007ab8:	e9 72 2d 00 00       	jmp    c000a82f <Krnl::beep(int, int, bool)>
c0007abd:	3c 0d                	cmp    al,0xd
c0007abf:	75 09                	jne    c0007aca <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0007ac1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007ac8:	eb 2c                	jmp    c0007af6 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0007aca:	3c 0a                	cmp    al,0xa
c0007acc:	75 31                	jne    c0007aff <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0007ace:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007ad1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007ad8:	8d 50 01             	lea    edx,[eax+0x1]
c0007adb:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007ade:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007ae1:	75 0f                	jne    c0007af2 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0007ae3:	83 ec 0c             	sub    esp,0xc
c0007ae6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007ae9:	53                   	push   ebx
c0007aea:	e8 f5 fc ff ff       	call   c00077e4 <VgaText::scrollScreen()>
c0007aef:	83 c4 10             	add    esp,0x10
c0007af2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007af6:	83 c4 08             	add    esp,0x8
c0007af9:	5b                   	pop    ebx
c0007afa:	e9 ef fb ff ff       	jmp    c00076ee <VgaText::updateCursor()>
c0007aff:	3c 08                	cmp    al,0x8
c0007b01:	75 25                	jne    c0007b28 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0007b03:	50                   	push   eax
c0007b04:	50                   	push   eax
c0007b05:	6a 01                	push   0x1
c0007b07:	53                   	push   ebx
c0007b08:	e8 55 ff ff ff       	call   c0007a62 <VgaText::decrementCursor(bool)>
c0007b0d:	5a                   	pop    edx
c0007b0e:	59                   	pop    ecx
c0007b0f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007b12:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007b15:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007b18:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007b1b:	6a 20                	push   0x20
c0007b1d:	53                   	push   ebx
c0007b1e:	e8 6b fd ff ff       	call   c000788e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007b23:	83 c4 28             	add    esp,0x28
c0007b26:	5b                   	pop    ebx
c0007b27:	c3                   	ret    
c0007b28:	83 ec 08             	sub    esp,0x8
c0007b2b:	0f be c0             	movsx  eax,al
c0007b2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007b31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007b34:	51                   	push   ecx
c0007b35:	52                   	push   edx
c0007b36:	50                   	push   eax
c0007b37:	53                   	push   ebx
c0007b38:	e8 51 fd ff ff       	call   c000788e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007b3d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0007b41:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0007b49:	83 c4 28             	add    esp,0x28
c0007b4c:	5b                   	pop    ebx
c0007b4d:	e9 bc fe ff ff       	jmp    c0007a0e <VgaText::incrementCursor(bool)>

c0007b52 <VgaText::putchar(char)>:
c0007b52:	56                   	push   esi
c0007b53:	53                   	push   ebx
c0007b54:	83 ec 14             	sub    esp,0x14
c0007b57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007b5b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b5f:	3c 5b                	cmp    al,0x5b
c0007b61:	75 18                	jne    c0007b7b <VgaText::putchar(char)+0x29>
c0007b63:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0007b67:	74 1f                	je     c0007b88 <VgaText::putchar(char)+0x36>
c0007b69:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0007b6f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0007b76:	e9 bd 00 00 00       	jmp    c0007c38 <VgaText::putchar(char)+0xe6>
c0007b7b:	3c 1b                	cmp    al,0x1b
c0007b7d:	75 09                	jne    c0007b88 <VgaText::putchar(char)+0x36>
c0007b7f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0007b83:	e9 b0 00 00 00       	jmp    c0007c38 <VgaText::putchar(char)+0xe6>
c0007b88:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0007b8b:	84 c9                	test   cl,cl
c0007b8d:	0f 84 92 00 00 00    	je     c0007c25 <VgaText::putchar(char)+0xd3>
c0007b93:	8d 50 c0             	lea    edx,[eax-0x40]
c0007b96:	80 fa 3e             	cmp    dl,0x3e
c0007b99:	77 76                	ja     c0007c11 <VgaText::putchar(char)+0xbf>
c0007b9b:	3c 6d                	cmp    al,0x6d
c0007b9d:	75 47                	jne    c0007be6 <VgaText::putchar(char)+0x94>
c0007b9f:	31 f6                	xor    esi,esi
c0007ba1:	31 d2                	xor    edx,edx
c0007ba3:	31 c0                	xor    eax,eax
c0007ba5:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0007ba8:	7e 2d                	jle    c0007bd7 <VgaText::putchar(char)+0x85>
c0007baa:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0007baf:	80 fa 3b             	cmp    dl,0x3b
c0007bb2:	75 17                	jne    c0007bcb <VgaText::putchar(char)+0x79>
c0007bb4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0007bb8:	50                   	push   eax
c0007bb9:	53                   	push   ebx
c0007bba:	e8 45 fb ff ff       	call   c0007704 <VgaText::doANSI_SGR(int)>
c0007bbf:	59                   	pop    ecx
c0007bc0:	31 d2                	xor    edx,edx
c0007bc2:	58                   	pop    eax
c0007bc3:	31 c0                	xor    eax,eax
c0007bc5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0007bc9:	eb 09                	jmp    c0007bd4 <VgaText::putchar(char)+0x82>
c0007bcb:	6b c0 0a             	imul   eax,eax,0xa
c0007bce:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0007bd2:	88 ca                	mov    dl,cl
c0007bd4:	46                   	inc    esi
c0007bd5:	eb ce                	jmp    c0007ba5 <VgaText::putchar(char)+0x53>
c0007bd7:	84 d2                	test   dl,dl
c0007bd9:	74 2e                	je     c0007c09 <VgaText::putchar(char)+0xb7>
c0007bdb:	50                   	push   eax
c0007bdc:	53                   	push   ebx
c0007bdd:	e8 22 fb ff ff       	call   c0007704 <VgaText::doANSI_SGR(int)>
c0007be2:	58                   	pop    eax
c0007be3:	5a                   	pop    edx
c0007be4:	eb 23                	jmp    c0007c09 <VgaText::putchar(char)+0xb7>
c0007be6:	3c 4a                	cmp    al,0x4a
c0007be8:	75 1f                	jne    c0007c09 <VgaText::putchar(char)+0xb7>
c0007bea:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0007bee:	75 19                	jne    c0007c09 <VgaText::putchar(char)+0xb7>
c0007bf0:	83 ec 0c             	sub    esp,0xc
c0007bf3:	53                   	push   ebx
c0007bf4:	e8 97 fd ff ff       	call   c0007990 <VgaText::clearScreen()>
c0007bf9:	83 c4 0c             	add    esp,0xc
c0007bfc:	6a 00                	push   0x0
c0007bfe:	6a 00                	push   0x0
c0007c00:	53                   	push   ebx
c0007c01:	e8 28 fd ff ff       	call   c000792e <VgaText::setCursor(int, int)>
c0007c06:	83 c4 10             	add    esp,0x10
c0007c09:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0007c0f:	eb 27                	jmp    c0007c38 <VgaText::putchar(char)+0xe6>
c0007c11:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0007c14:	83 fa 0e             	cmp    edx,0xe
c0007c17:	7f 1f                	jg     c0007c38 <VgaText::putchar(char)+0xe6>
c0007c19:	8d 4a 01             	lea    ecx,[edx+0x1]
c0007c1c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0007c1f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0007c23:	eb 13                	jmp    c0007c38 <VgaText::putchar(char)+0xe6>
c0007c25:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007c28:	0f be c0             	movsx  eax,al
c0007c2b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007c2e:	50                   	push   eax
c0007c2f:	53                   	push   ebx
c0007c30:	e8 4f fe ff ff       	call   c0007a84 <VgaText::putchar(char, VgaColour, VgaColour)>
c0007c35:	83 c4 10             	add    esp,0x10
c0007c38:	83 c4 14             	add    esp,0x14
c0007c3b:	5b                   	pop    ebx
c0007c3c:	5e                   	pop    esi
c0007c3d:	c3                   	ret    

c0007c3e <VgaText::putx(unsigned int)>:
c0007c3e:	57                   	push   edi
c0007c3f:	b9 11 00 00 00       	mov    ecx,0x11
c0007c44:	56                   	push   esi
c0007c45:	be ea cd 01 c0       	mov    esi,0xc001cdea
c0007c4a:	53                   	push   ebx
c0007c4b:	83 ec 20             	sub    esp,0x20
c0007c4e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0007c52:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0007c56:	fc                   	cld    
c0007c57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007c59:	be 08 00 00 00       	mov    esi,0x8
c0007c5e:	50                   	push   eax
c0007c5f:	50                   	push   eax
c0007c60:	89 d8                	mov    eax,ebx
c0007c62:	c1 e3 04             	shl    ebx,0x4
c0007c65:	c1 e8 1c             	shr    eax,0x1c
c0007c68:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0007c6d:	50                   	push   eax
c0007c6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c72:	e8 db fe ff ff       	call   c0007b52 <VgaText::putchar(char)>
c0007c77:	83 c4 10             	add    esp,0x10
c0007c7a:	4e                   	dec    esi
c0007c7b:	75 e1                	jne    c0007c5e <VgaText::putx(unsigned int)+0x20>
c0007c7d:	83 c4 20             	add    esp,0x20
c0007c80:	5b                   	pop    ebx
c0007c81:	5e                   	pop    esi
c0007c82:	5f                   	pop    edi
c0007c83:	c3                   	ret    

c0007c84 <VgaText::puts(char const*)>:
c0007c84:	53                   	push   ebx
c0007c85:	83 ec 08             	sub    esp,0x8
c0007c88:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007c8c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0007c8f:	84 c0                	test   al,al
c0007c91:	74 12                	je     c0007ca5 <VgaText::puts(char const*)+0x21>
c0007c93:	43                   	inc    ebx
c0007c94:	51                   	push   ecx
c0007c95:	51                   	push   ecx
c0007c96:	50                   	push   eax
c0007c97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c9b:	e8 b2 fe ff ff       	call   c0007b52 <VgaText::putchar(char)>
c0007ca0:	83 c4 10             	add    esp,0x10
c0007ca3:	eb e7                	jmp    c0007c8c <VgaText::puts(char const*)+0x8>
c0007ca5:	83 c4 08             	add    esp,0x8
c0007ca8:	5b                   	pop    ebx
c0007ca9:	c3                   	ret    

c0007caa <VgaText::write(unsigned long long, void*, int*)>:
c0007caa:	55                   	push   ebp
c0007cab:	57                   	push   edi
c0007cac:	56                   	push   esi
c0007cad:	53                   	push   ebx
c0007cae:	83 ec 0c             	sub    esp,0xc
c0007cb1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007cb5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007cb9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007cbd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0007cc4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0007cc7:	39 eb                	cmp    ebx,ebp
c0007cc9:	74 13                	je     c0007cde <VgaText::write(unsigned long long, void*, int*)+0x34>
c0007ccb:	43                   	inc    ebx
c0007ccc:	50                   	push   eax
c0007ccd:	50                   	push   eax
c0007cce:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0007cd2:	50                   	push   eax
c0007cd3:	56                   	push   esi
c0007cd4:	e8 79 fe ff ff       	call   c0007b52 <VgaText::putchar(char)>
c0007cd9:	83 c4 10             	add    esp,0x10
c0007cdc:	eb e9                	jmp    c0007cc7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0007cde:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0007ce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007ce9:	89 38                	mov    DWORD PTR [eax],edi
c0007ceb:	83 c4 0c             	add    esp,0xc
c0007cee:	31 c0                	xor    eax,eax
c0007cf0:	5b                   	pop    ebx
c0007cf1:	5e                   	pop    esi
c0007cf2:	5f                   	pop    edi
c0007cf3:	5d                   	pop    ebp
c0007cf4:	c3                   	ret    
c0007cf5:	90                   	nop

c0007cf6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0007cf6:	55                   	push   ebp
c0007cf7:	57                   	push   edi
c0007cf8:	56                   	push   esi
c0007cf9:	53                   	push   ebx
c0007cfa:	83 ec 0c             	sub    esp,0xc
c0007cfd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007d01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007d06:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007d0d:	50                   	push   eax
c0007d0e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007d13:	50                   	push   eax
c0007d14:	e8 b9 fa ff ff       	call   c00077d2 <VgaText::combineColours(unsigned char, unsigned char)>
c0007d19:	5a                   	pop    edx
c0007d1a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d1f:	59                   	pop    ecx
c0007d20:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007d23:	89 c5                	mov    ebp,eax
c0007d25:	0f b7 f6             	movzx  esi,si
c0007d28:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007d2c:	01 f6                	add    esi,esi
c0007d2e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d31:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007d34:	84 c0                	test   al,al
c0007d36:	0f 84 f4 00 00 00    	je     c0007e30 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0007d3c:	3c 0d                	cmp    al,0xd
c0007d3e:	75 0c                	jne    c0007d4c <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0007d40:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007d47:	e9 de 00 00 00       	jmp    c0007e2a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d4c:	3c 0a                	cmp    al,0xa
c0007d4e:	75 45                	jne    c0007d95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0007d50:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007d53:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007d5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0007d5d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0007d60:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0007d63:	75 0f                	jne    c0007d74 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0007d65:	83 ec 0c             	sub    esp,0xc
c0007d68:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007d6b:	53                   	push   ebx
c0007d6c:	e8 73 fa ff ff       	call   c00077e4 <VgaText::scrollScreen()>
c0007d71:	83 c4 10             	add    esp,0x10
c0007d74:	83 ec 0c             	sub    esp,0xc
c0007d77:	53                   	push   ebx
c0007d78:	e8 71 f9 ff ff       	call   c00076ee <VgaText::updateCursor()>
c0007d7d:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d82:	83 c4 10             	add    esp,0x10
c0007d85:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007d88:	0f b7 f6             	movzx  esi,si
c0007d8b:	01 f6                	add    esi,esi
c0007d8d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d90:	e9 95 00 00 00       	jmp    c0007e2a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d95:	3c 08                	cmp    al,0x8
c0007d97:	75 35                	jne    c0007dce <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0007d99:	51                   	push   ecx
c0007d9a:	51                   	push   ecx
c0007d9b:	6a 01                	push   0x1
c0007d9d:	53                   	push   ebx
c0007d9e:	e8 bf fc ff ff       	call   c0007a62 <VgaText::decrementCursor(bool)>
c0007da3:	5e                   	pop    esi
c0007da4:	58                   	pop    eax
c0007da5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007da8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007dab:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007dae:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007db1:	6a 20                	push   0x20
c0007db3:	53                   	push   ebx
c0007db4:	e8 d5 fa ff ff       	call   c000788e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007db9:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007dbe:	83 c4 20             	add    esp,0x20
c0007dc1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007dc4:	0f b7 f6             	movzx  esi,si
c0007dc7:	01 f6                	add    esi,esi
c0007dc9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007dcc:	eb 5c                	jmp    c0007e2a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007dce:	52                   	push   edx
c0007dcf:	52                   	push   edx
c0007dd0:	89 ea                	mov    edx,ebp
c0007dd2:	0f b6 ca             	movzx  ecx,dl
c0007dd5:	51                   	push   ecx
c0007dd6:	50                   	push   eax
c0007dd7:	e8 a0 fa ff ff       	call   c000787c <VgaText::combineCharAndColour(char, unsigned char)>
c0007ddc:	83 c4 10             	add    esp,0x10
c0007ddf:	66 89 06             	mov    WORD PTR [esi],ax
c0007de2:	39 1d d4 f4 01 c0    	cmp    DWORD PTR ds:0xc001f4d4,ebx
c0007de8:	75 1d                	jne    c0007e07 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0007dea:	83 ec 0c             	sub    esp,0xc
c0007ded:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007df0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007df3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007df7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007dfb:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007dfe:	50                   	push   eax
c0007dff:	e8 7c d5 00 00       	call   c0015380 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007e04:	83 c4 20             	add    esp,0x20
c0007e07:	83 c6 02             	add    esi,0x2
c0007e0a:	50                   	push   eax
c0007e0b:	50                   	push   eax
c0007e0c:	6a 00                	push   0x0
c0007e0e:	53                   	push   ebx
c0007e0f:	e8 fa fb ff ff       	call   c0007a0e <VgaText::incrementCursor(bool)>
c0007e14:	83 c4 10             	add    esp,0x10
c0007e17:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0007e1b:	75 0d                	jne    c0007e2a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007e1d:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007e22:	0f b7 f6             	movzx  esi,si
c0007e25:	01 f6                	add    esi,esi
c0007e27:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007e2a:	47                   	inc    edi
c0007e2b:	e9 01 ff ff ff       	jmp    c0007d31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	53                   	push   ebx
c0007e34:	e8 b5 f8 ff ff       	call   c00076ee <VgaText::updateCursor()>
c0007e39:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007e40:	83 c4 1c             	add    esp,0x1c
c0007e43:	5b                   	pop    ebx
c0007e44:	5e                   	pop    esi
c0007e45:	5f                   	pop    edi
c0007e46:	5d                   	pop    ebp
c0007e47:	c3                   	ret    

c0007e48 <VgaText::VgaText(char const*)>:
c0007e48:	56                   	push   esi
c0007e49:	53                   	push   ebx
c0007e4a:	83 ec 04             	sub    esp,0x4
c0007e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e51:	83 ec 08             	sub    esp,0x8
c0007e54:	6a 00                	push   0x0
c0007e56:	50                   	push   eax
c0007e57:	e8 b2 04 00 00       	call   c000830e <UnixFile::UnixFile(int)>
c0007e5c:	83 c4 10             	add    esp,0x10
c0007e5f:	ba 50 ce 01 c0       	mov    edx,0xc001ce50
c0007e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e68:	89 10                	mov    DWORD PTR [eax],edx
c0007e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e6e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0007e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e79:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0007e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e84:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0007e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e8c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0007e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e94:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0007e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e9f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0007ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eaa:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0007eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eb5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0007ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0007ec7:	83 ec 0c             	sub    esp,0xc
c0007eca:	6a 01                	push   0x1
c0007ecc:	e8 80 08 00 00       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	89 c2                	mov    edx,eax
c0007ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eda:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007edd:	8b 1d 74 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f574
c0007ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ee7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007eea:	89 c6                	mov    esi,eax
c0007eec:	e8 f1 f0 ff ff       	call   c0006fe2 <Phys::allocatePage()>
c0007ef1:	68 05 0c 00 00       	push   0xc05
c0007ef6:	56                   	push   esi
c0007ef7:	50                   	push   eax
c0007ef8:	53                   	push   ebx
c0007ef9:	e8 ac 0e 00 00       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c0007efe:	83 c4 10             	add    esp,0x10
c0007f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007f08:	83 ec 04             	sub    esp,0x4
c0007f0b:	68 a0 0f 00 00       	push   0xfa0
c0007f10:	6a 00                	push   0x0
c0007f12:	50                   	push   eax
c0007f13:	e8 d8 85 ff ff       	call   c00004f0 <memset>
c0007f18:	83 c4 10             	add    esp,0x10
c0007f1b:	83 ec 04             	sub    esp,0x4
c0007f1e:	6a 00                	push   0x0
c0007f20:	6a 07                	push   0x7
c0007f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f26:	e8 6d f8 ff ff       	call   c0007798 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0007f2b:	83 c4 10             	add    esp,0x10
c0007f2e:	83 ec 04             	sub    esp,0x4
c0007f31:	6a 00                	push   0x0
c0007f33:	6a 00                	push   0x0
c0007f35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f39:	e8 f0 f9 ff ff       	call   c000792e <VgaText::setCursor(int, int)>
c0007f3e:	83 c4 10             	add    esp,0x10
c0007f41:	83 ec 0c             	sub    esp,0xc
c0007f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f48:	e8 43 fa ff ff       	call   c0007990 <VgaText::clearScreen()>
c0007f4d:	83 c4 10             	add    esp,0x10
c0007f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f54:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0007f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f5c:	05 82 00 00 00       	add    eax,0x82
c0007f61:	83 ec 04             	sub    esp,0x4
c0007f64:	6a 30                	push   0x30
c0007f66:	6a 00                	push   0x0
c0007f68:	50                   	push   eax
c0007f69:	e8 82 85 ff ff       	call   c00004f0 <memset>
c0007f6e:	83 c4 10             	add    esp,0x10
c0007f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f75:	05 b2 00 00 00       	add    eax,0xb2
c0007f7a:	83 ec 04             	sub    esp,0x4
c0007f7d:	68 80 00 00 00       	push   0x80
c0007f82:	6a 00                	push   0x0
c0007f84:	50                   	push   eax
c0007f85:	e8 66 85 ff ff       	call   c00004f0 <memset>
c0007f8a:	83 c4 10             	add    esp,0x10
c0007f8d:	90                   	nop
c0007f8e:	83 c4 04             	add    esp,0x4
c0007f91:	5b                   	pop    ebx
c0007f92:	5e                   	pop    esi
c0007f93:	c3                   	ret    

c0007f94 <VgaText::receiveKey(unsigned char)>:
c0007f94:	57                   	push   edi
c0007f95:	56                   	push   esi
c0007f96:	53                   	push   ebx
c0007f97:	83 ec 10             	sub    esp,0x10
c0007f9a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007f9e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007fa2:	84 db                	test   bl,bl
c0007fa4:	0f 84 ba 00 00 00    	je     c0008064 <VgaText::receiveKey(unsigned char)+0xd0>
c0007faa:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0007fb0:	80 fb 08             	cmp    bl,0x8
c0007fb3:	75 2c                	jne    c0007fe1 <VgaText::receiveKey(unsigned char)+0x4d>
c0007fb5:	83 ec 0c             	sub    esp,0xc
c0007fb8:	57                   	push   edi
c0007fb9:	e8 a2 85 ff ff       	call   c0000560 <strlen>
c0007fbe:	83 c4 10             	add    esp,0x10
c0007fc1:	85 c0                	test   eax,eax
c0007fc3:	74 41                	je     c0008006 <VgaText::receiveKey(unsigned char)+0x72>
c0007fc5:	50                   	push   eax
c0007fc6:	50                   	push   eax
c0007fc7:	6a 08                	push   0x8
c0007fc9:	56                   	push   esi
c0007fca:	e8 83 fb ff ff       	call   c0007b52 <VgaText::putchar(char)>
c0007fcf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007fd2:	e8 89 85 ff ff       	call   c0000560 <strlen>
c0007fd7:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0007fdf:	eb 22                	jmp    c0008003 <VgaText::receiveKey(unsigned char)+0x6f>
c0007fe1:	0f be c3             	movsx  eax,bl
c0007fe4:	52                   	push   edx
c0007fe5:	52                   	push   edx
c0007fe6:	50                   	push   eax
c0007fe7:	56                   	push   esi
c0007fe8:	e8 65 fb ff ff       	call   c0007b52 <VgaText::putchar(char)>
c0007fed:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0007ff1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0007ff6:	59                   	pop    ecx
c0007ff7:	58                   	pop    eax
c0007ff8:	8d 44 24 16          	lea    eax,[esp+0x16]
c0007ffc:	50                   	push   eax
c0007ffd:	57                   	push   edi
c0007ffe:	e8 dd 87 ff ff       	call   c00007e0 <strcat>
c0008003:	83 c4 10             	add    esp,0x10
c0008006:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000800d:	75 05                	jne    c0008014 <VgaText::receiveKey(unsigned char)+0x80>
c000800f:	80 fb 0a             	cmp    bl,0xa
c0008012:	75 50                	jne    c0008064 <VgaText::receiveKey(unsigned char)+0xd0>
c0008014:	83 ec 0c             	sub    esp,0xc
c0008017:	81 c6 b2 00 00 00    	add    esi,0xb2
c000801d:	56                   	push   esi
c000801e:	e8 3d 85 ff ff       	call   c0000560 <strlen>
c0008023:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008026:	89 c3                	mov    ebx,eax
c0008028:	e8 33 85 ff ff       	call   c0000560 <strlen>
c000802d:	83 c4 10             	add    esp,0x10
c0008030:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008034:	3d 80 00 00 00       	cmp    eax,0x80
c0008039:	76 10                	jbe    c000804b <VgaText::receiveKey(unsigned char)+0xb7>
c000803b:	83 ec 0c             	sub    esp,0xc
c000803e:	68 fb cd 01 c0       	push   0xc001cdfb
c0008043:	e8 df 74 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	50                   	push   eax
c000804c:	50                   	push   eax
c000804d:	57                   	push   edi
c000804e:	56                   	push   esi
c000804f:	e8 8c 87 ff ff       	call   c00007e0 <strcat>
c0008054:	83 c4 0c             	add    esp,0xc
c0008057:	6a 30                	push   0x30
c0008059:	6a 00                	push   0x0
c000805b:	57                   	push   edi
c000805c:	e8 8f 84 ff ff       	call   c00004f0 <memset>
c0008061:	83 c4 10             	add    esp,0x10
c0008064:	83 c4 10             	add    esp,0x10
c0008067:	5b                   	pop    ebx
c0008068:	5e                   	pop    esi
c0008069:	5f                   	pop    edi
c000806a:	c3                   	ret    
c000806b:	90                   	nop

c000806c <VgaText::doUpdate()>:
c000806c:	c3                   	ret    

c000806d <newTerminal(char*)>:
c000806d:	83 ec 28             	sub    esp,0x28
c0008070:	68 34 01 00 00       	push   0x134
c0008075:	e8 9b eb ff ff       	call   c0006c15 <malloc>
c000807a:	5a                   	pop    edx
c000807b:	59                   	pop    ecx
c000807c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008080:	50                   	push   eax
c0008081:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008085:	e8 be fd ff ff       	call   c0007e48 <VgaText::VgaText(char const*)>
c000808a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000808e:	83 c4 2c             	add    esp,0x2c
c0008091:	c3                   	ret    
c0008092:	66 90                	xchg   ax,ax

c0008094 <TSS::TSS()>:
c0008094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008098:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000809f:	90                   	nop
c00080a0:	c3                   	ret    
c00080a1:	90                   	nop
c00080a2:	66 90                	xchg   ax,ax

c00080a4 <TSS::setESP(unsigned long)>:
c00080a4:	55                   	push   ebp
c00080a5:	89 e5                	mov    ebp,esp
c00080a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080ad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00080b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00080b3:	90                   	nop
c00080b4:	5d                   	pop    ebp
c00080b5:	c3                   	ret    
c00080b6:	66 90                	xchg   ax,ax

c00080b8 <TSS::flush()>:
c00080b8:	55                   	push   ebp
c00080b9:	89 e5                	mov    ebp,esp
c00080bb:	83 ec 10             	sub    esp,0x10
c00080be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00080c3:	83 c8 03             	or     eax,0x3
c00080c6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00080ca:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00080ce:	66 89 d0             	mov    ax,dx
c00080d1:	0f 00 d8             	ltr    ax
c00080d4:	90                   	nop
c00080d5:	c9                   	leave  
c00080d6:	c3                   	ret    
c00080d7:	90                   	nop

c00080d8 <TSS::setup(unsigned long, unsigned long)>:
c00080d8:	55                   	push   ebp
c00080d9:	89 e5                	mov    ebp,esp
c00080db:	83 ec 18             	sub    esp,0x18
c00080de:	83 ec 0c             	sub    esp,0xc
c00080e1:	6a 68                	push   0x68
c00080e3:	e8 2d eb ff ff       	call   c0006c15 <malloc>
c00080e8:	83 c4 10             	add    esp,0x10
c00080eb:	89 c2                	mov    edx,eax
c00080ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00080f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f9:	83 ec 04             	sub    esp,0x4
c00080fc:	6a 68                	push   0x68
c00080fe:	6a 00                	push   0x0
c0008100:	50                   	push   eax
c0008101:	e8 ea 83 ff ff       	call   c00004f0 <memset>
c0008106:	83 c4 10             	add    esp,0x10
c0008109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000810c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000810f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000811b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008124:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008127:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000812a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000812d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008130:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008133:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000813c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000813f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000814b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008157:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000815d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008163:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000816c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000816f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008178:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000817b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000817e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008184:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008187:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000818a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000818d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008190:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008193:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000819a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000819d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081a0:	0f 20 da             	mov    edx,cr3
c00081a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00081a6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00081a9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00081ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081b2:	83 ec 08             	sub    esp,0x8
c00081b5:	50                   	push   eax
c00081b6:	8d 45 ec             	lea    eax,[ebp-0x14]
c00081b9:	50                   	push   eax
c00081ba:	e8 9d e2 ff ff       	call   c000645c <GDTEntry::setBase(unsigned int)>
c00081bf:	83 c4 10             	add    esp,0x10
c00081c2:	83 ec 08             	sub    esp,0x8
c00081c5:	6a 68                	push   0x68
c00081c7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00081ca:	50                   	push   eax
c00081cb:	e8 a8 e2 ff ff       	call   c0006478 <GDTEntry::setLimit(unsigned int)>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00081d7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00081da:	83 e0 0f             	and    eax,0xf
c00081dd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00081e0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00081e3:	83 c8 40             	or     eax,0x40
c00081e6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00081e9:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c00081ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00081f4:	05 78 01 00 00       	add    eax,0x178
c00081f9:	83 ec 04             	sub    esp,0x4
c00081fc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00081ff:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008202:	50                   	push   eax
c0008203:	e8 a4 e2 ff ff       	call   c00064ac <GDT::addEntry(GDTEntry)>
c0008208:	83 c4 10             	add    esp,0x10
c000820b:	89 c2                	mov    edx,eax
c000820d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008210:	89 10                	mov    DWORD PTR [eax],edx
c0008212:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0008217:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000821d:	05 78 01 00 00       	add    eax,0x178
c0008222:	83 ec 0c             	sub    esp,0xc
c0008225:	50                   	push   eax
c0008226:	e8 ab e2 ff ff       	call   c00064d6 <GDT::flush()>
c000822b:	83 c4 10             	add    esp,0x10
c000822e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008231:	8b 00                	mov    eax,DWORD PTR [eax]
c0008233:	c9                   	leave  
c0008234:	c3                   	ret    
c0008235:	90                   	nop

c0008236 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000823e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008241:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008246:	75 08                	jne    c0008250 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008248:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000824e:	eb 38                	jmp    c0008288 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008250:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008255:	75 17                	jne    c000826e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008257:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000825c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000825f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008265:	8b 10                	mov    edx,DWORD PTR [eax]
c0008267:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000826b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000826e:	89 c1                	mov    ecx,eax
c0008270:	83 e1 fd             	and    ecx,0xfffffffd
c0008273:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008279:	74 cd                	je     c0008248 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000827b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008280:	83 e0 ef             	and    eax,0xffffffef
c0008283:	83 f8 08             	cmp    eax,0x8
c0008286:	76 c0                	jbe    c0008248 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008288:	31 c0                	xor    eax,eax
c000828a:	c3                   	ret    
c000828b:	90                   	nop

c000828c <ReservedFilename::isAtty()>:
c000828c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008290:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008293:	31 c0                	xor    eax,eax
c0008295:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000829b:	74 09                	je     c00082a6 <ReservedFilename::isAtty()+0x1a>
c000829d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00082a3:	0f 94 c0             	sete   al
c00082a6:	c3                   	ret    
c00082a7:	90                   	nop

c00082a8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00082a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00082b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00082b7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00082bc:	75 08                	jne    c00082c6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00082be:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00082c4:	eb 3d                	jmp    c0008303 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00082c6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00082cb:	75 17                	jne    c00082e4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00082cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00082d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00082d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00082db:	8b 10                	mov    edx,DWORD PTR [eax]
c00082dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00082e1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00082e4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00082e9:	75 04                	jne    c00082ef <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00082eb:	89 0a                	mov    DWORD PTR [edx],ecx
c00082ed:	eb 14                	jmp    c0008303 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00082ef:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00082f4:	74 c8                	je     c00082be <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00082f6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00082fb:	83 e0 ef             	and    eax,0xffffffef
c00082fe:	83 f8 08             	cmp    eax,0x8
c0008301:	76 bb                	jbe    c00082be <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008303:	31 c0                	xor    eax,eax
c0008305:	c3                   	ret    

c0008306 <UnixFile::getFileDescriptor()>:
c0008306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000830a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000830d:	c3                   	ret    

c000830e <UnixFile::UnixFile(int)>:
c000830e:	53                   	push   ebx
c000830f:	83 ec 28             	sub    esp,0x28
c0008312:	ba 18 cf 01 c0       	mov    edx,0xc001cf18
c0008317:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000831b:	89 10                	mov    DWORD PTR [eax],edx
c000831d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008325:	0f 8f 8c 01 00 00    	jg     c00084b7 <UnixFile::UnixFile(int)+0x1a9>
c000832b:	a1 20 ee 01 c0       	mov    eax,ds:0xc001ee20
c0008330:	8d 50 01             	lea    edx,[eax+0x1]
c0008333:	89 15 20 ee 01 c0    	mov    DWORD PTR ds:0xc001ee20,edx
c0008339:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000833d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008340:	83 ec 08             	sub    esp,0x8
c0008343:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008347:	68 58 f5 01 c0       	push   0xc001f558
c000834c:	e8 87 36 01 00       	call   c001b9d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008351:	83 c4 10             	add    esp,0x10
c0008354:	a0 54 f5 01 c0       	mov    al,ds:0xc001f554
c0008359:	83 f0 01             	xor    eax,0x1
c000835c:	84 c0                	test   al,al
c000835e:	0f 84 54 01 00 00    	je     c00084b8 <UnixFile::UnixFile(int)+0x1aa>
c0008364:	c6 05 54 f5 01 c0 01 	mov    BYTE PTR ds:0xc001f554,0x1
c000836b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008373:	83 ec 0c             	sub    esp,0xc
c0008376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000837a:	e8 96 e8 ff ff       	call   c0006c15 <malloc>
c000837f:	83 c4 10             	add    esp,0x10
c0008382:	89 c3                	mov    ebx,eax
c0008384:	83 ec 08             	sub    esp,0x8
c0008387:	68 03 ff ff 0f       	push   0xfffff03
c000838c:	53                   	push   ebx
c000838d:	e8 2c 01 00 00       	call   c00084be <ReservedFilename::ReservedFilename(int)>
c0008392:	83 c4 10             	add    esp,0x10
c0008395:	89 1d 4c f5 01 c0    	mov    DWORD PTR ds:0xc001f54c,ebx
c000839b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00083a3:	83 ec 0c             	sub    esp,0xc
c00083a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083aa:	e8 66 e8 ff ff       	call   c0006c15 <malloc>
c00083af:	83 c4 10             	add    esp,0x10
c00083b2:	89 c3                	mov    ebx,eax
c00083b4:	83 ec 08             	sub    esp,0x8
c00083b7:	68 01 ff ff 0f       	push   0xfffff01
c00083bc:	53                   	push   ebx
c00083bd:	e8 fc 00 00 00       	call   c00084be <ReservedFilename::ReservedFilename(int)>
c00083c2:	83 c4 10             	add    esp,0x10
c00083c5:	89 1d 50 f5 01 c0    	mov    DWORD PTR ds:0xc001f550,ebx
c00083cb:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00083d3:	83 ec 0c             	sub    esp,0xc
c00083d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00083da:	e8 36 e8 ff ff       	call   c0006c15 <malloc>
c00083df:	83 c4 10             	add    esp,0x10
c00083e2:	89 c3                	mov    ebx,eax
c00083e4:	83 ec 08             	sub    esp,0x8
c00083e7:	68 00 ff ff 0f       	push   0xfffff00
c00083ec:	53                   	push   ebx
c00083ed:	e8 cc 00 00 00       	call   c00084be <ReservedFilename::ReservedFilename(int)>
c00083f2:	83 c4 10             	add    esp,0x10
c00083f5:	89 1d 44 f5 01 c0    	mov    DWORD PTR ds:0xc001f544,ebx
c00083fb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008403:	83 ec 0c             	sub    esp,0xc
c0008406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000840a:	e8 06 e8 ff ff       	call   c0006c15 <malloc>
c000840f:	83 c4 10             	add    esp,0x10
c0008412:	89 c3                	mov    ebx,eax
c0008414:	83 ec 08             	sub    esp,0x8
c0008417:	68 02 ff ff 0f       	push   0xfffff02
c000841c:	53                   	push   ebx
c000841d:	e8 9c 00 00 00       	call   c00084be <ReservedFilename::ReservedFilename(int)>
c0008422:	83 c4 10             	add    esp,0x10
c0008425:	89 1d 48 f5 01 c0    	mov    DWORD PTR ds:0xc001f548,ebx
c000842b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008433:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008438:	7f 7e                	jg     c00084b8 <UnixFile::UnixFile(int)+0x1aa>
c000843a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008442:	83 ec 0c             	sub    esp,0xc
c0008445:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008449:	e8 c7 e7 ff ff       	call   c0006c15 <malloc>
c000844e:	83 c4 10             	add    esp,0x10
c0008451:	89 c3                	mov    ebx,eax
c0008453:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008457:	05 10 ff ff 0f       	add    eax,0xfffff10
c000845c:	83 ec 08             	sub    esp,0x8
c000845f:	50                   	push   eax
c0008460:	53                   	push   ebx
c0008461:	e8 58 00 00 00       	call   c00084be <ReservedFilename::ReservedFilename(int)>
c0008466:	83 c4 10             	add    esp,0x10
c0008469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000846d:	89 1c 85 20 f5 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0ae0],ebx
c0008474:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000847c:	83 ec 0c             	sub    esp,0xc
c000847f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008483:	e8 8d e7 ff ff       	call   c0006c15 <malloc>
c0008488:	83 c4 10             	add    esp,0x10
c000848b:	89 c3                	mov    ebx,eax
c000848d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008491:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008496:	83 ec 08             	sub    esp,0x8
c0008499:	50                   	push   eax
c000849a:	53                   	push   ebx
c000849b:	e8 1e 00 00 00       	call   c00084be <ReservedFilename::ReservedFilename(int)>
c00084a0:	83 c4 10             	add    esp,0x10
c00084a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084a7:	89 1c 85 e0 f4 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0b20],ebx
c00084ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00084b2:	e9 7c ff ff ff       	jmp    c0008433 <UnixFile::UnixFile(int)+0x125>
c00084b7:	90                   	nop
c00084b8:	83 c4 28             	add    esp,0x28
c00084bb:	5b                   	pop    ebx
c00084bc:	c3                   	ret    
c00084bd:	90                   	nop

c00084be <ReservedFilename::ReservedFilename(int)>:
c00084be:	83 ec 0c             	sub    esp,0xc
c00084c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084c5:	83 ec 08             	sub    esp,0x8
c00084c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084cc:	50                   	push   eax
c00084cd:	e8 3c fe ff ff       	call   c000830e <UnixFile::UnixFile(int)>
c00084d2:	83 c4 10             	add    esp,0x10
c00084d5:	ba 34 cf 01 c0       	mov    edx,0xc001cf34
c00084da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084de:	89 10                	mov    DWORD PTR [eax],edx
c00084e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00084e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00084eb:	90                   	nop
c00084ec:	83 c4 0c             	add    esp,0xc
c00084ef:	c3                   	ret    

c00084f0 <UnixFile::~UnixFile()>:
c00084f0:	83 ec 1c             	sub    esp,0x1c
c00084f3:	ba 18 cf 01 c0       	mov    edx,0xc001cf18
c00084f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084fc:	89 10                	mov    DWORD PTR [eax],edx
c00084fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008505:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000850a:	7f 73                	jg     c000857f <UnixFile::~UnixFile()+0x8f>
c000850c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008514:	83 ec 0c             	sub    esp,0xc
c0008517:	68 58 f5 01 c0       	push   0xc001f558
c000851c:	e8 8b 35 01 00       	call   c001baac <LinkedList<UnixFile>::getFirstElement()>
c0008521:	83 c4 10             	add    esp,0x10
c0008524:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008528:	83 ec 0c             	sub    esp,0xc
c000852b:	68 58 f5 01 c0       	push   0xc001f558
c0008530:	e8 7f 35 01 00       	call   c001bab4 <LinkedList<UnixFile>::removeFirst()>
c0008535:	83 c4 10             	add    esp,0x10
c0008538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000853c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008540:	74 40                	je     c0008582 <UnixFile::~UnixFile()+0x92>
c0008542:	83 ec 08             	sub    esp,0x8
c0008545:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008549:	68 58 f5 01 c0       	push   0xc001f558
c000854e:	e8 85 34 01 00       	call   c001b9d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008553:	83 c4 10             	add    esp,0x10
c0008556:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000855a:	8d 50 01             	lea    edx,[eax+0x1]
c000855d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008561:	3d 88 13 00 00       	cmp    eax,0x1388
c0008566:	0f 94 c0             	sete   al
c0008569:	84 c0                	test   al,al
c000856b:	74 a7                	je     c0008514 <UnixFile::~UnixFile()+0x24>
c000856d:	83 ec 0c             	sub    esp,0xc
c0008570:	68 f0 ce 01 c0       	push   0xc001cef0
c0008575:	e8 ad 6f 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	eb 95                	jmp    c0008514 <UnixFile::~UnixFile()+0x24>
c000857f:	90                   	nop
c0008580:	eb 01                	jmp    c0008583 <UnixFile::~UnixFile()+0x93>
c0008582:	90                   	nop
c0008583:	90                   	nop
c0008584:	83 c4 1c             	add    esp,0x1c
c0008587:	c3                   	ret    

c0008588 <UnixFile::~UnixFile()>:
c0008588:	83 ec 0c             	sub    esp,0xc
c000858b:	83 ec 0c             	sub    esp,0xc
c000858e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008592:	e8 59 ff ff ff       	call   c00084f0 <UnixFile::~UnixFile()>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	83 ec 08             	sub    esp,0x8
c000859d:	6a 0c                	push   0xc
c000859f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085a3:	e8 3a 13 00 00       	call   c00098e2 <operator delete(void*, unsigned long)>
c00085a8:	83 c4 10             	add    esp,0x10
c00085ab:	83 c4 0c             	add    esp,0xc
c00085ae:	c3                   	ret    
c00085af:	90                   	nop

c00085b0 <ReservedFilename::~ReservedFilename()>:
c00085b0:	83 ec 0c             	sub    esp,0xc
c00085b3:	ba 34 cf 01 c0       	mov    edx,0xc001cf34
c00085b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085bc:	89 10                	mov    DWORD PTR [eax],edx
c00085be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085c2:	83 ec 0c             	sub    esp,0xc
c00085c5:	50                   	push   eax
c00085c6:	e8 25 ff ff ff       	call   c00084f0 <UnixFile::~UnixFile()>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	90                   	nop
c00085cf:	83 c4 0c             	add    esp,0xc
c00085d2:	c3                   	ret    
c00085d3:	90                   	nop

c00085d4 <ReservedFilename::~ReservedFilename()>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 cd ff ff ff       	call   c00085b0 <ReservedFilename::~ReservedFilename()>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	83 ec 08             	sub    esp,0x8
c00085e9:	6a 0c                	push   0xc
c00085eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ef:	e8 ee 12 00 00       	call   c00098e2 <operator delete(void*, unsigned long)>
c00085f4:	83 c4 10             	add    esp,0x10
c00085f7:	83 c4 0c             	add    esp,0xc
c00085fa:	c3                   	ret    

c00085fb <getFromFileDescriptor(int)>:
c00085fb:	53                   	push   ebx
c00085fc:	83 ec 08             	sub    esp,0x8
c00085ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008603:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0008609:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000860f:	7f 2c                	jg     c000863d <getFromFileDescriptor(int)+0x42>
c0008611:	83 ec 0c             	sub    esp,0xc
c0008614:	68 58 f5 01 c0       	push   0xc001f558
c0008619:	e8 8e 34 01 00       	call   c001baac <LinkedList<UnixFile>::getFirstElement()>
c000861e:	83 c4 10             	add    esp,0x10
c0008621:	85 c0                	test   eax,eax
c0008623:	75 04                	jne    c0008629 <getFromFileDescriptor(int)+0x2e>
c0008625:	31 c0                	xor    eax,eax
c0008627:	eb 6e                	jmp    c0008697 <getFromFileDescriptor(int)+0x9c>
c0008629:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000862c:	74 69                	je     c0008697 <getFromFileDescriptor(int)+0x9c>
c000862e:	52                   	push   edx
c000862f:	52                   	push   edx
c0008630:	50                   	push   eax
c0008631:	68 58 f5 01 c0       	push   0xc001f558
c0008636:	e8 1b 35 01 00       	call   c001bb56 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000863b:	eb e1                	jmp    c000861e <getFromFileDescriptor(int)+0x23>
c000863d:	a1 4c f5 01 c0       	mov    eax,ds:0xc001f54c
c0008642:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0008648:	74 4d                	je     c0008697 <getFromFileDescriptor(int)+0x9c>
c000864a:	a1 50 f5 01 c0       	mov    eax,ds:0xc001f550
c000864f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0008655:	74 40                	je     c0008697 <getFromFileDescriptor(int)+0x9c>
c0008657:	a1 48 f5 01 c0       	mov    eax,ds:0xc001f548
c000865c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0008662:	74 33                	je     c0008697 <getFromFileDescriptor(int)+0x9c>
c0008664:	a1 44 f5 01 c0       	mov    eax,ds:0xc001f544
c0008669:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000866f:	74 26                	je     c0008697 <getFromFileDescriptor(int)+0x9c>
c0008671:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0008677:	83 f8 08             	cmp    eax,0x8
c000867a:	77 09                	ja     c0008685 <getFromFileDescriptor(int)+0x8a>
c000867c:	8b 04 85 20 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0ae0]
c0008683:	eb 12                	jmp    c0008697 <getFromFileDescriptor(int)+0x9c>
c0008685:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000868b:	83 fb 08             	cmp    ebx,0x8
c000868e:	77 95                	ja     c0008625 <getFromFileDescriptor(int)+0x2a>
c0008690:	8b 04 9d e0 f4 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe0b20]
c0008697:	83 c4 08             	add    esp,0x8
c000869a:	5b                   	pop    ebx
c000869b:	c3                   	ret    

c000869c <__static_initialization_and_destruction_0(int, int)>:
c000869c:	83 ec 0c             	sub    esp,0xc
c000869f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00086a4:	75 34                	jne    c00086da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00086a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00086ae:	75 2a                	jne    c00086da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00086b0:	83 ec 0c             	sub    esp,0xc
c00086b3:	68 58 f5 01 c0       	push   0xc001f558
c00086b8:	e8 d9 32 01 00       	call   c001b996 <LinkedList<UnixFile>::LinkedList()>
c00086bd:	83 c4 10             	add    esp,0x10
c00086c0:	83 ec 04             	sub    esp,0x4
c00086c3:	68 44 ec 01 c0       	push   0xc001ec44
c00086c8:	68 58 f5 01 c0       	push   0xc001f558
c00086cd:	68 94 b9 01 c0       	push   0xc001b994
c00086d2:	e8 bb 11 00 00       	call   c0009892 <__cxa_atexit>
c00086d7:	83 c4 10             	add    esp,0x10
c00086da:	90                   	nop
c00086db:	83 c4 0c             	add    esp,0xc
c00086de:	c3                   	ret    

c00086df <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00086df:	83 ec 0c             	sub    esp,0xc
c00086e2:	83 ec 08             	sub    esp,0x8
c00086e5:	68 ff ff 00 00       	push   0xffff
c00086ea:	6a 01                	push   0x1
c00086ec:	e8 ab ff ff ff       	call   c000869c <__static_initialization_and_destruction_0(int, int)>
c00086f1:	83 c4 10             	add    esp,0x10
c00086f4:	83 c4 0c             	add    esp,0xc
c00086f7:	c3                   	ret    

c00086f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00086f8:	53                   	push   ebx
c00086f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008701:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0008707:	89 c8                	mov    eax,ecx
c0008709:	d1 e8                	shr    eax,1
c000870b:	03 05 28 ee 01 c0    	add    eax,DWORD PTR ds:0xc001ee28
c0008711:	83 e1 01             	and    ecx,0x1
c0008714:	8a 10                	mov    dl,BYTE PTR [eax]
c0008716:	75 09                	jne    c0008721 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0008718:	83 e2 f0             	and    edx,0xfffffff0
c000871b:	09 da                	or     edx,ebx
c000871d:	88 10                	mov    BYTE PTR [eax],dl
c000871f:	5b                   	pop    ebx
c0008720:	c3                   	ret    
c0008721:	c1 e3 04             	shl    ebx,0x4
c0008724:	83 e2 0f             	and    edx,0xf
c0008727:	09 da                	or     edx,ebx
c0008729:	88 10                	mov    BYTE PTR [eax],dl
c000872b:	5b                   	pop    ebx
c000872c:	c3                   	ret    

c000872d <Virt::getPageState(unsigned long)>:
c000872d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008731:	8b 0d 28 ee 01 c0    	mov    ecx,DWORD PTR ds:0xc001ee28
c0008737:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000873d:	89 d0                	mov    eax,edx
c000873f:	d1 e8                	shr    eax,1
c0008741:	83 e2 01             	and    edx,0x1
c0008744:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0008747:	75 04                	jne    c000874d <Virt::getPageState(unsigned long)+0x20>
c0008749:	83 e0 0f             	and    eax,0xf
c000874c:	c3                   	ret    
c000874d:	c0 e8 04             	shr    al,0x4
c0008750:	c3                   	ret    

c0008751 <Virt::allocateKernelVirtualPages(int)>:
c0008751:	55                   	push   ebp
c0008752:	31 ed                	xor    ebp,ebp
c0008754:	57                   	push   edi
c0008755:	56                   	push   esi
c0008756:	53                   	push   ebx
c0008757:	31 db                	xor    ebx,ebx
c0008759:	83 ec 1c             	sub    esp,0x1c
c000875c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008760:	8b 3d 24 ee 01 c0    	mov    edi,DWORD PTR ds:0xc001ee24
c0008766:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000876b:	57                   	push   edi
c000876c:	e8 bc ff ff ff       	call   c000872d <Virt::getPageState(unsigned long)>
c0008771:	5a                   	pop    edx
c0008772:	84 c0                	test   al,al
c0008774:	75 3a                	jne    c00087b0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0008776:	85 db                	test   ebx,ebx
c0008778:	75 02                	jne    c000877c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000877a:	89 fd                	mov    ebp,edi
c000877c:	43                   	inc    ebx
c000877d:	39 f3                	cmp    ebx,esi
c000877f:	74 5a                	je     c00087db <Virt::allocateKernelVirtualPages(int)+0x8a>
c0008781:	47                   	inc    edi
c0008782:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0008788:	76 31                	jbe    c00087bb <Virt::allocateKernelVirtualPages(int)+0x6a>
c000878a:	c7 05 24 ee 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001ee24,0xc8000
c0008794:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0008799:	75 28                	jne    c00087c3 <Virt::allocateKernelVirtualPages(int)+0x72>
c000879b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00087a0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00087a5:	57                   	push   edi
c00087a6:	e8 82 ff ff ff       	call   c000872d <Virt::getPageState(unsigned long)>
c00087ab:	5a                   	pop    edx
c00087ac:	84 c0                	test   al,al
c00087ae:	74 c6                	je     c0008776 <Virt::allocateKernelVirtualPages(int)+0x25>
c00087b0:	31 db                	xor    ebx,ebx
c00087b2:	47                   	inc    edi
c00087b3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00087b9:	77 cf                	ja     c000878a <Virt::allocateKernelVirtualPages(int)+0x39>
c00087bb:	89 3d 24 ee 01 c0    	mov    DWORD PTR ds:0xc001ee24,edi
c00087c1:	eb a8                	jmp    c000876b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00087c3:	83 ec 0c             	sub    esp,0xc
c00087c6:	68 48 cf 01 c0       	push   0xc001cf48
c00087cb:	e8 57 6d 00 00       	call   c000f527 <Krnl::panic(char const*)>
c00087d0:	8b 3d 24 ee 01 c0    	mov    edi,DWORD PTR ds:0xc001ee24
c00087d6:	83 c4 10             	add    esp,0x10
c00087d9:	eb 90                	jmp    c000876b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00087db:	89 2d 24 ee 01 c0    	mov    DWORD PTR ds:0xc001ee24,ebp
c00087e1:	4b                   	dec    ebx
c00087e2:	74 5f                	je     c0008843 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00087e4:	85 f6                	test   esi,esi
c00087e6:	74 3d                	je     c0008825 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00087e8:	89 e8                	mov    eax,ebp
c00087ea:	31 db                	xor    ebx,ebx
c00087ec:	8d 7e ff             	lea    edi,[esi-0x1]
c00087ef:	eb 14                	jmp    c0008805 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00087f1:	6a 01                	push   0x1
c00087f3:	43                   	inc    ebx
c00087f4:	50                   	push   eax
c00087f5:	e8 fe fe ff ff       	call   c00086f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00087fa:	58                   	pop    eax
c00087fb:	39 f3                	cmp    ebx,esi
c00087fd:	5a                   	pop    edx
c00087fe:	74 25                	je     c0008825 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008800:	a1 24 ee 01 c0       	mov    eax,ds:0xc001ee24
c0008805:	8d 50 01             	lea    edx,[eax+0x1]
c0008808:	85 db                	test   ebx,ebx
c000880a:	89 15 24 ee 01 c0    	mov    DWORD PTR ds:0xc001ee24,edx
c0008810:	74 20                	je     c0008832 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0008812:	39 df                	cmp    edi,ebx
c0008814:	75 db                	jne    c00087f1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0008816:	6a 03                	push   0x3
c0008818:	43                   	inc    ebx
c0008819:	50                   	push   eax
c000881a:	e8 d9 fe ff ff       	call   c00086f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000881f:	59                   	pop    ecx
c0008820:	39 f3                	cmp    ebx,esi
c0008822:	58                   	pop    eax
c0008823:	75 db                	jne    c0008800 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008825:	83 c4 1c             	add    esp,0x1c
c0008828:	89 e8                	mov    eax,ebp
c000882a:	5b                   	pop    ebx
c000882b:	c1 e0 0c             	shl    eax,0xc
c000882e:	5e                   	pop    esi
c000882f:	5f                   	pop    edi
c0008830:	5d                   	pop    ebp
c0008831:	c3                   	ret    
c0008832:	6a 02                	push   0x2
c0008834:	bb 01 00 00 00       	mov    ebx,0x1
c0008839:	50                   	push   eax
c000883a:	e8 b9 fe ff ff       	call   c00086f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000883f:	58                   	pop    eax
c0008840:	5a                   	pop    edx
c0008841:	eb bd                	jmp    c0008800 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008843:	6a 04                	push   0x4
c0008845:	8d 45 01             	lea    eax,[ebp+0x1]
c0008848:	55                   	push   ebp
c0008849:	a3 24 ee 01 c0       	mov    ds:0xc001ee24,eax
c000884e:	e8 a5 fe ff ff       	call   c00086f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008853:	59                   	pop    ecx
c0008854:	89 e8                	mov    eax,ebp
c0008856:	5b                   	pop    ebx
c0008857:	c1 e0 0c             	shl    eax,0xc
c000885a:	83 c4 1c             	add    esp,0x1c
c000885d:	5b                   	pop    ebx
c000885e:	5e                   	pop    esi
c000885f:	5f                   	pop    edi
c0008860:	5d                   	pop    ebp
c0008861:	c3                   	ret    

c0008862 <Virt::freeSwapfilePage(unsigned long)>:
c0008862:	53                   	push   ebx
c0008863:	8b 15 70 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f570
c0008869:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000886d:	b8 01 00 00 00       	mov    eax,0x1
c0008872:	89 cb                	mov    ebx,ecx
c0008874:	d3 e0                	shl    eax,cl
c0008876:	c1 eb 05             	shr    ebx,0x5
c0008879:	f7 d0                	not    eax
c000887b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000887e:	5b                   	pop    ebx
c000887f:	c3                   	ret    

c0008880 <Virt::swapIDToSector(unsigned long)>:
c0008880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008884:	0f af 05 2c ee 01 c0 	imul   eax,DWORD PTR ds:0xc001ee2c
c000888b:	03 05 34 ee 01 c0    	add    eax,DWORD PTR ds:0xc001ee34
c0008891:	c3                   	ret    

c0008892 <Virt::allocateSwapfilePage()>:
c0008892:	55                   	push   ebp
c0008893:	31 d2                	xor    edx,edx
c0008895:	57                   	push   edi
c0008896:	56                   	push   esi
c0008897:	53                   	push   ebx
c0008898:	83 ec 0c             	sub    esp,0xc
c000889b:	8b 0d 2c ee 01 c0    	mov    ecx,DWORD PTR ds:0xc001ee2c
c00088a1:	a1 30 ee 01 c0       	mov    eax,ds:0xc001ee30
c00088a6:	f7 f1                	div    ecx
c00088a8:	39 0d 30 ee 01 c0    	cmp    DWORD PTR ds:0xc001ee30,ecx
c00088ae:	72 2d                	jb     c00088dd <Virt::allocateSwapfilePage()+0x4b>
c00088b0:	8b 35 70 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f570
c00088b6:	8b 16                	mov    edx,DWORD PTR [esi]
c00088b8:	f6 c2 01             	test   dl,0x1
c00088bb:	74 3c                	je     c00088f9 <Virt::allocateSwapfilePage()+0x67>
c00088bd:	31 c9                	xor    ecx,ecx
c00088bf:	bf 01 00 00 00       	mov    edi,0x1
c00088c4:	eb 12                	jmp    c00088d8 <Virt::allocateSwapfilePage()+0x46>
c00088c6:	89 fd                	mov    ebp,edi
c00088c8:	89 ca                	mov    edx,ecx
c00088ca:	d3 e5                	shl    ebp,cl
c00088cc:	c1 ea 05             	shr    edx,0x5
c00088cf:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00088d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00088d4:	85 ea                	test   edx,ebp
c00088d6:	74 2a                	je     c0008902 <Virt::allocateSwapfilePage()+0x70>
c00088d8:	41                   	inc    ecx
c00088d9:	39 c8                	cmp    eax,ecx
c00088db:	77 e9                	ja     c00088c6 <Virt::allocateSwapfilePage()+0x34>
c00088dd:	83 ec 0c             	sub    esp,0xc
c00088e0:	68 af d0 01 c0       	push   0xc001d0af
c00088e5:	e8 3d 6c 00 00       	call   c000f527 <Krnl::panic(char const*)>
c00088ea:	83 c4 10             	add    esp,0x10
c00088ed:	31 c9                	xor    ecx,ecx
c00088ef:	83 c4 0c             	add    esp,0xc
c00088f2:	89 c8                	mov    eax,ecx
c00088f4:	5b                   	pop    ebx
c00088f5:	5e                   	pop    esi
c00088f6:	5f                   	pop    edi
c00088f7:	5d                   	pop    ebp
c00088f8:	c3                   	ret    
c00088f9:	89 f3                	mov    ebx,esi
c00088fb:	bd 01 00 00 00       	mov    ebp,0x1
c0008900:	31 c9                	xor    ecx,ecx
c0008902:	09 ea                	or     edx,ebp
c0008904:	89 c8                	mov    eax,ecx
c0008906:	89 13                	mov    DWORD PTR [ebx],edx
c0008908:	83 c4 0c             	add    esp,0xc
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <Virt::virtualMemorySetup()>:
c0008910:	53                   	push   ebx
c0008911:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008916:	6a 0f                	push   0xf
c0008918:	53                   	push   ebx
c0008919:	43                   	inc    ebx
c000891a:	e8 d9 fd ff ff       	call   c00086f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000891f:	58                   	pop    eax
c0008920:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008926:	5a                   	pop    edx
c0008927:	75 ed                	jne    c0008916 <Virt::virtualMemorySetup()+0x6>
c0008929:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000892e:	6a 00                	push   0x0
c0008930:	53                   	push   ebx
c0008931:	43                   	inc    ebx
c0008932:	e8 c1 fd ff ff       	call   c00086f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008937:	59                   	pop    ecx
c0008938:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000893e:	58                   	pop    eax
c000893f:	75 ed                	jne    c000892e <Virt::virtualMemorySetup()+0x1e>
c0008941:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0008946:	6a 0f                	push   0xf
c0008948:	53                   	push   ebx
c0008949:	43                   	inc    ebx
c000894a:	e8 a9 fd ff ff       	call   c00086f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000894f:	58                   	pop    eax
c0008950:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0008956:	5a                   	pop    edx
c0008957:	75 ed                	jne    c0008946 <Virt::virtualMemorySetup()+0x36>
c0008959:	5b                   	pop    ebx
c000895a:	c3                   	ret    

c000895b <Virt::setupPageSwapping(int)>:
c000895b:	53                   	push   ebx
c000895c:	83 ec 0c             	sub    esp,0xc
c000895f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008963:	a1 08 1a 02 c0       	mov    eax,ds:0xc0021a08
c0008968:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000896e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008970:	53                   	push   ebx
c0008971:	c1 e3 0b             	shl    ebx,0xb
c0008974:	68 c6 d0 01 c0       	push   0xc001d0c6
c0008979:	50                   	push   eax
c000897a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000897d:	89 1d 30 ee 01 c0    	mov    DWORD PTR ds:0xc001ee30,ebx
c0008983:	c6 05 38 ee 01 c0 43 	mov    BYTE PTR ds:0xc001ee38,0x43
c000898a:	c1 eb 08             	shr    ebx,0x8
c000898d:	a3 34 ee 01 c0       	mov    ds:0xc001ee34,eax
c0008992:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008995:	c7 05 2c ee 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001ee2c,0x8
c000899f:	e8 71 e2 ff ff       	call   c0006c15 <malloc>
c00089a4:	83 c4 0c             	add    esp,0xc
c00089a7:	89 c1                	mov    ecx,eax
c00089a9:	a3 70 f5 01 c0       	mov    ds:0xc001f570,eax
c00089ae:	31 d2                	xor    edx,edx
c00089b0:	a1 30 ee 01 c0       	mov    eax,ds:0xc001ee30
c00089b5:	f7 35 2c ee 01 c0    	div    DWORD PTR ds:0xc001ee2c
c00089bb:	c1 e8 05             	shr    eax,0x5
c00089be:	50                   	push   eax
c00089bf:	6a 00                	push   0x0
c00089c1:	51                   	push   ecx
c00089c2:	e8 29 7b ff ff       	call   c00004f0 <memset>
c00089c7:	83 c4 18             	add    esp,0x18
c00089ca:	5b                   	pop    ebx
c00089cb:	c3                   	ret    

c00089cc <VAS::VAS(VAS*)>:
c00089cc:	83 ec 0c             	sub    esp,0xc
c00089cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00089da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00089e5:	83 ec 0c             	sub    esp,0xc
c00089e8:	68 68 cf 01 c0       	push   0xc001cf68
c00089ed:	e8 35 6b 00 00       	call   c000f527 <Krnl::panic(char const*)>
c00089f2:	83 c4 10             	add    esp,0x10
c00089f5:	90                   	nop
c00089f6:	83 c4 0c             	add    esp,0xc
c00089f9:	c3                   	ret    

c00089fa <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00089fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089fe:	89 c2                	mov    edx,eax
c0008a00:	c1 e8 0a             	shr    eax,0xa
c0008a03:	c1 ea 16             	shr    edx,0x16
c0008a06:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008a0b:	19 c9                	sbb    ecx,ecx
c0008a0d:	c1 e2 0c             	shl    edx,0xc
c0008a10:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0008a16:	25 fc 0f 00 00       	and    eax,0xffc
c0008a1b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0008a22:	01 d0                	add    eax,edx
c0008a24:	c3                   	ret    
c0008a25:	90                   	nop

c0008a26 <VAS::getPageTableEntry(unsigned long)>:
c0008a26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008a2a:	89 ca                	mov    edx,ecx
c0008a2c:	c1 e9 0a             	shr    ecx,0xa
c0008a2f:	c1 ea 16             	shr    edx,0x16
c0008a32:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0008a38:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0008a3e:	c1 e0 0c             	shl    eax,0xc
c0008a41:	8d 04 08             	lea    eax,[eax+ecx*1]
c0008a44:	c3                   	ret    

c0008a45 <Virt::freeKernelVirtualPages(unsigned long)>:
c0008a45:	57                   	push   edi
c0008a46:	56                   	push   esi
c0008a47:	be 01 00 00 00       	mov    esi,0x1
c0008a4c:	53                   	push   ebx
c0008a4d:	83 ec 10             	sub    esp,0x10
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	c1 eb 0c             	shr    ebx,0xc
c0008a57:	eb 3f                	jmp    c0008a98 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0008a59:	83 ec 08             	sub    esp,0x8
c0008a5c:	a1 74 f5 01 c0       	mov    eax,ds:0xc001f574
c0008a61:	57                   	push   edi
c0008a62:	50                   	push   eax
c0008a63:	e8 be ff ff ff       	call   c0008a26 <VAS::getPageTableEntry(unsigned long)>
c0008a68:	83 c4 10             	add    esp,0x10
c0008a6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a6d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a71:	f6 c4 04             	test   ah,0x4
c0008a74:	75 60                	jne    c0008ad6 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0008a76:	80 fa 04             	cmp    dl,0x4
c0008a79:	74 79                	je     c0008af4 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0008a7b:	80 fa 02             	cmp    dl,0x2
c0008a7e:	0f 84 89 00 00 00    	je     c0008b0d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0008a84:	80 fa 03             	cmp    dl,0x3
c0008a87:	0f 84 ae 00 00 00    	je     c0008b3b <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0008a8d:	fe ca                	dec    dl
c0008a8f:	0f 84 93 00 00 00    	je     c0008b28 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008a95:	43                   	inc    ebx
c0008a96:	31 f6                	xor    esi,esi
c0008a98:	53                   	push   ebx
c0008a99:	89 df                	mov    edi,ebx
c0008a9b:	e8 8d fc ff ff       	call   c000872d <Virt::getPageState(unsigned long)>
c0008aa0:	c1 e7 0c             	shl    edi,0xc
c0008aa3:	5a                   	pop    edx
c0008aa4:	84 c0                	test   al,al
c0008aa6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008aaa:	75 ad                	jne    c0008a59 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0008aac:	83 ec 0c             	sub    esp,0xc
c0008aaf:	68 dd d0 01 c0       	push   0xc001d0dd
c0008ab4:	e8 6e 6a 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0008ab9:	5a                   	pop    edx
c0008aba:	59                   	pop    ecx
c0008abb:	57                   	push   edi
c0008abc:	8b 3d 74 f5 01 c0    	mov    edi,DWORD PTR ds:0xc001f574
c0008ac2:	57                   	push   edi
c0008ac3:	e8 5e ff ff ff       	call   c0008a26 <VAS::getPageTableEntry(unsigned long)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008acd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008ad1:	f6 c4 04             	test   ah,0x4
c0008ad4:	74 bf                	je     c0008a95 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008ad6:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008ada:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008adf:	83 ec 0c             	sub    esp,0xc
c0008ae2:	50                   	push   eax
c0008ae3:	e8 98 e4 ff ff       	call   c0006f80 <Phys::freePage(unsigned long)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008aef:	80 fa 04             	cmp    dl,0x4
c0008af2:	75 87                	jne    c0008a7b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0008af4:	89 f0                	mov    eax,esi
c0008af6:	84 c0                	test   al,al
c0008af8:	75 47                	jne    c0008b41 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0008afa:	c7 44 24 20 8c cf 01 c0 	mov    DWORD PTR [esp+0x20],0xc001cf8c
c0008b02:	83 c4 10             	add    esp,0x10
c0008b05:	5b                   	pop    ebx
c0008b06:	5e                   	pop    esi
c0008b07:	5f                   	pop    edi
c0008b08:	e9 1a 6a 00 00       	jmp    c000f527 <Krnl::panic(char const*)>
c0008b0d:	89 f0                	mov    eax,esi
c0008b0f:	84 c0                	test   al,al
c0008b11:	75 15                	jne    c0008b28 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008b13:	83 ec 0c             	sub    esp,0xc
c0008b16:	68 f9 d0 01 c0       	push   0xc001d0f9
c0008b1b:	e8 07 6a 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	e9 6d ff ff ff       	jmp    c0008a95 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008b28:	83 ec 08             	sub    esp,0x8
c0008b2b:	6a 00                	push   0x0
c0008b2d:	53                   	push   ebx
c0008b2e:	e8 c5 fb ff ff       	call   c00086f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008b33:	83 c4 10             	add    esp,0x10
c0008b36:	e9 5a ff ff ff       	jmp    c0008a95 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008b3b:	89 f0                	mov    eax,esi
c0008b3d:	84 c0                	test   al,al
c0008b3f:	75 15                	jne    c0008b56 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0008b41:	83 ec 08             	sub    esp,0x8
c0008b44:	6a 00                	push   0x0
c0008b46:	53                   	push   ebx
c0008b47:	e8 ac fb ff ff       	call   c00086f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008b4c:	83 c4 10             	add    esp,0x10
c0008b4f:	83 c4 10             	add    esp,0x10
c0008b52:	5b                   	pop    ebx
c0008b53:	5e                   	pop    esi
c0008b54:	5f                   	pop    edi
c0008b55:	c3                   	ret    
c0008b56:	c7 44 24 20 15 d1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d115
c0008b5e:	83 c4 10             	add    esp,0x10
c0008b61:	5b                   	pop    ebx
c0008b62:	5e                   	pop    esi
c0008b63:	5f                   	pop    edi
c0008b64:	e9 be 69 00 00       	jmp    c000f527 <Krnl::panic(char const*)>
c0008b69:	90                   	nop

c0008b6a <VAS::freeAllocatedPages(unsigned long)>:
c0008b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b72:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0008b76:	74 09                	je     c0008b81 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0008b78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008b7c:	e9 c4 fe ff ff       	jmp    c0008a45 <Virt::freeKernelVirtualPages(unsigned long)>
c0008b81:	c7 44 24 04 b0 cf 01 c0 	mov    DWORD PTR [esp+0x4],0xc001cfb0
c0008b89:	e9 4a 0e 00 00       	jmp    c00099d8 <Dbg::kprintf(char const*, ...)>

c0008b8e <VAS::virtualToPhysical(unsigned long)>:
c0008b8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b92:	50                   	push   eax
c0008b93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b97:	52                   	push   edx
c0008b98:	e8 89 fe ff ff       	call   c0008a26 <VAS::getPageTableEntry(unsigned long)>
c0008b9d:	59                   	pop    ecx
c0008b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ba0:	5a                   	pop    edx
c0008ba1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008ba6:	c3                   	ret    
c0008ba7:	90                   	nop

c0008ba8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0008ba8:	55                   	push   ebp
c0008ba9:	57                   	push   edi
c0008baa:	56                   	push   esi
c0008bab:	53                   	push   ebx
c0008bac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0008bb4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bb8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0008bbc:	85 db                	test   ebx,ebx
c0008bbe:	7e 22                	jle    c0008be2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0008bc0:	c1 e3 0c             	shl    ebx,0xc
c0008bc3:	01 f3                	add    ebx,esi
c0008bc5:	56                   	push   esi
c0008bc6:	81 c6 00 10 00 00    	add    esi,0x1000
c0008bcc:	55                   	push   ebp
c0008bcd:	e8 54 fe ff ff       	call   c0008a26 <VAS::getPageTableEntry(unsigned long)>
c0008bd2:	5a                   	pop    edx
c0008bd3:	59                   	pop    ecx
c0008bd4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008bd6:	21 f9                	and    ecx,edi
c0008bd8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0008bdc:	39 f3                	cmp    ebx,esi
c0008bde:	89 08                	mov    DWORD PTR [eax],ecx
c0008be0:	75 e3                	jne    c0008bc5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0008be2:	5b                   	pop    ebx
c0008be3:	5e                   	pop    esi
c0008be4:	5f                   	pop    edi
c0008be5:	5d                   	pop    ebp
c0008be6:	c3                   	ret    
c0008be7:	90                   	nop

c0008be8 <VAS::setToWriteCombining(unsigned long, int)>:
c0008be8:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0008bed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008bf3:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0008bfa:	75 01                	jne    c0008bfd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0008bfc:	c3                   	ret    
c0008bfd:	68 80 00 00 00       	push   0x80
c0008c02:	6a ff                	push   0xffffffff
c0008c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c08:	50                   	push   eax
c0008c09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008c0d:	52                   	push   edx
c0008c0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008c12:	51                   	push   ecx
c0008c13:	e8 90 ff ff ff       	call   c0008ba8 <VAS::reflagRange(unsigned long, int, int, int)>
c0008c18:	83 c4 14             	add    esp,0x14
c0008c1b:	c3                   	ret    

c0008c1c <VAS::mapOtherVASIn(bool, VAS*)>:
c0008c1c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008c21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c25:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0008c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c2c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0008c2f:	19 c0                	sbb    eax,eax
c0008c31:	83 ca 03             	or     edx,0x3
c0008c34:	83 e0 fc             	and    eax,0xfffffffc
c0008c37:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0008c3e:	0f 20 d8             	mov    eax,cr3
c0008c41:	0f 22 d8             	mov    cr3,eax
c0008c44:	c3                   	ret    
c0008c45:	90                   	nop

c0008c46 <VAS::~VAS()>:
c0008c46:	83 ec 2c             	sub    esp,0x2c
c0008c49:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008c51:	fa                   	cli    
c0008c52:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0008c57:	40                   	inc    eax
c0008c58:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0008c5d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008c62:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008c67:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008c6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008c71:	6a 01                	push   0x1
c0008c73:	50                   	push   eax
c0008c74:	e8 a3 ff ff ff       	call   c0008c1c <VAS::mapOtherVASIn(bool, VAS*)>
c0008c79:	83 c4 0c             	add    esp,0xc
c0008c7c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c84:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0008c8c:	0f 8f d4 00 00 00    	jg     c0008d66 <VAS::~VAS()+0x120>
c0008c92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c9d:	c1 e2 02             	shl    edx,0x2
c0008ca0:	01 d0                	add    eax,edx
c0008ca2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cac:	83 e0 01             	and    eax,0x1
c0008caf:	0f 84 a8 00 00 00    	je     c0008d5d <VAS::~VAS()+0x117>
c0008cb5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008cbd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0008cc5:	7f 72                	jg     c0008d39 <VAS::~VAS()+0xf3>
c0008cc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ccb:	c1 e0 0a             	shl    eax,0xa
c0008cce:	89 c2                	mov    edx,eax
c0008cd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008cd4:	01 d0                	add    eax,edx
c0008cd6:	c1 e0 0c             	shl    eax,0xc
c0008cd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008cdd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ce7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008ced:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cf1:	6a 01                	push   0x1
c0008cf3:	50                   	push   eax
c0008cf4:	e8 01 fd ff ff       	call   c00089fa <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0008cf9:	83 c4 0c             	add    esp,0xc
c0008cfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d0e:	25 01 04 00 00       	and    eax,0x401
c0008d13:	3d 01 04 00 00       	cmp    eax,0x401
c0008d18:	75 19                	jne    c0008d33 <VAS::~VAS()+0xed>
c0008d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008d23:	83 ec 0c             	sub    esp,0xc
c0008d26:	50                   	push   eax
c0008d27:	e8 54 e2 ff ff       	call   c0006f80 <Phys::freePage(unsigned long)>
c0008d2c:	83 c4 10             	add    esp,0x10
c0008d2f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008d33:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008d37:	eb 84                	jmp    c0008cbd <VAS::~VAS()+0x77>
c0008d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d3d:	25 00 04 00 00       	and    eax,0x400
c0008d42:	74 19                	je     c0008d5d <VAS::~VAS()+0x117>
c0008d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d48:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008d4d:	83 ec 0c             	sub    esp,0xc
c0008d50:	50                   	push   eax
c0008d51:	e8 2a e2 ff ff       	call   c0006f80 <Phys::freePage(unsigned long)>
c0008d56:	83 c4 10             	add    esp,0x10
c0008d59:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008d5d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0008d61:	e9 1e ff ff ff       	jmp    c0008c84 <VAS::~VAS()+0x3e>
c0008d66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008d6a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 cf fc ff ff       	call   c0008a45 <Virt::freeKernelVirtualPages(unsigned long)>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008d7d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008d80:	83 ec 0c             	sub    esp,0xc
c0008d83:	50                   	push   eax
c0008d84:	e8 f7 e1 ff ff       	call   c0006f80 <Phys::freePage(unsigned long)>
c0008d89:	83 c4 10             	add    esp,0x10
c0008d8c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008d90:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0008d95:	48                   	dec    eax
c0008d96:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0008d9b:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0008da0:	85 c0                	test   eax,eax
c0008da2:	75 01                	jne    c0008da5 <VAS::~VAS()+0x15f>
c0008da4:	fb                   	sti    
c0008da5:	90                   	nop
c0008da6:	83 c4 2c             	add    esp,0x2c
c0008da9:	c3                   	ret    

c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>:
c0008daa:	55                   	push   ebp
c0008dab:	57                   	push   edi
c0008dac:	56                   	push   esi
c0008dad:	53                   	push   ebx
c0008dae:	83 ec 1c             	sub    esp,0x1c
c0008db1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0008db5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008db9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0008dbf:	77 0b                	ja     c0008dcc <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0008dc1:	0f 20 d8             	mov    eax,cr3
c0008dc4:	0f 20 d8             	mov    eax,cr3
c0008dc7:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0008dca:	75 47                	jne    c0008e13 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0008dcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008dd0:	09 d8                	or     eax,ebx
c0008dd2:	a9 ff 0f 00 00       	test   eax,0xfff
c0008dd7:	75 57                	jne    c0008e30 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0008dd9:	89 de                	mov    esi,ebx
c0008ddb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008dde:	c1 ee 16             	shr    esi,0x16
c0008de1:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0008de8:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0008dec:	74 54                	je     c0008e42 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0008dee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008df2:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0008df8:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0008dfc:	c1 e6 0c             	shl    esi,0xc
c0008dff:	c1 eb 0a             	shr    ebx,0xa
c0008e02:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0008e08:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0008e0b:	83 c4 1c             	add    esp,0x1c
c0008e0e:	5b                   	pop    ebx
c0008e0f:	5e                   	pop    esi
c0008e10:	5f                   	pop    edi
c0008e11:	5d                   	pop    ebp
c0008e12:	c3                   	ret    
c0008e13:	83 ec 0c             	sub    esp,0xc
c0008e16:	68 d4 cf 01 c0       	push   0xc001cfd4
c0008e1b:	e8 b8 0b 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0008e20:	83 c4 10             	add    esp,0x10
c0008e23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e27:	09 d8                	or     eax,ebx
c0008e29:	a9 ff 0f 00 00       	test   eax,0xfff
c0008e2e:	74 a9                	je     c0008dd9 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008e30:	83 ec 0c             	sub    esp,0xc
c0008e33:	68 3c d0 01 c0       	push   0xc001d03c
c0008e38:	e8 ea 66 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0008e3d:	83 c4 10             	add    esp,0x10
c0008e40:	eb 97                	jmp    c0008dd9 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008e42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e46:	e8 97 e1 ff ff       	call   c0006fe2 <Phys::allocatePage()>
c0008e4b:	83 ec 0c             	sub    esp,0xc
c0008e4e:	89 c5                	mov    ebp,eax
c0008e50:	8b 0d 74 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f574
c0008e56:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008e5a:	6a 01                	push   0x1
c0008e5c:	e8 f0 f8 ff ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c0008e61:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008e68:	6a 01                	push   0x1
c0008e6a:	50                   	push   eax
c0008e6b:	55                   	push   ebp
c0008e6c:	81 cd 07 04 00 00    	or     ebp,0x407
c0008e72:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008e76:	51                   	push   ecx
c0008e77:	e8 28 02 00 00       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008e7c:	83 c4 1c             	add    esp,0x1c
c0008e7f:	68 00 10 00 00       	push   0x1000
c0008e84:	6a 00                	push   0x0
c0008e86:	50                   	push   eax
c0008e87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e8b:	e8 60 76 ff ff       	call   c00004f0 <memset>
c0008e90:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008e94:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008e97:	e8 a9 fb ff ff       	call   c0008a45 <Virt::freeKernelVirtualPages(unsigned long)>
c0008e9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ea0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008ea3:	83 c4 10             	add    esp,0x10
c0008ea6:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0008ea9:	e9 40 ff ff ff       	jmp    c0008dee <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0008eae <VAS::allocatePages(int, int)>:
c0008eae:	55                   	push   ebp
c0008eaf:	57                   	push   edi
c0008eb0:	56                   	push   esi
c0008eb1:	53                   	push   ebx
c0008eb2:	83 ec 1c             	sub    esp,0x1c
c0008eb5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008eb9:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0008ebe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ec4:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008eca:	83 e0 01             	and    eax,0x1
c0008ecd:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0008ed1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008ed5:	0f 85 cc 00 00 00    	jne    c0008fa7 <VAS::allocatePages(int, int)+0xf9>
c0008edb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008ede:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ee2:	85 c0                	test   eax,eax
c0008ee4:	0f 84 a1 00 00 00    	je     c0008f8b <VAS::allocatePages(int, int)+0xdd>
c0008eea:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008eee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ef2:	c1 e6 0c             	shl    esi,0xc
c0008ef5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0008ef9:	85 c0                	test   eax,eax
c0008efb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0008efe:	7e 33                	jle    c0008f33 <VAS::allocatePages(int, int)+0x85>
c0008f00:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008f04:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008f08:	81 cd 00 04 00 00    	or     ebp,0x400
c0008f0e:	e8 cf e0 ff ff       	call   c0006fe2 <Phys::allocatePage()>
c0008f13:	55                   	push   ebp
c0008f14:	53                   	push   ebx
c0008f15:	50                   	push   eax
c0008f16:	57                   	push   edi
c0008f17:	e8 8e fe ff ff       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c0008f1c:	83 c4 10             	add    esp,0x10
c0008f1f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f24:	74 03                	je     c0008f29 <VAS::allocatePages(int, int)+0x7b>
c0008f26:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f29:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f2f:	39 de                	cmp    esi,ebx
c0008f31:	75 db                	jne    c0008f0e <VAS::allocatePages(int, int)+0x60>
c0008f33:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f38:	75 12                	jne    c0008f4c <VAS::allocatePages(int, int)+0x9e>
c0008f3a:	0f 20 d8             	mov    eax,cr3
c0008f3d:	0f 22 d8             	mov    cr3,eax
c0008f40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f44:	83 c4 1c             	add    esp,0x1c
c0008f47:	5b                   	pop    ebx
c0008f48:	5e                   	pop    esi
c0008f49:	5f                   	pop    edi
c0008f4a:	5d                   	pop    ebp
c0008f4b:	c3                   	ret    
c0008f4c:	c1 ee 0a             	shr    esi,0xa
c0008f4f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008f53:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0008f59:	c1 eb 0a             	shr    ebx,0xa
c0008f5c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0008f62:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008f68:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008f6e:	39 c3                	cmp    ebx,eax
c0008f70:	77 ce                	ja     c0008f40 <VAS::allocatePages(int, int)+0x92>
c0008f72:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f75:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f7b:	39 d8                	cmp    eax,ebx
c0008f7d:	73 f3                	jae    c0008f72 <VAS::allocatePages(int, int)+0xc4>
c0008f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f83:	83 c4 1c             	add    esp,0x1c
c0008f86:	5b                   	pop    ebx
c0008f87:	5e                   	pop    esi
c0008f88:	5f                   	pop    edi
c0008f89:	5d                   	pop    ebp
c0008f8a:	c3                   	ret    
c0008f8b:	83 ec 0c             	sub    esp,0xc
c0008f8e:	68 60 d0 01 c0       	push   0xc001d060
c0008f93:	e8 8f 65 00 00       	call   c000f527 <Krnl::panic(char const*)>
c0008f98:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008f9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f9f:	83 c4 10             	add    esp,0x10
c0008fa2:	e9 43 ff ff ff       	jmp    c0008eea <VAS::allocatePages(int, int)+0x3c>
c0008fa7:	83 ec 0c             	sub    esp,0xc
c0008faa:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0008fae:	51                   	push   ecx
c0008faf:	e8 9d f7 ff ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c0008fb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0008fc0:	0f 87 9b 00 00 00    	ja     c0009061 <VAS::allocatePages(int, int)+0x1b3>
c0008fc6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008fca:	85 d2                	test   edx,edx
c0008fcc:	7e 3c                	jle    c000900a <VAS::allocatePages(int, int)+0x15c>
c0008fce:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008fd2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0008fd6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008fda:	c1 e5 0c             	shl    ebp,0xc
c0008fdd:	81 ce 00 04 00 00    	or     esi,0x400
c0008fe3:	01 dd                	add    ebp,ebx
c0008fe5:	e8 f8 df ff ff       	call   c0006fe2 <Phys::allocatePage()>
c0008fea:	56                   	push   esi
c0008feb:	53                   	push   ebx
c0008fec:	50                   	push   eax
c0008fed:	57                   	push   edi
c0008fee:	e8 b7 fd ff ff       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c0008ff3:	83 c4 10             	add    esp,0x10
c0008ff6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008ffb:	74 03                	je     c0009000 <VAS::allocatePages(int, int)+0x152>
c0008ffd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009000:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009006:	39 dd                	cmp    ebp,ebx
c0009008:	75 db                	jne    c0008fe5 <VAS::allocatePages(int, int)+0x137>
c000900a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000900f:	0f 84 25 ff ff ff    	je     c0008f3a <VAS::allocatePages(int, int)+0x8c>
c0009015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009019:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000901d:	89 d3                	mov    ebx,edx
c000901f:	c1 e0 0c             	shl    eax,0xc
c0009022:	c1 eb 0a             	shr    ebx,0xa
c0009025:	01 d0                	add    eax,edx
c0009027:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000902d:	c1 e8 0a             	shr    eax,0xa
c0009030:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009036:	25 00 f0 ff ff       	and    eax,0xfffff000
c000903b:	2d 00 00 40 00       	sub    eax,0x400000
c0009040:	39 c3                	cmp    ebx,eax
c0009042:	0f 87 f8 fe ff ff    	ja     c0008f40 <VAS::allocatePages(int, int)+0x92>
c0009048:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000904b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009051:	39 d8                	cmp    eax,ebx
c0009053:	73 f3                	jae    c0009048 <VAS::allocatePages(int, int)+0x19a>
c0009055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009059:	83 c4 1c             	add    esp,0x1c
c000905c:	5b                   	pop    ebx
c000905d:	5e                   	pop    esi
c000905e:	5f                   	pop    edi
c000905f:	5d                   	pop    ebp
c0009060:	c3                   	ret    
c0009061:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0009066:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000906c:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009073:	0f 84 4d ff ff ff    	je     c0008fc6 <VAS::allocatePages(int, int)+0x118>
c0009079:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009081:	e9 40 ff ff ff       	jmp    c0008fc6 <VAS::allocatePages(int, int)+0x118>

c0009086 <VAS::setCPUSpecific(unsigned long)>:
c0009086:	83 ec 0c             	sub    esp,0xc
c0009089:	6a 05                	push   0x5
c000908b:	68 00 00 40 c2       	push   0xc2400000
c0009090:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009094:	50                   	push   eax
c0009095:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009099:	52                   	push   edx
c000909a:	e8 0b fd ff ff       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c000909f:	83 c4 1c             	add    esp,0x1c
c00090a2:	c3                   	ret    
c00090a3:	90                   	nop

c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00090a4:	55                   	push   ebp
c00090a5:	57                   	push   edi
c00090a6:	56                   	push   esi
c00090a7:	53                   	push   ebx
c00090a8:	83 ec 1c             	sub    esp,0x1c
c00090ab:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c00090b0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00090b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090ba:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00090be:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c00090c4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00090c8:	83 e0 01             	and    eax,0x1
c00090cb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00090cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00090d3:	85 c0                	test   eax,eax
c00090d5:	7e 39                	jle    c0009110 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00090d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00090db:	89 f3                	mov    ebx,esi
c00090dd:	c1 e0 0c             	shl    eax,0xc
c00090e0:	01 f0                	add    eax,esi
c00090e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00090e6:	55                   	push   ebp
c00090e7:	53                   	push   ebx
c00090e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00090ec:	29 f0                	sub    eax,esi
c00090ee:	01 d8                	add    eax,ebx
c00090f0:	50                   	push   eax
c00090f1:	57                   	push   edi
c00090f2:	e8 b3 fc ff ff       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c00090f7:	83 c4 10             	add    esp,0x10
c00090fa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00090ff:	74 03                	je     c0009104 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009101:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009104:	81 c3 00 10 00 00    	add    ebx,0x1000
c000910a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000910e:	75 d6                	jne    c00090e6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009110:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009115:	75 10                	jne    c0009127 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009117:	0f 20 d8             	mov    eax,cr3
c000911a:	0f 22 d8             	mov    cr3,eax
c000911d:	83 c4 1c             	add    esp,0x1c
c0009120:	89 f0                	mov    eax,esi
c0009122:	5b                   	pop    ebx
c0009123:	5e                   	pop    esi
c0009124:	5f                   	pop    edi
c0009125:	5d                   	pop    ebp
c0009126:	c3                   	ret    
c0009127:	89 f3                	mov    ebx,esi
c0009129:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000912d:	c1 eb 0a             	shr    ebx,0xa
c0009130:	c1 e0 0c             	shl    eax,0xc
c0009133:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009139:	01 f0                	add    eax,esi
c000913b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009141:	c1 e8 0a             	shr    eax,0xa
c0009144:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009149:	2d 00 00 40 00       	sub    eax,0x400000
c000914e:	39 c3                	cmp    ebx,eax
c0009150:	77 cb                	ja     c000911d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009152:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009155:	81 c3 00 10 00 00    	add    ebx,0x1000
c000915b:	39 d8                	cmp    eax,ebx
c000915d:	73 f3                	jae    c0009152 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000915f:	83 c4 1c             	add    esp,0x1c
c0009162:	89 f0                	mov    eax,esi
c0009164:	5b                   	pop    ebx
c0009165:	5e                   	pop    esi
c0009166:	5f                   	pop    edi
c0009167:	5d                   	pop    ebp
c0009168:	c3                   	ret    
c0009169:	90                   	nop

c000916a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000916a:	55                   	push   ebp
c000916b:	57                   	push   edi
c000916c:	56                   	push   esi
c000916d:	53                   	push   ebx
c000916e:	83 ec 1c             	sub    esp,0x1c
c0009171:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009175:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009179:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000917d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009181:	a9 ff 0f 00 00       	test   eax,0xfff
c0009186:	75 4a                	jne    c00091d2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000918c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000918f:	c1 eb 16             	shr    ebx,0x16
c0009192:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009199:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000919d:	74 4d                	je     c00091ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000919f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00091a3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00091a7:	c1 e8 0a             	shr    eax,0xa
c00091aa:	80 fa 01             	cmp    dl,0x1
c00091ad:	19 d2                	sbb    edx,edx
c00091af:	c1 e3 0c             	shl    ebx,0xc
c00091b2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00091b6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00091bc:	25 fc 0f 00 00       	and    eax,0xffc
c00091c1:	01 d8                	add    eax,ebx
c00091c3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00091ca:	83 c4 1c             	add    esp,0x1c
c00091cd:	5b                   	pop    ebx
c00091ce:	5e                   	pop    esi
c00091cf:	5f                   	pop    edi
c00091d0:	5d                   	pop    ebp
c00091d1:	c3                   	ret    
c00091d2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00091d6:	83 ec 0c             	sub    esp,0xc
c00091d9:	68 8c d0 01 c0       	push   0xc001d08c
c00091de:	e8 44 63 00 00       	call   c000f527 <Krnl::panic(char const*)>
c00091e3:	83 c4 10             	add    esp,0x10
c00091e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00091ea:	eb 9c                	jmp    c0009188 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00091ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091f0:	e8 ed dd ff ff       	call   c0006fe2 <Phys::allocatePage()>
c00091f5:	83 ec 0c             	sub    esp,0xc
c00091f8:	89 c5                	mov    ebp,eax
c00091fa:	8b 0d 74 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f574
c0009200:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009204:	6a 01                	push   0x1
c0009206:	e8 46 f5 ff ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c000920b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009212:	6a 01                	push   0x1
c0009214:	50                   	push   eax
c0009215:	55                   	push   ebp
c0009216:	81 cd 07 04 00 00    	or     ebp,0x407
c000921c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009220:	51                   	push   ecx
c0009221:	e8 7e fe ff ff       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009226:	83 c4 1c             	add    esp,0x1c
c0009229:	68 00 10 00 00       	push   0x1000
c000922e:	6a 00                	push   0x0
c0009230:	50                   	push   eax
c0009231:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009235:	e8 b6 72 ff ff       	call   c00004f0 <memset>
c000923a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000923e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009241:	e8 ff f7 ff ff       	call   c0008a45 <Virt::freeKernelVirtualPages(unsigned long)>
c0009246:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009249:	83 c4 10             	add    esp,0x10
c000924c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000924f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009253:	e9 47 ff ff ff       	jmp    c000919f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009258 <VAS::VAS(bool)>:
c0009258:	53                   	push   ebx
c0009259:	83 ec 28             	sub    esp,0x28
c000925c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009260:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009264:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009268:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000926f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009273:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000927a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000927e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009282:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009285:	e8 58 dd ff ff       	call   c0006fe2 <Phys::allocatePage()>
c000928a:	89 c2                	mov    edx,eax
c000928c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009290:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009293:	8b 1d 74 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f574
c0009299:	83 ec 0c             	sub    esp,0xc
c000929c:	6a 01                	push   0x1
c000929e:	e8 ae f4 ff ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c00092a3:	83 c4 10             	add    esp,0x10
c00092a6:	89 c2                	mov    edx,eax
c00092a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00092af:	83 ec 0c             	sub    esp,0xc
c00092b2:	6a 03                	push   0x3
c00092b4:	6a 01                	push   0x1
c00092b6:	52                   	push   edx
c00092b7:	50                   	push   eax
c00092b8:	53                   	push   ebx
c00092b9:	e8 e6 fd ff ff       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00092be:	83 c4 20             	add    esp,0x20
c00092c1:	89 c2                	mov    edx,eax
c00092c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092c7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00092ca:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092d2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00092da:	7f 1c                	jg     c00092f8 <VAS::VAS(bool)+0xa0>
c00092dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00092e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00092e7:	c1 e2 02             	shl    edx,0x2
c00092ea:	01 d0                	add    eax,edx
c00092ec:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00092f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00092f6:	eb da                	jmp    c00092d2 <VAS::VAS(bool)+0x7a>
c00092f8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009300:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009308:	7f 7a                	jg     c0009384 <VAS::VAS(bool)+0x12c>
c000930a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000930e:	2d 00 02 00 00       	sub    eax,0x200
c0009313:	c1 e0 0c             	shl    eax,0xc
c0009316:	83 c8 03             	or     eax,0x3
c0009319:	89 c2                	mov    edx,eax
c000931b:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0009320:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009326:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000932c:	83 e0 10             	and    eax,0x10
c000932f:	84 c0                	test   al,al
c0009331:	74 07                	je     c000933a <VAS::VAS(bool)+0xe2>
c0009333:	b8 00 01 00 00       	mov    eax,0x100
c0009338:	eb 05                	jmp    c000933f <VAS::VAS(bool)+0xe7>
c000933a:	b8 00 00 00 00       	mov    eax,0x0
c000933f:	09 d0                	or     eax,edx
c0009341:	89 c1                	mov    ecx,eax
c0009343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009347:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000934a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000934e:	c1 e2 02             	shl    edx,0x2
c0009351:	01 d0                	add    eax,edx
c0009353:	89 ca                	mov    edx,ecx
c0009355:	89 10                	mov    DWORD PTR [eax],edx
c0009357:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000935b:	2d 40 03 00 00       	sub    eax,0x340
c0009360:	83 f8 7f             	cmp    eax,0x7f
c0009363:	77 16                	ja     c000937b <VAS::VAS(bool)+0x123>
c0009365:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009369:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000936c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009370:	c1 e2 02             	shl    edx,0x2
c0009373:	01 d0                	add    eax,edx
c0009375:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000937b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000937f:	e9 7c ff ff ff       	jmp    c0009300 <VAS::VAS(bool)+0xa8>
c0009384:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0009389:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000938f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009395:	83 e0 10             	and    eax,0x10
c0009398:	84 c0                	test   al,al
c000939a:	74 07                	je     c00093a3 <VAS::VAS(bool)+0x14b>
c000939c:	b8 03 41 00 00       	mov    eax,0x4103
c00093a1:	eb 05                	jmp    c00093a8 <VAS::VAS(bool)+0x150>
c00093a3:	b8 03 40 00 00       	mov    eax,0x4003
c00093a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00093ac:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00093af:	81 c2 20 0c 00 00    	add    edx,0xc20
c00093b5:	89 02                	mov    DWORD PTR [edx],eax
c00093b7:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c00093bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093c2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00093c8:	83 ec 08             	sub    esp,0x8
c00093cb:	50                   	push   eax
c00093cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00093d0:	e8 b1 fc ff ff       	call   c0009086 <VAS::setCPUSpecific(unsigned long)>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093dc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00093df:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c00093e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093ea:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00093f0:	83 e0 10             	and    eax,0x10
c00093f3:	84 c0                	test   al,al
c00093f5:	74 07                	je     c00093fe <VAS::VAS(bool)+0x1a6>
c00093f7:	b8 00 01 00 00       	mov    eax,0x100
c00093fc:	eb 05                	jmp    c0009403 <VAS::VAS(bool)+0x1ab>
c00093fe:	b8 00 00 00 00       	mov    eax,0x0
c0009403:	09 c2                	or     edx,eax
c0009405:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009409:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000940c:	05 fc 0f 00 00       	add    eax,0xffc
c0009411:	83 ca 03             	or     edx,0x3
c0009414:	89 10                	mov    DWORD PTR [eax],edx
c0009416:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000941b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009421:	83 ec 0c             	sub    esp,0xc
c0009424:	50                   	push   eax
c0009425:	e8 82 1c 00 00       	call   c000b0ac <Device::getName()>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	83 ec 08             	sub    esp,0x8
c0009430:	68 2f d1 01 c0       	push   0xc001d12f
c0009435:	50                   	push   eax
c0009436:	e8 c5 72 ff ff       	call   c0000700 <strcmp>
c000943b:	83 c4 10             	add    esp,0x10
c000943e:	85 c0                	test   eax,eax
c0009440:	0f 94 c0             	sete   al
c0009443:	84 c0                	test   al,al
c0009445:	0f 84 87 00 00 00    	je     c00094d2 <VAS::VAS(bool)+0x27a>
c000944b:	fa                   	cli    
c000944c:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0009451:	40                   	inc    eax
c0009452:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0009457:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000945c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009462:	05 7c 09 00 00       	add    eax,0x97c
c0009467:	83 ec 0c             	sub    esp,0xc
c000946a:	50                   	push   eax
c000946b:	e8 a2 d2 ff ff       	call   c0006712 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009470:	83 c4 10             	add    esp,0x10
c0009473:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009478:	89 c3                	mov    ebx,eax
c000947a:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000947f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009485:	05 7c 09 00 00       	add    eax,0x97c
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	50                   	push   eax
c000948e:	e8 7f d2 ff ff       	call   c0006712 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	83 ec 08             	sub    esp,0x8
c0009499:	50                   	push   eax
c000949a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000949e:	e8 83 f5 ff ff       	call   c0008a26 <VAS::getPageTableEntry(unsigned long)>
c00094a3:	83 c4 10             	add    esp,0x10
c00094a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00094a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00094ad:	6a 11                	push   0x11
c00094af:	53                   	push   ebx
c00094b0:	50                   	push   eax
c00094b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00094b5:	e8 f0 f8 ff ff       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c00094ba:	83 c4 10             	add    esp,0x10
c00094bd:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00094c2:	48                   	dec    eax
c00094c3:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c00094c8:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00094cd:	85 c0                	test   eax,eax
c00094cf:	75 01                	jne    c00094d2 <VAS::VAS(bool)+0x27a>
c00094d1:	fb                   	sti    
c00094d2:	90                   	nop
c00094d3:	83 c4 28             	add    esp,0x28
c00094d6:	5b                   	pop    ebx
c00094d7:	c3                   	ret    

c00094d8 <VAS::VAS()>:
c00094d8:	53                   	push   ebx
c00094d9:	83 ec 18             	sub    esp,0x18
c00094dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00094e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00094f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094f6:	a3 74 f5 01 c0       	mov    ds:0xc001f574,eax
c00094fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094ff:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009503:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009507:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000950a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000950e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009515:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000951d:	83 ec 0c             	sub    esp,0xc
c0009520:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009524:	e8 ec d6 ff ff       	call   c0006c15 <malloc>
c0009529:	83 c4 10             	add    esp,0x10
c000952c:	89 c3                	mov    ebx,eax
c000952e:	83 ec 08             	sub    esp,0x8
c0009531:	6a 01                	push   0x1
c0009533:	53                   	push   ebx
c0009534:	e8 1f fd ff ff       	call   c0009258 <VAS::VAS(bool)>
c0009539:	83 c4 10             	add    esp,0x10
c000953c:	89 1d 6c f5 01 c0    	mov    DWORD PTR ds:0xc001f56c,ebx
c0009542:	90                   	nop
c0009543:	83 c4 18             	add    esp,0x18
c0009546:	5b                   	pop    ebx
c0009547:	c3                   	ret    

c0009548 <VAS::evict(unsigned long)>:
c0009548:	55                   	push   ebp
c0009549:	57                   	push   edi
c000954a:	56                   	push   esi
c000954b:	53                   	push   ebx
c000954c:	83 ec 1c             	sub    esp,0x1c
c000954f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009553:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009557:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000955b:	e8 32 f3 ff ff       	call   c0008892 <Virt::allocateSwapfilePage()>
c0009560:	8b 0d 2c ee 01 c0    	mov    ecx,DWORD PTR ds:0xc001ee2c
c0009566:	89 c7                	mov    edi,eax
c0009568:	85 c9                	test   ecx,ecx
c000956a:	7e 3e                	jle    c00095aa <VAS::evict(unsigned long)+0x62>
c000956c:	89 ee                	mov    esi,ebp
c000956e:	31 db                	xor    ebx,ebx
c0009570:	83 ec 0c             	sub    esp,0xc
c0009573:	57                   	push   edi
c0009574:	e8 07 f3 ff ff       	call   c0008880 <Virt::swapIDToSector(unsigned long)>
c0009579:	89 34 24             	mov    DWORD PTR [esp],esi
c000957c:	01 d8                	add    eax,ebx
c000957e:	6a 01                	push   0x1
c0009580:	31 d2                	xor    edx,edx
c0009582:	43                   	inc    ebx
c0009583:	52                   	push   edx
c0009584:	81 c6 00 02 00 00    	add    esi,0x200
c000958a:	50                   	push   eax
c000958b:	0f be 05 38 ee 01 c0 	movsx  eax,BYTE PTR ds:0xc001ee38
c0009592:	8b 14 85 fc 18 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde704]
c0009599:	52                   	push   edx
c000959a:	e8 8d 2b 00 00       	call   c000c12c <LogicalDisk::write(unsigned long long, int, void*)>
c000959f:	83 c4 20             	add    esp,0x20
c00095a2:	39 1d 2c ee 01 c0    	cmp    DWORD PTR ds:0xc001ee2c,ebx
c00095a8:	7f c6                	jg     c0009570 <VAS::evict(unsigned long)+0x28>
c00095aa:	83 ec 08             	sub    esp,0x8
c00095ad:	c1 e7 0b             	shl    edi,0xb
c00095b0:	55                   	push   ebp
c00095b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00095b5:	50                   	push   eax
c00095b6:	e8 6b f4 ff ff       	call   c0008a26 <VAS::getPageTableEntry(unsigned long)>
c00095bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00095bd:	89 d1                	mov    ecx,edx
c00095bf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00095c5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00095cb:	09 cf                	or     edi,ecx
c00095cd:	89 38                	mov    DWORD PTR [eax],edi
c00095cf:	89 14 24             	mov    DWORD PTR [esp],edx
c00095d2:	ff 05 68 f5 01 c0    	inc    DWORD PTR ds:0xc001f568
c00095d8:	e8 a3 d9 ff ff       	call   c0006f80 <Phys::freePage(unsigned long)>
c00095dd:	0f 20 d8             	mov    eax,cr3
c00095e0:	0f 22 d8             	mov    cr3,eax
c00095e3:	a1 64 f5 01 c0       	mov    eax,ds:0xc001f564
c00095e8:	c7 44 24 40 3d d1 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d13d
c00095f0:	8d 50 01             	lea    edx,[eax+0x1]
c00095f3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00095f7:	89 15 64 f5 01 c0    	mov    DWORD PTR ds:0xc001f564,edx
c00095fd:	83 c4 2c             	add    esp,0x2c
c0009600:	5b                   	pop    ebx
c0009601:	5e                   	pop    esi
c0009602:	5f                   	pop    edi
c0009603:	5d                   	pop    ebp
c0009604:	e9 cf 03 00 00       	jmp    c00099d8 <Dbg::kprintf(char const*, ...)>
c0009609:	90                   	nop

c000960a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000960a:	55                   	push   ebp
c000960b:	57                   	push   edi
c000960c:	56                   	push   esi
c000960d:	53                   	push   ebx
c000960e:	83 ec 14             	sub    esp,0x14
c0009611:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009615:	53                   	push   ebx
c0009616:	68 4e d1 01 c0       	push   0xc001d14e
c000961b:	e8 b8 03 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0009620:	83 c4 10             	add    esp,0x10
c0009623:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009629:	74 21                	je     c000964c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000962b:	83 ec 08             	sub    esp,0x8
c000962e:	53                   	push   ebx
c000962f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0009633:	57                   	push   edi
c0009634:	e8 ed f3 ff ff       	call   c0008a26 <VAS::getPageTableEntry(unsigned long)>
c0009639:	83 c4 10             	add    esp,0x10
c000963c:	89 c6                	mov    esi,eax
c000963e:	85 c0                	test   eax,eax
c0009640:	74 0a                	je     c000964c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0009642:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009644:	f7 c5 01 00 00 00    	test   ebp,0x1
c000964a:	74 0a                	je     c0009656 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000964c:	31 c0                	xor    eax,eax
c000964e:	83 c4 0c             	add    esp,0xc
c0009651:	5b                   	pop    ebx
c0009652:	5e                   	pop    esi
c0009653:	5f                   	pop    edi
c0009654:	5d                   	pop    ebp
c0009655:	c3                   	ret    
c0009656:	e8 87 d9 ff ff       	call   c0006fe2 <Phys::allocatePage()>
c000965b:	c1 ed 0b             	shr    ebp,0xb
c000965e:	8b 16                	mov    edx,DWORD PTR [esi]
c0009660:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0009666:	09 c2                	or     edx,eax
c0009668:	81 ca 01 08 00 00    	or     edx,0x801
c000966e:	89 16                	mov    DWORD PTR [esi],edx
c0009670:	8b 35 2c ee 01 c0    	mov    esi,DWORD PTR ds:0xc001ee2c
c0009676:	85 f6                	test   esi,esi
c0009678:	7e 3e                	jle    c00096b8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000967a:	89 df                	mov    edi,ebx
c000967c:	31 f6                	xor    esi,esi
c000967e:	83 ec 0c             	sub    esp,0xc
c0009681:	55                   	push   ebp
c0009682:	e8 f9 f1 ff ff       	call   c0008880 <Virt::swapIDToSector(unsigned long)>
c0009687:	89 3c 24             	mov    DWORD PTR [esp],edi
c000968a:	01 f0                	add    eax,esi
c000968c:	6a 01                	push   0x1
c000968e:	31 d2                	xor    edx,edx
c0009690:	46                   	inc    esi
c0009691:	52                   	push   edx
c0009692:	81 c7 00 02 00 00    	add    edi,0x200
c0009698:	50                   	push   eax
c0009699:	0f be 05 38 ee 01 c0 	movsx  eax,BYTE PTR ds:0xc001ee38
c00096a0:	8b 0c 85 fc 18 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde704]
c00096a7:	51                   	push   ecx
c00096a8:	e8 13 2a 00 00       	call   c000c0c0 <LogicalDisk::read(unsigned long long, int, void*)>
c00096ad:	83 c4 20             	add    esp,0x20
c00096b0:	39 35 2c ee 01 c0    	cmp    DWORD PTR ds:0xc001ee2c,esi
c00096b6:	7f c6                	jg     c000967e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c00096b8:	a1 68 f5 01 c0       	mov    eax,ds:0xc001f568
c00096bd:	48                   	dec    eax
c00096be:	52                   	push   edx
c00096bf:	a3 68 f5 01 c0       	mov    ds:0xc001f568,eax
c00096c4:	50                   	push   eax
c00096c5:	53                   	push   ebx
c00096c6:	68 61 d1 01 c0       	push   0xc001d161
c00096cb:	e8 08 03 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00096d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096d3:	e8 8a f1 ff ff       	call   c0008862 <Virt::freeSwapfilePage(unsigned long)>
c00096d8:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00096dd:	83 c4 10             	add    esp,0x10
c00096e0:	48                   	dec    eax
c00096e1:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c00096e6:	85 c0                	test   eax,eax
c00096e8:	75 01                	jne    c00096eb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c00096ea:	fb                   	sti    
c00096eb:	0f 20 d8             	mov    eax,cr3
c00096ee:	0f 22 d8             	mov    cr3,eax
c00096f1:	b0 01                	mov    al,0x1
c00096f3:	e9 56 ff ff ff       	jmp    c000964e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c00096f8 <VAS::scanForEviction()>:
c00096f8:	57                   	push   edi
c00096f9:	31 ff                	xor    edi,edi
c00096fb:	56                   	push   esi
c00096fc:	53                   	push   ebx
c00096fd:	83 ec 10             	sub    esp,0x10
c0009700:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009704:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0009707:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000970d:	75 0e                	jne    c000971d <VAS::scanForEviction()+0x25>
c000970f:	89 da                	mov    edx,ebx
c0009711:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009714:	c1 ea 16             	shr    edx,0x16
c0009717:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000971b:	74 4e                	je     c000976b <VAS::scanForEviction()+0x73>
c000971d:	53                   	push   ebx
c000971e:	56                   	push   esi
c000971f:	e8 02 f3 ff ff       	call   c0008a26 <VAS::getPageTableEntry(unsigned long)>
c0009724:	5a                   	pop    edx
c0009725:	8b 10                	mov    edx,DWORD PTR [eax]
c0009727:	59                   	pop    ecx
c0009728:	89 d1                	mov    ecx,edx
c000972a:	81 e1 01 08 00 00    	and    ecx,0x801
c0009730:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0009736:	74 3e                	je     c0009776 <VAS::scanForEviction()+0x7e>
c0009738:	81 c3 00 10 00 00    	add    ebx,0x1000
c000973e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0009744:	76 2b                	jbe    c0009771 <VAS::scanForEviction()+0x79>
c0009746:	47                   	inc    edi
c0009747:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000974e:	83 ff 03             	cmp    edi,0x3
c0009751:	74 32                	je     c0009785 <VAS::scanForEviction()+0x8d>
c0009753:	31 db                	xor    ebx,ebx
c0009755:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000975b:	75 c0                	jne    c000971d <VAS::scanForEviction()+0x25>
c000975d:	89 da                	mov    edx,ebx
c000975f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009762:	c1 ea 16             	shr    edx,0x16
c0009765:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009769:	75 b2                	jne    c000971d <VAS::scanForEviction()+0x25>
c000976b:	81 c3 00 00 40 00    	add    ebx,0x400000
c0009771:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0009774:	eb 91                	jmp    c0009707 <VAS::scanForEviction()+0xf>
c0009776:	f6 c2 20             	test   dl,0x20
c0009779:	74 13                	je     c000978e <VAS::scanForEviction()+0x96>
c000977b:	83 e2 df             	and    edx,0xffffffdf
c000977e:	89 10                	mov    DWORD PTR [eax],edx
c0009780:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0009783:	eb b3                	jmp    c0009738 <VAS::scanForEviction()+0x40>
c0009785:	83 c4 10             	add    esp,0x10
c0009788:	31 c0                	xor    eax,eax
c000978a:	5b                   	pop    ebx
c000978b:	5e                   	pop    esi
c000978c:	5f                   	pop    edi
c000978d:	c3                   	ret    
c000978e:	83 ec 08             	sub    esp,0x8
c0009791:	89 d0                	mov    eax,edx
c0009793:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009798:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000979c:	53                   	push   ebx
c000979d:	68 76 d1 01 c0       	push   0xc001d176
c00097a2:	e8 31 02 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00097a7:	58                   	pop    eax
c00097a8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c00097ab:	5a                   	pop    edx
c00097ac:	51                   	push   ecx
c00097ad:	56                   	push   esi
c00097ae:	e8 95 fd ff ff       	call   c0009548 <VAS::evict(unsigned long)>
c00097b3:	5b                   	pop    ebx
c00097b4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00097b7:	5f                   	pop    edi
c00097b8:	50                   	push   eax
c00097b9:	68 8a d1 01 c0       	push   0xc001d18a
c00097be:	e8 15 02 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00097c3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00097ca:	83 c4 10             	add    esp,0x10
c00097cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097d1:	83 c4 10             	add    esp,0x10
c00097d4:	5b                   	pop    ebx
c00097d5:	5e                   	pop    esi
c00097d6:	5f                   	pop    edi
c00097d7:	c3                   	ret    

c00097d8 <mapVASFirstTime>:
c00097d8:	55                   	push   ebp
c00097d9:	57                   	push   edi
c00097da:	56                   	push   esi
c00097db:	53                   	push   ebx
c00097dc:	83 ec 0c             	sub    esp,0xc
c00097df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00097e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00097e7:	4a                   	dec    edx
c00097e8:	0f 84 8c 00 00 00    	je     c000987a <mapVASFirstTime+0xa2>
c00097ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00097f1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00097f4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00097f9:	c1 e5 15             	shl    ebp,0x15
c00097fc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0009801:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0009807:	29 eb                	sub    ebx,ebp
c0009809:	29 ef                	sub    edi,ebp
c000980b:	e8 d2 d7 ff ff       	call   c0006fe2 <Phys::allocatePage()>
c0009810:	83 ec 0c             	sub    esp,0xc
c0009813:	68 03 04 00 00       	push   0x403
c0009818:	6a 01                	push   0x1
c000981a:	53                   	push   ebx
c000981b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0009821:	50                   	push   eax
c0009822:	56                   	push   esi
c0009823:	e8 7c f8 ff ff       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009828:	83 c4 20             	add    esp,0x20
c000982b:	39 fb                	cmp    ebx,edi
c000982d:	75 dc                	jne    c000980b <mapVASFirstTime+0x33>
c000982f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0009834:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0009839:	29 eb                	sub    ebx,ebp
c000983b:	29 ef                	sub    edi,ebp
c000983d:	e8 a0 d7 ff ff       	call   c0006fe2 <Phys::allocatePage()>
c0009842:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0009846:	19 d2                	sbb    edx,edx
c0009848:	83 ec 0c             	sub    esp,0xc
c000984b:	83 e2 04             	and    edx,0x4
c000984e:	81 c2 03 04 00 00    	add    edx,0x403
c0009854:	52                   	push   edx
c0009855:	6a 01                	push   0x1
c0009857:	53                   	push   ebx
c0009858:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000985e:	50                   	push   eax
c000985f:	56                   	push   esi
c0009860:	e8 3f f8 ff ff       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009865:	83 c4 20             	add    esp,0x20
c0009868:	39 df                	cmp    edi,ebx
c000986a:	75 d1                	jne    c000983d <mapVASFirstTime+0x65>
c000986c:	0f 20 d8             	mov    eax,cr3
c000986f:	0f 22 d8             	mov    cr3,eax
c0009872:	83 c4 0c             	add    esp,0xc
c0009875:	5b                   	pop    ebx
c0009876:	5e                   	pop    esi
c0009877:	5f                   	pop    edi
c0009878:	5d                   	pop    ebp
c0009879:	c3                   	ret    
c000987a:	83 ec 0c             	sub    esp,0xc
c000987d:	68 9d d1 01 c0       	push   0xc001d19d
c0009882:	e8 51 01 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0009887:	83 c4 10             	add    esp,0x10
c000988a:	83 c4 0c             	add    esp,0xc
c000988d:	5b                   	pop    ebx
c000988e:	5e                   	pop    esi
c000988f:	5f                   	pop    edi
c0009890:	5d                   	pop    ebp
c0009891:	c3                   	ret    

c0009892 <__cxa_atexit>:
c0009892:	31 c0                	xor    eax,eax
c0009894:	c3                   	ret    

c0009895 <__cxa_finalize>:
c0009895:	c3                   	ret    

c0009896 <__stack_chk_fail>:
c0009896:	55                   	push   ebp
c0009897:	89 e5                	mov    ebp,esp
c0009899:	83 ec 10             	sub    esp,0x10
c000989c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000989f:	68 b6 d1 01 c0       	push   0xc001d1b6
c00098a4:	e8 2f 01 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00098a9:	58                   	pop    eax
c00098aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00098ad:	5a                   	pop    edx
c00098ae:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00098b1:	68 b6 d1 01 c0       	push   0xc001d1b6
c00098b6:	e8 1d 01 00 00       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00098bb:	c7 04 24 be d1 01 c0 	mov    DWORD PTR [esp],0xc001d1be
c00098c2:	e8 60 5c 00 00       	call   c000f527 <Krnl::panic(char const*)>
c00098c7:	83 c4 10             	add    esp,0x10
c00098ca:	c9                   	leave  
c00098cb:	c3                   	ret    

c00098cc <__cxa_pure_virtual>:
c00098cc:	83 ec 18             	sub    esp,0x18
c00098cf:	68 d6 d1 01 c0       	push   0xc001d1d6
c00098d4:	e8 4e 5c 00 00       	call   c000f527 <Krnl::panic(char const*)>
c00098d9:	83 c4 1c             	add    esp,0x1c
c00098dc:	c3                   	ret    

c00098dd <operator new[](unsigned long)>:
c00098dd:	e9 33 d3 ff ff       	jmp    c0006c15 <malloc>

c00098e2 <operator delete(void*, unsigned long)>:
c00098e2:	e9 4e d3 ff ff       	jmp    c0006c35 <rfree>

c00098e7 <operator delete[](void*)>:
c00098e7:	e9 49 d3 ff ff       	jmp    c0006c35 <rfree>

c00098ec <operator delete[](void*, unsigned long)>:
c00098ec:	e9 44 d3 ff ff       	jmp    c0006c35 <rfree>

c00098f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00098f1:	55                   	push   ebp
c00098f2:	b9 04 00 00 00       	mov    ecx,0x4
c00098f7:	57                   	push   edi
c00098f8:	56                   	push   esi
c00098f9:	be eb cd 01 c0       	mov    esi,0xc001cdeb
c00098fe:	53                   	push   ebx
c00098ff:	83 ec 20             	sub    esp,0x20
c0009902:	a1 ea cd 01 c0       	mov    eax,ds:0xc001cdea
c0009907:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000990b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000990f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009913:	a1 f7 cd 01 c0       	mov    eax,ds:0xc001cdf7
c0009918:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000991c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009920:	fc                   	cld    
c0009921:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009923:	89 ee                	mov    esi,ebp
c0009925:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009929:	eb 02                	jmp    c000992d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000992b:	89 c6                	mov    esi,eax
c000992d:	31 d2                	xor    edx,edx
c000992f:	41                   	inc    ecx
c0009930:	89 f0                	mov    eax,esi
c0009932:	f7 f3                	div    ebx
c0009934:	39 de                	cmp    esi,ebx
c0009936:	73 f3                	jae    c000992b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0009938:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000993b:	eb 02                	jmp    c000993f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000993d:	89 c5                	mov    ebp,eax
c000993f:	31 d2                	xor    edx,edx
c0009941:	49                   	dec    ecx
c0009942:	89 e8                	mov    eax,ebp
c0009944:	f7 f3                	div    ebx
c0009946:	39 dd                	cmp    ebp,ebx
c0009948:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000994c:	88 11                	mov    BYTE PTR [ecx],dl
c000994e:	73 ed                	jae    c000993d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c0009950:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009954:	83 c4 20             	add    esp,0x20
c0009957:	5b                   	pop    ebx
c0009958:	5e                   	pop    esi
c0009959:	5f                   	pop    edi
c000995a:	5d                   	pop    ebp
c000995b:	c3                   	ret    

c000995c <Dbg::logc(char)>:
c000995c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009960:	f6 05 a0 f4 01 c0 10 	test   BYTE PTR ds:0xc001f4a0,0x10
c0009967:	75 12                	jne    c000997b <Dbg::logc(char)+0x1f>
c0009969:	ba fd 03 00 00       	mov    edx,0x3fd
c000996e:	ec                   	in     al,dx
c000996f:	a8 20                	test   al,0x20
c0009971:	74 fb                	je     c000996e <Dbg::logc(char)+0x12>
c0009973:	ba f8 03 00 00       	mov    edx,0x3f8
c0009978:	88 c8                	mov    al,cl
c000997a:	ee                   	out    dx,al
c000997b:	c3                   	ret    

c000997c <Dbg::logs(char*)>:
c000997c:	53                   	push   ebx
c000997d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009981:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009984:	84 c0                	test   al,al
c0009986:	74 0f                	je     c0009997 <Dbg::logs(char*)+0x1b>
c0009988:	50                   	push   eax
c0009989:	43                   	inc    ebx
c000998a:	e8 cd ff ff ff       	call   c000995c <Dbg::logc(char)>
c000998f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009992:	5a                   	pop    edx
c0009993:	84 c0                	test   al,al
c0009995:	75 f1                	jne    c0009988 <Dbg::logs(char*)+0xc>
c0009997:	5b                   	pop    ebx
c0009998:	c3                   	ret    

c0009999 <Dbg::logWriteInt(unsigned int)>:
c0009999:	83 ec 10             	sub    esp,0x10
c000999c:	6a 0a                	push   0xa
c000999e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00099a2:	50                   	push   eax
c00099a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099a7:	50                   	push   eax
c00099a8:	e8 44 ff ff ff       	call   c00098f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00099ad:	50                   	push   eax
c00099ae:	e8 c9 ff ff ff       	call   c000997c <Dbg::logs(char*)>
c00099b3:	83 c4 20             	add    esp,0x20
c00099b6:	c3                   	ret    

c00099b7 <Dbg::logWriteIntBase(unsigned int, int)>:
c00099b7:	83 ec 10             	sub    esp,0x10
c00099ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099be:	50                   	push   eax
c00099bf:	8d 44 24 08          	lea    eax,[esp+0x8]
c00099c3:	50                   	push   eax
c00099c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099c8:	52                   	push   edx
c00099c9:	e8 23 ff ff ff       	call   c00098f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00099ce:	50                   	push   eax
c00099cf:	e8 a8 ff ff ff       	call   c000997c <Dbg::logs(char*)>
c00099d4:	83 c4 20             	add    esp,0x20
c00099d7:	c3                   	ret    

c00099d8 <Dbg::kprintf(char const*, ...)>:
c00099d8:	55                   	push   ebp
c00099d9:	57                   	push   edi
c00099da:	56                   	push   esi
c00099db:	53                   	push   ebx
c00099dc:	83 ec 0c             	sub    esp,0xc
c00099df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099e3:	f6 05 a0 f4 01 c0 10 	test   BYTE PTR ds:0xc001f4a0,0x10
c00099ea:	74 08                	je     c00099f4 <Dbg::kprintf(char const*, ...)+0x1c>
c00099ec:	83 c4 0c             	add    esp,0xc
c00099ef:	5b                   	pop    ebx
c00099f0:	5e                   	pop    esi
c00099f1:	5f                   	pop    edi
c00099f2:	5d                   	pop    ebp
c00099f3:	c3                   	ret    
c00099f4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00099f8:	31 ff                	xor    edi,edi
c00099fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099fe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009a01:	84 c0                	test   al,al
c0009a03:	74 e7                	je     c00099ec <Dbg::kprintf(char const*, ...)+0x14>
c0009a05:	8d 77 01             	lea    esi,[edi+0x1]
c0009a08:	3c 25                	cmp    al,0x25
c0009a0a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0009a0d:	75 47                	jne    c0009a56 <Dbg::kprintf(char const*, ...)+0x7e>
c0009a0f:	83 c7 02             	add    edi,0x2
c0009a12:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009a15:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0009a18:	83 e8 25             	sub    eax,0x25
c0009a1b:	3c 53                	cmp    al,0x53
c0009a1d:	0f 87 d2 00 00 00    	ja     c0009af5 <Dbg::kprintf(char const*, ...)+0x11d>
c0009a23:	25 ff 00 00 00       	and    eax,0xff
c0009a28:	ff 24 85 ec d1 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2e14]
c0009a2f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009a33:	89 c8                	mov    eax,ecx
c0009a35:	83 c1 04             	add    ecx,0x4
c0009a38:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009a3c:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009a3e:	55                   	push   ebp
c0009a3f:	e8 55 ff ff ff       	call   c0009999 <Dbg::logWriteInt(unsigned int)>
c0009a44:	58                   	pop    eax
c0009a45:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0009a48:	84 c0                	test   al,al
c0009a4a:	74 a0                	je     c00099ec <Dbg::kprintf(char const*, ...)+0x14>
c0009a4c:	8d 77 01             	lea    esi,[edi+0x1]
c0009a4f:	3c 25                	cmp    al,0x25
c0009a51:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0009a54:	74 b9                	je     c0009a0f <Dbg::kprintf(char const*, ...)+0x37>
c0009a56:	50                   	push   eax
c0009a57:	89 f7                	mov    edi,esi
c0009a59:	e8 fe fe ff ff       	call   c000995c <Dbg::logc(char)>
c0009a5e:	89 ee                	mov    esi,ebp
c0009a60:	58                   	pop    eax
c0009a61:	eb e2                	jmp    c0009a45 <Dbg::kprintf(char const*, ...)+0x6d>
c0009a63:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009a67:	89 c8                	mov    eax,ecx
c0009a69:	83 c1 04             	add    ecx,0x4
c0009a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a6e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009a72:	50                   	push   eax
c0009a73:	e8 04 ff ff ff       	call   c000997c <Dbg::logs(char*)>
c0009a78:	58                   	pop    eax
c0009a79:	eb ca                	jmp    c0009a45 <Dbg::kprintf(char const*, ...)+0x6d>
c0009a7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009a7f:	89 d0                	mov    eax,edx
c0009a81:	83 c2 04             	add    edx,0x4
c0009a84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a8a:	50                   	push   eax
c0009a8b:	e8 09 ff ff ff       	call   c0009999 <Dbg::logWriteInt(unsigned int)>
c0009a90:	58                   	pop    eax
c0009a91:	eb b2                	jmp    c0009a45 <Dbg::kprintf(char const*, ...)+0x6d>
c0009a93:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009a97:	89 d0                	mov    eax,edx
c0009a99:	83 c2 04             	add    edx,0x4
c0009a9c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0009a9f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009aa3:	50                   	push   eax
c0009aa4:	e8 b3 fe ff ff       	call   c000995c <Dbg::logc(char)>
c0009aa9:	58                   	pop    eax
c0009aaa:	eb 99                	jmp    c0009a45 <Dbg::kprintf(char const*, ...)+0x6d>
c0009aac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009ab0:	89 c8                	mov    eax,ecx
c0009ab2:	83 c1 04             	add    ecx,0x4
c0009ab5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009ab9:	6a 10                	push   0x10
c0009abb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009abd:	51                   	push   ecx
c0009abe:	e8 f4 fe ff ff       	call   c00099b7 <Dbg::logWriteIntBase(unsigned int, int)>
c0009ac3:	5d                   	pop    ebp
c0009ac4:	58                   	pop    eax
c0009ac5:	e9 7b ff ff ff       	jmp    c0009a45 <Dbg::kprintf(char const*, ...)+0x6d>
c0009aca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009ace:	89 d0                	mov    eax,edx
c0009ad0:	83 c2 08             	add    edx,0x8
c0009ad3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009ad7:	6a 10                	push   0x10
c0009ad9:	8b 00                	mov    eax,DWORD PTR [eax]
c0009adb:	50                   	push   eax
c0009adc:	e8 d6 fe ff ff       	call   c00099b7 <Dbg::logWriteIntBase(unsigned int, int)>
c0009ae1:	58                   	pop    eax
c0009ae2:	5a                   	pop    edx
c0009ae3:	e9 5d ff ff ff       	jmp    c0009a45 <Dbg::kprintf(char const*, ...)+0x6d>
c0009ae8:	6a 25                	push   0x25
c0009aea:	e8 6d fe ff ff       	call   c000995c <Dbg::logc(char)>
c0009aef:	5a                   	pop    edx
c0009af0:	e9 50 ff ff ff       	jmp    c0009a45 <Dbg::kprintf(char const*, ...)+0x6d>
c0009af5:	6a 25                	push   0x25
c0009af7:	e8 60 fe ff ff       	call   c000995c <Dbg::logc(char)>
c0009afc:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0009b00:	50                   	push   eax
c0009b01:	e8 56 fe ff ff       	call   c000995c <Dbg::logc(char)>
c0009b06:	5a                   	pop    edx
c0009b07:	59                   	pop    ecx
c0009b08:	e9 38 ff ff ff       	jmp    c0009a45 <Dbg::kprintf(char const*, ...)+0x6d>
c0009b0d:	90                   	nop

c0009b0e <File::read(unsigned long long, void*, int*)>:
c0009b0e:	53                   	push   ebx
c0009b0f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b13:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b17:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009b1e:	3c 19                	cmp    al,0x19
c0009b20:	77 35                	ja     c0009b57 <File::read(unsigned long long, void*, int*)+0x49>
c0009b22:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c0009b29:	85 c0                	test   eax,eax
c0009b2b:	74 2a                	je     c0009b57 <File::read(unsigned long long, void*, int*)+0x49>
c0009b2d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009b33:	85 c0                	test   eax,eax
c0009b35:	74 20                	je     c0009b57 <File::read(unsigned long long, void*, int*)+0x49>
c0009b37:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009b3b:	74 21                	je     c0009b5e <File::read(unsigned long long, void*, int*)+0x50>
c0009b3d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b3f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009b43:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009b49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b51:	5b                   	pop    ebx
c0009b52:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0009b55:	ff e0                	jmp    eax
c0009b57:	b8 0b 00 00 00       	mov    eax,0xb
c0009b5c:	eb 05                	jmp    c0009b63 <File::read(unsigned long long, void*, int*)+0x55>
c0009b5e:	b8 05 00 00 00       	mov    eax,0x5
c0009b63:	5b                   	pop    ebx
c0009b64:	c3                   	ret    
c0009b65:	90                   	nop

c0009b66 <File::write(unsigned long long, void*, int*)>:
c0009b66:	53                   	push   ebx
c0009b67:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b6b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b6f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009b76:	3c 19                	cmp    al,0x19
c0009b78:	77 35                	ja     c0009baf <File::write(unsigned long long, void*, int*)+0x49>
c0009b7a:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c0009b81:	85 c0                	test   eax,eax
c0009b83:	74 2a                	je     c0009baf <File::write(unsigned long long, void*, int*)+0x49>
c0009b85:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009b8b:	85 c0                	test   eax,eax
c0009b8d:	74 20                	je     c0009baf <File::write(unsigned long long, void*, int*)+0x49>
c0009b8f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009b93:	74 21                	je     c0009bb6 <File::write(unsigned long long, void*, int*)+0x50>
c0009b95:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b97:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009b9b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009ba1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ba5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ba9:	5b                   	pop    ebx
c0009baa:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0009bad:	ff e0                	jmp    eax
c0009baf:	b8 0b 00 00 00       	mov    eax,0xb
c0009bb4:	eb 05                	jmp    c0009bbb <File::write(unsigned long long, void*, int*)+0x55>
c0009bb6:	b8 05 00 00 00       	mov    eax,0x5
c0009bbb:	5b                   	pop    ebx
c0009bbc:	c3                   	ret    
c0009bbd:	90                   	nop

c0009bbe <Directory::read(unsigned long long, void*, int*)>:
c0009bbe:	53                   	push   ebx
c0009bbf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bc7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009bce:	3c 19                	cmp    al,0x19
c0009bd0:	77 35                	ja     c0009c07 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009bd2:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c0009bd9:	85 c0                	test   eax,eax
c0009bdb:	74 2a                	je     c0009c07 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009bdd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009be3:	85 c0                	test   eax,eax
c0009be5:	74 20                	je     c0009c07 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009be7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009beb:	74 21                	je     c0009c0e <Directory::read(unsigned long long, void*, int*)+0x50>
c0009bed:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009bef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009bf3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009bf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009bfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c01:	5b                   	pop    ebx
c0009c02:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0009c05:	ff e0                	jmp    eax
c0009c07:	b8 0b 00 00 00       	mov    eax,0xb
c0009c0c:	eb 05                	jmp    c0009c13 <Directory::read(unsigned long long, void*, int*)+0x55>
c0009c0e:	b8 05 00 00 00       	mov    eax,0x5
c0009c13:	5b                   	pop    ebx
c0009c14:	c3                   	ret    
c0009c15:	90                   	nop

c0009c16 <Directory::write(unsigned long long, void*, int*)>:
c0009c16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c1a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0009c21:	b8 0b 00 00 00       	mov    eax,0xb
c0009c26:	80 fa 19             	cmp    dl,0x19
c0009c29:	77 18                	ja     c0009c43 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009c2b:	8b 14 95 00 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde600]
c0009c32:	85 d2                	test   edx,edx
c0009c34:	74 0d                	je     c0009c43 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009c36:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0009c3d:	19 c0                	sbb    eax,eax
c0009c3f:	83 e0 0a             	and    eax,0xa
c0009c42:	40                   	inc    eax
c0009c43:	c3                   	ret    

c0009c44 <File::isAtty()>:
c0009c44:	31 c0                	xor    eax,eax
c0009c46:	c3                   	ret    
c0009c47:	90                   	nop

c0009c48 <Directory::isAtty()>:
c0009c48:	31 c0                	xor    eax,eax
c0009c4a:	c3                   	ret    
c0009c4b:	90                   	nop

c0009c4c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0009c4c:	b8 0a 00 00 00       	mov    eax,0xa
c0009c51:	c3                   	ret    

c0009c52 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0009c52:	b8 0a 00 00 00       	mov    eax,0xa
c0009c57:	c3                   	ret    

c0009c58 <Filesystem::allocateSwapfile(char const*, int)>:
c0009c58:	31 c0                	xor    eax,eax
c0009c5a:	31 d2                	xor    edx,edx
c0009c5c:	c3                   	ret    
c0009c5d:	90                   	nop

c0009c5e <File::~File()>:
c0009c5e:	83 ec 0c             	sub    esp,0xc
c0009c61:	ba ac d3 01 c0       	mov    edx,0xc001d3ac
c0009c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c6a:	89 10                	mov    DWORD PTR [eax],edx
c0009c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c70:	83 ec 0c             	sub    esp,0xc
c0009c73:	50                   	push   eax
c0009c74:	e8 77 e8 ff ff       	call   c00084f0 <UnixFile::~UnixFile()>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	90                   	nop
c0009c7d:	83 c4 0c             	add    esp,0xc
c0009c80:	c3                   	ret    
c0009c81:	90                   	nop

c0009c82 <File::~File()>:
c0009c82:	83 ec 0c             	sub    esp,0xc
c0009c85:	83 ec 0c             	sub    esp,0xc
c0009c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8c:	e8 cd ff ff ff       	call   c0009c5e <File::~File()>
c0009c91:	83 c4 10             	add    esp,0x10
c0009c94:	83 ec 08             	sub    esp,0x8
c0009c97:	68 14 01 00 00       	push   0x114
c0009c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca0:	e8 3d fc ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	83 c4 0c             	add    esp,0xc
c0009cab:	c3                   	ret    

c0009cac <Directory::~Directory()>:
c0009cac:	83 ec 0c             	sub    esp,0xc
c0009caf:	ba c8 d3 01 c0       	mov    edx,0xc001d3c8
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	89 10                	mov    DWORD PTR [eax],edx
c0009cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbe:	83 ec 0c             	sub    esp,0xc
c0009cc1:	50                   	push   eax
c0009cc2:	e8 29 e8 ff ff       	call   c00084f0 <UnixFile::~UnixFile()>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	90                   	nop
c0009ccb:	83 c4 0c             	add    esp,0xc
c0009cce:	c3                   	ret    
c0009ccf:	90                   	nop

c0009cd0 <Directory::~Directory()>:
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	83 ec 0c             	sub    esp,0xc
c0009cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cda:	e8 cd ff ff ff       	call   c0009cac <Directory::~Directory()>
c0009cdf:	83 c4 10             	add    esp,0x10
c0009ce2:	83 ec 08             	sub    esp,0x8
c0009ce5:	68 14 01 00 00       	push   0x114
c0009cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cee:	e8 ef fb ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c0009cf3:	83 c4 10             	add    esp,0x10
c0009cf6:	83 c4 0c             	add    esp,0xc
c0009cf9:	c3                   	ret    

c0009cfa <Filesystem::Filesystem()>:
c0009cfa:	ba 44 d3 01 c0       	mov    edx,0xc001d344
c0009cff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d03:	89 10                	mov    DWORD PTR [eax],edx
c0009d05:	8b 15 78 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f578
c0009d0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d0f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d16:	a3 78 f5 01 c0       	mov    ds:0xc001f578,eax
c0009d1b:	90                   	nop
c0009d1c:	c3                   	ret    
c0009d1d:	90                   	nop

c0009d1e <Filesystem::~Filesystem()>:
c0009d1e:	ba 44 d3 01 c0       	mov    edx,0xc001d344
c0009d23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d27:	89 10                	mov    DWORD PTR [eax],edx
c0009d29:	90                   	nop
c0009d2a:	c3                   	ret    
c0009d2b:	90                   	nop

c0009d2c <Filesystem::~Filesystem()>:
c0009d2c:	83 ec 0c             	sub    esp,0xc
c0009d2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009d33:	e8 e6 ff ff ff       	call   c0009d1e <Filesystem::~Filesystem()>
c0009d38:	83 c4 04             	add    esp,0x4
c0009d3b:	83 ec 08             	sub    esp,0x8
c0009d3e:	6a 08                	push   0x8
c0009d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d44:	e8 99 fb ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c0009d49:	83 c4 10             	add    esp,0x10
c0009d4c:	83 c4 0c             	add    esp,0xc
c0009d4f:	c3                   	ret    

c0009d50 <Fs::getcwd(Process*, char*, int)>:
c0009d50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d54:	31 c0                	xor    eax,eax
c0009d56:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0009d59:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0009d5d:	7d 15                	jge    c0009d74 <Fs::getcwd(Process*, char*, int)+0x24>
c0009d5f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d63:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0009d6a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0009d6d:	84 c9                	test   cl,cl
c0009d6f:	74 06                	je     c0009d77 <Fs::getcwd(Process*, char*, int)+0x27>
c0009d71:	40                   	inc    eax
c0009d72:	eb e2                	jmp    c0009d56 <Fs::getcwd(Process*, char*, int)+0x6>
c0009d74:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009d77:	31 c0                	xor    eax,eax
c0009d79:	c3                   	ret    

c0009d7a <Fs::initVFS()>:
c0009d7a:	83 ec 18             	sub    esp,0x18
c0009d7d:	6a 08                	push   0x8
c0009d7f:	e8 91 ce ff ff       	call   c0006c15 <malloc>
c0009d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d87:	e8 a0 c3 00 00       	call   c001612c <FAT::FAT()>
c0009d8c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009d93:	e8 7d ce ff ff       	call   c0006c15 <malloc>
c0009d98:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9b:	e8 46 d6 00 00       	call   c00173e6 <ISO9660::ISO9660()>
c0009da0:	83 c4 1c             	add    esp,0x1c
c0009da3:	c3                   	ret    

c0009da4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0009da4:	55                   	push   ebp
c0009da5:	57                   	push   edi
c0009da6:	56                   	push   esi
c0009da7:	53                   	push   ebx
c0009da8:	81 ec 10 04 00 00    	sub    esp,0x410
c0009dae:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0009db5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0009dbc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0009dc3:	68 00 04 00 00       	push   0x400
c0009dc8:	6a 00                	push   0x0
c0009dca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0009dce:	56                   	push   esi
c0009dcf:	e8 1c 67 ff ff       	call   c00004f0 <memset>
c0009dd4:	83 c4 10             	add    esp,0x10
c0009dd7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0009ddb:	75 0b                	jne    c0009de8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0009ddd:	50                   	push   eax
c0009dde:	50                   	push   eax
c0009ddf:	57                   	push   edi
c0009de0:	56                   	push   esi
c0009de1:	e8 3a 68 ff ff       	call   c0000620 <strcpy>
c0009de6:	eb 41                	jmp    c0009e29 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0009de8:	8a 07                	mov    al,BYTE PTR [edi]
c0009dea:	3c 5c                	cmp    al,0x5c
c0009dec:	74 04                	je     c0009df2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0009dee:	3c 2f                	cmp    al,0x2f
c0009df0:	75 18                	jne    c0009e0a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0009df2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009df5:	3c 60                	cmp    al,0x60
c0009df7:	7e 03                	jle    c0009dfc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0009df9:	83 e8 20             	sub    eax,0x20
c0009dfc:	88 04 24             	mov    BYTE PTR [esp],al
c0009dff:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009e06:	50                   	push   eax
c0009e07:	50                   	push   eax
c0009e08:	eb 18                	jmp    c0009e22 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0009e0a:	50                   	push   eax
c0009e0b:	50                   	push   eax
c0009e0c:	55                   	push   ebp
c0009e0d:	56                   	push   esi
c0009e0e:	e8 0d 68 ff ff       	call   c0000620 <strcpy>
c0009e13:	5a                   	pop    edx
c0009e14:	59                   	pop    ecx
c0009e15:	68 f0 e0 01 c0       	push   0xc001e0f0
c0009e1a:	56                   	push   esi
c0009e1b:	e8 c0 69 ff ff       	call   c00007e0 <strcat>
c0009e20:	5d                   	pop    ebp
c0009e21:	58                   	pop    eax
c0009e22:	57                   	push   edi
c0009e23:	56                   	push   esi
c0009e24:	e8 b7 69 ff ff       	call   c00007e0 <strcat>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0009e2f:	3c 60                	cmp    al,0x60
c0009e31:	7e 03                	jle    c0009e36 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0009e33:	83 e8 20             	sub    eax,0x20
c0009e36:	88 04 24             	mov    BYTE PTR [esp],al
c0009e39:	88 03                	mov    BYTE PTR [ebx],al
c0009e3b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009e42:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0009e48:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0009e4c:	bf 03 00 00 00       	mov    edi,0x3
c0009e51:	b8 03 00 00 00       	mov    eax,0x3
c0009e56:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0009e59:	84 d2                	test   dl,dl
c0009e5b:	0f 84 91 00 00 00    	je     c0009ef2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0009e61:	8d 4f 01             	lea    ecx,[edi+0x1]
c0009e64:	80 fa 5c             	cmp    dl,0x5c
c0009e67:	74 05                	je     c0009e6e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0009e69:	80 fa 2f             	cmp    dl,0x2f
c0009e6c:	75 12                	jne    c0009e80 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009e6e:	89 c5                	mov    ebp,eax
c0009e70:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009e75:	74 09                	je     c0009e80 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009e77:	40                   	inc    eax
c0009e78:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0009e7c:	89 cf                	mov    edi,ecx
c0009e7e:	eb d6                	jmp    c0009e56 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0009e80:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0009e85:	75 5b                	jne    c0009ee2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009e87:	80 fa 2e             	cmp    dl,0x2e
c0009e8a:	75 56                	jne    c0009ee2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009e8c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0009e90:	74 19                	je     c0009eab <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0009e92:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009e97:	74 53                	je     c0009eec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009e99:	89 f9                	mov    ecx,edi
c0009e9b:	41                   	inc    ecx
c0009e9c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009e9f:	80 fa 2f             	cmp    dl,0x2f
c0009ea2:	74 f7                	je     c0009e9b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009ea4:	80 fa 5c             	cmp    dl,0x5c
c0009ea7:	74 f2                	je     c0009e9b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009ea9:	eb d1                	jmp    c0009e7c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009eab:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009eb0:	74 3a                	je     c0009eec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009eb2:	83 f8 03             	cmp    eax,0x3
c0009eb5:	74 c5                	je     c0009e7c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009eb7:	41                   	inc    ecx
c0009eb8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009ebb:	80 fa 2f             	cmp    dl,0x2f
c0009ebe:	74 f7                	je     c0009eb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009ec0:	80 fa 5c             	cmp    dl,0x5c
c0009ec3:	74 f2                	je     c0009eb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009ec5:	48                   	dec    eax
c0009ec6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009eca:	75 06                	jne    c0009ed2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009ecc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009ed0:	eb f3                	jmp    c0009ec5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0009ed2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009ed6:	74 07                	je     c0009edf <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0009ed8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009edc:	48                   	dec    eax
c0009edd:	eb f3                	jmp    c0009ed2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009edf:	40                   	inc    eax
c0009ee0:	eb 9a                	jmp    c0009e7c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009ee2:	80 fa 2f             	cmp    dl,0x2f
c0009ee5:	74 95                	je     c0009e7c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009ee7:	80 fa 5c             	cmp    dl,0x5c
c0009eea:	74 90                	je     c0009e7c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009eec:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0009eef:	40                   	inc    eax
c0009ef0:	eb 8a                	jmp    c0009e7c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009ef2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009ef6:	83 ec 0c             	sub    esp,0xc
c0009ef9:	53                   	push   ebx
c0009efa:	e8 61 66 ff ff       	call   c0000560 <strlen>
c0009eff:	83 c4 10             	add    esp,0x10
c0009f02:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0009f07:	75 26                	jne    c0009f2f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0009f09:	83 ec 0c             	sub    esp,0xc
c0009f0c:	53                   	push   ebx
c0009f0d:	e8 4e 66 ff ff       	call   c0000560 <strlen>
c0009f12:	83 c4 10             	add    esp,0x10
c0009f15:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0009f1a:	74 26                	je     c0009f42 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0009f1c:	83 ec 0c             	sub    esp,0xc
c0009f1f:	53                   	push   ebx
c0009f20:	e8 3b 66 ff ff       	call   c0000560 <strlen>
c0009f25:	83 c4 10             	add    esp,0x10
c0009f28:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0009f2d:	eb c7                	jmp    c0009ef6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0009f2f:	83 ec 0c             	sub    esp,0xc
c0009f32:	53                   	push   ebx
c0009f33:	e8 28 66 ff ff       	call   c0000560 <strlen>
c0009f38:	83 c4 10             	add    esp,0x10
c0009f3b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009f40:	74 c7                	je     c0009f09 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0009f42:	81 c4 0c 04 00 00    	add    esp,0x40c
c0009f48:	5b                   	pop    ebx
c0009f49:	5e                   	pop    esi
c0009f4a:	5f                   	pop    edi
c0009f4b:	5d                   	pop    ebp
c0009f4c:	c3                   	ret    
c0009f4d:	90                   	nop

c0009f4e <File::File(char const*, Process*)>:
c0009f4e:	83 ec 0c             	sub    esp,0xc
c0009f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f55:	83 ec 08             	sub    esp,0x8
c0009f58:	6a 00                	push   0x0
c0009f5a:	50                   	push   eax
c0009f5b:	e8 ae e3 ff ff       	call   c000830e <UnixFile::UnixFile(int)>
c0009f60:	83 c4 10             	add    esp,0x10
c0009f63:	ba ac d3 01 c0       	mov    edx,0xc001d3ac
c0009f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f6c:	89 10                	mov    DWORD PTR [eax],edx
c0009f6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f72:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0009f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f7c:	83 c0 0d             	add    eax,0xd
c0009f7f:	83 ec 04             	sub    esp,0x4
c0009f82:	52                   	push   edx
c0009f83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f87:	50                   	push   eax
c0009f88:	e8 17 fe ff ff       	call   c0009da4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0009f8d:	83 c4 10             	add    esp,0x10
c0009f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f94:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009f97:	8d 50 bf             	lea    edx,[eax-0x41]
c0009f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f9e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0009fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fa8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fb0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009fb6:	25 ff 00 00 00       	and    eax,0xff
c0009fbb:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c0009fc2:	85 c0                	test   eax,eax
c0009fc4:	74 42                	je     c000a008 <File::File(char const*, Process*)+0xba>
c0009fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fca:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009fd0:	25 ff 00 00 00       	and    eax,0xff
c0009fd5:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c0009fdc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009fe2:	85 c0                	test   eax,eax
c0009fe4:	75 22                	jne    c000a008 <File::File(char const*, Process*)+0xba>
c0009fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009ff0:	25 ff 00 00 00       	and    eax,0xff
c0009ff5:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c0009ffc:	83 ec 0c             	sub    esp,0xc
c0009fff:	50                   	push   eax
c000a000:	e8 f9 1f 00 00       	call   c000bffe <LogicalDisk::mount()>
c000a005:	83 c4 10             	add    esp,0x10
c000a008:	90                   	nop
c000a009:	83 c4 0c             	add    esp,0xc
c000a00c:	c3                   	ret    
c000a00d:	90                   	nop

c000a00e <File::open(FileOpenMode)>:
c000a00e:	53                   	push   ebx
c000a00f:	b8 0b 00 00 00       	mov    eax,0xb
c000a014:	83 ec 08             	sub    esp,0x8
c000a017:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a01b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a022:	80 fa 19             	cmp    dl,0x19
c000a025:	77 40                	ja     c000a067 <File::open(FileOpenMode)+0x59>
c000a027:	8b 14 95 00 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde600]
c000a02e:	85 d2                	test   edx,edx
c000a030:	74 35                	je     c000a067 <File::open(FileOpenMode)+0x59>
c000a032:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a038:	85 d2                	test   edx,edx
c000a03a:	74 2b                	je     c000a067 <File::open(FileOpenMode)+0x59>
c000a03c:	b8 06 00 00 00       	mov    eax,0x6
c000a041:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a045:	75 20                	jne    c000a067 <File::open(FileOpenMode)+0x59>
c000a047:	8b 02                	mov    eax,DWORD PTR [edx]
c000a049:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a04f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a053:	51                   	push   ecx
c000a054:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a057:	51                   	push   ecx
c000a058:	52                   	push   edx
c000a059:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	85 c0                	test   eax,eax
c000a061:	75 04                	jne    c000a067 <File::open(FileOpenMode)+0x59>
c000a063:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a067:	83 c4 08             	add    esp,0x8
c000a06a:	5b                   	pop    ebx
c000a06b:	c3                   	ret    

c000a06c <File::close()>:
c000a06c:	53                   	push   ebx
c000a06d:	b8 0b 00 00 00       	mov    eax,0xb
c000a072:	83 ec 08             	sub    esp,0x8
c000a075:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a079:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a080:	80 fa 19             	cmp    dl,0x19
c000a083:	77 41                	ja     c000a0c6 <File::close()+0x5a>
c000a085:	8b 1c 95 00 1a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde600]
c000a08c:	85 db                	test   ebx,ebx
c000a08e:	74 36                	je     c000a0c6 <File::close()+0x5a>
c000a090:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a097:	74 2d                	je     c000a0c6 <File::close()+0x5a>
c000a099:	b8 05 00 00 00       	mov    eax,0x5
c000a09e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a0a2:	74 22                	je     c000a0c6 <File::close()+0x5a>
c000a0a4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a0a8:	8b 04 95 00 1a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde600]
c000a0af:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a0b5:	53                   	push   ebx
c000a0b6:	53                   	push   ebx
c000a0b7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0b9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a0bf:	50                   	push   eax
c000a0c0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000a0c3:	83 c4 10             	add    esp,0x10
c000a0c6:	83 c4 08             	add    esp,0x8
c000a0c9:	5b                   	pop    ebx
c000a0ca:	c3                   	ret    
c000a0cb:	90                   	nop

c000a0cc <File::seek(unsigned long long)>:
c000a0cc:	56                   	push   esi
c000a0cd:	53                   	push   ebx
c000a0ce:	b8 0b 00 00 00       	mov    eax,0xb
c000a0d3:	51                   	push   ecx
c000a0d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0dc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000a0e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0e7:	80 fa 19             	cmp    dl,0x19
c000a0ea:	77 31                	ja     c000a11d <File::seek(unsigned long long)+0x51>
c000a0ec:	8b 14 95 00 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde600]
c000a0f3:	85 d2                	test   edx,edx
c000a0f5:	74 26                	je     c000a11d <File::seek(unsigned long long)+0x51>
c000a0f7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a0fd:	85 d2                	test   edx,edx
c000a0ff:	74 1c                	je     c000a11d <File::seek(unsigned long long)+0x51>
c000a101:	b8 05 00 00 00       	mov    eax,0x5
c000a106:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000a10a:	74 11                	je     c000a11d <File::seek(unsigned long long)+0x51>
c000a10c:	8b 02                	mov    eax,DWORD PTR [edx]
c000a10e:	53                   	push   ebx
c000a10f:	51                   	push   ecx
c000a110:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000a116:	52                   	push   edx
c000a117:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000a11a:	83 c4 10             	add    esp,0x10
c000a11d:	5a                   	pop    edx
c000a11e:	5b                   	pop    ebx
c000a11f:	5e                   	pop    esi
c000a120:	c3                   	ret    
c000a121:	90                   	nop

c000a122 <File::tell(unsigned long long*)>:
c000a122:	83 ec 0c             	sub    esp,0xc
c000a125:	b8 0b 00 00 00       	mov    eax,0xb
c000a12a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a12e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a135:	80 fa 19             	cmp    dl,0x19
c000a138:	77 34                	ja     c000a16e <File::tell(unsigned long long*)+0x4c>
c000a13a:	8b 14 95 00 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde600]
c000a141:	85 d2                	test   edx,edx
c000a143:	74 29                	je     c000a16e <File::tell(unsigned long long*)+0x4c>
c000a145:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a14b:	85 d2                	test   edx,edx
c000a14d:	74 1f                	je     c000a16e <File::tell(unsigned long long*)+0x4c>
c000a14f:	b8 05 00 00 00       	mov    eax,0x5
c000a154:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a158:	74 14                	je     c000a16e <File::tell(unsigned long long*)+0x4c>
c000a15a:	50                   	push   eax
c000a15b:	8b 02                	mov    eax,DWORD PTR [edx]
c000a15d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a161:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a167:	52                   	push   edx
c000a168:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	83 c4 0c             	add    esp,0xc
c000a171:	c3                   	ret    

c000a172 <File::rewind()>:
c000a172:	83 ec 10             	sub    esp,0x10
c000a175:	6a 00                	push   0x0
c000a177:	6a 00                	push   0x0
c000a179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17d:	e8 4a ff ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c000a182:	83 c4 1c             	add    esp,0x1c
c000a185:	c3                   	ret    

c000a186 <File::unlink()>:
c000a186:	83 ec 0c             	sub    esp,0xc
c000a189:	b8 0b 00 00 00       	mov    eax,0xb
c000a18e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a192:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a199:	80 f9 19             	cmp    cl,0x19
c000a19c:	77 2f                	ja     c000a1cd <File::unlink()+0x47>
c000a19e:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c000a1a5:	85 c9                	test   ecx,ecx
c000a1a7:	74 24                	je     c000a1cd <File::unlink()+0x47>
c000a1a9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a1af:	85 c9                	test   ecx,ecx
c000a1b1:	74 1a                	je     c000a1cd <File::unlink()+0x47>
c000a1b3:	b8 06 00 00 00       	mov    eax,0x6
c000a1b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a1bc:	75 0f                	jne    c000a1cd <File::unlink()+0x47>
c000a1be:	83 c2 0d             	add    edx,0xd
c000a1c1:	50                   	push   eax
c000a1c2:	50                   	push   eax
c000a1c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a1c5:	52                   	push   edx
c000a1c6:	51                   	push   ecx
c000a1c7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a1ca:	83 c4 10             	add    esp,0x10
c000a1cd:	83 c4 0c             	add    esp,0xc
c000a1d0:	c3                   	ret    
c000a1d1:	90                   	nop

c000a1d2 <File::rename(char const*)>:
c000a1d2:	83 ec 0c             	sub    esp,0xc
c000a1d5:	b8 0b 00 00 00       	mov    eax,0xb
c000a1da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a1de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a1e5:	80 f9 19             	cmp    cl,0x19
c000a1e8:	77 32                	ja     c000a21c <File::rename(char const*)+0x4a>
c000a1ea:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c000a1f1:	85 c9                	test   ecx,ecx
c000a1f3:	74 27                	je     c000a21c <File::rename(char const*)+0x4a>
c000a1f5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a1fb:	85 c9                	test   ecx,ecx
c000a1fd:	74 1d                	je     c000a21c <File::rename(char const*)+0x4a>
c000a1ff:	b8 06 00 00 00       	mov    eax,0x6
c000a204:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a208:	75 12                	jne    c000a21c <File::rename(char const*)+0x4a>
c000a20a:	83 c2 0d             	add    edx,0xd
c000a20d:	50                   	push   eax
c000a20e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a210:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a214:	52                   	push   edx
c000a215:	51                   	push   ecx
c000a216:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a219:	83 c4 10             	add    esp,0x10
c000a21c:	83 c4 0c             	add    esp,0xc
c000a21f:	c3                   	ret    

c000a220 <File::chfatattr(unsigned char, unsigned char)>:
c000a220:	57                   	push   edi
c000a221:	b8 0b 00 00 00       	mov    eax,0xb
c000a226:	56                   	push   esi
c000a227:	53                   	push   ebx
c000a228:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a22c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a230:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a237:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a23b:	80 f9 19             	cmp    cl,0x19
c000a23e:	77 37                	ja     c000a277 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a240:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c000a247:	85 c9                	test   ecx,ecx
c000a249:	74 2c                	je     c000a277 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a24b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a251:	85 c9                	test   ecx,ecx
c000a253:	74 22                	je     c000a277 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a255:	b8 06 00 00 00       	mov    eax,0x6
c000a25a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a25e:	75 17                	jne    c000a277 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a260:	8b 39                	mov    edi,DWORD PTR [ecx]
c000a262:	89 f0                	mov    eax,esi
c000a264:	83 c2 0d             	add    edx,0xd
c000a267:	0f b6 f0             	movzx  esi,al
c000a26a:	0f b6 db             	movzx  ebx,bl
c000a26d:	56                   	push   esi
c000a26e:	53                   	push   ebx
c000a26f:	52                   	push   edx
c000a270:	51                   	push   ecx
c000a271:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000a274:	83 c4 10             	add    esp,0x10
c000a277:	5b                   	pop    ebx
c000a278:	5e                   	pop    esi
c000a279:	5f                   	pop    edi
c000a27a:	c3                   	ret    
c000a27b:	90                   	nop

c000a27c <File::exists()>:
c000a27c:	83 ec 0c             	sub    esp,0xc
c000a27f:	31 c0                	xor    eax,eax
c000a281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a285:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a28c:	80 f9 19             	cmp    cl,0x19
c000a28f:	77 24                	ja     c000a2b5 <File::exists()+0x39>
c000a291:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c000a298:	85 c9                	test   ecx,ecx
c000a29a:	74 19                	je     c000a2b5 <File::exists()+0x39>
c000a29c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a2a2:	85 c9                	test   ecx,ecx
c000a2a4:	74 0f                	je     c000a2b5 <File::exists()+0x39>
c000a2a6:	83 c2 0d             	add    edx,0xd
c000a2a9:	50                   	push   eax
c000a2aa:	50                   	push   eax
c000a2ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a2ad:	52                   	push   edx
c000a2ae:	51                   	push   ecx
c000a2af:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a2b2:	83 c4 10             	add    esp,0x10
c000a2b5:	83 c4 0c             	add    esp,0xc
c000a2b8:	c3                   	ret    
c000a2b9:	90                   	nop

c000a2ba <File::stat(unsigned long long*, bool*)>:
c000a2ba:	56                   	push   esi
c000a2bb:	53                   	push   ebx
c000a2bc:	50                   	push   eax
c000a2bd:	b8 0b 00 00 00       	mov    eax,0xb
c000a2c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a2c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a2ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a2d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a2d5:	80 f9 19             	cmp    cl,0x19
c000a2d8:	77 3d                	ja     c000a317 <File::stat(unsigned long long*, bool*)+0x5d>
c000a2da:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c000a2e1:	85 c9                	test   ecx,ecx
c000a2e3:	74 32                	je     c000a317 <File::stat(unsigned long long*, bool*)+0x5d>
c000a2e5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a2eb:	85 c9                	test   ecx,ecx
c000a2ed:	74 28                	je     c000a317 <File::stat(unsigned long long*, bool*)+0x5d>
c000a2ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a2f1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a2f5:	74 13                	je     c000a30a <File::stat(unsigned long long*, bool*)+0x50>
c000a2f7:	83 ec 04             	sub    esp,0x4
c000a2fa:	56                   	push   esi
c000a2fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000a301:	51                   	push   ecx
c000a302:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000a305:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a308:	eb 0a                	jmp    c000a314 <File::stat(unsigned long long*, bool*)+0x5a>
c000a30a:	53                   	push   ebx
c000a30b:	83 c2 0d             	add    edx,0xd
c000a30e:	56                   	push   esi
c000a30f:	52                   	push   edx
c000a310:	51                   	push   ecx
c000a311:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000a314:	83 c4 10             	add    esp,0x10
c000a317:	5a                   	pop    edx
c000a318:	5b                   	pop    ebx
c000a319:	5e                   	pop    esi
c000a31a:	c3                   	ret    

c000a31b <Fs::setcwd(Process*, char*)>:
c000a31b:	55                   	push   ebp
c000a31c:	57                   	push   edi
c000a31d:	56                   	push   esi
c000a31e:	53                   	push   ebx
c000a31f:	81 ec 20 02 00 00    	sub    esp,0x220
c000a325:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000a32c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000a332:	57                   	push   edi
c000a333:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000a33a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000a33e:	56                   	push   esi
c000a33f:	e8 60 fa ff ff       	call   c0009da4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a344:	89 34 24             	mov    DWORD PTR [esp],esi
c000a347:	e8 14 62 ff ff       	call   c0000560 <strlen>
c000a34c:	83 c4 10             	add    esp,0x10
c000a34f:	83 f8 02             	cmp    eax,0x2
c000a352:	77 15                	ja     c000a369 <Fs::setcwd(Process*, char*)+0x4e>
c000a354:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000a359:	83 eb 41             	sub    ebx,0x41
c000a35c:	8b 04 9d 00 1a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde600]
c000a363:	85 c0                	test   eax,eax
c000a365:	75 1c                	jne    c000a383 <Fs::setcwd(Process*, char*)+0x68>
c000a367:	eb 2f                	jmp    c000a398 <Fs::setcwd(Process*, char*)+0x7d>
c000a369:	83 ec 0c             	sub    esp,0xc
c000a36c:	56                   	push   esi
c000a36d:	e8 ee 61 ff ff       	call   c0000560 <strlen>
c000a372:	83 c4 10             	add    esp,0x10
c000a375:	83 f8 03             	cmp    eax,0x3
c000a378:	75 57                	jne    c000a3d1 <Fs::setcwd(Process*, char*)+0xb6>
c000a37a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000a37f:	75 50                	jne    c000a3d1 <Fs::setcwd(Process*, char*)+0xb6>
c000a381:	eb d1                	jmp    c000a354 <Fs::setcwd(Process*, char*)+0x39>
c000a383:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000a38a:	75 0c                	jne    c000a398 <Fs::setcwd(Process*, char*)+0x7d>
c000a38c:	83 ec 0c             	sub    esp,0xc
c000a38f:	50                   	push   eax
c000a390:	e8 69 1c 00 00       	call   c000bffe <LogicalDisk::mount()>
c000a395:	83 c4 10             	add    esp,0x10
c000a398:	b8 03 00 00 00       	mov    eax,0x3
c000a39d:	83 fb 19             	cmp    ebx,0x19
c000a3a0:	0f 87 c6 00 00 00    	ja     c000a46c <Fs::setcwd(Process*, char*)+0x151>
c000a3a6:	8b 14 9d 00 1a 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffde600]
c000a3ad:	b8 05 00 00 00       	mov    eax,0x5
c000a3b2:	85 d2                	test   edx,edx
c000a3b4:	0f 84 b2 00 00 00    	je     c000a46c <Fs::setcwd(Process*, char*)+0x151>
c000a3ba:	b8 06 00 00 00       	mov    eax,0x6
c000a3bf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a3c6:	0f 85 92 00 00 00    	jne    c000a45e <Fs::setcwd(Process*, char*)+0x143>
c000a3cc:	e9 9b 00 00 00       	jmp    c000a46c <Fs::setcwd(Process*, char*)+0x151>
c000a3d1:	83 ec 0c             	sub    esp,0xc
c000a3d4:	68 14 01 00 00       	push   0x114
c000a3d9:	e8 37 c8 ff ff       	call   c0006c15 <malloc>
c000a3de:	83 c4 0c             	add    esp,0xc
c000a3e1:	89 c3                	mov    ebx,eax
c000a3e3:	55                   	push   ebp
c000a3e4:	56                   	push   esi
c000a3e5:	50                   	push   eax
c000a3e6:	e8 63 fb ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c000a3eb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a3f0:	83 c4 0c             	add    esp,0xc
c000a3f3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000a3f7:	50                   	push   eax
c000a3f8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a3fc:	50                   	push   eax
c000a3fd:	53                   	push   ebx
c000a3fe:	e8 b7 fe ff ff       	call   c000a2ba <File::stat(unsigned long long*, bool*)>
c000a403:	83 c4 10             	add    esp,0x10
c000a406:	83 f8 02             	cmp    eax,0x2
c000a409:	74 04                	je     c000a40f <Fs::setcwd(Process*, char*)+0xf4>
c000a40b:	85 c0                	test   eax,eax
c000a40d:	74 1c                	je     c000a42b <Fs::setcwd(Process*, char*)+0x110>
c000a40f:	b8 01 00 00 00       	mov    eax,0x1
c000a414:	85 db                	test   ebx,ebx
c000a416:	74 54                	je     c000a46c <Fs::setcwd(Process*, char*)+0x151>
c000a418:	83 ec 0c             	sub    esp,0xc
c000a41b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a41d:	53                   	push   ebx
c000a41e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a421:	83 c4 10             	add    esp,0x10
c000a424:	b8 01 00 00 00       	mov    eax,0x1
c000a429:	eb 41                	jmp    c000a46c <Fs::setcwd(Process*, char*)+0x151>
c000a42b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000a430:	75 1c                	jne    c000a44e <Fs::setcwd(Process*, char*)+0x133>
c000a432:	b8 02 00 00 00       	mov    eax,0x2
c000a437:	85 db                	test   ebx,ebx
c000a439:	74 31                	je     c000a46c <Fs::setcwd(Process*, char*)+0x151>
c000a43b:	83 ec 0c             	sub    esp,0xc
c000a43e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a440:	53                   	push   ebx
c000a441:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a444:	83 c4 10             	add    esp,0x10
c000a447:	b8 02 00 00 00       	mov    eax,0x2
c000a44c:	eb 1e                	jmp    c000a46c <Fs::setcwd(Process*, char*)+0x151>
c000a44e:	85 db                	test   ebx,ebx
c000a450:	74 0c                	je     c000a45e <Fs::setcwd(Process*, char*)+0x143>
c000a452:	83 ec 0c             	sub    esp,0xc
c000a455:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a457:	53                   	push   ebx
c000a458:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a45b:	83 c4 10             	add    esp,0x10
c000a45e:	50                   	push   eax
c000a45f:	50                   	push   eax
c000a460:	56                   	push   esi
c000a461:	57                   	push   edi
c000a462:	e8 b9 61 ff ff       	call   c0000620 <strcpy>
c000a467:	83 c4 10             	add    esp,0x10
c000a46a:	31 c0                	xor    eax,eax
c000a46c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000a472:	5b                   	pop    ebx
c000a473:	5e                   	pop    esi
c000a474:	5f                   	pop    edi
c000a475:	5d                   	pop    ebp
c000a476:	c3                   	ret    
c000a477:	90                   	nop

c000a478 <Directory::Directory(char const*, Process*)>:
c000a478:	83 ec 0c             	sub    esp,0xc
c000a47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a47f:	83 ec 08             	sub    esp,0x8
c000a482:	6a 00                	push   0x0
c000a484:	50                   	push   eax
c000a485:	e8 84 de ff ff       	call   c000830e <UnixFile::UnixFile(int)>
c000a48a:	83 c4 10             	add    esp,0x10
c000a48d:	ba c8 d3 01 c0       	mov    edx,0xc001d3c8
c000a492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a496:	89 10                	mov    DWORD PTR [eax],edx
c000a498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a49c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4a6:	83 c0 0d             	add    eax,0xd
c000a4a9:	83 ec 04             	sub    esp,0x4
c000a4ac:	52                   	push   edx
c000a4ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4b1:	50                   	push   eax
c000a4b2:	e8 ed f8 ff ff       	call   c0009da4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a4b7:	83 c4 10             	add    esp,0x10
c000a4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4be:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a4c1:	8d 50 bf             	lea    edx,[eax-0x41]
c000a4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4c8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4d2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4da:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a4e0:	25 ff 00 00 00       	and    eax,0xff
c000a4e5:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c000a4ec:	85 c0                	test   eax,eax
c000a4ee:	74 42                	je     c000a532 <Directory::Directory(char const*, Process*)+0xba>
c000a4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4f4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a4fa:	25 ff 00 00 00       	and    eax,0xff
c000a4ff:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c000a506:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a50c:	85 c0                	test   eax,eax
c000a50e:	75 22                	jne    c000a532 <Directory::Directory(char const*, Process*)+0xba>
c000a510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a514:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a51a:	25 ff 00 00 00       	and    eax,0xff
c000a51f:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c000a526:	83 ec 0c             	sub    esp,0xc
c000a529:	50                   	push   eax
c000a52a:	e8 cf 1a 00 00       	call   c000bffe <LogicalDisk::mount()>
c000a52f:	83 c4 10             	add    esp,0x10
c000a532:	90                   	nop
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	c3                   	ret    
c000a537:	90                   	nop

c000a538 <Directory::open()>:
c000a538:	53                   	push   ebx
c000a539:	b8 0b 00 00 00       	mov    eax,0xb
c000a53e:	83 ec 08             	sub    esp,0x8
c000a541:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a545:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a54c:	80 fa 19             	cmp    dl,0x19
c000a54f:	77 3d                	ja     c000a58e <Directory::open()+0x56>
c000a551:	8b 14 95 00 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde600]
c000a558:	85 d2                	test   edx,edx
c000a55a:	74 32                	je     c000a58e <Directory::open()+0x56>
c000a55c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a562:	85 d2                	test   edx,edx
c000a564:	74 28                	je     c000a58e <Directory::open()+0x56>
c000a566:	b8 06 00 00 00       	mov    eax,0x6
c000a56b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a56f:	75 1d                	jne    c000a58e <Directory::open()+0x56>
c000a571:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a577:	50                   	push   eax
c000a578:	8b 02                	mov    eax,DWORD PTR [edx]
c000a57a:	51                   	push   ecx
c000a57b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a57e:	51                   	push   ecx
c000a57f:	52                   	push   edx
c000a580:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000a583:	83 c4 10             	add    esp,0x10
c000a586:	85 c0                	test   eax,eax
c000a588:	75 04                	jne    c000a58e <Directory::open()+0x56>
c000a58a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a58e:	83 c4 08             	add    esp,0x8
c000a591:	5b                   	pop    ebx
c000a592:	c3                   	ret    
c000a593:	90                   	nop

c000a594 <Directory::close()>:
c000a594:	53                   	push   ebx
c000a595:	b8 0b 00 00 00       	mov    eax,0xb
c000a59a:	83 ec 08             	sub    esp,0x8
c000a59d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a5a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a5a8:	80 fa 19             	cmp    dl,0x19
c000a5ab:	77 41                	ja     c000a5ee <Directory::close()+0x5a>
c000a5ad:	8b 1c 95 00 1a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde600]
c000a5b4:	85 db                	test   ebx,ebx
c000a5b6:	74 36                	je     c000a5ee <Directory::close()+0x5a>
c000a5b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a5bf:	74 2d                	je     c000a5ee <Directory::close()+0x5a>
c000a5c1:	b8 05 00 00 00       	mov    eax,0x5
c000a5c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a5ca:	74 22                	je     c000a5ee <Directory::close()+0x5a>
c000a5cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a5d0:	8b 04 95 00 1a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde600]
c000a5d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a5dd:	53                   	push   ebx
c000a5de:	53                   	push   ebx
c000a5df:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a5e7:	50                   	push   eax
c000a5e8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	83 c4 08             	add    esp,0x8
c000a5f1:	5b                   	pop    ebx
c000a5f2:	c3                   	ret    
c000a5f3:	90                   	nop

c000a5f4 <Directory::unlink()>:
c000a5f4:	83 ec 0c             	sub    esp,0xc
c000a5f7:	b8 0b 00 00 00       	mov    eax,0xb
c000a5fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a600:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a607:	80 f9 19             	cmp    cl,0x19
c000a60a:	77 2f                	ja     c000a63b <Directory::unlink()+0x47>
c000a60c:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c000a613:	85 c9                	test   ecx,ecx
c000a615:	74 24                	je     c000a63b <Directory::unlink()+0x47>
c000a617:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a61d:	85 c9                	test   ecx,ecx
c000a61f:	74 1a                	je     c000a63b <Directory::unlink()+0x47>
c000a621:	b8 06 00 00 00       	mov    eax,0x6
c000a626:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a62a:	75 0f                	jne    c000a63b <Directory::unlink()+0x47>
c000a62c:	83 c2 0d             	add    edx,0xd
c000a62f:	50                   	push   eax
c000a630:	50                   	push   eax
c000a631:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a633:	52                   	push   edx
c000a634:	51                   	push   ecx
c000a635:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a638:	83 c4 10             	add    esp,0x10
c000a63b:	83 c4 0c             	add    esp,0xc
c000a63e:	c3                   	ret    
c000a63f:	90                   	nop

c000a640 <Directory::rename(char const*)>:
c000a640:	83 ec 0c             	sub    esp,0xc
c000a643:	b8 0b 00 00 00       	mov    eax,0xb
c000a648:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a64c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a653:	80 f9 19             	cmp    cl,0x19
c000a656:	77 32                	ja     c000a68a <Directory::rename(char const*)+0x4a>
c000a658:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c000a65f:	85 c9                	test   ecx,ecx
c000a661:	74 27                	je     c000a68a <Directory::rename(char const*)+0x4a>
c000a663:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a669:	85 c9                	test   ecx,ecx
c000a66b:	74 1d                	je     c000a68a <Directory::rename(char const*)+0x4a>
c000a66d:	b8 06 00 00 00       	mov    eax,0x6
c000a672:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a676:	75 12                	jne    c000a68a <Directory::rename(char const*)+0x4a>
c000a678:	83 c2 0d             	add    edx,0xd
c000a67b:	50                   	push   eax
c000a67c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a67e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a682:	52                   	push   edx
c000a683:	51                   	push   ecx
c000a684:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a687:	83 c4 10             	add    esp,0x10
c000a68a:	83 c4 0c             	add    esp,0xc
c000a68d:	c3                   	ret    

c000a68e <Directory::exists()>:
c000a68e:	83 ec 0c             	sub    esp,0xc
c000a691:	31 c0                	xor    eax,eax
c000a693:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a697:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a69e:	80 f9 19             	cmp    cl,0x19
c000a6a1:	77 24                	ja     c000a6c7 <Directory::exists()+0x39>
c000a6a3:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c000a6aa:	85 c9                	test   ecx,ecx
c000a6ac:	74 19                	je     c000a6c7 <Directory::exists()+0x39>
c000a6ae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a6b4:	85 c9                	test   ecx,ecx
c000a6b6:	74 0f                	je     c000a6c7 <Directory::exists()+0x39>
c000a6b8:	83 c2 0d             	add    edx,0xd
c000a6bb:	50                   	push   eax
c000a6bc:	50                   	push   eax
c000a6bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a6bf:	52                   	push   edx
c000a6c0:	51                   	push   ecx
c000a6c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a6c4:	83 c4 10             	add    esp,0x10
c000a6c7:	83 c4 0c             	add    esp,0xc
c000a6ca:	c3                   	ret    
c000a6cb:	90                   	nop

c000a6cc <Directory::read(dirent*)>:
c000a6cc:	83 ec 1c             	sub    esp,0x1c
c000a6cf:	b8 0b 00 00 00       	mov    eax,0xb
c000a6d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a6d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a6df:	80 fa 19             	cmp    dl,0x19
c000a6e2:	77 30                	ja     c000a714 <Directory::read(dirent*)+0x48>
c000a6e4:	8b 14 95 00 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde600]
c000a6eb:	85 d2                	test   edx,edx
c000a6ed:	74 25                	je     c000a714 <Directory::read(dirent*)+0x48>
c000a6ef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a6f6:	74 1c                	je     c000a714 <Directory::read(dirent*)+0x48>
c000a6f8:	83 ec 0c             	sub    esp,0xc
c000a6fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a6fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000a701:	52                   	push   edx
c000a702:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a706:	6a 00                	push   0x0
c000a708:	68 10 01 00 00       	push   0x110
c000a70d:	51                   	push   ecx
c000a70e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a711:	83 c4 20             	add    esp,0x20
c000a714:	83 c4 1c             	add    esp,0x1c
c000a717:	c3                   	ret    

c000a718 <Directory::create()>:
c000a718:	83 ec 0c             	sub    esp,0xc
c000a71b:	b8 0b 00 00 00       	mov    eax,0xb
c000a720:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a724:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a72b:	80 f9 19             	cmp    cl,0x19
c000a72e:	77 2f                	ja     c000a75f <Directory::create()+0x47>
c000a730:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c000a737:	85 c9                	test   ecx,ecx
c000a739:	74 24                	je     c000a75f <Directory::create()+0x47>
c000a73b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a741:	85 c9                	test   ecx,ecx
c000a743:	74 1a                	je     c000a75f <Directory::create()+0x47>
c000a745:	b8 06 00 00 00       	mov    eax,0x6
c000a74a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a74e:	75 0f                	jne    c000a75f <Directory::create()+0x47>
c000a750:	83 c2 0d             	add    edx,0xd
c000a753:	50                   	push   eax
c000a754:	50                   	push   eax
c000a755:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a757:	52                   	push   edx
c000a758:	51                   	push   ecx
c000a759:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000a75c:	83 c4 10             	add    esp,0x10
c000a75f:	83 c4 0c             	add    esp,0xc
c000a762:	c3                   	ret    
c000a763:	90                   	nop

c000a764 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000a764:	b8 0a 00 00 00       	mov    eax,0xa
c000a769:	c3                   	ret    
c000a76a:	66 90                	xchg   ax,ax

c000a76c <Bus::Bus(char const*)>:
c000a76c:	83 ec 0c             	sub    esp,0xc
c000a76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a773:	83 ec 08             	sub    esp,0x8
c000a776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a77a:	50                   	push   eax
c000a77b:	e8 30 08 00 00       	call   c000afb0 <Device::Device(char const*)>
c000a780:	83 c4 10             	add    esp,0x10
c000a783:	ba e4 d3 01 c0       	mov    edx,0xc001d3e4
c000a788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a78c:	89 10                	mov    DWORD PTR [eax],edx
c000a78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a792:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000a79c:	90                   	nop
c000a79d:	83 c4 0c             	add    esp,0xc
c000a7a0:	c3                   	ret    
c000a7a1:	90                   	nop
c000a7a2:	66 90                	xchg   ax,ax

c000a7a4 <Bus::~Bus()>:
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	ba e4 d3 01 c0       	mov    edx,0xc001d3e4
c000a7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7b0:	89 10                	mov    DWORD PTR [eax],edx
c000a7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7b6:	83 ec 0c             	sub    esp,0xc
c000a7b9:	50                   	push   eax
c000a7ba:	e8 5b 05 00 00       	call   c000ad1a <Device::~Device()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	90                   	nop
c000a7c3:	83 c4 0c             	add    esp,0xc
c000a7c6:	c3                   	ret    
c000a7c7:	90                   	nop

c000a7c8 <Bus::~Bus()>:
c000a7c8:	83 ec 0c             	sub    esp,0xc
c000a7cb:	83 ec 0c             	sub    esp,0xc
c000a7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7d2:	e8 cd ff ff ff       	call   c000a7a4 <Bus::~Bus()>
c000a7d7:	83 c4 10             	add    esp,0x10
c000a7da:	83 ec 08             	sub    esp,0x8
c000a7dd:	68 58 01 00 00       	push   0x158
c000a7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e6:	e8 f7 f0 ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000a7eb:	83 c4 10             	add    esp,0x10
c000a7ee:	83 c4 0c             	add    esp,0xc
c000a7f1:	c3                   	ret    

c000a7f2 <beepThread(void*)>:
c000a7f2:	83 ec 0c             	sub    esp,0xc
c000a7f5:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000a7fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7fe:	48                   	dec    eax
c000a7ff:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000a804:	75 01                	jne    c000a807 <beepThread(void*)+0x15>
c000a806:	fb                   	sti    
c000a807:	83 ec 0c             	sub    esp,0xc
c000a80a:	6b c2 0a             	imul   eax,edx,0xa
c000a80d:	50                   	push   eax
c000a80e:	e8 89 84 00 00       	call   c0012c9c <milliTenthSleep(unsigned int)>
c000a813:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000a81a:	e8 a1 a0 00 00       	call   c00148c0 <HalMakeBeep(int)>
c000a81f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000a827:	83 c4 1c             	add    esp,0x1c
c000a82a:	e9 69 83 00 00       	jmp    c0012b98 <blockTask(TaskState)>

c000a82f <Krnl::beep(int, int, bool)>:
c000a82f:	56                   	push   esi
c000a830:	53                   	push   ebx
c000a831:	83 ec 10             	sub    esp,0x10
c000a834:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a838:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a83c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a840:	e8 7b a0 00 00       	call   c00148c0 <HalMakeBeep(int)>
c000a845:	83 c4 10             	add    esp,0x10
c000a848:	89 f0                	mov    eax,esi
c000a84a:	84 c0                	test   al,al
c000a84c:	74 1e                	je     c000a86c <Krnl::beep(int, int, bool)+0x3d>
c000a84e:	83 ec 0c             	sub    esp,0xc
c000a851:	6b db 0a             	imul   ebx,ebx,0xa
c000a854:	53                   	push   ebx
c000a855:	e8 42 84 00 00       	call   c0012c9c <milliTenthSleep(unsigned int)>
c000a85a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000a862:	83 c4 14             	add    esp,0x14
c000a865:	5b                   	pop    ebx
c000a866:	5e                   	pop    esi
c000a867:	e9 54 a0 00 00       	jmp    c00148c0 <HalMakeBeep(int)>
c000a86c:	68 e6 00 00 00       	push   0xe6
c000a871:	53                   	push   ebx
c000a872:	68 f2 a7 00 c0       	push   0xc000a7f2
c000a877:	ff 35 90 29 02 c0    	push   DWORD PTR ds:0xc0022990
c000a87d:	e8 fa 7e 00 00       	call   c001277c <Process::createThread(void (*)(void*), void*, int)>
c000a882:	83 c4 14             	add    esp,0x14
c000a885:	5b                   	pop    ebx
c000a886:	5e                   	pop    esi
c000a887:	c3                   	ret    

c000a888 <User::loadClockSettings(int)>:
c000a888:	53                   	push   ebx
c000a889:	83 ec 14             	sub    esp,0x14
c000a88c:	68 14 01 00 00       	push   0x114
c000a891:	e8 7f c3 ff ff       	call   c0006c15 <malloc>
c000a896:	83 c4 0c             	add    esp,0xc
c000a899:	89 c3                	mov    ebx,eax
c000a89b:	ff 35 90 29 02 c0    	push   DWORD PTR ds:0xc0022990
c000a8a1:	68 08 d4 01 c0       	push   0xc001d408
c000a8a6:	50                   	push   eax
c000a8a7:	e8 a2 f6 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c000a8ac:	58                   	pop    eax
c000a8ad:	5a                   	pop    edx
c000a8ae:	6a 01                	push   0x1
c000a8b0:	53                   	push   ebx
c000a8b1:	e8 58 f7 ff ff       	call   c000a00e <File::open(FileOpenMode)>
c000a8b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a8b9:	e8 ae f7 ff ff       	call   c000a06c <File::close()>
c000a8be:	83 c4 10             	add    esp,0x10
c000a8c1:	85 db                	test   ebx,ebx
c000a8c3:	74 0f                	je     c000a8d4 <User::loadClockSettings(int)+0x4c>
c000a8c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a8c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a8ce:	83 c4 08             	add    esp,0x8
c000a8d1:	5b                   	pop    ebx
c000a8d2:	ff e0                	jmp    eax
c000a8d4:	83 c4 08             	add    esp,0x8
c000a8d7:	5b                   	pop    ebx
c000a8d8:	c3                   	ret    
c000a8d9:	90                   	nop

c000a8da <Clock::Clock(char const*)>:
c000a8da:	83 ec 0c             	sub    esp,0xc
c000a8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8e1:	83 ec 08             	sub    esp,0x8
c000a8e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8e8:	50                   	push   eax
c000a8e9:	e8 c2 06 00 00       	call   c000afb0 <Device::Device(char const*)>
c000a8ee:	83 c4 10             	add    esp,0x10
c000a8f1:	ba 30 d4 01 c0       	mov    edx,0xc001d430
c000a8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8fa:	89 10                	mov    DWORD PTR [eax],edx
c000a8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a900:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000a90a:	90                   	nop
c000a90b:	83 c4 0c             	add    esp,0xc
c000a90e:	c3                   	ret    
c000a90f:	90                   	nop

c000a910 <Clock::~Clock()>:
c000a910:	83 ec 0c             	sub    esp,0xc
c000a913:	ba 30 d4 01 c0       	mov    edx,0xc001d430
c000a918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a91c:	89 10                	mov    DWORD PTR [eax],edx
c000a91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a922:	83 ec 0c             	sub    esp,0xc
c000a925:	50                   	push   eax
c000a926:	e8 ef 03 00 00       	call   c000ad1a <Device::~Device()>
c000a92b:	83 c4 10             	add    esp,0x10
c000a92e:	90                   	nop
c000a92f:	83 c4 0c             	add    esp,0xc
c000a932:	c3                   	ret    
c000a933:	90                   	nop

c000a934 <Clock::~Clock()>:
c000a934:	83 ec 0c             	sub    esp,0xc
c000a937:	83 ec 0c             	sub    esp,0xc
c000a93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a93e:	e8 cd ff ff ff       	call   c000a910 <Clock::~Clock()>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	83 ec 08             	sub    esp,0x8
c000a949:	68 58 01 00 00       	push   0x158
c000a94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a952:	e8 8b ef ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	83 c4 0c             	add    esp,0xc
c000a95d:	c3                   	ret    

c000a95e <Clock::timeInSecondsLocal()>:
c000a95e:	53                   	push   ebx
c000a95f:	83 ec 14             	sub    esp,0x14
c000a962:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a966:	8b 10                	mov    edx,DWORD PTR [eax]
c000a968:	50                   	push   eax
c000a969:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000a96c:	0f b6 0d 7c f5 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f57c
c000a973:	03 0d 80 f5 01 c0    	add    ecx,DWORD PTR ds:0xc001f580
c000a979:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a97f:	89 cb                	mov    ebx,ecx
c000a981:	c1 fb 1f             	sar    ebx,0x1f
c000a984:	01 c8                	add    eax,ecx
c000a986:	11 da                	adc    edx,ebx
c000a988:	83 c4 10             	add    esp,0x10
c000a98b:	31 c9                	xor    ecx,ecx
c000a98d:	80 3d 7d f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f57d,0x0
c000a994:	74 05                	je     c000a99b <Clock::timeInSecondsLocal()+0x3d>
c000a996:	b9 08 07 00 00       	mov    ecx,0x708
c000a99b:	31 db                	xor    ebx,ebx
c000a99d:	01 c8                	add    eax,ecx
c000a99f:	11 da                	adc    edx,ebx
c000a9a1:	83 c4 08             	add    esp,0x8
c000a9a4:	5b                   	pop    ebx
c000a9a5:	c3                   	ret    

c000a9a6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000a9a6:	57                   	push   edi
c000a9a7:	56                   	push   esi
c000a9a8:	53                   	push   ebx
c000a9a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a9ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a9b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a9b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a9b7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000a9ba:	0f b6 05 7c f5 01 c0 	movzx  eax,BYTE PTR ds:0xc001f57c
c000a9c1:	03 05 80 f5 01 c0    	add    eax,DWORD PTR ds:0xc001f580
c000a9c7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000a9cd:	99                   	cdq    
c000a9ce:	29 c6                	sub    esi,eax
c000a9d0:	19 d7                	sbb    edi,edx
c000a9d2:	89 f0                	mov    eax,esi
c000a9d4:	89 fa                	mov    edx,edi
c000a9d6:	31 f6                	xor    esi,esi
c000a9d8:	80 3d 7d f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f57d,0x0
c000a9df:	74 05                	je     c000a9e6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000a9e1:	be 08 07 00 00       	mov    esi,0x708
c000a9e6:	31 ff                	xor    edi,edi
c000a9e8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a9ec:	29 f0                	sub    eax,esi
c000a9ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a9f2:	19 fa                	sbb    edx,edi
c000a9f4:	89 d8                	mov    eax,ebx
c000a9f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a9fa:	5b                   	pop    ebx
c000a9fb:	5e                   	pop    esi
c000a9fc:	5f                   	pop    edi
c000a9fd:	ff e0                	jmp    eax

c000a9ff <datetimeToSeconds(datetime_t)>:
c000a9ff:	55                   	push   ebp
c000aa00:	57                   	push   edi
c000aa01:	56                   	push   esi
c000aa02:	53                   	push   ebx
c000aa03:	83 ec 14             	sub    esp,0x14
c000aa06:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000aa0a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000aa0e:	89 d3                	mov    ebx,edx
c000aa10:	0f b6 c6             	movzx  eax,dh
c000aa13:	c1 eb 10             	shr    ebx,0x10
c000aa16:	48                   	dec    eax
c000aa17:	66 81 eb 6c 07       	sub    bx,0x76c
c000aa1c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000aa20:	0f b6 f5             	movzx  esi,ch
c000aa23:	89 cf                	mov    edi,ecx
c000aa25:	6b f6 3c             	imul   esi,esi,0x3c
c000aa28:	c1 ef 10             	shr    edi,0x10
c000aa2b:	0f b6 c9             	movzx  ecx,cl
c000aa2e:	89 f8                	mov    eax,edi
c000aa30:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000aa36:	0f b6 f8             	movzx  edi,al
c000aa39:	0f b6 d2             	movzx  edx,dl
c000aa3c:	01 fe                	add    esi,edi
c000aa3e:	01 f1                	add    ecx,esi
c000aa40:	0f b7 f3             	movzx  esi,bx
c000aa43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aa47:	c1 f9 1f             	sar    ecx,0x1f
c000aa4a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000aa4f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aa53:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000aa58:	8b 0c 8d 80 d4 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2b80]
c000aa5f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000aa63:	76 29                	jbe    c000aa8e <datetimeToSeconds(datetime_t)+0x8f>
c000aa65:	f6 c3 03             	test   bl,0x3
c000aa68:	75 24                	jne    c000aa8e <datetimeToSeconds(datetime_t)+0x8f>
c000aa6a:	31 d2                	xor    edx,edx
c000aa6c:	bf 64 00 00 00       	mov    edi,0x64
c000aa71:	89 d8                	mov    eax,ebx
c000aa73:	66 f7 f7             	div    di
c000aa76:	66 85 d2             	test   dx,dx
c000aa79:	75 12                	jne    c000aa8d <datetimeToSeconds(datetime_t)+0x8e>
c000aa7b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000aa81:	bf 90 01 00 00       	mov    edi,0x190
c000aa86:	99                   	cdq    
c000aa87:	f7 ff                	idiv   edi
c000aa89:	85 d2                	test   edx,edx
c000aa8b:	75 01                	jne    c000aa8e <datetimeToSeconds(datetime_t)+0x8f>
c000aa8d:	41                   	inc    ecx
c000aa8e:	66 83 fb 46          	cmp    bx,0x46
c000aa92:	76 45                	jbe    c000aad9 <datetimeToSeconds(datetime_t)+0xda>
c000aa94:	bb 46 00 00 00       	mov    ebx,0x46
c000aa99:	bf 64 00 00 00       	mov    edi,0x64
c000aa9e:	bd 90 01 00 00       	mov    ebp,0x190
c000aaa3:	b8 6d 01 00 00       	mov    eax,0x16d
c000aaa8:	f6 c3 03             	test   bl,0x3
c000aaab:	75 23                	jne    c000aad0 <datetimeToSeconds(datetime_t)+0xd1>
c000aaad:	89 d8                	mov    eax,ebx
c000aaaf:	99                   	cdq    
c000aab0:	f7 ff                	idiv   edi
c000aab2:	b8 6e 01 00 00       	mov    eax,0x16e
c000aab7:	85 d2                	test   edx,edx
c000aab9:	75 15                	jne    c000aad0 <datetimeToSeconds(datetime_t)+0xd1>
c000aabb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000aac1:	99                   	cdq    
c000aac2:	f7 fd                	idiv   ebp
c000aac4:	31 c0                	xor    eax,eax
c000aac6:	85 d2                	test   edx,edx
c000aac8:	0f 94 c0             	sete   al
c000aacb:	05 6d 01 00 00       	add    eax,0x16d
c000aad0:	01 c1                	add    ecx,eax
c000aad2:	43                   	inc    ebx
c000aad3:	39 f3                	cmp    ebx,esi
c000aad5:	7c cc                	jl     c000aaa3 <datetimeToSeconds(datetime_t)+0xa4>
c000aad7:	eb 3b                	jmp    c000ab14 <datetimeToSeconds(datetime_t)+0x115>
c000aad9:	74 39                	je     c000ab14 <datetimeToSeconds(datetime_t)+0x115>
c000aadb:	b8 45 00 00 00       	mov    eax,0x45
c000aae0:	89 c2                	mov    edx,eax
c000aae2:	83 e2 03             	and    edx,0x3
c000aae5:	39 f0                	cmp    eax,esi
c000aae7:	7e 13                	jle    c000aafc <datetimeToSeconds(datetime_t)+0xfd>
c000aae9:	85 d2                	test   edx,edx
c000aaeb:	0f 94 c2             	sete   dl
c000aaee:	48                   	dec    eax
c000aaef:	0f b6 d2             	movzx  edx,dl
c000aaf2:	81 c2 6d 01 00 00    	add    edx,0x16d
c000aaf8:	29 d1                	sub    ecx,edx
c000aafa:	eb e4                	jmp    c000aae0 <datetimeToSeconds(datetime_t)+0xe1>
c000aafc:	b8 6d 01 00 00       	mov    eax,0x16d
c000ab01:	85 d2                	test   edx,edx
c000ab03:	75 0d                	jne    c000ab12 <datetimeToSeconds(datetime_t)+0x113>
c000ab05:	31 c0                	xor    eax,eax
c000ab07:	66 85 db             	test   bx,bx
c000ab0a:	0f 95 c0             	setne  al
c000ab0d:	05 6d 01 00 00       	add    eax,0x16d
c000ab12:	29 c1                	sub    ecx,eax
c000ab14:	b8 80 51 01 00       	mov    eax,0x15180
c000ab19:	f7 e9                	imul   ecx
c000ab1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ab1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ab23:	83 c4 14             	add    esp,0x14
c000ab26:	5b                   	pop    ebx
c000ab27:	5e                   	pop    esi
c000ab28:	5f                   	pop    edi
c000ab29:	5d                   	pop    ebp
c000ab2a:	c3                   	ret    
c000ab2b:	90                   	nop

c000ab2c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ab2c:	57                   	push   edi
c000ab2d:	56                   	push   esi
c000ab2e:	53                   	push   ebx
c000ab2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab33:	8b 06                	mov    eax,DWORD PTR [esi]
c000ab35:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000ab38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab40:	e8 ba fe ff ff       	call   c000a9ff <datetimeToSeconds(datetime_t)>
c000ab45:	59                   	pop    ecx
c000ab46:	0f b6 0d 7c f5 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f57c
c000ab4d:	5b                   	pop    ebx
c000ab4e:	03 0d 80 f5 01 c0    	add    ecx,DWORD PTR ds:0xc001f580
c000ab54:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ab5a:	89 cb                	mov    ebx,ecx
c000ab5c:	c1 fb 1f             	sar    ebx,0x1f
c000ab5f:	29 c8                	sub    eax,ecx
c000ab61:	19 da                	sbb    edx,ebx
c000ab63:	31 c9                	xor    ecx,ecx
c000ab65:	80 3d 7d f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f57d,0x0
c000ab6c:	74 05                	je     c000ab73 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000ab6e:	b9 08 07 00 00       	mov    ecx,0x708
c000ab73:	31 db                	xor    ebx,ebx
c000ab75:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ab79:	29 c8                	sub    eax,ecx
c000ab7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab7f:	19 da                	sbb    edx,ebx
c000ab81:	89 f8                	mov    eax,edi
c000ab83:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ab87:	5b                   	pop    ebx
c000ab88:	5e                   	pop    esi
c000ab89:	5f                   	pop    edi
c000ab8a:	ff e0                	jmp    eax

c000ab8c <secondsToDatetime(unsigned long long)>:
c000ab8c:	55                   	push   ebp
c000ab8d:	57                   	push   edi
c000ab8e:	56                   	push   esi
c000ab8f:	53                   	push   ebx
c000ab90:	83 ec 1c             	sub    esp,0x1c
c000ab93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ab97:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ab9b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ab9f:	6a 00                	push   0x0
c000aba1:	68 80 51 01 00       	push   0x15180
c000aba6:	55                   	push   ebp
c000aba7:	57                   	push   edi
c000aba8:	e8 43 0b 01 00       	call   c001b6f0 <__udivdi3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000abb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abba:	6a 00                	push   0x0
c000abbc:	68 80 51 01 00       	push   0x15180
c000abc1:	55                   	push   ebp
c000abc2:	57                   	push   edi
c000abc3:	bf 10 0e 00 00       	mov    edi,0xe10
c000abc8:	e8 23 0c 01 00       	call   c001b7f0 <__umoddi3>
c000abcd:	83 c4 10             	add    esp,0x10
c000abd0:	99                   	cdq    
c000abd1:	f7 ff                	idiv   edi
c000abd3:	bf 3c 00 00 00       	mov    edi,0x3c
c000abd8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000abdb:	89 d0                	mov    eax,edx
c000abdd:	99                   	cdq    
c000abde:	f7 ff                	idiv   edi
c000abe0:	85 db                	test   ebx,ebx
c000abe2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000abe5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000abe8:	79 11                	jns    c000abfb <secondsToDatetime(unsigned long long)+0x6f>
c000abea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000abee:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000abf4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000abf9:	eb 07                	jmp    c000ac02 <secondsToDatetime(unsigned long long)+0x76>
c000abfb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ac00:	89 d8                	mov    eax,ebx
c000ac02:	bf b4 05 00 00       	mov    edi,0x5b4
c000ac07:	99                   	cdq    
c000ac08:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000ac0d:	f7 f9                	idiv   ecx
c000ac0f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000ac14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac18:	31 d2                	xor    edx,edx
c000ac1a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ac22:	01 c3                	add    ebx,eax
c000ac24:	89 d8                	mov    eax,ebx
c000ac26:	f7 f1                	div    ecx
c000ac28:	31 d2                	xor    edx,edx
c000ac2a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ac2d:	89 d8                	mov    eax,ebx
c000ac2f:	f7 f7                	div    edi
c000ac31:	31 d2                	xor    edx,edx
c000ac33:	29 c1                	sub    ecx,eax
c000ac35:	89 d8                	mov    eax,ebx
c000ac37:	f7 f5                	div    ebp
c000ac39:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ac3e:	29 c1                	sub    ecx,eax
c000ac40:	31 d2                	xor    edx,edx
c000ac42:	89 c8                	mov    eax,ecx
c000ac44:	f7 f5                	div    ebp
c000ac46:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ac4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac4f:	31 d2                	xor    edx,edx
c000ac51:	89 c8                	mov    eax,ecx
c000ac53:	f7 f5                	div    ebp
c000ac55:	31 d2                	xor    edx,edx
c000ac57:	01 c3                	add    ebx,eax
c000ac59:	89 c8                	mov    eax,ecx
c000ac5b:	f7 f7                	div    edi
c000ac5d:	bf 99 00 00 00       	mov    edi,0x99
c000ac62:	29 c3                	sub    ebx,eax
c000ac64:	31 d2                	xor    edx,edx
c000ac66:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000ac6e:	29 c3                	sub    ebx,eax
c000ac70:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ac73:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000ac76:	bb 05 00 00 00       	mov    ebx,0x5
c000ac7b:	83 c1 02             	add    ecx,0x2
c000ac7e:	89 c8                	mov    eax,ecx
c000ac80:	f7 f7                	div    edi
c000ac82:	31 d2                	xor    edx,edx
c000ac84:	89 c7                	mov    edi,eax
c000ac86:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000ac8c:	83 c0 02             	add    eax,0x2
c000ac8f:	f7 f3                	div    ebx
c000ac91:	89 eb                	mov    ebx,ebp
c000ac93:	29 c3                	sub    ebx,eax
c000ac95:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000ac9b:	88 1e                	mov    BYTE PTR [esi],bl
c000ac9d:	19 c0                	sbb    eax,eax
c000ac9f:	31 d2                	xor    edx,edx
c000aca1:	83 e0 0c             	and    eax,0xc
c000aca4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000aca8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000acb0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000acb4:	83 f9 01             	cmp    ecx,0x1
c000acb7:	0f 96 c2             	setbe  dl
c000acba:	41                   	inc    ecx
c000acbb:	01 d0                	add    eax,edx
c000acbd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000acc0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000acc4:	83 c4 1c             	add    esp,0x1c
c000acc7:	89 f0                	mov    eax,esi
c000acc9:	5b                   	pop    ebx
c000acca:	5e                   	pop    esi
c000accb:	5f                   	pop    edi
c000accc:	5d                   	pop    ebp
c000accd:	c2 04 00             	ret    0x4

c000acd0 <Clock::timeInDatetimeLocal()>:
c000acd0:	53                   	push   ebx
c000acd1:	83 ec 14             	sub    esp,0x14
c000acd4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000acd8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000acdc:	e8 7d fc ff ff       	call   c000a95e <Clock::timeInSecondsLocal()>
c000ace1:	83 c4 0c             	add    esp,0xc
c000ace4:	52                   	push   edx
c000ace5:	50                   	push   eax
c000ace6:	53                   	push   ebx
c000ace7:	e8 a0 fe ff ff       	call   c000ab8c <secondsToDatetime(unsigned long long)>
c000acec:	89 d8                	mov    eax,ebx
c000acee:	83 c4 14             	add    esp,0x14
c000acf1:	5b                   	pop    ebx
c000acf2:	c2 04 00             	ret    0x4
c000acf5:	90                   	nop

c000acf6 <Device::hibernate()>:
c000acf6:	c3                   	ret    
c000acf7:	90                   	nop

c000acf8 <Device::wake()>:
c000acf8:	c3                   	ret    
c000acf9:	90                   	nop

c000acfa <Device::detect()>:
c000acfa:	c3                   	ret    
c000acfb:	90                   	nop

c000acfc <Device::disableLegacy()>:
c000acfc:	c3                   	ret    
c000acfd:	90                   	nop

c000acfe <Device::powerSaving(PowerSavingLevel)>:
c000acfe:	c3                   	ret    
c000acff:	90                   	nop

c000ad00 <DriverlessDevice::close(int, int, void*)>:
c000ad00:	31 c0                	xor    eax,eax
c000ad02:	c3                   	ret    
c000ad03:	90                   	nop

c000ad04 <DriverlessDevice::detect()>:
c000ad04:	c3                   	ret    
c000ad05:	90                   	nop

c000ad06 <DriverlessDevice::open(int, int, void*)>:
c000ad06:	83 ec 18             	sub    esp,0x18
c000ad09:	68 b0 d4 01 c0       	push   0xc001d4b0
c000ad0e:	e8 14 48 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000ad13:	83 c8 ff             	or     eax,0xffffffff
c000ad16:	83 c4 1c             	add    esp,0x1c
c000ad19:	c3                   	ret    

c000ad1a <Device::~Device()>:
c000ad1a:	ba 10 d5 01 c0       	mov    edx,0xc001d510
c000ad1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad23:	89 10                	mov    DWORD PTR [eax],edx
c000ad25:	90                   	nop
c000ad26:	c3                   	ret    
c000ad27:	90                   	nop

c000ad28 <Device::~Device()>:
c000ad28:	83 ec 0c             	sub    esp,0xc
c000ad2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad2f:	e8 e6 ff ff ff       	call   c000ad1a <Device::~Device()>
c000ad34:	83 c4 04             	add    esp,0x4
c000ad37:	83 ec 08             	sub    esp,0x8
c000ad3a:	68 58 01 00 00       	push   0x158
c000ad3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad43:	e8 9a eb ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	83 c4 0c             	add    esp,0xc
c000ad4e:	c3                   	ret    
c000ad4f:	90                   	nop

c000ad50 <Device::findAndLoadDriver()>:
c000ad50:	c7 44 24 04 ce d4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d4ce
c000ad58:	e9 7b ec ff ff       	jmp    c00099d8 <Dbg::kprintf(char const*, ...)>
c000ad5d:	90                   	nop

c000ad5e <Device::preOpenPCI(PCIDeviceInfo)>:
c000ad5e:	57                   	push   edi
c000ad5f:	b9 09 00 00 00       	mov    ecx,0x9
c000ad64:	56                   	push   esi
c000ad65:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ad69:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ad6d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ad77:	81 c7 18 01 00 00    	add    edi,0x118
c000ad7d:	fc                   	cld    
c000ad7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad80:	5e                   	pop    esi
c000ad81:	5f                   	pop    edi
c000ad82:	c3                   	ret    
c000ad83:	90                   	nop

c000ad84 <Device::preOpenACPI(void*, char*, char*)>:
c000ad84:	57                   	push   edi
c000ad85:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ad8a:	56                   	push   esi
c000ad8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad93:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ad9d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ada3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ada9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000adaf:	b9 0e 00 00 00       	mov    ecx,0xe
c000adb4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000adba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000adbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000adc0:	5e                   	pop    esi
c000adc1:	5f                   	pop    edi
c000adc2:	c3                   	ret    
c000adc3:	90                   	nop

c000adc4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000adc4:	53                   	push   ebx
c000adc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000adcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000add1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000add5:	0f b6 c0             	movzx  eax,al
c000add8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000addc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ade4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ade8:	5b                   	pop    ebx
c000ade9:	e9 a6 05 00 00       	jmp    c000b394 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000adee <Device::getParent()>:
c000adee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adf2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000adf8:	c3                   	ret    
c000adf9:	90                   	nop

c000adfa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000adfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adfe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae02:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ae07:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ae0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ae0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae13:	e9 e8 06 00 00       	jmp    c000b500 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ae18 <Device::addChild(Device*)>:
c000ae18:	53                   	push   ebx
c000ae19:	83 ec 08             	sub    esp,0x8
c000ae1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae24:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ae2a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ae30:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae32:	85 d2                	test   edx,edx
c000ae34:	74 04                	je     c000ae3a <Device::addChild(Device*)+0x22>
c000ae36:	89 d3                	mov    ebx,edx
c000ae38:	eb f6                	jmp    c000ae30 <Device::addChild(Device*)+0x18>
c000ae3a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ae3d:	83 ec 0c             	sub    esp,0xc
c000ae40:	6a 08                	push   0x8
c000ae42:	e8 ce bd ff ff       	call   c0006c15 <malloc>
c000ae47:	89 03                	mov    DWORD PTR [ebx],eax
c000ae49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ae4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ae56:	83 c4 18             	add    esp,0x18
c000ae59:	5b                   	pop    ebx
c000ae5a:	c3                   	ret    
c000ae5b:	90                   	nop

c000ae5c <Device::removeAllChildren()>:
c000ae5c:	56                   	push   esi
c000ae5d:	53                   	push   ebx
c000ae5e:	52                   	push   edx
c000ae5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae63:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ae69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae6c:	74 17                	je     c000ae85 <Device::removeAllChildren()+0x29>
c000ae6e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ae71:	85 c0                	test   eax,eax
c000ae73:	74 0c                	je     c000ae81 <Device::removeAllChildren()+0x25>
c000ae75:	83 ec 0c             	sub    esp,0xc
c000ae78:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae7a:	50                   	push   eax
c000ae7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ae7e:	83 c4 10             	add    esp,0x10
c000ae81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae83:	eb e4                	jmp    c000ae69 <Device::removeAllChildren()+0xd>
c000ae85:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ae8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ae91:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ae97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ae9e:	58                   	pop    eax
c000ae9f:	5b                   	pop    ebx
c000aea0:	5e                   	pop    esi
c000aea1:	c3                   	ret    

c000aea2 <Device::hibernateAll()>:
c000aea2:	53                   	push   ebx
c000aea3:	83 ec 14             	sub    esp,0x14
c000aea6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000aeaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aeac:	53                   	push   ebx
c000aead:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000aeb0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000aeb6:	83 c4 10             	add    esp,0x10
c000aeb9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aebc:	74 0f                	je     c000aecd <Device::hibernateAll()+0x2b>
c000aebe:	83 ec 0c             	sub    esp,0xc
c000aec1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aec4:	e8 d9 ff ff ff       	call   c000aea2 <Device::hibernateAll()>
c000aec9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aecb:	eb e9                	jmp    c000aeb6 <Device::hibernateAll()+0x14>
c000aecd:	83 c4 08             	add    esp,0x8
c000aed0:	5b                   	pop    ebx
c000aed1:	c3                   	ret    

c000aed2 <Device::wakeAll()>:
c000aed2:	53                   	push   ebx
c000aed3:	83 ec 14             	sub    esp,0x14
c000aed6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000aeda:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aedc:	53                   	push   ebx
c000aedd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000aee0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000aee6:	83 c4 10             	add    esp,0x10
c000aee9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aeec:	74 0f                	je     c000aefd <Device::wakeAll()+0x2b>
c000aeee:	83 ec 0c             	sub    esp,0xc
c000aef1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aef4:	e8 d9 ff ff ff       	call   c000aed2 <Device::wakeAll()>
c000aef9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aefb:	eb e9                	jmp    c000aee6 <Device::wakeAll()+0x14>
c000aefd:	83 c4 08             	add    esp,0x8
c000af00:	5b                   	pop    ebx
c000af01:	c3                   	ret    

c000af02 <Device::detectAll()>:
c000af02:	53                   	push   ebx
c000af03:	83 ec 14             	sub    esp,0x14
c000af06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000af0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af0c:	53                   	push   ebx
c000af0d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000af10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af1c:	74 0f                	je     c000af2d <Device::detectAll()+0x2b>
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af24:	e8 d9 ff ff ff       	call   c000af02 <Device::detectAll()>
c000af29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af2b:	eb e9                	jmp    c000af16 <Device::detectAll()+0x14>
c000af2d:	83 c4 08             	add    esp,0x8
c000af30:	5b                   	pop    ebx
c000af31:	c3                   	ret    

c000af32 <Device::disableLegacyAll()>:
c000af32:	c3                   	ret    
c000af33:	90                   	nop

c000af34 <Device::loadDriversForAll()>:
c000af34:	c3                   	ret    
c000af35:	90                   	nop

c000af36 <Device::closeAll()>:
c000af36:	53                   	push   ebx
c000af37:	83 ec 08             	sub    esp,0x8
c000af3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af40:	6a 00                	push   0x0
c000af42:	6a 00                	push   0x0
c000af44:	6a 00                	push   0x0
c000af46:	53                   	push   ebx
c000af47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000af4a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af56:	74 0f                	je     c000af67 <Device::closeAll()+0x31>
c000af58:	83 ec 0c             	sub    esp,0xc
c000af5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af5e:	e8 d3 ff ff ff       	call   c000af36 <Device::closeAll()>
c000af63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af65:	eb e9                	jmp    c000af50 <Device::closeAll()+0x1a>
c000af67:	83 c4 08             	add    esp,0x8
c000af6a:	5b                   	pop    ebx
c000af6b:	c3                   	ret    

c000af6c <Device::powerSavingAll(PowerSavingLevel)>:
c000af6c:	56                   	push   esi
c000af6d:	53                   	push   ebx
c000af6e:	83 ec 0c             	sub    esp,0xc
c000af71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000af79:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af7b:	56                   	push   esi
c000af7c:	53                   	push   ebx
c000af7d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000af80:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000af86:	83 c4 10             	add    esp,0x10
c000af89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af8c:	74 0f                	je     c000af9d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000af8e:	52                   	push   edx
c000af8f:	52                   	push   edx
c000af90:	56                   	push   esi
c000af91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af94:	e8 d3 ff ff ff       	call   c000af6c <Device::powerSavingAll(PowerSavingLevel)>
c000af99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af9b:	eb e9                	jmp    c000af86 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000af9d:	58                   	pop    eax
c000af9e:	5b                   	pop    ebx
c000af9f:	5e                   	pop    esi
c000afa0:	c3                   	ret    
c000afa1:	90                   	nop

c000afa2 <Device::setName(char const*)>:
c000afa2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000afaa:	e9 71 56 ff ff       	jmp    c0000620 <strcpy>
c000afaf:	90                   	nop

c000afb0 <Device::Device(char const*)>:
c000afb0:	83 ec 1c             	sub    esp,0x1c
c000afb3:	ba 10 d5 01 c0       	mov    edx,0xc001d510
c000afb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afbc:	89 10                	mov    DWORD PTR [eax],edx
c000afbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afc2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000afcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afd0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000afda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afde:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000afe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afec:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000aff6:	83 ec 08             	sub    esp,0x8
c000aff9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000affd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b001:	e8 9c ff ff ff       	call   c000afa2 <Device::setName(char const*)>
c000b006:	83 c4 10             	add    esp,0x10
c000b009:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000b011:	83 ec 0c             	sub    esp,0xc
c000b014:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b018:	e8 f8 bb ff ff       	call   c0006c15 <malloc>
c000b01d:	83 c4 10             	add    esp,0x10
c000b020:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b026:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b02d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b031:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000b037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b03b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000b041:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b04b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000b051:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b05c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000b063:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b067:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000b06e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b072:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000b07c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b080:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000b08a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b08e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000b098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b09c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000b0a6:	90                   	nop
c000b0a7:	83 c4 1c             	add    esp,0x1c
c000b0aa:	c3                   	ret    
c000b0ab:	90                   	nop

c000b0ac <Device::getName()>:
c000b0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b0:	05 d0 00 00 00       	add    eax,0xd0
c000b0b5:	c3                   	ret    

c000b0b6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0bd:	83 ec 08             	sub    esp,0x8
c000b0c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c4:	50                   	push   eax
c000b0c5:	e8 e6 fe ff ff       	call   c000afb0 <Device::Device(char const*)>
c000b0ca:	83 c4 10             	add    esp,0x10
c000b0cd:	ba 3c d5 01 c0       	mov    edx,0xc001d53c
c000b0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d6:	89 10                	mov    DWORD PTR [eax],edx
c000b0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0dc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000b0e6:	90                   	nop
c000b0e7:	83 c4 0c             	add    esp,0xc
c000b0ea:	c3                   	ret    
c000b0eb:	90                   	nop

c000b0ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000b0ec:	57                   	push   edi
c000b0ed:	56                   	push   esi
c000b0ee:	53                   	push   ebx
c000b0ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b0f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b0fb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000b101:	75 0c                	jne    c000b10f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000b103:	52                   	push   edx
c000b104:	52                   	push   edx
c000b105:	53                   	push   ebx
c000b106:	56                   	push   esi
c000b107:	e8 96 0a 01 00       	call   c001bba2 <LinkedList<Device>::addElement(Device*)>
c000b10c:	83 c4 10             	add    esp,0x10
c000b10f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b115:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b118:	74 12                	je     c000b12c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000b11a:	50                   	push   eax
c000b11b:	57                   	push   edi
c000b11c:	56                   	push   esi
c000b11d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b120:	e8 c7 ff ff ff       	call   c000b0ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b125:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b127:	83 c4 10             	add    esp,0x10
c000b12a:	eb e9                	jmp    c000b115 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000b12c:	5b                   	pop    ebx
c000b12d:	5e                   	pop    esi
c000b12e:	5f                   	pop    edi
c000b12f:	c3                   	ret    

c000b130 <getDevicesOfType(DeviceType)>:
c000b130:	53                   	push   ebx
c000b131:	83 ec 14             	sub    esp,0x14
c000b134:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b138:	53                   	push   ebx
c000b139:	e8 40 0b 01 00       	call   c001bc7e <LinkedList<Device>::LinkedList()>
c000b13e:	83 c4 0c             	add    esp,0xc
c000b141:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b145:	53                   	push   ebx
c000b146:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c000b14c:	e8 9b ff ff ff       	call   c000b0ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b151:	89 d8                	mov    eax,ebx
c000b153:	83 c4 18             	add    esp,0x18
c000b156:	5b                   	pop    ebx
c000b157:	c2 04 00             	ret    0x4
c000b15a:	66 90                	xchg   ax,ax

c000b15c <HardDiskController::HardDiskController(char const*)>:
c000b15c:	83 ec 0c             	sub    esp,0xc
c000b15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b163:	83 ec 08             	sub    esp,0x8
c000b166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b16a:	50                   	push   eax
c000b16b:	e8 40 fe ff ff       	call   c000afb0 <Device::Device(char const*)>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	ba 68 d5 01 c0       	mov    edx,0xc001d568
c000b178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b17c:	89 10                	mov    DWORD PTR [eax],edx
c000b17e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b182:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000b18c:	90                   	nop
c000b18d:	83 c4 0c             	add    esp,0xc
c000b190:	c3                   	ret    
c000b191:	90                   	nop
c000b192:	66 90                	xchg   ax,ax

c000b194 <HardDiskController::~HardDiskController()>:
c000b194:	83 ec 0c             	sub    esp,0xc
c000b197:	ba 68 d5 01 c0       	mov    edx,0xc001d568
c000b19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a0:	89 10                	mov    DWORD PTR [eax],edx
c000b1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a6:	83 ec 0c             	sub    esp,0xc
c000b1a9:	50                   	push   eax
c000b1aa:	e8 6b fb ff ff       	call   c000ad1a <Device::~Device()>
c000b1af:	83 c4 10             	add    esp,0x10
c000b1b2:	90                   	nop
c000b1b3:	83 c4 0c             	add    esp,0xc
c000b1b6:	c3                   	ret    
c000b1b7:	90                   	nop

c000b1b8 <HardDiskController::~HardDiskController()>:
c000b1b8:	83 ec 0c             	sub    esp,0xc
c000b1bb:	83 ec 0c             	sub    esp,0xc
c000b1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1c2:	e8 cd ff ff ff       	call   c000b194 <HardDiskController::~HardDiskController()>
c000b1c7:	83 c4 10             	add    esp,0x10
c000b1ca:	83 ec 08             	sub    esp,0x8
c000b1cd:	68 58 01 00 00       	push   0x158
c000b1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1d6:	e8 07 e7 ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000b1db:	83 c4 10             	add    esp,0x10
c000b1de:	83 c4 0c             	add    esp,0xc
c000b1e1:	c3                   	ret    

c000b1e2 <PhysicalDisk::eject()>:
c000b1e2:	83 c8 ff             	or     eax,0xffffffff
c000b1e5:	c3                   	ret    

c000b1e6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ed:	83 ec 08             	sub    esp,0x8
c000b1f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1f4:	50                   	push   eax
c000b1f5:	e8 b6 fd ff ff       	call   c000afb0 <Device::Device(char const*)>
c000b1fa:	83 c4 10             	add    esp,0x10
c000b1fd:	ba 94 d5 01 c0       	mov    edx,0xc001d594
c000b202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b206:	89 10                	mov    DWORD PTR [eax],edx
c000b208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b20c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b217:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000b21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b222:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000b22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b230:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b234:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000b23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b23e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000b248:	90                   	nop
c000b249:	83 c4 0c             	add    esp,0xc
c000b24c:	c3                   	ret    
c000b24d:	90                   	nop

c000b24e <PhysicalDisk::startCache()>:
c000b24e:	56                   	push   esi
c000b24f:	53                   	push   ebx
c000b250:	83 ec 10             	sub    esp,0x10
c000b253:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b257:	6a 44                	push   0x44
c000b259:	e8 b7 b9 ff ff       	call   c0006c15 <malloc>
c000b25e:	89 c6                	mov    esi,eax
c000b260:	58                   	pop    eax
c000b261:	5a                   	pop    edx
c000b262:	53                   	push   ebx
c000b263:	56                   	push   esi
c000b264:	e8 ab 15 00 00       	call   c000c814 <VCache::VCache(PhysicalDisk*)>
c000b269:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000b26f:	83 c4 14             	add    esp,0x14
c000b272:	5b                   	pop    ebx
c000b273:	5e                   	pop    esi
c000b274:	c3                   	ret    
c000b275:	90                   	nop

c000b276 <PhysicalDisk::~PhysicalDisk()>:
c000b276:	83 ec 0c             	sub    esp,0xc
c000b279:	ba 94 d5 01 c0       	mov    edx,0xc001d594
c000b27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b282:	89 10                	mov    DWORD PTR [eax],edx
c000b284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b288:	83 ec 0c             	sub    esp,0xc
c000b28b:	50                   	push   eax
c000b28c:	e8 89 fa ff ff       	call   c000ad1a <Device::~Device()>
c000b291:	83 c4 10             	add    esp,0x10
c000b294:	90                   	nop
c000b295:	83 c4 0c             	add    esp,0xc
c000b298:	c3                   	ret    
c000b299:	90                   	nop

c000b29a <PhysicalDisk::~PhysicalDisk()>:
c000b29a:	83 ec 0c             	sub    esp,0xc
c000b29d:	83 ec 0c             	sub    esp,0xc
c000b2a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2a4:	e8 cd ff ff ff       	call   c000b276 <PhysicalDisk::~PhysicalDisk()>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	83 ec 08             	sub    esp,0x8
c000b2af:	68 6c 01 00 00       	push   0x16c
c000b2b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2b8:	e8 25 e6 ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000b2bd:	83 c4 10             	add    esp,0x10
c000b2c0:	83 c4 0c             	add    esp,0xc
c000b2c3:	c3                   	ret    

c000b2c4 <int_handler>:
c000b2c4:	55                   	push   ebp
c000b2c5:	57                   	push   edi
c000b2c6:	56                   	push   esi
c000b2c7:	53                   	push   ebx
c000b2c8:	83 ec 0c             	sub    esp,0xc
c000b2cb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b2cf:	80 3d 20 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021f20,0x0
c000b2d6:	74 0b                	je     c000b2e3 <int_handler+0x1f>
c000b2d8:	fa                   	cli    
c000b2d9:	f4                   	hlt    
c000b2da:	80 3d 20 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021f20,0x0
c000b2e1:	75 f5                	jne    c000b2d8 <int_handler+0x14>
c000b2e3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000b2e6:	8d 46 e0             	lea    eax,[esi-0x20]
c000b2e9:	83 f8 17             	cmp    eax,0x17
c000b2ec:	76 3e                	jbe    c000b32c <int_handler+0x68>
c000b2ee:	c1 e6 04             	shl    esi,0x4
c000b2f1:	31 db                	xor    ebx,ebx
c000b2f3:	8d ae a0 05 02 c0    	lea    ebp,[esi-0x3ffdfa60]
c000b2f9:	81 c6 a0 f5 01 c0    	add    esi,0xc001f5a0
c000b2ff:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000b303:	85 c0                	test   eax,eax
c000b305:	74 13                	je     c000b31a <int_handler+0x56>
c000b307:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000b30a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000b30e:	74 2a                	je     c000b33a <int_handler+0x76>
c000b310:	83 ec 08             	sub    esp,0x8
c000b313:	52                   	push   edx
c000b314:	57                   	push   edi
c000b315:	ff d0                	call   eax
c000b317:	83 c4 10             	add    esp,0x10
c000b31a:	43                   	inc    ebx
c000b31b:	83 fb 04             	cmp    ebx,0x4
c000b31e:	75 df                	jne    c000b2ff <int_handler+0x3b>
c000b320:	83 c4 0c             	add    esp,0xc
c000b323:	31 c0                	xor    eax,eax
c000b325:	5b                   	pop    ebx
c000b326:	31 d2                	xor    edx,edx
c000b328:	5e                   	pop    esi
c000b329:	5f                   	pop    edi
c000b32a:	5d                   	pop    ebp
c000b32b:	c3                   	ret    
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	50                   	push   eax
c000b330:	e8 c8 95 00 00       	call   c00148fd <HalEndOfInterrupt(int)>
c000b335:	83 c4 10             	add    esp,0x10
c000b338:	eb b4                	jmp    c000b2ee <int_handler+0x2a>
c000b33a:	83 ec 08             	sub    esp,0x8
c000b33d:	52                   	push   edx
c000b33e:	57                   	push   edi
c000b33f:	ff d0                	call   eax
c000b341:	83 c4 10             	add    esp,0x10
c000b344:	83 c4 0c             	add    esp,0xc
c000b347:	5b                   	pop    ebx
c000b348:	5e                   	pop    esi
c000b349:	5f                   	pop    edi
c000b34a:	5d                   	pop    ebp
c000b34b:	c3                   	ret    

c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000b34c:	56                   	push   esi
c000b34d:	31 c0                	xor    eax,eax
c000b34f:	53                   	push   ebx
c000b350:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b354:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b358:	89 ca                	mov    edx,ecx
c000b35a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b35e:	c1 e2 04             	shl    edx,0x4
c000b361:	83 bc 82 a0 05 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdfa60],0x0
c000b369:	74 15                	je     c000b380 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000b36b:	40                   	inc    eax
c000b36c:	83 f8 04             	cmp    eax,0x4
c000b36f:	75 f0                	jne    c000b361 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000b371:	c7 44 24 0c c4 d5 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d5c4
c000b379:	5b                   	pop    ebx
c000b37a:	5e                   	pop    esi
c000b37b:	e9 a7 41 00 00       	jmp    c000f527 <Krnl::panic(char const*)>
c000b380:	8d 04 88             	lea    eax,[eax+ecx*4]
c000b383:	89 1c 85 a0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa60],ebx
c000b38a:	89 34 85 a0 f5 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0a60],esi
c000b391:	5b                   	pop    ebx
c000b392:	5e                   	pop    esi
c000b393:	c3                   	ret    

c000b394 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b394:	57                   	push   edi
c000b395:	8b 15 88 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f488
c000b39b:	56                   	push   esi
c000b39c:	53                   	push   ebx
c000b39d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b3a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3a5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b3ac:	74 5b                	je     c000b409 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b3ae:	89 c7                	mov    edi,eax
c000b3b0:	84 c0                	test   al,al
c000b3b2:	74 24                	je     c000b3d8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b3b4:	83 fe 0f             	cmp    esi,0xf
c000b3b7:	0f 8f d9 00 00 00    	jg     c000b496 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000b3bd:	8a 86 40 ee 01 c0    	mov    al,BYTE PTR [esi-0x3ffe11c0]
c000b3c3:	25 ff 00 00 00       	and    eax,0xff
c000b3c8:	66 8b bc 00 40 1d 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffde2c0]
c000b3d0:	89 c6                	mov    esi,eax
c000b3d2:	66 d1 ef             	shr    di,1
c000b3d5:	83 e7 01             	and    edi,0x1
c000b3d8:	83 ec 08             	sub    esp,0x8
c000b3db:	a1 60 33 02 c0       	mov    eax,ds:0xc0023360
c000b3e0:	31 db                	xor    ebx,ebx
c000b3e2:	50                   	push   eax
c000b3e3:	68 d1 d5 01 c0       	push   0xc001d5d1
c000b3e8:	e8 eb e5 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000b3ed:	83 c4 10             	add    esp,0x10
c000b3f0:	a1 60 33 02 c0       	mov    eax,ds:0xc0023360
c000b3f5:	85 c0                	test   eax,eax
c000b3f7:	7f 51                	jg     c000b44a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000b3f9:	83 ec 0c             	sub    esp,0xc
c000b3fc:	68 e8 d5 01 c0       	push   0xc001d5e8
c000b401:	e8 21 41 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	8d 4e 20             	lea    ecx,[esi+0x20]
c000b40c:	31 d2                	xor    edx,edx
c000b40e:	89 c8                	mov    eax,ecx
c000b410:	c1 e0 04             	shl    eax,0x4
c000b413:	8b 9c 90 a0 05 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdfa60]
c000b41a:	85 db                	test   ebx,ebx
c000b41c:	0f 84 8b 00 00 00    	je     c000b4ad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000b422:	42                   	inc    edx
c000b423:	83 fa 04             	cmp    edx,0x4
c000b426:	75 eb                	jne    c000b413 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000b428:	83 ec 0c             	sub    esp,0xc
c000b42b:	68 3c d6 01 c0       	push   0xc001d63c
c000b430:	e8 f2 40 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000b435:	83 c4 10             	add    esp,0x10
c000b438:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b43d:	5b                   	pop    ebx
c000b43e:	5e                   	pop    esi
c000b43f:	5f                   	pop    edi
c000b440:	c3                   	ret    
c000b441:	43                   	inc    ebx
c000b442:	39 1d 60 33 02 c0    	cmp    DWORD PTR ds:0xc0023360,ebx
c000b448:	7e af                	jle    c000b3f9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000b44a:	83 ec 08             	sub    esp,0x8
c000b44d:	8b 04 9d 80 33 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcc80]
c000b454:	56                   	push   esi
c000b455:	50                   	push   eax
c000b456:	e8 71 f7 00 00       	call   c001abcc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000b45b:	83 c4 10             	add    esp,0x10
c000b45e:	84 c0                	test   al,al
c000b460:	74 df                	je     c000b441 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000b462:	81 e7 ff 00 00 00    	and    edi,0xff
c000b468:	50                   	push   eax
c000b469:	8d 46 20             	lea    eax,[esi+0x20]
c000b46c:	57                   	push   edi
c000b46d:	25 ff 00 00 00       	and    eax,0xff
c000b472:	6a 00                	push   0x0
c000b474:	50                   	push   eax
c000b475:	89 f0                	mov    eax,esi
c000b477:	6a 00                	push   0x0
c000b479:	25 ff 00 00 00       	and    eax,0xff
c000b47e:	6a 00                	push   0x0
c000b480:	50                   	push   eax
c000b481:	8b 04 9d 80 33 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcc80]
c000b488:	50                   	push   eax
c000b489:	e8 b8 f8 00 00       	call   c001ad46 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000b48e:	83 c4 20             	add    esp,0x20
c000b491:	e9 73 ff ff ff       	jmp    c000b409 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b496:	83 ec 0c             	sub    esp,0xc
c000b499:	31 ff                	xor    edi,edi
c000b49b:	68 04 d6 01 c0       	push   0xc001d604
c000b4a0:	e8 82 40 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000b4a5:	83 c4 10             	add    esp,0x10
c000b4a8:	e9 2b ff ff ff       	jmp    c000b3d8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b4ad:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b4b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4b4:	89 14 85 a0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa60],edx
c000b4bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b4bf:	5b                   	pop    ebx
c000b4c0:	89 14 85 a0 f5 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0a60],edx
c000b4c7:	89 f0                	mov    eax,esi
c000b4c9:	5e                   	pop    esi
c000b4ca:	5f                   	pop    edi
c000b4cb:	c3                   	ret    

c000b4cc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000b4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b4d4:	c1 e0 04             	shl    eax,0x4
c000b4d7:	8d 50 10             	lea    edx,[eax+0x10]
c000b4da:	39 88 a0 05 02 c0    	cmp    DWORD PTR [eax-0x3ffdfa60],ecx
c000b4e0:	74 08                	je     c000b4ea <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000b4e2:	83 c0 04             	add    eax,0x4
c000b4e5:	39 d0                	cmp    eax,edx
c000b4e7:	75 f1                	jne    c000b4da <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000b4e9:	c3                   	ret    
c000b4ea:	c7 80 a0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa60],0x0
c000b4f4:	c7 80 a0 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0a60],0x0
c000b4fe:	eb e2                	jmp    c000b4e2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000b500 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b500:	53                   	push   ebx
c000b501:	83 ec 08             	sub    esp,0x8
c000b504:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b508:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000b50d:	74 0e                	je     c000b51d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b50f:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000b514:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000b51b:	75 37                	jne    c000b554 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000b51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b521:	83 c0 20             	add    eax,0x20
c000b524:	c1 e0 04             	shl    eax,0x4
c000b527:	8d 50 10             	lea    edx,[eax+0x10]
c000b52a:	39 98 a0 05 02 c0    	cmp    DWORD PTR [eax-0x3ffdfa60],ebx
c000b530:	74 0c                	je     c000b53e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000b532:	83 c0 04             	add    eax,0x4
c000b535:	39 d0                	cmp    eax,edx
c000b537:	75 f1                	jne    c000b52a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000b539:	83 c4 08             	add    esp,0x8
c000b53c:	5b                   	pop    ebx
c000b53d:	c3                   	ret    
c000b53e:	c7 80 a0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa60],0x0
c000b548:	c7 80 a0 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0a60],0x0
c000b552:	eb de                	jmp    c000b532 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000b554:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000b559:	7f 12                	jg     c000b56d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000b55b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b55f:	31 c0                	xor    eax,eax
c000b561:	8a 81 40 ee 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe11c0]
c000b567:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b56b:	eb b0                	jmp    c000b51d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b56d:	83 ec 0c             	sub    esp,0xc
c000b570:	68 f5 d5 01 c0       	push   0xc001d5f5
c000b575:	e8 ad 3f 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000b57a:	83 c4 10             	add    esp,0x10
c000b57d:	eb 9e                	jmp    c000b51d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000b57f <setupINTS()>:
c000b57f:	31 c0                	xor    eax,eax
c000b581:	c7 80 a0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa60],0x0
c000b58b:	c7 80 a0 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0a60],0x0
c000b595:	c7 80 a4 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa5c],0x0
c000b59f:	c7 80 a4 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0a5c],0x0
c000b5a9:	c7 80 a8 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa58],0x0
c000b5b3:	c7 80 a8 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0a58],0x0
c000b5bd:	c7 80 ac 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa54],0x0
c000b5c7:	c7 80 ac f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0a54],0x0
c000b5d1:	83 c0 10             	add    eax,0x10
c000b5d4:	3d 00 10 00 00       	cmp    eax,0x1000
c000b5d9:	75 a6                	jne    c000b581 <setupINTS()+0x2>
c000b5db:	c3                   	ret    

c000b5dc <convertLegacyIRQNumber(int)>:
c000b5dc:	83 ec 0c             	sub    esp,0xc
c000b5df:	8b 15 88 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f488
c000b5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5e9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b5f0:	74 0f                	je     c000b601 <convertLegacyIRQNumber(int)+0x25>
c000b5f2:	83 f8 0f             	cmp    eax,0xf
c000b5f5:	7f 0e                	jg     c000b605 <convertLegacyIRQNumber(int)+0x29>
c000b5f7:	31 c9                	xor    ecx,ecx
c000b5f9:	8a 88 40 ee 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe11c0]
c000b5ff:	89 c8                	mov    eax,ecx
c000b601:	83 c4 0c             	add    esp,0xc
c000b604:	c3                   	ret    
c000b605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b609:	83 ec 0c             	sub    esp,0xc
c000b60c:	68 04 d6 01 c0       	push   0xc001d604
c000b611:	e8 11 3f 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b61d:	83 c4 0c             	add    esp,0xc
c000b620:	c3                   	ret    
c000b621:	90                   	nop

c000b622 <startGUI(void*)>:
c000b622:	55                   	push   ebp
c000b623:	89 e5                	mov    ebp,esp
c000b625:	53                   	push   ebx
c000b626:	83 ec 04             	sub    esp,0x4
c000b629:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000b62e:	48                   	dec    eax
c000b62f:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000b634:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000b639:	85 c0                	test   eax,eax
c000b63b:	75 01                	jne    c000b63e <startGUI(void*)+0x1c>
c000b63d:	fb                   	sti    
c000b63e:	8b 1d 88 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f488
c000b644:	83 ec 08             	sub    esp,0x8
c000b647:	6a 01                	push   0x1
c000b649:	68 61 d6 01 c0       	push   0xc001d661
c000b64e:	e8 54 69 00 00       	call   c0011fa7 <Thr::loadDLL(char const*, bool)>
c000b653:	83 c4 10             	add    esp,0x10
c000b656:	83 ec 08             	sub    esp,0x8
c000b659:	53                   	push   ebx
c000b65a:	50                   	push   eax
c000b65b:	e8 78 6b 00 00       	call   c00121d8 <Thr::executeDLL(unsigned long, void*)>
c000b660:	83 c4 10             	add    esp,0x10
c000b663:	8b 1d 88 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f488
c000b669:	83 ec 08             	sub    esp,0x8
c000b66c:	6a 01                	push   0x1
c000b66e:	68 7b d6 01 c0       	push   0xc001d67b
c000b673:	e8 2f 69 00 00       	call   c0011fa7 <Thr::loadDLL(char const*, bool)>
c000b678:	83 c4 10             	add    esp,0x10
c000b67b:	83 ec 08             	sub    esp,0x8
c000b67e:	53                   	push   ebx
c000b67f:	50                   	push   eax
c000b680:	e8 53 6b 00 00       	call   c00121d8 <Thr::executeDLL(unsigned long, void*)>
c000b685:	83 c4 10             	add    esp,0x10
c000b688:	90                   	nop
c000b689:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b68c:	c9                   	leave  
c000b68d:	c3                   	ret    

c000b68e <startGUIVESA(void*)>:
c000b68e:	55                   	push   ebp
c000b68f:	89 e5                	mov    ebp,esp
c000b691:	53                   	push   ebx
c000b692:	83 ec 04             	sub    esp,0x4
c000b695:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000b69a:	48                   	dec    eax
c000b69b:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000b6a0:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000b6a5:	85 c0                	test   eax,eax
c000b6a7:	75 01                	jne    c000b6aa <startGUIVESA(void*)+0x1c>
c000b6a9:	fb                   	sti    
c000b6aa:	8b 1d 88 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f488
c000b6b0:	83 ec 08             	sub    esp,0x8
c000b6b3:	6a 01                	push   0x1
c000b6b5:	68 99 d6 01 c0       	push   0xc001d699
c000b6ba:	e8 e8 68 00 00       	call   c0011fa7 <Thr::loadDLL(char const*, bool)>
c000b6bf:	83 c4 10             	add    esp,0x10
c000b6c2:	83 ec 08             	sub    esp,0x8
c000b6c5:	53                   	push   ebx
c000b6c6:	50                   	push   eax
c000b6c7:	e8 0c 6b 00 00       	call   c00121d8 <Thr::executeDLL(unsigned long, void*)>
c000b6cc:	83 c4 10             	add    esp,0x10
c000b6cf:	8b 1d 88 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f488
c000b6d5:	83 ec 08             	sub    esp,0x8
c000b6d8:	6a 01                	push   0x1
c000b6da:	68 7b d6 01 c0       	push   0xc001d67b
c000b6df:	e8 c3 68 00 00       	call   c0011fa7 <Thr::loadDLL(char const*, bool)>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	83 ec 08             	sub    esp,0x8
c000b6ea:	53                   	push   ebx
c000b6eb:	50                   	push   eax
c000b6ec:	e8 e7 6a 00 00       	call   c00121d8 <Thr::executeDLL(unsigned long, void*)>
c000b6f1:	83 c4 10             	add    esp,0x10
c000b6f4:	90                   	nop
c000b6f5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b6f8:	c9                   	leave  
c000b6f9:	c3                   	ret    

c000b6fa <sendKeyToTerminal(unsigned char)>:
c000b6fa:	55                   	push   ebp
c000b6fb:	89 e5                	mov    ebp,esp
c000b6fd:	83 ec 28             	sub    esp,0x28
c000b700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b703:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000b706:	8b 15 d4 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f4d4
c000b70c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000b70f:	25 ff 00 00 00       	and    eax,0xff
c000b714:	83 ec 08             	sub    esp,0x8
c000b717:	50                   	push   eax
c000b718:	52                   	push   edx
c000b719:	e8 76 c8 ff ff       	call   c0007f94 <VgaText::receiveKey(unsigned char)>
c000b71e:	83 c4 10             	add    esp,0x10
c000b721:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000b725:	0f 85 8f 00 00 00    	jne    c000b7ba <sendKeyToTerminal(unsigned char)+0xc0>
c000b72b:	fa                   	cli    
c000b72c:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000b731:	40                   	inc    eax
c000b732:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000b737:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000b73c:	40                   	inc    eax
c000b73d:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c000b742:	a1 a0 15 02 c0       	mov    eax,ds:0xc00215a0
c000b747:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b74a:	c7 05 a0 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00215a0,0x0
c000b754:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000b758:	74 1f                	je     c000b779 <sendKeyToTerminal(unsigned char)+0x7f>
c000b75a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b75d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000b760:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b763:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b766:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b769:	83 ec 0c             	sub    esp,0xc
c000b76c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b76f:	e8 ec 76 00 00       	call   c0012e60 <unblockTask(ThreadControlBlock*)>
c000b774:	83 c4 10             	add    esp,0x10
c000b777:	eb db                	jmp    c000b754 <sendKeyToTerminal(unsigned char)+0x5a>
c000b779:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000b77e:	48                   	dec    eax
c000b77f:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c000b784:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000b789:	85 c0                	test   eax,eax
c000b78b:	75 18                	jne    c000b7a5 <sendKeyToTerminal(unsigned char)+0xab>
c000b78d:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c000b792:	85 c0                	test   eax,eax
c000b794:	74 0f                	je     c000b7a5 <sendKeyToTerminal(unsigned char)+0xab>
c000b796:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c000b7a0:	e8 f7 71 00 00       	call   c001299c <schedule()>
c000b7a5:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000b7aa:	48                   	dec    eax
c000b7ab:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000b7b0:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000b7b5:	85 c0                	test   eax,eax
c000b7b7:	75 01                	jne    c000b7ba <sendKeyToTerminal(unsigned char)+0xc0>
c000b7b9:	fb                   	sti    
c000b7ba:	90                   	nop
c000b7bb:	c9                   	leave  
c000b7bc:	c3                   	ret    

c000b7bd <sendKeyboardToken(KeyboardToken)>:
c000b7bd:	55                   	push   ebp
c000b7be:	89 e5                	mov    ebp,esp
c000b7c0:	83 ec 18             	sub    esp,0x18
c000b7c3:	e8 c8 3f 00 00       	call   c000f790 <Krnl::userIOReceived()>
c000b7c8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000b7cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ce:	25 ff ff 00 00       	and    eax,0xffff
c000b7d3:	83 f2 01             	xor    edx,0x1
c000b7d6:	88 90 c0 15 02 c0    	mov    BYTE PTR [eax-0x3ffdea40],dl
c000b7dc:	a1 a8 15 02 c0       	mov    eax,ds:0xc00215a8
c000b7e1:	85 c0                	test   eax,eax
c000b7e3:	74 24                	je     c000b809 <sendKeyboardToken(KeyboardToken)+0x4c>
c000b7e5:	8b 0d a8 15 02 c0    	mov    ecx,DWORD PTR ds:0xc00215a8
c000b7eb:	83 ec 04             	sub    esp,0x4
c000b7ee:	68 c0 15 02 c0       	push   0xc00215c0
c000b7f3:	83 ec 08             	sub    esp,0x8
c000b7f6:	89 e2                	mov    edx,esp
c000b7f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7fb:	89 02                	mov    DWORD PTR [edx],eax
c000b7fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b800:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b804:	ff d1                	call   ecx
c000b806:	83 c4 10             	add    esp,0x10
c000b809:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000b80d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000b810:	a0 c8 19 02 c0       	mov    al,ds:0xc00219c8
c000b815:	38 c2                	cmp    dl,al
c000b817:	74 1e                	je     c000b837 <sendKeyboardToken(KeyboardToken)+0x7a>
c000b819:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000b81c:	a2 c8 19 02 c0       	mov    ds:0xc00219c8,al
c000b821:	a0 c8 19 02 c0       	mov    al,ds:0xc00219c8
c000b826:	25 ff 00 00 00       	and    eax,0xff
c000b82b:	83 ec 0c             	sub    esp,0xc
c000b82e:	50                   	push   eax
c000b82f:	e8 b2 be ff ff       	call   c00076e6 <setTerminalScrollLock(bool)>
c000b834:	83 c4 10             	add    esp,0x10
c000b837:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000b83a:	84 c0                	test   al,al
c000b83c:	0f 84 ae 00 00 00    	je     c000b8f0 <sendKeyboardToken(KeyboardToken)+0x133>
c000b842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b845:	66 3d 10 03          	cmp    ax,0x310
c000b849:	75 06                	jne    c000b851 <sendKeyboardToken(KeyboardToken)+0x94>
c000b84b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000b851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b854:	66 3d 11 03          	cmp    ax,0x311
c000b858:	75 06                	jne    c000b860 <sendKeyboardToken(KeyboardToken)+0xa3>
c000b85a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000b860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b863:	66 3d 12 03          	cmp    ax,0x312
c000b867:	75 06                	jne    c000b86f <sendKeyboardToken(KeyboardToken)+0xb2>
c000b869:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000b86f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b872:	66 3d 13 03          	cmp    ax,0x313
c000b876:	75 06                	jne    c000b87e <sendKeyboardToken(KeyboardToken)+0xc1>
c000b878:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000b87e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b881:	66 3d 14 03          	cmp    ax,0x314
c000b885:	75 06                	jne    c000b88d <sendKeyboardToken(KeyboardToken)+0xd0>
c000b887:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000b88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b890:	66 3d 15 03          	cmp    ax,0x315
c000b894:	75 06                	jne    c000b89c <sendKeyboardToken(KeyboardToken)+0xdf>
c000b896:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b89c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b89f:	66 3d 16 03          	cmp    ax,0x316
c000b8a3:	75 06                	jne    c000b8ab <sendKeyboardToken(KeyboardToken)+0xee>
c000b8a5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000b8ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8ae:	66 3d 17 03          	cmp    ax,0x317
c000b8b2:	75 06                	jne    c000b8ba <sendKeyboardToken(KeyboardToken)+0xfd>
c000b8b4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000b8ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8bd:	66 3d 18 03          	cmp    ax,0x318
c000b8c1:	75 06                	jne    c000b8c9 <sendKeyboardToken(KeyboardToken)+0x10c>
c000b8c3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000b8c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8cc:	66 3d 19 03          	cmp    ax,0x319
c000b8d0:	75 06                	jne    c000b8d8 <sendKeyboardToken(KeyboardToken)+0x11b>
c000b8d2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000b8d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8db:	66 3d 1a 03          	cmp    ax,0x31a
c000b8df:	0f 85 c9 00 00 00    	jne    c000b9ae <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b8e5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000b8eb:	e9 be 00 00 00       	jmp    c000b9ae <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b8f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8f3:	66 3d 10 03          	cmp    ax,0x310
c000b8f7:	75 0a                	jne    c000b903 <sendKeyboardToken(KeyboardToken)+0x146>
c000b8f9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000b8ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b906:	66 3d 11 03          	cmp    ax,0x311
c000b90a:	75 0a                	jne    c000b916 <sendKeyboardToken(KeyboardToken)+0x159>
c000b90c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000b912:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b919:	66 3d 12 03          	cmp    ax,0x312
c000b91d:	75 0a                	jne    c000b929 <sendKeyboardToken(KeyboardToken)+0x16c>
c000b91f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000b925:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b92c:	66 3d 13 03          	cmp    ax,0x313
c000b930:	75 0a                	jne    c000b93c <sendKeyboardToken(KeyboardToken)+0x17f>
c000b932:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000b938:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b93c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b93f:	66 3d 14 03          	cmp    ax,0x314
c000b943:	75 0a                	jne    c000b94f <sendKeyboardToken(KeyboardToken)+0x192>
c000b945:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000b94b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b94f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b952:	66 3d 15 03          	cmp    ax,0x315
c000b956:	75 0a                	jne    c000b962 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000b958:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b95e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b965:	66 3d 16 03          	cmp    ax,0x316
c000b969:	75 0a                	jne    c000b975 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000b96b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000b971:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b978:	66 3d 17 03          	cmp    ax,0x317
c000b97c:	75 0a                	jne    c000b988 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000b97e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000b984:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b98b:	66 3d 18 03          	cmp    ax,0x318
c000b98f:	75 0a                	jne    c000b99b <sendKeyboardToken(KeyboardToken)+0x1de>
c000b991:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000b997:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b99b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b99e:	66 3d 19 03          	cmp    ax,0x319
c000b9a2:	75 0a                	jne    c000b9ae <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b9a4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000b9aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9b1:	66 3d 00 02          	cmp    ax,0x200
c000b9b5:	75 2c                	jne    c000b9e3 <sendKeyboardToken(KeyboardToken)+0x226>
c000b9b7:	a0 c0 19 02 c0       	mov    al,ds:0xc00219c0
c000b9bc:	83 f0 01             	xor    eax,0x1
c000b9bf:	84 c0                	test   al,al
c000b9c1:	74 20                	je     c000b9e3 <sendKeyboardToken(KeyboardToken)+0x226>
c000b9c3:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c000b9c8:	6a 01                	push   0x1
c000b9ca:	6a 00                	push   0x0
c000b9cc:	68 22 b6 00 c0       	push   0xc000b622
c000b9d1:	50                   	push   eax
c000b9d2:	e8 a5 6d 00 00       	call   c001277c <Process::createThread(void (*)(void*), void*, int)>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	c6 05 c0 19 02 c0 01 	mov    BYTE PTR ds:0xc00219c0,0x1
c000b9e1:	eb 33                	jmp    c000ba16 <sendKeyboardToken(KeyboardToken)+0x259>
c000b9e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9e6:	66 3d 01 02          	cmp    ax,0x201
c000b9ea:	75 2a                	jne    c000ba16 <sendKeyboardToken(KeyboardToken)+0x259>
c000b9ec:	a0 c0 19 02 c0       	mov    al,ds:0xc00219c0
c000b9f1:	83 f0 01             	xor    eax,0x1
c000b9f4:	84 c0                	test   al,al
c000b9f6:	74 1e                	je     c000ba16 <sendKeyboardToken(KeyboardToken)+0x259>
c000b9f8:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c000b9fd:	6a 01                	push   0x1
c000b9ff:	6a 00                	push   0x0
c000ba01:	68 8e b6 00 c0       	push   0xc000b68e
c000ba06:	50                   	push   eax
c000ba07:	e8 70 6d 00 00       	call   c001277c <Process::createThread(void (*)(void*), void*, int)>
c000ba0c:	83 c4 10             	add    esp,0x10
c000ba0f:	c6 05 c0 19 02 c0 01 	mov    BYTE PTR ds:0xc00219c0,0x1
c000ba16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba19:	66 3d 1d 03          	cmp    ax,0x31d
c000ba1d:	75 06                	jne    c000ba25 <sendKeyboardToken(KeyboardToken)+0x268>
c000ba1f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ba25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba28:	66 3d 1c 03          	cmp    ax,0x31c
c000ba2c:	75 06                	jne    c000ba34 <sendKeyboardToken(KeyboardToken)+0x277>
c000ba2e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ba34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba37:	66 3d 1b 03          	cmp    ax,0x31b
c000ba3b:	75 06                	jne    c000ba43 <sendKeyboardToken(KeyboardToken)+0x286>
c000ba3d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ba43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba46:	66 3d 1e 03          	cmp    ax,0x31e
c000ba4a:	75 06                	jne    c000ba52 <sendKeyboardToken(KeyboardToken)+0x295>
c000ba4c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ba52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba55:	66 3d 1f 03          	cmp    ax,0x31f
c000ba59:	75 06                	jne    c000ba61 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000ba5b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ba61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba64:	66 3d 1a 03          	cmp    ax,0x31a
c000ba68:	75 06                	jne    c000ba70 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000ba6a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ba70:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ba74:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ba77:	83 f0 01             	xor    eax,0x1
c000ba7a:	84 c0                	test   al,al
c000ba7c:	74 7b                	je     c000baf9 <sendKeyboardToken(KeyboardToken)+0x33c>
c000ba7e:	a0 c1 16 02 c0       	mov    al,ds:0xc00216c1
c000ba83:	84 c0                	test   al,al
c000ba85:	74 43                	je     c000baca <sendKeyboardToken(KeyboardToken)+0x30d>
c000ba87:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ba8b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000ba8f:	74 2d                	je     c000babe <sendKeyboardToken(KeyboardToken)+0x301>
c000ba91:	8b 15 c4 19 02 c0    	mov    edx,DWORD PTR ds:0xc00219c4
c000ba97:	89 d0                	mov    eax,edx
c000ba99:	c1 e0 02             	shl    eax,0x2
c000ba9c:	01 d0                	add    eax,edx
c000ba9e:	01 c0                	add    eax,eax
c000baa0:	a3 c4 19 02 c0       	mov    ds:0xc00219c4,eax
c000baa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000baa8:	25 ff ff 00 00       	and    eax,0xffff
c000baad:	8d 50 d0             	lea    edx,[eax-0x30]
c000bab0:	a1 c4 19 02 c0       	mov    eax,ds:0xc00219c4
c000bab5:	01 d0                	add    eax,edx
c000bab7:	a3 c4 19 02 c0       	mov    ds:0xc00219c4,eax
c000babc:	eb 71                	jmp    c000bb2f <sendKeyboardToken(KeyboardToken)+0x372>
c000babe:	c7 05 c4 19 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00219c4,0x0
c000bac8:	eb 65                	jmp    c000bb2f <sendKeyboardToken(KeyboardToken)+0x372>
c000baca:	a1 c4 19 02 c0       	mov    eax,ds:0xc00219c4
c000bacf:	85 c0                	test   eax,eax
c000bad1:	74 1a                	je     c000baed <sendKeyboardToken(KeyboardToken)+0x330>
c000bad3:	a1 c4 19 02 c0       	mov    eax,ds:0xc00219c4
c000bad8:	25 ff 00 00 00       	and    eax,0xff
c000badd:	83 ec 0c             	sub    esp,0xc
c000bae0:	50                   	push   eax
c000bae1:	e8 14 fc ff ff       	call   c000b6fa <sendKeyToTerminal(unsigned char)>
c000bae6:	83 c4 10             	add    esp,0x10
c000bae9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000baed:	c7 05 c4 19 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00219c4,0x0
c000baf7:	eb 36                	jmp    c000bb2f <sendKeyboardToken(KeyboardToken)+0x372>
c000baf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bafc:	66 3d 01 01          	cmp    ax,0x101
c000bb00:	75 2d                	jne    c000bb2f <sendKeyboardToken(KeyboardToken)+0x372>
c000bb02:	a1 c4 19 02 c0       	mov    eax,ds:0xc00219c4
c000bb07:	85 c0                	test   eax,eax
c000bb09:	74 1a                	je     c000bb25 <sendKeyboardToken(KeyboardToken)+0x368>
c000bb0b:	a1 c4 19 02 c0       	mov    eax,ds:0xc00219c4
c000bb10:	25 ff 00 00 00       	and    eax,0xff
c000bb15:	83 ec 0c             	sub    esp,0xc
c000bb18:	50                   	push   eax
c000bb19:	e8 dc fb ff ff       	call   c000b6fa <sendKeyToTerminal(unsigned char)>
c000bb1e:	83 c4 10             	add    esp,0x10
c000bb21:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000bb25:	c7 05 c4 19 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00219c4,0x0
c000bb2f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000bb32:	83 f0 01             	xor    eax,0x1
c000bb35:	84 c0                	test   al,al
c000bb37:	74 4e                	je     c000bb87 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bb39:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bb3c:	83 f0 01             	xor    eax,0x1
c000bb3f:	84 c0                	test   al,al
c000bb41:	74 44                	je     c000bb87 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bb43:	a0 c0 16 02 c0       	mov    al,ds:0xc00216c0
c000bb48:	83 f0 01             	xor    eax,0x1
c000bb4b:	84 c0                	test   al,al
c000bb4d:	74 38                	je     c000bb87 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bb4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb52:	66 83 f8 1f          	cmp    ax,0x1f
c000bb56:	76 09                	jbe    c000bb61 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000bb58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb5b:	66 83 f8 7e          	cmp    ax,0x7e
c000bb5f:	76 12                	jbe    c000bb73 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000bb61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb64:	66 83 f8 0a          	cmp    ax,0xa
c000bb68:	74 09                	je     c000bb73 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000bb6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb6d:	66 83 f8 08          	cmp    ax,0x8
c000bb71:	75 14                	jne    c000bb87 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bb73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb76:	25 ff 00 00 00       	and    eax,0xff
c000bb7b:	83 ec 0c             	sub    esp,0xc
c000bb7e:	50                   	push   eax
c000bb7f:	e8 76 fb ff ff       	call   c000b6fa <sendKeyToTerminal(unsigned char)>
c000bb84:	83 c4 10             	add    esp,0x10
c000bb87:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000bb8a:	83 f0 01             	xor    eax,0x1
c000bb8d:	84 c0                	test   al,al
c000bb8f:	74 51                	je     c000bbe2 <sendKeyboardToken(KeyboardToken)+0x425>
c000bb91:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bb94:	83 f0 01             	xor    eax,0x1
c000bb97:	84 c0                	test   al,al
c000bb99:	74 47                	je     c000bbe2 <sendKeyboardToken(KeyboardToken)+0x425>
c000bb9b:	a0 c0 16 02 c0       	mov    al,ds:0xc00216c0
c000bba0:	84 c0                	test   al,al
c000bba2:	74 3e                	je     c000bbe2 <sendKeyboardToken(KeyboardToken)+0x425>
c000bba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bba7:	66 83 f8 3f          	cmp    ax,0x3f
c000bbab:	76 35                	jbe    c000bbe2 <sendKeyboardToken(KeyboardToken)+0x425>
c000bbad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbb0:	66 83 f8 7f          	cmp    ax,0x7f
c000bbb4:	77 2c                	ja     c000bbe2 <sendKeyboardToken(KeyboardToken)+0x425>
c000bbb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbb9:	88 c2                	mov    dl,al
c000bbbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbbe:	66 83 f8 5f          	cmp    ax,0x5f
c000bbc2:	76 04                	jbe    c000bbc8 <sendKeyboardToken(KeyboardToken)+0x40b>
c000bbc4:	b0 20                	mov    al,0x20
c000bbc6:	eb 02                	jmp    c000bbca <sendKeyboardToken(KeyboardToken)+0x40d>
c000bbc8:	b0 00                	mov    al,0x0
c000bbca:	29 c2                	sub    edx,eax
c000bbcc:	88 d0                	mov    al,dl
c000bbce:	83 e8 40             	sub    eax,0x40
c000bbd1:	25 ff 00 00 00       	and    eax,0xff
c000bbd6:	83 ec 0c             	sub    esp,0xc
c000bbd9:	50                   	push   eax
c000bbda:	e8 1b fb ff ff       	call   c000b6fa <sendKeyToTerminal(unsigned char)>
c000bbdf:	83 c4 10             	add    esp,0x10
c000bbe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbe5:	66 3d 00 03          	cmp    ax,0x300
c000bbe9:	75 0f                	jne    c000bbfa <sendKeyboardToken(KeyboardToken)+0x43d>
c000bbeb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bbee:	83 f0 01             	xor    eax,0x1
c000bbf1:	84 c0                	test   al,al
c000bbf3:	74 05                	je     c000bbfa <sendKeyboardToken(KeyboardToken)+0x43d>
c000bbf5:	e8 ed ba ff ff       	call   c00076e7 <doTerminalCycle()>
c000bbfa:	90                   	nop
c000bbfb:	c9                   	leave  
c000bbfc:	c3                   	ret    

c000bbfd <clearInternalKeybuffer(VgaText*)>:
c000bbfd:	55                   	push   ebp
c000bbfe:	89 e5                	mov    ebp,esp
c000bc00:	83 ec 08             	sub    esp,0x8
c000bc03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc06:	05 b2 00 00 00       	add    eax,0xb2
c000bc0b:	83 ec 0c             	sub    esp,0xc
c000bc0e:	50                   	push   eax
c000bc0f:	e8 4c 49 ff ff       	call   c0000560 <strlen>
c000bc14:	83 c4 10             	add    esp,0x10
c000bc17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bc1a:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bc20:	83 ec 04             	sub    esp,0x4
c000bc23:	50                   	push   eax
c000bc24:	6a 00                	push   0x0
c000bc26:	52                   	push   edx
c000bc27:	e8 c4 48 ff ff       	call   c00004f0 <memset>
c000bc2c:	83 c4 10             	add    esp,0x10
c000bc2f:	90                   	nop
c000bc30:	c9                   	leave  
c000bc31:	c3                   	ret    

c000bc32 <readKeyboard(VgaText*, char*, unsigned long)>:
c000bc32:	55                   	push   ebp
c000bc33:	89 e5                	mov    ebp,esp
c000bc35:	83 ec 18             	sub    esp,0x18
c000bc38:	a1 a8 15 02 c0       	mov    eax,ds:0xc00215a8
c000bc3d:	85 c0                	test   eax,eax
c000bc3f:	74 2a                	je     c000bc6b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000bc41:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000bc47:	8b 0d a8 15 02 c0    	mov    ecx,DWORD PTR ds:0xc00215a8
c000bc4d:	83 ec 04             	sub    esp,0x4
c000bc50:	68 c0 15 02 c0       	push   0xc00215c0
c000bc55:	83 ec 08             	sub    esp,0x8
c000bc58:	89 e2                	mov    edx,esp
c000bc5a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000bc5d:	89 02                	mov    DWORD PTR [edx],eax
c000bc5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000bc62:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000bc66:	ff d1                	call   ecx
c000bc68:	83 c4 10             	add    esp,0x10
c000bc6b:	fb                   	sti    
c000bc6c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000bc73:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000bc77:	0f 84 a1 00 00 00    	je     c000bd1e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000bc7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc80:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bc86:	84 c0                	test   al,al
c000bc88:	75 28                	jne    c000bcb2 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000bc8a:	fa                   	cli    
c000bc8b:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000bc90:	40                   	inc    eax
c000bc91:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000bc96:	e8 01 6d 00 00       	call   c001299c <schedule()>
c000bc9b:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000bca0:	48                   	dec    eax
c000bca1:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000bca6:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000bcab:	85 c0                	test   eax,eax
c000bcad:	75 ce                	jne    c000bc7d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bcaf:	fb                   	sti    
c000bcb0:	eb cb                	jmp    c000bc7d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bcb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bcb5:	8d 50 01             	lea    edx,[eax+0x1]
c000bcb8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000bcbb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bcbe:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000bcc4:	88 10                	mov    BYTE PTR [eax],dl
c000bcc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bcc9:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bccf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000bcd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bcd5:	05 b2 00 00 00       	add    eax,0xb2
c000bcda:	83 ec 0c             	sub    esp,0xc
c000bcdd:	50                   	push   eax
c000bcde:	e8 7d 48 ff ff       	call   c0000560 <strlen>
c000bce3:	83 c4 10             	add    esp,0x10
c000bce6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bce9:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bcef:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bcf2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bcf5:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bcfb:	83 ec 04             	sub    esp,0x4
c000bcfe:	50                   	push   eax
c000bcff:	51                   	push   ecx
c000bd00:	52                   	push   edx
c000bd01:	e8 fa 46 ff ff       	call   c0000400 <memmove>
c000bd06:	83 c4 10             	add    esp,0x10
c000bd09:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000bd0c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000bd0f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000bd13:	0f 85 5a ff ff ff    	jne    c000bc73 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000bd19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bd1c:	eb 03                	jmp    c000bd21 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000bd1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bd21:	c9                   	leave  
c000bd22:	c3                   	ret    
c000bd23:	90                   	nop

c000bd24 <Keyboard::Keyboard(char const*)>:
c000bd24:	83 ec 0c             	sub    esp,0xc
c000bd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2b:	83 ec 08             	sub    esp,0x8
c000bd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd32:	50                   	push   eax
c000bd33:	e8 78 f2 ff ff       	call   c000afb0 <Device::Device(char const*)>
c000bd38:	83 c4 10             	add    esp,0x10
c000bd3b:	ba bc d6 01 c0       	mov    edx,0xc001d6bc
c000bd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd44:	89 10                	mov    DWORD PTR [eax],edx
c000bd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000bd54:	c6 05 a4 15 02 c0 01 	mov    BYTE PTR ds:0xc00215a4,0x1
c000bd5b:	90                   	nop
c000bd5c:	83 c4 0c             	add    esp,0xc
c000bd5f:	c3                   	ret    

c000bd60 <Keyboard::~Keyboard()>:
c000bd60:	83 ec 0c             	sub    esp,0xc
c000bd63:	ba bc d6 01 c0       	mov    edx,0xc001d6bc
c000bd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd6c:	89 10                	mov    DWORD PTR [eax],edx
c000bd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd72:	83 ec 0c             	sub    esp,0xc
c000bd75:	50                   	push   eax
c000bd76:	e8 9f ef ff ff       	call   c000ad1a <Device::~Device()>
c000bd7b:	83 c4 10             	add    esp,0x10
c000bd7e:	90                   	nop
c000bd7f:	83 c4 0c             	add    esp,0xc
c000bd82:	c3                   	ret    
c000bd83:	90                   	nop

c000bd84 <Keyboard::~Keyboard()>:
c000bd84:	83 ec 0c             	sub    esp,0xc
c000bd87:	83 ec 0c             	sub    esp,0xc
c000bd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd8e:	e8 cd ff ff ff       	call   c000bd60 <Keyboard::~Keyboard()>
c000bd93:	83 c4 10             	add    esp,0x10
c000bd96:	83 ec 08             	sub    esp,0x8
c000bd99:	68 5c 01 00 00       	push   0x15c
c000bd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bda2:	e8 3b db ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000bda7:	83 c4 10             	add    esp,0x10
c000bdaa:	83 c4 0c             	add    esp,0xc
c000bdad:	c3                   	ret    

c000bdae <LogicalDisk::close(int, int, void*)>:
c000bdae:	83 c8 ff             	or     eax,0xffffffff
c000bdb1:	c3                   	ret    

c000bdb2 <LogicalDisk::~LogicalDisk()>:
c000bdb2:	83 ec 0c             	sub    esp,0xc
c000bdb5:	ba 34 d7 01 c0       	mov    edx,0xc001d734
c000bdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdbe:	89 10                	mov    DWORD PTR [eax],edx
c000bdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc4:	83 ec 0c             	sub    esp,0xc
c000bdc7:	50                   	push   eax
c000bdc8:	e8 4d ef ff ff       	call   c000ad1a <Device::~Device()>
c000bdcd:	83 c4 10             	add    esp,0x10
c000bdd0:	90                   	nop
c000bdd1:	83 c4 0c             	add    esp,0xc
c000bdd4:	c3                   	ret    
c000bdd5:	90                   	nop

c000bdd6 <LogicalDisk::~LogicalDisk()>:
c000bdd6:	83 ec 0c             	sub    esp,0xc
c000bdd9:	83 ec 0c             	sub    esp,0xc
c000bddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde0:	e8 cd ff ff ff       	call   c000bdb2 <LogicalDisk::~LogicalDisk()>
c000bde5:	83 c4 10             	add    esp,0x10
c000bde8:	83 ec 08             	sub    esp,0x8
c000bdeb:	68 74 01 00 00       	push   0x174
c000bdf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf4:	e8 e9 da ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000bdf9:	83 c4 10             	add    esp,0x10
c000bdfc:	83 c4 0c             	add    esp,0xc
c000bdff:	c3                   	ret    

c000be00 <LogicalDisk::open(int, int, void*)>:
c000be00:	83 ec 18             	sub    esp,0x18
c000be03:	68 e8 d6 01 c0       	push   0xc001d6e8
c000be08:	e8 1a 37 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000be0d:	83 c8 ff             	or     eax,0xffffffff
c000be10:	83 c4 1c             	add    esp,0x1c
c000be13:	c3                   	ret    

c000be14 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000be14:	53                   	push   ebx
c000be15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be21:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000be27:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000be2d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000be33:	77 10                	ja     c000be45 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000be35:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000be3b:	89 d3                	mov    ebx,edx
c000be3d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000be43:	72 05                	jb     c000be4a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000be45:	83 c8 ff             	or     eax,0xffffffff
c000be48:	89 c2                	mov    edx,eax
c000be4a:	5b                   	pop    ebx
c000be4b:	c3                   	ret    

c000be4c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000be4c:	56                   	push   esi
c000be4d:	83 c8 ff             	or     eax,0xffffffff
c000be50:	53                   	push   ebx
c000be51:	89 c2                	mov    edx,eax
c000be53:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be57:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be5f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000be65:	77 27                	ja     c000be8e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000be67:	89 d8                	mov    eax,ebx
c000be69:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000be6f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000be75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000be7a:	89 c2                	mov    edx,eax
c000be7c:	73 10                	jae    c000be8e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000be7e:	89 c8                	mov    eax,ecx
c000be80:	89 da                	mov    edx,ebx
c000be82:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000be88:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000be8e:	5b                   	pop    ebx
c000be8f:	5e                   	pop    esi
c000be90:	c3                   	ret    
c000be91:	90                   	nop

c000be92 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000be92:	83 ec 1c             	sub    esp,0x1c
c000be95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bea1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bea5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bea9:	89 04 24             	mov    DWORD PTR [esp],eax
c000beac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000beb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000beb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000beb8:	83 ec 08             	sub    esp,0x8
c000bebb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebf:	50                   	push   eax
c000bec0:	e8 eb f0 ff ff       	call   c000afb0 <Device::Device(char const*)>
c000bec5:	83 c4 10             	add    esp,0x10
c000bec8:	ba 34 d7 01 c0       	mov    edx,0xc001d734
c000becd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bed1:	89 10                	mov    DWORD PTR [eax],edx
c000bed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bed7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bee2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000beed:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000bef7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000befb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000beff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf03:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000bf09:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000bf0f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bf13:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bf16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bf1a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000bf20:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000bf26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bf2e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000bf34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf38:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000bf42:	90                   	nop
c000bf43:	83 c4 1c             	add    esp,0x1c
c000bf46:	c3                   	ret    
c000bf47:	90                   	nop

c000bf48 <LogicalDisk::assignDriveLetter()>:
c000bf48:	55                   	push   ebp
c000bf49:	57                   	push   edi
c000bf4a:	56                   	push   esi
c000bf4b:	53                   	push   ebx
c000bf4c:	83 ec 14             	sub    esp,0x14
c000bf4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bf53:	8b 3d e0 19 02 c0    	mov    edi,DWORD PTR ds:0xc00219e0
c000bf59:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000bf5f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000bf63:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000bf69:	8b 3d e4 19 02 c0    	mov    edi,DWORD PTR ds:0xc00219e4
c000bf6f:	3c 01                	cmp    al,0x1
c000bf71:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000bf75:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bf79:	19 c0                	sbb    eax,eax
c000bf7b:	83 e0 02             	and    eax,0x2
c000bf7e:	83 c0 41             	add    eax,0x41
c000bf81:	0f be e8             	movsx  ebp,al
c000bf84:	3c 43                	cmp    al,0x43
c000bf86:	75 10                	jne    c000bf98 <LogicalDisk::assignDriveLetter()+0x50>
c000bf88:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000bf8f:	75 5d                	jne    c000bfee <LogicalDisk::assignDriveLetter()+0xa6>
c000bf91:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000bf96:	75 56                	jne    c000bfee <LogicalDisk::assignDriveLetter()+0xa6>
c000bf98:	8d 75 bf             	lea    esi,[ebp-0x41]
c000bf9b:	ba 01 00 00 00       	mov    edx,0x1
c000bfa0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000bfa4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bfa8:	d3 e2                	shl    edx,cl
c000bfaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bfae:	89 d7                	mov    edi,edx
c000bfb0:	89 d6                	mov    esi,edx
c000bfb2:	c1 ff 1f             	sar    edi,0x1f
c000bfb5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000bfb9:	21 f9                	and    ecx,edi
c000bfbb:	09 d1                	or     ecx,edx
c000bfbd:	75 2f                	jne    c000bfee <LogicalDisk::assignDriveLetter()+0xa6>
c000bfbf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000bfc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bfc7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000bfcd:	09 f2                	or     edx,esi
c000bfcf:	89 15 e0 19 02 c0    	mov    DWORD PTR ds:0xc00219e0,edx
c000bfd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfd9:	09 fa                	or     edx,edi
c000bfdb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000bfdf:	89 15 e4 19 02 c0    	mov    DWORD PTR ds:0xc00219e4,edx
c000bfe5:	89 1c bd 00 1a 02 c0 	mov    DWORD PTR [edi*4-0x3ffde600],ebx
c000bfec:	eb 08                	jmp    c000bff6 <LogicalDisk::assignDriveLetter()+0xae>
c000bfee:	45                   	inc    ebp
c000bfef:	40                   	inc    eax
c000bff0:	3c 5b                	cmp    al,0x5b
c000bff2:	75 90                	jne    c000bf84 <LogicalDisk::assignDriveLetter()+0x3c>
c000bff4:	31 c0                	xor    eax,eax
c000bff6:	83 c4 14             	add    esp,0x14
c000bff9:	5b                   	pop    ebx
c000bffa:	5e                   	pop    esi
c000bffb:	5f                   	pop    edi
c000bffc:	5d                   	pop    ebp
c000bffd:	c3                   	ret    

c000bffe <LogicalDisk::mount()>:
c000bffe:	56                   	push   esi
c000bfff:	53                   	push   ebx
c000c000:	53                   	push   ebx
c000c001:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c005:	8b 1d 78 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f578
c000c00b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000c015:	85 db                	test   ebx,ebx
c000c017:	74 27                	je     c000c040 <LogicalDisk::mount()+0x42>
c000c019:	51                   	push   ecx
c000c01a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000c021:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c023:	83 e8 41             	sub    eax,0x41
c000c026:	50                   	push   eax
c000c027:	56                   	push   esi
c000c028:	53                   	push   ebx
c000c029:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c02c:	83 c4 10             	add    esp,0x10
c000c02f:	84 c0                	test   al,al
c000c031:	74 08                	je     c000c03b <LogicalDisk::mount()+0x3d>
c000c033:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000c039:	eb 07                	jmp    c000c042 <LogicalDisk::mount()+0x44>
c000c03b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000c03e:	eb d5                	jmp    c000c015 <LogicalDisk::mount()+0x17>
c000c040:	31 c0                	xor    eax,eax
c000c042:	5a                   	pop    edx
c000c043:	5b                   	pop    ebx
c000c044:	5e                   	pop    esi
c000c045:	c3                   	ret    

c000c046 <LogicalDisk::unmount()>:
c000c046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c04a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000c054:	c3                   	ret    
c000c055:	90                   	nop

c000c056 <LogicalDisk::eject()>:
c000c056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c05a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c060:	8b 10                	mov    edx,DWORD PTR [eax]
c000c062:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c066:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000c069:	90                   	nop

c000c06a <LogicalDisk::unassignDriveLetter()>:
c000c06a:	57                   	push   edi
c000c06b:	56                   	push   esi
c000c06c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c070:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000c077:	84 c9                	test   cl,cl
c000c079:	75 0f                	jne    c000c08a <LogicalDisk::unassignDriveLetter()+0x20>
c000c07b:	c7 44 24 0c 0c d7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d70c
c000c083:	5e                   	pop    esi
c000c084:	5f                   	pop    edi
c000c085:	e9 9d 34 00 00       	jmp    c000f527 <Krnl::panic(char const*)>
c000c08a:	83 e9 41             	sub    ecx,0x41
c000c08d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000c094:	b8 01 00 00 00       	mov    eax,0x1
c000c099:	c7 04 8d 00 1a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffde600],0x0
c000c0a4:	d3 e0                	shl    eax,cl
c000c0a6:	89 c7                	mov    edi,eax
c000c0a8:	f7 d0                	not    eax
c000c0aa:	c1 ff 1f             	sar    edi,0x1f
c000c0ad:	21 05 e0 19 02 c0    	and    DWORD PTR ds:0xc00219e0,eax
c000c0b3:	89 fe                	mov    esi,edi
c000c0b5:	f7 d6                	not    esi
c000c0b7:	21 35 e4 19 02 c0    	and    DWORD PTR ds:0xc00219e4,esi
c000c0bd:	5e                   	pop    esi
c000c0be:	5f                   	pop    edi
c000c0bf:	c3                   	ret    

c000c0c0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000c0c0:	57                   	push   edi
c000c0c1:	56                   	push   esi
c000c0c2:	53                   	push   ebx
c000c0c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c0c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c0cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c0d9:	77 41                	ja     c000c11c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000c0db:	99                   	cdq    
c000c0dc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c0e2:	01 c8                	add    eax,ecx
c000c0e4:	11 da                	adc    edx,ebx
c000c0e6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c0ec:	19 d7                	sbb    edi,edx
c000c0ee:	72 33                	jb     c000c123 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000c0f0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c0f6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c0fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c100:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c104:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c10a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c110:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c114:	5b                   	pop    ebx
c000c115:	5e                   	pop    esi
c000c116:	5f                   	pop    edi
c000c117:	e9 32 0a 00 00       	jmp    c000cb4e <VCache::read(unsigned long long, int, void*)>
c000c11c:	b8 05 00 00 00       	mov    eax,0x5
c000c121:	eb 05                	jmp    c000c128 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000c123:	b8 07 00 00 00       	mov    eax,0x7
c000c128:	5b                   	pop    ebx
c000c129:	5e                   	pop    esi
c000c12a:	5f                   	pop    edi
c000c12b:	c3                   	ret    

c000c12c <LogicalDisk::write(unsigned long long, int, void*)>:
c000c12c:	57                   	push   edi
c000c12d:	56                   	push   esi
c000c12e:	53                   	push   ebx
c000c12f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c133:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c137:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c13b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c13f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c145:	77 41                	ja     c000c188 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000c147:	99                   	cdq    
c000c148:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c14e:	01 c8                	add    eax,ecx
c000c150:	11 da                	adc    edx,ebx
c000c152:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c158:	19 d7                	sbb    edi,edx
c000c15a:	72 33                	jb     c000c18f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000c15c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c162:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c168:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c16c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c170:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c176:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c17c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c180:	5b                   	pop    ebx
c000c181:	5e                   	pop    esi
c000c182:	5f                   	pop    edi
c000c183:	e9 cc 08 00 00       	jmp    c000ca54 <VCache::write(unsigned long long, int, void*)>
c000c188:	b8 05 00 00 00       	mov    eax,0x5
c000c18d:	eb 05                	jmp    c000c194 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000c18f:	b8 07 00 00 00       	mov    eax,0x7
c000c194:	5b                   	pop    ebx
c000c195:	5e                   	pop    esi
c000c196:	5f                   	pop    edi
c000c197:	c3                   	ret    

c000c198 <Mouse::Mouse(char const*)>:
c000c198:	83 ec 0c             	sub    esp,0xc
c000c19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c19f:	83 ec 08             	sub    esp,0x8
c000c1a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a6:	50                   	push   eax
c000c1a7:	e8 04 ee ff ff       	call   c000afb0 <Device::Device(char const*)>
c000c1ac:	83 c4 10             	add    esp,0x10
c000c1af:	ba 60 d7 01 c0       	mov    edx,0xc001d760
c000c1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b8:	89 10                	mov    DWORD PTR [eax],edx
c000c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1be:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000c1c8:	90                   	nop
c000c1c9:	83 c4 0c             	add    esp,0xc
c000c1cc:	c3                   	ret    
c000c1cd:	90                   	nop
c000c1ce:	66 90                	xchg   ax,ax

c000c1d0 <Mouse::~Mouse()>:
c000c1d0:	83 ec 0c             	sub    esp,0xc
c000c1d3:	ba 60 d7 01 c0       	mov    edx,0xc001d760
c000c1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1dc:	89 10                	mov    DWORD PTR [eax],edx
c000c1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e2:	83 ec 0c             	sub    esp,0xc
c000c1e5:	50                   	push   eax
c000c1e6:	e8 2f eb ff ff       	call   c000ad1a <Device::~Device()>
c000c1eb:	83 c4 10             	add    esp,0x10
c000c1ee:	90                   	nop
c000c1ef:	83 c4 0c             	add    esp,0xc
c000c1f2:	c3                   	ret    
c000c1f3:	90                   	nop

c000c1f4 <Mouse::~Mouse()>:
c000c1f4:	83 ec 0c             	sub    esp,0xc
c000c1f7:	83 ec 0c             	sub    esp,0xc
c000c1fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1fe:	e8 cd ff ff ff       	call   c000c1d0 <Mouse::~Mouse()>
c000c203:	83 c4 10             	add    esp,0x10
c000c206:	83 ec 08             	sub    esp,0x8
c000c209:	68 58 01 00 00       	push   0x158
c000c20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c212:	e8 cb d6 ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000c217:	83 c4 10             	add    esp,0x10
c000c21a:	83 c4 0c             	add    esp,0xc
c000c21d:	c3                   	ret    

c000c21e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c21e:	55                   	push   ebp
c000c21f:	57                   	push   edi
c000c220:	56                   	push   esi
c000c221:	53                   	push   ebx
c000c222:	81 ec 28 01 00 00    	sub    esp,0x128
c000c228:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000c22f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000c236:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000c23d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000c244:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c248:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c24c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c253:	e8 54 ee ff ff       	call   c000b0ac <Device::getName()>
c000c258:	5a                   	pop    edx
c000c259:	59                   	pop    ecx
c000c25a:	50                   	push   eax
c000c25b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000c25f:	55                   	push   ebp
c000c260:	e8 bb 43 ff ff       	call   c0000620 <strcpy>
c000c265:	5b                   	pop    ebx
c000c266:	58                   	pop    eax
c000c267:	68 84 d7 01 c0       	push   0xc001d784
c000c26c:	55                   	push   ebp
c000c26d:	e8 6e 45 ff ff       	call   c00007e0 <strcat>
c000c272:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000c279:	e8 97 a9 ff ff       	call   c0006c15 <malloc>
c000c27e:	83 c4 0c             	add    esp,0xc
c000c281:	89 c3                	mov    ebx,eax
c000c283:	57                   	push   edi
c000c284:	56                   	push   esi
c000c285:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c289:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c28d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000c294:	55                   	push   ebp
c000c295:	50                   	push   eax
c000c296:	e8 f7 fb ff ff       	call   c000be92 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000c29b:	83 c4 14             	add    esp,0x14
c000c29e:	53                   	push   ebx
c000c29f:	e8 a4 fc ff ff       	call   c000bf48 <LogicalDisk::assignDriveLetter()>
c000c2a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c2a7:	e8 52 fd ff ff       	call   c000bffe <LogicalDisk::mount()>
c000c2ac:	58                   	pop    eax
c000c2ad:	5a                   	pop    edx
c000c2ae:	53                   	push   ebx
c000c2af:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c2b6:	e8 5d eb ff ff       	call   c000ae18 <Device::addChild(Device*)>
c000c2bb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000c2c1:	5b                   	pop    ebx
c000c2c2:	5e                   	pop    esi
c000c2c3:	5f                   	pop    edi
c000c2c4:	5d                   	pop    ebp
c000c2c5:	c3                   	ret    

c000c2c6 <createPartitionsForDisk(PhysicalDisk*)>:
c000c2c6:	55                   	push   ebp
c000c2c7:	57                   	push   edi
c000c2c8:	56                   	push   esi
c000c2c9:	53                   	push   ebx
c000c2ca:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000c2d0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000c2d7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000c2dd:	3d 00 02 00 00       	cmp    eax,0x200
c000c2e2:	74 27                	je     c000c30b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000c2e4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000c2ea:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000c2f0:	83 ec 10             	sub    esp,0x10
c000c2f3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000c2f7:	99                   	cdq    
c000c2f8:	c1 e6 0a             	shl    esi,0xa
c000c2fb:	52                   	push   edx
c000c2fc:	89 fd                	mov    ebp,edi
c000c2fe:	50                   	push   eax
c000c2ff:	55                   	push   ebp
c000c300:	56                   	push   esi
c000c301:	e8 ea f3 00 00       	call   c001b6f0 <__udivdi3>
c000c306:	e9 b1 00 00 00       	jmp    c000c3bc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c30b:	83 ec 0c             	sub    esp,0xc
c000c30e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c310:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000c314:	56                   	push   esi
c000c315:	6a 01                	push   0x1
c000c317:	6a 00                	push   0x0
c000c319:	6a 00                	push   0x0
c000c31b:	53                   	push   ebx
c000c31c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000c31f:	83 c4 20             	add    esp,0x20
c000c322:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000c32a:	75 0a                	jne    c000c336 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000c32c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000c334:	74 2c                	je     c000c362 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000c336:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c33c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c342:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c348:	83 ec 10             	sub    esp,0x10
c000c34b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c34f:	89 f7                	mov    edi,esi
c000c351:	c1 e0 0a             	shl    eax,0xa
c000c354:	c1 ff 1f             	sar    edi,0x1f
c000c357:	57                   	push   edi
c000c358:	56                   	push   esi
c000c359:	52                   	push   edx
c000c35a:	50                   	push   eax
c000c35b:	e8 90 f3 00 00       	call   c001b6f0 <__udivdi3>
c000c360:	eb 5a                	jmp    c000c3bc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c362:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000c369:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000c370:	83 e1 7f             	and    ecx,0x7f
c000c373:	83 e0 7f             	and    eax,0x7f
c000c376:	01 c1                	add    ecx,eax
c000c378:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000c37f:	83 e0 7f             	and    eax,0x7f
c000c382:	01 c1                	add    ecx,eax
c000c384:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000c38b:	83 e0 7f             	and    eax,0x7f
c000c38e:	00 c1                	add    cl,al
c000c390:	74 41                	je     c000c3d3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000c392:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c398:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c39e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c3a4:	83 ec 10             	sub    esp,0x10
c000c3a7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c3ab:	89 f7                	mov    edi,esi
c000c3ad:	c1 e0 0a             	shl    eax,0xa
c000c3b0:	c1 ff 1f             	sar    edi,0x1f
c000c3b3:	57                   	push   edi
c000c3b4:	56                   	push   esi
c000c3b5:	52                   	push   edx
c000c3b6:	50                   	push   eax
c000c3b7:	e8 34 f3 00 00       	call   c001b6f0 <__udivdi3>
c000c3bc:	83 c4 14             	add    esp,0x14
c000c3bf:	52                   	push   edx
c000c3c0:	50                   	push   eax
c000c3c1:	6a 00                	push   0x0
c000c3c3:	6a 00                	push   0x0
c000c3c5:	53                   	push   ebx
c000c3c6:	e8 53 fe ff ff       	call   c000c21e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c3cb:	83 c4 20             	add    esp,0x20
c000c3ce:	e9 79 01 00 00       	jmp    c000c54c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000c3d3:	89 f0                	mov    eax,esi
c000c3d5:	31 f6                	xor    esi,esi
c000c3d7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000c3de:	75 02                	jne    c000c3e2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000c3e0:	89 f1                	mov    ecx,esi
c000c3e2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000c3e9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000c3f0:	c1 e2 08             	shl    edx,0x8
c000c3f3:	c1 e7 10             	shl    edi,0x10
c000c3f6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000c3fe:	09 fa                	or     edx,edi
c000c400:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000c408:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000c40f:	83 c0 10             	add    eax,0x10
c000c412:	09 fa                	or     edx,edi
c000c414:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000c41b:	c1 e7 18             	shl    edi,0x18
c000c41e:	09 fa                	or     edx,edi
c000c420:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000c427:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000c42b:	c1 e7 10             	shl    edi,0x10
c000c42e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000c435:	c1 e2 08             	shl    edx,0x8
c000c438:	09 fa                	or     edx,edi
c000c43a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000c441:	09 fa                	or     edx,edi
c000c443:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000c44a:	c1 e7 18             	shl    edi,0x18
c000c44d:	09 fa                	or     edx,edi
c000c44f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000c453:	46                   	inc    esi
c000c454:	83 fe 04             	cmp    esi,0x4
c000c457:	0f 85 7a ff ff ff    	jne    c000c3d7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000c45d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c461:	83 f0 01             	xor    eax,0x1
c000c464:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c468:	75 57                	jne    c000c4c1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c46a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c46e:	83 f0 01             	xor    eax,0x1
c000c471:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c475:	75 4a                	jne    c000c4c1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c477:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000c47b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c483:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c48b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c491:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c497:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c49d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c4a1:	89 f7                	mov    edi,esi
c000c4a3:	c1 e0 0a             	shl    eax,0xa
c000c4a6:	c1 ff 1f             	sar    edi,0x1f
c000c4a9:	57                   	push   edi
c000c4aa:	56                   	push   esi
c000c4ab:	52                   	push   edx
c000c4ac:	50                   	push   eax
c000c4ad:	e8 3e f2 00 00       	call   c001b6f0 <__udivdi3>
c000c4b2:	83 c4 10             	add    esp,0x10
c000c4b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4bd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000c4c1:	84 c9                	test   cl,cl
c000c4c3:	74 53                	je     c000c518 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000c4c5:	0f b6 c9             	movzx  ecx,cl
c000c4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c4d0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4d4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4e0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000c4e4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000c4e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c4f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c4f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c4f8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000c4fc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000c500:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000c504:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000c508:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c50c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c510:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000c514:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000c518:	31 ed                	xor    ebp,ebp
c000c51a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000c51e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000c522:	89 f8                	mov    eax,edi
c000c524:	09 f0                	or     eax,esi
c000c526:	74 1e                	je     c000c546 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c528:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000c52c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000c530:	89 d1                	mov    ecx,edx
c000c532:	09 c1                	or     ecx,eax
c000c534:	74 10                	je     c000c546 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c536:	83 ec 0c             	sub    esp,0xc
c000c539:	57                   	push   edi
c000c53a:	56                   	push   esi
c000c53b:	52                   	push   edx
c000c53c:	50                   	push   eax
c000c53d:	53                   	push   ebx
c000c53e:	e8 db fc ff ff       	call   c000c21e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c543:	83 c4 20             	add    esp,0x20
c000c546:	45                   	inc    ebp
c000c547:	83 fd 04             	cmp    ebp,0x4
c000c54a:	75 ce                	jne    c000c51a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000c54c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000c552:	5b                   	pop    ebx
c000c553:	5e                   	pop    esi
c000c554:	5f                   	pop    edi
c000c555:	5d                   	pop    ebp
c000c556:	c3                   	ret    
c000c557:	90                   	nop

c000c558 <Serial::Serial(char const*)>:
c000c558:	83 ec 0c             	sub    esp,0xc
c000c55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c55f:	83 ec 08             	sub    esp,0x8
c000c562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c566:	50                   	push   eax
c000c567:	e8 44 ea ff ff       	call   c000afb0 <Device::Device(char const*)>
c000c56c:	83 c4 10             	add    esp,0x10
c000c56f:	ba 98 d7 01 c0       	mov    edx,0xc001d798
c000c574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c578:	89 10                	mov    DWORD PTR [eax],edx
c000c57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c57e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000c588:	90                   	nop
c000c589:	83 c4 0c             	add    esp,0xc
c000c58c:	c3                   	ret    
c000c58d:	90                   	nop
c000c58e:	66 90                	xchg   ax,ax

c000c590 <Serial::~Serial()>:
c000c590:	83 ec 0c             	sub    esp,0xc
c000c593:	ba 98 d7 01 c0       	mov    edx,0xc001d798
c000c598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c59c:	89 10                	mov    DWORD PTR [eax],edx
c000c59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5a2:	83 ec 0c             	sub    esp,0xc
c000c5a5:	50                   	push   eax
c000c5a6:	e8 6f e7 ff ff       	call   c000ad1a <Device::~Device()>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	90                   	nop
c000c5af:	83 c4 0c             	add    esp,0xc
c000c5b2:	c3                   	ret    
c000c5b3:	90                   	nop

c000c5b4 <Serial::~Serial()>:
c000c5b4:	83 ec 0c             	sub    esp,0xc
c000c5b7:	83 ec 0c             	sub    esp,0xc
c000c5ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5be:	e8 cd ff ff ff       	call   c000c590 <Serial::~Serial()>
c000c5c3:	83 c4 10             	add    esp,0x10
c000c5c6:	83 ec 08             	sub    esp,0x8
c000c5c9:	68 58 01 00 00       	push   0x158
c000c5ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d2:	e8 0b d3 ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000c5d7:	83 c4 10             	add    esp,0x10
c000c5da:	83 c4 0c             	add    esp,0xc
c000c5dd:	c3                   	ret    
c000c5de:	66 90                	xchg   ax,ax

c000c5e0 <Timer::Timer(char const*)>:
c000c5e0:	83 ec 0c             	sub    esp,0xc
c000c5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5e7:	83 ec 08             	sub    esp,0x8
c000c5ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ee:	50                   	push   eax
c000c5ef:	e8 bc e9 ff ff       	call   c000afb0 <Device::Device(char const*)>
c000c5f4:	83 c4 10             	add    esp,0x10
c000c5f7:	ba dc d7 01 c0       	mov    edx,0xc001d7dc
c000c5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c600:	89 10                	mov    DWORD PTR [eax],edx
c000c602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c606:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000c610:	90                   	nop
c000c611:	83 c4 0c             	add    esp,0xc
c000c614:	c3                   	ret    
c000c615:	90                   	nop
c000c616:	66 90                	xchg   ax,ax

c000c618 <Timer::~Timer()>:
c000c618:	83 ec 0c             	sub    esp,0xc
c000c61b:	ba dc d7 01 c0       	mov    edx,0xc001d7dc
c000c620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c624:	89 10                	mov    DWORD PTR [eax],edx
c000c626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c62a:	83 ec 0c             	sub    esp,0xc
c000c62d:	50                   	push   eax
c000c62e:	e8 e7 e6 ff ff       	call   c000ad1a <Device::~Device()>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	90                   	nop
c000c637:	83 c4 0c             	add    esp,0xc
c000c63a:	c3                   	ret    
c000c63b:	90                   	nop

c000c63c <Timer::~Timer()>:
c000c63c:	83 ec 0c             	sub    esp,0xc
c000c63f:	83 ec 0c             	sub    esp,0xc
c000c642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c646:	e8 cd ff ff ff       	call   c000c618 <Timer::~Timer()>
c000c64b:	83 c4 10             	add    esp,0x10
c000c64e:	83 ec 08             	sub    esp,0x8
c000c651:	68 5c 01 00 00       	push   0x15c
c000c656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c65a:	e8 83 d2 ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000c65f:	83 c4 10             	add    esp,0x10
c000c662:	83 c4 0c             	add    esp,0xc
c000c665:	c3                   	ret    

c000c666 <Timer::read()>:
c000c666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c66a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c670:	c3                   	ret    

c000c671 <setupTimer(int)>:
c000c671:	53                   	push   ebx
c000c672:	83 ec 14             	sub    esp,0x14
c000c675:	68 5c 01 00 00       	push   0x15c
c000c67a:	e8 96 a5 ff ff       	call   c0006c15 <malloc>
c000c67f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c682:	89 c3                	mov    ebx,eax
c000c684:	e8 db e9 00 00       	call   c001b064 <PIT::PIT()>
c000c689:	58                   	pop    eax
c000c68a:	5a                   	pop    edx
c000c68b:	53                   	push   ebx
c000c68c:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c000c692:	e8 81 e7 ff ff       	call   c000ae18 <Device::addChild(Device*)>
c000c697:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c699:	6a 00                	push   0x0
c000c69b:	6a 00                	push   0x0
c000c69d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c6a1:	53                   	push   ebx
c000c6a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c6a5:	89 d8                	mov    eax,ebx
c000c6a7:	83 c4 28             	add    esp,0x28
c000c6aa:	5b                   	pop    ebx
c000c6ab:	c3                   	ret    

c000c6ac <timerHandler(unsigned int)>:
c000c6ac:	56                   	push   esi
c000c6ad:	53                   	push   ebx
c000c6ae:	51                   	push   ecx
c000c6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6b3:	01 05 6c 1a 02 c0    	add    DWORD PTR ds:0xc0021a6c,eax
c000c6b9:	80 3d 8d f4 01 c0 00 	cmp    BYTE PTR ds:0xc001f48d,0x0
c000c6c0:	0f 84 4a 01 00 00    	je     c000c810 <timerHandler(unsigned int)+0x164>
c000c6c6:	fa                   	cli    
c000c6c7:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c000c6cd:	83 ec 0c             	sub    esp,0xc
c000c6d0:	ff 05 64 29 02 c0    	inc    DWORD PTR ds:0xc0022964
c000c6d6:	68 78 29 02 c0       	push   0xc0022978
c000c6db:	e8 e0 f5 00 00       	call   c001bcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c6e0:	83 c4 10             	add    esp,0x10
c000c6e3:	84 c0                	test   al,al
c000c6e5:	0f 85 a1 00 00 00    	jne    c000c78c <timerHandler(unsigned int)+0xe0>
c000c6eb:	83 ec 0c             	sub    esp,0xc
c000c6ee:	68 78 29 02 c0       	push   0xc0022978
c000c6f3:	e8 e4 f5 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c6f8:	83 c4 10             	add    esp,0x10
c000c6fb:	89 c6                	mov    esi,eax
c000c6fd:	8d 76 00             	lea    esi,[esi+0x0]
c000c700:	83 ec 0c             	sub    esp,0xc
c000c703:	68 78 29 02 c0       	push   0xc0022978
c000c708:	e8 cf f5 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c70d:	c7 04 24 78 29 02 c0 	mov    DWORD PTR [esp],0xc0022978
c000c714:	89 c3                	mov    ebx,eax
c000c716:	e8 c9 f5 00 00       	call   c001bce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000c71b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000c71e:	83 c4 10             	add    esp,0x10
c000c721:	3b 05 6c 1a 02 c0    	cmp    eax,DWORD PTR ds:0xc0021a6c
c000c727:	77 23                	ja     c000c74c <timerHandler(unsigned int)+0xa0>
c000c729:	83 ec 0c             	sub    esp,0xc
c000c72c:	53                   	push   ebx
c000c72d:	e8 2e 67 00 00       	call   c0012e60 <unblockTask(ThreadControlBlock*)>
c000c732:	83 c4 10             	add    esp,0x10
c000c735:	39 de                	cmp    esi,ebx
c000c737:	75 27                	jne    c000c760 <timerHandler(unsigned int)+0xb4>
c000c739:	83 ec 0c             	sub    esp,0xc
c000c73c:	68 78 29 02 c0       	push   0xc0022978
c000c741:	e8 96 f5 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c746:	89 c6                	mov    esi,eax
c000c748:	eb 12                	jmp    c000c75c <timerHandler(unsigned int)+0xb0>
c000c74a:	66 90                	xchg   ax,ax
c000c74c:	52                   	push   edx
c000c74d:	52                   	push   edx
c000c74e:	53                   	push   ebx
c000c74f:	68 78 29 02 c0       	push   0xc0022978
c000c754:	e8 43 f6 00 00       	call   c001bd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000c759:	8d 76 00             	lea    esi,[esi+0x0]
c000c75c:	83 c4 10             	add    esp,0x10
c000c75f:	90                   	nop
c000c760:	83 ec 0c             	sub    esp,0xc
c000c763:	68 78 29 02 c0       	push   0xc0022978
c000c768:	e8 53 f5 00 00       	call   c001bcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c76d:	83 c4 10             	add    esp,0x10
c000c770:	84 c0                	test   al,al
c000c772:	75 18                	jne    c000c78c <timerHandler(unsigned int)+0xe0>
c000c774:	83 ec 0c             	sub    esp,0xc
c000c777:	68 78 29 02 c0       	push   0xc0022978
c000c77c:	e8 5b f5 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c781:	83 c4 10             	add    esp,0x10
c000c784:	39 f0                	cmp    eax,esi
c000c786:	0f 85 74 ff ff ff    	jne    c000c700 <timerHandler(unsigned int)+0x54>
c000c78c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c791:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000c795:	74 41                	je     c000c7d8 <timerHandler(unsigned int)+0x12c>
c000c797:	80 3d 8c f4 01 c0 00 	cmp    BYTE PTR ds:0xc001f48c,0x0
c000c79e:	74 38                	je     c000c7d8 <timerHandler(unsigned int)+0x12c>
c000c7a0:	fa                   	cli    
c000c7a1:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c000c7a7:	a1 6c 1a 02 c0       	mov    eax,ds:0xc0021a6c
c000c7ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c7b2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000c7b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c7bb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000c7be:	72 08                	jb     c000c7c8 <timerHandler(unsigned int)+0x11c>
c000c7c0:	e8 d7 61 00 00       	call   c001299c <schedule()>
c000c7c5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7c8:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000c7cd:	48                   	dec    eax
c000c7ce:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000c7d3:	75 03                	jne    c000c7d8 <timerHandler(unsigned int)+0x12c>
c000c7d5:	fb                   	sti    
c000c7d6:	66 90                	xchg   ax,ax
c000c7d8:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000c7dd:	48                   	dec    eax
c000c7de:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c000c7e3:	75 1b                	jne    c000c800 <timerHandler(unsigned int)+0x154>
c000c7e5:	83 3d 60 29 02 c0 00 	cmp    DWORD PTR ds:0xc0022960,0x0
c000c7ec:	74 12                	je     c000c800 <timerHandler(unsigned int)+0x154>
c000c7ee:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c000c7f8:	e8 9f 61 00 00       	call   c001299c <schedule()>
c000c7fd:	8d 76 00             	lea    esi,[esi+0x0]
c000c800:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000c805:	48                   	dec    eax
c000c806:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000c80b:	75 03                	jne    c000c810 <timerHandler(unsigned int)+0x164>
c000c80d:	fb                   	sti    
c000c80e:	66 90                	xchg   ax,ax
c000c810:	58                   	pop    eax
c000c811:	5b                   	pop    ebx
c000c812:	5e                   	pop    esi
c000c813:	c3                   	ret    

c000c814 <VCache::VCache(PhysicalDisk*)>:
c000c814:	53                   	push   ebx
c000c815:	83 ec 18             	sub    esp,0x18
c000c818:	ba 0c d8 01 c0       	mov    edx,0xc001d80c
c000c81d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c821:	89 10                	mov    DWORD PTR [eax],edx
c000c823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c827:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000c82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c832:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000c839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c83d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000c844:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000c84b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c84f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000c856:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000c85d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c861:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000c868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c86c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c874:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c87b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c886:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c88a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c88e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c896:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c89e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c8a5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c8ad:	83 ec 0c             	sub    esp,0xc
c000c8b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8b4:	e8 5c a3 ff ff       	call   c0006c15 <malloc>
c000c8b9:	83 c4 10             	add    esp,0x10
c000c8bc:	89 c3                	mov    ebx,eax
c000c8be:	83 ec 0c             	sub    esp,0xc
c000c8c1:	53                   	push   ebx
c000c8c2:	e8 a1 5e 00 00       	call   c0012768 <Mutex::Mutex()>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c8d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c8d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c8dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8e0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c8e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c8eb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c8f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c8f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c8fc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c902:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c908:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c90c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c90f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c916:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c91a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c91e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c924:	05 00 01 00 00       	add    eax,0x100
c000c929:	c1 e0 04             	shl    eax,0x4
c000c92c:	83 ec 0c             	sub    esp,0xc
c000c92f:	50                   	push   eax
c000c930:	e8 e0 a2 ff ff       	call   c0006c15 <malloc>
c000c935:	83 c4 10             	add    esp,0x10
c000c938:	89 c2                	mov    edx,eax
c000c93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c93e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c945:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c94c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c950:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c954:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c958:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c95e:	c1 e0 06             	shl    eax,0x6
c000c961:	83 ec 0c             	sub    esp,0xc
c000c964:	50                   	push   eax
c000c965:	e8 ab a2 ff ff       	call   c0006c15 <malloc>
c000c96a:	83 c4 10             	add    esp,0x10
c000c96d:	89 c2                	mov    edx,eax
c000c96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c973:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c976:	90                   	nop
c000c977:	83 c4 18             	add    esp,0x18
c000c97a:	5b                   	pop    ebx
c000c97b:	c3                   	ret    

c000c97c <VCache::invalidateReadBuffer()>:
c000c97c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c980:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c986:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c98a:	c3                   	ret    
c000c98b:	90                   	nop

c000c98c <VCache::writeWriteBuffer()>:
c000c98c:	53                   	push   ebx
c000c98d:	83 ec 08             	sub    esp,0x8
c000c990:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c994:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c998:	74 1e                	je     c000c9b8 <VCache::writeWriteBuffer()+0x2c>
c000c99a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c99d:	83 ec 0c             	sub    esp,0xc
c000c9a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9a2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c9a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c9a8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c9ab:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9ae:	50                   	push   eax
c000c9af:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c9b2:	83 c4 20             	add    esp,0x20
c000c9b5:	8d 76 00             	lea    esi,[esi+0x0]
c000c9b8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000c9bf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000c9c6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000c9ca:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000c9d1:	83 c4 08             	add    esp,0x8
c000c9d4:	5b                   	pop    ebx
c000c9d5:	c3                   	ret    
c000c9d6:	66 90                	xchg   ax,ax

c000c9d8 <VCache::~VCache()>:
c000c9d8:	83 ec 0c             	sub    esp,0xc
c000c9db:	ba 0c d8 01 c0       	mov    edx,0xc001d80c
c000c9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e4:	89 10                	mov    DWORD PTR [eax],edx
c000c9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ea:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000c9ed:	84 c0                	test   al,al
c000c9ef:	74 0f                	je     c000ca00 <VCache::~VCache()+0x28>
c000c9f1:	83 ec 0c             	sub    esp,0xc
c000c9f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f8:	e8 8f ff ff ff       	call   c000c98c <VCache::writeWriteBuffer()>
c000c9fd:	83 c4 10             	add    esp,0x10
c000ca00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca04:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ca07:	83 ec 0c             	sub    esp,0xc
c000ca0a:	50                   	push   eax
c000ca0b:	e8 15 a2 ff ff       	call   c0006c25 <free>
c000ca10:	83 c4 10             	add    esp,0x10
c000ca13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ca1a:	83 ec 0c             	sub    esp,0xc
c000ca1d:	50                   	push   eax
c000ca1e:	e8 02 a2 ff ff       	call   c0006c25 <free>
c000ca23:	83 c4 10             	add    esp,0x10
c000ca26:	90                   	nop
c000ca27:	83 c4 0c             	add    esp,0xc
c000ca2a:	c3                   	ret    
c000ca2b:	90                   	nop

c000ca2c <VCache::~VCache()>:
c000ca2c:	83 ec 0c             	sub    esp,0xc
c000ca2f:	83 ec 0c             	sub    esp,0xc
c000ca32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca36:	e8 9d ff ff ff       	call   c000c9d8 <VCache::~VCache()>
c000ca3b:	83 c4 10             	add    esp,0x10
c000ca3e:	83 ec 08             	sub    esp,0x8
c000ca41:	6a 44                	push   0x44
c000ca43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca47:	e8 96 ce ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000ca4c:	83 c4 10             	add    esp,0x10
c000ca4f:	83 c4 0c             	add    esp,0xc
c000ca52:	c3                   	ret    
c000ca53:	90                   	nop

c000ca54 <VCache::write(unsigned long long, int, void*)>:
c000ca54:	55                   	push   ebp
c000ca55:	31 c0                	xor    eax,eax
c000ca57:	57                   	push   edi
c000ca58:	56                   	push   esi
c000ca59:	53                   	push   ebx
c000ca5a:	83 ec 0c             	sub    esp,0xc
c000ca5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ca61:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ca65:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ca69:	8d 76 00             	lea    esi,[esi+0x0]
c000ca6c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000ca70:	7d 1a                	jge    c000ca8c <VCache::write(unsigned long long, int, void*)+0x38>
c000ca72:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000ca75:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000ca7b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ca7f:	0f af c8             	imul   ecx,eax
c000ca82:	01 ca                	add    edx,ecx
c000ca84:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000ca86:	40                   	inc    eax
c000ca87:	eb e3                	jmp    c000ca6c <VCache::write(unsigned long long, int, void*)+0x18>
c000ca89:	8d 76 00             	lea    esi,[esi+0x0]
c000ca8c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ca90:	74 0a                	je     c000ca9c <VCache::write(unsigned long long, int, void*)+0x48>
c000ca92:	53                   	push   ebx
c000ca93:	e8 e4 fe ff ff       	call   c000c97c <VCache::invalidateReadBuffer()>
c000ca98:	58                   	pop    eax
c000ca99:	8d 76 00             	lea    esi,[esi+0x0]
c000ca9c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000caa0:	74 5e                	je     c000cb00 <VCache::write(unsigned long long, int, void*)+0xac>
c000caa2:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000caa5:	89 e8                	mov    eax,ebp
c000caa7:	99                   	cdq    
c000caa8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000caab:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000caae:	89 c1                	mov    ecx,eax
c000cab0:	89 d0                	mov    eax,edx
c000cab2:	31 f1                	xor    ecx,esi
c000cab4:	31 f8                	xor    eax,edi
c000cab6:	09 c1                	or     ecx,eax
c000cab8:	75 3a                	jne    c000caf4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000caba:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000cabf:	75 33                	jne    c000caf4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000cac1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cac4:	89 ef                	mov    edi,ebp
c000cac6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cacc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cad0:	0f af f9             	imul   edi,ecx
c000cad3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000cad6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cad8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000cadb:	40                   	inc    eax
c000cadc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000cadf:	83 f8 40             	cmp    eax,0x40
c000cae2:	75 60                	jne    c000cb44 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cae4:	83 ec 0c             	sub    esp,0xc
c000cae7:	53                   	push   ebx
c000cae8:	e8 9f fe ff ff       	call   c000c98c <VCache::writeWriteBuffer()>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	eb 52                	jmp    c000cb44 <VCache::write(unsigned long long, int, void*)+0xf0>
c000caf2:	66 90                	xchg   ax,ax
c000caf4:	83 ec 0c             	sub    esp,0xc
c000caf7:	53                   	push   ebx
c000caf8:	e8 8f fe ff ff       	call   c000c98c <VCache::writeWriteBuffer()>
c000cafd:	83 c4 10             	add    esp,0x10
c000cb00:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb03:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000cb08:	7f 22                	jg     c000cb2c <VCache::write(unsigned long long, int, void*)+0xd8>
c000cb0a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000cb0d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000cb10:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb14:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000cb18:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000cb1b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000cb1e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cb24:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cb28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb2a:	eb 18                	jmp    c000cb44 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cb2c:	83 ec 0c             	sub    esp,0xc
c000cb2f:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb39:	57                   	push   edi
c000cb3a:	56                   	push   esi
c000cb3b:	50                   	push   eax
c000cb3c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000cb3f:	83 c4 20             	add    esp,0x20
c000cb42:	66 90                	xchg   ax,ax
c000cb44:	83 c4 0c             	add    esp,0xc
c000cb47:	31 c0                	xor    eax,eax
c000cb49:	5b                   	pop    ebx
c000cb4a:	5e                   	pop    esi
c000cb4b:	5f                   	pop    edi
c000cb4c:	5d                   	pop    ebp
c000cb4d:	c3                   	ret    

c000cb4e <VCache::read(unsigned long long, int, void*)>:
c000cb4e:	55                   	push   ebp
c000cb4f:	31 c0                	xor    eax,eax
c000cb51:	57                   	push   edi
c000cb52:	56                   	push   esi
c000cb53:	53                   	push   ebx
c000cb54:	83 ec 1c             	sub    esp,0x1c
c000cb57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000cb5b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cb5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cb63:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000cb67:	90                   	nop
c000cb68:	39 e8                	cmp    eax,ebp
c000cb6a:	7d 18                	jge    c000cb84 <VCache::read(unsigned long long, int, void*)+0x36>
c000cb6c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000cb6f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000cb75:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cb79:	0f af c8             	imul   ecx,eax
c000cb7c:	01 ca                	add    edx,ecx
c000cb7e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000cb80:	40                   	inc    eax
c000cb81:	eb e5                	jmp    c000cb68 <VCache::read(unsigned long long, int, void*)+0x1a>
c000cb83:	90                   	nop
c000cb84:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000cb88:	74 0e                	je     c000cb98 <VCache::read(unsigned long long, int, void*)+0x4a>
c000cb8a:	83 ec 0c             	sub    esp,0xc
c000cb8d:	53                   	push   ebx
c000cb8e:	e8 f9 fd ff ff       	call   c000c98c <VCache::writeWriteBuffer()>
c000cb93:	83 c4 10             	add    esp,0x10
c000cb96:	66 90                	xchg   ax,ax
c000cb98:	83 fd 01             	cmp    ebp,0x1
c000cb9b:	0f 85 87 00 00 00    	jne    c000cc28 <VCache::read(unsigned long long, int, void*)+0xda>
c000cba1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cba4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cba8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000cbaf:	75 77                	jne    c000cc28 <VCache::read(unsigned long long, int, void*)+0xda>
c000cbb1:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000cbb4:	89 e9                	mov    ecx,ebp
c000cbb6:	f7 d9                	neg    ecx
c000cbb8:	89 c8                	mov    eax,ecx
c000cbba:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cbbe:	c1 f8 1f             	sar    eax,0x1f
c000cbc1:	21 f1                	and    ecx,esi
c000cbc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cbc7:	89 c8                	mov    eax,ecx
c000cbc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cbcd:	21 f9                	and    ecx,edi
c000cbcf:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000cbd3:	89 ca                	mov    edx,ecx
c000cbd5:	74 0d                	je     c000cbe4 <VCache::read(unsigned long long, int, void*)+0x96>
c000cbd7:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000cbda:	75 08                	jne    c000cbe4 <VCache::read(unsigned long long, int, void*)+0x96>
c000cbdc:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000cbdf:	74 27                	je     c000cc08 <VCache::read(unsigned long long, int, void*)+0xba>
c000cbe1:	8d 76 00             	lea    esi,[esi+0x0]
c000cbe4:	83 ec 0c             	sub    esp,0xc
c000cbe7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000cbeb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cbef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000cbf2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cbf5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000cbf7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000cbfa:	55                   	push   ebp
c000cbfb:	52                   	push   edx
c000cbfc:	50                   	push   eax
c000cbfd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cc01:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000cc04:	83 c4 20             	add    esp,0x20
c000cc07:	90                   	nop
c000cc08:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cc0b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cc0f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cc15:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000cc18:	48                   	dec    eax
c000cc19:	21 c6                	and    esi,eax
c000cc1b:	0f af f1             	imul   esi,ecx
c000cc1e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000cc21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc23:	eb 23                	jmp    c000cc48 <VCache::read(unsigned long long, int, void*)+0xfa>
c000cc25:	8d 76 00             	lea    esi,[esi+0x0]
c000cc28:	83 ec 0c             	sub    esp,0xc
c000cc2b:	53                   	push   ebx
c000cc2c:	e8 4b fd ff ff       	call   c000c97c <VCache::invalidateReadBuffer()>
c000cc31:	5a                   	pop    edx
c000cc32:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cc35:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cc3b:	55                   	push   ebp
c000cc3c:	57                   	push   edi
c000cc3d:	56                   	push   esi
c000cc3e:	50                   	push   eax
c000cc3f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000cc42:	83 c4 20             	add    esp,0x20
c000cc45:	8d 76 00             	lea    esi,[esi+0x0]
c000cc48:	83 c4 1c             	add    esp,0x1c
c000cc4b:	31 c0                	xor    eax,eax
c000cc4d:	5b                   	pop    ebx
c000cc4e:	5e                   	pop    esi
c000cc4f:	5f                   	pop    edi
c000cc50:	5d                   	pop    ebp
c000cc51:	c3                   	ret    

c000cc52 <Video::putrect(int, int, int, int, unsigned int)>:
c000cc52:	55                   	push   ebp
c000cc53:	57                   	push   edi
c000cc54:	56                   	push   esi
c000cc55:	53                   	push   ebx
c000cc56:	83 ec 1c             	sub    esp,0x1c
c000cc59:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cc5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cc61:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cc65:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000cc69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cc6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc71:	01 df                	add    edi,ebx
c000cc73:	39 fb                	cmp    ebx,edi
c000cc75:	7d 1f                	jge    c000cc96 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000cc77:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc7b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000cc7f:	7d 12                	jge    c000cc93 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000cc81:	8b 16                	mov    edx,DWORD PTR [esi]
c000cc83:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cc87:	53                   	push   ebx
c000cc88:	55                   	push   ebp
c000cc89:	45                   	inc    ebp
c000cc8a:	56                   	push   esi
c000cc8b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	eb e8                	jmp    c000cc7b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000cc93:	43                   	inc    ebx
c000cc94:	eb dd                	jmp    c000cc73 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000cc96:	83 c4 1c             	add    esp,0x1c
c000cc99:	5b                   	pop    ebx
c000cc9a:	5e                   	pop    esi
c000cc9b:	5f                   	pop    edi
c000cc9c:	5d                   	pop    ebp
c000cc9d:	c3                   	ret    

c000cc9e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000cc9e:	55                   	push   ebp
c000cc9f:	57                   	push   edi
c000cca0:	31 ff                	xor    edi,edi
c000cca2:	56                   	push   esi
c000cca3:	53                   	push   ebx
c000cca4:	83 ec 1c             	sub    esp,0x1c
c000cca7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ccab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ccaf:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ccb6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ccbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccbf:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ccc3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ccc7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ccca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ccce:	01 f9                	add    ecx,edi
c000ccd0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ccd4:	7d 2f                	jge    c000cd05 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ccd6:	31 f6                	xor    esi,esi
c000ccd8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ccdc:	01 f2                	add    edx,esi
c000ccde:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cce2:	7d 1a                	jge    c000ccfe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000cce4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cce7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ccea:	46                   	inc    esi
c000cceb:	51                   	push   ecx
c000ccec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ccf0:	52                   	push   edx
c000ccf1:	55                   	push   ebp
c000ccf2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ccf5:	83 c4 10             	add    esp,0x10
c000ccf8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ccfc:	eb da                	jmp    c000ccd8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ccfe:	47                   	inc    edi
c000ccff:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000cd03:	eb c5                	jmp    c000ccca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000cd05:	83 c4 1c             	add    esp,0x1c
c000cd08:	5b                   	pop    ebx
c000cd09:	5e                   	pop    esi
c000cd0a:	5f                   	pop    edi
c000cd0b:	5d                   	pop    ebp
c000cd0c:	c3                   	ret    
c000cd0d:	90                   	nop

c000cd0e <Video::blit(unsigned int*, int, int, int, int)>:
c000cd0e:	55                   	push   ebp
c000cd0f:	57                   	push   edi
c000cd10:	56                   	push   esi
c000cd11:	53                   	push   ebx
c000cd12:	83 ec 1c             	sub    esp,0x1c
c000cd15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cd1d:	85 c0                	test   eax,eax
c000cd1f:	79 02                	jns    c000cd23 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000cd21:	31 c0                	xor    eax,eax
c000cd23:	c1 e0 02             	shl    eax,0x2
c000cd26:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cd2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cd2e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cd32:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000cd36:	39 d8                	cmp    eax,ebx
c000cd38:	7e 49                	jle    c000cd83 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cd3a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cd40:	7c 41                	jl     c000cd83 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cd42:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cd46:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cd4a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cd4e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000cd52:	39 f9                	cmp    ecx,edi
c000cd54:	7e 22                	jle    c000cd78 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000cd56:	83 c5 04             	add    ebp,0x4
c000cd59:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cd5f:	7c 14                	jl     c000cd75 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000cd61:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000cd63:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000cd66:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cd6a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cd6e:	56                   	push   esi
c000cd6f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000cd72:	83 c4 10             	add    esp,0x10
c000cd75:	47                   	inc    edi
c000cd76:	eb d2                	jmp    c000cd4a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000cd78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cd7c:	43                   	inc    ebx
c000cd7d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cd81:	eb ab                	jmp    c000cd2e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000cd83:	83 c4 1c             	add    esp,0x1c
c000cd86:	5b                   	pop    ebx
c000cd87:	5e                   	pop    esi
c000cd88:	5f                   	pop    edi
c000cd89:	5d                   	pop    ebp
c000cd8a:	c3                   	ret    
c000cd8b:	90                   	nop

c000cd8c <Video::clearScreen(unsigned int)>:
c000cd8c:	57                   	push   edi
c000cd8d:	56                   	push   esi
c000cd8e:	53                   	push   ebx
c000cd8f:	31 db                	xor    ebx,ebx
c000cd91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd95:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cd9b:	7e 1f                	jle    c000cdbc <Video::clearScreen(unsigned int)+0x30>
c000cd9d:	31 ff                	xor    edi,edi
c000cd9f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cda5:	7e 12                	jle    c000cdb9 <Video::clearScreen(unsigned int)+0x2d>
c000cda7:	8b 06                	mov    eax,DWORD PTR [esi]
c000cda9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdad:	53                   	push   ebx
c000cdae:	57                   	push   edi
c000cdaf:	47                   	inc    edi
c000cdb0:	56                   	push   esi
c000cdb1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cdb4:	83 c4 10             	add    esp,0x10
c000cdb7:	eb e6                	jmp    c000cd9f <Video::clearScreen(unsigned int)+0x13>
c000cdb9:	43                   	inc    ebx
c000cdba:	eb d9                	jmp    c000cd95 <Video::clearScreen(unsigned int)+0x9>
c000cdbc:	5b                   	pop    ebx
c000cdbd:	5e                   	pop    esi
c000cdbe:	5f                   	pop    edi
c000cdbf:	c3                   	ret    

c000cdc0 <Video::putpixel(int, int, unsigned int)>:
c000cdc0:	c7 44 24 04 14 d8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d814
c000cdc8:	e9 5a 27 00 00       	jmp    c000f527 <Krnl::panic(char const*)>
c000cdcd:	90                   	nop

c000cdce <Video::Video(char const*)>:
c000cdce:	83 ec 0c             	sub    esp,0xc
c000cdd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd5:	83 ec 08             	sub    esp,0x8
c000cdd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddc:	50                   	push   eax
c000cddd:	e8 ce e1 ff ff       	call   c000afb0 <Device::Device(char const*)>
c000cde2:	83 c4 10             	add    esp,0x10
c000cde5:	ba 84 d8 01 c0       	mov    edx,0xc001d884
c000cdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdee:	89 10                	mov    DWORD PTR [eax],edx
c000cdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000cdfe:	90                   	nop
c000cdff:	83 c4 0c             	add    esp,0xc
c000ce02:	c3                   	ret    
c000ce03:	90                   	nop

c000ce04 <Video::~Video()>:
c000ce04:	83 ec 0c             	sub    esp,0xc
c000ce07:	ba 84 d8 01 c0       	mov    edx,0xc001d884
c000ce0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce10:	89 10                	mov    DWORD PTR [eax],edx
c000ce12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce16:	83 ec 0c             	sub    esp,0xc
c000ce19:	50                   	push   eax
c000ce1a:	e8 fb de ff ff       	call   c000ad1a <Device::~Device()>
c000ce1f:	83 c4 10             	add    esp,0x10
c000ce22:	90                   	nop
c000ce23:	83 c4 0c             	add    esp,0xc
c000ce26:	c3                   	ret    
c000ce27:	90                   	nop

c000ce28 <Video::~Video()>:
c000ce28:	83 ec 0c             	sub    esp,0xc
c000ce2b:	83 ec 0c             	sub    esp,0xc
c000ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce32:	e8 cd ff ff ff       	call   c000ce04 <Video::~Video()>
c000ce37:	83 c4 10             	add    esp,0x10
c000ce3a:	83 ec 08             	sub    esp,0x8
c000ce3d:	68 64 01 00 00       	push   0x164
c000ce42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce46:	e8 97 ca ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c000ce4b:	83 c4 10             	add    esp,0x10
c000ce4e:	83 c4 0c             	add    esp,0xc
c000ce51:	c3                   	ret    

c000ce52 <Video::isMonochrome()>:
c000ce52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce56:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ce5c:	c3                   	ret    
c000ce5d:	90                   	nop

c000ce5e <Video::getWidth()>:
c000ce5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce62:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce68:	c3                   	ret    
c000ce69:	90                   	nop

c000ce6a <Video::getHeight()>:
c000ce6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce6e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ce74:	c3                   	ret    
c000ce75:	90                   	nop

c000ce76 <Video::drawCursor(int, int, unsigned char*, int)>:
c000ce76:	55                   	push   ebp
c000ce77:	57                   	push   edi
c000ce78:	56                   	push   esi
c000ce79:	53                   	push   ebx
c000ce7a:	83 ec 2c             	sub    esp,0x2c
c000ce7d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ce81:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ce85:	83 f8 01             	cmp    eax,0x1
c000ce88:	19 c9                	sbb    ecx,ecx
c000ce8a:	31 db                	xor    ebx,ebx
c000ce8c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ce90:	89 cd                	mov    ebp,ecx
c000ce92:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ce9a:	f7 d5                	not    ebp
c000ce9c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000cea2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cea6:	01 d8                	add    eax,ebx
c000cea8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ceac:	56                   	push   esi
c000cead:	e8 b8 ff ff ff       	call   c000ce6a <Video::getHeight()>
c000ceb2:	59                   	pop    ecx
c000ceb3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ceb7:	7e 70                	jle    c000cf29 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000ceb9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cebd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000cec1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000cec4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cec8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cecc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ced3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced7:	89 f8                	mov    eax,edi
c000ced9:	83 c0 20             	add    eax,0x20
c000cedc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cee0:	56                   	push   esi
c000cee1:	e8 78 ff ff ff       	call   c000ce5e <Video::getWidth()>
c000cee6:	5a                   	pop    edx
c000cee7:	39 c7                	cmp    edi,eax
c000cee9:	7d 34                	jge    c000cf1f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000ceeb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000cef0:	74 05                	je     c000cef7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000cef2:	8b 06                	mov    eax,DWORD PTR [esi]
c000cef4:	55                   	push   ebp
c000cef5:	eb 0d                	jmp    c000cf04 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000cef7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000cefc:	74 12                	je     c000cf10 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000cefe:	8b 06                	mov    eax,DWORD PTR [esi]
c000cf00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cf08:	57                   	push   edi
c000cf09:	56                   	push   esi
c000cf0a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cf0d:	83 c4 10             	add    esp,0x10
c000cf10:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000cf14:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000cf18:	47                   	inc    edi
c000cf19:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000cf1d:	75 c1                	jne    c000cee0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000cf1f:	43                   	inc    ebx
c000cf20:	83 fb 20             	cmp    ebx,0x20
c000cf23:	0f 85 79 ff ff ff    	jne    c000cea2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000cf29:	83 c4 2c             	add    esp,0x2c
c000cf2c:	5b                   	pop    ebx
c000cf2d:	5e                   	pop    esi
c000cf2e:	5f                   	pop    edi
c000cf2f:	5d                   	pop    ebp
c000cf30:	c3                   	ret    
c000cf31:	90                   	nop

c000cf32 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000cf32:	55                   	push   ebp
c000cf33:	57                   	push   edi
c000cf34:	56                   	push   esi
c000cf35:	53                   	push   ebx
c000cf36:	83 ec 28             	sub    esp,0x28
c000cf39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000cf3d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000cf41:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000cf45:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000cf49:	c1 e6 08             	shl    esi,0x8
c000cf4c:	01 c6                	add    esi,eax
c000cf4e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000cf52:	c1 e0 08             	shl    eax,0x8
c000cf55:	01 d0                	add    eax,edx
c000cf57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf5f:	0f af c6             	imul   eax,esi
c000cf62:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000cf69:	50                   	push   eax
c000cf6a:	e8 a6 9c ff ff       	call   c0006c15 <malloc>
c000cf6f:	83 c4 10             	add    esp,0x10
c000cf72:	89 c7                	mov    edi,eax
c000cf74:	85 c0                	test   eax,eax
c000cf76:	75 10                	jne    c000cf88 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000cf78:	83 ec 0c             	sub    esp,0xc
c000cf7b:	68 35 d8 01 c0       	push   0xc001d835
c000cf80:	e8 a2 25 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000cf85:	83 c4 10             	add    esp,0x10
c000cf88:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000cf8b:	ba 12 00 00 00       	mov    edx,0x12
c000cf90:	84 c0                	test   al,al
c000cf92:	74 11                	je     c000cfa5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000cf94:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000cf98:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000cf9c:	c1 fa 03             	sar    edx,0x3
c000cf9f:	0f af d1             	imul   edx,ecx
c000cfa2:	83 c2 12             	add    edx,0x12
c000cfa5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000cfa9:	74 04                	je     c000cfaf <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000cfab:	85 f6                	test   esi,esi
c000cfad:	75 12                	jne    c000cfc1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000cfaf:	83 ec 0c             	sub    esp,0xc
c000cfb2:	68 45 d8 01 c0       	push   0xc001d845
c000cfb7:	e8 1c ca ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000cfbc:	e9 b8 00 00 00       	jmp    c000d079 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000cfc1:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000cfc5:	80 f9 02             	cmp    cl,0x2
c000cfc8:	0f 85 96 00 00 00    	jne    c000d064 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000cfce:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000cfd3:	75 0e                	jne    c000cfe3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cfd5:	84 c0                	test   al,al
c000cfd7:	75 0a                	jne    c000cfe3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cfd9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000cfdc:	83 e8 18             	sub    eax,0x18
c000cfdf:	a8 f7                	test   al,0xf7
c000cfe1:	74 0a                	je     c000cfed <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000cfe3:	83 ec 0c             	sub    esp,0xc
c000cfe6:	68 5a d8 01 c0       	push   0xc001d85a
c000cfeb:	eb 7f                	jmp    c000d06c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000cfed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cff5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000cffd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000d001:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d009:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000d00d:	75 0c                	jne    c000d01b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000d00f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000d014:	c1 e0 18             	shl    eax,0x18
c000d017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d01b:	45                   	inc    ebp
c000d01c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000d021:	c1 e1 10             	shl    ecx,0x10
c000d024:	89 c8                	mov    eax,ecx
c000d026:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000d02b:	c1 e1 08             	shl    ecx,0x8
c000d02e:	09 c1                	or     ecx,eax
c000d030:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000d034:	09 c1                	or     ecx,eax
c000d036:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000d03a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000d03e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000d042:	c1 f8 03             	sar    eax,0x3
c000d045:	01 c2                	add    edx,eax
c000d047:	89 e8                	mov    eax,ebp
c000d049:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000d04d:	39 c6                	cmp    esi,eax
c000d04f:	7f b0                	jg     c000d001 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000d051:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d055:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d059:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000d05c:	7e 22                	jle    c000d080 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000d05e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000d062:	eb 99                	jmp    c000cffd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000d064:	50                   	push   eax
c000d065:	50                   	push   eax
c000d066:	51                   	push   ecx
c000d067:	68 68 d8 01 c0       	push   0xc001d868
c000d06c:	e8 67 c9 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000d071:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d074:	e8 ac 9b ff ff       	call   c0006c25 <free>
c000d079:	83 c4 10             	add    esp,0x10
c000d07c:	31 ff                	xor    edi,edi
c000d07e:	eb 0f                	jmp    c000d08f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000d080:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d084:	89 30                	mov    DWORD PTR [eax],esi
c000d086:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d08a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d08d:	89 30                	mov    DWORD PTR [eax],esi
c000d08f:	83 c4 1c             	add    esp,0x1c
c000d092:	89 f8                	mov    eax,edi
c000d094:	5b                   	pop    ebx
c000d095:	5e                   	pop    esi
c000d096:	5f                   	pop    edi
c000d097:	5d                   	pop    ebp
c000d098:	c3                   	ret    
c000d099:	90                   	nop

c000d09a <Video::putTGA(int, int, unsigned char*, int)>:
c000d09a:	55                   	push   ebp
c000d09b:	57                   	push   edi
c000d09c:	56                   	push   esi
c000d09d:	53                   	push   ebx
c000d09e:	83 ec 28             	sub    esp,0x28
c000d0a1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000d0a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d0a9:	50                   	push   eax
c000d0aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d0ae:	50                   	push   eax
c000d0af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d0b3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d0b7:	56                   	push   esi
c000d0b8:	e8 75 fe ff ff       	call   c000cf32 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000d0bd:	83 c4 20             	add    esp,0x20
c000d0c0:	85 c0                	test   eax,eax
c000d0c2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d0c6:	74 35                	je     c000d0fd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000d0c8:	89 c7                	mov    edi,eax
c000d0ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0ce:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000d0d2:	39 d8                	cmp    eax,ebx
c000d0d4:	7e 27                	jle    c000d0fd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000d0d6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d0da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000d0e2:	39 e8                	cmp    eax,ebp
c000d0e4:	7e 14                	jle    c000d0fa <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000d0e6:	8b 06                	mov    eax,DWORD PTR [esi]
c000d0e8:	83 c7 04             	add    edi,0x4
c000d0eb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000d0ee:	53                   	push   ebx
c000d0ef:	55                   	push   ebp
c000d0f0:	45                   	inc    ebp
c000d0f1:	56                   	push   esi
c000d0f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	eb e0                	jmp    c000d0da <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000d0fa:	43                   	inc    ebx
c000d0fb:	eb cd                	jmp    c000d0ca <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000d0fd:	83 c4 1c             	add    esp,0x1c
c000d100:	5b                   	pop    ebx
c000d101:	5e                   	pop    esi
c000d102:	5f                   	pop    edi
c000d103:	5d                   	pop    ebp
c000d104:	c3                   	ret    
c000d105:	66 90                	xchg   ax,ax
c000d107:	90                   	nop

c000d108 <ACPI::close(int, int, void*)>:
c000d108:	83 ec 1c             	sub    esp,0x1c
c000d10b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000d113:	74 0b                	je     c000d120 <ACPI::close(int, int, void*)+0x18>
c000d115:	b8 00 00 00 00       	mov    eax,0x0
c000d11a:	e9 9d 00 00 00       	jmp    c000d1bc <ACPI::close(int, int, void*)+0xb4>
c000d11f:	90                   	nop
c000d120:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000d125:	75 29                	jne    c000d150 <ACPI::close(int, int, void*)+0x48>
c000d127:	a1 88 1a 02 c0       	mov    eax,ds:0xc0021a88
c000d12c:	85 c0                	test   eax,eax
c000d12e:	74 08                	je     c000d138 <ACPI::close(int, int, void*)+0x30>
c000d130:	a1 88 1a 02 c0       	mov    eax,ds:0xc0021a88
c000d135:	ff d0                	call   eax
c000d137:	90                   	nop
c000d138:	83 ec 0c             	sub    esp,0xc
c000d13b:	68 c4 d8 01 c0       	push   0xc001d8c4
c000d140:	e8 e2 23 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000d145:	83 c4 10             	add    esp,0x10
c000d148:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d14d:	eb 6d                	jmp    c000d1bc <ACPI::close(int, int, void*)+0xb4>
c000d14f:	90                   	nop
c000d150:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000d155:	75 5d                	jne    c000d1b4 <ACPI::close(int, int, void*)+0xac>
c000d157:	a1 84 1a 02 c0       	mov    eax,ds:0xc0021a84
c000d15c:	85 c0                	test   eax,eax
c000d15e:	74 08                	je     c000d168 <ACPI::close(int, int, void*)+0x60>
c000d160:	a1 84 1a 02 c0       	mov    eax,ds:0xc0021a84
c000d165:	ff d0                	call   eax
c000d167:	90                   	nop
c000d168:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000d16d:	8d 76 00             	lea    esi,[esi+0x0]
c000d170:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d174:	25 ff 00 00 00       	and    eax,0xff
c000d179:	83 e0 02             	and    eax,0x2
c000d17c:	74 1e                	je     c000d19c <ACPI::close(int, int, void*)+0x94>
c000d17e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000d185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d189:	89 c2                	mov    edx,eax
c000d18b:	ec                   	in     al,dx
c000d18c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d190:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d194:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d198:	eb d6                	jmp    c000d170 <ACPI::close(int, int, void*)+0x68>
c000d19a:	66 90                	xchg   ax,ax
c000d19c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000d1a3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000d1a8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000d1ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1b0:	ee                   	out    dx,al
c000d1b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d1b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d1bc:	83 c4 1c             	add    esp,0x1c
c000d1bf:	c3                   	ret    

c000d1c0 <findRSDP()>:
c000d1c0:	83 ec 1c             	sub    esp,0x1c
c000d1c3:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000d1c8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d1ce:	83 e0 04             	and    eax,0x4
c000d1d1:	84 c0                	test   al,al
c000d1d3:	75 07                	jne    c000d1dc <findRSDP()+0x1c>
c000d1d5:	b8 00 00 00 00       	mov    eax,0x0
c000d1da:	eb 70                	jmp    c000d24c <findRSDP()+0x8c>
c000d1dc:	a1 b8 f4 01 c0       	mov    eax,ds:0xc001f4b8
c000d1e1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000d1e6:	7f 1c                	jg     c000d204 <findRSDP()+0x44>
c000d1e8:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000d1ed:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d1f3:	83 e2 fb             	and    edx,0xfffffffb
c000d1f6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d1fc:	b8 00 00 00 00       	mov    eax,0x0
c000d201:	eb 49                	jmp    c000d24c <findRSDP()+0x8c>
c000d203:	90                   	nop
c000d204:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000d20c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000d214:	77 2e                	ja     c000d244 <findRSDP()+0x84>
c000d216:	83 ec 04             	sub    esp,0x4
c000d219:	6a 08                	push   0x8
c000d21b:	68 5f d9 01 c0       	push   0xc001d95f
c000d220:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d224:	e8 87 31 ff ff       	call   c00003b0 <memcmp>
c000d229:	83 c4 10             	add    esp,0x10
c000d22c:	85 c0                	test   eax,eax
c000d22e:	0f 94 c0             	sete   al
c000d231:	84 c0                	test   al,al
c000d233:	74 07                	je     c000d23c <findRSDP()+0x7c>
c000d235:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d239:	eb 11                	jmp    c000d24c <findRSDP()+0x8c>
c000d23b:	90                   	nop
c000d23c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000d241:	eb c9                	jmp    c000d20c <findRSDP()+0x4c>
c000d243:	90                   	nop
c000d244:	b8 00 00 00 00       	mov    eax,0x0
c000d249:	8d 76 00             	lea    esi,[esi+0x0]
c000d24c:	83 c4 1c             	add    esp,0x1c
c000d24f:	c3                   	ret    

c000d250 <loadACPITables(unsigned char*)>:
c000d250:	57                   	push   edi
c000d251:	56                   	push   esi
c000d252:	53                   	push   ebx
c000d253:	83 ec 60             	sub    esp,0x60
c000d256:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000d25b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d261:	83 e0 04             	and    eax,0x4
c000d264:	84 c0                	test   al,al
c000d266:	0f 84 3c 02 00 00    	je     c000d4a8 <loadACPITables(unsigned char*)+0x258>
c000d26c:	a0 a0 1c 02 c0       	mov    al,ds:0xc0021ca0
c000d271:	84 c0                	test   al,al
c000d273:	74 77                	je     c000d2ec <loadACPITables(unsigned char*)+0x9c>
c000d275:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d279:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d27d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d281:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d284:	83 e8 24             	sub    eax,0x24
c000d287:	c1 e8 03             	shr    eax,0x3
c000d28a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d28e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000d296:	66 90                	xchg   ax,ax
c000d298:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d29c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000d2a0:	0f 8d b6 00 00 00    	jge    c000d35c <loadACPITables(unsigned char*)+0x10c>
c000d2a6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d2aa:	83 c0 24             	add    eax,0x24
c000d2ad:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d2b1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d2b5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d2b9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d2bd:	c1 e0 03             	shl    eax,0x3
c000d2c0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000d2c4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d2c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d2cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2cd:	89 c1                	mov    ecx,eax
c000d2cf:	a1 8c 1a 02 c0       	mov    eax,ds:0xc0021a8c
c000d2d4:	8d 50 01             	lea    edx,[eax+0x1]
c000d2d7:	89 15 8c 1a 02 c0    	mov    DWORD PTR ds:0xc0021a8c,edx
c000d2dd:	89 ca                	mov    edx,ecx
c000d2df:	89 14 c5 a4 1a 02 c0 	mov    DWORD PTR [eax*8-0x3ffde55c],edx
c000d2e6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000d2ea:	eb ac                	jmp    c000d298 <loadACPITables(unsigned char*)+0x48>
c000d2ec:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d2f0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d2f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d2f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d2fb:	83 e8 24             	sub    eax,0x24
c000d2fe:	c1 e8 02             	shr    eax,0x2
c000d301:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d305:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000d30d:	8d 76 00             	lea    esi,[esi+0x0]
c000d310:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d314:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000d318:	7d 42                	jge    c000d35c <loadACPITables(unsigned char*)+0x10c>
c000d31a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d31e:	83 c0 24             	add    eax,0x24
c000d321:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d325:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d329:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d32d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d331:	c1 e0 02             	shl    eax,0x2
c000d334:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d338:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d33c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d33e:	a1 8c 1a 02 c0       	mov    eax,ds:0xc0021a8c
c000d343:	8d 50 01             	lea    edx,[eax+0x1]
c000d346:	89 15 8c 1a 02 c0    	mov    DWORD PTR ds:0xc0021a8c,edx
c000d34c:	89 ca                	mov    edx,ecx
c000d34e:	89 14 c5 a4 1a 02 c0 	mov    DWORD PTR [eax*8-0x3ffde55c],edx
c000d355:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000d359:	eb b5                	jmp    c000d310 <loadACPITables(unsigned char*)+0xc0>
c000d35b:	90                   	nop
c000d35c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000d364:	a1 8c 1a 02 c0       	mov    eax,ds:0xc0021a8c
c000d369:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000d36d:	0f 8d 39 01 00 00    	jge    c000d4ac <loadACPITables(unsigned char*)+0x25c>
c000d373:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d377:	8b 04 c5 a4 1a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde55c]
c000d37e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d382:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d386:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d38a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d38e:	25 ff 0f 00 00       	and    eax,0xfff
c000d393:	89 c6                	mov    esi,eax
c000d395:	8b 1d 74 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f574
c000d39b:	83 ec 0c             	sub    esp,0xc
c000d39e:	6a 01                	push   0x1
c000d3a0:	e8 ac b3 ff ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c000d3a5:	83 c4 10             	add    esp,0x10
c000d3a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d3ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d3b2:	83 ec 0c             	sub    esp,0xc
c000d3b5:	6a 01                	push   0x1
c000d3b7:	6a 01                	push   0x1
c000d3b9:	50                   	push   eax
c000d3ba:	52                   	push   edx
c000d3bb:	53                   	push   ebx
c000d3bc:	e8 e3 bc ff ff       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d3c1:	83 c4 20             	add    esp,0x20
c000d3c4:	09 f0                	or     eax,esi
c000d3c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3ca:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d3ce:	c1 e0 03             	shl    eax,0x3
c000d3d1:	05 a0 1a 02 c0       	add    eax,0xc0021aa0
c000d3d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d3da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d3de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d3e2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000d3ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d3ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3fe:	89 c6                	mov    esi,eax
c000d400:	89 d7                	mov    edi,edx
c000d402:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d404:	89 c8                	mov    eax,ecx
c000d406:	89 fa                	mov    edx,edi
c000d408:	89 f3                	mov    ebx,esi
c000d40a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d40e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d412:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d41a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d41d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d421:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d425:	05 00 10 00 00       	add    eax,0x1000
c000d42a:	c1 e8 0c             	shr    eax,0xc
c000d42d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d431:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d435:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d439:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d43d:	25 ff 0f 00 00       	and    eax,0xfff
c000d442:	89 c6                	mov    esi,eax
c000d444:	8b 1d 74 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f574
c000d44a:	83 ec 0c             	sub    esp,0xc
c000d44d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000d451:	e8 fb b2 ff ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c000d456:	83 c4 10             	add    esp,0x10
c000d459:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d45d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d463:	83 ec 0c             	sub    esp,0xc
c000d466:	6a 01                	push   0x1
c000d468:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d46c:	50                   	push   eax
c000d46d:	52                   	push   edx
c000d46e:	53                   	push   ebx
c000d46f:	e8 30 bc ff ff       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d474:	83 c4 20             	add    esp,0x20
c000d477:	09 f0                	or     eax,esi
c000d479:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d47d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d481:	83 ec 0c             	sub    esp,0xc
c000d484:	50                   	push   eax
c000d485:	e8 bb b5 ff ff       	call   c0008a45 <Virt::freeKernelVirtualPages(unsigned long)>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d491:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d495:	89 14 c5 a4 1a 02 c0 	mov    DWORD PTR [eax*8-0x3ffde55c],edx
c000d49c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000d4a0:	e9 bf fe ff ff       	jmp    c000d364 <loadACPITables(unsigned char*)+0x114>
c000d4a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d4a8:	90                   	nop
c000d4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4ac:	83 c4 60             	add    esp,0x60
c000d4af:	5b                   	pop    ebx
c000d4b0:	5e                   	pop    esi
c000d4b1:	5f                   	pop    edi
c000d4b2:	c3                   	ret    
c000d4b3:	90                   	nop

c000d4b4 <findRSDT(unsigned char*)>:
c000d4b4:	57                   	push   edi
c000d4b5:	56                   	push   esi
c000d4b6:	53                   	push   ebx
c000d4b7:	83 ec 50             	sub    esp,0x50
c000d4ba:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000d4bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d4c5:	83 e0 04             	and    eax,0x4
c000d4c8:	84 c0                	test   al,al
c000d4ca:	75 0c                	jne    c000d4d8 <findRSDT(unsigned char*)+0x24>
c000d4cc:	b8 00 00 00 00       	mov    eax,0x0
c000d4d1:	e9 26 01 00 00       	jmp    c000d5fc <findRSDT(unsigned char*)+0x148>
c000d4d6:	66 90                	xchg   ax,ax
c000d4d8:	89 e0                	mov    eax,esp
c000d4da:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d4de:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d4e2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4e6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000d4ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d4f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d4fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000d4fe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000d502:	89 c6                	mov    esi,eax
c000d504:	89 d7                	mov    edi,edx
c000d506:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d508:	89 c8                	mov    eax,ecx
c000d50a:	89 fa                	mov    edx,edi
c000d50c:	89 f3                	mov    ebx,esi
c000d50e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000d512:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d516:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d51a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d51e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000d522:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000d52a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d52e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d532:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d53e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d542:	25 ff 0f 00 00       	and    eax,0xfff
c000d547:	89 c6                	mov    esi,eax
c000d549:	8b 1d 74 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f574
c000d54f:	83 ec 0c             	sub    esp,0xc
c000d552:	6a 02                	push   0x2
c000d554:	e8 f8 b1 ff ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c000d559:	83 c4 10             	add    esp,0x10
c000d55c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d560:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d566:	83 ec 0c             	sub    esp,0xc
c000d569:	6a 01                	push   0x1
c000d56b:	6a 02                	push   0x2
c000d56d:	50                   	push   eax
c000d56e:	52                   	push   edx
c000d56f:	53                   	push   ebx
c000d570:	e8 2f bb ff ff       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d575:	83 c4 20             	add    esp,0x20
c000d578:	09 f0                	or     eax,esi
c000d57a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d57e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d582:	25 ff 0f 00 00       	and    eax,0xfff
c000d587:	89 c6                	mov    esi,eax
c000d589:	8b 1d 74 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f574
c000d58f:	83 ec 0c             	sub    esp,0xc
c000d592:	6a 02                	push   0x2
c000d594:	e8 b8 b1 ff ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c000d599:	83 c4 10             	add    esp,0x10
c000d59c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d5a0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d5a6:	83 ec 0c             	sub    esp,0xc
c000d5a9:	6a 01                	push   0x1
c000d5ab:	6a 02                	push   0x2
c000d5ad:	50                   	push   eax
c000d5ae:	52                   	push   edx
c000d5af:	53                   	push   ebx
c000d5b0:	e8 ef ba ff ff       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d5b5:	83 c4 20             	add    esp,0x20
c000d5b8:	09 f0                	or     eax,esi
c000d5ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d5be:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000d5c3:	75 13                	jne    c000d5d8 <findRSDT(unsigned char*)+0x124>
c000d5c5:	c6 05 a0 1c 02 c0 00 	mov    BYTE PTR ds:0xc0021ca0,0x0
c000d5cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d5d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d5d4:	eb 22                	jmp    c000d5f8 <findRSDT(unsigned char*)+0x144>
c000d5d6:	66 90                	xchg   ax,ax
c000d5d8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000d5dd:	75 11                	jne    c000d5f0 <findRSDT(unsigned char*)+0x13c>
c000d5df:	c6 05 a0 1c 02 c0 01 	mov    BYTE PTR ds:0xc0021ca0,0x1
c000d5e6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d5ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d5ee:	eb 08                	jmp    c000d5f8 <findRSDT(unsigned char*)+0x144>
c000d5f0:	b8 00 00 00 00       	mov    eax,0x0
c000d5f5:	eb 05                	jmp    c000d5fc <findRSDT(unsigned char*)+0x148>
c000d5f7:	90                   	nop
c000d5f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d5fc:	83 c4 50             	add    esp,0x50
c000d5ff:	5b                   	pop    ebx
c000d600:	5e                   	pop    esi
c000d601:	5f                   	pop    edi
c000d602:	c3                   	ret    
c000d603:	90                   	nop

c000d604 <findDataTable(unsigned char*, char*)>:
c000d604:	83 ec 1c             	sub    esp,0x1c
c000d607:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000d60c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d612:	83 e0 04             	and    eax,0x4
c000d615:	84 c0                	test   al,al
c000d617:	75 07                	jne    c000d620 <findDataTable(unsigned char*, char*)+0x1c>
c000d619:	b8 00 00 00 00       	mov    eax,0x0
c000d61e:	eb 58                	jmp    c000d678 <findDataTable(unsigned char*, char*)+0x74>
c000d620:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d628:	a1 8c 1a 02 c0       	mov    eax,ds:0xc0021a8c
c000d62d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d631:	7d 3d                	jge    c000d670 <findDataTable(unsigned char*, char*)+0x6c>
c000d633:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d637:	c1 e0 03             	shl    eax,0x3
c000d63a:	05 a0 1a 02 c0       	add    eax,0xc0021aa0
c000d63f:	83 ec 04             	sub    esp,0x4
c000d642:	6a 04                	push   0x4
c000d644:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d648:	50                   	push   eax
c000d649:	e8 62 2d ff ff       	call   c00003b0 <memcmp>
c000d64e:	83 c4 10             	add    esp,0x10
c000d651:	85 c0                	test   eax,eax
c000d653:	0f 94 c0             	sete   al
c000d656:	84 c0                	test   al,al
c000d658:	74 0e                	je     c000d668 <findDataTable(unsigned char*, char*)+0x64>
c000d65a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d65e:	8b 04 c5 a4 1a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde55c]
c000d665:	eb 11                	jmp    c000d678 <findDataTable(unsigned char*, char*)+0x74>
c000d667:	90                   	nop
c000d668:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d66c:	eb ba                	jmp    c000d628 <findDataTable(unsigned char*, char*)+0x24>
c000d66e:	66 90                	xchg   ax,ax
c000d670:	b8 00 00 00 00       	mov    eax,0x0
c000d675:	8d 76 00             	lea    esi,[esi+0x0]
c000d678:	83 c4 1c             	add    esp,0x1c
c000d67b:	c3                   	ret    

c000d67c <scanMADT()>:
c000d67c:	53                   	push   ebx
c000d67d:	83 ec 38             	sub    esp,0x38
c000d680:	a1 a0 f4 01 c0       	mov    eax,ds:0xc001f4a0
c000d685:	25 00 04 00 00       	and    eax,0x400
c000d68a:	74 14                	je     c000d6a0 <scanMADT()+0x24>
c000d68c:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000d691:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d697:	83 e2 fb             	and    edx,0xfffffffb
c000d69a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d6a0:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000d6a5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d6ab:	83 e0 04             	and    eax,0x4
c000d6ae:	84 c0                	test   al,al
c000d6b0:	0f 84 8a 04 00 00    	je     c000db40 <scanMADT()+0x4c4>
c000d6b6:	e8 05 fb ff ff       	call   c000d1c0 <findRSDP()>
c000d6bb:	a3 ac 1c 02 c0       	mov    ds:0xc0021cac,eax
c000d6c0:	a1 ac 1c 02 c0       	mov    eax,ds:0xc0021cac
c000d6c5:	85 c0                	test   eax,eax
c000d6c7:	75 1b                	jne    c000d6e4 <scanMADT()+0x68>
c000d6c9:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000d6ce:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d6d4:	83 e2 fb             	and    edx,0xfffffffb
c000d6d7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d6dd:	e9 66 04 00 00       	jmp    c000db48 <scanMADT()+0x4cc>
c000d6e2:	66 90                	xchg   ax,ax
c000d6e4:	a1 ac 1c 02 c0       	mov    eax,ds:0xc0021cac
c000d6e9:	83 ec 0c             	sub    esp,0xc
c000d6ec:	50                   	push   eax
c000d6ed:	e8 c2 fd ff ff       	call   c000d4b4 <findRSDT(unsigned char*)>
c000d6f2:	83 c4 10             	add    esp,0x10
c000d6f5:	a3 a8 1c 02 c0       	mov    ds:0xc0021ca8,eax
c000d6fa:	a1 a8 1c 02 c0       	mov    eax,ds:0xc0021ca8
c000d6ff:	85 c0                	test   eax,eax
c000d701:	75 19                	jne    c000d71c <scanMADT()+0xa0>
c000d703:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000d708:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d70e:	83 e2 fb             	and    edx,0xfffffffb
c000d711:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d717:	e9 2c 04 00 00       	jmp    c000db48 <scanMADT()+0x4cc>
c000d71c:	a1 a8 1c 02 c0       	mov    eax,ds:0xc0021ca8
c000d721:	83 ec 0c             	sub    esp,0xc
c000d724:	50                   	push   eax
c000d725:	e8 26 fb ff ff       	call   c000d250 <loadACPITables(unsigned char*)>
c000d72a:	83 c4 10             	add    esp,0x10
c000d72d:	a1 a8 1c 02 c0       	mov    eax,ds:0xc0021ca8
c000d732:	83 ec 08             	sub    esp,0x8
c000d735:	68 68 d9 01 c0       	push   0xc001d968
c000d73a:	50                   	push   eax
c000d73b:	e8 c4 fe ff ff       	call   c000d604 <findDataTable(unsigned char*, char*)>
c000d740:	83 c4 10             	add    esp,0x10
c000d743:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d747:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d74c:	75 1a                	jne    c000d768 <scanMADT()+0xec>
c000d74e:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000d753:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d759:	83 e2 fe             	and    edx,0xfffffffe
c000d75c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d762:	e9 e1 03 00 00       	jmp    c000db48 <scanMADT()+0x4cc>
c000d767:	90                   	nop
c000d768:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d770:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d777:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d77b:	0f 87 c7 03 00 00    	ja     c000db48 <scanMADT()+0x4cc>
c000d781:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d789:	0f 87 b9 03 00 00    	ja     c000db48 <scanMADT()+0x4cc>
c000d78f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d793:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d797:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d79b:	8d 50 01             	lea    edx,[eax+0x1]
c000d79e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d7aa:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d7ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7b2:	8d 50 01             	lea    edx,[eax+0x1]
c000d7b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d7c1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d7c5:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000d7ca:	0f 86 74 03 00 00    	jbe    c000db44 <scanMADT()+0x4c8>
c000d7d0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000d7d5:	75 5d                	jne    c000d834 <scanMADT()+0x1b8>
c000d7d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7db:	8d 50 01             	lea    edx,[eax+0x1]
c000d7de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7e2:	8a 15 a0 1e 02 c0    	mov    dl,BYTE PTR ds:0xc0021ea0
c000d7e8:	81 e2 ff 00 00 00    	and    edx,0xff
c000d7ee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d7f2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d7f6:	88 82 e0 1e 02 c0    	mov    BYTE PTR [edx-0x3ffde120],al
c000d7fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d800:	8d 42 01             	lea    eax,[edx+0x1]
c000d803:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d807:	a0 a0 1e 02 c0       	mov    al,ds:0xc0021ea0
c000d80c:	8d 48 01             	lea    ecx,[eax+0x1]
c000d80f:	88 0d a0 1e 02 c0    	mov    BYTE PTR ds:0xc0021ea0,cl
c000d815:	25 ff 00 00 00       	and    eax,0xff
c000d81a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d81e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000d822:	88 90 c0 1e 02 c0    	mov    BYTE PTR [eax-0x3ffde140],dl
c000d828:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d82d:	e9 f6 02 00 00       	jmp    c000db28 <scanMADT()+0x4ac>
c000d832:	66 90                	xchg   ax,ax
c000d834:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000d839:	0f 85 29 01 00 00    	jne    c000d968 <scanMADT()+0x2ec>
c000d83f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d843:	8d 50 01             	lea    edx,[eax+0x1]
c000d846:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84a:	8a 15 60 1d 02 c0    	mov    dl,BYTE PTR ds:0xc0021d60
c000d850:	81 e2 ff 00 00 00    	and    edx,0xff
c000d856:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d85a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d85e:	88 82 80 1d 02 c0    	mov    BYTE PTR [edx-0x3ffde280],al
c000d864:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000d868:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d86c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d870:	01 d0                	add    eax,edx
c000d872:	83 c0 2c             	add    eax,0x2c
c000d875:	8a 00                	mov    al,BYTE PTR [eax]
c000d877:	31 d2                	xor    edx,edx
c000d879:	88 c2                	mov    dl,al
c000d87b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d87f:	8d 48 01             	lea    ecx,[eax+0x1]
c000d882:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d886:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d88a:	25 ff 00 00 00       	and    eax,0xff
c000d88f:	c1 e0 08             	shl    eax,0x8
c000d892:	89 d1                	mov    ecx,edx
c000d894:	09 c1                	or     ecx,eax
c000d896:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d89a:	8d 50 02             	lea    edx,[eax+0x2]
c000d89d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8a1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d8a5:	25 ff 00 00 00       	and    eax,0xff
c000d8aa:	c1 e0 10             	shl    eax,0x10
c000d8ad:	09 c1                	or     ecx,eax
c000d8af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8b3:	8d 50 03             	lea    edx,[eax+0x3]
c000d8b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d8be:	25 ff 00 00 00       	and    eax,0xff
c000d8c3:	c1 e0 18             	shl    eax,0x18
c000d8c6:	09 c1                	or     ecx,eax
c000d8c8:	89 ca                	mov    edx,ecx
c000d8ca:	a0 60 1d 02 c0       	mov    al,ds:0xc0021d60
c000d8cf:	25 ff 00 00 00       	and    eax,0xff
c000d8d4:	89 14 85 a0 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde260],edx
c000d8db:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d8e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8e8:	01 d0                	add    eax,edx
c000d8ea:	83 c0 2c             	add    eax,0x2c
c000d8ed:	8a 00                	mov    al,BYTE PTR [eax]
c000d8ef:	31 d2                	xor    edx,edx
c000d8f1:	88 c2                	mov    dl,al
c000d8f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8f7:	8d 48 01             	lea    ecx,[eax+0x1]
c000d8fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d902:	25 ff 00 00 00       	and    eax,0xff
c000d907:	c1 e0 08             	shl    eax,0x8
c000d90a:	89 d1                	mov    ecx,edx
c000d90c:	09 c1                	or     ecx,eax
c000d90e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d912:	8d 50 02             	lea    edx,[eax+0x2]
c000d915:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d919:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d91d:	25 ff 00 00 00       	and    eax,0xff
c000d922:	c1 e0 10             	shl    eax,0x10
c000d925:	09 c1                	or     ecx,eax
c000d927:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d92b:	8d 50 03             	lea    edx,[eax+0x3]
c000d92e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d932:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d936:	25 ff 00 00 00       	and    eax,0xff
c000d93b:	c1 e0 18             	shl    eax,0x18
c000d93e:	09 c1                	or     ecx,eax
c000d940:	89 ca                	mov    edx,ecx
c000d942:	a0 60 1d 02 c0       	mov    al,ds:0xc0021d60
c000d947:	25 ff 00 00 00       	and    eax,0xff
c000d94c:	89 14 85 20 1e 02 c0 	mov    DWORD PTR [eax*4-0x3ffde1e0],edx
c000d953:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d958:	a0 60 1d 02 c0       	mov    al,ds:0xc0021d60
c000d95d:	40                   	inc    eax
c000d95e:	a2 60 1d 02 c0       	mov    ds:0xc0021d60,al
c000d963:	e9 c0 01 00 00       	jmp    c000db28 <scanMADT()+0x4ac>
c000d968:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000d96d:	0f 85 fd 00 00 00    	jne    c000da70 <scanMADT()+0x3f4>
c000d973:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d977:	8d 50 01             	lea    edx,[eax+0x1]
c000d97a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d97e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d982:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d986:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d98a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d98e:	8d 50 01             	lea    edx,[eax+0x1]
c000d991:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d995:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d999:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d99d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d9a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9a9:	01 d0                	add    eax,edx
c000d9ab:	83 c0 2c             	add    eax,0x2c
c000d9ae:	8a 00                	mov    al,BYTE PTR [eax]
c000d9b0:	31 d2                	xor    edx,edx
c000d9b2:	88 c2                	mov    dl,al
c000d9b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9b8:	8d 48 01             	lea    ecx,[eax+0x1]
c000d9bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9bf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d9c3:	25 ff 00 00 00       	and    eax,0xff
c000d9c8:	c1 e0 08             	shl    eax,0x8
c000d9cb:	89 d1                	mov    ecx,edx
c000d9cd:	09 c1                	or     ecx,eax
c000d9cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9d3:	8d 50 02             	lea    edx,[eax+0x2]
c000d9d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9da:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d9de:	25 ff 00 00 00       	and    eax,0xff
c000d9e3:	c1 e0 10             	shl    eax,0x10
c000d9e6:	09 c1                	or     ecx,eax
c000d9e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9ec:	8d 50 03             	lea    edx,[eax+0x3]
c000d9ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9f3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d9f7:	25 ff 00 00 00       	and    eax,0xff
c000d9fc:	c1 e0 18             	shl    eax,0x18
c000d9ff:	09 c8                	or     eax,ecx
c000da01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da05:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000da0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da12:	01 d0                	add    eax,edx
c000da14:	83 c0 2c             	add    eax,0x2c
c000da17:	8a 00                	mov    al,BYTE PTR [eax]
c000da19:	25 ff 00 00 00       	and    eax,0xff
c000da1e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000da22:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da29:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000da2d:	81 e2 ff 00 00 00    	and    edx,0xff
c000da33:	c1 e2 08             	shl    edx,0x8
c000da36:	09 d0                	or     eax,edx
c000da38:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000da3d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000da42:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000da46:	25 ff 00 00 00       	and    eax,0xff
c000da4b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da4f:	88 90 40 ee 01 c0    	mov    BYTE PTR [eax-0x3ffe11c0],dl
c000da55:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000da59:	31 d2                	xor    edx,edx
c000da5b:	88 c2                	mov    dl,al
c000da5d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000da62:	66 89 84 12 40 1d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffde2c0],ax
c000da6a:	e9 b9 00 00 00       	jmp    c000db28 <scanMADT()+0x4ac>
c000da6f:	90                   	nop
c000da70:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000da75:	0f 85 a1 00 00 00    	jne    c000db1c <scanMADT()+0x4a0>
c000da7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da7f:	8d 50 01             	lea    edx,[eax+0x1]
c000da82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da8a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000da8e:	25 ff 00 00 00       	and    eax,0xff
c000da93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da9f:	01 d0                	add    eax,edx
c000daa1:	83 c0 2c             	add    eax,0x2c
c000daa4:	8a 00                	mov    al,BYTE PTR [eax]
c000daa6:	31 d2                	xor    edx,edx
c000daa8:	88 c2                	mov    dl,al
c000daaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000daae:	8d 48 01             	lea    ecx,[eax+0x1]
c000dab1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dab5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000dab9:	25 ff 00 00 00       	and    eax,0xff
c000dabe:	c1 e0 08             	shl    eax,0x8
c000dac1:	09 d0                	or     eax,edx
c000dac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dac7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000dacc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dad0:	8d 50 01             	lea    edx,[eax+0x1]
c000dad3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dad7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dadb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000dadf:	25 ff 00 00 00       	and    eax,0xff
c000dae4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daec:	c1 e0 08             	shl    eax,0x8
c000daef:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000daf3:	89 c1                	mov    ecx,eax
c000daf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daf9:	c1 e0 18             	shl    eax,0x18
c000dafc:	89 c3                	mov    ebx,eax
c000dafe:	a1 b0 1c 02 c0       	mov    eax,ds:0xc0021cb0
c000db03:	8d 50 01             	lea    edx,[eax+0x1]
c000db06:	89 15 b0 1c 02 c0    	mov    DWORD PTR ds:0xc0021cb0,edx
c000db0c:	09 d9                	or     ecx,ebx
c000db0e:	89 ca                	mov    edx,ecx
c000db10:	89 14 85 c0 1c 02 c0 	mov    DWORD PTR [eax*4-0x3ffde340],edx
c000db17:	eb 0f                	jmp    c000db28 <scanMADT()+0x4ac>
c000db19:	8d 76 00             	lea    esi,[esi+0x0]
c000db1c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000db21:	75 05                	jne    c000db28 <scanMADT()+0x4ac>
c000db23:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000db28:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000db2c:	31 d2                	xor    edx,edx
c000db2e:	88 c2                	mov    dl,al
c000db30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db34:	01 d0                	add    eax,edx
c000db36:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000db3a:	e9 31 fc ff ff       	jmp    c000d770 <scanMADT()+0xf4>
c000db3f:	90                   	nop
c000db40:	90                   	nop
c000db41:	eb 05                	jmp    c000db48 <scanMADT()+0x4cc>
c000db43:	90                   	nop
c000db44:	90                   	nop
c000db45:	8d 76 00             	lea    esi,[esi+0x0]
c000db48:	83 c4 38             	add    esp,0x38
c000db4b:	5b                   	pop    ebx
c000db4c:	c3                   	ret    
c000db4d:	90                   	nop
c000db4e:	66 90                	xchg   ax,ax

c000db50 <ACPI::ACPI()>:
c000db50:	83 ec 0c             	sub    esp,0xc
c000db53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db57:	83 ec 08             	sub    esp,0x8
c000db5a:	68 6d d9 01 c0       	push   0xc001d96d
c000db5f:	50                   	push   eax
c000db60:	e8 4b d4 ff ff       	call   c000afb0 <Device::Device(char const*)>
c000db65:	83 c4 10             	add    esp,0x10
c000db68:	ba a4 da 01 c0       	mov    edx,0xc001daa4
c000db6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db71:	89 10                	mov    DWORD PTR [eax],edx
c000db73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db77:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000db7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db82:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db90:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000db9a:	e8 dd fa ff ff       	call   c000d67c <scanMADT()>
c000db9f:	90                   	nop
c000dba0:	83 c4 0c             	add    esp,0xc
c000dba3:	c3                   	ret    

c000dba4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000dba4:	83 ec 2c             	sub    esp,0x2c
c000dba7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dbab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dbaf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dbb3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000dbb7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000dbbc:	88 d0                	mov    al,dl
c000dbbe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dbc2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dbc7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000dbcf:	90                   	nop
c000dbd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbd4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dbda:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000dbde:	0f 8d 9c 00 00 00    	jge    c000dc80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000dbe4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbe8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dbec:	83 c2 2a             	add    edx,0x2a
c000dbef:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000dbf3:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000dbf8:	75 7a                	jne    c000dc74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000dbfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbfe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc02:	83 c2 2a             	add    edx,0x2a
c000dc05:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000dc09:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000dc0d:	75 65                	jne    c000dc74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000dc0f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dc14:	74 3a                	je     c000dc50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000dc16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc1e:	83 c2 2a             	add    edx,0x2a
c000dc21:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000dc25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dc29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc2c:	39 c2                	cmp    edx,eax
c000dc2e:	74 10                	je     c000dc40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000dc30:	83 ec 0c             	sub    esp,0xc
c000dc33:	68 e8 d8 01 c0       	push   0xc001d8e8
c000dc38:	e8 ea 18 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	83 ec 0c             	sub    esp,0xc
c000dc43:	68 72 d9 01 c0       	push   0xc001d972
c000dc48:	e8 da 18 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000dc4d:	83 c4 10             	add    esp,0x10
c000dc50:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000dc54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc5c:	83 c2 2a             	add    edx,0x2a
c000dc5f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000dc63:	8b 02                	mov    eax,DWORD PTR [edx]
c000dc65:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dc68:	89 01                	mov    DWORD PTR [ecx],eax
c000dc6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000dc6d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dc72:	66 90                	xchg   ax,ax
c000dc74:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000dc78:	e9 53 ff ff ff       	jmp    c000dbd0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000dc7d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc80:	90                   	nop
c000dc81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dc85:	83 c4 2c             	add    esp,0x2c
c000dc88:	c2 04 00             	ret    0x4
c000dc8b:	90                   	nop

c000dc8c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000dc8c:	83 ec 1c             	sub    esp,0x1c
c000dc8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc93:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc97:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dc9b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000dca0:	88 c8                	mov    al,cl
c000dca2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000dca6:	88 d0                	mov    al,dl
c000dca8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dcac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dcb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcba:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dcbd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000dcc1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000dcc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dccf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dcd3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000dcd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcda:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000dcdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dce9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000dced:	8d 48 01             	lea    ecx,[eax+0x1]
c000dcf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcf4:	83 c2 2a             	add    edx,0x2a
c000dcf7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000dcfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcff:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dd05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd09:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dd0c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dd10:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000dd14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd18:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dd1e:	8d 50 01             	lea    edx,[eax+0x1]
c000dd21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd25:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000dd2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd2f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dd35:	3d 00 02 00 00       	cmp    eax,0x200
c000dd3a:	75 10                	jne    c000dd4c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000dd3c:	83 ec 0c             	sub    esp,0xc
c000dd3f:	68 81 d9 01 c0       	push   0xc001d981
c000dd44:	e8 de 17 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000dd49:	83 c4 10             	add    esp,0x10
c000dd4c:	90                   	nop
c000dd4d:	83 c4 1c             	add    esp,0x1c
c000dd50:	c3                   	ret    
c000dd51:	90                   	nop
c000dd52:	66 90                	xchg   ax,ax

c000dd54 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000dd54:	b8 00 00 00 00       	mov    eax,0x0
c000dd59:	c3                   	ret    
c000dd5a:	66 90                	xchg   ax,ax

c000dd5c <ACPI::detectPCI()>:
c000dd5c:	53                   	push   ebx
c000dd5d:	83 ec 28             	sub    esp,0x28
c000dd60:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dd65:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000dd6a:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000dd6f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000dd75:	83 e0 04             	and    eax,0x4
c000dd78:	84 c0                	test   al,al
c000dd7a:	74 2c                	je     c000dda8 <ACPI::detectPCI()+0x4c>
c000dd7c:	a1 a8 1c 02 c0       	mov    eax,ds:0xc0021ca8
c000dd81:	83 ec 08             	sub    esp,0x8
c000dd84:	68 9e d9 01 c0       	push   0xc001d99e
c000dd89:	50                   	push   eax
c000dd8a:	e8 75 f8 ff ff       	call   c000d604 <findDataTable(unsigned char*, char*)>
c000dd8f:	83 c4 10             	add    esp,0x10
c000dd92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd96:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000dd9b:	74 0b                	je     c000dda8 <ACPI::detectPCI()+0x4c>
c000dd9d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dda2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dda7:	90                   	nop
c000dda8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ddb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddb4:	8a 00                	mov    al,BYTE PTR [eax]
c000ddb6:	3c 01                	cmp    al,0x1
c000ddb8:	75 0e                	jne    c000ddc8 <ACPI::detectPCI()+0x6c>
c000ddba:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ddbf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ddc4:	eb 2a                	jmp    c000ddf0 <ACPI::detectPCI()+0x94>
c000ddc6:	66 90                	xchg   ax,ax
c000ddc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddcc:	8a 00                	mov    al,BYTE PTR [eax]
c000ddce:	3c 02                	cmp    al,0x2
c000ddd0:	75 1e                	jne    c000ddf0 <ACPI::detectPCI()+0x94>
c000ddd2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ddd7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dddc:	74 12                	je     c000ddf0 <ACPI::detectPCI()+0x94>
c000ddde:	83 ec 0c             	sub    esp,0xc
c000dde1:	68 18 d9 01 c0       	push   0xc001d918
c000dde6:	e8 3c 17 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000ddeb:	83 c4 10             	add    esp,0x10
c000ddee:	66 90                	xchg   ax,ax
c000ddf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ddf4:	83 f0 01             	xor    eax,0x1
c000ddf7:	84 c0                	test   al,al
c000ddf9:	74 41                	je     c000de3c <ACPI::detectPCI()+0xe0>
c000ddfb:	e8 50 23 ff ff       	call   c0000150 <manualPCIProbe>
c000de00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de04:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000de09:	75 0d                	jne    c000de18 <ACPI::detectPCI()+0xbc>
c000de0b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de10:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000de15:	eb 25                	jmp    c000de3c <ACPI::detectPCI()+0xe0>
c000de17:	90                   	nop
c000de18:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000de1d:	75 1d                	jne    c000de3c <ACPI::detectPCI()+0xe0>
c000de1f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de24:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000de29:	74 11                	je     c000de3c <ACPI::detectPCI()+0xe0>
c000de2b:	83 ec 0c             	sub    esp,0xc
c000de2e:	68 18 d9 01 c0       	push   0xc001d918
c000de33:	e8 ef 16 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	90                   	nop
c000de3c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000de41:	0f 84 85 00 00 00    	je     c000decc <ACPI::detectPCI()+0x170>
c000de47:	83 ec 0c             	sub    esp,0xc
c000de4a:	68 a3 d9 01 c0       	push   0xc001d9a3
c000de4f:	e8 1b 8e ff ff       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c000de54:	83 c4 10             	add    esp,0x10
c000de57:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000de5f:	83 ec 0c             	sub    esp,0xc
c000de62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000de66:	e8 aa 8d ff ff       	call   c0006c15 <malloc>
c000de6b:	83 c4 10             	add    esp,0x10
c000de6e:	89 c3                	mov    ebx,eax
c000de70:	83 ec 0c             	sub    esp,0xc
c000de73:	53                   	push   ebx
c000de74:	e8 99 9b 00 00       	call   c0017a12 <PCI::PCI()>
c000de79:	83 c4 10             	add    esp,0x10
c000de7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000de80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de84:	83 ec 08             	sub    esp,0x8
c000de87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de8b:	50                   	push   eax
c000de8c:	e8 87 cf ff ff       	call   c000ae18 <Device::addChild(Device*)>
c000de91:	83 c4 10             	add    esp,0x10
c000de94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de98:	8b 00                	mov    eax,DWORD PTR [eax]
c000de9a:	83 c0 08             	add    eax,0x8
c000de9d:	8b 00                	mov    eax,DWORD PTR [eax]
c000de9f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dea4:	74 0a                	je     c000deb0 <ACPI::detectPCI()+0x154>
c000dea6:	ba 01 00 00 00       	mov    edx,0x1
c000deab:	eb 0b                	jmp    c000deb8 <ACPI::detectPCI()+0x15c>
c000dead:	8d 76 00             	lea    esi,[esi+0x0]
c000deb0:	ba 02 00 00 00       	mov    edx,0x2
c000deb5:	8d 76 00             	lea    esi,[esi+0x0]
c000deb8:	6a 00                	push   0x0
c000deba:	6a 00                	push   0x0
c000debc:	52                   	push   edx
c000debd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dec1:	ff d0                	call   eax
c000dec3:	83 c4 10             	add    esp,0x10
c000dec6:	e9 91 00 00 00       	jmp    c000df5c <ACPI::detectPCI()+0x200>
c000decb:	90                   	nop
c000decc:	83 ec 0c             	sub    esp,0xc
c000decf:	68 bb d9 01 c0       	push   0xc001d9bb
c000ded4:	e8 96 8d ff ff       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c000ded9:	83 c4 10             	add    esp,0x10
c000dedc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000dee3:	83 ec 0c             	sub    esp,0xc
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 26 8d ff ff       	call   c0006c15 <malloc>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	89 c3                	mov    ebx,eax
c000def4:	83 ec 0c             	sub    esp,0xc
c000def7:	53                   	push   ebx
c000def8:	e8 41 a6 00 00       	call   c001853e <IDE::IDE()>
c000defd:	83 c4 10             	add    esp,0x10
c000df00:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000df04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df08:	83 ec 08             	sub    esp,0x8
c000df0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df0f:	50                   	push   eax
c000df10:	e8 03 cf ff ff       	call   c000ae18 <Device::addChild(Device*)>
c000df15:	83 c4 10             	add    esp,0x10
c000df18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df1c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000df26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df2a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000df33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df37:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000df40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df44:	8b 00                	mov    eax,DWORD PTR [eax]
c000df46:	83 c0 08             	add    eax,0x8
c000df49:	8b 00                	mov    eax,DWORD PTR [eax]
c000df4b:	6a 00                	push   0x0
c000df4d:	6a 00                	push   0x0
c000df4f:	6a 00                	push   0x0
c000df51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df55:	ff d0                	call   eax
c000df57:	83 c4 10             	add    esp,0x10
c000df5a:	66 90                	xchg   ax,ax
c000df5c:	90                   	nop
c000df5d:	83 c4 28             	add    esp,0x28
c000df60:	5b                   	pop    ebx
c000df61:	c3                   	ret    
c000df62:	66 90                	xchg   ax,ax

c000df64 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000df64:	83 ec 1c             	sub    esp,0x1c
c000df67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000df6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000df6e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000df72:	8b 15 88 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f488
c000df78:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000df7c:	25 ff 00 00 00       	and    eax,0xff
c000df81:	83 ec 08             	sub    esp,0x8
c000df84:	50                   	push   eax
c000df85:	52                   	push   edx
c000df86:	e8 37 83 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c000df8b:	83 c4 10             	add    esp,0x10
c000df8e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000df92:	8b 15 88 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f488
c000df98:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000df9c:	25 ff 00 00 00       	and    eax,0xff
c000dfa1:	83 ec 04             	sub    esp,0x4
c000dfa4:	6a 01                	push   0x1
c000dfa6:	50                   	push   eax
c000dfa7:	52                   	push   edx
c000dfa8:	e8 2b 84 ff ff       	call   c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c000dfad:	83 c4 10             	add    esp,0x10
c000dfb0:	90                   	nop
c000dfb1:	83 c4 1c             	add    esp,0x1c
c000dfb4:	c3                   	ret    
c000dfb5:	90                   	nop
c000dfb6:	66 90                	xchg   ax,ax

c000dfb8 <ACPI::sleep()>:
c000dfb8:	83 ec 0c             	sub    esp,0xc
c000dfbb:	a1 80 1a 02 c0       	mov    eax,ds:0xc0021a80
c000dfc0:	85 c0                	test   eax,eax
c000dfc2:	74 08                	je     c000dfcc <ACPI::sleep()+0x14>
c000dfc4:	a1 80 1a 02 c0       	mov    eax,ds:0xc0021a80
c000dfc9:	ff d0                	call   eax
c000dfcb:	90                   	nop
c000dfcc:	90                   	nop
c000dfcd:	83 c4 0c             	add    esp,0xc
c000dfd0:	c3                   	ret    
c000dfd1:	90                   	nop
c000dfd2:	66 90                	xchg   ax,ax

c000dfd4 <ACPI::open(int, int, void*)>:
c000dfd4:	57                   	push   edi
c000dfd5:	56                   	push   esi
c000dfd6:	53                   	push   ebx
c000dfd7:	81 ec 70 01 00 00    	sub    esp,0x170
c000dfdd:	83 ec 0c             	sub    esp,0xc
c000dfe0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000dfe7:	e8 70 fd ff ff       	call   c000dd5c <ACPI::detectPCI()>
c000dfec:	83 c4 10             	add    esp,0x10
c000dfef:	83 ec 0c             	sub    esp,0xc
c000dff2:	68 40 d9 01 c0       	push   0xc001d940
c000dff7:	e8 73 8c ff ff       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	83 ec 0c             	sub    esp,0xc
c000e002:	68 d0 d9 01 c0       	push   0xc001d9d0
c000e007:	e8 24 35 00 00       	call   c0011530 <Thr::loadKernelSymbolTable(char const*)>
c000e00c:	83 c4 10             	add    esp,0x10
c000e00f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000e017:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000e022:	83 ec 0c             	sub    esp,0xc
c000e025:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e02c:	e8 e4 8b ff ff       	call   c0006c15 <malloc>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	89 c3                	mov    ebx,eax
c000e036:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c000e03b:	83 ec 04             	sub    esp,0x4
c000e03e:	50                   	push   eax
c000e03f:	68 ee d9 01 c0       	push   0xc001d9ee
c000e044:	53                   	push   ebx
c000e045:	e8 04 bf ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c000e04a:	83 c4 10             	add    esp,0x10
c000e04d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000e054:	83 ec 08             	sub    esp,0x8
c000e057:	6a 01                	push   0x1
c000e059:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e060:	e8 a9 bf ff ff       	call   c000a00e <File::open(FileOpenMode)>
c000e065:	83 c4 10             	add    esp,0x10
c000e068:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000e06f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000e077:	75 17                	jne    c000e090 <ACPI::open(int, int, void*)+0xbc>
c000e079:	83 ec 0c             	sub    esp,0xc
c000e07c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e083:	e8 e4 bf ff ff       	call   c000a06c <File::close()>
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	eb 0b                	jmp    c000e098 <ACPI::open(int, int, void*)+0xc4>
c000e08d:	8d 76 00             	lea    esi,[esi+0x0]
c000e090:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000e098:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000e0a0:	74 1e                	je     c000e0c0 <ACPI::open(int, int, void*)+0xec>
c000e0a2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000e0a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0ab:	83 c0 08             	add    eax,0x8
c000e0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0b0:	83 ec 0c             	sub    esp,0xc
c000e0b3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e0ba:	ff d0                	call   eax
c000e0bc:	83 c4 10             	add    esp,0x10
c000e0bf:	90                   	nop
c000e0c0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000e0c7:	83 f0 01             	xor    eax,0x1
c000e0ca:	84 c0                	test   al,al
c000e0cc:	74 42                	je     c000e110 <ACPI::open(int, int, void*)+0x13c>
c000e0ce:	83 ec 0c             	sub    esp,0xc
c000e0d1:	68 0c da 01 c0       	push   0xc001da0c
c000e0d6:	e8 94 8b ff ff       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c000e0db:	83 c4 10             	add    esp,0x10
c000e0de:	83 ec 04             	sub    esp,0x4
c000e0e1:	6a 0c                	push   0xc
c000e0e3:	68 27 da 01 c0       	push   0xc001da27
c000e0e8:	68 38 da 01 c0       	push   0xc001da38
c000e0ed:	e8 3d 1c 00 00       	call   c000fd2f <Reg::readIntWithDefault(char*, char*, int)>
c000e0f2:	83 c4 10             	add    esp,0x10
c000e0f5:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000e0fc:	83 ec 0c             	sub    esp,0xc
c000e0ff:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000e106:	e8 50 a8 ff ff       	call   c000895b <Virt::setupPageSwapping(int)>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	66 90                	xchg   ax,ax
c000e110:	83 ec 0c             	sub    esp,0xc
c000e113:	68 af ca 01 c0       	push   0xc001caaf
c000e118:	e8 52 8b ff ff       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000e127:	83 ec 08             	sub    esp,0x8
c000e12a:	6a 12                	push   0x12
c000e12c:	50                   	push   eax
c000e12d:	e8 fe cf ff ff       	call   c000b130 <getDevicesOfType(DeviceType)>
c000e132:	83 c4 0c             	add    esp,0xc
c000e135:	8d 76 00             	lea    esi,[esi+0x0]
c000e138:	83 ec 0c             	sub    esp,0xc
c000e13b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e142:	50                   	push   eax
c000e143:	e8 84 dd 00 00       	call   c001becc <LinkedList<Device>::isEmpty()>
c000e148:	83 c4 10             	add    esp,0x10
c000e14b:	83 f0 01             	xor    eax,0x1
c000e14e:	84 c0                	test   al,al
c000e150:	0f 84 46 01 00 00    	je     c000e29c <ACPI::open(int, int, void*)+0x2c8>
c000e156:	83 ec 0c             	sub    esp,0xc
c000e159:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e160:	50                   	push   eax
c000e161:	e8 82 dd 00 00       	call   c001bee8 <LinkedList<Device>::getFirstElement()>
c000e166:	83 c4 10             	add    esp,0x10
c000e169:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000e170:	83 ec 0c             	sub    esp,0xc
c000e173:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e17a:	50                   	push   eax
c000e17b:	e8 70 dd 00 00       	call   c001bef0 <LinkedList<Device>::removeFirst()>
c000e180:	83 c4 10             	add    esp,0x10
c000e183:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000e18a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000e191:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000e198:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e19c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000e1a2:	ba 09 00 00 00       	mov    edx,0x9
c000e1a7:	fc                   	cld    
c000e1a8:	89 c7                	mov    edi,eax
c000e1aa:	89 de                	mov    esi,ebx
c000e1ac:	89 d1                	mov    ecx,edx
c000e1ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e1b0:	83 ec 08             	sub    esp,0x8
c000e1b3:	8d 44 24 38          	lea    eax,[esp+0x38]
c000e1b7:	50                   	push   eax
c000e1b8:	83 ec 24             	sub    esp,0x24
c000e1bb:	89 e0                	mov    eax,esp
c000e1bd:	89 c3                	mov    ebx,eax
c000e1bf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000e1c3:	ba 09 00 00 00       	mov    edx,0x9
c000e1c8:	89 df                	mov    edi,ebx
c000e1ca:	89 c6                	mov    esi,eax
c000e1cc:	89 d1                	mov    ecx,edx
c000e1ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e1d0:	e8 1f 9d 00 00       	call   c0017ef4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000e1d5:	83 c4 30             	add    esp,0x30
c000e1d8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000e1df:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000e1e7:	0f 84 4b ff ff ff    	je     c000e138 <ACPI::open(int, int, void*)+0x164>
c000e1ed:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000e1f8:	83 ec 0c             	sub    esp,0xc
c000e1fb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e202:	e8 0e 8a ff ff       	call   c0006c15 <malloc>
c000e207:	83 c4 10             	add    esp,0x10
c000e20a:	89 c3                	mov    ebx,eax
c000e20c:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c000e211:	83 ec 04             	sub    esp,0x4
c000e214:	50                   	push   eax
c000e215:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e21c:	53                   	push   ebx
c000e21d:	e8 2c bd ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c000e222:	83 c4 10             	add    esp,0x10
c000e225:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000e22c:	83 ec 0c             	sub    esp,0xc
c000e22f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e236:	e8 41 c0 ff ff       	call   c000a27c <File::exists()>
c000e23b:	83 c4 10             	add    esp,0x10
c000e23e:	84 c0                	test   al,al
c000e240:	74 2a                	je     c000e26c <ACPI::open(int, int, void*)+0x298>
c000e242:	83 ec 08             	sub    esp,0x8
c000e245:	6a 01                	push   0x1
c000e247:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e24e:	e8 54 3d 00 00       	call   c0011fa7 <Thr::loadDLL(char const*, bool)>
c000e253:	83 c4 10             	add    esp,0x10
c000e256:	83 ec 08             	sub    esp,0x8
c000e259:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e260:	50                   	push   eax
c000e261:	e8 72 3f 00 00       	call   c00121d8 <Thr::executeDLL(unsigned long, void*)>
c000e266:	83 c4 10             	add    esp,0x10
c000e269:	8d 76 00             	lea    esi,[esi+0x0]
c000e26c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000e274:	0f 84 be fe ff ff    	je     c000e138 <ACPI::open(int, int, void*)+0x164>
c000e27a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000e281:	8b 00                	mov    eax,DWORD PTR [eax]
c000e283:	83 c0 08             	add    eax,0x8
c000e286:	8b 00                	mov    eax,DWORD PTR [eax]
c000e288:	83 ec 0c             	sub    esp,0xc
c000e28b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e292:	ff d0                	call   eax
c000e294:	83 c4 10             	add    esp,0x10
c000e297:	e9 9c fe ff ff       	jmp    c000e138 <ACPI::open(int, int, void*)+0x164>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e2a6:	50                   	push   eax
c000e2a7:	e8 1c dc 00 00       	call   c001bec8 <LinkedList<Device>::~LinkedList()>
c000e2ac:	83 c4 10             	add    esp,0x10
c000e2af:	8b 1d 88 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f488
c000e2b5:	83 ec 08             	sub    esp,0x8
c000e2b8:	6a 01                	push   0x1
c000e2ba:	68 3f da 01 c0       	push   0xc001da3f
c000e2bf:	e8 e3 3c 00 00       	call   c0011fa7 <Thr::loadDLL(char const*, bool)>
c000e2c4:	83 c4 10             	add    esp,0x10
c000e2c7:	83 ec 08             	sub    esp,0x8
c000e2ca:	53                   	push   ebx
c000e2cb:	50                   	push   eax
c000e2cc:	e8 07 3f 00 00       	call   c00121d8 <Thr::executeDLL(unsigned long, void*)>
c000e2d1:	83 c4 10             	add    esp,0x10
c000e2d4:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000e2d9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000e2df:	83 e0 04             	and    eax,0x4
c000e2e2:	84 c0                	test   al,al
c000e2e4:	0f 84 16 01 00 00    	je     c000e400 <ACPI::open(int, int, void*)+0x42c>
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	68 5c da 01 c0       	push   0xc001da5c
c000e2f2:	e8 78 89 ff ff       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000e305:	83 ec 0c             	sub    esp,0xc
c000e308:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000e30f:	e8 01 89 ff ff       	call   c0006c15 <malloc>
c000e314:	83 c4 10             	add    esp,0x10
c000e317:	89 c3                	mov    ebx,eax
c000e319:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c000e31e:	83 ec 04             	sub    esp,0x4
c000e321:	50                   	push   eax
c000e322:	68 79 da 01 c0       	push   0xc001da79
c000e327:	53                   	push   ebx
c000e328:	e8 21 bc ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c000e32d:	83 c4 10             	add    esp,0x10
c000e330:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000e337:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e33f:	74 1b                	je     c000e35c <ACPI::open(int, int, void*)+0x388>
c000e341:	83 ec 0c             	sub    esp,0xc
c000e344:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e34b:	e8 2c bf ff ff       	call   c000a27c <File::exists()>
c000e350:	83 c4 10             	add    esp,0x10
c000e353:	84 c0                	test   al,al
c000e355:	74 05                	je     c000e35c <ACPI::open(int, int, void*)+0x388>
c000e357:	b0 01                	mov    al,0x1
c000e359:	eb 05                	jmp    c000e360 <ACPI::open(int, int, void*)+0x38c>
c000e35b:	90                   	nop
c000e35c:	b0 00                	mov    al,0x0
c000e35e:	66 90                	xchg   ax,ax
c000e360:	84 c0                	test   al,al
c000e362:	74 28                	je     c000e38c <ACPI::open(int, int, void*)+0x3b8>
c000e364:	83 ec 08             	sub    esp,0x8
c000e367:	6a 01                	push   0x1
c000e369:	68 79 da 01 c0       	push   0xc001da79
c000e36e:	e8 34 3c 00 00       	call   c0011fa7 <Thr::loadDLL(char const*, bool)>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	83 ec 08             	sub    esp,0x8
c000e379:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000e380:	50                   	push   eax
c000e381:	e8 52 3e 00 00       	call   c00121d8 <Thr::executeDLL(unsigned long, void*)>
c000e386:	83 c4 10             	add    esp,0x10
c000e389:	8d 76 00             	lea    esi,[esi+0x0]
c000e38c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e394:	74 2a                	je     c000e3c0 <ACPI::open(int, int, void*)+0x3ec>
c000e396:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e39e:	74 20                	je     c000e3c0 <ACPI::open(int, int, void*)+0x3ec>
c000e3a0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000e3a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3a9:	83 c0 08             	add    eax,0x8
c000e3ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3ae:	83 ec 0c             	sub    esp,0xc
c000e3b1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e3b8:	ff d0                	call   eax
c000e3ba:	83 c4 10             	add    esp,0x10
c000e3bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e3c0:	a1 a8 1c 02 c0       	mov    eax,ds:0xc0021ca8
c000e3c5:	83 ec 08             	sub    esp,0x8
c000e3c8:	68 96 da 01 c0       	push   0xc001da96
c000e3cd:	50                   	push   eax
c000e3ce:	e8 31 f2 ff ff       	call   c000d604 <findDataTable(unsigned char*, char*)>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000e3dd:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000e3e5:	74 19                	je     c000e400 <ACPI::open(int, int, void*)+0x42c>
c000e3e7:	83 ec 08             	sub    esp,0x8
c000e3ea:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e3f1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e3f8:	e8 67 fb ff ff       	call   c000df64 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000e3fd:	83 c4 10             	add    esp,0x10
c000e400:	b8 00 00 00 00       	mov    eax,0x0
c000e405:	81 c4 70 01 00 00    	add    esp,0x170
c000e40b:	5b                   	pop    ebx
c000e40c:	5e                   	pop    esi
c000e40d:	5f                   	pop    edi
c000e40e:	c3                   	ret    
c000e40f:	90                   	nop

c000e410 <CPU::close(int, int, void*)>:
c000e410:	31 c0                	xor    eax,eax
c000e412:	c3                   	ret    
c000e413:	90                   	nop

c000e414 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000e414:	60                   	pusha  
c000e415:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e419:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e41d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e421:	9c                   	pushf  
c000e422:	fa                   	cli    
c000e423:	0f 09                	wbinvd 
c000e425:	0f 30                	wrmsr  
c000e427:	9d                   	popf   
c000e428:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e42c:	89 02                	mov    DWORD PTR [edx],eax
c000e42e:	61                   	popa   
c000e42f:	c3                   	ret    

c000e430 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000e430:	60                   	pusha  
c000e431:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e435:	9c                   	pushf  
c000e436:	fa                   	cli    
c000e437:	0f 09                	wbinvd 
c000e439:	31 c0                	xor    eax,eax
c000e43b:	31 d2                	xor    edx,edx
c000e43d:	0f 32                	rdmsr  
c000e43f:	9d                   	popf   
c000e440:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e444:	89 02                	mov    DWORD PTR [edx],eax
c000e446:	61                   	popa   
c000e447:	c3                   	ret    

c000e448 <CPU::AMD_K6_writeback(int, int, int)>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e451:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000e456:	75 5d                	jne    c000e4b5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e458:	83 f8 08             	cmp    eax,0x8
c000e45b:	75 09                	jne    c000e466 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000e45d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000e462:	7e 13                	jle    c000e477 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e464:	eb 30                	jmp    c000e496 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e466:	83 f8 06             	cmp    eax,0x6
c000e469:	7c 4a                	jl     c000e4b5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e46b:	83 f8 07             	cmp    eax,0x7
c000e46e:	7e 07                	jle    c000e477 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e470:	83 f8 09             	cmp    eax,0x9
c000e473:	74 21                	je     c000e496 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e475:	eb 3e                	jmp    c000e4b5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e477:	89 e6                	mov    esi,esp
c000e479:	8b 1d ac f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f4ac
c000e47f:	56                   	push   esi
c000e480:	c1 eb 15             	shr    ebx,0x15
c000e483:	68 82 00 00 c0       	push   0xc0000082
c000e488:	83 e3 7e             	and    ebx,0x7e
c000e48b:	e8 a0 ff ff ff       	call   c000e430 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e490:	56                   	push   esi
c000e491:	6a 00                	push   0x0
c000e493:	53                   	push   ebx
c000e494:	eb 12                	jmp    c000e4a8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000e496:	89 e3                	mov    ebx,esp
c000e498:	53                   	push   ebx
c000e499:	68 82 00 00 c0       	push   0xc0000082
c000e49e:	e8 8d ff ff ff       	call   c000e430 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e4a3:	53                   	push   ebx
c000e4a4:	6a 00                	push   0x0
c000e4a6:	6a 00                	push   0x0
c000e4a8:	68 82 00 00 c0       	push   0xc0000082
c000e4ad:	e8 62 ff ff ff       	call   c000e414 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000e4b2:	83 c4 18             	add    esp,0x18
c000e4b5:	83 c4 10             	add    esp,0x10
c000e4b8:	5b                   	pop    ebx
c000e4b9:	5e                   	pop    esi
c000e4ba:	c3                   	ret    
c000e4bb:	90                   	nop

c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000e4bc:	55                   	push   ebp
c000e4bd:	57                   	push   edi
c000e4be:	56                   	push   esi
c000e4bf:	53                   	push   ebx
c000e4c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e4c4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e4c8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e4cc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000e4d0:	39 05 50 ee 01 c0    	cmp    DWORD PTR ds:0xc001ee50,eax
c000e4d6:	75 23                	jne    c000e4fb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000e4d8:	a1 0c 1f 02 c0       	mov    eax,ds:0xc0021f0c
c000e4dd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e4e1:	89 06                	mov    DWORD PTR [esi],eax
c000e4e3:	a1 08 1f 02 c0       	mov    eax,ds:0xc0021f08
c000e4e8:	89 07                	mov    DWORD PTR [edi],eax
c000e4ea:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c000e4ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e4f2:	a1 00 1f 02 c0       	mov    eax,ds:0xc0021f00
c000e4f7:	89 02                	mov    DWORD PTR [edx],eax
c000e4f9:	eb 3f                	jmp    c000e53a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000e4fb:	31 c9                	xor    ecx,ecx
c000e4fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e501:	0f a2                	cpuid  
c000e503:	89 06                	mov    DWORD PTR [esi],eax
c000e505:	89 1f                	mov    DWORD PTR [edi],ebx
c000e507:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e50b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000e50e:	89 10                	mov    DWORD PTR [eax],edx
c000e510:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e514:	a3 50 ee 01 c0       	mov    ds:0xc001ee50,eax
c000e519:	8b 06                	mov    eax,DWORD PTR [esi]
c000e51b:	a3 0c 1f 02 c0       	mov    ds:0xc0021f0c,eax
c000e520:	8b 07                	mov    eax,DWORD PTR [edi]
c000e522:	a3 08 1f 02 c0       	mov    ds:0xc0021f08,eax
c000e527:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e52a:	a3 04 1f 02 c0       	mov    ds:0xc0021f04,eax
c000e52f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e533:	8b 00                	mov    eax,DWORD PTR [eax]
c000e535:	a3 00 1f 02 c0       	mov    ds:0xc0021f00,eax
c000e53a:	5b                   	pop    ebx
c000e53b:	5e                   	pop    esi
c000e53c:	5f                   	pop    edi
c000e53d:	5d                   	pop    ebp
c000e53e:	c3                   	ret    
c000e53f:	90                   	nop

c000e540 <CPU::cpuidCheckEDX(unsigned int)>:
c000e540:	83 ec 10             	sub    esp,0x10
c000e543:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e547:	50                   	push   eax
c000e548:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e54c:	50                   	push   eax
c000e54d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e551:	50                   	push   eax
c000e552:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e556:	50                   	push   eax
c000e557:	6a 01                	push   0x1
c000e559:	e8 5e ff ff ff       	call   c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e55e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e562:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000e566:	0f 95 c0             	setne  al
c000e569:	83 c4 24             	add    esp,0x24
c000e56c:	c3                   	ret    
c000e56d:	90                   	nop

c000e56e <CPU::cpuidCheckECX(unsigned int)>:
c000e56e:	83 ec 10             	sub    esp,0x10
c000e571:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e575:	50                   	push   eax
c000e576:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e57a:	50                   	push   eax
c000e57b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e57f:	50                   	push   eax
c000e580:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e584:	50                   	push   eax
c000e585:	6a 01                	push   0x1
c000e587:	e8 30 ff ff ff       	call   c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e58c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e590:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e594:	0f 95 c0             	setne  al
c000e597:	83 c4 24             	add    esp,0x24
c000e59a:	c3                   	ret    
c000e59b:	90                   	nop

c000e59c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000e59c:	83 ec 10             	sub    esp,0x10
c000e59f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5a3:	50                   	push   eax
c000e5a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5a8:	50                   	push   eax
c000e5a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5ad:	50                   	push   eax
c000e5ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5b2:	50                   	push   eax
c000e5b3:	6a 07                	push   0x7
c000e5b5:	e8 02 ff ff ff       	call   c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e5ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5be:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000e5c2:	0f 95 c0             	setne  al
c000e5c5:	83 c4 24             	add    esp,0x24
c000e5c8:	c3                   	ret    
c000e5c9:	90                   	nop

c000e5ca <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000e5ca:	83 ec 10             	sub    esp,0x10
c000e5cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5d1:	50                   	push   eax
c000e5d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5d6:	50                   	push   eax
c000e5d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5db:	50                   	push   eax
c000e5dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5e0:	50                   	push   eax
c000e5e1:	6a 07                	push   0x7
c000e5e3:	e8 d4 fe ff ff       	call   c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e5e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5ec:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e5f0:	0f 95 c0             	setne  al
c000e5f3:	83 c4 24             	add    esp,0x24
c000e5f6:	c3                   	ret    
c000e5f7:	90                   	nop

c000e5f8 <CPU::CPU()>:
c000e5f8:	83 ec 0c             	sub    esp,0xc
c000e5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 b9 db 01 c0       	push   0xc001dbb9
c000e607:	50                   	push   eax
c000e608:	e8 a3 c9 ff ff       	call   c000afb0 <Device::Device(char const*)>
c000e60d:	83 c4 10             	add    esp,0x10
c000e610:	ba 40 dc 01 c0       	mov    edx,0xc001dc40
c000e615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e619:	89 10                	mov    DWORD PTR [eax],edx
c000e61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e61f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000e629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62d:	05 78 01 00 00       	add    eax,0x178
c000e632:	83 ec 0c             	sub    esp,0xc
c000e635:	50                   	push   eax
c000e636:	e8 5b 7e ff ff       	call   c0006496 <GDT::GDT()>
c000e63b:	83 c4 10             	add    esp,0x10
c000e63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e642:	05 7c 09 00 00       	add    eax,0x97c
c000e647:	83 ec 0c             	sub    esp,0xc
c000e64a:	50                   	push   eax
c000e64b:	e8 c0 80 ff ff       	call   c0006710 <IDT::IDT()>
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e657:	05 7c 11 00 00       	add    eax,0x117c
c000e65c:	83 ec 0c             	sub    esp,0xc
c000e65f:	50                   	push   eax
c000e660:	e8 2f 9a ff ff       	call   c0008094 <TSS::TSS()>
c000e665:	83 c4 10             	add    esp,0x10
c000e668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e66c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000e673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e677:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000e681:	90                   	nop
c000e682:	83 c4 0c             	add    esp,0xc
c000e685:	c3                   	ret    

c000e686 <CPU::displayFeatures()>:
c000e686:	c3                   	ret    
c000e687:	90                   	nop

c000e688 <CPU::detectFeatures()>:
c000e688:	55                   	push   ebp
c000e689:	57                   	push   edi
c000e68a:	56                   	push   esi
c000e68b:	53                   	push   ebx
c000e68c:	83 ec 30             	sub    esp,0x30
c000e68f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e693:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000e69d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000e6a4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000e6aa:	6a 0d                	push   0xd
c000e6ac:	6a 00                	push   0x0
c000e6ae:	55                   	push   ebp
c000e6af:	e8 3c 1e ff ff       	call   c00004f0 <memset>
c000e6b4:	83 c4 10             	add    esp,0x10
c000e6b7:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000e6bc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c000e6c3:	0f 84 d5 05 00 00    	je     c000ec9e <CPU::detectFeatures()+0x616>
c000e6c9:	83 ec 0c             	sub    esp,0xc
c000e6cc:	89 ef                	mov    edi,ebp
c000e6ce:	6a 10                	push   0x10
c000e6d0:	e8 6b fe ff ff       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c000e6d5:	83 e0 01             	and    eax,0x1
c000e6d8:	8d 14 00             	lea    edx,[eax+eax*1]
c000e6db:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e6e1:	83 e0 fd             	and    eax,0xfffffffd
c000e6e4:	09 d0                	or     eax,edx
c000e6e6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e6ec:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000e6f3:	e8 48 fe ff ff       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c000e6f8:	83 e0 01             	and    eax,0x1
c000e6fb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e702:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e708:	83 e0 fb             	and    eax,0xfffffffb
c000e70b:	09 d0                	or     eax,edx
c000e70d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e713:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e71a:	e8 21 fe ff ff       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c000e71f:	83 e0 01             	and    eax,0x1
c000e722:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e729:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e72f:	83 e0 f7             	and    eax,0xfffffff7
c000e732:	09 d0                	or     eax,edx
c000e734:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e73a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000e741:	e8 fa fd ff ff       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c000e746:	83 e0 01             	and    eax,0x1
c000e749:	c1 e0 04             	shl    eax,0x4
c000e74c:	88 c2                	mov    dl,al
c000e74e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e754:	83 e0 ef             	and    eax,0xffffffef
c000e757:	09 d0                	or     eax,edx
c000e759:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e75f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000e766:	e8 d5 fd ff ff       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c000e76b:	83 e0 01             	and    eax,0x1
c000e76e:	c1 e0 05             	shl    eax,0x5
c000e771:	88 c2                	mov    dl,al
c000e773:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e779:	83 e0 df             	and    eax,0xffffffdf
c000e77c:	09 d0                	or     eax,edx
c000e77e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e784:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e78b:	e8 b0 fd ff ff       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c000e790:	83 e0 01             	and    eax,0x1
c000e793:	8d 14 00             	lea    edx,[eax+eax*1]
c000e796:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e79c:	83 e0 fd             	and    eax,0xfffffffd
c000e79f:	09 d0                	or     eax,edx
c000e7a1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e7a7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000e7ae:	e8 8d fd ff ff       	call   c000e540 <CPU::cpuidCheckEDX(unsigned int)>
c000e7b3:	83 e0 01             	and    eax,0x1
c000e7b6:	c1 e0 06             	shl    eax,0x6
c000e7b9:	88 c2                	mov    dl,al
c000e7bb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e7c1:	83 e0 bf             	and    eax,0xffffffbf
c000e7c4:	09 d0                	or     eax,edx
c000e7c6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e7cc:	58                   	pop    eax
c000e7cd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e7d1:	50                   	push   eax
c000e7d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e7d6:	50                   	push   eax
c000e7d7:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e7db:	56                   	push   esi
c000e7dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e7e0:	50                   	push   eax
c000e7e1:	6a 00                	push   0x0
c000e7e3:	e8 d4 fc ff ff       	call   c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7e8:	b8 04 00 00 00       	mov    eax,0x4
c000e7ed:	89 c1                	mov    ecx,eax
c000e7ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7f1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000e7f7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e7fb:	89 c1                	mov    ecx,eax
c000e7fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7ff:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000e805:	8d 74 24 38          	lea    esi,[esp+0x38]
c000e809:	89 c1                	mov    ecx,eax
c000e80b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e80d:	83 c4 18             	add    esp,0x18
c000e810:	68 c8 da 01 c0       	push   0xc001dac8
c000e815:	55                   	push   ebp
c000e816:	e8 e5 1e ff ff       	call   c0000700 <strcmp>
c000e81b:	83 c4 10             	add    esp,0x10
c000e81e:	85 c0                	test   eax,eax
c000e820:	75 0f                	jne    c000e831 <CPU::detectFeatures()+0x1a9>
c000e822:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000e82c:	e9 22 02 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e831:	50                   	push   eax
c000e832:	50                   	push   eax
c000e833:	68 d5 da 01 c0       	push   0xc001dad5
c000e838:	55                   	push   ebp
c000e839:	e8 c2 1e ff ff       	call   c0000700 <strcmp>
c000e83e:	83 c4 10             	add    esp,0x10
c000e841:	85 c0                	test   eax,eax
c000e843:	74 dd                	je     c000e822 <CPU::detectFeatures()+0x19a>
c000e845:	50                   	push   eax
c000e846:	50                   	push   eax
c000e847:	68 e2 da 01 c0       	push   0xc001dae2
c000e84c:	55                   	push   ebp
c000e84d:	e8 ae 1e ff ff       	call   c0000700 <strcmp>
c000e852:	83 c4 10             	add    esp,0x10
c000e855:	85 c0                	test   eax,eax
c000e857:	74 2a                	je     c000e883 <CPU::detectFeatures()+0x1fb>
c000e859:	50                   	push   eax
c000e85a:	50                   	push   eax
c000e85b:	68 ef da 01 c0       	push   0xc001daef
c000e860:	55                   	push   ebp
c000e861:	e8 9a 1e ff ff       	call   c0000700 <strcmp>
c000e866:	83 c4 10             	add    esp,0x10
c000e869:	85 c0                	test   eax,eax
c000e86b:	74 16                	je     c000e883 <CPU::detectFeatures()+0x1fb>
c000e86d:	50                   	push   eax
c000e86e:	50                   	push   eax
c000e86f:	68 fc da 01 c0       	push   0xc001dafc
c000e874:	55                   	push   ebp
c000e875:	e8 86 1e ff ff       	call   c0000700 <strcmp>
c000e87a:	83 c4 10             	add    esp,0x10
c000e87d:	85 c0                	test   eax,eax
c000e87f:	74 48                	je     c000e8c9 <CPU::detectFeatures()+0x241>
c000e881:	eb 0f                	jmp    c000e892 <CPU::detectFeatures()+0x20a>
c000e883:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000e88d:	e9 c1 01 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e892:	50                   	push   eax
c000e893:	50                   	push   eax
c000e894:	68 09 db 01 c0       	push   0xc001db09
c000e899:	55                   	push   ebp
c000e89a:	e8 61 1e ff ff       	call   c0000700 <strcmp>
c000e89f:	83 c4 10             	add    esp,0x10
c000e8a2:	85 c0                	test   eax,eax
c000e8a4:	74 23                	je     c000e8c9 <CPU::detectFeatures()+0x241>
c000e8a6:	57                   	push   edi
c000e8a7:	57                   	push   edi
c000e8a8:	68 16 db 01 c0       	push   0xc001db16
c000e8ad:	55                   	push   ebp
c000e8ae:	e8 4d 1e ff ff       	call   c0000700 <strcmp>
c000e8b3:	83 c4 10             	add    esp,0x10
c000e8b6:	85 c0                	test   eax,eax
c000e8b8:	75 1e                	jne    c000e8d8 <CPU::detectFeatures()+0x250>
c000e8ba:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e8c4:	e9 8a 01 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e8c9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000e8d3:	e9 7b 01 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e8d8:	56                   	push   esi
c000e8d9:	56                   	push   esi
c000e8da:	68 23 db 01 c0       	push   0xc001db23
c000e8df:	55                   	push   ebp
c000e8e0:	e8 1b 1e ff ff       	call   c0000700 <strcmp>
c000e8e5:	83 c4 10             	add    esp,0x10
c000e8e8:	85 c0                	test   eax,eax
c000e8ea:	75 0f                	jne    c000e8fb <CPU::detectFeatures()+0x273>
c000e8ec:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000e8f6:	e9 58 01 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e8fb:	51                   	push   ecx
c000e8fc:	51                   	push   ecx
c000e8fd:	68 e2 da 01 c0       	push   0xc001dae2
c000e902:	55                   	push   ebp
c000e903:	e8 f8 1d ff ff       	call   c0000700 <strcmp>
c000e908:	83 c4 10             	add    esp,0x10
c000e90b:	85 c0                	test   eax,eax
c000e90d:	75 0f                	jne    c000e91e <CPU::detectFeatures()+0x296>
c000e90f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000e919:	e9 35 01 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e91e:	52                   	push   edx
c000e91f:	52                   	push   edx
c000e920:	68 30 db 01 c0       	push   0xc001db30
c000e925:	55                   	push   ebp
c000e926:	e8 d5 1d ff ff       	call   c0000700 <strcmp>
c000e92b:	83 c4 10             	add    esp,0x10
c000e92e:	85 c0                	test   eax,eax
c000e930:	75 0f                	jne    c000e941 <CPU::detectFeatures()+0x2b9>
c000e932:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000e93c:	e9 12 01 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e941:	50                   	push   eax
c000e942:	50                   	push   eax
c000e943:	68 3d db 01 c0       	push   0xc001db3d
c000e948:	55                   	push   ebp
c000e949:	e8 b2 1d ff ff       	call   c0000700 <strcmp>
c000e94e:	83 c4 10             	add    esp,0x10
c000e951:	85 c0                	test   eax,eax
c000e953:	75 0f                	jne    c000e964 <CPU::detectFeatures()+0x2dc>
c000e955:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000e95f:	e9 ef 00 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e964:	50                   	push   eax
c000e965:	50                   	push   eax
c000e966:	68 4a db 01 c0       	push   0xc001db4a
c000e96b:	55                   	push   ebp
c000e96c:	e8 8f 1d ff ff       	call   c0000700 <strcmp>
c000e971:	83 c4 10             	add    esp,0x10
c000e974:	85 c0                	test   eax,eax
c000e976:	75 0f                	jne    c000e987 <CPU::detectFeatures()+0x2ff>
c000e978:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000e982:	e9 cc 00 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e987:	50                   	push   eax
c000e988:	50                   	push   eax
c000e989:	68 57 db 01 c0       	push   0xc001db57
c000e98e:	55                   	push   ebp
c000e98f:	e8 6c 1d ff ff       	call   c0000700 <strcmp>
c000e994:	83 c4 10             	add    esp,0x10
c000e997:	85 c0                	test   eax,eax
c000e999:	75 0f                	jne    c000e9aa <CPU::detectFeatures()+0x322>
c000e99b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000e9a5:	e9 a9 00 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e9aa:	50                   	push   eax
c000e9ab:	50                   	push   eax
c000e9ac:	68 64 db 01 c0       	push   0xc001db64
c000e9b1:	55                   	push   ebp
c000e9b2:	e8 49 1d ff ff       	call   c0000700 <strcmp>
c000e9b7:	83 c4 10             	add    esp,0x10
c000e9ba:	85 c0                	test   eax,eax
c000e9bc:	75 0f                	jne    c000e9cd <CPU::detectFeatures()+0x345>
c000e9be:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000e9c8:	e9 86 00 00 00       	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e9cd:	50                   	push   eax
c000e9ce:	50                   	push   eax
c000e9cf:	68 71 db 01 c0       	push   0xc001db71
c000e9d4:	55                   	push   ebp
c000e9d5:	e8 26 1d ff ff       	call   c0000700 <strcmp>
c000e9da:	83 c4 10             	add    esp,0x10
c000e9dd:	85 c0                	test   eax,eax
c000e9df:	75 0c                	jne    c000e9ed <CPU::detectFeatures()+0x365>
c000e9e1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000e9eb:	eb 66                	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000e9ed:	50                   	push   eax
c000e9ee:	50                   	push   eax
c000e9ef:	68 7e db 01 c0       	push   0xc001db7e
c000e9f4:	55                   	push   ebp
c000e9f5:	e8 06 1d ff ff       	call   c0000700 <strcmp>
c000e9fa:	83 c4 10             	add    esp,0x10
c000e9fd:	85 c0                	test   eax,eax
c000e9ff:	75 0c                	jne    c000ea0d <CPU::detectFeatures()+0x385>
c000ea01:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000ea0b:	eb 46                	jmp    c000ea53 <CPU::detectFeatures()+0x3cb>
c000ea0d:	57                   	push   edi
c000ea0e:	57                   	push   edi
c000ea0f:	68 8b db 01 c0       	push   0xc001db8b
c000ea14:	55                   	push   ebp
c000ea15:	e8 e6 1c ff ff       	call   c0000700 <strcmp>
c000ea1a:	83 c4 10             	add    esp,0x10
c000ea1d:	85 c0                	test   eax,eax
c000ea1f:	74 e0                	je     c000ea01 <CPU::detectFeatures()+0x379>
c000ea21:	56                   	push   esi
c000ea22:	56                   	push   esi
c000ea23:	68 98 db 01 c0       	push   0xc001db98
c000ea28:	55                   	push   ebp
c000ea29:	e8 d2 1c ff ff       	call   c0000700 <strcmp>
c000ea2e:	83 c4 10             	add    esp,0x10
c000ea31:	85 c0                	test   eax,eax
c000ea33:	74 cc                	je     c000ea01 <CPU::detectFeatures()+0x379>
c000ea35:	51                   	push   ecx
c000ea36:	51                   	push   ecx
c000ea37:	68 a5 db 01 c0       	push   0xc001dba5
c000ea3c:	55                   	push   ebp
c000ea3d:	e8 be 1c ff ff       	call   c0000700 <strcmp>
c000ea42:	83 c4 10             	add    esp,0x10
c000ea45:	85 c0                	test   eax,eax
c000ea47:	74 b8                	je     c000ea01 <CPU::detectFeatures()+0x379>
c000ea49:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000ea53:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000ea58:	0f 86 be 00 00 00    	jbe    c000eb1c <CPU::detectFeatures()+0x494>
c000ea5e:	83 ec 0c             	sub    esp,0xc
c000ea61:	68 80 00 00 00       	push   0x80
c000ea66:	e8 31 fb ff ff       	call   c000e59c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ea6b:	83 e0 01             	and    eax,0x1
c000ea6e:	c1 e0 06             	shl    eax,0x6
c000ea71:	88 c2                	mov    dl,al
c000ea73:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ea79:	83 e0 bf             	and    eax,0xffffffbf
c000ea7c:	09 d0                	or     eax,edx
c000ea7e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ea84:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000ea8b:	e8 0c fb ff ff       	call   c000e59c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ea90:	83 e0 01             	and    eax,0x1
c000ea93:	c1 e0 04             	shl    eax,0x4
c000ea96:	88 c2                	mov    dl,al
c000ea98:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ea9e:	83 e0 ef             	and    eax,0xffffffef
c000eaa1:	09 d0                	or     eax,edx
c000eaa3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000eaa9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000eab0:	e8 e7 fa ff ff       	call   c000e59c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000eab5:	c1 e0 07             	shl    eax,0x7
c000eab8:	88 c2                	mov    dl,al
c000eaba:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000eac0:	83 e0 7f             	and    eax,0x7f
c000eac3:	09 d0                	or     eax,edx
c000eac5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000eacb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ead2:	e8 f3 fa ff ff       	call   c000e5ca <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ead7:	83 e0 01             	and    eax,0x1
c000eada:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000eae1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000eae7:	83 e0 f7             	and    eax,0xfffffff7
c000eaea:	09 d0                	or     eax,edx
c000eaec:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000eaf2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000eaf9:	e8 cc fa ff ff       	call   c000e5ca <CPU::cpuidCheckExtendedECX(unsigned int)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	83 e0 01             	and    eax,0x1
c000eb04:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eb0b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000eb11:	83 e0 fb             	and    eax,0xfffffffb
c000eb14:	09 d0                	or     eax,edx
c000eb16:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000eb1c:	83 ec 0c             	sub    esp,0xc
c000eb1f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb23:	50                   	push   eax
c000eb24:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb28:	50                   	push   eax
c000eb29:	8d 74 24 28          	lea    esi,[esp+0x28]
c000eb2d:	56                   	push   esi
c000eb2e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb32:	50                   	push   eax
c000eb33:	6a 01                	push   0x1
c000eb35:	e8 82 f9 ff ff       	call   c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb3a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000eb3e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000eb44:	88 ca                	mov    dl,cl
c000eb46:	83 e0 f0             	and    eax,0xfffffff0
c000eb49:	83 e2 0f             	and    edx,0xf
c000eb4c:	09 d0                	or     eax,edx
c000eb4e:	88 ca                	mov    dl,cl
c000eb50:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000eb56:	c0 ea 04             	shr    dl,0x4
c000eb59:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000eb5d:	0f b6 c2             	movzx  eax,dl
c000eb60:	83 c4 20             	add    esp,0x20
c000eb63:	c1 e0 06             	shl    eax,0x6
c000eb66:	89 c7                	mov    edi,eax
c000eb68:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000eb6e:	66 25 3f c0          	and    ax,0xc03f
c000eb72:	09 f8                	or     eax,edi
c000eb74:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000eb7b:	89 c8                	mov    eax,ecx
c000eb7d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000eb84:	c1 e8 08             	shr    eax,0x8
c000eb87:	83 e5 3f             	and    ebp,0x3f
c000eb8a:	83 e0 0f             	and    eax,0xf
c000eb8d:	89 c7                	mov    edi,eax
c000eb8f:	c1 e7 06             	shl    edi,0x6
c000eb92:	09 ef                	or     edi,ebp
c000eb94:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000eb9b:	89 fa                	mov    edx,edi
c000eb9d:	83 e5 c0             	and    ebp,0xffffffc0
c000eba0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000eba6:	88 c2                	mov    dl,al
c000eba8:	c0 ea 02             	shr    dl,0x2
c000ebab:	89 d7                	mov    edi,edx
c000ebad:	09 ef                	or     edi,ebp
c000ebaf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000ebb5:	89 fa                	mov    edx,edi
c000ebb7:	83 e5 cf             	and    ebp,0xffffffcf
c000ebba:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000ebc0:	89 cf                	mov    edi,ecx
c000ebc2:	c1 ef 0c             	shr    edi,0xc
c000ebc5:	83 e7 03             	and    edi,0x3
c000ebc8:	c1 e7 04             	shl    edi,0x4
c000ebcb:	09 ef                	or     edi,ebp
c000ebcd:	3c 06                	cmp    al,0x6
c000ebcf:	89 fa                	mov    edx,edi
c000ebd1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000ebd7:	74 04                	je     c000ebdd <CPU::detectFeatures()+0x555>
c000ebd9:	3c 0f                	cmp    al,0xf
c000ebdb:	75 5c                	jne    c000ec39 <CPU::detectFeatures()+0x5b1>
c000ebdd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ebe1:	89 cf                	mov    edi,ecx
c000ebe3:	c1 ef 10             	shr    edi,0x10
c000ebe6:	c1 e7 04             	shl    edi,0x4
c000ebe9:	09 fa                	or     edx,edi
c000ebeb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000ebf1:	0f b6 d2             	movzx  edx,dl
c000ebf4:	66 81 e7 3f c0       	and    di,0xc03f
c000ebf9:	c1 e2 06             	shl    edx,0x6
c000ebfc:	09 fa                	or     edx,edi
c000ebfe:	3c 0f                	cmp    al,0xf
c000ec00:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000ec07:	75 30                	jne    c000ec39 <CPU::detectFeatures()+0x5b1>
c000ec09:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000ec0f:	c1 e9 14             	shr    ecx,0x14
c000ec12:	83 e0 3f             	and    eax,0x3f
c000ec15:	83 c1 0f             	add    ecx,0xf
c000ec18:	88 ca                	mov    dl,cl
c000ec1a:	c0 e9 02             	shr    cl,0x2
c000ec1d:	c1 e2 06             	shl    edx,0x6
c000ec20:	09 d0                	or     eax,edx
c000ec22:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000ec28:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000ec2e:	83 e0 c0             	and    eax,0xffffffc0
c000ec31:	09 c1                	or     ecx,eax
c000ec33:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000ec39:	83 ec 0c             	sub    esp,0xc
c000ec3c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000ec43:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ec47:	50                   	push   eax
c000ec48:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000ec4c:	55                   	push   ebp
c000ec4d:	56                   	push   esi
c000ec4e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000ec52:	57                   	push   edi
c000ec53:	68 00 00 00 80       	push   0x80000000
c000ec58:	e8 5f f8 ff ff       	call   c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ec5d:	83 c4 20             	add    esp,0x20
c000ec60:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000ec68:	76 22                	jbe    c000ec8c <CPU::detectFeatures()+0x604>
c000ec6a:	83 ec 0c             	sub    esp,0xc
c000ec6d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ec71:	50                   	push   eax
c000ec72:	55                   	push   ebp
c000ec73:	56                   	push   esi
c000ec74:	57                   	push   edi
c000ec75:	68 01 00 00 80       	push   0x80000001
c000ec7a:	e8 3d f8 ff ff       	call   c000e4bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ec7f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000ec89:	83 c4 20             	add    esp,0x20
c000ec8c:	52                   	push   edx
c000ec8d:	52                   	push   edx
c000ec8e:	68 b1 db 01 c0       	push   0xc001dbb1
c000ec93:	53                   	push   ebx
c000ec94:	e8 09 c3 ff ff       	call   c000afa2 <Device::setName(char const*)>
c000ec99:	83 c4 10             	add    esp,0x10
c000ec9c:	eb 67                	jmp    c000ed05 <CPU::detectFeatures()+0x67d>
c000ec9e:	50                   	push   eax
c000ec9f:	50                   	push   eax
c000eca0:	68 16 db 01 c0       	push   0xc001db16
c000eca5:	55                   	push   ebp
c000eca6:	e8 75 19 ff ff       	call   c0000620 <strcpy>
c000ecab:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ecb5:	e8 29 15 ff ff       	call   c00001e3 <is486>
c000ecba:	83 c4 10             	add    esp,0x10
c000ecbd:	85 c0                	test   eax,eax
c000ecbf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ecc5:	74 1d                	je     c000ece4 <CPU::detectFeatures()+0x65c>
c000ecc7:	83 c8 07             	or     eax,0x7
c000ecca:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ecd0:	0f 20 c0             	mov    eax,cr0
c000ecd3:	83 e0 14             	and    eax,0x14
c000ecd6:	83 f8 04             	cmp    eax,0x4
c000ecd9:	75 0e                	jne    c000ece9 <CPU::detectFeatures()+0x661>
c000ecdb:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ece2:	eb 21                	jmp    c000ed05 <CPU::detectFeatures()+0x67d>
c000ece4:	83 e0 f8             	and    eax,0xfffffff8
c000ece7:	eb e1                	jmp    c000ecca <CPU::detectFeatures()+0x642>
c000ece9:	e8 d0 14 ff ff       	call   c00001be <hasLegacyFPU>
c000ecee:	83 e0 01             	and    eax,0x1
c000ecf1:	8d 14 00             	lea    edx,[eax+eax*1]
c000ecf4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ecfa:	83 e0 fd             	and    eax,0xfffffffd
c000ecfd:	09 d0                	or     eax,edx
c000ecff:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ed05:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ed0c:	74 0e                	je     c000ed1c <CPU::detectFeatures()+0x694>
c000ed0e:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000ed13:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c000ed1a:	eb 20                	jmp    c000ed3c <CPU::detectFeatures()+0x6b4>
c000ed1c:	e8 9d 14 ff ff       	call   c00001be <hasLegacyFPU>
c000ed21:	83 e0 01             	and    eax,0x1
c000ed24:	8d 14 00             	lea    edx,[eax+eax*1]
c000ed27:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ed2d:	83 e0 fd             	and    eax,0xfffffffd
c000ed30:	09 d0                	or     eax,edx
c000ed32:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ed38:	a8 02                	test   al,0x2
c000ed3a:	75 d2                	jne    c000ed0e <CPU::detectFeatures()+0x686>
c000ed3c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ed43:	83 c4 2c             	add    esp,0x2c
c000ed46:	5b                   	pop    ebx
c000ed47:	5e                   	pop    esi
c000ed48:	5f                   	pop    edi
c000ed49:	5d                   	pop    ebp
c000ed4a:	c3                   	ret    
c000ed4b:	90                   	nop

c000ed4c <CPU::setupSMEP()>:
c000ed4c:	0f 20 e0             	mov    eax,cr4
c000ed4f:	0d 00 00 10 00       	or     eax,0x100000
c000ed54:	0f 22 e0             	mov    cr4,eax
c000ed57:	c3                   	ret    

c000ed58 <CPU::setupUMIP()>:
c000ed58:	0f 20 e0             	mov    eax,cr4
c000ed5b:	80 cc 08             	or     ah,0x8
c000ed5e:	0f 22 e0             	mov    cr4,eax
c000ed61:	c3                   	ret    

c000ed62 <CPU::setupTSC()>:
c000ed62:	0f 20 e0             	mov    eax,cr4
c000ed65:	83 c8 04             	or     eax,0x4
c000ed68:	0f 22 e0             	mov    cr4,eax
c000ed6b:	c3                   	ret    

c000ed6c <CPU::setupLargePages()>:
c000ed6c:	0f 20 e0             	mov    eax,cr4
c000ed6f:	83 c8 10             	or     eax,0x10
c000ed72:	0f 22 e0             	mov    cr4,eax
c000ed75:	c3                   	ret    

c000ed76 <CPU::setupPAT()>:
c000ed76:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c000ed7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed82:	74 2c                	je     c000edb0 <CPU::setupPAT()+0x3a>
c000ed84:	53                   	push   ebx
c000ed85:	83 ec 10             	sub    esp,0x10
c000ed88:	68 77 02 00 00       	push   0x277
c000ed8d:	50                   	push   eax
c000ed8e:	e8 7b 74 ff ff       	call   c000620e <Computer::rdmsr(unsigned int)>
c000ed93:	83 e2 f8             	and    edx,0xfffffff8
c000ed96:	83 ca 01             	or     edx,0x1
c000ed99:	52                   	push   edx
c000ed9a:	50                   	push   eax
c000ed9b:	68 77 02 00 00       	push   0x277
c000eda0:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c000eda6:	e8 8f 74 ff ff       	call   c000623a <Computer::wrmsr(unsigned int, unsigned long long)>
c000edab:	83 c4 28             	add    esp,0x28
c000edae:	5b                   	pop    ebx
c000edaf:	c3                   	ret    
c000edb0:	c3                   	ret    
c000edb1:	90                   	nop

c000edb2 <CPU::setupMTRR()>:
c000edb2:	c3                   	ret    
c000edb3:	90                   	nop

c000edb4 <CPU::setupGlobalPages()>:
c000edb4:	0f 20 e0             	mov    eax,cr4
c000edb7:	0c 80                	or     al,0x80
c000edb9:	0f 22 e0             	mov    cr4,eax
c000edbc:	c3                   	ret    
c000edbd:	90                   	nop

c000edbe <CPU::allowUsermodeDataAccess()>:
c000edbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edc2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000edc9:	74 03                	je     c000edce <CPU::allowUsermodeDataAccess()+0x10>
c000edcb:	0f 01 cb             	stac   
c000edce:	c3                   	ret    
c000edcf:	90                   	nop

c000edd0 <CPU::prohibitUsermodeDataAccess()>:
c000edd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000eddb:	74 03                	je     c000ede0 <CPU::prohibitUsermodeDataAccess()+0x10>
c000eddd:	0f 01 ca             	clac   
c000ede0:	c3                   	ret    
c000ede1:	90                   	nop

c000ede2 <CPU::setupSMAP()>:
c000ede2:	0f 20 e0             	mov    eax,cr4
c000ede5:	0d 00 00 20 00       	or     eax,0x200000
c000edea:	0f 22 e0             	mov    cr4,eax
c000eded:	eb e1                	jmp    c000edd0 <CPU::prohibitUsermodeDataAccess()>
c000edef:	90                   	nop

c000edf0 <CPU::setupFeatures()>:
c000edf0:	53                   	push   ebx
c000edf1:	83 ec 08             	sub    esp,0x8
c000edf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000edff:	74 18                	je     c000ee19 <CPU::setupFeatures()+0x29>
c000ee01:	83 ec 0c             	sub    esp,0xc
c000ee04:	68 bd db 01 c0       	push   0xc001dbbd
c000ee09:	e8 ca ab ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000ee0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee11:	e8 42 ff ff ff       	call   c000ed58 <CPU::setupUMIP()>
c000ee16:	83 c4 10             	add    esp,0x10
c000ee19:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ee20:	74 18                	je     c000ee3a <CPU::setupFeatures()+0x4a>
c000ee22:	83 ec 0c             	sub    esp,0xc
c000ee25:	68 c7 db 01 c0       	push   0xc001dbc7
c000ee2a:	e8 a9 ab ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000ee2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee32:	e8 2b ff ff ff       	call   c000ed62 <CPU::setupTSC()>
c000ee37:	83 c4 10             	add    esp,0x10
c000ee3a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ee41:	74 18                	je     c000ee5b <CPU::setupFeatures()+0x6b>
c000ee43:	83 ec 0c             	sub    esp,0xc
c000ee46:	68 d0 db 01 c0       	push   0xc001dbd0
c000ee4b:	e8 88 ab ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000ee50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee53:	e8 14 ff ff ff       	call   c000ed6c <CPU::setupLargePages()>
c000ee58:	83 c4 10             	add    esp,0x10
c000ee5b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ee62:	74 18                	je     c000ee7c <CPU::setupFeatures()+0x8c>
c000ee64:	83 ec 0c             	sub    esp,0xc
c000ee67:	68 d9 db 01 c0       	push   0xc001dbd9
c000ee6c:	e8 67 ab ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000ee71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee74:	e8 3b ff ff ff       	call   c000edb4 <CPU::setupGlobalPages()>
c000ee79:	83 c4 10             	add    esp,0x10
c000ee7c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ee83:	74 18                	je     c000ee9d <CPU::setupFeatures()+0xad>
c000ee85:	83 ec 0c             	sub    esp,0xc
c000ee88:	68 eb db 01 c0       	push   0xc001dbeb
c000ee8d:	e8 46 ab ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000ee92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee95:	e8 dc fe ff ff       	call   c000ed76 <CPU::setupPAT()>
c000ee9a:	83 c4 10             	add    esp,0x10
c000ee9d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000eea4:	74 11                	je     c000eeb7 <CPU::setupFeatures()+0xc7>
c000eea6:	c7 44 24 10 f4 db 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dbf4
c000eeae:	83 c4 08             	add    esp,0x8
c000eeb1:	5b                   	pop    ebx
c000eeb2:	e9 21 ab ff ff       	jmp    c00099d8 <Dbg::kprintf(char const*, ...)>
c000eeb7:	83 c4 08             	add    esp,0x8
c000eeba:	5b                   	pop    ebx
c000eebb:	c3                   	ret    

c000eebc <CPU::open(int, int, void*)>:
c000eebc:	57                   	push   edi
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eec3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eec7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000eecd:	83 ec 0c             	sub    esp,0xc
c000eed0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000eed6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000eedc:	50                   	push   eax
c000eedd:	e8 16 76 ff ff       	call   c00064f8 <GDT::setup()>
c000eee2:	83 c4 0c             	add    esp,0xc
c000eee5:	6a 00                	push   0x0
c000eee7:	68 ef be ad de       	push   0xdeadbeef
c000eeec:	57                   	push   edi
c000eeed:	e8 e6 91 ff ff       	call   c00080d8 <TSS::setup(unsigned long, unsigned long)>
c000eef2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000eef5:	e8 be 91 ff ff       	call   c00080b8 <TSS::flush()>
c000eefa:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000ef00:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef03:	e8 7e 78 ff ff       	call   c0006786 <IDT::setup()>
c000ef08:	b8 00 04 00 00       	mov    eax,0x400
c000ef0d:	0f 23 f8             	mov    db7,eax
c000ef10:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000ef1a:	e8 c3 80 ff ff       	call   c0006fe2 <Phys::allocatePage()>
c000ef1f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000ef25:	89 30                	mov    DWORD PTR [eax],esi
c000ef27:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ef2d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ef30:	58                   	pop    eax
c000ef31:	5a                   	pop    edx
c000ef32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ef38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef3c:	e8 45 a1 ff ff       	call   c0009086 <VAS::setCPUSpecific(unsigned long)>
c000ef41:	c7 04 24 fe db 01 c0 	mov    DWORD PTR [esp],0xc001dbfe
c000ef48:	e8 22 7d ff ff       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c000ef4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef50:	e8 33 f7 ff ff       	call   c000e688 <CPU::detectFeatures()>
c000ef55:	c7 04 24 21 dc 01 c0 	mov    DWORD PTR [esp],0xc001dc21
c000ef5c:	e8 0e 7d ff ff       	call   c0006c6f <Krnl::setBootMessage(char const*)>
c000ef61:	e8 b4 57 00 00       	call   c001471a <HalInitialise()>
c000ef66:	a1 a0 f4 01 c0       	mov    eax,ds:0xc001f4a0
c000ef6b:	83 e0 10             	and    eax,0x10
c000ef6e:	83 f8 01             	cmp    eax,0x1
c000ef71:	19 c0                	sbb    eax,eax
c000ef73:	83 e0 46             	and    eax,0x46
c000ef76:	83 c0 1e             	add    eax,0x1e
c000ef79:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef7c:	e8 f0 d6 ff ff       	call   c000c671 <setupTimer(int)>
c000ef81:	83 c4 10             	add    esp,0x10
c000ef84:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000ef8a:	f6 05 a0 f4 01 c0 20 	test   BYTE PTR ds:0xc001f4a0,0x20
c000ef91:	74 0c                	je     c000ef9f <CPU::open(int, int, void*)+0xe3>
c000ef93:	83 ec 0c             	sub    esp,0xc
c000ef96:	53                   	push   ebx
c000ef97:	e8 54 fe ff ff       	call   c000edf0 <CPU::setupFeatures()>
c000ef9c:	83 c4 10             	add    esp,0x10
c000ef9f:	5b                   	pop    ebx
c000efa0:	31 c0                	xor    eax,eax
c000efa2:	5e                   	pop    esi
c000efa3:	5f                   	pop    edi
c000efa4:	c3                   	ret    
c000efa5:	90                   	nop

c000efa6 <EnvVarContainer::getEnv(char const*)>:
c000efa6:	57                   	push   edi
c000efa7:	56                   	push   esi
c000efa8:	53                   	push   ebx
c000efa9:	31 db                	xor    ebx,ebx
c000efab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000efaf:	39 1e                	cmp    DWORD PTR [esi],ebx
c000efb1:	7e 2b                	jle    c000efde <EnvVarContainer::getEnv(char const*)+0x38>
c000efb3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000efba:	50                   	push   eax
c000efbb:	50                   	push   eax
c000efbc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000efbf:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000efc2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000efc6:	e8 35 17 ff ff       	call   c0000700 <strcmp>
c000efcb:	83 c4 10             	add    esp,0x10
c000efce:	85 c0                	test   eax,eax
c000efd0:	75 09                	jne    c000efdb <EnvVarContainer::getEnv(char const*)+0x35>
c000efd2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000efd5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000efd9:	eb 05                	jmp    c000efe0 <EnvVarContainer::getEnv(char const*)+0x3a>
c000efdb:	43                   	inc    ebx
c000efdc:	eb d1                	jmp    c000efaf <EnvVarContainer::getEnv(char const*)+0x9>
c000efde:	31 c0                	xor    eax,eax
c000efe0:	5b                   	pop    ebx
c000efe1:	5e                   	pop    esi
c000efe2:	5f                   	pop    edi
c000efe3:	c3                   	ret    

c000efe4 <EnvVarContainer::setEnv(char const*, char const*)>:
c000efe4:	55                   	push   ebp
c000efe5:	57                   	push   edi
c000efe6:	56                   	push   esi
c000efe7:	53                   	push   ebx
c000efe8:	83 ec 28             	sub    esp,0x28
c000efeb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000efef:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000eff3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eff7:	56                   	push   esi
c000eff8:	e8 63 15 ff ff       	call   c0000560 <strlen>
c000effd:	40                   	inc    eax
c000effe:	89 04 24             	mov    DWORD PTR [esp],eax
c000f001:	e8 0f 7c ff ff       	call   c0006c15 <malloc>
c000f006:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f009:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f00d:	e8 4e 15 ff ff       	call   c0000560 <strlen>
c000f012:	40                   	inc    eax
c000f013:	89 04 24             	mov    DWORD PTR [esp],eax
c000f016:	e8 fa 7b ff ff       	call   c0006c15 <malloc>
c000f01b:	89 34 24             	mov    DWORD PTR [esp],esi
c000f01e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f022:	e8 39 15 ff ff       	call   c0000560 <strlen>
c000f027:	83 c4 0c             	add    esp,0xc
c000f02a:	40                   	inc    eax
c000f02b:	50                   	push   eax
c000f02c:	6a 00                	push   0x0
c000f02e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f032:	e8 b9 14 ff ff       	call   c00004f0 <memset>
c000f037:	89 34 24             	mov    DWORD PTR [esp],esi
c000f03a:	e8 21 15 ff ff       	call   c0000560 <strlen>
c000f03f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000f043:	8d 48 01             	lea    ecx,[eax+0x1]
c000f046:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f04b:	89 de                	mov    esi,ebx
c000f04d:	e8 0e 15 ff ff       	call   c0000560 <strlen>
c000f052:	83 c4 0c             	add    esp,0xc
c000f055:	40                   	inc    eax
c000f056:	50                   	push   eax
c000f057:	6a 00                	push   0x0
c000f059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f05d:	e8 8e 14 ff ff       	call   c00004f0 <memset>
c000f062:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f065:	e8 f6 14 ff ff       	call   c0000560 <strlen>
c000f06a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f06e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f071:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f073:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f076:	40                   	inc    eax
c000f077:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f07a:	c1 e0 03             	shl    eax,0x3
c000f07d:	5a                   	pop    edx
c000f07e:	59                   	pop    ecx
c000f07f:	50                   	push   eax
c000f080:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f083:	e8 79 7b ff ff       	call   c0006c01 <realloc>
c000f088:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f08c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f08f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f092:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f096:	b9 08 00 00 00       	mov    ecx,0x8
c000f09b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f09d:	83 c4 2c             	add    esp,0x2c
c000f0a0:	5b                   	pop    ebx
c000f0a1:	5e                   	pop    esi
c000f0a2:	5f                   	pop    edi
c000f0a3:	5d                   	pop    ebp
c000f0a4:	c3                   	ret    
c000f0a5:	90                   	nop

c000f0a6 <EnvVarContainer::deleteEnv(char const*)>:
c000f0a6:	c3                   	ret    
c000f0a7:	90                   	nop

c000f0a8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000f0a8:	55                   	push   ebp
c000f0a9:	57                   	push   edi
c000f0aa:	56                   	push   esi
c000f0ab:	53                   	push   ebx
c000f0ac:	81 ec 38 01 00 00    	sub    esp,0x138
c000f0b2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000f0b9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000f0c0:	68 14 01 00 00       	push   0x114
c000f0c5:	e8 4b 7b ff ff       	call   c0006c15 <malloc>
c000f0ca:	83 c4 0c             	add    esp,0xc
c000f0cd:	89 c3                	mov    ebx,eax
c000f0cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f0d2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f0d9:	50                   	push   eax
c000f0da:	e8 6f ae ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c000f0df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0e2:	e8 95 b1 ff ff       	call   c000a27c <File::exists()>
c000f0e7:	83 c4 10             	add    esp,0x10
c000f0ea:	84 c0                	test   al,al
c000f0ec:	75 31                	jne    c000f11f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000f0ee:	50                   	push   eax
c000f0ef:	50                   	push   eax
c000f0f0:	6a 12                	push   0x12
c000f0f2:	53                   	push   ebx
c000f0f3:	e8 16 af ff ff       	call   c000a00e <File::open(FileOpenMode)>
c000f0f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0fa:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000f0fd:	89 34 24             	mov    DWORD PTR [esp],esi
c000f100:	e8 5b 14 ff ff       	call   c0000560 <strlen>
c000f105:	5a                   	pop    edx
c000f106:	31 d2                	xor    edx,edx
c000f108:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f10c:	51                   	push   ecx
c000f10d:	56                   	push   esi
c000f10e:	52                   	push   edx
c000f10f:	50                   	push   eax
c000f110:	53                   	push   ebx
c000f111:	ff d7                	call   edi
c000f113:	83 c4 14             	add    esp,0x14
c000f116:	53                   	push   ebx
c000f117:	e8 50 af ff ff       	call   c000a06c <File::close()>
c000f11c:	83 c4 10             	add    esp,0x10
c000f11f:	56                   	push   esi
c000f120:	31 f6                	xor    esi,esi
c000f122:	68 00 01 00 00       	push   0x100
c000f127:	6a 00                	push   0x0
c000f129:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f12d:	50                   	push   eax
c000f12e:	e8 bd 13 ff ff       	call   c00004f0 <memset>
c000f133:	5f                   	pop    edi
c000f134:	58                   	pop    eax
c000f135:	6a 01                	push   0x1
c000f137:	53                   	push   ebx
c000f138:	e8 d1 ae ff ff       	call   c000a00e <File::open(FileOpenMode)>
c000f13d:	83 c4 10             	add    esp,0x10
c000f140:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f148:	83 ec 0c             	sub    esp,0xc
c000f14b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f14d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f151:	51                   	push   ecx
c000f152:	8d 54 24 23          	lea    edx,[esp+0x23]
c000f156:	52                   	push   edx
c000f157:	6a 00                	push   0x0
c000f159:	6a 01                	push   0x1
c000f15b:	53                   	push   ebx
c000f15c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f15f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000f163:	83 c4 20             	add    esp,0x20
c000f166:	3c 0d                	cmp    al,0xd
c000f168:	0f 84 09 01 00 00    	je     c000f277 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f16e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f173:	0f 84 ef 00 00 00    	je     c000f268 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f179:	3c 0a                	cmp    al,0xa
c000f17b:	74 13                	je     c000f190 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f17d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f182:	74 0c                	je     c000f190 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f184:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f18a:	0f 8e d8 00 00 00    	jle    c000f268 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f190:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f194:	83 ec 0c             	sub    esp,0xc
c000f197:	8d 78 01             	lea    edi,[eax+0x1]
c000f19a:	57                   	push   edi
c000f19b:	e8 75 7a ff ff       	call   c0006c15 <malloc>
c000f1a0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f1a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f1a8:	8d 56 04             	lea    edx,[esi+0x4]
c000f1ab:	89 14 24             	mov    DWORD PTR [esp],edx
c000f1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f1b2:	e8 5e 7a ff ff       	call   c0006c15 <malloc>
c000f1b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1bb:	83 c4 0c             	add    esp,0xc
c000f1be:	57                   	push   edi
c000f1bf:	6a 00                	push   0x0
c000f1c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f1c5:	e8 26 13 ff ff       	call   c00004f0 <memset>
c000f1ca:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f1ce:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f1d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f1d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1d8:	83 c4 0c             	add    esp,0xc
c000f1db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f1df:	52                   	push   edx
c000f1e0:	6a 00                	push   0x0
c000f1e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1e6:	e8 05 13 ff ff       	call   c00004f0 <memset>
c000f1eb:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f1ef:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f1f3:	89 34 24             	mov    DWORD PTR [esp],esi
c000f1f6:	e8 65 13 ff ff       	call   c0000560 <strlen>
c000f1fb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f1ff:	89 c1                	mov    ecx,eax
c000f201:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f203:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f206:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f209:	40                   	inc    eax
c000f20a:	83 c4 10             	add    esp,0x10
c000f20d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f210:	85 d2                	test   edx,edx
c000f212:	75 0c                	jne    c000f220 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000f214:	83 ec 0c             	sub    esp,0xc
c000f217:	6a 08                	push   0x8
c000f219:	e8 f7 79 ff ff       	call   c0006c15 <malloc>
c000f21e:	eb 0c                	jmp    c000f22c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000f220:	c1 e0 03             	shl    eax,0x3
c000f223:	51                   	push   ecx
c000f224:	51                   	push   ecx
c000f225:	50                   	push   eax
c000f226:	52                   	push   edx
c000f227:	e8 d5 79 ff ff       	call   c0006c01 <realloc>
c000f22c:	83 c4 10             	add    esp,0x10
c000f22f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f232:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f235:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f238:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f23c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f240:	b9 08 00 00 00       	mov    ecx,0x8
c000f245:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f247:	31 f6                	xor    esi,esi
c000f249:	50                   	push   eax
c000f24a:	68 00 01 00 00       	push   0x100
c000f24f:	6a 00                	push   0x0
c000f251:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f255:	50                   	push   eax
c000f256:	e8 95 12 ff ff       	call   c00004f0 <memset>
c000f25b:	83 c4 10             	add    esp,0x10
c000f25e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f266:	eb 0f                	jmp    c000f277 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f268:	3c 3d                	cmp    al,0x3d
c000f26a:	74 07                	je     c000f273 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000f26c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000f270:	46                   	inc    esi
c000f271:	eb 04                	jmp    c000f277 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f273:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f277:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f27c:	0f 85 c6 fe ff ff    	jne    c000f148 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f282:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f288:	5b                   	pop    ebx
c000f289:	5e                   	pop    esi
c000f28a:	5f                   	pop    edi
c000f28b:	5d                   	pop    ebp
c000f28c:	c3                   	ret    
c000f28d:	90                   	nop

c000f28e <EnvVarContainer::__loadSystem()>:
c000f28e:	83 ec 10             	sub    esp,0x10
c000f291:	68 60 ee 01 c0       	push   0xc001ee60
c000f296:	68 64 dc 01 c0       	push   0xc001dc64
c000f29b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f29f:	e8 04 fe ff ff       	call   c000f0a8 <EnvVarContainer::loadFrom(char const*, char const*)>
c000f2a4:	83 c4 1c             	add    esp,0x1c
c000f2a7:	c3                   	ret    

c000f2a8 <EnvVarContainer::__loadUser()>:
c000f2a8:	c3                   	ret    
c000f2a9:	90                   	nop

c000f2aa <EnvVarContainer::EnvVarContainer(Process*)>:
c000f2aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f2b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2bc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f2bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f2ca:	90                   	nop
c000f2cb:	c3                   	ret    

c000f2cc <EnvVarContainer::~EnvVarContainer()>:
c000f2cc:	83 ec 0c             	sub    esp,0xc
c000f2cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2d6:	85 c0                	test   eax,eax
c000f2d8:	74 1d                	je     c000f2f7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2e0:	85 c0                	test   eax,eax
c000f2e2:	74 13                	je     c000f2f7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2eb:	83 ec 0c             	sub    esp,0xc
c000f2ee:	50                   	push   eax
c000f2ef:	e8 31 79 ff ff       	call   c0006c25 <free>
c000f2f4:	83 c4 10             	add    esp,0x10
c000f2f7:	90                   	nop
c000f2f8:	83 c4 0c             	add    esp,0xc
c000f2fb:	c3                   	ret    

c000f2fc <Krnl::getEnv(Process*, char const*)>:
c000f2fc:	53                   	push   ebx
c000f2fd:	83 ec 08             	sub    esp,0x8
c000f300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f304:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f308:	39 05 90 29 02 c0    	cmp    DWORD PTR ds:0xc0022990,eax
c000f30e:	74 04                	je     c000f314 <Krnl::getEnv(Process*, char const*)+0x18>
c000f310:	85 c0                	test   eax,eax
c000f312:	75 0b                	jne    c000f31f <Krnl::getEnv(Process*, char const*)+0x23>
c000f314:	a1 10 1f 02 c0       	mov    eax,ds:0xc0021f10
c000f319:	85 c0                	test   eax,eax
c000f31b:	75 19                	jne    c000f336 <Krnl::getEnv(Process*, char const*)+0x3a>
c000f31d:	eb 27                	jmp    c000f346 <Krnl::getEnv(Process*, char const*)+0x4a>
c000f31f:	52                   	push   edx
c000f320:	52                   	push   edx
c000f321:	53                   	push   ebx
c000f322:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000f328:	e8 79 fc ff ff       	call   c000efa6 <EnvVarContainer::getEnv(char const*)>
c000f32d:	83 c4 10             	add    esp,0x10
c000f330:	85 c0                	test   eax,eax
c000f332:	75 28                	jne    c000f35c <Krnl::getEnv(Process*, char const*)+0x60>
c000f334:	eb de                	jmp    c000f314 <Krnl::getEnv(Process*, char const*)+0x18>
c000f336:	52                   	push   edx
c000f337:	52                   	push   edx
c000f338:	53                   	push   ebx
c000f339:	50                   	push   eax
c000f33a:	e8 67 fc ff ff       	call   c000efa6 <EnvVarContainer::getEnv(char const*)>
c000f33f:	83 c4 10             	add    esp,0x10
c000f342:	85 c0                	test   eax,eax
c000f344:	75 16                	jne    c000f35c <Krnl::getEnv(Process*, char const*)+0x60>
c000f346:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f34a:	a1 14 1f 02 c0       	mov    eax,ds:0xc0021f14
c000f34f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f353:	83 c4 08             	add    esp,0x8
c000f356:	5b                   	pop    ebx
c000f357:	e9 4a fc ff ff       	jmp    c000efa6 <EnvVarContainer::getEnv(char const*)>
c000f35c:	83 c4 08             	add    esp,0x8
c000f35f:	5b                   	pop    ebx
c000f360:	c3                   	ret    

c000f361 <Krnl::setEnvSystem(char const*, char const*)>:
c000f361:	83 ec 10             	sub    esp,0x10
c000f364:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f368:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f36c:	ff 35 14 1f 02 c0    	push   DWORD PTR ds:0xc0021f14
c000f372:	e8 6d fc ff ff       	call   c000efe4 <EnvVarContainer::setEnv(char const*, char const*)>
c000f377:	83 c4 1c             	add    esp,0x1c
c000f37a:	c3                   	ret    

c000f37b <Krnl::setEnvUser(char const*, char const*)>:
c000f37b:	a1 10 1f 02 c0       	mov    eax,ds:0xc0021f10
c000f380:	85 c0                	test   eax,eax
c000f382:	74 15                	je     c000f399 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000f384:	83 ec 10             	sub    esp,0x10
c000f387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f38b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f38f:	50                   	push   eax
c000f390:	e8 4f fc ff ff       	call   c000efe4 <EnvVarContainer::setEnv(char const*, char const*)>
c000f395:	83 c4 1c             	add    esp,0x1c
c000f398:	c3                   	ret    
c000f399:	c3                   	ret    

c000f39a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000f39a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f39e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000f3a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f3a8:	e9 37 fc ff ff       	jmp    c000efe4 <EnvVarContainer::setEnv(char const*, char const*)>

c000f3ad <Krnl::deleteEnvSystem(char const*)>:
c000f3ad:	c3                   	ret    

c000f3ae <Krnl::deleteEnvUser(char const*)>:
c000f3ae:	c3                   	ret    

c000f3af <Krnl::deleteEnvProcess(Process*, char const*)>:
c000f3af:	c3                   	ret    

c000f3b0 <Krnl::newProcessEnv(Process*)>:
c000f3b0:	83 ec 28             	sub    esp,0x28
c000f3b3:	6a 0c                	push   0xc
c000f3b5:	e8 5b 78 ff ff       	call   c0006c15 <malloc>
c000f3ba:	5a                   	pop    edx
c000f3bb:	59                   	pop    ecx
c000f3bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3c0:	50                   	push   eax
c000f3c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f3c5:	e8 e0 fe ff ff       	call   c000f2aa <EnvVarContainer::EnvVarContainer(Process*)>
c000f3ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f3ce:	83 c4 2c             	add    esp,0x2c
c000f3d1:	c3                   	ret    

c000f3d2 <Krnl::copyProcessEnv(Process*, Process*)>:
c000f3d2:	57                   	push   edi
c000f3d3:	56                   	push   esi
c000f3d4:	53                   	push   ebx
c000f3d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d9:	83 ec 0c             	sub    esp,0xc
c000f3dc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000f3e2:	6a 0c                	push   0xc
c000f3e4:	e8 2c 78 ff ff       	call   c0006c15 <malloc>
c000f3e9:	89 c3                	mov    ebx,eax
c000f3eb:	58                   	pop    eax
c000f3ec:	5a                   	pop    edx
c000f3ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3f1:	53                   	push   ebx
c000f3f2:	e8 b3 fe ff ff       	call   c000f2aa <EnvVarContainer::EnvVarContainer(Process*)>
c000f3f7:	8b 07                	mov    eax,DWORD PTR [edi]
c000f3f9:	89 03                	mov    DWORD PTR [ebx],eax
c000f3fb:	c1 e0 03             	shl    eax,0x3
c000f3fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000f401:	e8 0f 78 ff ff       	call   c0006c15 <malloc>
c000f406:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f409:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f40b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f40e:	c1 e1 03             	shl    ecx,0x3
c000f411:	89 c7                	mov    edi,eax
c000f413:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f415:	83 c4 10             	add    esp,0x10
c000f418:	89 d8                	mov    eax,ebx
c000f41a:	5b                   	pop    ebx
c000f41b:	5e                   	pop    esi
c000f41c:	5f                   	pop    edi
c000f41d:	c3                   	ret    

c000f41e <Krnl::loadSystemEnv()>:
c000f41e:	53                   	push   ebx
c000f41f:	83 ec 14             	sub    esp,0x14
c000f422:	6a 0c                	push   0xc
c000f424:	e8 ec 77 ff ff       	call   c0006c15 <malloc>
c000f429:	89 c3                	mov    ebx,eax
c000f42b:	58                   	pop    eax
c000f42c:	5a                   	pop    edx
c000f42d:	ff 35 90 29 02 c0    	push   DWORD PTR ds:0xc0022990
c000f433:	53                   	push   ebx
c000f434:	e8 71 fe ff ff       	call   c000f2aa <EnvVarContainer::EnvVarContainer(Process*)>
c000f439:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f43c:	89 1d 14 1f 02 c0    	mov    DWORD PTR ds:0xc0021f14,ebx
c000f442:	e8 47 fe ff ff       	call   c000f28e <EnvVarContainer::__loadSystem()>
c000f447:	83 c4 18             	add    esp,0x18
c000f44a:	5b                   	pop    ebx
c000f44b:	c3                   	ret    

c000f44c <Krnl::loadUserEnv()>:
c000f44c:	53                   	push   ebx
c000f44d:	83 ec 14             	sub    esp,0x14
c000f450:	6a 0c                	push   0xc
c000f452:	e8 be 77 ff ff       	call   c0006c15 <malloc>
c000f457:	89 c3                	mov    ebx,eax
c000f459:	58                   	pop    eax
c000f45a:	5a                   	pop    edx
c000f45b:	ff 35 90 29 02 c0    	push   DWORD PTR ds:0xc0022990
c000f461:	53                   	push   ebx
c000f462:	e8 43 fe ff ff       	call   c000f2aa <EnvVarContainer::EnvVarContainer(Process*)>
c000f467:	89 1d 10 1f 02 c0    	mov    DWORD PTR ds:0xc0021f10,ebx
c000f46d:	83 c4 18             	add    esp,0x18
c000f470:	5b                   	pop    ebx
c000f471:	c3                   	ret    

c000f472 <Krnl::flushEnv()>:
c000f472:	c3                   	ret    

c000f473 <Krnl::getProcessTotalEnvCount(Process*)>:
c000f473:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f477:	8b 15 10 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f10
c000f47d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f483:	a1 14 1f 02 c0       	mov    eax,ds:0xc0021f14
c000f488:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48a:	03 01                	add    eax,DWORD PTR [ecx]
c000f48c:	85 d2                	test   edx,edx
c000f48e:	74 02                	je     c000f492 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000f490:	03 02                	add    eax,DWORD PTR [edx]
c000f492:	c3                   	ret    

c000f493 <Krnl::getProcessEnvPair(Process*, int)>:
c000f493:	57                   	push   edi
c000f494:	56                   	push   esi
c000f495:	8b 35 10 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021f10
c000f49b:	53                   	push   ebx
c000f49c:	85 f6                	test   esi,esi
c000f49e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f4a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f4a6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f4ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f4b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f4b2:	75 16                	jne    c000f4ca <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000f4b4:	39 c2                	cmp    edx,eax
c000f4b6:	7c 16                	jl     c000f4ce <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f4b8:	8b 0d 14 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f14
c000f4be:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f4c0:	01 c6                	add    esi,eax
c000f4c2:	39 d6                	cmp    esi,edx
c000f4c4:	7e 3c                	jle    c000f502 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f4c6:	29 c2                	sub    edx,eax
c000f4c8:	eb 04                	jmp    c000f4ce <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f4ca:	39 c2                	cmp    edx,eax
c000f4cc:	7d 05                	jge    c000f4d3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000f4ce:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f4d1:	eb 20                	jmp    c000f4f3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000f4d3:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f4d5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f4d8:	39 d1                	cmp    ecx,edx
c000f4da:	7e 04                	jle    c000f4e0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000f4dc:	29 c2                	sub    edx,eax
c000f4de:	eb 10                	jmp    c000f4f0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000f4e0:	8b 35 14 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021f14
c000f4e6:	03 0e                	add    ecx,DWORD PTR [esi]
c000f4e8:	39 d1                	cmp    ecx,edx
c000f4ea:	7e 16                	jle    c000f502 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f4ec:	29 c2                	sub    edx,eax
c000f4ee:	29 fa                	sub    edx,edi
c000f4f0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f4f3:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f4f6:	8b 02                	mov    eax,DWORD PTR [edx]
c000f4f8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f4fb:	89 03                	mov    DWORD PTR [ebx],eax
c000f4fd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f500:	eb 1d                	jmp    c000f51f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000f502:	83 ec 0c             	sub    esp,0xc
c000f505:	68 86 dc 01 c0       	push   0xc001dc86
c000f50a:	e8 18 00 00 00       	call   c000f527 <Krnl::panic(char const*)>
c000f50f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f515:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f51c:	83 c4 10             	add    esp,0x10
c000f51f:	89 d8                	mov    eax,ebx
c000f521:	5b                   	pop    ebx
c000f522:	5e                   	pop    esi
c000f523:	5f                   	pop    edi
c000f524:	c2 04 00             	ret    0x4

c000f527 <Krnl::panic(char const*)>:
c000f527:	53                   	push   ebx
c000f528:	83 ec 10             	sub    esp,0x10
c000f52b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f52f:	fa                   	cli    
c000f530:	c6 05 20 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f20,0x1
c000f537:	53                   	push   ebx
c000f538:	68 a0 dc 01 c0       	push   0xc001dca0
c000f53d:	e8 96 a4 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c000f542:	83 c4 0c             	add    esp,0xc
c000f545:	a1 d4 f4 01 c0       	mov    eax,ds:0xc001f4d4
c000f54a:	6a 01                	push   0x1
c000f54c:	6a 0f                	push   0xf
c000f54e:	50                   	push   eax
c000f54f:	e8 44 82 ff ff       	call   c0007798 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f554:	58                   	pop    eax
c000f555:	a1 d4 f4 01 c0       	mov    eax,ds:0xc001f4d4
c000f55a:	50                   	push   eax
c000f55b:	e8 30 84 ff ff       	call   c0007990 <VgaText::clearScreen()>
c000f560:	58                   	pop    eax
c000f561:	8b 0d d4 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4d4
c000f567:	5a                   	pop    edx
c000f568:	68 f1 dc 01 c0       	push   0xc001dcf1
c000f56d:	51                   	push   ecx
c000f56e:	e8 5d 82 ff ff       	call   c00077d0 <VgaText::setTitle(char*)>
c000f573:	83 c4 0c             	add    esp,0xc
c000f576:	a1 d4 f4 01 c0       	mov    eax,ds:0xc001f4d4
c000f57b:	6a 01                	push   0x1
c000f57d:	6a 0f                	push   0xf
c000f57f:	50                   	push   eax
c000f580:	e8 13 82 ff ff       	call   c0007798 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f585:	58                   	pop    eax
c000f586:	8b 0d d4 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4d4
c000f58c:	5a                   	pop    edx
c000f58d:	68 b9 dc 01 c0       	push   0xc001dcb9
c000f592:	51                   	push   ecx
c000f593:	e8 ec 86 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f598:	83 c4 0c             	add    esp,0xc
c000f59b:	a1 d4 f4 01 c0       	mov    eax,ds:0xc001f4d4
c000f5a0:	6a 0f                	push   0xf
c000f5a2:	6a 01                	push   0x1
c000f5a4:	50                   	push   eax
c000f5a5:	e8 ee 81 ff ff       	call   c0007798 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f5aa:	58                   	pop    eax
c000f5ab:	8b 0d d4 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4d4
c000f5b1:	5a                   	pop    edx
c000f5b2:	68 c2 dc 01 c0       	push   0xc001dcc2
c000f5b7:	51                   	push   ecx
c000f5b8:	e8 c7 86 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f5bd:	83 c4 0c             	add    esp,0xc
c000f5c0:	a1 d4 f4 01 c0       	mov    eax,ds:0xc001f4d4
c000f5c5:	6a 01                	push   0x1
c000f5c7:	6a 0f                	push   0xf
c000f5c9:	50                   	push   eax
c000f5ca:	e8 c9 81 ff ff       	call   c0007798 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f5cf:	58                   	pop    eax
c000f5d0:	8b 0d d4 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4d4
c000f5d6:	5a                   	pop    edx
c000f5d7:	68 ef dc 01 c0       	push   0xc001dcef
c000f5dc:	51                   	push   ecx
c000f5dd:	e8 a2 86 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f5e2:	58                   	pop    eax
c000f5e3:	8b 0d d4 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4d4
c000f5e9:	5a                   	pop    edx
c000f5ea:	68 f4 dc 01 c0       	push   0xc001dcf4
c000f5ef:	51                   	push   ecx
c000f5f0:	e8 8f 86 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f5f5:	58                   	pop    eax
c000f5f6:	8b 0d d4 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4d4
c000f5fc:	5a                   	pop    edx
c000f5fd:	68 cf dc 01 c0       	push   0xc001dccf
c000f602:	51                   	push   ecx
c000f603:	e8 7c 86 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f608:	58                   	pop    eax
c000f609:	8b 0d d4 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4d4
c000f60f:	5a                   	pop    edx
c000f610:	53                   	push   ebx
c000f611:	51                   	push   ecx
c000f612:	e8 6d 86 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f617:	5b                   	pop    ebx
c000f618:	58                   	pop    eax
c000f619:	a1 d4 f4 01 c0       	mov    eax,ds:0xc001f4d4
c000f61e:	68 ef dc 01 c0       	push   0xc001dcef
c000f623:	50                   	push   eax
c000f624:	e8 5b 86 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f629:	58                   	pop    eax
c000f62a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f62e:	50                   	push   eax
c000f62f:	e8 22 29 00 00       	call   c0011f56 <Thr::getDriverNameFromAddress(unsigned long)>
c000f634:	83 c4 10             	add    esp,0x10
c000f637:	85 c0                	test   eax,eax
c000f639:	0f 84 a2 00 00 00    	je     c000f6e1 <Krnl::panic(char const*)+0x1ba>
c000f63f:	83 ec 08             	sub    esp,0x8
c000f642:	89 c3                	mov    ebx,eax
c000f644:	68 30 dd 01 c0       	push   0xc001dd30
c000f649:	a1 d4 f4 01 c0       	mov    eax,ds:0xc001f4d4
c000f64e:	50                   	push   eax
c000f64f:	e8 30 86 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f654:	58                   	pop    eax
c000f655:	8b 0d d4 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4d4
c000f65b:	5a                   	pop    edx
c000f65c:	68 cf dc 01 c0       	push   0xc001dccf
c000f661:	51                   	push   ecx
c000f662:	e8 1d 86 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f667:	58                   	pop    eax
c000f668:	8b 0d d4 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4d4
c000f66e:	5a                   	pop    edx
c000f66f:	53                   	push   ebx
c000f670:	51                   	push   ecx
c000f671:	e8 0e 86 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f676:	83 c4 10             	add    esp,0x10
c000f679:	83 ec 08             	sub    esp,0x8
c000f67c:	a1 d4 f4 01 c0       	mov    eax,ds:0xc001f4d4
c000f681:	68 ee dc 01 c0       	push   0xc001dcee
c000f686:	50                   	push   eax
c000f687:	e8 f8 85 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f68c:	5a                   	pop    edx
c000f68d:	8b 1d d4 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f4d4
c000f693:	59                   	pop    ecx
c000f694:	68 88 dd 01 c0       	push   0xc001dd88
c000f699:	53                   	push   ebx
c000f69a:	e8 e5 85 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f69f:	58                   	pop    eax
c000f6a0:	8b 0d d4 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4d4
c000f6a6:	5a                   	pop    edx
c000f6a7:	68 c8 dd 01 c0       	push   0xc001ddc8
c000f6ac:	51                   	push   ecx
c000f6ad:	e8 d2 85 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f6b2:	5b                   	pop    ebx
c000f6b3:	58                   	pop    eax
c000f6b4:	a1 d4 f4 01 c0       	mov    eax,ds:0xc001f4d4
c000f6b9:	68 da dc 01 c0       	push   0xc001dcda
c000f6be:	50                   	push   eax
c000f6bf:	e8 c0 85 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f6c4:	83 c4 10             	add    esp,0x10
c000f6c7:	b2 fe                	mov    dl,0xfe
c000f6c9:	e4 60                	in     al,0x60
c000f6cb:	3c 1c                	cmp    al,0x1c
c000f6cd:	74 04                	je     c000f6d3 <Krnl::panic(char const*)+0x1ac>
c000f6cf:	3c 5a                	cmp    al,0x5a
c000f6d1:	75 f6                	jne    c000f6c9 <Krnl::panic(char const*)+0x1a2>
c000f6d3:	e4 64                	in     al,0x64
c000f6d5:	a8 02                	test   al,0x2
c000f6d7:	75 fa                	jne    c000f6d3 <Krnl::panic(char const*)+0x1ac>
c000f6d9:	88 d0                	mov    al,dl
c000f6db:	e6 64                	out    0x64,al
c000f6dd:	fa                   	cli    
c000f6de:	f4                   	hlt    
c000f6df:	eb e8                	jmp    c000f6c9 <Krnl::panic(char const*)+0x1a2>
c000f6e1:	50                   	push   eax
c000f6e2:	50                   	push   eax
c000f6e3:	68 5c dd 01 c0       	push   0xc001dd5c
c000f6e8:	ff 35 d4 f4 01 c0    	push   DWORD PTR ds:0xc001f4d4
c000f6ee:	e8 91 85 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f6f3:	58                   	pop    eax
c000f6f4:	5a                   	pop    edx
c000f6f5:	68 cf dc 01 c0       	push   0xc001dccf
c000f6fa:	ff 35 d4 f4 01 c0    	push   DWORD PTR ds:0xc001f4d4
c000f700:	e8 7f 85 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f705:	59                   	pop    ecx
c000f706:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f70b:	5b                   	pop    ebx
c000f70c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f70f:	83 c0 0c             	add    eax,0xc
c000f712:	50                   	push   eax
c000f713:	ff 35 d4 f4 01 c0    	push   DWORD PTR ds:0xc001f4d4
c000f719:	e8 66 85 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c000f71e:	83 c4 10             	add    esp,0x10
c000f721:	e9 53 ff ff ff       	jmp    c000f679 <Krnl::panic(char const*)+0x152>

c000f726 <Krnl::powerThread(void*)>:
c000f726:	53                   	push   ebx
c000f727:	83 ec 08             	sub    esp,0x8
c000f72a:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000f72f:	48                   	dec    eax
c000f730:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c000f735:	75 01                	jne    c000f738 <Krnl::powerThread(void*)+0x12>
c000f737:	fb                   	sti    
c000f738:	83 ec 0c             	sub    esp,0xc
c000f73b:	8b 1d 74 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f74
c000f741:	6a 0a                	push   0xa
c000f743:	c6 05 40 1f 02 c0 00 	mov    BYTE PTR ds:0xc0021f40,0x0
c000f74a:	e8 5d 35 00 00       	call   c0012cac <sleep(unsigned int)>
c000f74f:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000f754:	83 c4 10             	add    esp,0x10
c000f757:	83 c0 0a             	add    eax,0xa
c000f75a:	85 db                	test   ebx,ebx
c000f75c:	a3 84 1f 02 c0       	mov    ds:0xc0021f84,eax
c000f761:	74 d5                	je     c000f738 <Krnl::powerThread(void*)+0x12>
c000f763:	39 d8                	cmp    eax,ebx
c000f765:	7e d1                	jle    c000f738 <Krnl::powerThread(void*)+0x12>
c000f767:	83 ec 0c             	sub    esp,0xc
c000f76a:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c000f770:	e8 2d 6b ff ff       	call   c00062a2 <Computer::sleep()>
c000f775:	83 c4 10             	add    esp,0x10
c000f778:	eb be                	jmp    c000f738 <Krnl::powerThread(void*)+0x12>

c000f77a <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c000f77a:	57                   	push   edi
c000f77b:	b9 09 00 00 00       	mov    ecx,0x9
c000f780:	56                   	push   esi
c000f781:	bf 60 1f 02 c0       	mov    edi,0xc0021f60
c000f786:	fc                   	cld    
c000f787:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f78b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f78d:	5e                   	pop    esi
c000f78e:	5f                   	pop    edi
c000f78f:	c3                   	ret    

c000f790 <Krnl::userIOReceived()>:
c000f790:	c7 05 84 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f84,0x0
c000f79a:	c3                   	ret    

c000f79b <Krnl::handlePowerButton()>:
c000f79b:	83 ec 0c             	sub    esp,0xc
c000f79e:	a1 60 1f 02 c0       	mov    eax,ds:0xc0021f60
c000f7a3:	83 f8 02             	cmp    eax,0x2
c000f7a6:	75 10                	jne    c000f7b8 <Krnl::handlePowerButton()+0x1d>
c000f7a8:	83 ec 0c             	sub    esp,0xc
c000f7ab:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c000f7b1:	e8 bc 6a ff ff       	call   c0006272 <Computer::shutdown()>
c000f7b6:	eb 11                	jmp    c000f7c9 <Krnl::handlePowerButton()+0x2e>
c000f7b8:	48                   	dec    eax
c000f7b9:	75 11                	jne    c000f7cc <Krnl::handlePowerButton()+0x31>
c000f7bb:	83 ec 0c             	sub    esp,0xc
c000f7be:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c000f7c4:	e8 d9 6a ff ff       	call   c00062a2 <Computer::sleep()>
c000f7c9:	83 c4 10             	add    esp,0x10
c000f7cc:	83 c4 0c             	add    esp,0xc
c000f7cf:	c3                   	ret    

c000f7d0 <Krnl::handleSleepButton()>:
c000f7d0:	83 ec 0c             	sub    esp,0xc
c000f7d3:	a1 64 1f 02 c0       	mov    eax,ds:0xc0021f64
c000f7d8:	83 f8 02             	cmp    eax,0x2
c000f7db:	75 10                	jne    c000f7ed <Krnl::handleSleepButton()+0x1d>
c000f7dd:	83 ec 0c             	sub    esp,0xc
c000f7e0:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c000f7e6:	e8 87 6a ff ff       	call   c0006272 <Computer::shutdown()>
c000f7eb:	eb 11                	jmp    c000f7fe <Krnl::handleSleepButton()+0x2e>
c000f7ed:	48                   	dec    eax
c000f7ee:	75 11                	jne    c000f801 <Krnl::handleSleepButton()+0x31>
c000f7f0:	83 ec 0c             	sub    esp,0xc
c000f7f3:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c000f7f9:	e8 a4 6a ff ff       	call   c00062a2 <Computer::sleep()>
c000f7fe:	83 c4 10             	add    esp,0x10
c000f801:	83 c4 0c             	add    esp,0xc
c000f804:	c3                   	ret    

c000f805 <Krnl::setupPowerManager()>:
c000f805:	83 ec 0c             	sub    esp,0xc
c000f808:	c7 05 84 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f84,0x0
c000f812:	68 f0 00 00 00       	push   0xf0
c000f817:	c6 05 40 1f 02 c0 00 	mov    BYTE PTR ds:0xc0021f40,0x0
c000f81e:	6a 00                	push   0x0
c000f820:	68 26 f7 00 c0       	push   0xc000f726
c000f825:	ff 35 90 29 02 c0    	push   DWORD PTR ds:0xc0022990
c000f82b:	e8 4c 2f 00 00       	call   c001277c <Process::createThread(void (*)(void*), void*, int)>
c000f830:	c7 05 60 1f 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0021f60,0x2
c000f83a:	c7 05 64 1f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0021f64,0x1
c000f844:	c7 05 68 1f 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0021f68,0x3
c000f84e:	c7 05 6c 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f6c,0x0
c000f858:	c7 05 78 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f78,0x0
c000f862:	c7 05 70 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f70,0x0
c000f86c:	c7 05 7c 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f7c,0x0
c000f876:	c7 05 74 1f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0021f74,0x3c
c000f880:	c7 05 80 1f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0021f80,0x3c
c000f88a:	83 c4 1c             	add    esp,0x1c
c000f88d:	c3                   	ret    

c000f88e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c000f88e:	55                   	push   ebp
c000f88f:	57                   	push   edi
c000f890:	56                   	push   esi
c000f891:	53                   	push   ebx
c000f892:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f898:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c000f89f:	8a 1e                	mov    bl,BYTE PTR [esi]
c000f8a1:	8d 6e 01             	lea    ebp,[esi+0x1]
c000f8a4:	80 fb 40             	cmp    bl,0x40
c000f8a7:	75 1b                	jne    c000f8c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c000f8a9:	8a 16                	mov    dl,BYTE PTR [esi]
c000f8ab:	84 d2                	test   dl,dl
c000f8ad:	0f 84 f1 00 00 00    	je     c000f9a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f8b3:	8d 46 01             	lea    eax,[esi+0x1]
c000f8b6:	80 fa 3a             	cmp    dl,0x3a
c000f8b9:	74 04                	je     c000f8bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c000f8bb:	89 c6                	mov    esi,eax
c000f8bd:	eb ea                	jmp    c000f8a9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c000f8bf:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f8c2:	89 c6                	mov    esi,eax
c000f8c4:	50                   	push   eax
c000f8c5:	6a 40                	push   0x40
c000f8c7:	6a 00                	push   0x0
c000f8c9:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f8cd:	50                   	push   eax
c000f8ce:	e8 1d 0c ff ff       	call   c00004f0 <memset>
c000f8d3:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c000f8da:	31 c0                	xor    eax,eax
c000f8dc:	83 c4 10             	add    esp,0x10
c000f8df:	8a 0f                	mov    cl,BYTE PTR [edi]
c000f8e1:	84 c9                	test   cl,cl
c000f8e3:	0f 84 bb 00 00 00    	je     c000f9a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f8e9:	3d c7 00 00 00       	cmp    eax,0xc7
c000f8ee:	0f 8f b0 00 00 00    	jg     c000f9a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f8f4:	80 f9 0a             	cmp    cl,0xa
c000f8f7:	0f 85 98 00 00 00    	jne    c000f995 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c000f8fd:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c000f902:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c000f906:	a8 df                	test   al,0xdf
c000f908:	0f 94 c1             	sete   cl
c000f90b:	3c 23                	cmp    al,0x23
c000f90d:	0f 94 c2             	sete   dl
c000f910:	08 d1                	or     cl,dl
c000f912:	75 4a                	jne    c000f95e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f914:	8d 50 f7             	lea    edx,[eax-0x9]
c000f917:	80 fa 01             	cmp    dl,0x1
c000f91a:	76 42                	jbe    c000f95e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f91c:	3c 5b                	cmp    al,0x5b
c000f91e:	75 42                	jne    c000f962 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c000f920:	80 fb 40             	cmp    bl,0x40
c000f923:	75 39                	jne    c000f95e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f925:	83 ec 0c             	sub    esp,0xc
c000f928:	8d 54 24 65          	lea    edx,[esp+0x65]
c000f92c:	52                   	push   edx
c000f92d:	e8 2e 0c ff ff       	call   c0000560 <strlen>
c000f932:	83 c4 10             	add    esp,0x10
c000f935:	83 f8 3f             	cmp    eax,0x3f
c000f938:	77 6a                	ja     c000f9a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f93a:	50                   	push   eax
c000f93b:	50                   	push   eax
c000f93c:	8d 54 24 61          	lea    edx,[esp+0x61]
c000f940:	52                   	push   edx
c000f941:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f945:	52                   	push   edx
c000f946:	e8 d5 0c ff ff       	call   c0000620 <strcpy>
c000f94b:	58                   	pop    eax
c000f94c:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f950:	52                   	push   edx
c000f951:	e8 0a 0c ff ff       	call   c0000560 <strlen>
c000f956:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c000f95b:	83 c4 10             	add    esp,0x10
c000f95e:	31 d2                	xor    edx,edx
c000f960:	eb 3a                	jmp    c000f99c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c000f962:	80 fb 40             	cmp    bl,0x40
c000f965:	74 06                	je     c000f96d <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c000f967:	8d 44 24 58          	lea    eax,[esp+0x58]
c000f96b:	eb 20                	jmp    c000f98d <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c000f96d:	50                   	push   eax
c000f96e:	50                   	push   eax
c000f96f:	55                   	push   ebp
c000f970:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f974:	50                   	push   eax
c000f975:	e8 86 0d ff ff       	call   c0000700 <strcmp>
c000f97a:	83 c4 10             	add    esp,0x10
c000f97d:	85 c0                	test   eax,eax
c000f97f:	75 dd                	jne    c000f95e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f981:	eb e4                	jmp    c000f967 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c000f983:	8d 50 01             	lea    edx,[eax+0x1]
c000f986:	80 f9 3d             	cmp    cl,0x3d
c000f989:	74 1d                	je     c000f9a8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c000f98b:	89 d0                	mov    eax,edx
c000f98d:	8a 08                	mov    cl,BYTE PTR [eax]
c000f98f:	84 c9                	test   cl,cl
c000f991:	75 f0                	jne    c000f983 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c000f993:	eb 0f                	jmp    c000f9a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f995:	8d 50 01             	lea    edx,[eax+0x1]
c000f998:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c000f99c:	47                   	inc    edi
c000f99d:	89 d0                	mov    eax,edx
c000f99f:	e9 3b ff ff ff       	jmp    c000f8df <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c000f9a4:	31 c0                	xor    eax,eax
c000f9a6:	eb 33                	jmp    c000f9db <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c000f9a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f9ac:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f9af:	50                   	push   eax
c000f9b0:	50                   	push   eax
c000f9b1:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f9b5:	50                   	push   eax
c000f9b6:	56                   	push   esi
c000f9b7:	e8 44 0d ff ff       	call   c0000700 <strcmp>
c000f9bc:	83 c4 10             	add    esp,0x10
c000f9bf:	85 c0                	test   eax,eax
c000f9c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9c5:	75 97                	jne    c000f95e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f9c7:	51                   	push   ecx
c000f9c8:	51                   	push   ecx
c000f9c9:	52                   	push   edx
c000f9ca:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c000f9d1:	e8 4a 0c ff ff       	call   c0000620 <strcpy>
c000f9d6:	83 c4 10             	add    esp,0x10
c000f9d9:	b0 01                	mov    al,0x1
c000f9db:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f9e1:	5b                   	pop    ebx
c000f9e2:	5e                   	pop    esi
c000f9e3:	5f                   	pop    edi
c000f9e4:	5d                   	pop    ebp
c000f9e5:	c3                   	ret    

c000f9e6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c000f9e6:	57                   	push   edi
c000f9e7:	56                   	push   esi
c000f9e8:	53                   	push   ebx
c000f9e9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f9ef:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c000f9f6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c000f9fd:	53                   	push   ebx
c000f9fe:	e8 5d 0b ff ff       	call   c0000560 <strlen>
c000fa03:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa06:	89 c7                	mov    edi,eax
c000fa08:	e8 53 0b ff ff       	call   c0000560 <strlen>
c000fa0d:	83 c4 10             	add    esp,0x10
c000fa10:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c000fa14:	3d ff 00 00 00       	cmp    eax,0xff
c000fa19:	0f 87 d3 00 00 00    	ja     c000faf2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000fa1f:	57                   	push   edi
c000fa20:	57                   	push   edi
c000fa21:	56                   	push   esi
c000fa22:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000fa26:	56                   	push   esi
c000fa27:	e8 f4 0b ff ff       	call   c0000620 <strcpy>
c000fa2c:	58                   	pop    eax
c000fa2d:	5a                   	pop    edx
c000fa2e:	68 f0 e0 01 c0       	push   0xc001e0f0
c000fa33:	56                   	push   esi
c000fa34:	e8 a7 0d ff ff       	call   c00007e0 <strcat>
c000fa39:	59                   	pop    ecx
c000fa3a:	5f                   	pop    edi
c000fa3b:	53                   	push   ebx
c000fa3c:	56                   	push   esi
c000fa3d:	e8 9e 0d ff ff       	call   c00007e0 <strcat>
c000fa42:	58                   	pop    eax
c000fa43:	5a                   	pop    edx
c000fa44:	68 0b de 01 c0       	push   0xc001de0b
c000fa49:	56                   	push   esi
c000fa4a:	e8 91 0d ff ff       	call   c00007e0 <strcat>
c000fa4f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000fa56:	e8 ba 71 ff ff       	call   c0006c15 <malloc>
c000fa5b:	83 c4 0c             	add    esp,0xc
c000fa5e:	89 c3                	mov    ebx,eax
c000fa60:	ff 35 90 29 02 c0    	push   DWORD PTR ds:0xc0022990
c000fa66:	56                   	push   esi
c000fa67:	50                   	push   eax
c000fa68:	e8 e1 a4 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c000fa6d:	83 c4 10             	add    esp,0x10
c000fa70:	85 db                	test   ebx,ebx
c000fa72:	74 7e                	je     c000faf2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000fa74:	51                   	push   ecx
c000fa75:	51                   	push   ecx
c000fa76:	6a 01                	push   0x1
c000fa78:	53                   	push   ebx
c000fa79:	e8 90 a5 ff ff       	call   c000a00e <File::open(FileOpenMode)>
c000fa7e:	83 c4 10             	add    esp,0x10
c000fa81:	85 c0                	test   eax,eax
c000fa83:	74 08                	je     c000fa8d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c000fa85:	83 ec 0c             	sub    esp,0xc
c000fa88:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fa8a:	53                   	push   ebx
c000fa8b:	eb 5f                	jmp    c000faec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c000fa8d:	52                   	push   edx
c000fa8e:	8d 44 24 17          	lea    eax,[esp+0x17]
c000fa92:	50                   	push   eax
c000fa93:	8d 44 24 20          	lea    eax,[esp+0x20]
c000fa97:	50                   	push   eax
c000fa98:	53                   	push   ebx
c000fa99:	e8 1c a8 ff ff       	call   c000a2ba <File::stat(unsigned long long*, bool*)>
c000fa9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000faa2:	83 c4 10             	add    esp,0x10
c000faa5:	89 c1                	mov    ecx,eax
c000faa7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c000faab:	74 31                	je     c000fade <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000faad:	83 ec 0c             	sub    esp,0xc
c000fab0:	50                   	push   eax
c000fab1:	e8 5f 71 ff ff       	call   c0006c15 <malloc>
c000fab6:	89 c6                	mov    esi,eax
c000fab8:	58                   	pop    eax
c000fab9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fabb:	8d 54 24 20          	lea    edx,[esp+0x20]
c000fabf:	52                   	push   edx
c000fac0:	56                   	push   esi
c000fac1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fac5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fac9:	53                   	push   ebx
c000faca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000facd:	83 c4 20             	add    esp,0x20
c000fad0:	85 c0                	test   eax,eax
c000fad2:	75 0a                	jne    c000fade <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000fad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fad8:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fadc:	74 18                	je     c000faf6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c000fade:	83 ec 0c             	sub    esp,0xc
c000fae1:	53                   	push   ebx
c000fae2:	e8 85 a5 ff ff       	call   c000a06c <File::close()>
c000fae7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fae9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000faef:	83 c4 10             	add    esp,0x10
c000faf2:	31 c0                	xor    eax,eax
c000faf4:	eb 3b                	jmp    c000fb31 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c000faf6:	83 ec 0c             	sub    esp,0xc
c000faf9:	53                   	push   ebx
c000fafa:	e8 6d a5 ff ff       	call   c000a06c <File::close()>
c000faff:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fb07:	83 c4 0c             	add    esp,0xc
c000fb0a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fb11:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fb18:	56                   	push   esi
c000fb19:	e8 70 fd ff ff       	call   c000f88e <Reg::findLineFromLoadedData(char*, char*, char*)>
c000fb1e:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb21:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000fb25:	e8 fb 70 ff ff       	call   c0006c25 <free>
c000fb2a:	83 c4 10             	add    esp,0x10
c000fb2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fb31:	81 c4 20 01 00 00    	add    esp,0x120
c000fb37:	5b                   	pop    ebx
c000fb38:	5e                   	pop    esi
c000fb39:	5f                   	pop    edi
c000fb3a:	c3                   	ret    

c000fb3b <Reg::getLine(char*, char*, char*)>:
c000fb3b:	57                   	push   edi
c000fb3c:	56                   	push   esi
c000fb3d:	53                   	push   ebx
c000fb3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fb46:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fb4a:	57                   	push   edi
c000fb4b:	56                   	push   esi
c000fb4c:	53                   	push   ebx
c000fb4d:	68 10 de 01 c0       	push   0xc001de10
c000fb52:	e8 8f fe ff ff       	call   c000f9e6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	84 c0                	test   al,al
c000fb5c:	75 10                	jne    c000fb6e <Reg::getLine(char*, char*, char*)+0x33>
c000fb5e:	57                   	push   edi
c000fb5f:	56                   	push   esi
c000fb60:	53                   	push   ebx
c000fb61:	68 35 de 01 c0       	push   0xc001de35
c000fb66:	e8 7b fe ff ff       	call   c000f9e6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fb6b:	83 c4 10             	add    esp,0x10
c000fb6e:	5b                   	pop    ebx
c000fb6f:	5e                   	pop    esi
c000fb70:	5f                   	pop    edi
c000fb71:	c3                   	ret    

c000fb72 <Reg::readInt(char*, char*, int*)>:
c000fb72:	55                   	push   ebp
c000fb73:	57                   	push   edi
c000fb74:	56                   	push   esi
c000fb75:	53                   	push   ebx
c000fb76:	81 ec f0 00 00 00    	sub    esp,0xf0
c000fb7c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000fb80:	57                   	push   edi
c000fb81:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fb88:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fb8f:	e8 a7 ff ff ff       	call   c000fb3b <Reg::getLine(char*, char*, char*)>
c000fb94:	83 c4 10             	add    esp,0x10
c000fb97:	84 c0                	test   al,al
c000fb99:	0f 84 b3 00 00 00    	je     c000fc52 <Reg::readInt(char*, char*, int*)+0xe0>
c000fb9f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000fba3:	80 fa 2b             	cmp    dl,0x2b
c000fba6:	74 0c                	je     c000fbb4 <Reg::readInt(char*, char*, int*)+0x42>
c000fba8:	80 fa 2d             	cmp    dl,0x2d
c000fbab:	75 0e                	jne    c000fbbb <Reg::readInt(char*, char*, int*)+0x49>
c000fbad:	ba 01 00 00 00       	mov    edx,0x1
c000fbb2:	eb 0b                	jmp    c000fbbf <Reg::readInt(char*, char*, int*)+0x4d>
c000fbb4:	ba 01 00 00 00       	mov    edx,0x1
c000fbb9:	eb 02                	jmp    c000fbbd <Reg::readInt(char*, char*, int*)+0x4b>
c000fbbb:	31 d2                	xor    edx,edx
c000fbbd:	31 c0                	xor    eax,eax
c000fbbf:	be 0a 00 00 00       	mov    esi,0xa
c000fbc4:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c000fbc9:	75 20                	jne    c000fbeb <Reg::readInt(char*, char*, int*)+0x79>
c000fbcb:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c000fbcf:	80 f9 78             	cmp    cl,0x78
c000fbd2:	75 0a                	jne    c000fbde <Reg::readInt(char*, char*, int*)+0x6c>
c000fbd4:	83 c2 02             	add    edx,0x2
c000fbd7:	be 10 00 00 00       	mov    esi,0x10
c000fbdc:	eb 0d                	jmp    c000fbeb <Reg::readInt(char*, char*, int*)+0x79>
c000fbde:	80 f9 62             	cmp    cl,0x62
c000fbe1:	75 08                	jne    c000fbeb <Reg::readInt(char*, char*, int*)+0x79>
c000fbe3:	83 c2 02             	add    edx,0x2
c000fbe6:	be 02 00 00 00       	mov    esi,0x2
c000fbeb:	01 d7                	add    edi,edx
c000fbed:	31 d2                	xor    edx,edx
c000fbef:	8a 1f                	mov    bl,BYTE PTR [edi]
c000fbf1:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c000fbf5:	80 fb 0d             	cmp    bl,0xd
c000fbf8:	0f 94 c3             	sete   bl
c000fbfb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000fc00:	0f 94 c1             	sete   cl
c000fc03:	08 cb                	or     bl,cl
c000fc05:	75 3a                	jne    c000fc41 <Reg::readInt(char*, char*, int*)+0xcf>
c000fc07:	0f af d6             	imul   edx,esi
c000fc0a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c000fc0f:	83 fe 10             	cmp    esi,0x10
c000fc12:	75 26                	jne    c000fc3a <Reg::readInt(char*, char*, int*)+0xc8>
c000fc14:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fc18:	8d 69 bf             	lea    ebp,[ecx-0x41]
c000fc1b:	89 e9                	mov    ecx,ebp
c000fc1d:	80 f9 05             	cmp    cl,0x5
c000fc20:	77 06                	ja     c000fc28 <Reg::readInt(char*, char*, int*)+0xb6>
c000fc22:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c000fc26:	eb 16                	jmp    c000fc3e <Reg::readInt(char*, char*, int*)+0xcc>
c000fc28:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fc2c:	83 e9 61             	sub    ecx,0x61
c000fc2f:	80 f9 05             	cmp    cl,0x5
c000fc32:	77 06                	ja     c000fc3a <Reg::readInt(char*, char*, int*)+0xc8>
c000fc34:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c000fc38:	eb 04                	jmp    c000fc3e <Reg::readInt(char*, char*, int*)+0xcc>
c000fc3a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c000fc3e:	47                   	inc    edi
c000fc3f:	eb ae                	jmp    c000fbef <Reg::readInt(char*, char*, int*)+0x7d>
c000fc41:	84 c0                	test   al,al
c000fc43:	74 02                	je     c000fc47 <Reg::readInt(char*, char*, int*)+0xd5>
c000fc45:	f7 da                	neg    edx
c000fc47:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000fc4e:	89 10                	mov    DWORD PTR [eax],edx
c000fc50:	88 d8                	mov    al,bl
c000fc52:	81 c4 ec 00 00 00    	add    esp,0xec
c000fc58:	5b                   	pop    ebx
c000fc59:	5e                   	pop    esi
c000fc5a:	5f                   	pop    edi
c000fc5b:	5d                   	pop    ebp
c000fc5c:	c3                   	ret    

c000fc5d <Reg::readString(char*, char*, char*, int)>:
c000fc5d:	57                   	push   edi
c000fc5e:	56                   	push   esi
c000fc5f:	53                   	push   ebx
c000fc60:	81 ec d4 00 00 00    	sub    esp,0xd4
c000fc66:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c000fc6d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000fc71:	57                   	push   edi
c000fc72:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fc79:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fc80:	e8 b6 fe ff ff       	call   c000fb3b <Reg::getLine(char*, char*, char*)>
c000fc85:	83 c4 10             	add    esp,0x10
c000fc88:	89 c6                	mov    esi,eax
c000fc8a:	84 c0                	test   al,al
c000fc8c:	74 44                	je     c000fcd2 <Reg::readString(char*, char*, char*, int)+0x75>
c000fc8e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c000fc95:	31 c0                	xor    eax,eax
c000fc97:	4a                   	dec    edx
c000fc98:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c000fc9b:	84 c9                	test   cl,cl
c000fc9d:	74 0f                	je     c000fcae <Reg::readString(char*, char*, char*, int)+0x51>
c000fc9f:	39 c2                	cmp    edx,eax
c000fca1:	7e 0b                	jle    c000fcae <Reg::readString(char*, char*, char*, int)+0x51>
c000fca3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000fca6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c000fcab:	40                   	inc    eax
c000fcac:	eb ea                	jmp    c000fc98 <Reg::readString(char*, char*, char*, int)+0x3b>
c000fcae:	83 ec 0c             	sub    esp,0xc
c000fcb1:	53                   	push   ebx
c000fcb2:	e8 a9 08 ff ff       	call   c0000560 <strlen>
c000fcb7:	83 c4 10             	add    esp,0x10
c000fcba:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c000fcbf:	75 11                	jne    c000fcd2 <Reg::readString(char*, char*, char*, int)+0x75>
c000fcc1:	83 ec 0c             	sub    esp,0xc
c000fcc4:	53                   	push   ebx
c000fcc5:	e8 96 08 ff ff       	call   c0000560 <strlen>
c000fcca:	83 c4 10             	add    esp,0x10
c000fccd:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000fcd2:	81 c4 d0 00 00 00    	add    esp,0xd0
c000fcd8:	89 f0                	mov    eax,esi
c000fcda:	5b                   	pop    ebx
c000fcdb:	5e                   	pop    esi
c000fcdc:	5f                   	pop    edi
c000fcdd:	c3                   	ret    

c000fcde <Reg::readBool(char*, char*, bool*)>:
c000fcde:	83 ec 20             	sub    esp,0x20
c000fce1:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fce5:	50                   	push   eax
c000fce6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fcea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fcee:	e8 7f fe ff ff       	call   c000fb72 <Reg::readInt(char*, char*, int*)>
c000fcf3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fcf8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fcfc:	0f 95 02             	setne  BYTE PTR [edx]
c000fcff:	83 c4 2c             	add    esp,0x2c
c000fd02:	c3                   	ret    

c000fd03 <Reg::readBoolWithDefault(char*, char*, bool)>:
c000fd03:	53                   	push   ebx
c000fd04:	83 ec 1c             	sub    esp,0x1c
c000fd07:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c000fd0b:	8d 44 24 13          	lea    eax,[esp+0x13]
c000fd0f:	50                   	push   eax
c000fd10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd18:	e8 c1 ff ff ff       	call   c000fcde <Reg::readBool(char*, char*, bool*)>
c000fd1d:	83 c4 10             	add    esp,0x10
c000fd20:	84 c0                	test   al,al
c000fd22:	74 04                	je     c000fd28 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c000fd24:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c000fd28:	88 d8                	mov    al,bl
c000fd2a:	83 c4 18             	add    esp,0x18
c000fd2d:	5b                   	pop    ebx
c000fd2e:	c3                   	ret    

c000fd2f <Reg::readIntWithDefault(char*, char*, int)>:
c000fd2f:	53                   	push   ebx
c000fd30:	83 ec 1c             	sub    esp,0x1c
c000fd33:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd37:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fd3b:	50                   	push   eax
c000fd3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd44:	e8 29 fe ff ff       	call   c000fb72 <Reg::readInt(char*, char*, int*)>
c000fd49:	83 c4 10             	add    esp,0x10
c000fd4c:	84 c0                	test   al,al
c000fd4e:	74 04                	je     c000fd54 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c000fd50:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fd54:	89 d8                	mov    eax,ebx
c000fd56:	83 c4 18             	add    esp,0x18
c000fd59:	5b                   	pop    ebx
c000fd5a:	c3                   	ret    

c000fd5b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c000fd5b:	57                   	push   edi
c000fd5c:	56                   	push   esi
c000fd5d:	56                   	push   esi
c000fd5e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd62:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000fd66:	56                   	push   esi
c000fd67:	57                   	push   edi
c000fd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd70:	e8 e8 fe ff ff       	call   c000fc5d <Reg::readString(char*, char*, char*, int)>
c000fd75:	83 c4 10             	add    esp,0x10
c000fd78:	84 c0                	test   al,al
c000fd7a:	75 1a                	jne    c000fd96 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c000fd7c:	51                   	push   ecx
c000fd7d:	56                   	push   esi
c000fd7e:	6a 00                	push   0x0
c000fd80:	57                   	push   edi
c000fd81:	e8 6a 07 ff ff       	call   c00004f0 <memset>
c000fd86:	8d 4e ff             	lea    ecx,[esi-0x1]
c000fd89:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fd8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd8f:	83 c4 10             	add    esp,0x10
c000fd92:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000fd96:	89 f8                	mov    eax,edi
c000fd98:	5a                   	pop    edx
c000fd99:	5e                   	pop    esi
c000fd9a:	5f                   	pop    edi
c000fd9b:	c3                   	ret    

c000fd9c <Sys::eject(regs*)>:
c000fd9c:	83 ec 0c             	sub    esp,0xc
c000fd9f:	83 ca ff             	or     edx,0xffffffff
c000fda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fda6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c000fda9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000fdae:	83 e9 41             	sub    ecx,0x41
c000fdb1:	83 f9 19             	cmp    ecx,0x19
c000fdb4:	77 18                	ja     c000fdce <Sys::eject(regs*)+0x32>
c000fdb6:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c000fdbd:	85 c9                	test   ecx,ecx
c000fdbf:	74 0d                	je     c000fdce <Sys::eject(regs*)+0x32>
c000fdc1:	83 ec 0c             	sub    esp,0xc
c000fdc4:	51                   	push   ecx
c000fdc5:	e8 8c c2 ff ff       	call   c000c056 <LogicalDisk::eject()>
c000fdca:	83 c4 10             	add    esp,0x10
c000fdcd:	99                   	cdq    
c000fdce:	83 c4 0c             	add    esp,0xc
c000fdd1:	c3                   	ret    

c000fdd2 <Sys::exit(regs*)>:
c000fdd2:	83 ec 18             	sub    esp,0x18
c000fdd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fdd9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fddc:	e8 df 34 00 00       	call   c00132c0 <terminateTask(int)>
c000fde1:	83 c8 ff             	or     eax,0xffffffff
c000fde4:	83 c4 1c             	add    esp,0x1c
c000fde7:	89 c2                	mov    edx,eax
c000fde9:	c3                   	ret    

c000fdea <Sys::getCwd(regs*)>:
c000fdea:	83 ec 10             	sub    esp,0x10
c000fded:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdf1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000fdf4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fdf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fdfc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fdff:	e8 4c 9f ff ff       	call   c0009d50 <Fs::getcwd(Process*, char*, int)>
c000fe04:	83 c4 1c             	add    esp,0x1c
c000fe07:	99                   	cdq    
c000fe08:	c3                   	ret    

c000fe09 <Sys::getPID(regs*)>:
c000fe09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fe0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fe11:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe13:	99                   	cdq    
c000fe14:	c3                   	ret    

c000fe15 <Sys::getRAMData(regs*)>:
c000fe15:	8b 0d b8 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f4b8
c000fe1b:	69 05 b4 f4 01 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc001f4b4,0xc8
c000fe25:	99                   	cdq    
c000fe26:	f7 f9                	idiv   ecx
c000fe28:	c1 e0 18             	shl    eax,0x18
c000fe2b:	09 c8                	or     eax,ecx
c000fe2d:	99                   	cdq    
c000fe2e:	c3                   	ret    

c000fe2f <Sys::getVGAPtr(regs*)>:
c000fe2f:	55                   	push   ebp
c000fe30:	57                   	push   edi
c000fe31:	56                   	push   esi
c000fe32:	53                   	push   ebx
c000fe33:	83 ec 18             	sub    esp,0x18
c000fe36:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fe3a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000fe3d:	e8 7e 2f 00 00       	call   c0012dc0 <Thr::processFromPID(int)>
c000fe42:	83 c4 10             	add    esp,0x10
c000fe45:	89 c1                	mov    ecx,eax
c000fe47:	b8 01 00 00 00       	mov    eax,0x1
c000fe4c:	85 c9                	test   ecx,ecx
c000fe4e:	74 57                	je     c000fea7 <Sys::getVGAPtr(regs*)+0x78>
c000fe50:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c000fe56:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000fe5a:	74 0c                	je     c000fe68 <Sys::getVGAPtr(regs*)+0x39>
c000fe5c:	83 ec 0c             	sub    esp,0xc
c000fe5f:	55                   	push   ebp
c000fe60:	e8 e0 7a ff ff       	call   c0007945 <setActiveTerminal(VgaText*)>
c000fe65:	83 c4 10             	add    esp,0x10
c000fe68:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c000fe6b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c000fe6e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c000fe73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe75:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fe7b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c000fe81:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fe84:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000fe87:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c000fe8d:	50                   	push   eax
c000fe8e:	50                   	push   eax
c000fe8f:	68 50 de 01 c0       	push   0xc001de50
c000fe94:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fe97:	05 a8 0f 00 00       	add    eax,0xfa8
c000fe9c:	50                   	push   eax
c000fe9d:	e8 7e 07 ff ff       	call   c0000620 <strcpy>
c000fea2:	83 c4 10             	add    esp,0x10
c000fea5:	31 c0                	xor    eax,eax
c000fea7:	83 c4 0c             	add    esp,0xc
c000feaa:	31 d2                	xor    edx,edx
c000feac:	5b                   	pop    ebx
c000fead:	5e                   	pop    esi
c000feae:	5f                   	pop    edi
c000feaf:	5d                   	pop    ebp
c000feb0:	c3                   	ret    

c000feb1 <Sys::loadDLL(regs*)>:
c000feb1:	56                   	push   esi
c000feb2:	53                   	push   ebx
c000feb3:	31 d2                	xor    edx,edx
c000feb5:	51                   	push   ecx
c000feb6:	b8 01 00 00 00       	mov    eax,0x1
c000febb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000febf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000fec3:	0f 84 8c 00 00 00    	je     c000ff55 <Sys::loadDLL(regs*)+0xa4>
c000fec9:	83 ec 0c             	sub    esp,0xc
c000fecc:	68 14 01 00 00       	push   0x114
c000fed1:	e8 3f 6d ff ff       	call   c0006c15 <malloc>
c000fed6:	83 c4 0c             	add    esp,0xc
c000fed9:	89 c3                	mov    ebx,eax
c000fedb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fee0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fee3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fee6:	53                   	push   ebx
c000fee7:	e8 62 a0 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c000feec:	83 c4 10             	add    esp,0x10
c000feef:	31 d2                	xor    edx,edx
c000fef1:	b8 02 00 00 00       	mov    eax,0x2
c000fef6:	85 db                	test   ebx,ebx
c000fef8:	74 5b                	je     c000ff55 <Sys::loadDLL(regs*)+0xa4>
c000fefa:	83 ec 0c             	sub    esp,0xc
c000fefd:	53                   	push   ebx
c000fefe:	e8 79 a3 ff ff       	call   c000a27c <File::exists()>
c000ff03:	83 c4 10             	add    esp,0x10
c000ff06:	84 c0                	test   al,al
c000ff08:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff0a:	75 11                	jne    c000ff1d <Sys::loadDLL(regs*)+0x6c>
c000ff0c:	83 ec 0c             	sub    esp,0xc
c000ff0f:	53                   	push   ebx
c000ff10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ff13:	83 c4 10             	add    esp,0x10
c000ff16:	b8 03 00 00 00       	mov    eax,0x3
c000ff1b:	eb 36                	jmp    c000ff53 <Sys::loadDLL(regs*)+0xa2>
c000ff1d:	83 ec 0c             	sub    esp,0xc
c000ff20:	53                   	push   ebx
c000ff21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ff24:	58                   	pop    eax
c000ff25:	5a                   	pop    edx
c000ff26:	6a 00                	push   0x0
c000ff28:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ff2b:	e8 77 20 00 00       	call   c0011fa7 <Thr::loadDLL(char const*, bool)>
c000ff30:	83 c4 10             	add    esp,0x10
c000ff33:	89 c1                	mov    ecx,eax
c000ff35:	31 d2                	xor    edx,edx
c000ff37:	b8 04 00 00 00       	mov    eax,0x4
c000ff3c:	85 c9                	test   ecx,ecx
c000ff3e:	74 15                	je     c000ff55 <Sys::loadDLL(regs*)+0xa4>
c000ff40:	53                   	push   ebx
c000ff41:	53                   	push   ebx
c000ff42:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c000ff48:	51                   	push   ecx
c000ff49:	e8 8a 22 00 00       	call   c00121d8 <Thr::executeDLL(unsigned long, void*)>
c000ff4e:	83 c4 10             	add    esp,0x10
c000ff51:	31 c0                	xor    eax,eax
c000ff53:	31 d2                	xor    edx,edx
c000ff55:	59                   	pop    ecx
c000ff56:	5b                   	pop    ebx
c000ff57:	5e                   	pop    esi
c000ff58:	c3                   	ret    

c000ff59 <Sys::read(regs*)>:
c000ff59:	57                   	push   edi
c000ff5a:	56                   	push   esi
c000ff5b:	53                   	push   ebx
c000ff5c:	83 ec 10             	sub    esp,0x10
c000ff5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ff63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000ff66:	83 f8 02             	cmp    eax,0x2
c000ff69:	77 10                	ja     c000ff7b <Sys::read(regs*)+0x22>
c000ff6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff73:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c000ff79:	eb 0e                	jmp    c000ff89 <Sys::read(regs*)+0x30>
c000ff7b:	83 ec 0c             	sub    esp,0xc
c000ff7e:	50                   	push   eax
c000ff7f:	e8 77 86 ff ff       	call   c00085fb <getFromFileDescriptor(int)>
c000ff84:	83 c4 10             	add    esp,0x10
c000ff87:	89 c1                	mov    ecx,eax
c000ff89:	83 c8 ff             	or     eax,0xffffffff
c000ff8c:	85 c9                	test   ecx,ecx
c000ff8e:	89 c2                	mov    edx,eax
c000ff90:	74 28                	je     c000ffba <Sys::read(regs*)+0x61>
c000ff92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff9a:	31 ff                	xor    edi,edi
c000ff9c:	83 ec 0c             	sub    esp,0xc
c000ff9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ffa1:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ffa5:	52                   	push   edx
c000ffa6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ffa9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c000ffac:	57                   	push   edi
c000ffad:	56                   	push   esi
c000ffae:	51                   	push   ecx
c000ffaf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ffb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ffb6:	83 c4 20             	add    esp,0x20
c000ffb9:	99                   	cdq    
c000ffba:	83 c4 10             	add    esp,0x10
c000ffbd:	5b                   	pop    ebx
c000ffbe:	5e                   	pop    esi
c000ffbf:	5f                   	pop    edi
c000ffc0:	c3                   	ret    

c000ffc1 <Sys::sbrk(regs*)>:
c000ffc1:	56                   	push   esi
c000ffc2:	53                   	push   ebx
c000ffc3:	50                   	push   eax
c000ffc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffd0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c000ffd3:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000ffd9:	85 db                	test   ebx,ebx
c000ffdb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c000ffde:	74 02                	je     c000ffe2 <Sys::sbrk(regs*)+0x21>
c000ffe0:	79 06                	jns    c000ffe8 <Sys::sbrk(regs*)+0x27>
c000ffe2:	89 f0                	mov    eax,esi
c000ffe4:	31 d2                	xor    edx,edx
c000ffe6:	eb 2a                	jmp    c0010012 <Sys::sbrk(regs*)+0x51>
c000ffe8:	83 c8 ff             	or     eax,0xffffffff
c000ffeb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c000fff1:	89 c2                	mov    edx,eax
c000fff3:	77 1d                	ja     c0010012 <Sys::sbrk(regs*)+0x51>
c000fff5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c000fffb:	50                   	push   eax
c000fffc:	c1 ea 0c             	shr    edx,0xc
c000ffff:	68 07 0c 00 00       	push   0xc07
c0010004:	52                   	push   edx
c0010005:	51                   	push   ecx
c0010006:	e8 a3 8e ff ff       	call   c0008eae <VAS::allocatePages(int, int)>
c001000b:	89 f0                	mov    eax,esi
c001000d:	31 d2                	xor    edx,edx
c001000f:	83 c4 10             	add    esp,0x10
c0010012:	59                   	pop    ecx
c0010013:	5b                   	pop    ebx
c0010014:	5e                   	pop    esi
c0010015:	c3                   	ret    

c0010016 <Sys::setCwd(regs*)>:
c0010016:	83 ec 14             	sub    esp,0x14
c0010019:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001001d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010020:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010025:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010028:	e8 ee a2 ff ff       	call   c000a31b <Fs::setcwd(Process*, char*)>
c001002d:	83 c4 1c             	add    esp,0x1c
c0010030:	99                   	cdq    
c0010031:	c3                   	ret    

c0010032 <Sys::setTime(regs*)>:
c0010032:	55                   	push   ebp
c0010033:	31 c9                	xor    ecx,ecx
c0010035:	57                   	push   edi
c0010036:	bd 0c 00 00 00       	mov    ebp,0xc
c001003b:	56                   	push   esi
c001003c:	53                   	push   ebx
c001003d:	31 db                	xor    ebx,ebx
c001003f:	83 ec 10             	sub    esp,0x10
c0010042:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010046:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0010049:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001004c:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001004f:	89 c2                	mov    edx,eax
c0010051:	66 81 ef 6c 07       	sub    di,0x76c
c0010056:	83 e2 1f             	and    edx,0x1f
c0010059:	c1 e7 10             	shl    edi,0x10
c001005c:	42                   	inc    edx
c001005d:	c1 e8 05             	shr    eax,0x5
c0010060:	88 d1                	mov    cl,dl
c0010062:	31 d2                	xor    edx,edx
c0010064:	f7 f5                	div    ebp
c0010066:	89 dd                	mov    ebp,ebx
c0010068:	88 d5                	mov    ch,dl
c001006a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0010070:	0f b7 c1             	movzx  eax,cx
c0010073:	31 d2                	xor    edx,edx
c0010075:	09 f8                	or     eax,edi
c0010077:	bf 3c 00 00 00       	mov    edi,0x3c
c001007c:	89 c1                	mov    ecx,eax
c001007e:	89 f0                	mov    eax,esi
c0010080:	f7 f7                	div    edi
c0010082:	c1 e2 10             	shl    edx,0x10
c0010085:	09 d5                	or     ebp,edx
c0010087:	31 d2                	xor    edx,edx
c0010089:	89 eb                	mov    ebx,ebp
c001008b:	f7 f7                	div    edi
c001008d:	bf 10 0e 00 00       	mov    edi,0xe10
c0010092:	88 d7                	mov    bh,dl
c0010094:	89 f0                	mov    eax,esi
c0010096:	31 d2                	xor    edx,edx
c0010098:	f7 f7                	div    edi
c001009a:	bf 18 00 00 00       	mov    edi,0x18
c001009f:	31 d2                	xor    edx,edx
c00100a1:	f7 f7                	div    edi
c00100a3:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c00100a8:	88 d3                	mov    bl,dl
c00100aa:	53                   	push   ebx
c00100ab:	51                   	push   ecx
c00100ac:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00100b2:	e8 75 aa ff ff       	call   c000ab2c <Clock::setTimeInDatetimeLocal(datetime_t)>
c00100b7:	83 c4 1c             	add    esp,0x1c
c00100ba:	83 f0 01             	xor    eax,0x1
c00100bd:	5b                   	pop    ebx
c00100be:	0f b6 c0             	movzx  eax,al
c00100c1:	5e                   	pop    esi
c00100c2:	31 d2                	xor    edx,edx
c00100c4:	5f                   	pop    edi
c00100c5:	5d                   	pop    ebp
c00100c6:	c3                   	ret    

c00100c7 <Sys::timezone(regs*)>:
c00100c7:	53                   	push   ebx
c00100c8:	83 ec 08             	sub    esp,0x8
c00100cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100cf:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00100d3:	75 17                	jne    c00100ec <Sys::timezone(regs*)+0x25>
c00100d5:	83 ec 0c             	sub    esp,0xc
c00100d8:	68 5a de 01 c0       	push   0xc001de5a
c00100dd:	e8 f6 98 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00100e2:	83 c8 ff             	or     eax,0xffffffff
c00100e5:	83 c4 10             	add    esp,0x10
c00100e8:	89 c2                	mov    edx,eax
c00100ea:	eb 20                	jmp    c001010c <Sys::timezone(regs*)+0x45>
c00100ec:	83 ec 0c             	sub    esp,0xc
c00100ef:	68 6f de 01 c0       	push   0xc001de6f
c00100f4:	e8 df 98 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00100f9:	58                   	pop    eax
c00100fa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00100fd:	e8 86 a7 ff ff       	call   c000a888 <User::loadClockSettings(int)>
c0010102:	83 c4 10             	add    esp,0x10
c0010105:	b8 01 00 00 00       	mov    eax,0x1
c001010a:	31 d2                	xor    edx,edx
c001010c:	83 c4 08             	add    esp,0x8
c001010f:	5b                   	pop    ebx
c0010110:	c3                   	ret    

c0010111 <Sys::write(regs*)>:
c0010111:	57                   	push   edi
c0010112:	56                   	push   esi
c0010113:	53                   	push   ebx
c0010114:	83 ec 10             	sub    esp,0x10
c0010117:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001011b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001011e:	83 f8 02             	cmp    eax,0x2
c0010121:	77 10                	ja     c0010133 <Sys::write(regs*)+0x22>
c0010123:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010128:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001012b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010131:	eb 0e                	jmp    c0010141 <Sys::write(regs*)+0x30>
c0010133:	83 ec 0c             	sub    esp,0xc
c0010136:	50                   	push   eax
c0010137:	e8 bf 84 ff ff       	call   c00085fb <getFromFileDescriptor(int)>
c001013c:	83 c4 10             	add    esp,0x10
c001013f:	89 c1                	mov    ecx,eax
c0010141:	83 c8 ff             	or     eax,0xffffffff
c0010144:	85 c9                	test   ecx,ecx
c0010146:	89 c2                	mov    edx,eax
c0010148:	74 28                	je     c0010172 <Sys::write(regs*)+0x61>
c001014a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010152:	31 ff                	xor    edi,edi
c0010154:	83 ec 0c             	sub    esp,0xc
c0010157:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010159:	8d 54 24 18          	lea    edx,[esp+0x18]
c001015d:	52                   	push   edx
c001015e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010161:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0010164:	57                   	push   edi
c0010165:	56                   	push   esi
c0010166:	51                   	push   ecx
c0010167:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001016a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001016e:	83 c4 20             	add    esp,0x20
c0010171:	99                   	cdq    
c0010172:	83 c4 10             	add    esp,0x10
c0010175:	5b                   	pop    ebx
c0010176:	5e                   	pop    esi
c0010177:	5f                   	pop    edi
c0010178:	c3                   	ret    

c0010179 <Sys::wsbe(regs*)>:
c0010179:	57                   	push   edi
c001017a:	b9 0b 00 00 00       	mov    ecx,0xb
c001017f:	56                   	push   esi
c0010180:	be ae de 01 c0       	mov    esi,0xc001deae
c0010185:	53                   	push   ebx
c0010186:	83 ec 30             	sub    esp,0x30
c0010189:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001018d:	fc                   	cld    
c001018e:	83 ec 0c             	sub    esp,0xc
c0010191:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010193:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0010197:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001019c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001019f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00101a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00101a7:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00101aa:	57                   	push   edi
c00101ab:	e8 b0 03 ff ff       	call   c0000560 <strlen>
c00101b0:	5a                   	pop    edx
c00101b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00101b5:	52                   	push   edx
c00101b6:	31 d2                	xor    edx,edx
c00101b8:	57                   	push   edi
c00101b9:	52                   	push   edx
c00101ba:	50                   	push   eax
c00101bb:	56                   	push   esi
c00101bc:	ff d3                	call   ebx
c00101be:	83 c4 14             	add    esp,0x14
c00101c1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00101c5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00101c8:	e8 f3 30 00 00       	call   c00132c0 <terminateTask(int)>
c00101cd:	83 c4 40             	add    esp,0x40
c00101d0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00101d5:	5b                   	pop    ebx
c00101d6:	31 d2                	xor    edx,edx
c00101d8:	5e                   	pop    esi
c00101d9:	5f                   	pop    edi
c00101da:	c3                   	ret    

c00101db <Sys::yield(regs*)>:
c00101db:	83 ec 0c             	sub    esp,0xc
c00101de:	fa                   	cli    
c00101df:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c00101e5:	e8 b2 27 00 00       	call   c001299c <schedule()>
c00101ea:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00101ef:	48                   	dec    eax
c00101f0:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c00101f5:	75 01                	jne    c00101f8 <Sys::yield(regs*)+0x1d>
c00101f7:	fb                   	sti    
c00101f8:	31 c0                	xor    eax,eax
c00101fa:	31 d2                	xor    edx,edx
c00101fc:	83 c4 0c             	add    esp,0xc
c00101ff:	c3                   	ret    

c0010200 <sysCallSeekDir(regs*)>:
c0010200:	31 c0                	xor    eax,eax
c0010202:	31 d2                	xor    edx,edx
c0010204:	c3                   	ret    

c0010205 <sysCallTellDir(regs*)>:
c0010205:	31 c0                	xor    eax,eax
c0010207:	31 d2                	xor    edx,edx
c0010209:	c3                   	ret    

c001020a <sysCallVerify(regs*)>:
c001020a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001020e:	31 d2                	xor    edx,edx
c0010210:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010213:	c3                   	ret    

c0010214 <sysCallGetArgc(regs*)>:
c0010214:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010219:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001021c:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010222:	99                   	cdq    
c0010223:	c3                   	ret    

c0010224 <sysCallTTYName(regs*)>:
c0010224:	b8 01 00 00 00       	mov    eax,0x1
c0010229:	31 d2                	xor    edx,edx
c001022b:	c3                   	ret    

c001022c <sysFormatDisk(regs*)>:
c001022c:	56                   	push   esi
c001022d:	53                   	push   ebx
c001022e:	50                   	push   eax
c001022f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010233:	8b 1d 78 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f578
c0010239:	eb 28                	jmp    c0010263 <sysFormatDisk(regs*)+0x37>
c001023b:	83 ec 0c             	sub    esp,0xc
c001023e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010241:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010244:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010246:	51                   	push   ecx
c0010247:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001024a:	51                   	push   ecx
c001024b:	50                   	push   eax
c001024c:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c0010253:	50                   	push   eax
c0010254:	53                   	push   ebx
c0010255:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010258:	83 c4 20             	add    esp,0x20
c001025b:	83 f8 08             	cmp    eax,0x8
c001025e:	75 12                	jne    c0010272 <sysFormatDisk(regs*)+0x46>
c0010260:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010263:	85 db                	test   ebx,ebx
c0010265:	75 d4                	jne    c001023b <sysFormatDisk(regs*)+0xf>
c0010267:	59                   	pop    ecx
c0010268:	b8 03 00 00 00       	mov    eax,0x3
c001026d:	31 d2                	xor    edx,edx
c001026f:	5b                   	pop    ebx
c0010270:	5e                   	pop    esi
c0010271:	c3                   	ret    
c0010272:	85 c0                	test   eax,eax
c0010274:	74 1b                	je     c0010291 <sysFormatDisk(regs*)+0x65>
c0010276:	83 f8 09             	cmp    eax,0x9
c0010279:	74 0b                	je     c0010286 <sysFormatDisk(regs*)+0x5a>
c001027b:	59                   	pop    ecx
c001027c:	b8 02 00 00 00       	mov    eax,0x2
c0010281:	31 d2                	xor    edx,edx
c0010283:	5b                   	pop    ebx
c0010284:	5e                   	pop    esi
c0010285:	c3                   	ret    
c0010286:	59                   	pop    ecx
c0010287:	b8 01 00 00 00       	mov    eax,0x1
c001028c:	31 d2                	xor    edx,edx
c001028e:	5b                   	pop    ebx
c001028f:	5e                   	pop    esi
c0010290:	c3                   	ret    
c0010291:	59                   	pop    ecx
c0010292:	31 c0                	xor    eax,eax
c0010294:	31 d2                	xor    edx,edx
c0010296:	5b                   	pop    ebx
c0010297:	5e                   	pop    esi
c0010298:	c3                   	ret    

c0010299 <sysSetDiskVolumeLabel(regs*)>:
c0010299:	56                   	push   esi
c001029a:	53                   	push   ebx
c001029b:	53                   	push   ebx
c001029c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00102a3:	83 f8 19             	cmp    eax,0x19
c00102a6:	77 2d                	ja     c00102d5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00102a8:	8b 0c 85 00 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde600]
c00102af:	85 c9                	test   ecx,ecx
c00102b1:	74 22                	je     c00102d5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00102b3:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00102b6:	85 db                	test   ebx,ebx
c00102b8:	74 1b                	je     c00102d5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00102ba:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00102c0:	85 d2                	test   edx,edx
c00102c2:	74 11                	je     c00102d5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00102c4:	8b 32                	mov    esi,DWORD PTR [edx]
c00102c6:	53                   	push   ebx
c00102c7:	50                   	push   eax
c00102c8:	51                   	push   ecx
c00102c9:	52                   	push   edx
c00102ca:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00102cd:	83 c4 10             	add    esp,0x10
c00102d0:	99                   	cdq    
c00102d1:	59                   	pop    ecx
c00102d2:	5b                   	pop    ebx
c00102d3:	5e                   	pop    esi
c00102d4:	c3                   	ret    
c00102d5:	59                   	pop    ecx
c00102d6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00102db:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102e0:	5b                   	pop    ebx
c00102e1:	5e                   	pop    esi
c00102e2:	c3                   	ret    

c00102e3 <sysGetDiskVolumeLabel(regs*)>:
c00102e3:	57                   	push   edi
c00102e4:	56                   	push   esi
c00102e5:	53                   	push   ebx
c00102e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00102ed:	83 fa 19             	cmp    edx,0x19
c00102f0:	77 38                	ja     c001032a <sysGetDiskVolumeLabel(regs*)+0x47>
c00102f2:	8b 0c 95 00 1a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffde600]
c00102f9:	85 c9                	test   ecx,ecx
c00102fb:	74 2d                	je     c001032a <sysGetDiskVolumeLabel(regs*)+0x47>
c00102fd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010300:	85 db                	test   ebx,ebx
c0010302:	74 26                	je     c001032a <sysGetDiskVolumeLabel(regs*)+0x47>
c0010304:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010307:	85 f6                	test   esi,esi
c0010309:	74 1f                	je     c001032a <sysGetDiskVolumeLabel(regs*)+0x47>
c001030b:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010311:	85 c0                	test   eax,eax
c0010313:	74 15                	je     c001032a <sysGetDiskVolumeLabel(regs*)+0x47>
c0010315:	83 ec 0c             	sub    esp,0xc
c0010318:	8b 38                	mov    edi,DWORD PTR [eax]
c001031a:	56                   	push   esi
c001031b:	53                   	push   ebx
c001031c:	52                   	push   edx
c001031d:	51                   	push   ecx
c001031e:	50                   	push   eax
c001031f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010322:	83 c4 20             	add    esp,0x20
c0010325:	99                   	cdq    
c0010326:	5b                   	pop    ebx
c0010327:	5e                   	pop    esi
c0010328:	5f                   	pop    edi
c0010329:	c3                   	ret    
c001032a:	5b                   	pop    ebx
c001032b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010330:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010335:	5e                   	pop    esi
c0010336:	5f                   	pop    edi
c0010337:	c3                   	ret    

c0010338 <sysShutdown(regs*)>:
c0010338:	83 ec 0c             	sub    esp,0xc
c001033b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001033f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010342:	85 c0                	test   eax,eax
c0010344:	74 18                	je     c001035e <sysShutdown(regs*)+0x26>
c0010346:	83 f8 01             	cmp    eax,0x1
c0010349:	74 38                	je     c0010383 <sysShutdown(regs*)+0x4b>
c001034b:	83 f8 02             	cmp    eax,0x2
c001034e:	74 24                	je     c0010374 <sysShutdown(regs*)+0x3c>
c0010350:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010355:	ba ff ff ff ff       	mov    edx,0xffffffff
c001035a:	83 c4 0c             	add    esp,0xc
c001035d:	c3                   	ret    
c001035e:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0010363:	8b 10                	mov    edx,DWORD PTR [eax]
c0010365:	6a 00                	push   0x0
c0010367:	6a 00                	push   0x0
c0010369:	6a 00                	push   0x0
c001036b:	50                   	push   eax
c001036c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001036f:	83 c4 10             	add    esp,0x10
c0010372:	eb dc                	jmp    c0010350 <sysShutdown(regs*)+0x18>
c0010374:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0010379:	8b 10                	mov    edx,DWORD PTR [eax]
c001037b:	6a 00                	push   0x0
c001037d:	6a 00                	push   0x0
c001037f:	6a 01                	push   0x1
c0010381:	eb e8                	jmp    c001036b <sysShutdown(regs*)+0x33>
c0010383:	a1 80 1a 02 c0       	mov    eax,ds:0xc0021a80
c0010388:	85 c0                	test   eax,eax
c001038a:	74 02                	je     c001038e <sysShutdown(regs*)+0x56>
c001038c:	ff d0                	call   eax
c001038e:	31 c0                	xor    eax,eax
c0010390:	31 d2                	xor    edx,edx
c0010392:	83 c4 0c             	add    esp,0xc
c0010395:	c3                   	ret    

c0010396 <sysCallRealpath(regs*)>:
c0010396:	83 ec 0c             	sub    esp,0xc
c0010399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001039d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00103a0:	85 d2                	test   edx,edx
c00103a2:	74 07                	je     c00103ab <sysCallRealpath(regs*)+0x15>
c00103a4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103a7:	85 c0                	test   eax,eax
c00103a9:	75 0b                	jne    c00103b6 <sysCallRealpath(regs*)+0x20>
c00103ab:	b8 01 00 00 00       	mov    eax,0x1
c00103b0:	31 d2                	xor    edx,edx
c00103b2:	83 c4 0c             	add    esp,0xc
c00103b5:	c3                   	ret    
c00103b6:	51                   	push   ecx
c00103b7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00103bd:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00103c0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00103c6:	51                   	push   ecx
c00103c7:	52                   	push   edx
c00103c8:	50                   	push   eax
c00103c9:	e8 d6 99 ff ff       	call   c0009da4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00103ce:	83 c4 10             	add    esp,0x10
c00103d1:	31 c0                	xor    eax,eax
c00103d3:	31 d2                	xor    edx,edx
c00103d5:	83 c4 0c             	add    esp,0xc
c00103d8:	c3                   	ret    

c00103d9 <sysCallReadDir(regs*)>:
c00103d9:	53                   	push   ebx
c00103da:	83 ec 18             	sub    esp,0x18
c00103dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00103e1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103e4:	83 f8 02             	cmp    eax,0x2
c00103e7:	76 61                	jbe    c001044a <sysCallReadDir(regs*)+0x71>
c00103e9:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00103f0:	77 49                	ja     c001043b <sysCallReadDir(regs*)+0x62>
c00103f2:	83 ec 0c             	sub    esp,0xc
c00103f5:	50                   	push   eax
c00103f6:	e8 00 82 ff ff       	call   c00085fb <getFromFileDescriptor(int)>
c00103fb:	83 c4 10             	add    esp,0x10
c00103fe:	85 c0                	test   eax,eax
c0010400:	74 39                	je     c001043b <sysCallReadDir(regs*)+0x62>
c0010402:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001040a:	83 ec 0c             	sub    esp,0xc
c001040d:	8b 10                	mov    edx,DWORD PTR [eax]
c001040f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010413:	51                   	push   ecx
c0010414:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010417:	51                   	push   ecx
c0010418:	6a 00                	push   0x0
c001041a:	68 10 01 00 00       	push   0x110
c001041f:	50                   	push   eax
c0010420:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010423:	83 c4 20             	add    esp,0x20
c0010426:	85 c0                	test   eax,eax
c0010428:	74 29                	je     c0010453 <sysCallReadDir(regs*)+0x7a>
c001042a:	83 f8 07             	cmp    eax,0x7
c001042d:	74 1b                	je     c001044a <sysCallReadDir(regs*)+0x71>
c001042f:	b8 02 00 00 00       	mov    eax,0x2
c0010434:	31 d2                	xor    edx,edx
c0010436:	83 c4 18             	add    esp,0x18
c0010439:	5b                   	pop    ebx
c001043a:	c3                   	ret    
c001043b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010440:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010445:	83 c4 18             	add    esp,0x18
c0010448:	5b                   	pop    ebx
c0010449:	c3                   	ret    
c001044a:	b8 01 00 00 00       	mov    eax,0x1
c001044f:	31 d2                	xor    edx,edx
c0010451:	eb e3                	jmp    c0010436 <sysCallReadDir(regs*)+0x5d>
c0010453:	31 c0                	xor    eax,eax
c0010455:	31 d2                	xor    edx,edx
c0010457:	eb dd                	jmp    c0010436 <sysCallReadDir(regs*)+0x5d>

c0010459 <sysCallIsATTY(regs*)>:
c0010459:	83 ec 0c             	sub    esp,0xc
c001045c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010460:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010463:	83 f8 02             	cmp    eax,0x2
c0010466:	76 07                	jbe    c001046f <sysCallIsATTY(regs*)+0x16>
c0010468:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001046d:	75 28                	jne    c0010497 <sysCallIsATTY(regs*)+0x3e>
c001046f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010474:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010477:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001047d:	85 c0                	test   eax,eax
c001047f:	74 26                	je     c00104a7 <sysCallIsATTY(regs*)+0x4e>
c0010481:	83 ec 0c             	sub    esp,0xc
c0010484:	8b 10                	mov    edx,DWORD PTR [eax]
c0010486:	50                   	push   eax
c0010487:	ff 12                	call   DWORD PTR [edx]
c0010489:	31 d2                	xor    edx,edx
c001048b:	25 ff 00 00 00       	and    eax,0xff
c0010490:	83 c4 10             	add    esp,0x10
c0010493:	83 c4 0c             	add    esp,0xc
c0010496:	c3                   	ret    
c0010497:	83 ec 0c             	sub    esp,0xc
c001049a:	50                   	push   eax
c001049b:	e8 5b 81 ff ff       	call   c00085fb <getFromFileDescriptor(int)>
c00104a0:	83 c4 10             	add    esp,0x10
c00104a3:	85 c0                	test   eax,eax
c00104a5:	75 da                	jne    c0010481 <sysCallIsATTY(regs*)+0x28>
c00104a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104b1:	83 c4 0c             	add    esp,0xc
c00104b4:	c3                   	ret    

c00104b5 <sysCallSeek(regs*)>:
c00104b5:	53                   	push   ebx
c00104b6:	83 ec 08             	sub    esp,0x8
c00104b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00104c0:	8d 50 fd             	lea    edx,[eax-0x3]
c00104c3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00104c9:	77 34                	ja     c00104ff <sysCallSeek(regs*)+0x4a>
c00104cb:	83 ec 0c             	sub    esp,0xc
c00104ce:	50                   	push   eax
c00104cf:	e8 27 81 ff ff       	call   c00085fb <getFromFileDescriptor(int)>
c00104d4:	83 c4 0c             	add    esp,0xc
c00104d7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00104da:	31 db                	xor    ebx,ebx
c00104dc:	53                   	push   ebx
c00104dd:	51                   	push   ecx
c00104de:	50                   	push   eax
c00104df:	e8 e8 9b ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c00104e4:	83 c4 10             	add    esp,0x10
c00104e7:	85 c0                	test   eax,eax
c00104e9:	0f 95 c0             	setne  al
c00104ec:	31 d2                	xor    edx,edx
c00104ee:	25 ff 00 00 00       	and    eax,0xff
c00104f3:	f7 d8                	neg    eax
c00104f5:	83 d2 00             	adc    edx,0x0
c00104f8:	83 c4 08             	add    esp,0x8
c00104fb:	f7 da                	neg    edx
c00104fd:	5b                   	pop    ebx
c00104fe:	c3                   	ret    
c00104ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010504:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010509:	83 c4 08             	add    esp,0x8
c001050c:	5b                   	pop    ebx
c001050d:	c3                   	ret    

c001050e <sysCallTell(regs*)>:
c001050e:	53                   	push   ebx
c001050f:	83 ec 08             	sub    esp,0x8
c0010512:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010516:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010519:	83 f8 02             	cmp    eax,0x2
c001051c:	76 50                	jbe    c001056e <sysCallTell(regs*)+0x60>
c001051e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010523:	76 19                	jbe    c001053e <sysCallTell(regs*)+0x30>
c0010525:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010528:	31 d2                	xor    edx,edx
c001052a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010530:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010537:	31 c0                	xor    eax,eax
c0010539:	83 c4 08             	add    esp,0x8
c001053c:	5b                   	pop    ebx
c001053d:	c3                   	ret    
c001053e:	83 ec 0c             	sub    esp,0xc
c0010541:	50                   	push   eax
c0010542:	e8 b4 80 ff ff       	call   c00085fb <getFromFileDescriptor(int)>
c0010547:	5a                   	pop    edx
c0010548:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001054b:	59                   	pop    ecx
c001054c:	53                   	push   ebx
c001054d:	50                   	push   eax
c001054e:	e8 cf 9b ff ff       	call   c000a122 <File::tell(unsigned long long*)>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	85 c0                	test   eax,eax
c0010558:	0f 95 c0             	setne  al
c001055b:	31 d2                	xor    edx,edx
c001055d:	25 ff 00 00 00       	and    eax,0xff
c0010562:	f7 d8                	neg    eax
c0010564:	83 d2 00             	adc    edx,0x0
c0010567:	83 c4 08             	add    esp,0x8
c001056a:	f7 da                	neg    edx
c001056c:	5b                   	pop    ebx
c001056d:	c3                   	ret    
c001056e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010573:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010578:	83 c4 08             	add    esp,0x8
c001057b:	5b                   	pop    ebx
c001057c:	c3                   	ret    

c001057d <sysCallSize(regs*)>:
c001057d:	53                   	push   ebx
c001057e:	83 ec 18             	sub    esp,0x18
c0010581:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010585:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010588:	83 f8 02             	cmp    eax,0x2
c001058b:	76 56                	jbe    c00105e3 <sysCallSize(regs*)+0x66>
c001058d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010592:	76 19                	jbe    c00105ad <sysCallSize(regs*)+0x30>
c0010594:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010597:	31 d2                	xor    edx,edx
c0010599:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001059f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105a6:	31 c0                	xor    eax,eax
c00105a8:	83 c4 18             	add    esp,0x18
c00105ab:	5b                   	pop    ebx
c00105ac:	c3                   	ret    
c00105ad:	83 ec 0c             	sub    esp,0xc
c00105b0:	50                   	push   eax
c00105b1:	e8 45 80 ff ff       	call   c00085fb <getFromFileDescriptor(int)>
c00105b6:	83 c4 0c             	add    esp,0xc
c00105b9:	8d 54 24 13          	lea    edx,[esp+0x13]
c00105bd:	52                   	push   edx
c00105be:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00105c1:	52                   	push   edx
c00105c2:	50                   	push   eax
c00105c3:	e8 f2 9c ff ff       	call   c000a2ba <File::stat(unsigned long long*, bool*)>
c00105c8:	83 c4 10             	add    esp,0x10
c00105cb:	85 c0                	test   eax,eax
c00105cd:	0f 95 c0             	setne  al
c00105d0:	31 d2                	xor    edx,edx
c00105d2:	25 ff 00 00 00       	and    eax,0xff
c00105d7:	f7 d8                	neg    eax
c00105d9:	83 d2 00             	adc    edx,0x0
c00105dc:	83 c4 18             	add    esp,0x18
c00105df:	f7 da                	neg    edx
c00105e1:	5b                   	pop    ebx
c00105e2:	c3                   	ret    
c00105e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105ed:	83 c4 18             	add    esp,0x18
c00105f0:	5b                   	pop    ebx
c00105f1:	c3                   	ret    

c00105f2 <sysCallSizeFromFilename(regs*)>:
c00105f2:	57                   	push   edi
c00105f3:	56                   	push   esi
c00105f4:	53                   	push   ebx
c00105f5:	83 ec 20             	sub    esp,0x20
c00105f8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00105fc:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00105ff:	83 fb 02             	cmp    ebx,0x2
c0010602:	0f 86 8c 00 00 00    	jbe    c0010694 <sysCallSizeFromFilename(regs*)+0xa2>
c0010608:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001060e:	76 1b                	jbe    c001062b <sysCallSizeFromFilename(regs*)+0x39>
c0010610:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010613:	31 d2                	xor    edx,edx
c0010615:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001061b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010622:	83 c4 20             	add    esp,0x20
c0010625:	31 c0                	xor    eax,eax
c0010627:	5b                   	pop    ebx
c0010628:	5e                   	pop    esi
c0010629:	5f                   	pop    edi
c001062a:	c3                   	ret    
c001062b:	83 ec 0c             	sub    esp,0xc
c001062e:	68 14 01 00 00       	push   0x114
c0010633:	e8 dd 65 ff ff       	call   c0006c15 <malloc>
c0010638:	83 c4 0c             	add    esp,0xc
c001063b:	89 c7                	mov    edi,eax
c001063d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010642:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010645:	50                   	push   eax
c0010646:	53                   	push   ebx
c0010647:	57                   	push   edi
c0010648:	e8 01 99 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c001064d:	83 c4 0c             	add    esp,0xc
c0010650:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010654:	50                   	push   eax
c0010655:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010658:	52                   	push   edx
c0010659:	57                   	push   edi
c001065a:	e8 5b 9c ff ff       	call   c000a2ba <File::stat(unsigned long long*, bool*)>
c001065f:	83 c4 10             	add    esp,0x10
c0010662:	85 ff                	test   edi,edi
c0010664:	74 14                	je     c001067a <sysCallSizeFromFilename(regs*)+0x88>
c0010666:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001066a:	8b 17                	mov    edx,DWORD PTR [edi]
c001066c:	83 ec 0c             	sub    esp,0xc
c001066f:	57                   	push   edi
c0010670:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001067a:	85 c0                	test   eax,eax
c001067c:	0f 95 c0             	setne  al
c001067f:	31 d2                	xor    edx,edx
c0010681:	25 ff 00 00 00       	and    eax,0xff
c0010686:	f7 d8                	neg    eax
c0010688:	83 d2 00             	adc    edx,0x0
c001068b:	83 c4 20             	add    esp,0x20
c001068e:	f7 da                	neg    edx
c0010690:	5b                   	pop    ebx
c0010691:	5e                   	pop    esi
c0010692:	5f                   	pop    edi
c0010693:	c3                   	ret    
c0010694:	83 c4 20             	add    esp,0x20
c0010697:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001069c:	5b                   	pop    ebx
c001069d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106a2:	5e                   	pop    esi
c00106a3:	5f                   	pop    edi
c00106a4:	c3                   	ret    

c00106a5 <sysCallClose(regs*)>:
c00106a5:	53                   	push   ebx
c00106a6:	83 ec 08             	sub    esp,0x8
c00106a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00106b0:	83 f8 02             	cmp    eax,0x2
c00106b3:	76 41                	jbe    c00106f6 <sysCallClose(regs*)+0x51>
c00106b5:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00106bb:	83 fa 01             	cmp    edx,0x1
c00106be:	76 2d                	jbe    c00106ed <sysCallClose(regs*)+0x48>
c00106c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00106c5:	77 2f                	ja     c00106f6 <sysCallClose(regs*)+0x51>
c00106c7:	83 ec 0c             	sub    esp,0xc
c00106ca:	50                   	push   eax
c00106cb:	e8 2b 7f ff ff       	call   c00085fb <getFromFileDescriptor(int)>
c00106d0:	89 c3                	mov    ebx,eax
c00106d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00106d5:	e8 92 99 ff ff       	call   c000a06c <File::close()>
c00106da:	83 c4 10             	add    esp,0x10
c00106dd:	85 db                	test   ebx,ebx
c00106df:	74 0c                	je     c00106ed <sysCallClose(regs*)+0x48>
c00106e1:	83 ec 0c             	sub    esp,0xc
c00106e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106e6:	53                   	push   ebx
c00106e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106ea:	83 c4 10             	add    esp,0x10
c00106ed:	31 c0                	xor    eax,eax
c00106ef:	31 d2                	xor    edx,edx
c00106f1:	83 c4 08             	add    esp,0x8
c00106f4:	5b                   	pop    ebx
c00106f5:	c3                   	ret    
c00106f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010700:	83 c4 08             	add    esp,0x8
c0010703:	5b                   	pop    ebx
c0010704:	c3                   	ret    

c0010705 <sysCallOpenDir(regs*)>:
c0010705:	56                   	push   esi
c0010706:	53                   	push   ebx
c0010707:	50                   	push   eax
c0010708:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001070c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001070f:	85 c0                	test   eax,eax
c0010711:	74 5b                	je     c001076e <sysCallOpenDir(regs*)+0x69>
c0010713:	83 ec 0c             	sub    esp,0xc
c0010716:	68 14 01 00 00       	push   0x114
c001071b:	e8 f5 64 ff ff       	call   c0006c15 <malloc>
c0010720:	83 c4 0c             	add    esp,0xc
c0010723:	89 c6                	mov    esi,eax
c0010725:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001072a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001072d:	50                   	push   eax
c001072e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010731:	50                   	push   eax
c0010732:	56                   	push   esi
c0010733:	e8 40 9d ff ff       	call   c000a478 <Directory::Directory(char const*, Process*)>
c0010738:	83 c4 10             	add    esp,0x10
c001073b:	85 f6                	test   esi,esi
c001073d:	74 2f                	je     c001076e <sysCallOpenDir(regs*)+0x69>
c001073f:	83 ec 0c             	sub    esp,0xc
c0010742:	56                   	push   esi
c0010743:	e8 f0 9d ff ff       	call   c000a538 <Directory::open()>
c0010748:	83 c4 10             	add    esp,0x10
c001074b:	85 c0                	test   eax,eax
c001074d:	75 1f                	jne    c001076e <sysCallOpenDir(regs*)+0x69>
c001074f:	83 ec 0c             	sub    esp,0xc
c0010752:	56                   	push   esi
c0010753:	e8 ae 7b ff ff       	call   c0008306 <UnixFile::getFileDescriptor()>
c0010758:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001075b:	83 c4 10             	add    esp,0x10
c001075e:	89 02                	mov    DWORD PTR [edx],eax
c0010760:	c1 f8 1f             	sar    eax,0x1f
c0010763:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010766:	31 c0                	xor    eax,eax
c0010768:	59                   	pop    ecx
c0010769:	31 d2                	xor    edx,edx
c001076b:	5b                   	pop    ebx
c001076c:	5e                   	pop    esi
c001076d:	c3                   	ret    
c001076e:	59                   	pop    ecx
c001076f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010774:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010779:	5b                   	pop    ebx
c001077a:	5e                   	pop    esi
c001077b:	c3                   	ret    

c001077c <sysCallCloseDir(regs*)>:
c001077c:	53                   	push   ebx
c001077d:	83 ec 08             	sub    esp,0x8
c0010780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010784:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010787:	8d 50 fd             	lea    edx,[eax-0x3]
c001078a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010790:	77 2f                	ja     c00107c1 <sysCallCloseDir(regs*)+0x45>
c0010792:	83 ec 0c             	sub    esp,0xc
c0010795:	50                   	push   eax
c0010796:	e8 60 7e ff ff       	call   c00085fb <getFromFileDescriptor(int)>
c001079b:	89 c3                	mov    ebx,eax
c001079d:	89 04 24             	mov    DWORD PTR [esp],eax
c00107a0:	e8 ef 9d ff ff       	call   c000a594 <Directory::close()>
c00107a5:	83 c4 10             	add    esp,0x10
c00107a8:	85 db                	test   ebx,ebx
c00107aa:	74 0c                	je     c00107b8 <sysCallCloseDir(regs*)+0x3c>
c00107ac:	83 ec 0c             	sub    esp,0xc
c00107af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107b1:	53                   	push   ebx
c00107b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107b5:	83 c4 10             	add    esp,0x10
c00107b8:	31 c0                	xor    eax,eax
c00107ba:	31 d2                	xor    edx,edx
c00107bc:	83 c4 08             	add    esp,0x8
c00107bf:	5b                   	pop    ebx
c00107c0:	c3                   	ret    
c00107c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107cb:	83 c4 08             	add    esp,0x8
c00107ce:	5b                   	pop    ebx
c00107cf:	c3                   	ret    

c00107d0 <sysCallMakeDir(regs*)>:
c00107d0:	56                   	push   esi
c00107d1:	53                   	push   ebx
c00107d2:	83 ec 10             	sub    esp,0x10
c00107d5:	68 14 01 00 00       	push   0x114
c00107da:	e8 36 64 ff ff       	call   c0006c15 <malloc>
c00107df:	83 c4 0c             	add    esp,0xc
c00107e2:	89 c3                	mov    ebx,eax
c00107e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107e9:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00107ec:	56                   	push   esi
c00107ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00107f1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00107f4:	50                   	push   eax
c00107f5:	53                   	push   ebx
c00107f6:	e8 7d 9c ff ff       	call   c000a478 <Directory::Directory(char const*, Process*)>
c00107fb:	83 c4 10             	add    esp,0x10
c00107fe:	85 db                	test   ebx,ebx
c0010800:	74 32                	je     c0010834 <sysCallMakeDir(regs*)+0x64>
c0010802:	83 ec 0c             	sub    esp,0xc
c0010805:	53                   	push   ebx
c0010806:	e8 0d 9f ff ff       	call   c000a718 <Directory::create()>
c001080b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001080e:	89 c6                	mov    esi,eax
c0010810:	e8 7f 9d ff ff       	call   c000a594 <Directory::close()>
c0010815:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001081a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001081d:	83 c4 10             	add    esp,0x10
c0010820:	31 c0                	xor    eax,eax
c0010822:	59                   	pop    ecx
c0010823:	85 f6                	test   esi,esi
c0010825:	5b                   	pop    ebx
c0010826:	0f 95 c0             	setne  al
c0010829:	5e                   	pop    esi
c001082a:	31 d2                	xor    edx,edx
c001082c:	f7 d8                	neg    eax
c001082e:	83 d2 00             	adc    edx,0x0
c0010831:	f7 da                	neg    edx
c0010833:	c3                   	ret    
c0010834:	59                   	pop    ecx
c0010835:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001083a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001083f:	5b                   	pop    ebx
c0010840:	5e                   	pop    esi
c0010841:	c3                   	ret    

c0010842 <sysCallWait(regs*)>:
c0010842:	83 ec 10             	sub    esp,0x10
c0010845:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010849:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001084c:	52                   	push   edx
c001084d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010850:	51                   	push   ecx
c0010851:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010854:	50                   	push   eax
c0010855:	e8 6e 23 00 00       	call   c0012bc8 <waitTask(int, int*, int)>
c001085a:	83 c4 1c             	add    esp,0x1c
c001085d:	99                   	cdq    
c001085e:	c3                   	ret    

c001085f <sysCallNotImpl(regs*)>:
c001085f:	83 ec 18             	sub    esp,0x18
c0010862:	68 da de 01 c0       	push   0xc001deda
c0010867:	e8 bb ec ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001086c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010871:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010876:	83 c4 1c             	add    esp,0x1c
c0010879:	c3                   	ret    

c001087a <sysPanic(regs*)>:
c001087a:	83 ec 18             	sub    esp,0x18
c001087d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010881:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010884:	50                   	push   eax
c0010885:	e8 9d ec ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001088a:	b8 01 00 00 00       	mov    eax,0x1
c001088f:	31 d2                	xor    edx,edx
c0010891:	83 c4 1c             	add    esp,0x1c
c0010894:	c3                   	ret    

c0010895 <sysCallRmdir(regs*)>:
c0010895:	56                   	push   esi
c0010896:	53                   	push   ebx
c0010897:	83 ec 20             	sub    esp,0x20
c001089a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001089e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00108a1:	68 14 01 00 00       	push   0x114
c00108a6:	e8 6a 63 ff ff       	call   c0006c15 <malloc>
c00108ab:	83 c4 0c             	add    esp,0xc
c00108ae:	89 c3                	mov    ebx,eax
c00108b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108b8:	50                   	push   eax
c00108b9:	56                   	push   esi
c00108ba:	53                   	push   ebx
c00108bb:	e8 8e 96 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c00108c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108c3:	e8 be 98 ff ff       	call   c000a186 <File::unlink()>
c00108c8:	83 c4 10             	add    esp,0x10
c00108cb:	85 db                	test   ebx,ebx
c00108cd:	74 14                	je     c00108e3 <sysCallRmdir(regs*)+0x4e>
c00108cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108d5:	83 ec 0c             	sub    esp,0xc
c00108d8:	53                   	push   ebx
c00108d9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108dc:	83 c4 10             	add    esp,0x10
c00108df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108e3:	85 c0                	test   eax,eax
c00108e5:	0f 95 c0             	setne  al
c00108e8:	31 d2                	xor    edx,edx
c00108ea:	25 ff 00 00 00       	and    eax,0xff
c00108ef:	f7 d8                	neg    eax
c00108f1:	83 d2 00             	adc    edx,0x0
c00108f4:	83 c4 14             	add    esp,0x14
c00108f7:	f7 da                	neg    edx
c00108f9:	5b                   	pop    ebx
c00108fa:	5e                   	pop    esi
c00108fb:	c3                   	ret    

c00108fc <sysCallUnlink(regs*)>:
c00108fc:	56                   	push   esi
c00108fd:	53                   	push   ebx
c00108fe:	83 ec 20             	sub    esp,0x20
c0010901:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010905:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010908:	68 14 01 00 00       	push   0x114
c001090d:	e8 03 63 ff ff       	call   c0006c15 <malloc>
c0010912:	83 c4 0c             	add    esp,0xc
c0010915:	89 c3                	mov    ebx,eax
c0010917:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001091c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001091f:	50                   	push   eax
c0010920:	56                   	push   esi
c0010921:	53                   	push   ebx
c0010922:	e8 27 96 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c0010927:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001092a:	e8 57 98 ff ff       	call   c000a186 <File::unlink()>
c001092f:	83 c4 10             	add    esp,0x10
c0010932:	85 db                	test   ebx,ebx
c0010934:	74 14                	je     c001094a <sysCallUnlink(regs*)+0x4e>
c0010936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001093a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001093c:	83 ec 0c             	sub    esp,0xc
c001093f:	53                   	push   ebx
c0010940:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010943:	83 c4 10             	add    esp,0x10
c0010946:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001094a:	85 c0                	test   eax,eax
c001094c:	0f 95 c0             	setne  al
c001094f:	31 d2                	xor    edx,edx
c0010951:	25 ff 00 00 00       	and    eax,0xff
c0010956:	f7 d8                	neg    eax
c0010958:	83 d2 00             	adc    edx,0x0
c001095b:	83 c4 14             	add    esp,0x14
c001095e:	f7 da                	neg    edx
c0010960:	5b                   	pop    ebx
c0010961:	5e                   	pop    esi
c0010962:	c3                   	ret    

c0010963 <sysCallGetArgv(regs*)>:
c0010963:	83 ec 0c             	sub    esp,0xc
c0010966:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001096a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001096d:	85 c0                	test   eax,eax
c001096f:	78 2c                	js     c001099d <sysCallGetArgv(regs*)+0x3a>
c0010971:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010977:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001097a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010980:	7d 1b                	jge    c001099d <sysCallGetArgv(regs*)+0x3a>
c0010982:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010989:	85 c0                	test   eax,eax
c001098b:	74 18                	je     c00109a5 <sysCallGetArgv(regs*)+0x42>
c001098d:	83 ec 08             	sub    esp,0x8
c0010990:	50                   	push   eax
c0010991:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010994:	50                   	push   eax
c0010995:	e8 86 fc fe ff       	call   c0000620 <strcpy>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	31 c0                	xor    eax,eax
c001099f:	31 d2                	xor    edx,edx
c00109a1:	83 c4 0c             	add    esp,0xc
c00109a4:	c3                   	ret    
c00109a5:	b8 01 00 00 00       	mov    eax,0x1
c00109aa:	31 d2                	xor    edx,edx
c00109ac:	83 c4 0c             	add    esp,0xc
c00109af:	c3                   	ret    

c00109b0 <sysCallUSleep(regs*)>:
c00109b0:	83 ec 1c             	sub    esp,0x1c
c00109b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00109b7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00109ba:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00109bd:	6a 00                	push   0x0
c00109bf:	6a 64                	push   0x64
c00109c1:	52                   	push   edx
c00109c2:	50                   	push   eax
c00109c3:	e8 28 ad 00 00       	call   c001b6f0 <__udivdi3>
c00109c8:	83 c4 14             	add    esp,0x14
c00109cb:	50                   	push   eax
c00109cc:	e8 cb 22 00 00       	call   c0012c9c <milliTenthSleep(unsigned int)>
c00109d1:	31 c0                	xor    eax,eax
c00109d3:	31 d2                	xor    edx,edx
c00109d5:	83 c4 1c             	add    esp,0x1c
c00109d8:	c3                   	ret    

c00109d9 <sysCallSpawn(regs*)>:
c00109d9:	56                   	push   esi
c00109da:	53                   	push   ebx
c00109db:	50                   	push   eax
c00109dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00109e3:	85 c0                	test   eax,eax
c00109e5:	75 08                	jne    c00109ef <sysCallSpawn(regs*)+0x16>
c00109e7:	59                   	pop    ecx
c00109e8:	31 c0                	xor    eax,eax
c00109ea:	31 d2                	xor    edx,edx
c00109ec:	5b                   	pop    ebx
c00109ed:	5e                   	pop    esi
c00109ee:	c3                   	ret    
c00109ef:	83 ec 0c             	sub    esp,0xc
c00109f2:	68 1f 07 00 00       	push   0x71f
c00109f7:	e8 19 62 ff ff       	call   c0006c15 <malloc>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	89 c6                	mov    esi,eax
c0010a01:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010a04:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a07:	85 c0                	test   eax,eax
c0010a09:	75 33                	jne    c0010a3e <sysCallSpawn(regs*)+0x65>
c0010a0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a13:	52                   	push   edx
c0010a14:	50                   	push   eax
c0010a15:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010a18:	53                   	push   ebx
c0010a19:	56                   	push   esi
c0010a1a:	e8 61 19 00 00       	call   c0012380 <Process::Process(char const*, Process*, char**)>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010a29:	75 bc                	jne    c00109e7 <sysCallSpawn(regs*)+0xe>
c0010a2b:	83 ec 0c             	sub    esp,0xc
c0010a2e:	56                   	push   esi
c0010a2f:	e8 40 1e 00 00       	call   c0012874 <Process::createUserThread()>
c0010a34:	8b 06                	mov    eax,DWORD PTR [esi]
c0010a36:	83 c4 10             	add    esp,0x10
c0010a39:	99                   	cdq    
c0010a3a:	59                   	pop    ecx
c0010a3b:	5b                   	pop    ebx
c0010a3c:	5e                   	pop    esi
c0010a3d:	c3                   	ret    
c0010a3e:	31 c0                	xor    eax,eax
c0010a40:	eb d1                	jmp    c0010a13 <sysCallSpawn(regs*)+0x3a>

c0010a42 <sysCallGetEnv(regs*)>:
c0010a42:	57                   	push   edi
c0010a43:	56                   	push   esi
c0010a44:	53                   	push   ebx
c0010a45:	83 ec 1c             	sub    esp,0x1c
c0010a48:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a51:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010a54:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010a57:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a5a:	50                   	push   eax
c0010a5b:	e8 13 ea ff ff       	call   c000f473 <Krnl::getProcessTotalEnvCount(Process*)>
c0010a60:	83 c4 10             	add    esp,0x10
c0010a63:	39 c7                	cmp    edi,eax
c0010a65:	7c 14                	jl     c0010a7b <sysCallGetEnv(regs*)+0x39>
c0010a67:	85 f6                	test   esi,esi
c0010a69:	75 0b                	jne    c0010a76 <sysCallGetEnv(regs*)+0x34>
c0010a6b:	83 c4 10             	add    esp,0x10
c0010a6e:	31 c0                	xor    eax,eax
c0010a70:	5b                   	pop    ebx
c0010a71:	31 d2                	xor    edx,edx
c0010a73:	5e                   	pop    esi
c0010a74:	5f                   	pop    edi
c0010a75:	c3                   	ret    
c0010a76:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a79:	eb f0                	jmp    c0010a6b <sysCallGetEnv(regs*)+0x29>
c0010a7b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010a7f:	52                   	push   edx
c0010a80:	57                   	push   edi
c0010a81:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a87:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010a8a:	51                   	push   ecx
c0010a8b:	50                   	push   eax
c0010a8c:	e8 02 ea ff ff       	call   c000f493 <Krnl::getProcessEnvPair(Process*, int)>
c0010a91:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010a94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a98:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010a9c:	83 c4 0c             	add    esp,0xc
c0010a9f:	85 db                	test   ebx,ebx
c0010aa1:	75 23                	jne    c0010ac6 <sysCallGetEnv(regs*)+0x84>
c0010aa3:	83 ec 0c             	sub    esp,0xc
c0010aa6:	50                   	push   eax
c0010aa7:	e8 b4 fa fe ff       	call   c0000560 <strlen>
c0010aac:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010aaf:	89 c3                	mov    ebx,eax
c0010ab1:	e8 aa fa fe ff       	call   c0000560 <strlen>
c0010ab6:	31 d2                	xor    edx,edx
c0010ab8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010abc:	83 c4 10             	add    esp,0x10
c0010abf:	83 c4 10             	add    esp,0x10
c0010ac2:	5b                   	pop    ebx
c0010ac3:	5e                   	pop    esi
c0010ac4:	5f                   	pop    edi
c0010ac5:	c3                   	ret    
c0010ac6:	83 ec 08             	sub    esp,0x8
c0010ac9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010acc:	50                   	push   eax
c0010acd:	56                   	push   esi
c0010ace:	e8 4d fb fe ff       	call   c0000620 <strcpy>
c0010ad3:	58                   	pop    eax
c0010ad4:	5a                   	pop    edx
c0010ad5:	68 f4 de 01 c0       	push   0xc001def4
c0010ada:	56                   	push   esi
c0010adb:	e8 00 fd fe ff       	call   c00007e0 <strcat>
c0010ae0:	59                   	pop    ecx
c0010ae1:	5b                   	pop    ebx
c0010ae2:	57                   	push   edi
c0010ae3:	56                   	push   esi
c0010ae4:	e8 f7 fc fe ff       	call   c00007e0 <strcat>
c0010ae9:	83 c4 10             	add    esp,0x10
c0010aec:	e9 7a ff ff ff       	jmp    c0010a6b <sysCallGetEnv(regs*)+0x29>

c0010af1 <sysSetFatAttrib(regs*)>:
c0010af1:	57                   	push   edi
c0010af2:	56                   	push   esi
c0010af3:	53                   	push   ebx
c0010af4:	83 ec 1c             	sub    esp,0x1c
c0010af7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010afb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010afe:	68 14 01 00 00       	push   0x114
c0010b03:	e8 0d 61 ff ff       	call   c0006c15 <malloc>
c0010b08:	83 c4 0c             	add    esp,0xc
c0010b0b:	89 c3                	mov    ebx,eax
c0010b0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b15:	50                   	push   eax
c0010b16:	57                   	push   edi
c0010b17:	53                   	push   ebx
c0010b18:	e8 31 94 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c0010b1d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b20:	83 c4 0c             	add    esp,0xc
c0010b23:	0f b6 d4             	movzx  edx,ah
c0010b26:	25 ff 00 00 00       	and    eax,0xff
c0010b2b:	52                   	push   edx
c0010b2c:	50                   	push   eax
c0010b2d:	53                   	push   ebx
c0010b2e:	e8 ed 96 ff ff       	call   c000a220 <File::chfatattr(unsigned char, unsigned char)>
c0010b33:	83 c4 10             	add    esp,0x10
c0010b36:	85 db                	test   ebx,ebx
c0010b38:	74 14                	je     c0010b4e <sysSetFatAttrib(regs*)+0x5d>
c0010b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b3e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b40:	83 ec 0c             	sub    esp,0xc
c0010b43:	53                   	push   ebx
c0010b44:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b47:	83 c4 10             	add    esp,0x10
c0010b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b4e:	85 c0                	test   eax,eax
c0010b50:	0f 95 c0             	setne  al
c0010b53:	31 d2                	xor    edx,edx
c0010b55:	25 ff 00 00 00       	and    eax,0xff
c0010b5a:	f7 d8                	neg    eax
c0010b5c:	83 d2 00             	adc    edx,0x0
c0010b5f:	83 c4 10             	add    esp,0x10
c0010b62:	f7 da                	neg    edx
c0010b64:	5b                   	pop    ebx
c0010b65:	5e                   	pop    esi
c0010b66:	5f                   	pop    edi
c0010b67:	c3                   	ret    

c0010b68 <sysPipe(regs*)>:
c0010b68:	57                   	push   edi
c0010b69:	56                   	push   esi
c0010b6a:	53                   	push   ebx
c0010b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6f:	83 ec 0c             	sub    esp,0xc
c0010b72:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010b75:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010b78:	6a 20                	push   0x20
c0010b7a:	e8 96 60 ff ff       	call   c0006c15 <malloc>
c0010b7f:	89 c3                	mov    ebx,eax
c0010b81:	58                   	pop    eax
c0010b82:	5a                   	pop    edx
c0010b83:	68 00 50 00 00       	push   0x5000
c0010b88:	53                   	push   ebx
c0010b89:	e8 7e 6a ff ff       	call   c000760c <Pipe::Pipe(int)>
c0010b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b91:	e8 70 77 ff ff       	call   c0008306 <UnixFile::getFileDescriptor()>
c0010b96:	89 07                	mov    DWORD PTR [edi],eax
c0010b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b9b:	e8 66 77 ff ff       	call   c0008306 <UnixFile::getFileDescriptor()>
c0010ba0:	83 c4 10             	add    esp,0x10
c0010ba3:	89 06                	mov    DWORD PTR [esi],eax
c0010ba5:	31 d2                	xor    edx,edx
c0010ba7:	5b                   	pop    ebx
c0010ba8:	31 c0                	xor    eax,eax
c0010baa:	5e                   	pop    esi
c0010bab:	5f                   	pop    edi
c0010bac:	c3                   	ret    

c0010bad <sysGetUnixTime(regs*)>:
c0010bad:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0010bb2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010bb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010bbc:	e9 9d 9d ff ff       	jmp    c000a95e <Clock::timeInSecondsLocal()>

c0010bc1 <string_ends_with(char const*, char const*)>:
c0010bc1:	57                   	push   edi
c0010bc2:	56                   	push   esi
c0010bc3:	53                   	push   ebx
c0010bc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010bcc:	83 ec 0c             	sub    esp,0xc
c0010bcf:	53                   	push   ebx
c0010bd0:	e8 8b f9 fe ff       	call   c0000560 <strlen>
c0010bd5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010bd8:	89 c6                	mov    esi,eax
c0010bda:	e8 81 f9 fe ff       	call   c0000560 <strlen>
c0010bdf:	83 c4 10             	add    esp,0x10
c0010be2:	39 c6                	cmp    esi,eax
c0010be4:	7d 06                	jge    c0010bec <string_ends_with(char const*, char const*)+0x2b>
c0010be6:	5b                   	pop    ebx
c0010be7:	31 c0                	xor    eax,eax
c0010be9:	5e                   	pop    esi
c0010bea:	5f                   	pop    edi
c0010beb:	c3                   	ret    
c0010bec:	83 ec 08             	sub    esp,0x8
c0010bef:	29 c6                	sub    esi,eax
c0010bf1:	57                   	push   edi
c0010bf2:	01 f3                	add    ebx,esi
c0010bf4:	53                   	push   ebx
c0010bf5:	e8 06 fb fe ff       	call   c0000700 <strcmp>
c0010bfa:	83 c4 10             	add    esp,0x10
c0010bfd:	85 c0                	test   eax,eax
c0010bff:	5b                   	pop    ebx
c0010c00:	0f 94 c0             	sete   al
c0010c03:	5e                   	pop    esi
c0010c04:	25 ff 00 00 00       	and    eax,0xff
c0010c09:	5f                   	pop    edi
c0010c0a:	c3                   	ret    

c0010c0b <sysCallOpen(regs*)>:
c0010c0b:	56                   	push   esi
c0010c0c:	53                   	push   ebx
c0010c0d:	81 ec 04 01 00 00    	sub    esp,0x104
c0010c13:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010c1a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010c1d:	85 c9                	test   ecx,ecx
c0010c1f:	0f 84 b9 01 00 00    	je     c0010dde <sysCallOpen(regs*)+0x1d3>
c0010c25:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c28:	85 c0                	test   eax,eax
c0010c2a:	0f 84 ae 01 00 00    	je     c0010dde <sysCallOpen(regs*)+0x1d3>
c0010c30:	52                   	push   edx
c0010c31:	68 f6 de 01 c0       	push   0xc001def6
c0010c36:	50                   	push   eax
c0010c37:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010c3b:	56                   	push   esi
c0010c3c:	e8 63 91 ff ff       	call   c0009da4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010c41:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c44:	e8 17 f9 fe ff       	call   c0000560 <strlen>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	48                   	dec    eax
c0010c4d:	74 1d                	je     c0010c6c <sysCallOpen(regs*)+0x61>
c0010c4f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010c52:	eb 0f                	jmp    c0010c63 <sysCallOpen(regs*)+0x58>
c0010c54:	80 fa 3a             	cmp    dl,0x3a
c0010c57:	74 0f                	je     c0010c68 <sysCallOpen(regs*)+0x5d>
c0010c59:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010c5d:	48                   	dec    eax
c0010c5e:	74 0c                	je     c0010c6c <sysCallOpen(regs*)+0x61>
c0010c60:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010c63:	80 fa 2e             	cmp    dl,0x2e
c0010c66:	75 ec                	jne    c0010c54 <sysCallOpen(regs*)+0x49>
c0010c68:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010c6c:	83 ec 08             	sub    esp,0x8
c0010c6f:	68 fa de 01 c0       	push   0xc001defa
c0010c74:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c77:	50                   	push   eax
c0010c78:	e8 44 ff ff ff       	call   c0010bc1 <string_ends_with(char const*, char const*)>
c0010c7d:	83 c4 10             	add    esp,0x10
c0010c80:	85 c0                	test   eax,eax
c0010c82:	74 1d                	je     c0010ca1 <sysCallOpen(regs*)+0x96>
c0010c84:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c87:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010c8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c94:	81 c4 04 01 00 00    	add    esp,0x104
c0010c9a:	31 c0                	xor    eax,eax
c0010c9c:	31 d2                	xor    edx,edx
c0010c9e:	5b                   	pop    ebx
c0010c9f:	5e                   	pop    esi
c0010ca0:	c3                   	ret    
c0010ca1:	83 ec 08             	sub    esp,0x8
c0010ca4:	68 ff de 01 c0       	push   0xc001deff
c0010ca9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cac:	50                   	push   eax
c0010cad:	e8 0f ff ff ff       	call   c0010bc1 <string_ends_with(char const*, char const*)>
c0010cb2:	83 c4 10             	add    esp,0x10
c0010cb5:	85 c0                	test   eax,eax
c0010cb7:	75 cb                	jne    c0010c84 <sysCallOpen(regs*)+0x79>
c0010cb9:	83 ec 08             	sub    esp,0x8
c0010cbc:	68 fb de 01 c0       	push   0xc001defb
c0010cc1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cc4:	50                   	push   eax
c0010cc5:	e8 36 fa fe ff       	call   c0000700 <strcmp>
c0010cca:	83 c4 10             	add    esp,0x10
c0010ccd:	85 c0                	test   eax,eax
c0010ccf:	74 b3                	je     c0010c84 <sysCallOpen(regs*)+0x79>
c0010cd1:	83 ec 08             	sub    esp,0x8
c0010cd4:	68 fa de 01 c0       	push   0xc001defa
c0010cd9:	56                   	push   esi
c0010cda:	e8 e2 fe ff ff       	call   c0010bc1 <string_ends_with(char const*, char const*)>
c0010cdf:	83 c4 10             	add    esp,0x10
c0010ce2:	85 c0                	test   eax,eax
c0010ce4:	75 9e                	jne    c0010c84 <sysCallOpen(regs*)+0x79>
c0010ce6:	83 ec 08             	sub    esp,0x8
c0010ce9:	68 04 df 01 c0       	push   0xc001df04
c0010cee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cf1:	50                   	push   eax
c0010cf2:	e8 ca fe ff ff       	call   c0010bc1 <string_ends_with(char const*, char const*)>
c0010cf7:	83 c4 10             	add    esp,0x10
c0010cfa:	85 c0                	test   eax,eax
c0010cfc:	0f 85 ef 00 00 00    	jne    c0010df1 <sysCallOpen(regs*)+0x1e6>
c0010d02:	83 ec 08             	sub    esp,0x8
c0010d05:	68 09 df 01 c0       	push   0xc001df09
c0010d0a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d0d:	50                   	push   eax
c0010d0e:	e8 ae fe ff ff       	call   c0010bc1 <string_ends_with(char const*, char const*)>
c0010d13:	83 c4 10             	add    esp,0x10
c0010d16:	85 c0                	test   eax,eax
c0010d18:	0f 85 d3 00 00 00    	jne    c0010df1 <sysCallOpen(regs*)+0x1e6>
c0010d1e:	83 ec 08             	sub    esp,0x8
c0010d21:	68 05 df 01 c0       	push   0xc001df05
c0010d26:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d29:	51                   	push   ecx
c0010d2a:	e8 d1 f9 fe ff       	call   c0000700 <strcmp>
c0010d2f:	83 c4 10             	add    esp,0x10
c0010d32:	85 c0                	test   eax,eax
c0010d34:	0f 84 b7 00 00 00    	je     c0010df1 <sysCallOpen(regs*)+0x1e6>
c0010d3a:	83 ec 08             	sub    esp,0x8
c0010d3d:	68 04 df 01 c0       	push   0xc001df04
c0010d42:	56                   	push   esi
c0010d43:	e8 79 fe ff ff       	call   c0010bc1 <string_ends_with(char const*, char const*)>
c0010d48:	83 c4 10             	add    esp,0x10
c0010d4b:	85 c0                	test   eax,eax
c0010d4d:	0f 85 9e 00 00 00    	jne    c0010df1 <sysCallOpen(regs*)+0x1e6>
c0010d53:	83 ec 0c             	sub    esp,0xc
c0010d56:	68 14 01 00 00       	push   0x114
c0010d5b:	e8 b5 5e ff ff       	call   c0006c15 <malloc>
c0010d60:	83 c4 0c             	add    esp,0xc
c0010d63:	89 c6                	mov    esi,eax
c0010d65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d6d:	50                   	push   eax
c0010d6e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010d71:	52                   	push   edx
c0010d72:	56                   	push   esi
c0010d73:	e8 d6 91 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c0010d78:	83 c4 10             	add    esp,0x10
c0010d7b:	85 f6                	test   esi,esi
c0010d7d:	74 5f                	je     c0010dde <sysCallOpen(regs*)+0x1d3>
c0010d7f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d82:	89 d0                	mov    eax,edx
c0010d84:	25 ff 00 00 00       	and    eax,0xff
c0010d89:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010d8c:	89 d0                	mov    eax,edx
c0010d8e:	83 e0 01             	and    eax,0x1
c0010d91:	f6 c2 02             	test   dl,0x2
c0010d94:	74 03                	je     c0010d99 <sysCallOpen(regs*)+0x18e>
c0010d96:	83 c8 02             	or     eax,0x2
c0010d99:	f6 c2 04             	test   dl,0x4
c0010d9c:	74 03                	je     c0010da1 <sysCallOpen(regs*)+0x196>
c0010d9e:	83 c8 04             	or     eax,0x4
c0010da1:	f6 c2 08             	test   dl,0x8
c0010da4:	74 03                	je     c0010da9 <sysCallOpen(regs*)+0x19e>
c0010da6:	83 c8 0a             	or     eax,0xa
c0010da9:	83 e2 10             	and    edx,0x10
c0010dac:	74 03                	je     c0010db1 <sysCallOpen(regs*)+0x1a6>
c0010dae:	83 c8 12             	or     eax,0x12
c0010db1:	83 ec 08             	sub    esp,0x8
c0010db4:	50                   	push   eax
c0010db5:	56                   	push   esi
c0010db6:	e8 53 92 ff ff       	call   c000a00e <File::open(FileOpenMode)>
c0010dbb:	83 c4 10             	add    esp,0x10
c0010dbe:	85 c0                	test   eax,eax
c0010dc0:	75 1c                	jne    c0010dde <sysCallOpen(regs*)+0x1d3>
c0010dc2:	83 ec 0c             	sub    esp,0xc
c0010dc5:	56                   	push   esi
c0010dc6:	e8 3b 75 ff ff       	call   c0008306 <UnixFile::getFileDescriptor()>
c0010dcb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010dce:	83 c4 10             	add    esp,0x10
c0010dd1:	89 02                	mov    DWORD PTR [edx],eax
c0010dd3:	c1 f8 1f             	sar    eax,0x1f
c0010dd6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010dd9:	e9 b6 fe ff ff       	jmp    c0010c94 <sysCallOpen(regs*)+0x89>
c0010dde:	81 c4 04 01 00 00    	add    esp,0x104
c0010de4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010de9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dee:	5b                   	pop    ebx
c0010def:	5e                   	pop    esi
c0010df0:	c3                   	ret    
c0010df1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010df4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010dfa:	e9 8e fe ff ff       	jmp    c0010c8d <sysCallOpen(regs*)+0x82>

c0010dff <Sys::loadSyscalls()>:
c0010dff:	c7 05 a0 1f 02 c0 db 01 01 c0 	mov    DWORD PTR ds:0xc0021fa0,0xc00101db
c0010e09:	c7 05 a4 1f 02 c0 d2 fd 00 c0 	mov    DWORD PTR ds:0xc0021fa4,0xc000fdd2
c0010e13:	c7 05 a8 1f 02 c0 c1 ff 00 c0 	mov    DWORD PTR ds:0xc0021fa8,0xc000ffc1
c0010e1d:	c7 05 ac 1f 02 c0 11 01 01 c0 	mov    DWORD PTR ds:0xc0021fac,0xc0010111
c0010e27:	c7 05 b0 1f 02 c0 59 ff 00 c0 	mov    DWORD PTR ds:0xc0021fb0,0xc000ff59
c0010e31:	c7 05 b4 1f 02 c0 09 fe 00 c0 	mov    DWORD PTR ds:0xc0021fb4,0xc000fe09
c0010e3b:	c7 05 b8 1f 02 c0 ea fd 00 c0 	mov    DWORD PTR ds:0xc0021fb8,0xc000fdea
c0010e45:	c7 05 bc 1f 02 c0 16 00 01 c0 	mov    DWORD PTR ds:0xc0021fbc,0xc0010016
c0010e4f:	c7 05 c4 1f 02 c0 a5 06 01 c0 	mov    DWORD PTR ds:0xc0021fc4,0xc00106a5
c0010e59:	c7 05 c0 1f 02 c0 0b 0c 01 c0 	mov    DWORD PTR ds:0xc0021fc0,0xc0010c0b
c0010e63:	c7 05 c8 1f 02 c0 05 07 01 c0 	mov    DWORD PTR ds:0xc0021fc8,0xc0010705
c0010e6d:	c7 05 cc 1f 02 c0 d9 03 01 c0 	mov    DWORD PTR ds:0xc0021fcc,0xc00103d9
c0010e77:	c7 05 d0 1f 02 c0 00 02 01 c0 	mov    DWORD PTR ds:0xc0021fd0,0xc0010200
c0010e81:	c7 05 d4 1f 02 c0 05 02 01 c0 	mov    DWORD PTR ds:0xc0021fd4,0xc0010205
c0010e8b:	c7 05 d8 1f 02 c0 d0 07 01 c0 	mov    DWORD PTR ds:0xc0021fd8,0xc00107d0
c0010e95:	c7 05 dc 1f 02 c0 7c 07 01 c0 	mov    DWORD PTR ds:0xc0021fdc,0xc001077c
c0010e9f:	c7 05 e0 1f 02 c0 b5 04 01 c0 	mov    DWORD PTR ds:0xc0021fe0,0xc00104b5
c0010ea9:	c7 05 e4 1f 02 c0 0e 05 01 c0 	mov    DWORD PTR ds:0xc0021fe4,0xc001050e
c0010eb3:	c7 05 e8 1f 02 c0 7d 05 01 c0 	mov    DWORD PTR ds:0xc0021fe8,0xc001057d
c0010ebd:	c7 05 ec 1f 02 c0 0a 02 01 c0 	mov    DWORD PTR ds:0xc0021fec,0xc001020a
c0010ec7:	c7 05 f0 1f 02 c0 42 08 01 c0 	mov    DWORD PTR ds:0xc0021ff0,0xc0010842
c0010ed1:	c7 05 f4 1f 02 c0 5f 08 01 c0 	mov    DWORD PTR ds:0xc0021ff4,0xc001085f
c0010edb:	c7 05 f8 1f 02 c0 5f 08 01 c0 	mov    DWORD PTR ds:0xc0021ff8,0xc001085f
c0010ee5:	c7 05 fc 1f 02 c0 95 08 01 c0 	mov    DWORD PTR ds:0xc0021ffc,0xc0010895
c0010eef:	c7 05 00 20 02 c0 fc 08 01 c0 	mov    DWORD PTR ds:0xc0022000,0xc00108fc
c0010ef9:	c7 05 04 20 02 c0 14 02 01 c0 	mov    DWORD PTR ds:0xc0022004,0xc0010214
c0010f03:	c7 05 08 20 02 c0 63 09 01 c0 	mov    DWORD PTR ds:0xc0022008,0xc0010963
c0010f0d:	c7 05 0c 20 02 c0 96 03 01 c0 	mov    DWORD PTR ds:0xc002200c,0xc0010396
c0010f17:	c7 05 10 20 02 c0 24 02 01 c0 	mov    DWORD PTR ds:0xc0022010,0xc0010224
c0010f21:	c7 05 14 20 02 c0 59 04 01 c0 	mov    DWORD PTR ds:0xc0022014,0xc0010459
c0010f2b:	c7 05 18 20 02 c0 b0 09 01 c0 	mov    DWORD PTR ds:0xc0022018,0xc00109b0
c0010f35:	c7 05 1c 20 02 c0 f2 05 01 c0 	mov    DWORD PTR ds:0xc002201c,0xc00105f2
c0010f3f:	c7 05 20 20 02 c0 d9 09 01 c0 	mov    DWORD PTR ds:0xc0022020,0xc00109d9
c0010f49:	c7 05 24 20 02 c0 42 0a 01 c0 	mov    DWORD PTR ds:0xc0022024,0xc0010a42
c0010f53:	c7 05 2c 20 02 c0 2c 02 01 c0 	mov    DWORD PTR ds:0xc002202c,0xc001022c
c0010f5d:	c7 05 30 20 02 c0 99 02 01 c0 	mov    DWORD PTR ds:0xc0022030,0xc0010299
c0010f67:	c7 05 34 20 02 c0 e3 02 01 c0 	mov    DWORD PTR ds:0xc0022034,0xc00102e3
c0010f71:	c7 05 38 20 02 c0 f1 0a 01 c0 	mov    DWORD PTR ds:0xc0022038,0xc0010af1
c0010f7b:	c7 05 3c 20 02 c0 7a 08 01 c0 	mov    DWORD PTR ds:0xc002203c,0xc001087a
c0010f85:	c7 05 40 20 02 c0 38 03 01 c0 	mov    DWORD PTR ds:0xc0022040,0xc0010338
c0010f8f:	c7 05 44 20 02 c0 68 0b 01 c0 	mov    DWORD PTR ds:0xc0022044,0xc0010b68
c0010f99:	c7 05 48 20 02 c0 ad 0b 01 c0 	mov    DWORD PTR ds:0xc0022048,0xc0010bad
c0010fa3:	c7 05 4c 20 02 c0 b1 fe 00 c0 	mov    DWORD PTR ds:0xc002204c,0xc000feb1
c0010fad:	c7 05 50 20 02 c0 32 00 01 c0 	mov    DWORD PTR ds:0xc0022050,0xc0010032
c0010fb7:	c7 05 54 20 02 c0 c7 00 01 c0 	mov    DWORD PTR ds:0xc0022054,0xc00100c7
c0010fc1:	c7 05 58 20 02 c0 9c fd 00 c0 	mov    DWORD PTR ds:0xc0022058,0xc000fd9c
c0010fcb:	c7 05 5c 20 02 c0 79 01 01 c0 	mov    DWORD PTR ds:0xc002205c,0xc0010179
c0010fd5:	c7 05 60 20 02 c0 15 fe 00 c0 	mov    DWORD PTR ds:0xc0022060,0xc000fe15
c0010fdf:	c7 05 64 20 02 c0 2f fe 00 c0 	mov    DWORD PTR ds:0xc0022064,0xc000fe2f
c0010fe9:	c3                   	ret    

c0010fea <Sys::systemCall(regs*, void*)>:
c0010fea:	53                   	push   ebx
c0010feb:	83 ec 08             	sub    esp,0x8
c0010fee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010ff5:	83 f8 7f             	cmp    eax,0x7f
c0010ff8:	77 16                	ja     c0011010 <Sys::systemCall(regs*, void*)+0x26>
c0010ffa:	8b 14 85 a0 1f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde060]
c0011001:	85 d2                	test   edx,edx
c0011003:	74 0b                	je     c0011010 <Sys::systemCall(regs*, void*)+0x26>
c0011005:	83 ec 0c             	sub    esp,0xc
c0011008:	53                   	push   ebx
c0011009:	ff d2                	call   edx
c001100b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001100e:	eb 0d                	jmp    c001101d <Sys::systemCall(regs*, void*)+0x33>
c0011010:	52                   	push   edx
c0011011:	52                   	push   edx
c0011012:	50                   	push   eax
c0011013:	68 0e df 01 c0       	push   0xc001df0e
c0011018:	e8 bb 89 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001101d:	83 c4 10             	add    esp,0x10
c0011020:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011025:	31 d2                	xor    edx,edx
c0011027:	83 c4 08             	add    esp,0x8
c001102a:	5b                   	pop    ebx
c001102b:	c3                   	ret    

c001102c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001102c:	55                   	push   ebp
c001102d:	57                   	push   edi
c001102e:	56                   	push   esi
c001102f:	53                   	push   ebx
c0011030:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011036:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001103e:	0f 95 c2             	setne  dl
c0011041:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011049:	0f 94 c0             	sete   al
c001104c:	84 c2                	test   dl,al
c001104e:	74 34                	je     c0011084 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011050:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001105b:	74 27                	je     c0011084 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c001105d:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011064:	05 00 10 00 00       	add    eax,0x1000
c0011069:	89 c1                	mov    ecx,eax
c001106b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011070:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011076:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001107d:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011084:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001108b:	83 ec 0c             	sub    esp,0xc
c001108e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011094:	6a 01                	push   0x1
c0011096:	e8 b6 76 ff ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c001109b:	83 c4 10             	add    esp,0x10
c001109e:	89 c3                	mov    ebx,eax
c00110a0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00110a6:	0f 86 25 01 00 00    	jbe    c00111d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c00110ac:	c1 ee 0c             	shr    esi,0xc
c00110af:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00110b6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00110ba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00110c2:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00110c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00110cd:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00110d4:	29 ef                	sub    edi,ebp
c00110d6:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00110da:	0f 83 f8 00 00 00    	jae    c00111d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c00110e0:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00110e6:	76 05                	jbe    c00110ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c00110e8:	bf 00 10 00 00       	mov    edi,0x1000
c00110ed:	83 ec 0c             	sub    esp,0xc
c00110f0:	31 d2                	xor    edx,edx
c00110f2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00110f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00110fb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00110ff:	50                   	push   eax
c0011100:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011104:	56                   	push   esi
c0011105:	52                   	push   edx
c0011106:	57                   	push   edi
c0011107:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001110e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011111:	83 c4 20             	add    esp,0x20
c0011114:	85 c0                	test   eax,eax
c0011116:	75 06                	jne    c001111e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011118:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001111c:	74 13                	je     c0011131 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c001111e:	83 ec 0c             	sub    esp,0xc
c0011121:	53                   	push   ebx
c0011122:	e8 1e 79 ff ff       	call   c0008a45 <Virt::freeKernelVirtualPages(unsigned long)>
c0011127:	83 c4 10             	add    esp,0x10
c001112a:	31 c0                	xor    eax,eax
c001112c:	e9 7c 01 00 00       	jmp    c00112ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011131:	fa                   	cli    
c0011132:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0011138:	e8 a5 5e ff ff       	call   c0006fe2 <Phys::allocatePage()>
c001113d:	6a 07                	push   0x7
c001113f:	89 c7                	mov    edi,eax
c0011141:	53                   	push   ebx
c0011142:	50                   	push   eax
c0011143:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011148:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001114b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011151:	e8 54 7c ff ff       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c0011156:	83 c4 0c             	add    esp,0xc
c0011159:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011160:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011166:	6a 00                	push   0x0
c0011168:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001116d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011170:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011176:	e8 a1 7a ff ff       	call   c0008c1c <VAS::mapOtherVASIn(bool, VAS*)>
c001117b:	58                   	pop    eax
c001117c:	5a                   	pop    edx
c001117d:	68 07 0c 00 00       	push   0xc07
c0011182:	55                   	push   ebp
c0011183:	57                   	push   edi
c0011184:	89 df                	mov    edi,ebx
c0011186:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001118d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011193:	6a 00                	push   0x0
c0011195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001119a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001119d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00111a3:	e8 c2 7f ff ff       	call   c000916a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00111a8:	b9 00 10 00 00       	mov    ecx,0x1000
c00111ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111af:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00111b4:	83 c4 20             	add    esp,0x20
c00111b7:	48                   	dec    eax
c00111b8:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c00111bd:	85 c0                	test   eax,eax
c00111bf:	75 01                	jne    c00111c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00111c1:	fb                   	sti    
c00111c2:	81 c5 00 10 00 00    	add    ebp,0x1000
c00111c8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00111cc:	e9 f1 fe ff ff       	jmp    c00110c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00111d1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00111d8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00111df:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00111e5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00111eb:	0f 86 ae 00 00 00    	jbe    c001129f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00111f1:	fa                   	cli    
c00111f2:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c00111f8:	c1 ee 0c             	shr    esi,0xc
c00111fb:	51                   	push   ecx
c00111fc:	31 ff                	xor    edi,edi
c00111fe:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011205:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001120b:	6a 00                	push   0x0
c001120d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011212:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011215:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001121b:	e8 fc 79 ff ff       	call   c0008c1c <VAS::mapOtherVASIn(bool, VAS*)>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	e8 ba 5d ff ff       	call   c0006fe2 <Phys::allocatePage()>
c0011228:	47                   	inc    edi
c0011229:	6a 07                	push   0x7
c001122b:	53                   	push   ebx
c001122c:	50                   	push   eax
c001122d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011231:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011237:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001123a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011240:	e8 65 7b ff ff       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c0011245:	58                   	pop    eax
c0011246:	5a                   	pop    edx
c0011247:	68 07 0c 00 00       	push   0xc07
c001124c:	55                   	push   ebp
c001124d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011253:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011257:	50                   	push   eax
c0011258:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001125f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011265:	6a 00                	push   0x0
c0011267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001126c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001126f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011275:	e8 f0 7e ff ff       	call   c000916a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001127a:	83 c4 1c             	add    esp,0x1c
c001127d:	68 00 10 00 00       	push   0x1000
c0011282:	6a 00                	push   0x0
c0011284:	53                   	push   ebx
c0011285:	e8 66 f2 fe ff       	call   c00004f0 <memset>
c001128a:	83 c4 10             	add    esp,0x10
c001128d:	39 fe                	cmp    esi,edi
c001128f:	77 92                	ja     c0011223 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011291:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0011296:	48                   	dec    eax
c0011297:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c001129c:	75 01                	jne    c001129f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001129e:	fb                   	sti    
c001129f:	83 ec 0c             	sub    esp,0xc
c00112a2:	53                   	push   ebx
c00112a3:	e8 9d 77 ff ff       	call   c0008a45 <Virt::freeKernelVirtualPages(unsigned long)>
c00112a8:	83 c4 10             	add    esp,0x10
c00112ab:	b0 01                	mov    al,0x1
c00112ad:	81 c4 2c 10 00 00    	add    esp,0x102c
c00112b3:	5b                   	pop    ebx
c00112b4:	5e                   	pop    esi
c00112b5:	5f                   	pop    edi
c00112b6:	5d                   	pop    ebp
c00112b7:	c3                   	ret    

c00112b8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00112b8:	55                   	push   ebp
c00112b9:	57                   	push   edi
c00112ba:	56                   	push   esi
c00112bb:	53                   	push   ebx
c00112bc:	83 ec 48             	sub    esp,0x48
c00112bf:	68 14 01 00 00       	push   0x114
c00112c4:	e8 4c 59 ff ff       	call   c0006c15 <malloc>
c00112c9:	83 c4 0c             	add    esp,0xc
c00112cc:	89 c6                	mov    esi,eax
c00112ce:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00112d2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00112d6:	50                   	push   eax
c00112d7:	e8 72 8c ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c00112dc:	58                   	pop    eax
c00112dd:	5a                   	pop    edx
c00112de:	6a 01                	push   0x1
c00112e0:	56                   	push   esi
c00112e1:	e8 28 8d ff ff       	call   c000a00e <File::open(FileOpenMode)>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	85 c0                	test   eax,eax
c00112eb:	0f 85 47 01 00 00    	jne    c0011438 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00112f1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00112f9:	83 ec 0c             	sub    esp,0xc
c00112fc:	6a 34                	push   0x34
c00112fe:	e8 12 59 ff ff       	call   c0006c15 <malloc>
c0011303:	89 c3                	mov    ebx,eax
c0011305:	58                   	pop    eax
c0011306:	8b 06                	mov    eax,DWORD PTR [esi]
c0011308:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001130c:	57                   	push   edi
c001130d:	53                   	push   ebx
c001130e:	6a 00                	push   0x0
c0011310:	6a 34                	push   0x34
c0011312:	56                   	push   esi
c0011313:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011316:	83 c4 20             	add    esp,0x20
c0011319:	85 c0                	test   eax,eax
c001131b:	0f 85 17 01 00 00    	jne    c0011438 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011321:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011327:	0f 85 0b 01 00 00    	jne    c0011438 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001132d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011330:	85 c0                	test   eax,eax
c0011332:	0f 84 00 01 00 00    	je     c0011438 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011338:	31 d2                	xor    edx,edx
c001133a:	55                   	push   ebp
c001133b:	52                   	push   edx
c001133c:	50                   	push   eax
c001133d:	56                   	push   esi
c001133e:	e8 89 8d ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c0011343:	83 c4 10             	add    esp,0x10
c0011346:	85 c0                	test   eax,eax
c0011348:	0f 85 ea 00 00 00    	jne    c0011438 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001134e:	83 ec 0c             	sub    esp,0xc
c0011351:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011354:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011358:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001135c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011360:	0f af c2             	imul   eax,edx
c0011363:	50                   	push   eax
c0011364:	e8 ac 58 ff ff       	call   c0006c15 <malloc>
c0011369:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001136b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001136f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011372:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011376:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001137a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001137e:	0f af c2             	imul   eax,edx
c0011381:	99                   	cdq    
c0011382:	52                   	push   edx
c0011383:	50                   	push   eax
c0011384:	56                   	push   esi
c0011385:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011388:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001138b:	83 c4 20             	add    esp,0x20
c001138e:	85 c0                	test   eax,eax
c0011390:	0f 84 a2 00 00 00    	je     c0011438 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011396:	31 d2                	xor    edx,edx
c0011398:	51                   	push   ecx
c0011399:	52                   	push   edx
c001139a:	50                   	push   eax
c001139b:	56                   	push   esi
c001139c:	e8 2b 8d ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c00113a1:	83 c4 10             	add    esp,0x10
c00113a4:	85 c0                	test   eax,eax
c00113a6:	0f 85 8c 00 00 00    	jne    c0011438 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00113ac:	83 ec 0c             	sub    esp,0xc
c00113af:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00113b3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00113b7:	31 ed                	xor    ebp,ebp
c00113b9:	0f af c2             	imul   eax,edx
c00113bc:	50                   	push   eax
c00113bd:	e8 53 58 ff ff       	call   c0006c15 <malloc>
c00113c2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00113c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113cf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00113d3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00113d7:	0f af c2             	imul   eax,edx
c00113da:	99                   	cdq    
c00113db:	52                   	push   edx
c00113dc:	50                   	push   eax
c00113dd:	56                   	push   esi
c00113de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00113e1:	83 c4 20             	add    esp,0x20
c00113e4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00113ec:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00113f0:	0f 86 80 00 00 00    	jbe    c0011476 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00113f6:	0f b7 fd             	movzx  edi,bp
c00113f9:	c1 e7 05             	shl    edi,0x5
c00113fc:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011400:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011403:	75 6b                	jne    c0011470 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011405:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011408:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001140c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001140f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011413:	52                   	push   edx
c0011414:	31 d2                	xor    edx,edx
c0011416:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011419:	52                   	push   edx
c001141a:	50                   	push   eax
c001141b:	56                   	push   esi
c001141c:	e8 ab 8c ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c0011421:	83 c4 10             	add    esp,0x10
c0011424:	85 c0                	test   eax,eax
c0011426:	74 17                	je     c001143f <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011428:	83 ec 0c             	sub    esp,0xc
c001142b:	68 22 df 01 c0       	push   0xc001df22
c0011430:	e8 a3 85 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0011435:	83 c4 10             	add    esp,0x10
c0011438:	31 c0                	xor    eax,eax
c001143a:	e9 87 00 00 00       	jmp    c00114c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001143f:	83 ec 0c             	sub    esp,0xc
c0011442:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011445:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011448:	50                   	push   eax
c0011449:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001144d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011451:	56                   	push   esi
c0011452:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011456:	e8 d1 fb ff ff       	call   c001102c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001145b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001145f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011463:	83 c4 20             	add    esp,0x20
c0011466:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001146a:	73 04                	jae    c0011470 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001146c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011470:	45                   	inc    ebp
c0011471:	e9 76 ff ff ff       	jmp    c00113ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011476:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001147a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001147e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011482:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011488:	83 ec 0c             	sub    esp,0xc
c001148b:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011491:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011496:	05 00 10 00 00       	add    eax,0x1000
c001149b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001149e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a2:	e8 7e 57 ff ff       	call   c0006c25 <free>
c00114a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114aa:	e8 76 57 ff ff       	call   c0006c25 <free>
c00114af:	58                   	pop    eax
c00114b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114b4:	e8 6c 57 ff ff       	call   c0006c25 <free>
c00114b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00114bc:	e8 ab 8b ff ff       	call   c000a06c <File::close()>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	b0 01                	mov    al,0x1
c00114c6:	83 c4 3c             	add    esp,0x3c
c00114c9:	5b                   	pop    ebx
c00114ca:	5e                   	pop    esi
c00114cb:	5f                   	pop    edi
c00114cc:	5d                   	pop    ebp
c00114cd:	c3                   	ret    

c00114ce <Thr::runtimeReferenceHelper()>:
c00114ce:	83 ec 18             	sub    esp,0x18
c00114d1:	68 2a df 01 c0       	push   0xc001df2a
c00114d6:	e8 fd 84 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00114db:	fa                   	cli    
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	eb fe                	jmp    c00114df <Thr::runtimeReferenceHelper()+0x11>

c00114e1 <Thr::getAddressOfKernelSymbol(char const*)>:
c00114e1:	57                   	push   edi
c00114e2:	56                   	push   esi
c00114e3:	53                   	push   ebx
c00114e4:	31 db                	xor    ebx,ebx
c00114e6:	39 1d 40 29 02 c0    	cmp    DWORD PTR ds:0xc0022940,ebx
c00114ec:	7e 3c                	jle    c001152a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00114ee:	8b 34 9d c0 28 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdd740]
c00114f5:	31 ff                	xor    edi,edi
c00114f7:	39 3c 9d c0 27 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdd840],edi
c00114fe:	7e 27                	jle    c0011527 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011500:	50                   	push   eax
c0011501:	50                   	push   eax
c0011502:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011506:	8b 06                	mov    eax,DWORD PTR [esi]
c0011508:	03 04 9d 40 28 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdd7c0]
c001150f:	50                   	push   eax
c0011510:	e8 eb f1 fe ff       	call   c0000700 <strcmp>
c0011515:	83 c4 10             	add    esp,0x10
c0011518:	85 c0                	test   eax,eax
c001151a:	75 05                	jne    c0011521 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001151c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001151f:	eb 0b                	jmp    c001152c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011521:	83 c6 10             	add    esi,0x10
c0011524:	47                   	inc    edi
c0011525:	eb d0                	jmp    c00114f7 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011527:	43                   	inc    ebx
c0011528:	eb bc                	jmp    c00114e6 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001152a:	31 c0                	xor    eax,eax
c001152c:	5b                   	pop    ebx
c001152d:	5e                   	pop    esi
c001152e:	5f                   	pop    edi
c001152f:	c3                   	ret    

c0011530 <Thr::loadKernelSymbolTable(char const*)>:
c0011530:	55                   	push   ebp
c0011531:	57                   	push   edi
c0011532:	56                   	push   esi
c0011533:	53                   	push   ebx
c0011534:	83 ec 68             	sub    esp,0x68
c0011537:	8b 35 90 29 02 c0    	mov    esi,DWORD PTR ds:0xc0022990
c001153d:	68 14 01 00 00       	push   0x114
c0011542:	e8 ce 56 ff ff       	call   c0006c15 <malloc>
c0011547:	83 c4 0c             	add    esp,0xc
c001154a:	89 c3                	mov    ebx,eax
c001154c:	56                   	push   esi
c001154d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011551:	50                   	push   eax
c0011552:	e8 f7 89 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c0011557:	5e                   	pop    esi
c0011558:	5f                   	pop    edi
c0011559:	6a 01                	push   0x1
c001155b:	53                   	push   ebx
c001155c:	e8 ad 8a ff ff       	call   c000a00e <File::open(FileOpenMode)>
c0011561:	83 c4 10             	add    esp,0x10
c0011564:	85 c0                	test   eax,eax
c0011566:	74 0a                	je     c0011572 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011568:	83 ec 0c             	sub    esp,0xc
c001156b:	68 4c df 01 c0       	push   0xc001df4c
c0011570:	eb 34                	jmp    c00115a6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011572:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001157a:	83 ec 0c             	sub    esp,0xc
c001157d:	6a 34                	push   0x34
c001157f:	e8 91 56 ff ff       	call   c0006c15 <malloc>
c0011584:	59                   	pop    ecx
c0011585:	89 c7                	mov    edi,eax
c0011587:	8d 74 24 34          	lea    esi,[esp+0x34]
c001158b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001158d:	56                   	push   esi
c001158e:	57                   	push   edi
c001158f:	6a 00                	push   0x0
c0011591:	6a 34                	push   0x34
c0011593:	53                   	push   ebx
c0011594:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011597:	83 c4 20             	add    esp,0x20
c001159a:	85 c0                	test   eax,eax
c001159c:	74 17                	je     c00115b5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001159e:	83 ec 0c             	sub    esp,0xc
c00115a1:	68 63 df 01 c0       	push   0xc001df63
c00115a6:	e8 7c df ff ff       	call   c000f527 <Krnl::panic(char const*)>
c00115ab:	83 c4 10             	add    esp,0x10
c00115ae:	31 c0                	xor    eax,eax
c00115b0:	e9 31 02 00 00       	jmp    c00117e6 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00115b5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00115bb:	75 e1                	jne    c001159e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00115bd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00115c0:	85 c0                	test   eax,eax
c00115c2:	74 da                	je     c001159e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00115c4:	52                   	push   edx
c00115c5:	31 d2                	xor    edx,edx
c00115c7:	52                   	push   edx
c00115c8:	50                   	push   eax
c00115c9:	53                   	push   ebx
c00115ca:	e8 fd 8a ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c00115cf:	83 c4 10             	add    esp,0x10
c00115d2:	85 c0                	test   eax,eax
c00115d4:	75 c8                	jne    c001159e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00115d6:	83 ec 0c             	sub    esp,0xc
c00115d9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00115dd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00115e1:	31 ed                	xor    ebp,ebp
c00115e3:	0f af c2             	imul   eax,edx
c00115e6:	50                   	push   eax
c00115e7:	e8 29 56 ff ff       	call   c0006c15 <malloc>
c00115ec:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00115ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115f2:	89 34 24             	mov    DWORD PTR [esp],esi
c00115f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00115f9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00115fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011601:	0f af c2             	imul   eax,edx
c0011604:	99                   	cdq    
c0011605:	52                   	push   edx
c0011606:	50                   	push   eax
c0011607:	53                   	push   ebx
c0011608:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001160b:	83 c4 20             	add    esp,0x20
c001160e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011616:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001161e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011626:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001162e:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0011632:	0f 86 aa 00 00 00    	jbe    c00116e2 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011638:	0f b7 f5             	movzx  esi,bp
c001163b:	6b f6 28             	imul   esi,esi,0x28
c001163e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011642:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011645:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011649:	50                   	push   eax
c001164a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001164e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0011652:	8b 16                	mov    edx,DWORD PTR [esi]
c0011654:	6b c0 28             	imul   eax,eax,0x28
c0011657:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001165b:	89 d0                	mov    eax,edx
c001165d:	31 d2                	xor    edx,edx
c001165f:	52                   	push   edx
c0011660:	50                   	push   eax
c0011661:	53                   	push   ebx
c0011662:	e8 65 8a ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c0011667:	83 c4 0c             	add    esp,0xc
c001166a:	6a 20                	push   0x20
c001166c:	6a 00                	push   0x0
c001166e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011672:	52                   	push   edx
c0011673:	e8 78 ee fe ff       	call   c00004f0 <memset>
c0011678:	58                   	pop    eax
c0011679:	8b 03                	mov    eax,DWORD PTR [ebx]
c001167b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001167f:	51                   	push   ecx
c0011680:	8d 54 24 40          	lea    edx,[esp+0x40]
c0011684:	52                   	push   edx
c0011685:	6a 00                	push   0x0
c0011687:	6a 1f                	push   0x1f
c0011689:	53                   	push   ebx
c001168a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001168d:	83 c4 18             	add    esp,0x18
c0011690:	68 7a df 01 c0       	push   0xc001df7a
c0011695:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011699:	52                   	push   edx
c001169a:	e8 61 f0 fe ff       	call   c0000700 <strcmp>
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	85 c0                	test   eax,eax
c00116a4:	75 0f                	jne    c00116b5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00116a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00116a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116b5:	50                   	push   eax
c00116b6:	50                   	push   eax
c00116b7:	68 82 df 01 c0       	push   0xc001df82
c00116bc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00116c0:	50                   	push   eax
c00116c1:	e8 3a f0 fe ff       	call   c0000700 <strcmp>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	85 c0                	test   eax,eax
c00116cb:	75 0f                	jne    c00116dc <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00116cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00116d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00116d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00116dc:	45                   	inc    ebp
c00116dd:	e9 4c ff ff ff       	jmp    c001162e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00116e2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00116e7:	75 10                	jne    c00116f9 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00116e9:	83 ec 0c             	sub    esp,0xc
c00116ec:	68 8a df 01 c0       	push   0xc001df8a
c00116f1:	e8 31 de ff ff       	call   c000f527 <Krnl::panic(char const*)>
c00116f6:	83 c4 10             	add    esp,0x10
c00116f9:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00116fe:	75 10                	jne    c0011710 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0011700:	83 ec 0c             	sub    esp,0xc
c0011703:	68 8a df 01 c0       	push   0xc001df8a
c0011708:	e8 1a de ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001170d:	83 c4 10             	add    esp,0x10
c0011710:	31 d2                	xor    edx,edx
c0011712:	50                   	push   eax
c0011713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011717:	52                   	push   edx
c0011718:	50                   	push   eax
c0011719:	53                   	push   ebx
c001171a:	e8 ad 89 ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c001171f:	5a                   	pop    edx
c0011720:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011724:	e8 ec 54 ff ff       	call   c0006c15 <malloc>
c0011729:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001172d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011731:	31 c9                	xor    ecx,ecx
c0011733:	5e                   	pop    esi
c0011734:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011736:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001173a:	55                   	push   ebp
c001173b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001173f:	51                   	push   ecx
c0011740:	52                   	push   edx
c0011741:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0011745:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0011749:	53                   	push   ebx
c001174a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001174d:	83 c4 14             	add    esp,0x14
c0011750:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011754:	e8 bc 54 ff ff       	call   c0006c15 <malloc>
c0011759:	89 c6                	mov    esi,eax
c001175b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001175d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011760:	56                   	push   esi
c0011761:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011765:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011769:	51                   	push   ecx
c001176a:	52                   	push   edx
c001176b:	53                   	push   ebx
c001176c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001176f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011773:	8b 15 40 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022940
c0011779:	83 c4 1c             	add    esp,0x1c
c001177c:	c1 e8 04             	shr    eax,0x4
c001177f:	89 04 95 c0 27 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd840],eax
c0011786:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001178a:	31 d2                	xor    edx,edx
c001178c:	52                   	push   edx
c001178d:	50                   	push   eax
c001178e:	53                   	push   ebx
c001178f:	e8 38 89 ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c0011794:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011796:	31 d2                	xor    edx,edx
c0011798:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001179b:	56                   	push   esi
c001179c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00117a0:	52                   	push   edx
c00117a1:	50                   	push   eax
c00117a2:	53                   	push   ebx
c00117a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00117a6:	83 c4 14             	add    esp,0x14
c00117a9:	53                   	push   ebx
c00117aa:	e8 bd 88 ff ff       	call   c000a06c <File::close()>
c00117af:	5d                   	pop    ebp
c00117b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117b4:	e8 6c 54 ff ff       	call   c0006c25 <free>
c00117b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117bc:	e8 64 54 ff ff       	call   c0006c25 <free>
c00117c1:	a1 40 29 02 c0       	mov    eax,ds:0xc0022940
c00117c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00117ca:	8d 50 01             	lea    edx,[eax+0x1]
c00117cd:	89 0c 85 c0 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd740],ecx
c00117d4:	89 34 85 40 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7c0],esi
c00117db:	89 15 40 29 02 c0    	mov    DWORD PTR ds:0xc0022940,edx
c00117e1:	83 c4 10             	add    esp,0x10
c00117e4:	b0 01                	mov    al,0x1
c00117e6:	83 c4 5c             	add    esp,0x5c
c00117e9:	5b                   	pop    ebx
c00117ea:	5e                   	pop    esi
c00117eb:	5f                   	pop    edi
c00117ec:	5d                   	pop    ebp
c00117ed:	c3                   	ret    

c00117ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00117ee:	55                   	push   ebp
c00117ef:	57                   	push   edi
c00117f0:	56                   	push   esi
c00117f1:	53                   	push   ebx
c00117f2:	81 ec 68 03 00 00    	sub    esp,0x368
c00117f8:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00117ff:	8b 1d 90 29 02 c0    	mov    ebx,DWORD PTR ds:0xc0022990
c0011805:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0011809:	68 14 01 00 00       	push   0x114
c001180e:	e8 02 54 ff ff       	call   c0006c15 <malloc>
c0011813:	83 c4 0c             	add    esp,0xc
c0011816:	89 c5                	mov    ebp,eax
c0011818:	53                   	push   ebx
c0011819:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0011820:	50                   	push   eax
c0011821:	e8 28 87 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c0011826:	5e                   	pop    esi
c0011827:	5f                   	pop    edi
c0011828:	6a 01                	push   0x1
c001182a:	55                   	push   ebp
c001182b:	e8 de 87 ff ff       	call   c000a00e <File::open(FileOpenMode)>
c0011830:	83 c4 10             	add    esp,0x10
c0011833:	85 c0                	test   eax,eax
c0011835:	0f 85 a7 06 00 00    	jne    c0011ee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001183b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0011843:	83 ec 0c             	sub    esp,0xc
c0011846:	6a 34                	push   0x34
c0011848:	e8 c8 53 ff ff       	call   c0006c15 <malloc>
c001184d:	5b                   	pop    ebx
c001184e:	89 c7                	mov    edi,eax
c0011850:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011854:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011857:	53                   	push   ebx
c0011858:	57                   	push   edi
c0011859:	6a 00                	push   0x0
c001185b:	6a 34                	push   0x34
c001185d:	55                   	push   ebp
c001185e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011861:	83 c4 20             	add    esp,0x20
c0011864:	85 c0                	test   eax,eax
c0011866:	0f 85 76 06 00 00    	jne    c0011ee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001186c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011872:	0f 85 6a 06 00 00    	jne    c0011ee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011878:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001187b:	85 c0                	test   eax,eax
c001187d:	0f 84 5f 06 00 00    	je     c0011ee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011883:	31 d2                	xor    edx,edx
c0011885:	51                   	push   ecx
c0011886:	52                   	push   edx
c0011887:	50                   	push   eax
c0011888:	55                   	push   ebp
c0011889:	e8 3e 88 ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c001188e:	83 c4 10             	add    esp,0x10
c0011891:	85 c0                	test   eax,eax
c0011893:	0f 85 49 06 00 00    	jne    c0011ee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011899:	83 ec 0c             	sub    esp,0xc
c001189c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001189f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00118a3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00118a7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00118ab:	0f af c2             	imul   eax,edx
c00118ae:	50                   	push   eax
c00118af:	e8 61 53 ff ff       	call   c0006c15 <malloc>
c00118b4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00118b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00118bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00118c2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00118c6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00118ca:	0f af c2             	imul   eax,edx
c00118cd:	99                   	cdq    
c00118ce:	52                   	push   edx
c00118cf:	50                   	push   eax
c00118d0:	55                   	push   ebp
c00118d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00118d4:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00118d7:	83 c4 20             	add    esp,0x20
c00118da:	85 c0                	test   eax,eax
c00118dc:	0f 84 00 06 00 00    	je     c0011ee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00118e2:	52                   	push   edx
c00118e3:	31 d2                	xor    edx,edx
c00118e5:	52                   	push   edx
c00118e6:	50                   	push   eax
c00118e7:	55                   	push   ebp
c00118e8:	e8 df 87 ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c00118ed:	83 c4 10             	add    esp,0x10
c00118f0:	85 c0                	test   eax,eax
c00118f2:	0f 85 ea 05 00 00    	jne    c0011ee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00118ff:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0011903:	31 f6                	xor    esi,esi
c0011905:	0f af c2             	imul   eax,edx
c0011908:	50                   	push   eax
c0011909:	e8 07 53 ff ff       	call   c0006c15 <malloc>
c001190e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011911:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011915:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011918:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001191c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0011920:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0011924:	0f af c2             	imul   eax,edx
c0011927:	99                   	cdq    
c0011928:	52                   	push   edx
c0011929:	50                   	push   eax
c001192a:	55                   	push   ebp
c001192b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001192e:	83 c4 20             	add    esp,0x20
c0011931:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0011935:	0f 86 8a 00 00 00    	jbe    c00119c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001193b:	0f b7 de             	movzx  ebx,si
c001193e:	c1 e3 05             	shl    ebx,0x5
c0011941:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0011945:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0011948:	75 75                	jne    c00119bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001194a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001194d:	31 d2                	xor    edx,edx
c001194f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011953:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0011956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001195a:	50                   	push   eax
c001195b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001195e:	52                   	push   edx
c001195f:	50                   	push   eax
c0011960:	55                   	push   ebp
c0011961:	e8 66 87 ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c0011966:	83 c4 10             	add    esp,0x10
c0011969:	85 c0                	test   eax,eax
c001196b:	0f 85 71 05 00 00    	jne    c0011ee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011971:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0011978:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001197b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001197f:	31 d2                	xor    edx,edx
c0011981:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0011985:	83 ec 0c             	sub    esp,0xc
c0011988:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001198c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011993:	50                   	push   eax
c0011994:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001199c:	52                   	push   edx
c001199d:	50                   	push   eax
c001199e:	55                   	push   ebp
c001199f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00119a2:	83 c4 1c             	add    esp,0x1c
c00119a5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00119a8:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00119ab:	50                   	push   eax
c00119ac:	6a 00                	push   0x0
c00119ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00119b6:	50                   	push   eax
c00119b7:	e8 34 eb fe ff       	call   c00004f0 <memset>
c00119bc:	83 c4 10             	add    esp,0x10
c00119bf:	46                   	inc    esi
c00119c0:	e9 6c ff ff ff       	jmp    c0011931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00119c5:	53                   	push   ebx
c00119c6:	31 db                	xor    ebx,ebx
c00119c8:	68 00 01 00 00       	push   0x100
c00119cd:	6a 00                	push   0x0
c00119cf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00119d3:	50                   	push   eax
c00119d4:	e8 17 eb fe ff       	call   c00004f0 <memset>
c00119d9:	83 c4 0c             	add    esp,0xc
c00119dc:	68 00 01 00 00       	push   0x100
c00119e1:	6a 00                	push   0x0
c00119e3:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00119ea:	50                   	push   eax
c00119eb:	e8 00 eb fe ff       	call   c00004f0 <memset>
c00119f0:	83 c4 10             	add    esp,0x10
c00119f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00119fb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011a03:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0011a0b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011a13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011a1b:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0011a1f:	0f 86 30 01 00 00    	jbe    c0011b55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0011a25:	0f b7 f3             	movzx  esi,bx
c0011a28:	6b f6 28             	imul   esi,esi,0x28
c0011a2b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011a2f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011a32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a36:	52                   	push   edx
c0011a37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a3b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0011a3f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a41:	6b d2 28             	imul   edx,edx,0x28
c0011a44:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0011a48:	31 d2                	xor    edx,edx
c0011a4a:	52                   	push   edx
c0011a4b:	50                   	push   eax
c0011a4c:	55                   	push   ebp
c0011a4d:	e8 7a 86 ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c0011a52:	83 c4 0c             	add    esp,0xc
c0011a55:	6a 20                	push   0x20
c0011a57:	6a 00                	push   0x0
c0011a59:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011a60:	51                   	push   ecx
c0011a61:	e8 8a ea fe ff       	call   c00004f0 <memset>
c0011a66:	59                   	pop    ecx
c0011a67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011a6a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0011a6e:	52                   	push   edx
c0011a6f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0011a76:	51                   	push   ecx
c0011a77:	6a 00                	push   0x0
c0011a79:	6a 1f                	push   0x1f
c0011a7b:	55                   	push   ebp
c0011a7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011a7f:	83 c4 1c             	add    esp,0x1c
c0011a82:	6a 09                	push   0x9
c0011a84:	68 a4 df 01 c0       	push   0xc001dfa4
c0011a89:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011a90:	51                   	push   ecx
c0011a91:	e8 1a e9 fe ff       	call   c00003b0 <memcmp>
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	85 c0                	test   eax,eax
c0011a9b:	75 21                	jne    c0011abe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0011a9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aa1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011aa5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011aa9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011aad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011ab0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011ab7:	89 d0                	mov    eax,edx
c0011ab9:	40                   	inc    eax
c0011aba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011abe:	50                   	push   eax
c0011abf:	6a 09                	push   0x9
c0011ac1:	68 ae df 01 c0       	push   0xc001dfae
c0011ac6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011acd:	50                   	push   eax
c0011ace:	e8 dd e8 fe ff       	call   c00003b0 <memcmp>
c0011ad3:	83 c4 10             	add    esp,0x10
c0011ad6:	85 c0                	test   eax,eax
c0011ad8:	75 21                	jne    c0011afb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0011ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ade:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ae2:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011ae6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011aea:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011aed:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011af4:	89 d0                	mov    eax,edx
c0011af6:	40                   	inc    eax
c0011af7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011afb:	50                   	push   eax
c0011afc:	50                   	push   eax
c0011afd:	68 7a df 01 c0       	push   0xc001df7a
c0011b02:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011b09:	50                   	push   eax
c0011b0a:	e8 f1 eb fe ff       	call   c0000700 <strcmp>
c0011b0f:	83 c4 10             	add    esp,0x10
c0011b12:	85 c0                	test   eax,eax
c0011b14:	75 0f                	jne    c0011b25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0011b16:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011b19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011b1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011b25:	50                   	push   eax
c0011b26:	50                   	push   eax
c0011b27:	68 82 df 01 c0       	push   0xc001df82
c0011b2c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011b33:	50                   	push   eax
c0011b34:	e8 c7 eb fe ff       	call   c0000700 <strcmp>
c0011b39:	83 c4 10             	add    esp,0x10
c0011b3c:	85 c0                	test   eax,eax
c0011b3e:	75 0f                	jne    c0011b4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0011b40:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011b43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b4b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011b4f:	43                   	inc    ebx
c0011b50:	e9 c6 fe ff ff       	jmp    c0011a1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0011b55:	31 d2                	xor    edx,edx
c0011b57:	50                   	push   eax
c0011b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b5c:	52                   	push   edx
c0011b5d:	50                   	push   eax
c0011b5e:	55                   	push   ebp
c0011b5f:	e8 68 85 ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c0011b64:	58                   	pop    eax
c0011b65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011b69:	e8 a7 50 ff ff       	call   c0006c15 <malloc>
c0011b6e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011b71:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b75:	31 d2                	xor    edx,edx
c0011b77:	58                   	pop    eax
c0011b78:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011b7c:	53                   	push   ebx
c0011b7d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011b81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b85:	52                   	push   edx
c0011b86:	50                   	push   eax
c0011b87:	55                   	push   ebp
c0011b88:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011b8b:	83 c4 14             	add    esp,0x14
c0011b8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b92:	e8 7e 50 ff ff       	call   c0006c15 <malloc>
c0011b97:	31 d2                	xor    edx,edx
c0011b99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011b9d:	83 c4 0c             	add    esp,0xc
c0011ba0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ba4:	52                   	push   edx
c0011ba5:	50                   	push   eax
c0011ba6:	55                   	push   ebp
c0011ba7:	e8 20 85 ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c0011bac:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011baf:	31 d2                	xor    edx,edx
c0011bb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bb4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011bb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bbc:	52                   	push   edx
c0011bbd:	50                   	push   eax
c0011bbe:	55                   	push   ebp
c0011bbf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011bc2:	83 c4 20             	add    esp,0x20
c0011bc5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011bcd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011bd1:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0011bd5:	0f 84 0b 03 00 00    	je     c0011ee6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0011bdb:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0011be2:	31 d2                	xor    edx,edx
c0011be4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011be8:	c1 e8 03             	shr    eax,0x3
c0011beb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011bef:	51                   	push   ecx
c0011bf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011bf4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0011bf8:	52                   	push   edx
c0011bf9:	50                   	push   eax
c0011bfa:	55                   	push   ebp
c0011bfb:	e8 cc 84 ff ff       	call   c000a0cc <File::seek(unsigned long long)>
c0011c00:	5b                   	pop    ebx
c0011c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c05:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0011c0c:	e8 04 50 ff ff       	call   c0006c15 <malloc>
c0011c11:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011c14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c18:	31 d2                	xor    edx,edx
c0011c1a:	5e                   	pop    esi
c0011c1b:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011c1f:	50                   	push   eax
c0011c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c28:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0011c2f:	52                   	push   edx
c0011c30:	50                   	push   eax
c0011c31:	55                   	push   ebp
c0011c32:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011c35:	83 c4 20             	add    esp,0x20
c0011c38:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011c40:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c44:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0011c48:	0f 8d 7c 02 00 00    	jge    c0011eca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0011c4e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c56:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0011c5b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0011c5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011c62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c66:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0011c6a:	89 d8                	mov    eax,ebx
c0011c6c:	c1 e8 08             	shr    eax,0x8
c0011c6f:	89 c6                	mov    esi,eax
c0011c71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011c75:	c1 e6 04             	shl    esi,0x4
c0011c78:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0011c7c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0011c7f:	85 d2                	test   edx,edx
c0011c81:	0f 85 bf 00 00 00    	jne    c0011d46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011c87:	83 ec 0c             	sub    esp,0xc
c0011c8a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011c8e:	03 06                	add    eax,DWORD PTR [esi]
c0011c90:	50                   	push   eax
c0011c91:	e8 4b f8 ff ff       	call   c00114e1 <Thr::getAddressOfKernelSymbol(char const*)>
c0011c96:	83 c4 10             	add    esp,0x10
c0011c99:	89 c2                	mov    edx,eax
c0011c9b:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0011ca0:	85 c0                	test   eax,eax
c0011ca2:	0f 85 9e 00 00 00    	jne    c0011d46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011ca8:	83 ec 0c             	sub    esp,0xc
c0011cab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011caf:	03 06                	add    eax,DWORD PTR [esi]
c0011cb1:	50                   	push   eax
c0011cb2:	e8 4d 3f ff ff       	call   c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>
c0011cb7:	83 c4 10             	add    esp,0x10
c0011cba:	89 c2                	mov    edx,eax
c0011cbc:	85 c0                	test   eax,eax
c0011cbe:	0f 85 82 00 00 00    	jne    c0011d46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011cc4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011cc8:	50                   	push   eax
c0011cc9:	50                   	push   eax
c0011cca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cce:	03 06                	add    eax,DWORD PTR [esi]
c0011cd0:	50                   	push   eax
c0011cd1:	68 b8 df 01 c0       	push   0xc001dfb8
c0011cd6:	e8 fd 7c ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0011cdb:	58                   	pop    eax
c0011cdc:	5a                   	pop    edx
c0011cdd:	68 d2 df 01 c0       	push   0xc001dfd2
c0011ce2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011ce9:	50                   	push   eax
c0011cea:	e8 31 e9 fe ff       	call   c0000620 <strcpy>
c0011cef:	59                   	pop    ecx
c0011cf0:	58                   	pop    eax
c0011cf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cf5:	03 06                	add    eax,DWORD PTR [esi]
c0011cf7:	50                   	push   eax
c0011cf8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011cff:	50                   	push   eax
c0011d00:	e8 db ea fe ff       	call   c00007e0 <strcat>
c0011d05:	58                   	pop    eax
c0011d06:	5a                   	pop    edx
c0011d07:	68 68 e0 01 c0       	push   0xc001e068
c0011d0c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011d13:	50                   	push   eax
c0011d14:	e8 c7 ea fe ff       	call   c00007e0 <strcat>
c0011d19:	83 c4 10             	add    esp,0x10
c0011d1c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011d21:	0f 84 5d 01 00 00    	je     c0011e84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011d31:	50                   	push   eax
c0011d32:	e8 f0 d7 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0011d37:	83 c4 10             	add    esp,0x10
c0011d3a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011d3e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011d42:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0011d46:	80 fb 01             	cmp    bl,0x1
c0011d49:	0f 85 88 00 00 00    	jne    c0011dd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0011d4f:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0011d56:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011d5a:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0011d5e:	01 ce                	add    esi,ecx
c0011d60:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011d66:	0f 94 c0             	sete   al
c0011d69:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011d6f:	0f 94 c3             	sete   bl
c0011d72:	09 c3                	or     ebx,eax
c0011d74:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d76:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011d7b:	74 41                	je     c0011dbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0011d7d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0011d80:	84 db                	test   bl,bl
c0011d82:	75 15                	jne    c0011d99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0011d84:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011d88:	66 83 f8 0c          	cmp    ax,0xc
c0011d8c:	76 05                	jbe    c0011d93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0011d8e:	b8 0c 00 00 00       	mov    eax,0xc
c0011d93:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011d97:	76 37                	jbe    c0011dd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011d99:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0011d9d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011da2:	0f 84 dc 00 00 00    	je     c0011e84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011da8:	83 ec 0c             	sub    esp,0xc
c0011dab:	68 e9 df 01 c0       	push   0xc001dfe9
c0011db0:	e8 72 d7 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0011db5:	83 c4 10             	add    esp,0x10
c0011db8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dbc:	eb 12                	jmp    c0011dd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011dbe:	01 c1                	add    ecx,eax
c0011dc0:	84 db                	test   bl,bl
c0011dc2:	75 0c                	jne    c0011dd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011dc4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011dc8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011dcc:	77 02                	ja     c0011dd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011dce:	01 d1                	add    ecx,edx
c0011dd0:	89 0e                	mov    DWORD PTR [esi],ecx
c0011dd2:	e9 ea 00 00 00       	jmp    c0011ec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011dd7:	80 fb 02             	cmp    bl,0x2
c0011dda:	75 7c                	jne    c0011e58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0011ddc:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0011de3:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0011de7:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0011deb:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011df1:	74 20                	je     c0011e13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011df3:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011df9:	74 18                	je     c0011e13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011dfb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011dff:	b9 0a 00 00 00       	mov    ecx,0xa
c0011e04:	66 83 f8 0e          	cmp    ax,0xe
c0011e08:	77 03                	ja     c0011e0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0011e0a:	8d 48 fc             	lea    ecx,[eax-0x4]
c0011e0d:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0011e11:	76 1f                	jbe    c0011e32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0011e13:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0011e17:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011e1c:	74 66                	je     c0011e84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011e1e:	83 ec 0c             	sub    esp,0xc
c0011e21:	68 05 e0 01 c0       	push   0xc001e005
c0011e26:	e8 fc d6 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0011e2b:	83 c4 10             	add    esp,0x10
c0011e2e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e32:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e34:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011e39:	74 13                	je     c0011e4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0011e3b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e3f:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0011e46:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0011e4a:	01 c8                	add    eax,ecx
c0011e4c:	eb 04                	jmp    c0011e52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0011e4e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0011e52:	01 c2                	add    edx,eax
c0011e54:	89 16                	mov    DWORD PTR [esi],edx
c0011e56:	eb 69                	jmp    c0011ec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011e58:	0f b6 db             	movzx  ebx,bl
c0011e5b:	50                   	push   eax
c0011e5c:	50                   	push   eax
c0011e5d:	53                   	push   ebx
c0011e5e:	68 21 e0 01 c0       	push   0xc001e021
c0011e63:	e8 70 7b ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0011e68:	83 c4 10             	add    esp,0x10
c0011e6b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011e70:	74 12                	je     c0011e84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011e72:	83 ec 0c             	sub    esp,0xc
c0011e75:	68 2c e0 01 c0       	push   0xc001e02c
c0011e7a:	e8 a8 d6 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0011e7f:	83 c4 10             	add    esp,0x10
c0011e82:	eb 3d                	jmp    c0011ec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011e84:	83 ec 0c             	sub    esp,0xc
c0011e87:	55                   	push   ebp
c0011e88:	e8 df 81 ff ff       	call   c000a06c <File::close()>
c0011e8d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011e90:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011e93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e96:	59                   	pop    ecx
c0011e97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e9b:	e8 85 4d ff ff       	call   c0006c25 <free>
c0011ea0:	5b                   	pop    ebx
c0011ea1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ea5:	e8 7b 4d ff ff       	call   c0006c25 <free>
c0011eaa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ead:	e8 73 4d ff ff       	call   c0006c25 <free>
c0011eb2:	5e                   	pop    esi
c0011eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011eb7:	e8 69 4d ff ff       	call   c0006c25 <free>
c0011ebc:	83 c4 10             	add    esp,0x10
c0011ebf:	eb 21                	jmp    c0011ee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011ec1:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0011ec5:	e9 76 fd ff ff       	jmp    c0011c40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0011eca:	83 ec 0c             	sub    esp,0xc
c0011ecd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ed1:	e8 4f 4d ff ff       	call   c0006c25 <free>
c0011ed6:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0011eda:	83 c4 10             	add    esp,0x10
c0011edd:	e9 eb fc ff ff       	jmp    c0011bcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0011ee2:	31 c0                	xor    eax,eax
c0011ee4:	eb 33                	jmp    c0011f19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0011ee6:	83 ec 0c             	sub    esp,0xc
c0011ee9:	55                   	push   ebp
c0011eea:	e8 7d 81 ff ff       	call   c000a06c <File::close()>
c0011eef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011ef2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011ef5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ef8:	58                   	pop    eax
c0011ef9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011efd:	e8 23 4d ff ff       	call   c0006c25 <free>
c0011f02:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f05:	e8 1b 4d ff ff       	call   c0006c25 <free>
c0011f0a:	5a                   	pop    edx
c0011f0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f0f:	e8 11 4d ff ff       	call   c0006c25 <free>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	b0 01                	mov    al,0x1
c0011f19:	81 c4 5c 03 00 00    	add    esp,0x35c
c0011f1f:	5b                   	pop    ebx
c0011f20:	5e                   	pop    esi
c0011f21:	5f                   	pop    edi
c0011f22:	5d                   	pop    ebp
c0011f23:	c3                   	ret    

c0011f24 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0011f24:	56                   	push   esi
c0011f25:	31 d2                	xor    edx,edx
c0011f27:	53                   	push   ebx
c0011f28:	8b 1d a0 21 02 c0    	mov    ebx,DWORD PTR ds:0xc00221a0
c0011f2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011f32:	39 d3                	cmp    ebx,edx
c0011f34:	7e 1b                	jle    c0011f51 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0011f36:	8b 04 95 c0 23 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddc40]
c0011f3d:	39 c8                	cmp    eax,ecx
c0011f3f:	77 0d                	ja     c0011f4e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0011f41:	8b 34 95 c0 21 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdde40]
c0011f48:	01 c6                	add    esi,eax
c0011f4a:	39 ce                	cmp    esi,ecx
c0011f4c:	77 05                	ja     c0011f53 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0011f4e:	42                   	inc    edx
c0011f4f:	eb e1                	jmp    c0011f32 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0011f51:	31 c0                	xor    eax,eax
c0011f53:	5b                   	pop    ebx
c0011f54:	5e                   	pop    esi
c0011f55:	c3                   	ret    

c0011f56 <Thr::getDriverNameFromAddress(unsigned long)>:
c0011f56:	53                   	push   ebx
c0011f57:	31 c0                	xor    eax,eax
c0011f59:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f5d:	8b 1d a0 21 02 c0    	mov    ebx,DWORD PTR ds:0xc00221a0
c0011f63:	39 c3                	cmp    ebx,eax
c0011f65:	7e 22                	jle    c0011f89 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0011f67:	8b 14 85 c0 23 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddc40]
c0011f6e:	39 ca                	cmp    edx,ecx
c0011f70:	77 14                	ja     c0011f86 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011f72:	03 14 85 c0 21 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdde40]
c0011f79:	39 ca                	cmp    edx,ecx
c0011f7b:	76 09                	jbe    c0011f86 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011f7d:	8b 04 85 c0 25 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdda40]
c0011f84:	eb 05                	jmp    c0011f8b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0011f86:	40                   	inc    eax
c0011f87:	eb da                	jmp    c0011f63 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0011f89:	31 c0                	xor    eax,eax
c0011f8b:	5b                   	pop    ebx
c0011f8c:	c3                   	ret    

c0011f8d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0011f8d:	53                   	push   ebx
c0011f8e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0011f92:	53                   	push   ebx
c0011f93:	e8 8c ff ff ff       	call   c0011f24 <Thr::getDriverBaseFromAddress(unsigned long)>
c0011f98:	5a                   	pop    edx
c0011f99:	31 d2                	xor    edx,edx
c0011f9b:	85 c0                	test   eax,eax
c0011f9d:	74 04                	je     c0011fa3 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0011f9f:	89 da                	mov    edx,ebx
c0011fa1:	29 c2                	sub    edx,eax
c0011fa3:	89 d0                	mov    eax,edx
c0011fa5:	5b                   	pop    ebx
c0011fa6:	c3                   	ret    

c0011fa7 <Thr::loadDLL(char const*, bool)>:
c0011fa7:	55                   	push   ebp
c0011fa8:	57                   	push   edi
c0011fa9:	56                   	push   esi
c0011faa:	53                   	push   ebx
c0011fab:	81 ec 34 01 00 00    	sub    esp,0x134
c0011fb1:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011fb8:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011fbf:	56                   	push   esi
c0011fc0:	68 44 e0 01 c0       	push   0xc001e044
c0011fc5:	e8 0e 7a ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0011fca:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011fd1:	e8 3f 4c ff ff       	call   c0006c15 <malloc>
c0011fd6:	83 c4 0c             	add    esp,0xc
c0011fd9:	89 c3                	mov    ebx,eax
c0011fdb:	ff 35 90 29 02 c0    	push   DWORD PTR ds:0xc0022990
c0011fe1:	56                   	push   esi
c0011fe2:	50                   	push   eax
c0011fe3:	e8 66 7f ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c0011fe8:	83 c4 10             	add    esp,0x10
c0011feb:	85 db                	test   ebx,ebx
c0011fed:	75 3c                	jne    c001202b <Thr::loadDLL(char const*, bool)+0x84>
c0011fef:	89 f8                	mov    eax,edi
c0011ff1:	84 c0                	test   al,al
c0011ff3:	0f 84 d2 01 00 00    	je     c00121cb <Thr::loadDLL(char const*, bool)+0x224>
c0011ff9:	55                   	push   ebp
c0011ffa:	55                   	push   ebp
c0011ffb:	68 55 e0 01 c0       	push   0xc001e055
c0012000:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012004:	55                   	push   ebp
c0012005:	e8 16 e6 fe ff       	call   c0000620 <strcpy>
c001200a:	58                   	pop    eax
c001200b:	5a                   	pop    edx
c001200c:	56                   	push   esi
c001200d:	55                   	push   ebp
c001200e:	e8 cd e7 fe ff       	call   c00007e0 <strcat>
c0012013:	59                   	pop    ecx
c0012014:	58                   	pop    eax
c0012015:	68 68 e0 01 c0       	push   0xc001e068
c001201a:	55                   	push   ebp
c001201b:	e8 c0 e7 fe ff       	call   c00007e0 <strcat>
c0012020:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012023:	e8 ff d4 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0012028:	83 c4 10             	add    esp,0x10
c001202b:	51                   	push   ecx
c001202c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012030:	50                   	push   eax
c0012031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012035:	50                   	push   eax
c0012036:	53                   	push   ebx
c0012037:	e8 7e 82 ff ff       	call   c000a2ba <File::stat(unsigned long long*, bool*)>
c001203c:	83 c4 10             	add    esp,0x10
c001203f:	85 db                	test   ebx,ebx
c0012041:	74 0c                	je     c001204f <Thr::loadDLL(char const*, bool)+0xa8>
c0012043:	83 ec 0c             	sub    esp,0xc
c0012046:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012048:	53                   	push   ebx
c0012049:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001204c:	83 c4 10             	add    esp,0x10
c001204f:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012054:	75 0a                	jne    c0012060 <Thr::loadDLL(char const*, bool)+0xb9>
c0012056:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001205a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001205e:	75 3c                	jne    c001209c <Thr::loadDLL(char const*, bool)+0xf5>
c0012060:	89 f8                	mov    eax,edi
c0012062:	84 c0                	test   al,al
c0012064:	0f 84 49 01 00 00    	je     c00121b3 <Thr::loadDLL(char const*, bool)+0x20c>
c001206a:	51                   	push   ecx
c001206b:	51                   	push   ecx
c001206c:	68 55 e0 01 c0       	push   0xc001e055
c0012071:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012075:	53                   	push   ebx
c0012076:	e8 a5 e5 fe ff       	call   c0000620 <strcpy>
c001207b:	5d                   	pop    ebp
c001207c:	58                   	pop    eax
c001207d:	56                   	push   esi
c001207e:	53                   	push   ebx
c001207f:	e8 5c e7 fe ff       	call   c00007e0 <strcat>
c0012084:	58                   	pop    eax
c0012085:	5a                   	pop    edx
c0012086:	68 68 e0 01 c0       	push   0xc001e068
c001208b:	53                   	push   ebx
c001208c:	e8 4f e7 fe ff       	call   c00007e0 <strcat>
c0012091:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012094:	e8 8e d4 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	52                   	push   edx
c001209d:	6a 03                	push   0x3
c001209f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00120a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00120a7:	05 ff 0f 00 00       	add    eax,0xfff
c00120ac:	83 d2 00             	adc    edx,0x0
c00120af:	0f ac d0 0c          	shrd   eax,edx,0xc
c00120b3:	50                   	push   eax
c00120b4:	ff 35 74 f5 01 c0    	push   DWORD PTR ds:0xc001f574
c00120ba:	e8 ef 6d ff ff       	call   c0008eae <VAS::allocatePages(int, int)>
c00120bf:	59                   	pop    ecx
c00120c0:	89 c3                	mov    ebx,eax
c00120c2:	5d                   	pop    ebp
c00120c3:	50                   	push   eax
c00120c4:	68 4e cd 01 c0       	push   0xc001cd4e
c00120c9:	e8 0a 79 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00120ce:	89 34 24             	mov    DWORD PTR [esp],esi
c00120d1:	e8 8a e4 fe ff       	call   c0000560 <strlen>
c00120d6:	8b 2d a0 21 02 c0    	mov    ebp,DWORD PTR ds:0xc00221a0
c00120dc:	40                   	inc    eax
c00120dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00120e0:	e8 30 4b ff ff       	call   c0006c15 <malloc>
c00120e5:	89 04 ad c0 25 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdda40],eax
c00120ec:	58                   	pop    eax
c00120ed:	a1 a0 21 02 c0       	mov    eax,ds:0xc00221a0
c00120f2:	5a                   	pop    edx
c00120f3:	56                   	push   esi
c00120f4:	ff 34 85 c0 25 02 c0 	push   DWORD PTR [eax*4-0x3ffdda40]
c00120fb:	e8 20 e5 fe ff       	call   c0000620 <strcpy>
c0012100:	a1 a0 21 02 c0       	mov    eax,ds:0xc00221a0
c0012105:	8d 50 01             	lea    edx,[eax+0x1]
c0012108:	89 1c 85 c0 23 02 c0 	mov    DWORD PTR [eax*4-0x3ffddc40],ebx
c001210f:	89 15 a0 21 02 c0    	mov    DWORD PTR ds:0xc00221a0,edx
c0012115:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012119:	83 c4 0c             	add    esp,0xc
c001211c:	89 14 85 c0 21 02 c0 	mov    DWORD PTR [eax*4-0x3ffdde40],edx
c0012123:	6a 01                	push   0x1
c0012125:	53                   	push   ebx
c0012126:	56                   	push   esi
c0012127:	e8 c2 f6 ff ff       	call   c00117ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001212c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012130:	83 c4 10             	add    esp,0x10
c0012133:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012138:	0f 85 89 00 00 00    	jne    c00121c7 <Thr::loadDLL(char const*, bool)+0x220>
c001213e:	89 f8                	mov    eax,edi
c0012140:	84 c0                	test   al,al
c0012142:	74 73                	je     c00121b7 <Thr::loadDLL(char const*, bool)+0x210>
c0012144:	83 ec 0c             	sub    esp,0xc
c0012147:	68 6a e0 01 c0       	push   0xc001e06a
c001214c:	e8 d6 d3 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0012151:	83 c4 10             	add    esp,0x10
c0012154:	eb 61                	jmp    c00121b7 <Thr::loadDLL(char const*, bool)+0x210>
c0012156:	50                   	push   eax
c0012157:	50                   	push   eax
c0012158:	89 e8                	mov    eax,ebp
c001215a:	c1 e0 0c             	shl    eax,0xc
c001215d:	01 d8                	add    eax,ebx
c001215f:	50                   	push   eax
c0012160:	ff 35 74 f5 01 c0    	push   DWORD PTR ds:0xc001f574
c0012166:	e8 bb 68 ff ff       	call   c0008a26 <VAS::getPageTableEntry(unsigned long)>
c001216b:	83 c4 10             	add    esp,0x10
c001216e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012170:	a8 60                	test   al,0x60
c0012172:	75 11                	jne    c0012185 <Thr::loadDLL(char const*, bool)+0x1de>
c0012174:	83 ec 0c             	sub    esp,0xc
c0012177:	25 00 f0 ff ff       	and    eax,0xfffff000
c001217c:	50                   	push   eax
c001217d:	e8 fe 4d ff ff       	call   c0006f80 <Phys::freePage(unsigned long)>
c0012182:	83 c4 10             	add    esp,0x10
c0012185:	45                   	inc    ebp
c0012186:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001218a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001218e:	05 ff 0f 00 00       	add    eax,0xfff
c0012193:	bf 00 00 00 00       	mov    edi,0x0
c0012198:	83 d2 00             	adc    edx,0x0
c001219b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001219f:	c1 ea 0c             	shr    edx,0xc
c00121a2:	39 c5                	cmp    ebp,eax
c00121a4:	89 d1                	mov    ecx,edx
c00121a6:	89 f8                	mov    eax,edi
c00121a8:	19 c8                	sbb    eax,ecx
c00121aa:	72 aa                	jb     c0012156 <Thr::loadDLL(char const*, bool)+0x1af>
c00121ac:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121b1:	75 18                	jne    c00121cb <Thr::loadDLL(char const*, bool)+0x224>
c00121b3:	31 db                	xor    ebx,ebx
c00121b5:	eb 14                	jmp    c00121cb <Thr::loadDLL(char const*, bool)+0x224>
c00121b7:	83 ec 0c             	sub    esp,0xc
c00121ba:	68 89 e0 01 c0       	push   0xc001e089
c00121bf:	e8 63 d3 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c00121c4:	83 c4 10             	add    esp,0x10
c00121c7:	31 ed                	xor    ebp,ebp
c00121c9:	eb bb                	jmp    c0012186 <Thr::loadDLL(char const*, bool)+0x1df>
c00121cb:	81 c4 2c 01 00 00    	add    esp,0x12c
c00121d1:	89 d8                	mov    eax,ebx
c00121d3:	5b                   	pop    ebx
c00121d4:	5e                   	pop    esi
c00121d5:	5f                   	pop    edi
c00121d6:	5d                   	pop    ebp
c00121d7:	c3                   	ret    

c00121d8 <Thr::executeDLL(unsigned long, void*)>:
c00121d8:	56                   	push   esi
c00121d9:	53                   	push   ebx
c00121da:	52                   	push   edx
c00121db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00121e3:	85 db                	test   ebx,ebx
c00121e5:	75 10                	jne    c00121f7 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00121e7:	83 ec 0c             	sub    esp,0xc
c00121ea:	68 a5 e0 01 c0       	push   0xc001e0a5
c00121ef:	e8 33 d3 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c00121f4:	83 c4 10             	add    esp,0x10
c00121f7:	50                   	push   eax
c00121f8:	50                   	push   eax
c00121f9:	53                   	push   ebx
c00121fa:	68 cf e0 01 c0       	push   0xc001e0cf
c00121ff:	e8 d4 77 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0012204:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012208:	89 d8                	mov    eax,ebx
c001220a:	83 c4 14             	add    esp,0x14
c001220d:	5b                   	pop    ebx
c001220e:	5e                   	pop    esi
c001220f:	ff e0                	jmp    eax
c0012211:	66 90                	xchg   ax,ax
c0012213:	90                   	nop

c0012214 <userModeEntryPoint(void*)>:
c0012214:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012219:	48                   	dec    eax
c001221a:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c001221f:	75 03                	jne    c0012224 <userModeEntryPoint(void*)+0x10>
c0012221:	fb                   	sti    
c0012222:	66 90                	xchg   ax,ax
c0012224:	fb                   	sti    
c0012225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001222a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001222d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012233:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012237:	e9 23 e0 fe ff       	jmp    c000025f <goToUsermode>

c001223c <changeTSS>:
c001223c:	83 ec 14             	sub    esp,0x14
c001223f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012244:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012247:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001224c:	c1 e2 15             	shl    edx,0x15
c001224f:	29 d0                	sub    eax,edx
c0012251:	50                   	push   eax
c0012252:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0012257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001225d:	05 7c 11 00 00       	add    eax,0x117c
c0012262:	50                   	push   eax
c0012263:	e8 3c 5e ff ff       	call   c00080a4 <TSS::setESP(unsigned long)>
c0012268:	83 c4 1c             	add    esp,0x1c
c001226b:	c3                   	ret    

c001226c <switchToThread(ThreadControlBlock*)>:
c001226c:	57                   	push   edi
c001226d:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c0012272:	56                   	push   esi
c0012273:	85 c0                	test   eax,eax
c0012275:	53                   	push   ebx
c0012276:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001227a:	0f 85 90 00 00 00    	jne    c0012310 <switchToThread(ThreadControlBlock*)+0xa4>
c0012280:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012283:	80 fa ff             	cmp    dl,0xff
c0012286:	0f 84 80 00 00 00    	je     c001230c <switchToThread(ThreadControlBlock*)+0xa0>
c001228c:	81 e2 ff 00 00 00    	and    edx,0xff
c0012292:	b8 00 04 00 00       	mov    eax,0x400
c0012297:	29 d0                	sub    eax,edx
c0012299:	d1 f8                	sar    eax,1
c001229b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001229e:	66 90                	xchg   ax,ax
c00122a0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00122a3:	e8 57 24 00 00       	call   c00146ff <HalQueryPerformanceCounter()>
c00122a8:	a3 a8 29 02 c0       	mov    ds:0xc00229a8,eax
c00122ad:	89 15 ac 29 02 c0    	mov    DWORD PTR ds:0xc00229ac,edx
c00122b3:	89 c6                	mov    esi,eax
c00122b5:	89 d7                	mov    edi,edx
c00122b7:	2b 35 98 29 02 c0    	sub    esi,DWORD PTR ds:0xc0022998
c00122bd:	a3 98 29 02 c0       	mov    ds:0xc0022998,eax
c00122c2:	1b 3d 9c 29 02 c0    	sbb    edi,DWORD PTR ds:0xc002299c
c00122c8:	89 35 a0 29 02 c0    	mov    DWORD PTR ds:0xc00229a0,esi
c00122ce:	89 3d a4 29 02 c0    	mov    DWORD PTR ds:0xc00229a4,edi
c00122d4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00122da:	89 15 9c 29 02 c0    	mov    DWORD PTR ds:0xc002299c,edx
c00122e0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00122e3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00122e6:	01 c6                	add    esi,eax
c00122e8:	11 d7                	adc    edi,edx
c00122ea:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00122ed:	83 ec 0c             	sub    esp,0xc
c00122f0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00122f3:	53                   	push   ebx
c00122f4:	e8 9e df fe ff       	call   c0000297 <switchToThreadASM>
c00122f9:	0f 20 c0             	mov    eax,cr0
c00122fc:	83 c8 08             	or     eax,0x8
c00122ff:	0f 22 c0             	mov    cr0,eax
c0012302:	83 c4 10             	add    esp,0x10
c0012305:	5b                   	pop    ebx
c0012306:	5e                   	pop    esi
c0012307:	5f                   	pop    edi
c0012308:	c3                   	ret    
c0012309:	8d 76 00             	lea    esi,[esi+0x0]
c001230c:	31 c0                	xor    eax,eax
c001230e:	eb 90                	jmp    c00122a0 <switchToThread(ThreadControlBlock*)+0x34>
c0012310:	5b                   	pop    ebx
c0012311:	c7 05 60 29 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x1
c001231b:	5e                   	pop    esi
c001231c:	5f                   	pop    edi
c001231d:	c3                   	ret    
c001231e:	66 90                	xchg   ax,ax

c0012320 <Process::addArgs(char**)>:
c0012320:	57                   	push   edi
c0012321:	56                   	push   esi
c0012322:	53                   	push   ebx
c0012323:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012327:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001232b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012335:	85 ff                	test   edi,edi
c0012337:	74 43                	je     c001237c <Process::addArgs(char**)+0x5c>
c0012339:	8b 07                	mov    eax,DWORD PTR [edi]
c001233b:	85 c0                	test   eax,eax
c001233d:	74 3d                	je     c001237c <Process::addArgs(char**)+0x5c>
c001233f:	31 db                	xor    ebx,ebx
c0012341:	8d 76 00             	lea    esi,[esi+0x0]
c0012344:	83 ec 0c             	sub    esp,0xc
c0012347:	50                   	push   eax
c0012348:	e8 13 e2 fe ff       	call   c0000560 <strlen>
c001234d:	40                   	inc    eax
c001234e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012351:	e8 bf 48 ff ff       	call   c0006c15 <malloc>
c0012356:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001235d:	5a                   	pop    edx
c001235e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012361:	59                   	pop    ecx
c0012362:	43                   	inc    ebx
c0012363:	52                   	push   edx
c0012364:	50                   	push   eax
c0012365:	e8 b6 e2 fe ff       	call   c0000620 <strcpy>
c001236a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012370:	83 c4 10             	add    esp,0x10
c0012373:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012376:	85 c0                	test   eax,eax
c0012378:	75 ca                	jne    c0012344 <Process::addArgs(char**)+0x24>
c001237a:	66 90                	xchg   ax,ax
c001237c:	5b                   	pop    ebx
c001237d:	5e                   	pop    esi
c001237e:	5f                   	pop    edi
c001237f:	c3                   	ret    

c0012380 <Process::Process(char const*, Process*, char**)>:
c0012380:	56                   	push   esi
c0012381:	53                   	push   ebx
c0012382:	83 ec 14             	sub    esp,0x14
c0012385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012389:	05 0c 02 00 00       	add    eax,0x20c
c001238e:	bb 07 00 00 00       	mov    ebx,0x7
c0012393:	89 c6                	mov    esi,eax
c0012395:	8d 76 00             	lea    esi,[esi+0x0]
c0012398:	85 db                	test   ebx,ebx
c001239a:	78 14                	js     c00123b0 <Process::Process(char const*, Process*, char**)+0x30>
c001239c:	83 ec 0c             	sub    esp,0xc
c001239f:	56                   	push   esi
c00123a0:	e8 57 9c 00 00       	call   c001bffc <ThreadControlBlock::ThreadControlBlock()>
c00123a5:	83 c4 10             	add    esp,0x10
c00123a8:	83 c6 5f             	add    esi,0x5f
c00123ab:	4b                   	dec    ebx
c00123ac:	eb ea                	jmp    c0012398 <Process::Process(char const*, Process*, char**)+0x18>
c00123ae:	66 90                	xchg   ax,ax
c00123b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123b4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00123bb:	83 ec 0c             	sub    esp,0xc
c00123be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00123c2:	e8 e9 cf ff ff       	call   c000f3b0 <Krnl::newProcessEnv(Process*)>
c00123c7:	83 c4 10             	add    esp,0x10
c00123ca:	89 c2                	mov    edx,eax
c00123cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123d0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00123d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123da:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00123e3:	a1 b0 ee 01 c0       	mov    eax,ds:0xc001eeb0
c00123e8:	8d 50 01             	lea    edx,[eax+0x1]
c00123eb:	89 15 b0 ee 01 c0    	mov    DWORD PTR ds:0xc001eeb0,edx
c00123f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00123f5:	89 02                	mov    DWORD PTR [edx],eax
c00123f7:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00123ff:	83 ec 0c             	sub    esp,0xc
c0012402:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012406:	e8 0a 48 ff ff       	call   c0006c15 <malloc>
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	89 c3                	mov    ebx,eax
c0012410:	83 ec 08             	sub    esp,0x8
c0012413:	6a 00                	push   0x0
c0012415:	53                   	push   ebx
c0012416:	e8 3d 6e ff ff       	call   c0009258 <VAS::VAS(bool)>
c001241b:	83 c4 10             	add    esp,0x10
c001241e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012422:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001242c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001243a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001243e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012448:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001244e:	85 c0                	test   eax,eax
c0012450:	74 42                	je     c0012494 <Process::Process(char const*, Process*, char**)+0x114>
c0012452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012456:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001245c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012466:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001246c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012470:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012476:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001247c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012480:	05 0c 01 00 00       	add    eax,0x10c
c0012485:	83 ec 08             	sub    esp,0x8
c0012488:	52                   	push   edx
c0012489:	50                   	push   eax
c001248a:	e8 91 e1 fe ff       	call   c0000620 <strcpy>
c001248f:	83 c4 10             	add    esp,0x10
c0012492:	eb 64                	jmp    c00124f8 <Process::Process(char const*, Process*, char**)+0x178>
c0012494:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c001249c:	83 ec 0c             	sub    esp,0xc
c001249f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00124a3:	e8 6d 47 ff ff       	call   c0006c15 <malloc>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	89 c3                	mov    ebx,eax
c00124ad:	83 ec 08             	sub    esp,0x8
c00124b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124b4:	53                   	push   ebx
c00124b5:	e8 8e 59 ff ff       	call   c0007e48 <VgaText::VgaText(char const*)>
c00124ba:	83 c4 10             	add    esp,0x10
c00124bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124c1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00124c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00124d1:	83 ec 0c             	sub    esp,0xc
c00124d4:	50                   	push   eax
c00124d5:	e8 0e 52 ff ff       	call   c00076e8 <addToTerminalCycle(VgaText*)>
c00124da:	83 c4 10             	add    esp,0x10
c00124dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124e1:	05 0c 01 00 00       	add    eax,0x10c
c00124e6:	83 ec 08             	sub    esp,0x8
c00124e9:	68 ee e0 01 c0       	push   0xc001e0ee
c00124ee:	50                   	push   eax
c00124ef:	e8 2c e1 fe ff       	call   c0000620 <strcpy>
c00124f4:	83 c4 10             	add    esp,0x10
c00124f7:	90                   	nop
c00124f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124fc:	83 c0 0c             	add    eax,0xc
c00124ff:	83 ec 08             	sub    esp,0x8
c0012502:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012506:	50                   	push   eax
c0012507:	e8 14 e1 fe ff       	call   c0000620 <strcpy>
c001250c:	83 c4 10             	add    esp,0x10
c001250f:	83 ec 08             	sub    esp,0x8
c0012512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012516:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001251a:	e8 01 fe ff ff       	call   c0012320 <Process::addArgs(char**)>
c001251f:	83 c4 10             	add    esp,0x10
c0012522:	83 ec 08             	sub    esp,0x8
c0012525:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012529:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001252d:	e8 86 ed ff ff       	call   c00112b8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012532:	83 c4 10             	add    esp,0x10
c0012535:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012539:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001253d:	83 f0 01             	xor    eax,0x1
c0012540:	88 c2                	mov    dl,al
c0012542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012546:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001254c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012550:	25 ff 00 00 00       	and    eax,0xff
c0012555:	83 ec 08             	sub    esp,0x8
c0012558:	50                   	push   eax
c0012559:	68 48 e1 01 c0       	push   0xc001e148
c001255e:	e8 75 74 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	90                   	nop
c0012567:	83 c4 14             	add    esp,0x14
c001256a:	5b                   	pop    ebx
c001256b:	5e                   	pop    esi
c001256c:	c3                   	ret    
c001256d:	90                   	nop
c001256e:	66 90                	xchg   ax,ax

c0012570 <Process::Process(bool, char const*, Process*, char**)>:
c0012570:	56                   	push   esi
c0012571:	53                   	push   ebx
c0012572:	83 ec 24             	sub    esp,0x24
c0012575:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012579:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001257d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012581:	05 0c 02 00 00       	add    eax,0x20c
c0012586:	bb 07 00 00 00       	mov    ebx,0x7
c001258b:	89 c6                	mov    esi,eax
c001258d:	8d 76 00             	lea    esi,[esi+0x0]
c0012590:	85 db                	test   ebx,ebx
c0012592:	78 14                	js     c00125a8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012594:	83 ec 0c             	sub    esp,0xc
c0012597:	56                   	push   esi
c0012598:	e8 5f 9a 00 00       	call   c001bffc <ThreadControlBlock::ThreadControlBlock()>
c001259d:	83 c4 10             	add    esp,0x10
c00125a0:	83 c6 5f             	add    esi,0x5f
c00125a3:	4b                   	dec    ebx
c00125a4:	eb ea                	jmp    c0012590 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00125a6:	66 90                	xchg   ax,ax
c00125a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125ac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00125b3:	83 ec 0c             	sub    esp,0xc
c00125b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125ba:	e8 f1 cd ff ff       	call   c000f3b0 <Krnl::newProcessEnv(Process*)>
c00125bf:	83 c4 10             	add    esp,0x10
c00125c2:	89 c2                	mov    edx,eax
c00125c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125c8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00125ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125d2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00125db:	a1 b0 ee 01 c0       	mov    eax,ds:0xc001eeb0
c00125e0:	8d 50 01             	lea    edx,[eax+0x1]
c00125e3:	89 15 b0 ee 01 c0    	mov    DWORD PTR ds:0xc001eeb0,edx
c00125e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125ed:	89 02                	mov    DWORD PTR [edx],eax
c00125ef:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00125f7:	83 ec 0c             	sub    esp,0xc
c00125fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00125fe:	e8 12 46 ff ff       	call   c0006c15 <malloc>
c0012603:	83 c4 10             	add    esp,0x10
c0012606:	89 c3                	mov    ebx,eax
c0012608:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001260c:	25 ff 00 00 00       	and    eax,0xff
c0012611:	83 ec 08             	sub    esp,0x8
c0012614:	50                   	push   eax
c0012615:	53                   	push   ebx
c0012616:	e8 3d 6c ff ff       	call   c0009258 <VAS::VAS(bool)>
c001261b:	83 c4 10             	add    esp,0x10
c001261e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012622:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012628:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001262c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012636:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001263a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001263e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012644:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012648:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001264e:	85 c0                	test   eax,eax
c0012650:	74 42                	je     c0012694 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0012652:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012656:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001265c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012666:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001266c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012670:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012676:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001267c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012680:	05 0c 01 00 00       	add    eax,0x10c
c0012685:	83 ec 08             	sub    esp,0x8
c0012688:	52                   	push   edx
c0012689:	50                   	push   eax
c001268a:	e8 91 df fe ff       	call   c0000620 <strcpy>
c001268f:	83 c4 10             	add    esp,0x10
c0012692:	eb 64                	jmp    c00126f8 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0012694:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c001269c:	83 ec 0c             	sub    esp,0xc
c001269f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126a3:	e8 6d 45 ff ff       	call   c0006c15 <malloc>
c00126a8:	83 c4 10             	add    esp,0x10
c00126ab:	89 c3                	mov    ebx,eax
c00126ad:	83 ec 08             	sub    esp,0x8
c00126b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00126b4:	53                   	push   ebx
c00126b5:	e8 8e 57 ff ff       	call   c0007e48 <VgaText::VgaText(char const*)>
c00126ba:	83 c4 10             	add    esp,0x10
c00126bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126c1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00126c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00126d1:	83 ec 0c             	sub    esp,0xc
c00126d4:	50                   	push   eax
c00126d5:	e8 0e 50 ff ff       	call   c00076e8 <addToTerminalCycle(VgaText*)>
c00126da:	83 c4 10             	add    esp,0x10
c00126dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e1:	05 0c 01 00 00       	add    eax,0x10c
c00126e6:	83 ec 08             	sub    esp,0x8
c00126e9:	68 ee e0 01 c0       	push   0xc001e0ee
c00126ee:	50                   	push   eax
c00126ef:	e8 2c df fe ff       	call   c0000620 <strcpy>
c00126f4:	83 c4 10             	add    esp,0x10
c00126f7:	90                   	nop
c00126f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126fc:	83 c0 0c             	add    eax,0xc
c00126ff:	83 ec 08             	sub    esp,0x8
c0012702:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012706:	50                   	push   eax
c0012707:	e8 14 df fe ff       	call   c0000620 <strcpy>
c001270c:	83 c4 10             	add    esp,0x10
c001270f:	83 ec 08             	sub    esp,0x8
c0012712:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012716:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001271a:	e8 01 fc ff ff       	call   c0012320 <Process::addArgs(char**)>
c001271f:	83 c4 10             	add    esp,0x10
c0012722:	90                   	nop
c0012723:	83 c4 24             	add    esp,0x24
c0012726:	5b                   	pop    ebx
c0012727:	5e                   	pop    esi
c0012728:	c3                   	ret    
c0012729:	8d 76 00             	lea    esi,[esi+0x0]

c001272c <taskStartupFunction>:
c001272c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012731:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0012734:	c3                   	ret    
c0012735:	90                   	nop
c0012736:	66 90                	xchg   ax,ax

c0012738 <Semaphore::Semaphore(int)>:
c0012738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001273c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012740:	89 10                	mov    DWORD PTR [eax],edx
c0012742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012746:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001274d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012751:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001275c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012763:	90                   	nop
c0012764:	c3                   	ret    
c0012765:	90                   	nop
c0012766:	66 90                	xchg   ax,ax

c0012768 <Mutex::Mutex()>:
c0012768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001276c:	6a 01                	push   0x1
c001276e:	50                   	push   eax
c001276f:	e8 c4 ff ff ff       	call   c0012738 <Semaphore::Semaphore(int)>
c0012774:	83 c4 08             	add    esp,0x8
c0012777:	90                   	nop
c0012778:	c3                   	ret    
c0012779:	90                   	nop
c001277a:	66 90                	xchg   ax,ax

c001277c <Process::createThread(void (*)(void*), void*, int)>:
c001277c:	57                   	push   edi
c001277d:	31 c9                	xor    ecx,ecx
c001277f:	56                   	push   esi
c0012780:	53                   	push   ebx
c0012781:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012785:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001278c:	89 f2                	mov    edx,esi
c001278e:	66 90                	xchg   ax,ax
c0012790:	31 c0                	xor    eax,eax
c0012792:	66 89 d0             	mov    ax,dx
c0012795:	83 e2 01             	and    edx,0x1
c0012798:	74 12                	je     c00127ac <Process::createThread(void (*)(void*), void*, int)+0x30>
c001279a:	d1 f8                	sar    eax,1
c001279c:	41                   	inc    ecx
c001279d:	89 c2                	mov    edx,eax
c001279f:	83 f9 10             	cmp    ecx,0x10
c00127a2:	75 ec                	jne    c0012790 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00127a4:	31 db                	xor    ebx,ebx
c00127a6:	89 d8                	mov    eax,ebx
c00127a8:	5b                   	pop    ebx
c00127a9:	5e                   	pop    esi
c00127aa:	5f                   	pop    edi
c00127ab:	c3                   	ret    
c00127ac:	b8 01 00 00 00       	mov    eax,0x1
c00127b1:	d3 e0                	shl    eax,cl
c00127b3:	09 c6                	or     esi,eax
c00127b5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00127b8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00127bf:	01 c0                	add    eax,eax
c00127c1:	01 c8                	add    eax,ecx
c00127c3:	8d 04 80             	lea    eax,[eax+eax*4]
c00127c6:	01 d8                	add    eax,ebx
c00127c8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00127cf:	75 0b                	jne    c00127dc <Process::createThread(void (*)(void*), void*, int)+0x60>
c00127d1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00127db:	90                   	nop
c00127dc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00127e2:	83 ec 08             	sub    esp,0x8
c00127e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00127e8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00127eb:	01 c0                	add    eax,eax
c00127ed:	01 c8                	add    eax,ecx
c00127ef:	8d 3c 80             	lea    edi,[eax+eax*4]
c00127f2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00127f5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00127fb:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0012801:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012805:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001280b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0012811:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0012818:	89 ca                	mov    edx,ecx
c001281a:	f7 da                	neg    edx
c001281c:	c1 e2 15             	shl    edx,0x15
c001281f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0012825:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001282b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001282f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0012839:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001283f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012843:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0012849:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0012853:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001285d:	53                   	push   ebx
c001285e:	68 84 29 02 c0       	push   0xc0022984
c0012863:	e8 34 95 00 00       	call   c001bd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012868:	83 c4 10             	add    esp,0x10
c001286b:	89 d8                	mov    eax,ebx
c001286d:	5b                   	pop    ebx
c001286e:	5e                   	pop    esi
c001286f:	5f                   	pop    edi
c0012870:	c3                   	ret    
c0012871:	90                   	nop
c0012872:	66 90                	xchg   ax,ax

c0012874 <Process::createUserThread()>:
c0012874:	83 ec 0c             	sub    esp,0xc
c0012877:	68 80 00 00 00       	push   0x80
c001287c:	6a 00                	push   0x0
c001287e:	68 14 22 01 c0       	push   0xc0012214
c0012883:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012887:	50                   	push   eax
c0012888:	e8 ef fe ff ff       	call   c001277c <Process::createThread(void (*)(void*), void*, int)>
c001288d:	83 c4 1c             	add    esp,0x1c
c0012890:	c3                   	ret    
c0012891:	8d 76 00             	lea    esi,[esi+0x0]

c0012894 <setupMultitasking(void (*)())>:
c0012894:	56                   	push   esi
c0012895:	53                   	push   ebx
c0012896:	53                   	push   ebx
c0012897:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001289b:	eb 13                	jmp    c00128b0 <setupMultitasking(void (*)())+0x1c>
c001289d:	8d 76 00             	lea    esi,[esi+0x0]
c00128a0:	83 ec 0c             	sub    esp,0xc
c00128a3:	68 84 29 02 c0       	push   0xc0022984
c00128a8:	e8 37 94 00 00       	call   c001bce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00128ad:	83 c4 10             	add    esp,0x10
c00128b0:	83 ec 0c             	sub    esp,0xc
c00128b3:	68 84 29 02 c0       	push   0xc0022984
c00128b8:	e8 03 94 00 00       	call   c001bcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00128bd:	83 c4 10             	add    esp,0x10
c00128c0:	84 c0                	test   al,al
c00128c2:	74 dc                	je     c00128a0 <setupMultitasking(void (*)())+0xc>
c00128c4:	83 ec 0c             	sub    esp,0xc
c00128c7:	68 1f 07 00 00       	push   0x71f
c00128cc:	e8 44 43 ff ff       	call   c0006c15 <malloc>
c00128d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00128d8:	89 c3                	mov    ebx,eax
c00128da:	6a 00                	push   0x0
c00128dc:	68 f2 e0 01 c0       	push   0xc001e0f2
c00128e1:	6a 01                	push   0x1
c00128e3:	50                   	push   eax
c00128e4:	e8 87 fc ff ff       	call   c0012570 <Process::Process(bool, char const*, Process*, char**)>
c00128e9:	83 c4 14             	add    esp,0x14
c00128ec:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00128f2:	89 1d 90 29 02 c0    	mov    DWORD PTR ds:0xc0022990,ebx
c00128f8:	50                   	push   eax
c00128f9:	e8 47 50 ff ff       	call   c0007945 <setActiveTerminal(VgaText*)>
c00128fe:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0012906:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0012910:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0012916:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012919:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0012923:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0012929:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001292f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0012939:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0012943:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001294d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0012953:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0012959:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0012963:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0012969:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0012973:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0012979:	5a                   	pop    edx
c001297a:	59                   	pop    ecx
c001297b:	68 ee e0 01 c0       	push   0xc001e0ee
c0012980:	50                   	push   eax
c0012981:	e8 9a dc fe ff       	call   c0000620 <strcpy>
c0012986:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001298d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012991:	83 c4 14             	add    esp,0x14
c0012994:	5b                   	pop    ebx
c0012995:	5e                   	pop    esi
c0012996:	e9 ee d8 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001299b:	90                   	nop

c001299c <schedule()>:
c001299c:	8b 15 64 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022964
c00129a2:	85 d2                	test   edx,edx
c00129a4:	74 0e                	je     c00129b4 <schedule()+0x18>
c00129a6:	c7 05 60 29 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x1
c00129b0:	c3                   	ret    
c00129b1:	8d 76 00             	lea    esi,[esi+0x0]
c00129b4:	53                   	push   ebx
c00129b5:	83 ec 14             	sub    esp,0x14
c00129b8:	68 84 29 02 c0       	push   0xc0022984
c00129bd:	e8 fe 92 00 00       	call   c001bcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00129c2:	83 c4 10             	add    esp,0x10
c00129c5:	84 c0                	test   al,al
c00129c7:	75 3b                	jne    c0012a04 <schedule()+0x68>
c00129c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00129d1:	4a                   	dec    edx
c00129d2:	74 38                	je     c0012a0c <schedule()+0x70>
c00129d4:	83 ec 0c             	sub    esp,0xc
c00129d7:	68 84 29 02 c0       	push   0xc0022984
c00129dc:	e8 fb 92 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00129e1:	c7 04 24 84 29 02 c0 	mov    DWORD PTR [esp],0xc0022984
c00129e8:	89 c3                	mov    ebx,eax
c00129ea:	e8 f5 92 00 00       	call   c001bce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00129ef:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00129f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129f9:	e8 6e f8 ff ff       	call   c001226c <switchToThread(ThreadControlBlock*)>
c00129fe:	83 c4 10             	add    esp,0x10
c0012a01:	8d 76 00             	lea    esi,[esi+0x0]
c0012a04:	83 c4 08             	add    esp,0x8
c0012a07:	5b                   	pop    ebx
c0012a08:	c3                   	ret    
c0012a09:	8d 76 00             	lea    esi,[esi+0x0]
c0012a0c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012a13:	83 ec 08             	sub    esp,0x8
c0012a16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a1b:	50                   	push   eax
c0012a1c:	68 84 29 02 c0       	push   0xc0022984
c0012a21:	e8 76 93 00 00       	call   c001bd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012a26:	83 c4 10             	add    esp,0x10
c0012a29:	eb a9                	jmp    c00129d4 <schedule()+0x38>
c0012a2b:	90                   	nop

c0012a2c <Semaphore::tryAcquire()>:
c0012a2c:	53                   	push   ebx
c0012a2d:	83 ec 08             	sub    esp,0x8
c0012a30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012a34:	fa                   	cli    
c0012a35:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012a3a:	8d 50 01             	lea    edx,[eax+0x1]
c0012a3d:	89 15 68 29 02 c0    	mov    DWORD PTR ds:0xc0022968,edx
c0012a43:	8b 15 64 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022964
c0012a49:	8d 5a 01             	lea    ebx,[edx+0x1]
c0012a4c:	89 1d 64 29 02 c0    	mov    DWORD PTR ds:0xc0022964,ebx
c0012a52:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0012a55:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0012a57:	7c 33                	jl     c0012a8c <Semaphore::tryAcquire()+0x60>
c0012a59:	89 15 64 29 02 c0    	mov    DWORD PTR ds:0xc0022964,edx
c0012a5f:	85 d2                	test   edx,edx
c0012a61:	75 0d                	jne    c0012a70 <Semaphore::tryAcquire()+0x44>
c0012a63:	8b 15 60 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022960
c0012a69:	85 d2                	test   edx,edx
c0012a6b:	75 6b                	jne    c0012ad8 <Semaphore::tryAcquire()+0xac>
c0012a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a70:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012a75:	85 c0                	test   eax,eax
c0012a77:	74 0b                	je     c0012a84 <Semaphore::tryAcquire()+0x58>
c0012a79:	8d 76 00             	lea    esi,[esi+0x0]
c0012a7c:	31 c0                	xor    eax,eax
c0012a7e:	83 c4 08             	add    esp,0x8
c0012a81:	5b                   	pop    ebx
c0012a82:	c3                   	ret    
c0012a83:	90                   	nop
c0012a84:	fb                   	sti    
c0012a85:	83 c4 08             	add    esp,0x8
c0012a88:	5b                   	pop    ebx
c0012a89:	c3                   	ret    
c0012a8a:	66 90                	xchg   ax,ax
c0012a8c:	43                   	inc    ebx
c0012a8d:	89 15 64 29 02 c0    	mov    DWORD PTR ds:0xc0022964,edx
c0012a93:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0012a96:	85 d2                	test   edx,edx
c0012a98:	75 22                	jne    c0012abc <Semaphore::tryAcquire()+0x90>
c0012a9a:	8b 0d 60 29 02 c0    	mov    ecx,DWORD PTR ds:0xc0022960
c0012aa0:	85 c9                	test   ecx,ecx
c0012aa2:	74 18                	je     c0012abc <Semaphore::tryAcquire()+0x90>
c0012aa4:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c0012aae:	e8 e9 fe ff ff       	call   c001299c <schedule()>
c0012ab3:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012ab8:	48                   	dec    eax
c0012ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0012abc:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012ac1:	85 c0                	test   eax,eax
c0012ac3:	75 0b                	jne    c0012ad0 <Semaphore::tryAcquire()+0xa4>
c0012ac5:	fb                   	sti    
c0012ac6:	b0 01                	mov    al,0x1
c0012ac8:	83 c4 08             	add    esp,0x8
c0012acb:	5b                   	pop    ebx
c0012acc:	c3                   	ret    
c0012acd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad0:	b0 01                	mov    al,0x1
c0012ad2:	83 c4 08             	add    esp,0x8
c0012ad5:	5b                   	pop    ebx
c0012ad6:	c3                   	ret    
c0012ad7:	90                   	nop
c0012ad8:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c0012ae2:	e8 b5 fe ff ff       	call   c001299c <schedule()>
c0012ae7:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012aec:	48                   	dec    eax
c0012aed:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012af2:	85 c0                	test   eax,eax
c0012af4:	75 86                	jne    c0012a7c <Semaphore::tryAcquire()+0x50>
c0012af6:	eb 8c                	jmp    c0012a84 <Semaphore::tryAcquire()+0x58>

c0012af8 <Semaphore::assertLocked(char const*)>:
c0012af8:	83 ec 0c             	sub    esp,0xc
c0012afb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012aff:	fa                   	cli    
c0012b00:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0012b06:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c0012b0b:	8d 48 01             	lea    ecx,[eax+0x1]
c0012b0e:	89 0d 64 29 02 c0    	mov    DWORD PTR ds:0xc0022964,ecx
c0012b14:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012b16:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0012b19:	7c 29                	jl     c0012b44 <Semaphore::assertLocked(char const*)+0x4c>
c0012b1b:	90                   	nop
c0012b1c:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c0012b21:	85 c0                	test   eax,eax
c0012b23:	75 0b                	jne    c0012b30 <Semaphore::assertLocked(char const*)+0x38>
c0012b25:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c0012b2a:	85 c0                	test   eax,eax
c0012b2c:	75 2e                	jne    c0012b5c <Semaphore::assertLocked(char const*)+0x64>
c0012b2e:	66 90                	xchg   ax,ax
c0012b30:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012b35:	48                   	dec    eax
c0012b36:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012b3b:	75 03                	jne    c0012b40 <Semaphore::assertLocked(char const*)+0x48>
c0012b3d:	fb                   	sti    
c0012b3e:	66 90                	xchg   ax,ax
c0012b40:	83 c4 0c             	add    esp,0xc
c0012b43:	c3                   	ret    
c0012b44:	83 ec 0c             	sub    esp,0xc
c0012b47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012b4b:	52                   	push   edx
c0012b4c:	e8 d6 c9 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0012b51:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c0012b56:	83 c4 10             	add    esp,0x10
c0012b59:	48                   	dec    eax
c0012b5a:	eb c0                	jmp    c0012b1c <Semaphore::assertLocked(char const*)+0x24>
c0012b5c:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c0012b66:	e8 31 fe ff ff       	call   c001299c <schedule()>
c0012b6b:	eb c3                	jmp    c0012b30 <Semaphore::assertLocked(char const*)+0x38>
c0012b6d:	8d 76 00             	lea    esi,[esi+0x0]

c0012b70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0012b70:	83 ec 0c             	sub    esp,0xc
c0012b73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b7c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012b7f:	e8 18 fe ff ff       	call   c001299c <schedule()>
c0012b84:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012b89:	48                   	dec    eax
c0012b8a:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012b8f:	75 03                	jne    c0012b94 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0012b91:	fb                   	sti    
c0012b92:	66 90                	xchg   ax,ax
c0012b94:	83 c4 0c             	add    esp,0xc
c0012b97:	c3                   	ret    

c0012b98 <blockTask(TaskState)>:
c0012b98:	83 ec 0c             	sub    esp,0xc
c0012b9b:	fa                   	cli    
c0012b9c:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0012ba2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ba6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012bae:	e8 e9 fd ff ff       	call   c001299c <schedule()>
c0012bb3:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012bb8:	48                   	dec    eax
c0012bb9:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012bbe:	75 04                	jne    c0012bc4 <blockTask(TaskState)+0x2c>
c0012bc0:	fb                   	sti    
c0012bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc4:	83 c4 0c             	add    esp,0xc
c0012bc7:	c3                   	ret    

c0012bc8 <waitTask(int, int*, int)>:
c0012bc8:	83 ec 18             	sub    esp,0x18
c0012bcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012bd4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0012bd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012bdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012be0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0012be3:	6a 07                	push   0x7
c0012be5:	e8 ae ff ff ff       	call   c0012b98 <blockTask(TaskState)>
c0012bea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0012bf5:	85 d2                	test   edx,edx
c0012bf7:	74 0b                	je     c0012c04 <waitTask(int, int*, int)+0x3c>
c0012bf9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0012bfc:	89 02                	mov    DWORD PTR [edx],eax
c0012bfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c03:	90                   	nop
c0012c04:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0012c07:	83 c4 0c             	add    esp,0xc
c0012c0a:	c3                   	ret    
c0012c0b:	90                   	nop

c0012c0c <milliTenthSleepUntil(unsigned int)>:
c0012c0c:	83 ec 0c             	sub    esp,0xc
c0012c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c13:	39 05 6c 1a 02 c0    	cmp    DWORD PTR ds:0xc0021a6c,eax
c0012c19:	76 05                	jbe    c0012c20 <milliTenthSleepUntil(unsigned int)+0x14>
c0012c1b:	90                   	nop
c0012c1c:	83 c4 0c             	add    esp,0xc
c0012c1f:	c3                   	ret    
c0012c20:	fa                   	cli    
c0012c21:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0012c27:	83 ec 08             	sub    esp,0x8
c0012c2a:	ff 05 64 29 02 c0    	inc    DWORD PTR ds:0xc0022964
c0012c30:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012c36:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0012c39:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012c3f:	52                   	push   edx
c0012c40:	68 78 29 02 c0       	push   0xc0022978
c0012c45:	e8 52 91 00 00       	call   c001bd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012c4a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012c51:	e8 42 ff ff ff       	call   c0012b98 <blockTask(TaskState)>
c0012c56:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c0012c5b:	83 c4 10             	add    esp,0x10
c0012c5e:	48                   	dec    eax
c0012c5f:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c0012c64:	85 c0                	test   eax,eax
c0012c66:	75 0c                	jne    c0012c74 <milliTenthSleepUntil(unsigned int)+0x68>
c0012c68:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c0012c6d:	85 c0                	test   eax,eax
c0012c6f:	75 17                	jne    c0012c88 <milliTenthSleepUntil(unsigned int)+0x7c>
c0012c71:	8d 76 00             	lea    esi,[esi+0x0]
c0012c74:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012c79:	48                   	dec    eax
c0012c7a:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012c7f:	75 9b                	jne    c0012c1c <milliTenthSleepUntil(unsigned int)+0x10>
c0012c81:	fb                   	sti    
c0012c82:	83 c4 0c             	add    esp,0xc
c0012c85:	c3                   	ret    
c0012c86:	66 90                	xchg   ax,ax
c0012c88:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c0012c92:	e8 05 fd ff ff       	call   c001299c <schedule()>
c0012c97:	eb db                	jmp    c0012c74 <milliTenthSleepUntil(unsigned int)+0x68>
c0012c99:	8d 76 00             	lea    esi,[esi+0x0]

c0012c9c <milliTenthSleep(unsigned int)>:
c0012c9c:	a1 6c 1a 02 c0       	mov    eax,ds:0xc0021a6c
c0012ca1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0012ca5:	e9 62 ff ff ff       	jmp    c0012c0c <milliTenthSleepUntil(unsigned int)>
c0012caa:	66 90                	xchg   ax,ax

c0012cac <sleep(unsigned int)>:
c0012cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cb0:	8d 04 80             	lea    eax,[eax+eax*4]
c0012cb3:	8d 04 80             	lea    eax,[eax+eax*4]
c0012cb6:	8d 04 80             	lea    eax,[eax+eax*4]
c0012cb9:	8d 04 80             	lea    eax,[eax+eax*4]
c0012cbc:	c1 e0 04             	shl    eax,0x4
c0012cbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012cc3:	eb d7                	jmp    c0012c9c <milliTenthSleep(unsigned int)>
c0012cc5:	90                   	nop
c0012cc6:	66 90                	xchg   ax,ax

c0012cc8 <Semaphore::acquire()>:
c0012cc8:	83 ec 0c             	sub    esp,0xc
c0012ccb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ccf:	fa                   	cli    
c0012cd0:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c0012cd5:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0012cdb:	8d 48 01             	lea    ecx,[eax+0x1]
c0012cde:	89 0d 64 29 02 c0    	mov    DWORD PTR ds:0xc0022964,ecx
c0012ce4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0012ce7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0012ce9:	7d 2d                	jge    c0012d18 <Semaphore::acquire()+0x50>
c0012ceb:	41                   	inc    ecx
c0012cec:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0012cef:	90                   	nop
c0012cf0:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c0012cf5:	85 c0                	test   eax,eax
c0012cf7:	75 0b                	jne    c0012d04 <Semaphore::acquire()+0x3c>
c0012cf9:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c0012cfe:	85 c0                	test   eax,eax
c0012d00:	75 62                	jne    c0012d64 <Semaphore::acquire()+0x9c>
c0012d02:	66 90                	xchg   ax,ax
c0012d04:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012d09:	48                   	dec    eax
c0012d0a:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012d0f:	75 03                	jne    c0012d14 <Semaphore::acquire()+0x4c>
c0012d11:	fb                   	sti    
c0012d12:	66 90                	xchg   ax,ax
c0012d14:	83 c4 0c             	add    esp,0xc
c0012d17:	c3                   	ret    
c0012d18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d1d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012d24:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0012d27:	85 c9                	test   ecx,ecx
c0012d29:	74 4d                	je     c0012d78 <Semaphore::acquire()+0xb0>
c0012d2b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0012d2e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012d34:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0012d37:	90                   	nop
c0012d38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d3d:	83 ec 0c             	sub    esp,0xc
c0012d40:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0012d43:	68 70 e1 01 c0       	push   0xc001e170
c0012d48:	e8 8b 6c ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0012d4d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0012d54:	e8 3f fe ff ff       	call   c0012b98 <blockTask(TaskState)>
c0012d59:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c0012d5e:	83 c4 10             	add    esp,0x10
c0012d61:	48                   	dec    eax
c0012d62:	eb 8c                	jmp    c0012cf0 <Semaphore::acquire()+0x28>
c0012d64:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c0012d6e:	e8 29 fc ff ff       	call   c001299c <schedule()>
c0012d73:	eb 8f                	jmp    c0012d04 <Semaphore::acquire()+0x3c>
c0012d75:	8d 76 00             	lea    esi,[esi+0x0]
c0012d78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d7d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012d80:	eb b6                	jmp    c0012d38 <Semaphore::acquire()+0x70>
c0012d82:	66 90                	xchg   ax,ax

c0012d84 <taskReturned>:
c0012d84:	83 ec 18             	sub    esp,0x18
c0012d87:	68 90 e1 01 c0       	push   0xc001e190
c0012d8c:	e8 96 c7 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	83 ec 0c             	sub    esp,0xc
c0012d97:	6a 02                	push   0x2
c0012d99:	e8 fa fd ff ff       	call   c0012b98 <blockTask(TaskState)>
c0012d9e:	fa                   	cli    
c0012d9f:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0012da5:	e8 f2 fb ff ff       	call   c001299c <schedule()>
c0012daa:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012daf:	83 c4 10             	add    esp,0x10
c0012db2:	48                   	dec    eax
c0012db3:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012db8:	85 c0                	test   eax,eax
c0012dba:	75 d8                	jne    c0012d94 <taskReturned+0x10>
c0012dbc:	fb                   	sti    
c0012dbd:	eb d5                	jmp    c0012d94 <taskReturned+0x10>
c0012dbf:	90                   	nop

c0012dc0 <Thr::processFromPID(int)>:
c0012dc0:	57                   	push   edi
c0012dc1:	56                   	push   esi
c0012dc2:	53                   	push   ebx
c0012dc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dc7:	fa                   	cli    
c0012dc8:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0012dce:	83 ec 0c             	sub    esp,0xc
c0012dd1:	68 84 29 02 c0       	push   0xc0022984
c0012dd6:	e8 01 8f 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ddb:	83 c4 10             	add    esp,0x10
c0012dde:	89 c7                	mov    edi,eax
c0012de0:	eb 16                	jmp    c0012df8 <Thr::processFromPID(int)+0x38>
c0012de2:	66 90                	xchg   ax,ax
c0012de4:	83 ec 0c             	sub    esp,0xc
c0012de7:	68 84 29 02 c0       	push   0xc0022984
c0012dec:	e8 eb 8e 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012df1:	83 c4 10             	add    esp,0x10
c0012df4:	39 f8                	cmp    eax,edi
c0012df6:	74 4c                	je     c0012e44 <Thr::processFromPID(int)+0x84>
c0012df8:	83 ec 0c             	sub    esp,0xc
c0012dfb:	68 84 29 02 c0       	push   0xc0022984
c0012e00:	e8 d7 8e 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e05:	c7 04 24 84 29 02 c0 	mov    DWORD PTR [esp],0xc0022984
c0012e0c:	89 c3                	mov    ebx,eax
c0012e0e:	e8 d1 8e 00 00       	call   c001bce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012e13:	58                   	pop    eax
c0012e14:	5a                   	pop    edx
c0012e15:	53                   	push   ebx
c0012e16:	68 84 29 02 c0       	push   0xc0022984
c0012e1b:	e8 7c 8f 00 00       	call   c001bd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e20:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012e23:	83 c4 10             	add    esp,0x10
c0012e26:	39 30                	cmp    DWORD PTR [eax],esi
c0012e28:	75 ba                	jne    c0012de4 <Thr::processFromPID(int)+0x24>
c0012e2a:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012e2f:	48                   	dec    eax
c0012e30:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012e35:	74 09                	je     c0012e40 <Thr::processFromPID(int)+0x80>
c0012e37:	90                   	nop
c0012e38:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012e3b:	5b                   	pop    ebx
c0012e3c:	5e                   	pop    esi
c0012e3d:	5f                   	pop    edi
c0012e3e:	c3                   	ret    
c0012e3f:	90                   	nop
c0012e40:	fb                   	sti    
c0012e41:	eb f5                	jmp    c0012e38 <Thr::processFromPID(int)+0x78>
c0012e43:	90                   	nop
c0012e44:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012e49:	48                   	dec    eax
c0012e4a:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012e4f:	75 07                	jne    c0012e58 <Thr::processFromPID(int)+0x98>
c0012e51:	fb                   	sti    
c0012e52:	5b                   	pop    ebx
c0012e53:	5e                   	pop    esi
c0012e54:	5f                   	pop    edi
c0012e55:	c3                   	ret    
c0012e56:	66 90                	xchg   ax,ax
c0012e58:	5b                   	pop    ebx
c0012e59:	31 c0                	xor    eax,eax
c0012e5b:	5e                   	pop    esi
c0012e5c:	5f                   	pop    edi
c0012e5d:	c3                   	ret    
c0012e5e:	66 90                	xchg   ax,ax

c0012e60 <unblockTask(ThreadControlBlock*)>:
c0012e60:	53                   	push   ebx
c0012e61:	83 ec 08             	sub    esp,0x8
c0012e64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e68:	fa                   	cli    
c0012e69:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0012e6f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012e72:	85 c0                	test   eax,eax
c0012e74:	74 66                	je     c0012edc <unblockTask(ThreadControlBlock*)+0x7c>
c0012e76:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012e79:	48                   	dec    eax
c0012e7a:	74 38                	je     c0012eb4 <unblockTask(ThreadControlBlock*)+0x54>
c0012e7c:	83 ec 0c             	sub    esp,0xc
c0012e7f:	68 84 29 02 c0       	push   0xc0022984
c0012e84:	e8 53 8e 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e89:	83 c4 10             	add    esp,0x10
c0012e8c:	85 c0                	test   eax,eax
c0012e8e:	75 1c                	jne    c0012eac <unblockTask(ThreadControlBlock*)+0x4c>
c0012e90:	eb 5e                	jmp    c0012ef0 <unblockTask(ThreadControlBlock*)+0x90>
c0012e92:	66 90                	xchg   ax,ax
c0012e94:	83 ec 08             	sub    esp,0x8
c0012e97:	50                   	push   eax
c0012e98:	68 84 29 02 c0       	push   0xc0022984
c0012e9d:	e8 ea 91 00 00       	call   c001c08c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012ea2:	83 c4 10             	add    esp,0x10
c0012ea5:	85 c0                	test   eax,eax
c0012ea7:	74 47                	je     c0012ef0 <unblockTask(ThreadControlBlock*)+0x90>
c0012ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0012eac:	39 c3                	cmp    ebx,eax
c0012eae:	75 e4                	jne    c0012e94 <unblockTask(ThreadControlBlock*)+0x34>
c0012eb0:	eb 12                	jmp    c0012ec4 <unblockTask(ThreadControlBlock*)+0x64>
c0012eb2:	66 90                	xchg   ax,ax
c0012eb4:	83 ec 0c             	sub    esp,0xc
c0012eb7:	68 10 e1 01 c0       	push   0xc001e110
c0012ebc:	e8 17 6b ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0012ec1:	83 c4 10             	add    esp,0x10
c0012ec4:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0012ec9:	48                   	dec    eax
c0012eca:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0012ecf:	75 03                	jne    c0012ed4 <unblockTask(ThreadControlBlock*)+0x74>
c0012ed1:	fb                   	sti    
c0012ed2:	66 90                	xchg   ax,ax
c0012ed4:	83 c4 08             	add    esp,0x8
c0012ed7:	5b                   	pop    ebx
c0012ed8:	c3                   	ret    
c0012ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0012edc:	83 ec 0c             	sub    esp,0xc
c0012edf:	68 f9 e0 01 c0       	push   0xc001e0f9
c0012ee4:	e8 ef 6a ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0012ee9:	83 c4 10             	add    esp,0x10
c0012eec:	eb d6                	jmp    c0012ec4 <unblockTask(ThreadControlBlock*)+0x64>
c0012eee:	66 90                	xchg   ax,ax
c0012ef0:	83 ec 08             	sub    esp,0x8
c0012ef3:	53                   	push   ebx
c0012ef4:	68 84 29 02 c0       	push   0xc0022984
c0012ef9:	e8 9e 8e 00 00       	call   c001bd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	eb c1                	jmp    c0012ec4 <unblockTask(ThreadControlBlock*)+0x64>
c0012f03:	90                   	nop

c0012f04 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0012f04:	55                   	push   ebp
c0012f05:	57                   	push   edi
c0012f06:	56                   	push   esi
c0012f07:	53                   	push   ebx
c0012f08:	83 ec 1c             	sub    esp,0x1c
c0012f0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012f0f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f12:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0012f18:	85 ed                	test   ebp,ebp
c0012f1a:	7e 24                	jle    c0012f40 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0012f1c:	31 f6                	xor    esi,esi
c0012f1e:	66 90                	xchg   ax,ax
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0012f2a:	46                   	inc    esi
c0012f2b:	57                   	push   edi
c0012f2c:	e8 f4 3c ff ff       	call   c0006c25 <free>
c0012f31:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f34:	83 c4 10             	add    esp,0x10
c0012f37:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0012f3d:	7f e1                	jg     c0012f20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0012f3f:	90                   	nop
c0012f40:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012f4a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f4f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0012f52:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0012f55:	d3 c0                	rol    eax,cl
c0012f57:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0012f5e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012f61:	89 f7                	mov    edi,esi
c0012f63:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0012f6b:	0f 85 77 01 00 00    	jne    c00130e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0012f71:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0012f77:	85 ed                	test   ebp,ebp
c0012f79:	74 1d                	je     c0012f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0012f7b:	83 ec 0c             	sub    esp,0xc
c0012f7e:	55                   	push   ebp
c0012f7f:	e8 48 c3 ff ff       	call   c000f2cc <EnvVarContainer::~EnvVarContainer()>
c0012f84:	59                   	pop    ecx
c0012f85:	5e                   	pop    esi
c0012f86:	6a 0c                	push   0xc
c0012f88:	55                   	push   ebp
c0012f89:	e8 54 69 ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c0012f8e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012f91:	83 c4 10             	add    esp,0x10
c0012f94:	89 f7                	mov    edi,esi
c0012f96:	66 90                	xchg   ax,ax
c0012f98:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012f9e:	85 c0                	test   eax,eax
c0012fa0:	0f 84 b6 00 00 00    	je     c001305c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0012fa6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0012fa9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012fad:	31 c9                	xor    ecx,ecx
c0012faf:	eb 17                	jmp    c0012fc8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0012fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0012fb4:	41                   	inc    ecx
c0012fb5:	83 f9 10             	cmp    ecx,0x10
c0012fb8:	0f 84 9e 00 00 00    	je     c001305c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0012fbe:	66 90                	xchg   ax,ax
c0012fc0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012fc6:	66 90                	xchg   ax,ax
c0012fc8:	31 d2                	xor    edx,edx
c0012fca:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0012fd1:	d3 fa                	sar    edx,cl
c0012fd3:	83 e2 01             	and    edx,0x1
c0012fd6:	74 dc                	je     c0012fb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012fd8:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0012fdb:	01 d2                	add    edx,edx
c0012fdd:	01 ca                	add    edx,ecx
c0012fdf:	8d 14 92             	lea    edx,[edx+edx*4]
c0012fe2:	01 d0                	add    eax,edx
c0012fe4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0012fea:	83 fd 07             	cmp    ebp,0x7
c0012fed:	75 c5                	jne    c0012fb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012fef:	05 40 02 00 00       	add    eax,0x240
c0012ff4:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0012ff7:	83 fd ff             	cmp    ebp,0xffffffff
c0012ffa:	0f 8c f0 00 00 00    	jl     c00130f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013000:	0f 84 ae 01 00 00    	je     c00131b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013006:	85 ed                	test   ebp,ebp
c0013008:	0f 84 92 01 00 00    	je     c00131a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c001300e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013010:	75 a2                	jne    c0012fb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013012:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013018:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001301c:	01 d0                	add    eax,edx
c001301e:	66 90                	xchg   ax,ax
c0013020:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013024:	83 ec 0c             	sub    esp,0xc
c0013027:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001302d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013030:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013036:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001303d:	50                   	push   eax
c001303e:	e8 1d fe ff ff       	call   c0012e60 <unblockTask(ThreadControlBlock*)>
c0013043:	83 c4 10             	add    esp,0x10
c0013046:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001304d:	89 f7                	mov    edi,esi
c001304f:	41                   	inc    ecx
c0013050:	83 f9 10             	cmp    ecx,0x10
c0013053:	0f 85 67 ff ff ff    	jne    c0012fc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013059:	8d 76 00             	lea    esi,[esi+0x0]
c001305c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013062:	85 c0                	test   eax,eax
c0013064:	74 62                	je     c00130c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013066:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001306c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013072:	74 54                	je     c00130c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	68 84 29 02 c0       	push   0xc0022984
c001307c:	e8 5b 8c 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013081:	c7 04 24 84 29 02 c0 	mov    DWORD PTR [esp],0xc0022984
c0013088:	89 c7                	mov    edi,eax
c001308a:	e8 31 8c 00 00       	call   c001bcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001308f:	83 c4 10             	add    esp,0x10
c0013092:	84 c0                	test   al,al
c0013094:	0f 84 ce 00 00 00    	je     c0013168 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001309a:	66 90                	xchg   ax,ax
c001309c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001309f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00130a5:	85 d2                	test   edx,edx
c00130a7:	74 0f                	je     c00130b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00130a9:	83 ec 0c             	sub    esp,0xc
c00130ac:	8b 02                	mov    eax,DWORD PTR [edx]
c00130ae:	52                   	push   edx
c00130af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130b2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00130b5:	83 c4 10             	add    esp,0x10
c00130b8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00130c2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00130c5:	8d 76 00             	lea    esi,[esi+0x0]
c00130c8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00130ce:	85 db                	test   ebx,ebx
c00130d0:	74 16                	je     c00130e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00130d2:	83 ec 0c             	sub    esp,0xc
c00130d5:	53                   	push   ebx
c00130d6:	e8 6b 5b ff ff       	call   c0008c46 <VAS::~VAS()>
c00130db:	58                   	pop    eax
c00130dc:	5a                   	pop    edx
c00130dd:	6a 14                	push   0x14
c00130df:	53                   	push   ebx
c00130e0:	e8 fd 67 ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c00130e5:	83 c4 10             	add    esp,0x10
c00130e8:	83 c4 1c             	add    esp,0x1c
c00130eb:	5b                   	pop    ebx
c00130ec:	5e                   	pop    esi
c00130ed:	5f                   	pop    edi
c00130ee:	5d                   	pop    ebp
c00130ef:	c3                   	ret    
c00130f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	68 c4 e1 01 c0       	push   0xc001e1c4
c00130fc:	e8 26 c4 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0013101:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	89 f7                	mov    edi,esi
c0013109:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001310d:	e9 a2 fe ff ff       	jmp    c0012fb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013112:	66 90                	xchg   ax,ax
c0013114:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001311a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013120:	75 1e                	jne    c0013140 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013122:	83 ec 0c             	sub    esp,0xc
c0013125:	68 2c e2 01 c0       	push   0xc001e22c
c001312a:	e8 a9 68 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001312f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013136:	e8 5d fa ff ff       	call   c0012b98 <blockTask(TaskState)>
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	66 90                	xchg   ax,ax
c0013140:	83 ec 08             	sub    esp,0x8
c0013143:	56                   	push   esi
c0013144:	68 84 29 02 c0       	push   0xc0022984
c0013149:	e8 4e 8c 00 00       	call   c001bd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001314e:	c7 04 24 84 29 02 c0 	mov    DWORD PTR [esp],0xc0022984
c0013155:	e8 82 8b 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001315a:	83 c4 10             	add    esp,0x10
c001315d:	39 f8                	cmp    eax,edi
c001315f:	0f 84 37 ff ff ff    	je     c001309c <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013165:	8d 76 00             	lea    esi,[esi+0x0]
c0013168:	83 ec 0c             	sub    esp,0xc
c001316b:	68 84 29 02 c0       	push   0xc0022984
c0013170:	e8 67 8b 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013175:	c7 04 24 84 29 02 c0 	mov    DWORD PTR [esp],0xc0022984
c001317c:	89 c6                	mov    esi,eax
c001317e:	e8 61 8b 00 00       	call   c001bce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	39 f3                	cmp    ebx,esi
c0013188:	74 b6                	je     c0013140 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001318a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001318d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013190:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013196:	75 a8                	jne    c0013140 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013198:	e9 77 ff ff ff       	jmp    c0013114 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c001319d:	8d 76 00             	lea    esi,[esi+0x0]
c00131a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00131a4:	83 ec 0c             	sub    esp,0xc
c00131a7:	68 f8 e1 01 c0       	push   0xc001e1f8
c00131ac:	e9 4b ff ff ff       	jmp    c00130fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00131b1:	8d 76 00             	lea    esi,[esi+0x0]
c00131b4:	8b 36                	mov    esi,DWORD PTR [esi]
c00131b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00131ba:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00131bd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00131c0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00131c6:	01 d7                	add    edi,edx
c00131c8:	89 f8                	mov    eax,edi
c00131ca:	e9 51 fe ff ff       	jmp    c0013020 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00131cf:	90                   	nop

c00131d0 <cleanerTaskFunction(void*)>:
c00131d0:	53                   	push   ebx
c00131d1:	83 ec 08             	sub    esp,0x8
c00131d4:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00131d9:	48                   	dec    eax
c00131da:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c00131df:	75 03                	jne    c00131e4 <cleanerTaskFunction(void*)+0x14>
c00131e1:	fb                   	sti    
c00131e2:	66 90                	xchg   ax,ax
c00131e4:	fa                   	cli    
c00131e5:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00131ea:	80 3d 4c 29 02 c0 00 	cmp    BYTE PTR ds:0xc002294c,0x0
c00131f1:	8d 50 01             	lea    edx,[eax+0x1]
c00131f4:	89 15 68 29 02 c0    	mov    DWORD PTR ds:0xc0022968,edx
c00131fa:	0f 84 ac 00 00 00    	je     c00132ac <cleanerTaskFunction(void*)+0xdc>
c0013200:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0013205:	85 c0                	test   eax,eax
c0013207:	75 03                	jne    c001320c <cleanerTaskFunction(void*)+0x3c>
c0013209:	fb                   	sti    
c001320a:	66 90                	xchg   ax,ax
c001320c:	c6 05 4c 29 02 c0 00 	mov    BYTE PTR ds:0xc002294c,0x0
c0013213:	fa                   	cli    
c0013214:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c001321a:	ff 05 64 29 02 c0    	inc    DWORD PTR ds:0xc0022964
c0013220:	fa                   	cli    
c0013221:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0013227:	eb 2b                	jmp    c0013254 <cleanerTaskFunction(void*)+0x84>
c0013229:	8d 76 00             	lea    esi,[esi+0x0]
c001322c:	83 ec 0c             	sub    esp,0xc
c001322f:	68 6c 29 02 c0       	push   0xc002296c
c0013234:	e8 a3 8a 00 00       	call   c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013239:	c7 04 24 6c 29 02 c0 	mov    DWORD PTR [esp],0xc002296c
c0013240:	89 c3                	mov    ebx,eax
c0013242:	e8 9d 8a 00 00       	call   c001bce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001324a:	e8 b5 fc ff ff       	call   c0012f04 <cleanupTerminatedTask(ThreadControlBlock*)>
c001324f:	83 c4 10             	add    esp,0x10
c0013252:	66 90                	xchg   ax,ax
c0013254:	83 ec 0c             	sub    esp,0xc
c0013257:	68 6c 29 02 c0       	push   0xc002296c
c001325c:	e8 5f 8a 00 00       	call   c001bcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013261:	83 c4 10             	add    esp,0x10
c0013264:	84 c0                	test   al,al
c0013266:	74 c4                	je     c001322c <cleanerTaskFunction(void*)+0x5c>
c0013268:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c001326d:	48                   	dec    eax
c001326e:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0013273:	75 03                	jne    c0013278 <cleanerTaskFunction(void*)+0xa8>
c0013275:	fb                   	sti    
c0013276:	66 90                	xchg   ax,ax
c0013278:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c001327d:	48                   	dec    eax
c001327e:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c0013283:	0f 85 4b ff ff ff    	jne    c00131d4 <cleanerTaskFunction(void*)+0x4>
c0013289:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c001328e:	85 c0                	test   eax,eax
c0013290:	0f 84 3e ff ff ff    	je     c00131d4 <cleanerTaskFunction(void*)+0x4>
c0013296:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c00132a0:	e8 f7 f6 ff ff       	call   c001299c <schedule()>
c00132a5:	e9 2a ff ff ff       	jmp    c00131d4 <cleanerTaskFunction(void*)+0x4>
c00132aa:	66 90                	xchg   ax,ax
c00132ac:	83 ec 0c             	sub    esp,0xc
c00132af:	6a 02                	push   0x2
c00132b1:	e8 ba f8 ff ff       	call   c0012b70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00132b6:	83 c4 10             	add    esp,0x10
c00132b9:	e9 4e ff ff ff       	jmp    c001320c <cleanerTaskFunction(void*)+0x3c>
c00132be:	66 90                	xchg   ax,ax

c00132c0 <terminateTask(int)>:
c00132c0:	83 ec 14             	sub    esp,0x14
c00132c3:	fa                   	cli    
c00132c4:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c00132ca:	ff 05 64 29 02 c0    	inc    DWORD PTR ds:0xc0022964
c00132d0:	fa                   	cli    
c00132d1:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c00132d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132e0:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00132e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132e8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00132eb:	50                   	push   eax
c00132ec:	68 6c 29 02 c0       	push   0xc002296c
c00132f1:	e8 a6 8a 00 00       	call   c001bd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00132f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013305:	a1 48 29 02 c0       	mov    eax,ds:0xc0022948
c001330a:	85 c0                	test   eax,eax
c001330c:	74 5e                	je     c001336c <terminateTask(int)+0xac>
c001330e:	83 ec 0c             	sub    esp,0xc
c0013311:	c6 05 4c 29 02 c0 01 	mov    BYTE PTR ds:0xc002294c,0x1
c0013318:	50                   	push   eax
c0013319:	e8 42 fb ff ff       	call   c0012e60 <unblockTask(ThreadControlBlock*)>
c001331e:	83 c4 10             	add    esp,0x10
c0013321:	8d 76 00             	lea    esi,[esi+0x0]
c0013324:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0013329:	48                   	dec    eax
c001332a:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c001332f:	75 03                	jne    c0013334 <terminateTask(int)+0x74>
c0013331:	fb                   	sti    
c0013332:	66 90                	xchg   ax,ax
c0013334:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c0013339:	48                   	dec    eax
c001333a:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c001333f:	75 0b                	jne    c001334c <terminateTask(int)+0x8c>
c0013341:	83 3d 60 29 02 c0 00 	cmp    DWORD PTR ds:0xc0022960,0x0
c0013348:	75 36                	jne    c0013380 <terminateTask(int)+0xc0>
c001334a:	66 90                	xchg   ax,ax
c001334c:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0013351:	48                   	dec    eax
c0013352:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0013357:	75 03                	jne    c001335c <terminateTask(int)+0x9c>
c0013359:	fb                   	sti    
c001335a:	66 90                	xchg   ax,ax
c001335c:	fa                   	cli    
c001335d:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0013363:	90                   	nop
c0013364:	e8 33 f6 ff ff       	call   c001299c <schedule()>
c0013369:	eb e1                	jmp    c001334c <terminateTask(int)+0x8c>
c001336b:	90                   	nop
c001336c:	83 ec 0c             	sub    esp,0xc
c001336f:	68 27 e1 01 c0       	push   0xc001e127
c0013374:	e8 5f 66 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	eb a6                	jmp    c0013324 <terminateTask(int)+0x64>
c001337e:	66 90                	xchg   ax,ax
c0013380:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c001338a:	eb d8                	jmp    c0013364 <terminateTask(int)+0xa4>

c001338c <Thr::terminateFromIRQ(int)>:
c001338c:	83 ec 18             	sub    esp,0x18
c001338f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013393:	50                   	push   eax
c0013394:	e8 27 ff ff ff       	call   c00132c0 <terminateTask(int)>
c0013399:	90                   	nop
c001339a:	66 90                	xchg   ax,ax

c001339c <Semaphore::release()>:
c001339c:	83 ec 0c             	sub    esp,0xc
c001339f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133a3:	fa                   	cli    
c00133a4:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c00133a9:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c00133af:	8d 48 01             	lea    ecx,[eax+0x1]
c00133b2:	89 0d 64 29 02 c0    	mov    DWORD PTR ds:0xc0022964,ecx
c00133b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00133bb:	85 c9                	test   ecx,ecx
c00133bd:	74 41                	je     c0013400 <Semaphore::release()+0x64>
c00133bf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00133c2:	83 ec 0c             	sub    esp,0xc
c00133c5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00133c8:	51                   	push   ecx
c00133c9:	e8 92 fa ff ff       	call   c0012e60 <unblockTask(ThreadControlBlock*)>
c00133ce:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c00133d3:	83 c4 10             	add    esp,0x10
c00133d6:	48                   	dec    eax
c00133d7:	90                   	nop
c00133d8:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c00133dd:	85 c0                	test   eax,eax
c00133df:	75 0b                	jne    c00133ec <Semaphore::release()+0x50>
c00133e1:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c00133e6:	85 c0                	test   eax,eax
c00133e8:	75 1e                	jne    c0013408 <Semaphore::release()+0x6c>
c00133ea:	66 90                	xchg   ax,ax
c00133ec:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00133f1:	48                   	dec    eax
c00133f2:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c00133f7:	75 03                	jne    c00133fc <Semaphore::release()+0x60>
c00133f9:	fb                   	sti    
c00133fa:	66 90                	xchg   ax,ax
c00133fc:	83 c4 0c             	add    esp,0xc
c00133ff:	c3                   	ret    
c0013400:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013403:	eb d3                	jmp    c00133d8 <Semaphore::release()+0x3c>
c0013405:	8d 76 00             	lea    esi,[esi+0x0]
c0013408:	c7 05 60 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022960,0x0
c0013412:	e8 85 f5 ff ff       	call   c001299c <schedule()>
c0013417:	eb d3                	jmp    c00133ec <Semaphore::release()+0x50>
c0013419:	8d 76 00             	lea    esi,[esi+0x0]

c001341c <__static_initialization_and_destruction_0(int, int)>:
c001341c:	83 ec 0c             	sub    esp,0xc
c001341f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013424:	0f 85 8e 00 00 00    	jne    c00134b8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001342a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013432:	0f 85 80 00 00 00    	jne    c00134b8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013438:	83 ec 0c             	sub    esp,0xc
c001343b:	68 84 29 02 c0       	push   0xc0022984
c0013440:	e8 03 8c 00 00       	call   c001c048 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	83 ec 04             	sub    esp,0x4
c001344b:	68 44 ec 01 c0       	push   0xc001ec44
c0013450:	68 84 29 02 c0       	push   0xc0022984
c0013455:	68 f8 bf 01 c0       	push   0xc001bff8
c001345a:	e8 33 64 ff ff       	call   c0009892 <__cxa_atexit>
c001345f:	83 c4 10             	add    esp,0x10
c0013462:	83 ec 0c             	sub    esp,0xc
c0013465:	68 78 29 02 c0       	push   0xc0022978
c001346a:	e8 d9 8b 00 00       	call   c001c048 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001346f:	83 c4 10             	add    esp,0x10
c0013472:	83 ec 04             	sub    esp,0x4
c0013475:	68 44 ec 01 c0       	push   0xc001ec44
c001347a:	68 78 29 02 c0       	push   0xc0022978
c001347f:	68 f8 bf 01 c0       	push   0xc001bff8
c0013484:	e8 09 64 ff ff       	call   c0009892 <__cxa_atexit>
c0013489:	83 c4 10             	add    esp,0x10
c001348c:	83 ec 0c             	sub    esp,0xc
c001348f:	68 6c 29 02 c0       	push   0xc002296c
c0013494:	e8 af 8b 00 00       	call   c001c048 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013499:	83 c4 10             	add    esp,0x10
c001349c:	83 ec 04             	sub    esp,0x4
c001349f:	68 44 ec 01 c0       	push   0xc001ec44
c00134a4:	68 6c 29 02 c0       	push   0xc002296c
c00134a9:	68 f8 bf 01 c0       	push   0xc001bff8
c00134ae:	e8 df 63 ff ff       	call   c0009892 <__cxa_atexit>
c00134b3:	83 c4 10             	add    esp,0x10
c00134b6:	66 90                	xchg   ax,ax
c00134b8:	90                   	nop
c00134b9:	83 c4 0c             	add    esp,0xc
c00134bc:	c3                   	ret    
c00134bd:	8d 76 00             	lea    esi,[esi+0x0]

c00134c0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00134c0:	83 ec 0c             	sub    esp,0xc
c00134c3:	83 ec 08             	sub    esp,0x8
c00134c6:	68 ff ff 00 00       	push   0xffff
c00134cb:	6a 01                	push   0x1
c00134cd:	e8 4a ff ff ff       	call   c001341c <__static_initialization_and_destruction_0(int, int)>
c00134d2:	83 c4 10             	add    esp,0x10
c00134d5:	83 c4 0c             	add    esp,0xc
c00134d8:	c3                   	ret    

c00134d9 <Vm::inbv(unsigned short)>:
c00134d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00134dd:	66 81 fa fe fe       	cmp    dx,0xfefe
c00134e2:	75 06                	jne    c00134ea <Vm::inbv(unsigned short)+0x11>
c00134e4:	a0 cc 29 02 c0       	mov    al,ds:0xc00229cc
c00134e9:	c3                   	ret    
c00134ea:	ec                   	in     al,dx
c00134eb:	c3                   	ret    

c00134ec <Vm::outbv(unsigned short, unsigned char)>:
c00134ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00134f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00134f4:	66 81 fa fe fe       	cmp    dx,0xfefe
c00134f9:	75 25                	jne    c0013520 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00134fb:	8b 0d cc 29 02 c0    	mov    ecx,DWORD PTR ds:0xc00229cc
c0013501:	8d 51 01             	lea    edx,[ecx+0x1]
c0013504:	88 81 e0 29 02 c0    	mov    BYTE PTR [ecx-0x3ffdd620],al
c001350a:	89 15 cc 29 02 c0    	mov    DWORD PTR ds:0xc00229cc,edx
c0013510:	83 fa 20             	cmp    edx,0x20
c0013513:	75 0c                	jne    c0013521 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013515:	c7 05 cc 29 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00229cc,0x1f
c001351f:	c3                   	ret    
c0013520:	ee                   	out    dx,al
c0013521:	c3                   	ret    

c0013522 <Vm::realToLinear(unsigned short, unsigned short)>:
c0013522:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013527:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001352c:	c1 e0 04             	shl    eax,0x4
c001352f:	01 d0                	add    eax,edx
c0013531:	c3                   	ret    

c0013532 <Vm::getSegment(unsigned int)>:
c0013532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013536:	c1 e8 10             	shr    eax,0x10
c0013539:	c3                   	ret    

c001353a <Vm::getOffset(unsigned int)>:
c001353a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001353e:	c3                   	ret    

c001353f <Vm::mainloop2()>:
c001353f:	83 ec 18             	sub    esp,0x18
c0013542:	fa                   	cli    
c0013543:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0013549:	6a 02                	push   0x2
c001354b:	c6 05 c5 29 02 c0 01 	mov    BYTE PTR ds:0xc00229c5,0x1
c0013552:	e8 19 f6 ff ff       	call   c0012b70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013557:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001355c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013560:	52                   	push   edx
c0013561:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013565:	52                   	push   edx
c0013566:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001356a:	52                   	push   edx
c001356b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001356f:	50                   	push   eax
c0013570:	e8 ba cc fe ff       	call   c000022f <goToVM86>
c0013575:	83 c4 2c             	add    esp,0x2c
c0013578:	c3                   	ret    

c0013579 <Vm::mainVm8086Loop(void*)>:
c0013579:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c001357e:	48                   	dec    eax
c001357f:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0013584:	75 01                	jne    c0013587 <Vm::mainVm8086Loop(void*)+0xe>
c0013586:	fb                   	sti    
c0013587:	eb b6                	jmp    c001353f <Vm::mainloop2()>

c0013589 <Vm::mainloop3(unsigned long)>:
c0013589:	83 ec 18             	sub    esp,0x18
c001358c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013590:	fa                   	cli    
c0013591:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0013597:	6a 02                	push   0x2
c0013599:	c6 05 c4 29 02 c0 01 	mov    BYTE PTR ds:0xc00229c4,0x1
c00135a0:	a3 c0 29 02 c0       	mov    ds:0xc00229c0,eax
c00135a5:	e8 c6 f5 ff ff       	call   c0012b70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00135aa:	83 c4 1c             	add    esp,0x1c
c00135ad:	eb 90                	jmp    c001353f <Vm::mainloop2()>

c00135af <Vm::initialise8086()>:
c00135af:	83 ec 0c             	sub    esp,0xc
c00135b2:	68 80 00 00 00       	push   0x80
c00135b7:	6a 00                	push   0x0
c00135b9:	68 79 35 01 c0       	push   0xc0013579
c00135be:	ff 35 90 29 02 c0    	push   DWORD PTR ds:0xc0022990
c00135c4:	e8 b3 f1 ff ff       	call   c001277c <Process::createThread(void (*)(void*), void*, int)>
c00135c9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00135d0:	a3 c8 29 02 c0       	mov    ds:0xc00229c8,eax
c00135d5:	68 00 01 00 00       	push   0x100
c00135da:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c00135df:	6a 00                	push   0x0
c00135e1:	6a 00                	push   0x0
c00135e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00135e9:	e8 b6 5a ff ff       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00135ee:	83 c4 2c             	add    esp,0x2c
c00135f1:	c3                   	ret    

c00135f2 <Vm::finish8086()>:
c00135f2:	53                   	push   ebx
c00135f3:	83 ec 08             	sub    esp,0x8
c00135f6:	fa                   	cli    
c00135f7:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c00135fd:	80 3d c4 29 02 c0 00 	cmp    BYTE PTR ds:0xc00229c4,0x0
c0013604:	75 15                	jne    c001361b <Vm::finish8086()+0x29>
c0013606:	e8 91 f3 ff ff       	call   c001299c <schedule()>
c001360b:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0013610:	48                   	dec    eax
c0013611:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0013616:	75 de                	jne    c00135f6 <Vm::finish8086()+0x4>
c0013618:	fb                   	sti    
c0013619:	eb db                	jmp    c00135f6 <Vm::finish8086()+0x4>
c001361b:	83 ec 0c             	sub    esp,0xc
c001361e:	8b 1d c0 29 02 c0    	mov    ebx,DWORD PTR ds:0xc00229c0
c0013624:	ff 35 c8 29 02 c0    	push   DWORD PTR ds:0xc00229c8
c001362a:	c6 05 c4 29 02 c0 00 	mov    BYTE PTR ds:0xc00229c4,0x0
c0013631:	e8 2a f8 ff ff       	call   c0012e60 <unblockTask(ThreadControlBlock*)>
c0013636:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c001363b:	83 c4 10             	add    esp,0x10
c001363e:	8d 50 ff             	lea    edx,[eax-0x1]
c0013641:	89 15 68 29 02 c0    	mov    DWORD PTR ds:0xc0022968,edx
c0013647:	85 d2                	test   edx,edx
c0013649:	75 01                	jne    c001364c <Vm::finish8086()+0x5a>
c001364b:	fb                   	sti    
c001364c:	89 d8                	mov    eax,ebx
c001364e:	83 c4 08             	add    esp,0x8
c0013651:	5b                   	pop    ebx
c0013652:	c3                   	ret    

c0013653 <Vm::getOutput8086(unsigned char*)>:
c0013653:	57                   	push   edi
c0013654:	8b 0d cc 29 02 c0    	mov    ecx,DWORD PTR ds:0xc00229cc
c001365a:	56                   	push   esi
c001365b:	be e0 29 02 c0       	mov    esi,0xc00229e0
c0013660:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013664:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013666:	a1 cc 29 02 c0       	mov    eax,ds:0xc00229cc
c001366b:	5e                   	pop    esi
c001366c:	c7 05 cc 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229cc,0x0
c0013676:	5f                   	pop    edi
c0013677:	c3                   	ret    

c0013678 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013678:	55                   	push   ebp
c0013679:	57                   	push   edi
c001367a:	56                   	push   esi
c001367b:	53                   	push   ebx
c001367c:	83 ec 0c             	sub    esp,0xc
c001367f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013683:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013687:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001368b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001368f:	fa                   	cli    
c0013690:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c0013696:	80 3d c5 29 02 c0 00 	cmp    BYTE PTR ds:0xc00229c5,0x0
c001369d:	75 15                	jne    c00136b4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001369f:	e8 f8 f2 ff ff       	call   c001299c <schedule()>
c00136a4:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00136a9:	48                   	dec    eax
c00136aa:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c00136af:	75 de                	jne    c001368f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00136b1:	fb                   	sti    
c00136b2:	eb db                	jmp    c001368f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00136b4:	a1 c8 29 02 c0       	mov    eax,ds:0xc00229c8
c00136b9:	c7 05 cc 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229cc,0x0
c00136c3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00136c7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00136cb:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00136cf:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00136d3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00136d7:	0f b7 ff             	movzx  edi,di
c00136da:	0f b7 f6             	movzx  esi,si
c00136dd:	50                   	push   eax
c00136de:	6a 20                	push   0x20
c00136e0:	6a 00                	push   0x0
c00136e2:	68 e0 29 02 c0       	push   0xc00229e0
c00136e7:	e8 04 ce fe ff       	call   c00004f0 <memset>
c00136ec:	5a                   	pop    edx
c00136ed:	59                   	pop    ecx
c00136ee:	57                   	push   edi
c00136ef:	56                   	push   esi
c00136f0:	e8 2d fe ff ff       	call   c0013522 <Vm::realToLinear(unsigned short, unsigned short)>
c00136f5:	83 c4 10             	add    esp,0x10
c00136f8:	89 c7                	mov    edi,eax
c00136fa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00136fe:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013702:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013704:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0013709:	c6 05 c5 29 02 c0 00 	mov    BYTE PTR ds:0xc00229c5,0x0
c0013710:	48                   	dec    eax
c0013711:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0013716:	75 01                	jne    c0013719 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0013718:	fb                   	sti    
c0013719:	83 ec 0c             	sub    esp,0xc
c001371c:	ff 35 c8 29 02 c0    	push   DWORD PTR ds:0xc00229c8
c0013722:	e8 39 f7 ff ff       	call   c0012e60 <unblockTask(ThreadControlBlock*)>
c0013727:	83 c4 1c             	add    esp,0x1c
c001372a:	b0 01                	mov    al,0x1
c001372c:	5b                   	pop    ebx
c001372d:	5e                   	pop    esi
c001372e:	5f                   	pop    edi
c001372f:	5d                   	pop    ebp
c0013730:	c3                   	ret    

c0013731 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013731:	55                   	push   ebp
c0013732:	57                   	push   edi
c0013733:	56                   	push   esi
c0013734:	53                   	push   ebx
c0013735:	83 ec 2c             	sub    esp,0x2c
c0013738:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001373c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0013740:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0013744:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013748:	fa                   	cli    
c0013749:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c001374f:	0f b6 35 c5 29 02 c0 	movzx  esi,BYTE PTR ds:0xc00229c5
c0013756:	89 f0                	mov    eax,esi
c0013758:	84 c0                	test   al,al
c001375a:	75 1d                	jne    c0013779 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001375c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013760:	e8 37 f2 ff ff       	call   c001299c <schedule()>
c0013765:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c001376a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001376e:	48                   	dec    eax
c001376f:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0013774:	75 d2                	jne    c0013748 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013776:	fb                   	sti    
c0013777:	eb cf                	jmp    c0013748 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013779:	a1 c8 29 02 c0       	mov    eax,ds:0xc00229c8
c001377e:	c7 05 cc 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229cc,0x0
c0013788:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001378c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0013790:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0013794:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0013798:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001379c:	50                   	push   eax
c001379d:	6a 20                	push   0x20
c001379f:	6a 00                	push   0x0
c00137a1:	68 e0 29 02 c0       	push   0xc00229e0
c00137a6:	e8 45 cd fe ff       	call   c00004f0 <memset>
c00137ab:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00137b2:	e8 5e 34 ff ff       	call   c0006c15 <malloc>
c00137b7:	83 c4 0c             	add    esp,0xc
c00137ba:	89 c3                	mov    ebx,eax
c00137bc:	ff 35 90 29 02 c0    	push   DWORD PTR ds:0xc0022990
c00137c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00137c6:	50                   	push   eax
c00137c7:	e8 82 67 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c00137cc:	83 c4 10             	add    esp,0x10
c00137cf:	85 db                	test   ebx,ebx
c00137d1:	75 0a                	jne    c00137dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00137d3:	83 ec 0c             	sub    esp,0xc
c00137d6:	68 54 e2 01 c0       	push   0xc001e254
c00137db:	eb 3e                	jmp    c001381b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00137dd:	50                   	push   eax
c00137de:	8d 44 24 17          	lea    eax,[esp+0x17]
c00137e2:	50                   	push   eax
c00137e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00137e7:	50                   	push   eax
c00137e8:	53                   	push   ebx
c00137e9:	e8 cc 6a ff ff       	call   c000a2ba <File::stat(unsigned long long*, bool*)>
c00137ee:	83 c4 10             	add    esp,0x10
c00137f1:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00137f6:	74 0a                	je     c0013802 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00137f8:	83 ec 0c             	sub    esp,0xc
c00137fb:	68 68 e2 01 c0       	push   0xc001e268
c0013800:	eb 19                	jmp    c001381b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0013802:	51                   	push   ecx
c0013803:	51                   	push   ecx
c0013804:	6a 01                	push   0x1
c0013806:	53                   	push   ebx
c0013807:	e8 02 68 ff ff       	call   c000a00e <File::open(FileOpenMode)>
c001380c:	83 c4 10             	add    esp,0x10
c001380f:	85 c0                	test   eax,eax
c0013811:	74 24                	je     c0013837 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0013813:	83 ec 0c             	sub    esp,0xc
c0013816:	68 81 e2 01 c0       	push   0xc001e281
c001381b:	e8 07 bd ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0013820:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0013825:	83 c4 10             	add    esp,0x10
c0013828:	48                   	dec    eax
c0013829:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c001382e:	85 c0                	test   eax,eax
c0013830:	75 01                	jne    c0013833 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0013832:	fb                   	sti    
c0013833:	31 f6                	xor    esi,esi
c0013835:	eb 58                	jmp    c001388f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0013837:	0f b7 ed             	movzx  ebp,bp
c001383a:	50                   	push   eax
c001383b:	0f b7 ff             	movzx  edi,di
c001383e:	50                   	push   eax
c001383f:	55                   	push   ebp
c0013840:	57                   	push   edi
c0013841:	e8 dc fc ff ff       	call   c0013522 <Vm::realToLinear(unsigned short, unsigned short)>
c0013846:	5a                   	pop    edx
c0013847:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013849:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001384d:	51                   	push   ecx
c001384e:	50                   	push   eax
c001384f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013853:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013857:	53                   	push   ebx
c0013858:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001385b:	83 c4 14             	add    esp,0x14
c001385e:	53                   	push   ebx
c001385f:	e8 08 68 ff ff       	call   c000a06c <File::close()>
c0013864:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0013869:	83 c4 10             	add    esp,0x10
c001386c:	48                   	dec    eax
c001386d:	c6 05 c5 29 02 c0 00 	mov    BYTE PTR ds:0xc00229c5,0x0
c0013874:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0013879:	85 c0                	test   eax,eax
c001387b:	75 01                	jne    c001387e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001387d:	fb                   	sti    
c001387e:	83 ec 0c             	sub    esp,0xc
c0013881:	ff 35 c8 29 02 c0    	push   DWORD PTR ds:0xc00229c8
c0013887:	e8 d4 f5 ff ff       	call   c0012e60 <unblockTask(ThreadControlBlock*)>
c001388c:	83 c4 10             	add    esp,0x10
c001388f:	83 c4 2c             	add    esp,0x2c
c0013892:	89 f0                	mov    eax,esi
c0013894:	5b                   	pop    ebx
c0013895:	5e                   	pop    esi
c0013896:	5f                   	pop    edi
c0013897:	5d                   	pop    ebp
c0013898:	c3                   	ret    

c0013899 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0013899:	57                   	push   edi
c001389a:	56                   	push   esi
c001389b:	53                   	push   ebx
c001389c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00138a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00138a8:	83 e8 06             	sub    eax,0x6
c00138ab:	0f b7 c0             	movzx  eax,ax
c00138ae:	50                   	push   eax
c00138af:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00138b4:	50                   	push   eax
c00138b5:	e8 68 fc ff ff       	call   c0013522 <Vm::realToLinear(unsigned short, unsigned short)>
c00138ba:	5a                   	pop    edx
c00138bb:	5e                   	pop    esi
c00138bc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00138bf:	8d 56 fa             	lea    edx,[esi-0x6]
c00138c2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00138c8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00138cb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00138ce:	83 c2 02             	add    edx,0x2
c00138d1:	66 89 10             	mov    WORD PTR [eax],dx
c00138d4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00138d7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00138db:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00138de:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00138e2:	89 d6                	mov    esi,edx
c00138e4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00138ea:	66 81 e6 ff fd       	and    si,0xfdff
c00138ef:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00138f3:	74 07                	je     c00138fc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00138f5:	89 d6                	mov    esi,edx
c00138f7:	66 81 ce 00 02       	or     si,0x200
c00138fc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0013900:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013905:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013909:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0013911:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0013914:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001391c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001391f:	5b                   	pop    ebx
c0013920:	5e                   	pop    esi
c0013921:	5f                   	pop    edi
c0013922:	c3                   	ret    

c0013923 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0013923:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013928:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001392d:	c1 e0 04             	shl    eax,0x4
c0013930:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0013933:	c3                   	ret    

c0013934 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0013934:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013939:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001393e:	c1 e0 04             	shl    eax,0x4
c0013941:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0013945:	c3                   	ret    

c0013946 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0013946:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001394b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013950:	c1 e0 04             	shl    eax,0x4
c0013953:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0013956:	c3                   	ret    

c0013957 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0013957:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001395c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013961:	c1 e0 04             	shl    eax,0x4
c0013964:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013968:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001396b:	c3                   	ret    

c001396c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001396c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013971:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013976:	c1 e0 04             	shl    eax,0x4
c0013979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001397d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0013981:	c3                   	ret    

c0013982 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0013982:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013987:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001398c:	c1 e0 04             	shl    eax,0x4
c001398f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013993:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0013996:	c3                   	ret    

c0013997 <Vm::faultHandler(regs*)>:
c0013997:	55                   	push   ebp
c0013998:	57                   	push   edi
c0013999:	56                   	push   esi
c001399a:	53                   	push   ebx
c001399b:	83 ec 1c             	sub    esp,0x1c
c001399e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00139a2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00139a5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00139a9:	0f b7 f8             	movzx  edi,ax
c00139ac:	52                   	push   edx
c00139ad:	0f b7 c0             	movzx  eax,ax
c00139b0:	50                   	push   eax
c00139b1:	e8 6c fb ff ff       	call   c0013522 <Vm::realToLinear(unsigned short, unsigned short)>
c00139b6:	5a                   	pop    edx
c00139b7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00139ba:	59                   	pop    ecx
c00139bb:	89 c1                	mov    ecx,eax
c00139bd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00139c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00139c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139cd:	0f b7 c5             	movzx  eax,bp
c00139d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139d4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00139d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139dc:	e8 41 fb ff ff       	call   c0013522 <Vm::realToLinear(unsigned short, unsigned short)>
c00139e1:	5e                   	pop    esi
c00139e2:	be 06 00 00 00       	mov    esi,0x6
c00139e7:	5a                   	pop    edx
c00139e8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00139ed:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00139f2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00139f5:	80 fa 9d             	cmp    dl,0x9d
c00139f8:	0f 84 2c 02 00 00    	je     c0013c2a <Vm::faultHandler(regs*)+0x293>
c00139fe:	0f 87 91 00 00 00    	ja     c0013a95 <Vm::faultHandler(regs*)+0xfe>
c0013a04:	80 fa 66             	cmp    dl,0x66
c0013a07:	0f 84 98 01 00 00    	je     c0013ba5 <Vm::faultHandler(regs*)+0x20e>
c0013a0d:	77 47                	ja     c0013a56 <Vm::faultHandler(regs*)+0xbf>
c0013a0f:	80 fa 36             	cmp    dl,0x36
c0013a12:	0f 84 80 01 00 00    	je     c0013b98 <Vm::faultHandler(regs*)+0x201>
c0013a18:	77 1a                	ja     c0013a34 <Vm::faultHandler(regs*)+0x9d>
c0013a1a:	80 fa 26             	cmp    dl,0x26
c0013a1d:	0f 84 4e 01 00 00    	je     c0013b71 <Vm::faultHandler(regs*)+0x1da>
c0013a23:	80 fa 2e             	cmp    dl,0x2e
c0013a26:	0f 85 e2 05 00 00    	jne    c001400e <Vm::faultHandler(regs*)+0x677>
c0013a2c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013a2f:	31 f6                	xor    esi,esi
c0013a31:	41                   	inc    ecx
c0013a32:	eb be                	jmp    c00139f2 <Vm::faultHandler(regs*)+0x5b>
c0013a34:	80 fa 64             	cmp    dl,0x64
c0013a37:	0f 84 41 01 00 00    	je     c0013b7e <Vm::faultHandler(regs*)+0x1e7>
c0013a3d:	0f 87 48 01 00 00    	ja     c0013b8b <Vm::faultHandler(regs*)+0x1f4>
c0013a43:	80 fa 3e             	cmp    dl,0x3e
c0013a46:	0f 85 c2 05 00 00    	jne    c001400e <Vm::faultHandler(regs*)+0x677>
c0013a4c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013a4f:	be 01 00 00 00       	mov    esi,0x1
c0013a54:	eb db                	jmp    c0013a31 <Vm::faultHandler(regs*)+0x9a>
c0013a56:	80 fa 6d             	cmp    dl,0x6d
c0013a59:	0f 84 ec 02 00 00    	je     c0013d4b <Vm::faultHandler(regs*)+0x3b4>
c0013a5f:	77 17                	ja     c0013a78 <Vm::faultHandler(regs*)+0xe1>
c0013a61:	80 fa 67             	cmp    dl,0x67
c0013a64:	0f 84 48 01 00 00    	je     c0013bb2 <Vm::faultHandler(regs*)+0x21b>
c0013a6a:	80 fa 6c             	cmp    dl,0x6c
c0013a6d:	0f 84 69 02 00 00    	je     c0013cdc <Vm::faultHandler(regs*)+0x345>
c0013a73:	e9 96 05 00 00       	jmp    c001400e <Vm::faultHandler(regs*)+0x677>
c0013a78:	80 fa 6f             	cmp    dl,0x6f
c0013a7b:	0f 84 f4 03 00 00    	je     c0013e75 <Vm::faultHandler(regs*)+0x4de>
c0013a81:	0f 82 59 03 00 00    	jb     c0013de0 <Vm::faultHandler(regs*)+0x449>
c0013a87:	80 fa 9c             	cmp    dl,0x9c
c0013a8a:	0f 84 2f 01 00 00    	je     c0013bbf <Vm::faultHandler(regs*)+0x228>
c0013a90:	e9 79 05 00 00       	jmp    c001400e <Vm::faultHandler(regs*)+0x677>
c0013a95:	80 fa ec             	cmp    dl,0xec
c0013a98:	0f 84 14 05 00 00    	je     c0013fb2 <Vm::faultHandler(regs*)+0x61b>
c0013a9e:	77 7b                	ja     c0013b1b <Vm::faultHandler(regs*)+0x184>
c0013aa0:	80 fa e4             	cmp    dl,0xe4
c0013aa3:	0f 84 93 04 00 00    	je     c0013f3c <Vm::faultHandler(regs*)+0x5a5>
c0013aa9:	77 53                	ja     c0013afe <Vm::faultHandler(regs*)+0x167>
c0013aab:	80 fa cd             	cmp    dl,0xcd
c0013aae:	0f 84 d9 01 00 00    	je     c0013c8d <Vm::faultHandler(regs*)+0x2f6>
c0013ab4:	80 fa cf             	cmp    dl,0xcf
c0013ab7:	0f 85 51 05 00 00    	jne    c001400e <Vm::faultHandler(regs*)+0x677>
c0013abd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013ac0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0013ac3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0013ac7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0013aca:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0013ace:	81 ca 00 02 02 00    	or     edx,0x20200
c0013ad4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013ad7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013adb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ae1:	66 c1 e8 09          	shr    ax,0x9
c0013ae5:	83 e0 01             	and    eax,0x1
c0013ae8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013aeb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013aee:	83 c0 06             	add    eax,0x6
c0013af1:	25 ff ff 00 00       	and    eax,0xffff
c0013af6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013af9:	e9 0c 05 00 00       	jmp    c001400a <Vm::faultHandler(regs*)+0x673>
c0013afe:	80 fa e6             	cmp    dl,0xe6
c0013b01:	0f 84 7f 04 00 00    	je     c0013f86 <Vm::faultHandler(regs*)+0x5ef>
c0013b07:	0f 82 4b 04 00 00    	jb     c0013f58 <Vm::faultHandler(regs*)+0x5c1>
c0013b0d:	80 fa e7             	cmp    dl,0xe7
c0013b10:	0f 84 87 04 00 00    	je     c0013f9d <Vm::faultHandler(regs*)+0x606>
c0013b16:	e9 f3 04 00 00       	jmp    c001400e <Vm::faultHandler(regs*)+0x677>
c0013b1b:	80 fa ef             	cmp    dl,0xef
c0013b1e:	0f 84 d1 04 00 00    	je     c0013ff5 <Vm::faultHandler(regs*)+0x65e>
c0013b24:	77 28                	ja     c0013b4e <Vm::faultHandler(regs*)+0x1b7>
c0013b26:	80 fa ed             	cmp    dl,0xed
c0013b29:	0f 84 9f 04 00 00    	je     c0013fce <Vm::faultHandler(regs*)+0x637>
c0013b2f:	80 fa ee             	cmp    dl,0xee
c0013b32:	0f 85 d6 04 00 00    	jne    c001400e <Vm::faultHandler(regs*)+0x677>
c0013b38:	50                   	push   eax
c0013b39:	50                   	push   eax
c0013b3a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013b3e:	50                   	push   eax
c0013b3f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013b43:	50                   	push   eax
c0013b44:	e8 a3 f9 ff ff       	call   c00134ec <Vm::outbv(unsigned short, unsigned char)>
c0013b49:	e9 9f 04 00 00       	jmp    c0013fed <Vm::faultHandler(regs*)+0x656>
c0013b4e:	80 fa fa             	cmp    dl,0xfa
c0013b51:	0f 84 69 01 00 00    	je     c0013cc0 <Vm::faultHandler(regs*)+0x329>
c0013b57:	80 fa fb             	cmp    dl,0xfb
c0013b5a:	0f 84 6e 01 00 00    	je     c0013cce <Vm::faultHandler(regs*)+0x337>
c0013b60:	80 fa f3             	cmp    dl,0xf3
c0013b63:	0f 85 a5 04 00 00    	jne    c001400e <Vm::faultHandler(regs*)+0x677>
c0013b69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b6c:	e9 c0 fe ff ff       	jmp    c0013a31 <Vm::faultHandler(regs*)+0x9a>
c0013b71:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b74:	be 02 00 00 00       	mov    esi,0x2
c0013b79:	e9 b3 fe ff ff       	jmp    c0013a31 <Vm::faultHandler(regs*)+0x9a>
c0013b7e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b81:	be 03 00 00 00       	mov    esi,0x3
c0013b86:	e9 a6 fe ff ff       	jmp    c0013a31 <Vm::faultHandler(regs*)+0x9a>
c0013b8b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b8e:	be 04 00 00 00       	mov    esi,0x4
c0013b93:	e9 99 fe ff ff       	jmp    c0013a31 <Vm::faultHandler(regs*)+0x9a>
c0013b98:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b9b:	be 05 00 00 00       	mov    esi,0x5
c0013ba0:	e9 8c fe ff ff       	jmp    c0013a31 <Vm::faultHandler(regs*)+0x9a>
c0013ba5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013ba8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0013bad:	e9 7f fe ff ff       	jmp    c0013a31 <Vm::faultHandler(regs*)+0x9a>
c0013bb2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013bb5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0013bba:	e9 72 fe ff ff       	jmp    c0013a31 <Vm::faultHandler(regs*)+0x9a>
c0013bbf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0013bc2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013bc6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013bcb:	74 30                	je     c0013bfd <Vm::faultHandler(regs*)+0x266>
c0013bcd:	83 e9 04             	sub    ecx,0x4
c0013bd0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013bd6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013bdc:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013bdf:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013be2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013be8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013bec:	0f 84 15 04 00 00    	je     c0014007 <Vm::faultHandler(regs*)+0x670>
c0013bf2:	80 ce 02             	or     dh,0x2
c0013bf5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013bf8:	e9 0a 04 00 00       	jmp    c0014007 <Vm::faultHandler(regs*)+0x670>
c0013bfd:	83 e9 02             	sub    ecx,0x2
c0013c00:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013c06:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013c09:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013c0d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013c13:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013c17:	74 05                	je     c0013c1e <Vm::faultHandler(regs*)+0x287>
c0013c19:	80 ce 02             	or     dh,0x2
c0013c1c:	eb 03                	jmp    c0013c21 <Vm::faultHandler(regs*)+0x28a>
c0013c1e:	80 e6 fd             	and    dh,0xfd
c0013c21:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013c25:	e9 dd 03 00 00       	jmp    c0014007 <Vm::faultHandler(regs*)+0x670>
c0013c2a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013c2f:	74 2a                	je     c0013c5b <Vm::faultHandler(regs*)+0x2c4>
c0013c31:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c33:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013c39:	81 ca 00 02 02 00    	or     edx,0x20200
c0013c3f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c44:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013c4a:	c1 e8 09             	shr    eax,0x9
c0013c4d:	83 e0 01             	and    eax,0x1
c0013c50:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013c53:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013c56:	83 c0 04             	add    eax,0x4
c0013c59:	eb 25                	jmp    c0013c80 <Vm::faultHandler(regs*)+0x2e9>
c0013c5b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013c5e:	81 ca 00 02 02 00    	or     edx,0x20200
c0013c64:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013c67:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013c6a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013c70:	66 c1 e8 09          	shr    ax,0x9
c0013c74:	83 e0 01             	and    eax,0x1
c0013c77:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013c7a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013c7d:	83 c0 02             	add    eax,0x2
c0013c80:	25 ff ff 00 00       	and    eax,0xffff
c0013c85:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013c88:	e9 7a 03 00 00       	jmp    c0014007 <Vm::faultHandler(regs*)+0x670>
c0013c8d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013c91:	3c ee                	cmp    al,0xee
c0013c93:	75 10                	jne    c0013ca5 <Vm::faultHandler(regs*)+0x30e>
c0013c95:	83 ec 0c             	sub    esp,0xc
c0013c98:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013c9b:	e8 e9 f8 ff ff       	call   c0013589 <Vm::mainloop3(unsigned long)>
c0013ca0:	e9 4b 03 00 00       	jmp    c0013ff0 <Vm::faultHandler(regs*)+0x659>
c0013ca5:	83 ec 0c             	sub    esp,0xc
c0013ca8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb0:	51                   	push   ecx
c0013cb1:	50                   	push   eax
c0013cb2:	53                   	push   ebx
c0013cb3:	e8 e1 fb ff ff       	call   c0013899 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0013cb8:	83 c4 20             	add    esp,0x20
c0013cbb:	e9 4a 03 00 00       	jmp    c001400a <Vm::faultHandler(regs*)+0x673>
c0013cc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cc5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013cc9:	e9 39 03 00 00       	jmp    c0014007 <Vm::faultHandler(regs*)+0x670>
c0013cce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cd3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0013cd7:	e9 2b 03 00 00       	jmp    c0014007 <Vm::faultHandler(regs*)+0x670>
c0013cdc:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013cdf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013ce4:	74 2b                	je     c0013d11 <Vm::faultHandler(regs*)+0x37a>
c0013ce6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0013ced:	76 22                	jbe    c0013d11 <Vm::faultHandler(regs*)+0x37a>
c0013cef:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013cf3:	50                   	push   eax
c0013cf4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013cf8:	50                   	push   eax
c0013cf9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013cfd:	50                   	push   eax
c0013cfe:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013d02:	50                   	push   eax
c0013d03:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d07:	50                   	push   eax
c0013d08:	6a 6c                	push   0x6c
c0013d0a:	6a 6c                	push   0x6c
c0013d0c:	e9 b9 01 00 00       	jmp    c0013eca <Vm::faultHandler(regs*)+0x533>
c0013d11:	83 ec 0c             	sub    esp,0xc
c0013d14:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013d18:	0f b7 f6             	movzx  esi,si
c0013d1b:	50                   	push   eax
c0013d1c:	e8 b8 f7 ff ff       	call   c00134d9 <Vm::inbv(unsigned short)>
c0013d21:	83 c4 0c             	add    esp,0xc
c0013d24:	0f b6 c0             	movzx  eax,al
c0013d27:	50                   	push   eax
c0013d28:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0013d2c:	50                   	push   eax
c0013d2d:	56                   	push   esi
c0013d2e:	e8 24 fc ff ff       	call   c0013957 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0013d33:	83 c4 10             	add    esp,0x10
c0013d36:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013d39:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013d3d:	74 03                	je     c0013d42 <Vm::faultHandler(regs*)+0x3ab>
c0013d3f:	48                   	dec    eax
c0013d40:	eb 01                	jmp    c0013d43 <Vm::faultHandler(regs*)+0x3ac>
c0013d42:	40                   	inc    eax
c0013d43:	0f b7 c0             	movzx  eax,ax
c0013d46:	e9 8d 00 00 00       	jmp    c0013dd8 <Vm::faultHandler(regs*)+0x441>
c0013d4b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013d4e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013d51:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013d56:	74 29                	je     c0013d81 <Vm::faultHandler(regs*)+0x3ea>
c0013d58:	3d ff ff 00 00       	cmp    eax,0xffff
c0013d5d:	76 22                	jbe    c0013d81 <Vm::faultHandler(regs*)+0x3ea>
c0013d5f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013d63:	50                   	push   eax
c0013d64:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013d68:	50                   	push   eax
c0013d69:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013d6d:	50                   	push   eax
c0013d6e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013d72:	50                   	push   eax
c0013d73:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d77:	50                   	push   eax
c0013d78:	6a 6d                	push   0x6d
c0013d7a:	6a 6d                	push   0x6d
c0013d7c:	e9 49 01 00 00       	jmp    c0013eca <Vm::faultHandler(regs*)+0x533>
c0013d81:	0f b7 c8             	movzx  ecx,ax
c0013d84:	0f b7 f6             	movzx  esi,si
c0013d87:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013d8a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013d8f:	74 20                	je     c0013db1 <Vm::faultHandler(regs*)+0x41a>
c0013d91:	ed                   	in     eax,dx
c0013d92:	55                   	push   ebp
c0013d93:	50                   	push   eax
c0013d94:	51                   	push   ecx
c0013d95:	56                   	push   esi
c0013d96:	e8 e7 fb ff ff       	call   c0013982 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0013d9b:	83 c4 10             	add    esp,0x10
c0013d9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013da1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013da5:	74 05                	je     c0013dac <Vm::faultHandler(regs*)+0x415>
c0013da7:	83 e8 04             	sub    eax,0x4
c0013daa:	eb 27                	jmp    c0013dd3 <Vm::faultHandler(regs*)+0x43c>
c0013dac:	83 c0 04             	add    eax,0x4
c0013daf:	eb 22                	jmp    c0013dd3 <Vm::faultHandler(regs*)+0x43c>
c0013db1:	66 ed                	in     ax,dx
c0013db3:	0f b7 c0             	movzx  eax,ax
c0013db6:	57                   	push   edi
c0013db7:	50                   	push   eax
c0013db8:	51                   	push   ecx
c0013db9:	56                   	push   esi
c0013dba:	e8 ad fb ff ff       	call   c001396c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0013dbf:	83 c4 10             	add    esp,0x10
c0013dc2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013dc5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013dc9:	74 05                	je     c0013dd0 <Vm::faultHandler(regs*)+0x439>
c0013dcb:	83 e8 02             	sub    eax,0x2
c0013dce:	eb 03                	jmp    c0013dd3 <Vm::faultHandler(regs*)+0x43c>
c0013dd0:	83 c0 02             	add    eax,0x2
c0013dd3:	25 ff ff 00 00       	and    eax,0xffff
c0013dd8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0013ddb:	e9 27 02 00 00       	jmp    c0014007 <Vm::faultHandler(regs*)+0x670>
c0013de0:	8d 46 ff             	lea    eax,[esi-0x1]
c0013de3:	3c 05                	cmp    al,0x5
c0013de5:	77 24                	ja     c0013e0b <Vm::faultHandler(regs*)+0x474>
c0013de7:	0f b6 c0             	movzx  eax,al
c0013dea:	ff 24 85 f4 e2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1d0c]
c0013df1:	0f b7 fd             	movzx  edi,bp
c0013df4:	eb 15                	jmp    c0013e0b <Vm::faultHandler(regs*)+0x474>
c0013df6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0013dfa:	eb 0f                	jmp    c0013e0b <Vm::faultHandler(regs*)+0x474>
c0013dfc:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0013e00:	eb 09                	jmp    c0013e0b <Vm::faultHandler(regs*)+0x474>
c0013e02:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0013e06:	eb 03                	jmp    c0013e0b <Vm::faultHandler(regs*)+0x474>
c0013e08:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0013e0b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013e0e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013e13:	74 29                	je     c0013e3e <Vm::faultHandler(regs*)+0x4a7>
c0013e15:	3d ff ff 00 00       	cmp    eax,0xffff
c0013e1a:	76 22                	jbe    c0013e3e <Vm::faultHandler(regs*)+0x4a7>
c0013e1c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013e20:	50                   	push   eax
c0013e21:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013e25:	50                   	push   eax
c0013e26:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013e2a:	50                   	push   eax
c0013e2b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013e2f:	50                   	push   eax
c0013e30:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013e34:	50                   	push   eax
c0013e35:	6a 6e                	push   0x6e
c0013e37:	6a 6e                	push   0x6e
c0013e39:	e9 8c 00 00 00       	jmp    c0013eca <Vm::faultHandler(regs*)+0x533>
c0013e3e:	0f b7 c0             	movzx  eax,ax
c0013e41:	52                   	push   edx
c0013e42:	52                   	push   edx
c0013e43:	50                   	push   eax
c0013e44:	57                   	push   edi
c0013e45:	e8 d9 fa ff ff       	call   c0013923 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0013e4a:	59                   	pop    ecx
c0013e4b:	0f b6 c0             	movzx  eax,al
c0013e4e:	5e                   	pop    esi
c0013e4f:	50                   	push   eax
c0013e50:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013e54:	50                   	push   eax
c0013e55:	e8 92 f6 ff ff       	call   c00134ec <Vm::outbv(unsigned short, unsigned char)>
c0013e5a:	83 c4 10             	add    esp,0x10
c0013e5d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013e60:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013e64:	74 03                	je     c0013e69 <Vm::faultHandler(regs*)+0x4d2>
c0013e66:	48                   	dec    eax
c0013e67:	eb 01                	jmp    c0013e6a <Vm::faultHandler(regs*)+0x4d3>
c0013e69:	40                   	inc    eax
c0013e6a:	0f b7 c0             	movzx  eax,ax
c0013e6d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0013e70:	e9 92 01 00 00       	jmp    c0014007 <Vm::faultHandler(regs*)+0x670>
c0013e75:	8d 46 ff             	lea    eax,[esi-0x1]
c0013e78:	3c 05                	cmp    al,0x5
c0013e7a:	77 1f                	ja     c0013e9b <Vm::faultHandler(regs*)+0x504>
c0013e7c:	0f b6 c0             	movzx  eax,al
c0013e7f:	ff 24 85 0c e3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1cf4]
c0013e86:	89 ef                	mov    edi,ebp
c0013e88:	eb 11                	jmp    c0013e9b <Vm::faultHandler(regs*)+0x504>
c0013e8a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0013e8d:	eb 0c                	jmp    c0013e9b <Vm::faultHandler(regs*)+0x504>
c0013e8f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0013e92:	eb 07                	jmp    c0013e9b <Vm::faultHandler(regs*)+0x504>
c0013e94:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0013e97:	eb 02                	jmp    c0013e9b <Vm::faultHandler(regs*)+0x504>
c0013e99:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0013e9b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0013e9e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013ea3:	74 37                	je     c0013edc <Vm::faultHandler(regs*)+0x545>
c0013ea5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0013eab:	76 2f                	jbe    c0013edc <Vm::faultHandler(regs*)+0x545>
c0013ead:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013eb1:	50                   	push   eax
c0013eb2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013eb6:	50                   	push   eax
c0013eb7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013ebb:	50                   	push   eax
c0013ebc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013ec0:	50                   	push   eax
c0013ec1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013ec5:	50                   	push   eax
c0013ec6:	6a 6f                	push   0x6f
c0013ec8:	6a 6f                	push   0x6f
c0013eca:	68 9a e2 01 c0       	push   0xc001e29a
c0013ecf:	e8 04 5b ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0013ed4:	83 c4 20             	add    esp,0x20
c0013ed7:	e9 86 01 00 00       	jmp    c0014062 <Vm::faultHandler(regs*)+0x6cb>
c0013edc:	0f b7 d7             	movzx  edx,di
c0013edf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0013ee2:	0f b7 c6             	movzx  eax,si
c0013ee5:	81 e1 00 04 00 00    	and    ecx,0x400
c0013eeb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0013eee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ef3:	74 1d                	je     c0013f12 <Vm::faultHandler(regs*)+0x57b>
c0013ef5:	55                   	push   ebp
c0013ef6:	55                   	push   ebp
c0013ef7:	50                   	push   eax
c0013ef8:	52                   	push   edx
c0013ef9:	e8 48 fa ff ff       	call   c0013946 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0013efe:	83 c4 10             	add    esp,0x10
c0013f01:	89 fa                	mov    edx,edi
c0013f03:	ef                   	out    dx,eax
c0013f04:	85 c9                	test   ecx,ecx
c0013f06:	74 05                	je     c0013f0d <Vm::faultHandler(regs*)+0x576>
c0013f08:	83 ee 04             	sub    esi,0x4
c0013f0b:	eb 21                	jmp    c0013f2e <Vm::faultHandler(regs*)+0x597>
c0013f0d:	83 c6 04             	add    esi,0x4
c0013f10:	eb 1c                	jmp    c0013f2e <Vm::faultHandler(regs*)+0x597>
c0013f12:	55                   	push   ebp
c0013f13:	55                   	push   ebp
c0013f14:	50                   	push   eax
c0013f15:	52                   	push   edx
c0013f16:	e8 19 fa ff ff       	call   c0013934 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0013f1b:	83 c4 10             	add    esp,0x10
c0013f1e:	89 fa                	mov    edx,edi
c0013f20:	66 ef                	out    dx,ax
c0013f22:	85 c9                	test   ecx,ecx
c0013f24:	74 05                	je     c0013f2b <Vm::faultHandler(regs*)+0x594>
c0013f26:	83 ee 02             	sub    esi,0x2
c0013f29:	eb 03                	jmp    c0013f2e <Vm::faultHandler(regs*)+0x597>
c0013f2b:	83 c6 02             	add    esi,0x2
c0013f2e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0013f34:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0013f37:	e9 cb 00 00 00       	jmp    c0014007 <Vm::faultHandler(regs*)+0x670>
c0013f3c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013f43:	83 ec 0c             	sub    esp,0xc
c0013f46:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013f4a:	50                   	push   eax
c0013f4b:	e8 89 f5 ff ff       	call   c00134d9 <Vm::inbv(unsigned short)>
c0013f50:	0f b6 c0             	movzx  eax,al
c0013f53:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013f56:	eb 3f                	jmp    c0013f97 <Vm::faultHandler(regs*)+0x600>
c0013f58:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013f5d:	74 07                	je     c0013f66 <Vm::faultHandler(regs*)+0x5cf>
c0013f5f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013f63:	ed                   	in     eax,dx
c0013f64:	eb 14                	jmp    c0013f7a <Vm::faultHandler(regs*)+0x5e3>
c0013f66:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0013f69:	66 31 f6             	xor    si,si
c0013f6c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0013f6f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013f73:	66 ed                	in     ax,dx
c0013f75:	0f b7 c0             	movzx  eax,ax
c0013f78:	09 f0                	or     eax,esi
c0013f7a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013f7d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013f81:	e9 84 00 00 00       	jmp    c001400a <Vm::faultHandler(regs*)+0x673>
c0013f86:	52                   	push   edx
c0013f87:	52                   	push   edx
c0013f88:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013f8c:	50                   	push   eax
c0013f8d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013f91:	50                   	push   eax
c0013f92:	e8 55 f5 ff ff       	call   c00134ec <Vm::outbv(unsigned short, unsigned char)>
c0013f97:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013f9b:	eb 53                	jmp    c0013ff0 <Vm::faultHandler(regs*)+0x659>
c0013f9d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013fa0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013fa4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013fa9:	74 03                	je     c0013fae <Vm::faultHandler(regs*)+0x617>
c0013fab:	ef                   	out    dx,eax
c0013fac:	eb cf                	jmp    c0013f7d <Vm::faultHandler(regs*)+0x5e6>
c0013fae:	66 ef                	out    dx,ax
c0013fb0:	eb cb                	jmp    c0013f7d <Vm::faultHandler(regs*)+0x5e6>
c0013fb2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013fb9:	83 ec 0c             	sub    esp,0xc
c0013fbc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013fc0:	50                   	push   eax
c0013fc1:	e8 13 f5 ff ff       	call   c00134d9 <Vm::inbv(unsigned short)>
c0013fc6:	0f b6 c0             	movzx  eax,al
c0013fc9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013fcc:	eb 1f                	jmp    c0013fed <Vm::faultHandler(regs*)+0x656>
c0013fce:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013fd1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013fd6:	74 03                	je     c0013fdb <Vm::faultHandler(regs*)+0x644>
c0013fd8:	ed                   	in     eax,dx
c0013fd9:	eb 0d                	jmp    c0013fe8 <Vm::faultHandler(regs*)+0x651>
c0013fdb:	66 ed                	in     ax,dx
c0013fdd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0013fe0:	0f b7 c0             	movzx  eax,ax
c0013fe3:	66 31 d2             	xor    dx,dx
c0013fe6:	09 d0                	or     eax,edx
c0013fe8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013feb:	eb 1a                	jmp    c0014007 <Vm::faultHandler(regs*)+0x670>
c0013fed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013ff0:	83 c4 10             	add    esp,0x10
c0013ff3:	eb 15                	jmp    c001400a <Vm::faultHandler(regs*)+0x673>
c0013ff5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013ff8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013ffb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014000:	74 03                	je     c0014005 <Vm::faultHandler(regs*)+0x66e>
c0014002:	ef                   	out    dx,eax
c0014003:	eb 02                	jmp    c0014007 <Vm::faultHandler(regs*)+0x670>
c0014005:	66 ef                	out    dx,ax
c0014007:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001400a:	b0 01                	mov    al,0x1
c001400c:	eb 56                	jmp    c0014064 <Vm::faultHandler(regs*)+0x6cd>
c001400e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014012:	50                   	push   eax
c0014013:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014017:	50                   	push   eax
c0014018:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001401c:	50                   	push   eax
c001401d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014021:	50                   	push   eax
c0014022:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014026:	50                   	push   eax
c0014027:	52                   	push   edx
c0014028:	52                   	push   edx
c0014029:	68 c7 e2 01 c0       	push   0xc001e2c7
c001402e:	e8 a5 59 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0014033:	83 c4 20             	add    esp,0x20
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	6a 60                	push   0x60
c001403b:	e8 99 f4 ff ff       	call   c00134d9 <Vm::inbv(unsigned short)>
c0014040:	83 c4 10             	add    esp,0x10
c0014043:	3c 1c                	cmp    al,0x1c
c0014045:	74 04                	je     c001404b <Vm::faultHandler(regs*)+0x6b4>
c0014047:	3c 5a                	cmp    al,0x5a
c0014049:	75 eb                	jne    c0014036 <Vm::faultHandler(regs*)+0x69f>
c001404b:	3c 5a                	cmp    al,0x5a
c001404d:	74 04                	je     c0014053 <Vm::faultHandler(regs*)+0x6bc>
c001404f:	3c 1c                	cmp    al,0x1c
c0014051:	75 0f                	jne    c0014062 <Vm::faultHandler(regs*)+0x6cb>
c0014053:	83 ec 0c             	sub    esp,0xc
c0014056:	6a 60                	push   0x60
c0014058:	e8 7c f4 ff ff       	call   c00134d9 <Vm::inbv(unsigned short)>
c001405d:	83 c4 10             	add    esp,0x10
c0014060:	eb e9                	jmp    c001404b <Vm::faultHandler(regs*)+0x6b4>
c0014062:	31 c0                	xor    eax,eax
c0014064:	83 c4 1c             	add    esp,0x1c
c0014067:	5b                   	pop    ebx
c0014068:	5e                   	pop    esi
c0014069:	5f                   	pop    edi
c001406a:	5d                   	pop    ebp
c001406b:	c3                   	ret    

c001406c <noCopro(unsigned long)>:
c001406c:	c3                   	ret    

c001406d <nmiHandler(regs*, void*)>:
c001406d:	83 ec 0c             	sub    esp,0xc
c0014070:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0014075:	83 ec 0c             	sub    esp,0xc
c0014078:	50                   	push   eax
c0014079:	e8 78 23 ff ff       	call   c00063f6 <Computer::handleNMI()>
c001407e:	83 c4 10             	add    esp,0x10
c0014081:	90                   	nop
c0014082:	83 c4 0c             	add    esp,0xc
c0014085:	c3                   	ret    

c0014086 <doubleFault(regs*, void*)>:
c0014086:	55                   	push   ebp
c0014087:	89 e5                	mov    ebp,esp
c0014089:	83 ec 08             	sub    esp,0x8
c001408c:	83 ec 0c             	sub    esp,0xc
c001408f:	68 24 e3 01 c0       	push   0xc001e324
c0014094:	e8 8e b4 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0014099:	83 c4 10             	add    esp,0x10
c001409c:	90                   	nop
c001409d:	c9                   	leave  
c001409e:	c3                   	ret    

c001409f <displayDebugInfo(regs*)>:
c001409f:	83 ec 1c             	sub    esp,0x1c
c00140a2:	0f 20 c0             	mov    eax,cr0
c00140a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140a9:	0f 20 d0             	mov    eax,cr2
c00140ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140b0:	0f 20 d8             	mov    eax,cr3
c00140b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140b7:	0f 20 e0             	mov    eax,cr4
c00140ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00140bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00140c4:	83 ec 08             	sub    esp,0x8
c00140c7:	50                   	push   eax
c00140c8:	68 40 e3 01 c0       	push   0xc001e340
c00140cd:	e8 06 59 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00140d2:	83 c4 10             	add    esp,0x10
c00140d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140d9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00140dc:	83 ec 08             	sub    esp,0x8
c00140df:	50                   	push   eax
c00140e0:	68 31 e3 01 c0       	push   0xc001e331
c00140e5:	e8 ee 58 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00140ea:	83 c4 10             	add    esp,0x10
c00140ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140f1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00140f4:	83 ec 08             	sub    esp,0x8
c00140f7:	50                   	push   eax
c00140f8:	68 3c e3 01 c0       	push   0xc001e33c
c00140fd:	e8 d6 58 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0014102:	83 c4 10             	add    esp,0x10
c0014105:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014109:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001410c:	83 ec 08             	sub    esp,0x8
c001410f:	50                   	push   eax
c0014110:	68 4b e3 01 c0       	push   0xc001e34b
c0014115:	e8 be 58 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001411a:	83 c4 10             	add    esp,0x10
c001411d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014121:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014124:	83 ec 08             	sub    esp,0x8
c0014127:	50                   	push   eax
c0014128:	68 56 e3 01 c0       	push   0xc001e356
c001412d:	e8 a6 58 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0014132:	83 c4 10             	add    esp,0x10
c0014135:	83 ec 08             	sub    esp,0x8
c0014138:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001413c:	68 61 e3 01 c0       	push   0xc001e361
c0014141:	e8 92 58 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0014146:	83 c4 10             	add    esp,0x10
c0014149:	83 ec 08             	sub    esp,0x8
c001414c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014150:	68 6c e3 01 c0       	push   0xc001e36c
c0014155:	e8 7e 58 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001415a:	83 c4 10             	add    esp,0x10
c001415d:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0014162:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014168:	83 ec 0c             	sub    esp,0xc
c001416b:	50                   	push   eax
c001416c:	e8 d4 37 ff ff       	call   c0007945 <setActiveTerminal(VgaText*)>
c0014171:	83 c4 10             	add    esp,0x10
c0014174:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0014179:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001417f:	83 ec 08             	sub    esp,0x8
c0014182:	68 77 e3 01 c0       	push   0xc001e377
c0014187:	50                   	push   eax
c0014188:	e8 f7 3a ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c001418d:	83 c4 10             	add    esp,0x10
c0014190:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0014195:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001419b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00141a0:	8b 12                	mov    edx,DWORD PTR [edx]
c00141a2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00141a5:	83 c2 0c             	add    edx,0xc
c00141a8:	83 ec 08             	sub    esp,0x8
c00141ab:	52                   	push   edx
c00141ac:	50                   	push   eax
c00141ad:	e8 d2 3a ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c00141b2:	83 c4 10             	add    esp,0x10
c00141b5:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c00141ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141c0:	83 ec 08             	sub    esp,0x8
c00141c3:	68 80 e3 01 c0       	push   0xc001e380
c00141c8:	50                   	push   eax
c00141c9:	e8 b6 3a ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c00141ce:	83 c4 10             	add    esp,0x10
c00141d1:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c00141d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141e0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00141e3:	83 ec 08             	sub    esp,0x8
c00141e6:	52                   	push   edx
c00141e7:	50                   	push   eax
c00141e8:	e8 51 3a ff ff       	call   c0007c3e <VgaText::putx(unsigned int)>
c00141ed:	83 c4 10             	add    esp,0x10
c00141f0:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c00141f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141fb:	83 ec 08             	sub    esp,0x8
c00141fe:	68 88 e3 01 c0       	push   0xc001e388
c0014203:	50                   	push   eax
c0014204:	e8 7b 3a ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c0014209:	83 c4 10             	add    esp,0x10
c001420c:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0014211:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014217:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001421b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001421e:	83 ec 08             	sub    esp,0x8
c0014221:	52                   	push   edx
c0014222:	50                   	push   eax
c0014223:	e8 16 3a ff ff       	call   c0007c3e <VgaText::putx(unsigned int)>
c0014228:	83 c4 10             	add    esp,0x10
c001422b:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0014230:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014236:	83 ec 08             	sub    esp,0x8
c0014239:	68 90 e3 01 c0       	push   0xc001e390
c001423e:	50                   	push   eax
c001423f:	e8 40 3a ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c0014244:	83 c4 10             	add    esp,0x10
c0014247:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c001424c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014252:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014256:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014259:	83 ec 08             	sub    esp,0x8
c001425c:	52                   	push   edx
c001425d:	50                   	push   eax
c001425e:	e8 db 39 ff ff       	call   c0007c3e <VgaText::putx(unsigned int)>
c0014263:	83 c4 10             	add    esp,0x10
c0014266:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c001426b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014271:	83 ec 08             	sub    esp,0x8
c0014274:	68 98 e3 01 c0       	push   0xc001e398
c0014279:	50                   	push   eax
c001427a:	e8 05 3a ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0014287:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001428d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014291:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014294:	83 ec 08             	sub    esp,0x8
c0014297:	52                   	push   edx
c0014298:	50                   	push   eax
c0014299:	e8 a0 39 ff ff       	call   c0007c3e <VgaText::putx(unsigned int)>
c001429e:	83 c4 10             	add    esp,0x10
c00142a1:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c00142a6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142ac:	83 ec 08             	sub    esp,0x8
c00142af:	68 a0 e3 01 c0       	push   0xc001e3a0
c00142b4:	50                   	push   eax
c00142b5:	e8 ca 39 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c00142ba:	83 c4 10             	add    esp,0x10
c00142bd:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c00142c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142cc:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00142cf:	83 ec 08             	sub    esp,0x8
c00142d2:	52                   	push   edx
c00142d3:	50                   	push   eax
c00142d4:	e8 65 39 ff ff       	call   c0007c3e <VgaText::putx(unsigned int)>
c00142d9:	83 c4 10             	add    esp,0x10
c00142dc:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c00142e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142e7:	83 ec 08             	sub    esp,0x8
c00142ea:	68 a8 e3 01 c0       	push   0xc001e3a8
c00142ef:	50                   	push   eax
c00142f0:	e8 8f 39 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c00142f5:	83 c4 10             	add    esp,0x10
c00142f8:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c00142fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014303:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014307:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001430a:	83 ec 08             	sub    esp,0x8
c001430d:	52                   	push   edx
c001430e:	50                   	push   eax
c001430f:	e8 2a 39 ff ff       	call   c0007c3e <VgaText::putx(unsigned int)>
c0014314:	83 c4 10             	add    esp,0x10
c0014317:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c001431c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014322:	83 ec 08             	sub    esp,0x8
c0014325:	68 b0 e3 01 c0       	push   0xc001e3b0
c001432a:	50                   	push   eax
c001432b:	e8 54 39 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c0014330:	83 c4 10             	add    esp,0x10
c0014333:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0014338:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001433e:	83 ec 08             	sub    esp,0x8
c0014341:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014345:	50                   	push   eax
c0014346:	e8 f3 38 ff ff       	call   c0007c3e <VgaText::putx(unsigned int)>
c001434b:	83 c4 10             	add    esp,0x10
c001434e:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0014353:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014359:	83 ec 08             	sub    esp,0x8
c001435c:	68 b9 e3 01 c0       	push   0xc001e3b9
c0014361:	50                   	push   eax
c0014362:	e8 1d 39 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c0014367:	83 c4 10             	add    esp,0x10
c001436a:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c001436f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014375:	83 ec 08             	sub    esp,0x8
c0014378:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001437c:	50                   	push   eax
c001437d:	e8 bc 38 ff ff       	call   c0007c3e <VgaText::putx(unsigned int)>
c0014382:	83 c4 10             	add    esp,0x10
c0014385:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c001438a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014390:	83 ec 08             	sub    esp,0x8
c0014393:	68 c1 e3 01 c0       	push   0xc001e3c1
c0014398:	50                   	push   eax
c0014399:	e8 e6 38 ff ff       	call   c0007c84 <VgaText::puts(char const*)>
c001439e:	83 c4 10             	add    esp,0x10
c00143a1:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c00143a6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00143ac:	83 ec 08             	sub    esp,0x8
c00143af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00143b3:	50                   	push   eax
c00143b4:	e8 85 38 ff ff       	call   c0007c3e <VgaText::putx(unsigned int)>
c00143b9:	83 c4 10             	add    esp,0x10
c00143bc:	fa                   	cli    
c00143bd:	f4                   	hlt    
c00143be:	eb fe                	jmp    c00143be <displayDebugInfo(regs*)+0x31f>

c00143c0 <displayProgramFault(char const*)>:
c00143c0:	83 ec 0c             	sub    esp,0xc
c00143c3:	83 ec 0c             	sub    esp,0xc
c00143c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143ca:	e8 09 56 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c00143cf:	83 c4 10             	add    esp,0x10
c00143d2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00143d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00143d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00143e2:	85 c0                	test   eax,eax
c00143e4:	74 21                	je     c0014407 <displayProgramFault(char const*)+0x47>
c00143e6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00143eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00143ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00143f6:	6a 04                	push   0x4
c00143f8:	6a 0f                	push   0xf
c00143fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00143fe:	50                   	push   eax
c00143ff:	e8 f2 38 ff ff       	call   c0007cf6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	90                   	nop
c0014408:	83 c4 0c             	add    esp,0xc
c001440b:	c3                   	ret    

c001440c <gpFault(regs*, void*)>:
c001440c:	83 ec 1c             	sub    esp,0x1c
c001440f:	c7 05 10 2a 02 c0 97 39 01 c0 	mov    DWORD PTR ds:0xc0022a10,0xc0013997
c0014419:	a1 10 2a 02 c0       	mov    eax,ds:0xc0022a10
c001441e:	85 c0                	test   eax,eax
c0014420:	74 1c                	je     c001443e <gpFault(regs*, void*)+0x32>
c0014422:	a1 10 2a 02 c0       	mov    eax,ds:0xc0022a10
c0014427:	83 ec 0c             	sub    esp,0xc
c001442a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001442e:	ff d0                	call   eax
c0014430:	83 c4 10             	add    esp,0x10
c0014433:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014437:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001443c:	75 2e                	jne    c001446c <gpFault(regs*, void*)+0x60>
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014445:	e8 55 fc ff ff       	call   c001409f <displayDebugInfo(regs*)>
c001444a:	83 c4 10             	add    esp,0x10
c001444d:	83 ec 0c             	sub    esp,0xc
c0014450:	68 c9 e3 01 c0       	push   0xc001e3c9
c0014455:	e8 66 ff ff ff       	call   c00143c0 <displayProgramFault(char const*)>
c001445a:	83 c4 10             	add    esp,0x10
c001445d:	83 ec 0c             	sub    esp,0xc
c0014460:	6a 00                	push   0x0
c0014462:	e8 25 ef ff ff       	call   c001338c <Thr::terminateFromIRQ(int)>
c0014467:	83 c4 10             	add    esp,0x10
c001446a:	eb 01                	jmp    c001446d <gpFault(regs*, void*)+0x61>
c001446c:	90                   	nop
c001446d:	83 c4 1c             	add    esp,0x1c
c0014470:	c3                   	ret    

c0014471 <pgFault(regs*, void*)>:
c0014471:	83 ec 1c             	sub    esp,0x1c
c0014474:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014479:	8b 00                	mov    eax,DWORD PTR [eax]
c001447b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001447e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014484:	0f 20 d2             	mov    edx,cr2
c0014487:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001448b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001448f:	83 ec 08             	sub    esp,0x8
c0014492:	52                   	push   edx
c0014493:	50                   	push   eax
c0014494:	e8 71 51 ff ff       	call   c000960a <VAS::tryLoadBackOffDisk(unsigned long)>
c0014499:	83 c4 10             	add    esp,0x10
c001449c:	84 c0                	test   al,al
c001449e:	75 2e                	jne    c00144ce <pgFault(regs*, void*)+0x5d>
c00144a0:	83 ec 0c             	sub    esp,0xc
c00144a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144a7:	e8 f3 fb ff ff       	call   c001409f <displayDebugInfo(regs*)>
c00144ac:	83 c4 10             	add    esp,0x10
c00144af:	83 ec 0c             	sub    esp,0xc
c00144b2:	68 e2 e3 01 c0       	push   0xc001e3e2
c00144b7:	e8 04 ff ff ff       	call   c00143c0 <displayProgramFault(char const*)>
c00144bc:	83 c4 10             	add    esp,0x10
c00144bf:	83 ec 0c             	sub    esp,0xc
c00144c2:	6a 00                	push   0x0
c00144c4:	e8 c3 ee ff ff       	call   c001338c <Thr::terminateFromIRQ(int)>
c00144c9:	83 c4 10             	add    esp,0x10
c00144cc:	eb 01                	jmp    c00144cf <pgFault(regs*, void*)+0x5e>
c00144ce:	90                   	nop
c00144cf:	83 c4 1c             	add    esp,0x1c
c00144d2:	c3                   	ret    

c00144d3 <otherISRHandler(regs*, void*)>:
c00144d3:	83 ec 0c             	sub    esp,0xc
c00144d6:	83 ec 0c             	sub    esp,0xc
c00144d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144dd:	e8 bd fb ff ff       	call   c001409f <displayDebugInfo(regs*)>
c00144e2:	83 c4 10             	add    esp,0x10
c00144e5:	83 ec 0c             	sub    esp,0xc
c00144e8:	68 34 e4 01 c0       	push   0xc001e434
c00144ed:	e8 ce fe ff ff       	call   c00143c0 <displayProgramFault(char const*)>
c00144f2:	83 c4 10             	add    esp,0x10
c00144f5:	83 ec 0c             	sub    esp,0xc
c00144f8:	6a 00                	push   0x0
c00144fa:	e8 8d ee ff ff       	call   c001338c <Thr::terminateFromIRQ(int)>
c00144ff:	83 c4 10             	add    esp,0x10
c0014502:	90                   	nop
c0014503:	83 c4 0c             	add    esp,0xc
c0014506:	c3                   	ret    

c0014507 <opcodeFault(regs*, void*)>:
c0014507:	55                   	push   ebp
c0014508:	89 e5                	mov    ebp,esp
c001450a:	83 ec 08             	sub    esp,0x8
c001450d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014510:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014513:	83 ec 08             	sub    esp,0x8
c0014516:	50                   	push   eax
c0014517:	68 ed e3 01 c0       	push   0xc001e3ed
c001451c:	e8 b7 54 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0014521:	83 c4 10             	add    esp,0x10
c0014524:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0014529:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001452f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014535:	84 c0                	test   al,al
c0014537:	74 21                	je     c001455a <opcodeFault(regs*, void*)+0x53>
c0014539:	83 ec 0c             	sub    esp,0xc
c001453c:	68 5c e4 01 c0       	push   0xc001e45c
c0014541:	e8 92 54 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0014546:	83 c4 10             	add    esp,0x10
c0014549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001454c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001454f:	8d 50 19             	lea    edx,[eax+0x19]
c0014552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014555:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014558:	eb 2b                	jmp    c0014585 <opcodeFault(regs*, void*)+0x7e>
c001455a:	83 ec 0c             	sub    esp,0xc
c001455d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014560:	e8 3a fb ff ff       	call   c001409f <displayDebugInfo(regs*)>
c0014565:	83 c4 10             	add    esp,0x10
c0014568:	83 ec 0c             	sub    esp,0xc
c001456b:	68 fb e3 01 c0       	push   0xc001e3fb
c0014570:	e8 4b fe ff ff       	call   c00143c0 <displayProgramFault(char const*)>
c0014575:	83 c4 10             	add    esp,0x10
c0014578:	83 ec 0c             	sub    esp,0xc
c001457b:	6a 00                	push   0x0
c001457d:	e8 0a ee ff ff       	call   c001338c <Thr::terminateFromIRQ(int)>
c0014582:	83 c4 10             	add    esp,0x10
c0014585:	c9                   	leave  
c0014586:	c3                   	ret    

c0014587 <i386SaveCoprocessor(void*)>:
c0014587:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001458b:	83 c0 3f             	add    eax,0x3f
c001458e:	83 e0 c0             	and    eax,0xffffffc0
c0014591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014595:	ff 25 0c 2a 02 c0    	jmp    DWORD PTR ds:0xc0022a0c

c001459b <i386LoadCoprocessor(void*)>:
c001459b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001459f:	83 c0 3f             	add    eax,0x3f
c00145a2:	83 e0 c0             	and    eax,0xffffffc0
c00145a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145a9:	ff 25 08 2a 02 c0    	jmp    DWORD PTR ds:0xc0022a08

c00145af <x87EmulHandler(regs*, void*)>:
c00145af:	53                   	push   ebx
c00145b0:	83 ec 08             	sub    esp,0x8
c00145b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145b8:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00145bc:	74 10                	je     c00145ce <x87EmulHandler(regs*, void*)+0x1f>
c00145be:	83 ec 0c             	sub    esp,0xc
c00145c1:	68 08 e4 01 c0       	push   0xc001e408
c00145c6:	e8 5c af ff ff       	call   c000f527 <Krnl::panic(char const*)>
c00145cb:	83 c4 10             	add    esp,0x10
c00145ce:	0f 20 c0             	mov    eax,cr0
c00145d1:	a8 08                	test   al,0x8
c00145d3:	74 59                	je     c001462e <x87EmulHandler(regs*, void*)+0x7f>
c00145d5:	0f 06                	clts   
c00145d7:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c00145dc:	85 c0                	test   eax,eax
c00145de:	74 0e                	je     c00145ee <x87EmulHandler(regs*, void*)+0x3f>
c00145e0:	83 ec 0c             	sub    esp,0xc
c00145e3:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00145e6:	e8 9c ff ff ff       	call   c0014587 <i386SaveCoprocessor(void*)>
c00145eb:	83 c4 10             	add    esp,0x10
c00145ee:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00145f4:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00145f8:	75 12                	jne    c001460c <x87EmulHandler(regs*, void*)+0x5d>
c00145fa:	83 ec 0c             	sub    esp,0xc
c00145fd:	68 40 02 00 00       	push   0x240
c0014602:	e8 0e 26 ff ff       	call   c0006c15 <malloc>
c0014607:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001460a:	eb 10                	jmp    c001461c <x87EmulHandler(regs*, void*)+0x6d>
c001460c:	83 ec 0c             	sub    esp,0xc
c001460f:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c0014614:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014617:	e8 7f ff ff ff       	call   c001459b <i386LoadCoprocessor(void*)>
c001461c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014621:	83 c4 10             	add    esp,0x10
c0014624:	a3 04 2a 02 c0       	mov    ds:0xc0022a04,eax
c0014629:	83 c4 08             	add    esp,0x8
c001462c:	5b                   	pop    ebx
c001462d:	c3                   	ret    
c001462e:	83 ec 0c             	sub    esp,0xc
c0014631:	68 1c e4 01 c0       	push   0xc001e41c
c0014636:	e8 9d 53 ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001463b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014643:	83 c4 18             	add    esp,0x18
c0014646:	5b                   	pop    ebx
c0014647:	e9 40 ed ff ff       	jmp    c001338c <Thr::terminateFromIRQ(int)>

c001464c <HalInitialiseCoprocessor()>:
c001464c:	83 ec 10             	sub    esp,0x10
c001464f:	c7 05 04 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a04,0x0
c0014659:	6a 00                	push   0x0
c001465b:	68 af 45 01 c0       	push   0xc00145af
c0014660:	6a 07                	push   0x7
c0014662:	e8 e5 6c ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014667:	e8 84 6a 00 00       	call   c001b0f0 <avxDetect>
c001466c:	83 c4 10             	add    esp,0x10
c001466f:	85 c0                	test   eax,eax
c0014671:	74 1c                	je     c001468f <HalInitialiseCoprocessor()+0x43>
c0014673:	c7 05 0c 2a 02 c0 1a b1 01 c0 	mov    DWORD PTR ds:0xc0022a0c,0xc001b11a
c001467d:	c7 05 08 2a 02 c0 2b b1 01 c0 	mov    DWORD PTR ds:0xc0022a08,0xc001b12b
c0014687:	83 c4 0c             	add    esp,0xc
c001468a:	e9 ad 6a 00 00       	jmp    c001b13c <avxInit>
c001468f:	e8 dc 6c 00 00       	call   c001b370 <absolutelyNoChanceInHell>
c0014694:	85 c0                	test   eax,eax
c0014696:	74 1c                	je     c00146b4 <HalInitialiseCoprocessor()+0x68>
c0014698:	c7 05 0c 2a 02 c0 88 b3 01 c0 	mov    DWORD PTR ds:0xc0022a0c,0xc001b388
c00146a2:	c7 05 08 2a 02 c0 90 b3 01 c0 	mov    DWORD PTR ds:0xc0022a08,0xc001b390
c00146ac:	83 c4 0c             	add    esp,0xc
c00146af:	e9 e4 6c 00 00       	jmp    c001b398 <sseInit>
c00146b4:	e8 fd 6c 00 00       	call   c001b3b6 <x87Detect>
c00146b9:	85 c0                	test   eax,eax
c00146bb:	74 1c                	je     c00146d9 <HalInitialiseCoprocessor()+0x8d>
c00146bd:	c7 05 0c 2a 02 c0 d1 b3 01 c0 	mov    DWORD PTR ds:0xc0022a0c,0xc001b3d1
c00146c7:	c7 05 08 2a 02 c0 d8 b3 01 c0 	mov    DWORD PTR ds:0xc0022a08,0xc001b3d8
c00146d1:	83 c4 0c             	add    esp,0xc
c00146d4:	e9 06 6d 00 00       	jmp    c001b3df <x87Init>
c00146d9:	c7 05 0c 2a 02 c0 6c 40 01 c0 	mov    DWORD PTR ds:0xc0022a0c,0xc001406c
c00146e3:	c7 05 08 2a 02 c0 6c 40 01 c0 	mov    DWORD PTR ds:0xc0022a08,0xc001406c
c00146ed:	0f 20 c0             	mov    eax,cr0
c00146f0:	83 c8 04             	or     eax,0x4
c00146f3:	0f 22 c0             	mov    cr0,eax
c00146f6:	83 c4 0c             	add    esp,0xc
c00146f9:	c3                   	ret    

c00146fa <HalPanic(char const*)>:
c00146fa:	e9 28 ae ff ff       	jmp    c000f527 <Krnl::panic(char const*)>

c00146ff <HalQueryPerformanceCounter()>:
c00146ff:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0014704:	31 d2                	xor    edx,edx
c0014706:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001470c:	31 c0                	xor    eax,eax
c001470e:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0014715:	74 02                	je     c0014719 <HalQueryPerformanceCounter()+0x1a>
c0014717:	0f 31                	rdtsc  
c0014719:	c3                   	ret    

c001471a <HalInitialise()>:
c001471a:	53                   	push   ebx
c001471b:	83 ec 08             	sub    esp,0x8
c001471e:	e8 5c 6e ff ff       	call   c000b57f <setupINTS()>
c0014723:	80 3d 60 1d 02 c0 00 	cmp    BYTE PTR ds:0xc0021d60,0x0
c001472a:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c001472f:	75 07                	jne    c0014738 <HalInitialise()+0x1e>
c0014731:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c0014738:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001473e:	83 e0 01             	and    eax,0x1
c0014741:	a2 00 2a 02 c0       	mov    ds:0xc0022a00,al
c0014746:	e8 a9 02 00 00       	call   c00149f4 <picOpen()>
c001474b:	80 3d 00 2a 02 c0 00 	cmp    BYTE PTR ds:0xc0022a00,0x0
c0014752:	74 0a                	je     c001475e <HalInitialise()+0x44>
c0014754:	e8 e3 01 00 00       	call   c001493c <picDisable()>
c0014759:	e8 08 63 00 00       	call   c001aa66 <apicOpen()>
c001475e:	bb 0f 00 00 00       	mov    ebx,0xf
c0014763:	50                   	push   eax
c0014764:	6a 00                	push   0x0
c0014766:	68 d3 44 01 c0       	push   0xc00144d3
c001476b:	6a 00                	push   0x0
c001476d:	e8 da 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014772:	83 c4 0c             	add    esp,0xc
c0014775:	6a 00                	push   0x0
c0014777:	68 d3 44 01 c0       	push   0xc00144d3
c001477c:	6a 01                	push   0x1
c001477e:	e8 c9 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014783:	83 c4 0c             	add    esp,0xc
c0014786:	6a 00                	push   0x0
c0014788:	68 6d 40 01 c0       	push   0xc001406d
c001478d:	6a 02                	push   0x2
c001478f:	e8 b8 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014794:	83 c4 0c             	add    esp,0xc
c0014797:	6a 00                	push   0x0
c0014799:	68 d3 44 01 c0       	push   0xc00144d3
c001479e:	6a 03                	push   0x3
c00147a0:	e8 a7 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00147a5:	83 c4 0c             	add    esp,0xc
c00147a8:	6a 00                	push   0x0
c00147aa:	68 d3 44 01 c0       	push   0xc00144d3
c00147af:	6a 04                	push   0x4
c00147b1:	e8 96 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00147b6:	83 c4 0c             	add    esp,0xc
c00147b9:	6a 00                	push   0x0
c00147bb:	68 d3 44 01 c0       	push   0xc00144d3
c00147c0:	6a 05                	push   0x5
c00147c2:	e8 85 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00147c7:	83 c4 0c             	add    esp,0xc
c00147ca:	6a 00                	push   0x0
c00147cc:	68 07 45 01 c0       	push   0xc0014507
c00147d1:	6a 06                	push   0x6
c00147d3:	e8 74 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00147d8:	83 c4 0c             	add    esp,0xc
c00147db:	6a 00                	push   0x0
c00147dd:	68 86 40 01 c0       	push   0xc0014086
c00147e2:	6a 08                	push   0x8
c00147e4:	e8 63 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00147e9:	83 c4 0c             	add    esp,0xc
c00147ec:	6a 00                	push   0x0
c00147ee:	68 d3 44 01 c0       	push   0xc00144d3
c00147f3:	6a 09                	push   0x9
c00147f5:	e8 52 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00147fa:	83 c4 0c             	add    esp,0xc
c00147fd:	6a 00                	push   0x0
c00147ff:	68 d3 44 01 c0       	push   0xc00144d3
c0014804:	6a 0a                	push   0xa
c0014806:	e8 41 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001480b:	83 c4 0c             	add    esp,0xc
c001480e:	6a 00                	push   0x0
c0014810:	68 d3 44 01 c0       	push   0xc00144d3
c0014815:	6a 0b                	push   0xb
c0014817:	e8 30 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001481c:	83 c4 0c             	add    esp,0xc
c001481f:	6a 00                	push   0x0
c0014821:	68 0c 44 01 c0       	push   0xc001440c
c0014826:	6a 0d                	push   0xd
c0014828:	e8 1f 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001482d:	83 c4 0c             	add    esp,0xc
c0014830:	6a 00                	push   0x0
c0014832:	68 71 44 01 c0       	push   0xc0014471
c0014837:	6a 0e                	push   0xe
c0014839:	e8 0e 6b ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001483e:	83 c4 10             	add    esp,0x10
c0014841:	50                   	push   eax
c0014842:	6a 00                	push   0x0
c0014844:	68 d3 44 01 c0       	push   0xc00144d3
c0014849:	53                   	push   ebx
c001484a:	43                   	inc    ebx
c001484b:	e8 fc 6a ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014850:	83 c4 10             	add    esp,0x10
c0014853:	83 fb 1e             	cmp    ebx,0x1e
c0014856:	75 e9                	jne    c0014841 <HalInitialise()+0x127>
c0014858:	50                   	push   eax
c0014859:	6a 00                	push   0x0
c001485b:	68 ea 0f 01 c0       	push   0xc0010fea
c0014860:	6a 60                	push   0x60
c0014862:	e8 e5 6a ff ff       	call   c000b34c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014867:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c001486c:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014876:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001487d:	e8 93 23 ff ff       	call   c0006c15 <malloc>
c0014882:	89 04 24             	mov    DWORD PTR [esp],eax
c0014885:	89 c3                	mov    ebx,eax
c0014887:	e8 30 09 00 00       	call   c00151bc <RTC::RTC()>
c001488c:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0014896:	5a                   	pop    edx
c0014897:	59                   	pop    ecx
c0014898:	53                   	push   ebx
c0014899:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c001489f:	e8 74 65 ff ff       	call   c000ae18 <Device::addChild(Device*)>
c00148a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148a6:	6a 00                	push   0x0
c00148a8:	6a 00                	push   0x0
c00148aa:	6a 00                	push   0x0
c00148ac:	53                   	push   ebx
c00148ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148b0:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c00148b5:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00148bb:	83 c4 28             	add    esp,0x28
c00148be:	5b                   	pop    ebx
c00148bf:	c3                   	ret    

c00148c0 <HalMakeBeep(int)>:
c00148c0:	53                   	push   ebx
c00148c1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00148c5:	85 db                	test   ebx,ebx
c00148c7:	75 07                	jne    c00148d0 <HalMakeBeep(int)+0x10>
c00148c9:	e4 61                	in     al,0x61
c00148cb:	83 e0 fc             	and    eax,0xfffffffc
c00148ce:	eb 26                	jmp    c00148f6 <HalMakeBeep(int)+0x36>
c00148d0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00148d5:	99                   	cdq    
c00148d6:	f7 fb                	idiv   ebx
c00148d8:	89 c1                	mov    ecx,eax
c00148da:	b0 b6                	mov    al,0xb6
c00148dc:	e6 43                	out    0x43,al
c00148de:	88 c8                	mov    al,cl
c00148e0:	e6 42                	out    0x42,al
c00148e2:	89 c8                	mov    eax,ecx
c00148e4:	c1 e8 08             	shr    eax,0x8
c00148e7:	e6 42                	out    0x42,al
c00148e9:	e4 61                	in     al,0x61
c00148eb:	88 c2                	mov    dl,al
c00148ed:	83 ca 03             	or     edx,0x3
c00148f0:	38 c2                	cmp    dl,al
c00148f2:	74 04                	je     c00148f8 <HalMakeBeep(int)+0x38>
c00148f4:	88 d0                	mov    al,dl
c00148f6:	e6 61                	out    0x61,al
c00148f8:	5b                   	pop    ebx
c00148f9:	c3                   	ret    

c00148fa <HalGetRand()>:
c00148fa:	31 c0                	xor    eax,eax
c00148fc:	c3                   	ret    

c00148fd <HalEndOfInterrupt(int)>:
c00148fd:	80 3d 00 2a 02 c0 00 	cmp    BYTE PTR ds:0xc0022a00,0x0
c0014904:	74 23                	je     c0014929 <HalEndOfInterrupt(int)+0x2c>
c0014906:	83 ec 14             	sub    esp,0x14
c0014909:	6a 1b                	push   0x1b
c001490b:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014911:	e8 f8 18 ff ff       	call   c000620e <Computer::rdmsr(unsigned int)>
c0014916:	25 00 f0 ff ff       	and    eax,0xfffff000
c001491b:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0014925:	83 c4 1c             	add    esp,0x1c
c0014928:	c3                   	ret    
c0014929:	e9 56 02 00 00       	jmp    c0014b84 <picEOI(int)>

c001492e <HalRestart()>:
c001492e:	c3                   	ret    

c001492f <HalShutdown()>:
c001492f:	c3                   	ret    

c0014930 <HalSleep()>:
c0014930:	c3                   	ret    
c0014931:	66 90                	xchg   ax,ax
c0014933:	90                   	nop

c0014934 <picIoWait()>:
c0014934:	eb 00                	jmp    c0014936 <picIoWait()+0x2>
c0014936:	eb 00                	jmp    c0014938 <picIoWait()+0x4>
c0014938:	90                   	nop
c0014939:	c3                   	ret    
c001493a:	66 90                	xchg   ax,ax

c001493c <picDisable()>:
c001493c:	83 ec 10             	sub    esp,0x10
c001493f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0014946:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001494b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001494f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014954:	ee                   	out    dx,al
c0014955:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001495c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0014961:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0014965:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001496a:	ee                   	out    dx,al
c001496b:	90                   	nop
c001496c:	83 c4 10             	add    esp,0x10
c001496f:	c3                   	ret    

c0014970 <picGetIRQReg(int)>:
c0014970:	83 ec 10             	sub    esp,0x10
c0014973:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014977:	25 ff 00 00 00       	and    eax,0xff
c001497c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0014983:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0014987:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001498b:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014990:	ee                   	out    dx,al
c0014991:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014995:	25 ff 00 00 00       	and    eax,0xff
c001499a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00149a1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00149a5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00149a9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00149ae:	ee                   	out    dx,al
c00149af:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00149b6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00149bb:	89 c2                	mov    edx,eax
c00149bd:	ec                   	in     al,dx
c00149be:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00149c2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00149c6:	25 ff 00 00 00       	and    eax,0xff
c00149cb:	c1 e0 08             	shl    eax,0x8
c00149ce:	89 c1                	mov    ecx,eax
c00149d0:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00149d7:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00149dc:	89 c2                	mov    edx,eax
c00149de:	ec                   	in     al,dx
c00149df:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00149e3:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00149e7:	25 ff 00 00 00       	and    eax,0xff
c00149ec:	09 c8                	or     eax,ecx
c00149ee:	83 c4 10             	add    esp,0x10
c00149f1:	c3                   	ret    
c00149f2:	66 90                	xchg   ax,ax

c00149f4 <picOpen()>:
c00149f4:	83 ec 50             	sub    esp,0x50
c00149f7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00149fe:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0014a03:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014a07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014a0b:	ee                   	out    dx,al
c0014a0c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0014a13:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0014a18:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0014a1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014a20:	ee                   	out    dx,al
c0014a21:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0014a29:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0014a31:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0014a38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a3c:	89 c2                	mov    edx,eax
c0014a3e:	ec                   	in     al,dx
c0014a3f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0014a43:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014a47:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014a4b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0014a52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a56:	89 c2                	mov    edx,eax
c0014a58:	ec                   	in     al,dx
c0014a59:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014a5d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0014a61:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0014a65:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0014a6c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0014a71:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0014a75:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a79:	ee                   	out    dx,al
c0014a7a:	e8 b5 fe ff ff       	call   c0014934 <picIoWait()>
c0014a7f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0014a86:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0014a8b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0014a8f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014a93:	ee                   	out    dx,al
c0014a94:	e8 9b fe ff ff       	call   c0014934 <picIoWait()>
c0014a99:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a9d:	25 ff 00 00 00       	and    eax,0xff
c0014aa2:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0014aa9:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0014aad:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0014ab1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014ab5:	ee                   	out    dx,al
c0014ab6:	e8 79 fe ff ff       	call   c0014934 <picIoWait()>
c0014abb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014abf:	25 ff 00 00 00       	and    eax,0xff
c0014ac4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0014acb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014acf:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0014ad3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014ad7:	ee                   	out    dx,al
c0014ad8:	e8 57 fe ff ff       	call   c0014934 <picIoWait()>
c0014add:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0014ae4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0014ae9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0014aed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014af1:	ee                   	out    dx,al
c0014af2:	e8 3d fe ff ff       	call   c0014934 <picIoWait()>
c0014af7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0014afe:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0014b03:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014b07:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014b0b:	ee                   	out    dx,al
c0014b0c:	e8 23 fe ff ff       	call   c0014934 <picIoWait()>
c0014b11:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0014b18:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0014b1d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014b21:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014b25:	ee                   	out    dx,al
c0014b26:	e8 09 fe ff ff       	call   c0014934 <picIoWait()>
c0014b2b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0014b32:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0014b37:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014b3b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014b3f:	ee                   	out    dx,al
c0014b40:	e8 ef fd ff ff       	call   c0014934 <picIoWait()>
c0014b45:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0014b49:	25 ff 00 00 00       	and    eax,0xff
c0014b4e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0014b55:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0014b59:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0014b5d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014b61:	ee                   	out    dx,al
c0014b62:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0014b66:	25 ff 00 00 00       	and    eax,0xff
c0014b6b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0014b72:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014b76:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0014b7a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0014b7e:	ee                   	out    dx,al
c0014b7f:	90                   	nop
c0014b80:	83 c4 50             	add    esp,0x50
c0014b83:	c3                   	ret    

c0014b84 <picEOI(int)>:
c0014b84:	83 ec 10             	sub    esp,0x10
c0014b87:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014b8c:	75 22                	jne    c0014bb0 <picEOI(int)+0x2c>
c0014b8e:	6a 0b                	push   0xb
c0014b90:	e8 db fd ff ff       	call   c0014970 <picGetIRQReg(int)>
c0014b95:	83 c4 04             	add    esp,0x4
c0014b98:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014b9d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0014ba2:	25 ff ff 00 00       	and    eax,0xffff
c0014ba7:	25 80 00 00 00       	and    eax,0x80
c0014bac:	74 72                	je     c0014c20 <picEOI(int)+0x9c>
c0014bae:	66 90                	xchg   ax,ax
c0014bb0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bb5:	75 31                	jne    c0014be8 <picEOI(int)+0x64>
c0014bb7:	6a 0b                	push   0xb
c0014bb9:	e8 b2 fd ff ff       	call   c0014970 <picGetIRQReg(int)>
c0014bbe:	83 c4 04             	add    esp,0x4
c0014bc1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014bc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014bca:	66 85 c0             	test   ax,ax
c0014bcd:	78 19                	js     c0014be8 <picEOI(int)+0x64>
c0014bcf:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0014bd6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0014bdb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014bdf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014be4:	ee                   	out    dx,al
c0014be5:	eb 3d                	jmp    c0014c24 <picEOI(int)+0xa0>
c0014be7:	90                   	nop
c0014be8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014bed:	7e 19                	jle    c0014c08 <picEOI(int)+0x84>
c0014bef:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0014bf6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0014bfb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0014bff:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0014c04:	ee                   	out    dx,al
c0014c05:	8d 76 00             	lea    esi,[esi+0x0]
c0014c08:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0014c0f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0014c14:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0014c18:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014c1d:	ee                   	out    dx,al
c0014c1e:	eb 04                	jmp    c0014c24 <picEOI(int)+0xa0>
c0014c20:	90                   	nop
c0014c21:	8d 76 00             	lea    esi,[esi+0x0]
c0014c24:	83 c4 10             	add    esp,0x10
c0014c27:	c3                   	ret    

c0014c28 <RTC::open(int, int, void*)>:
c0014c28:	31 c0                	xor    eax,eax
c0014c2a:	c3                   	ret    
c0014c2b:	90                   	nop

c0014c2c <RTC::close(int, int, void*)>:
c0014c2c:	31 c0                	xor    eax,eax
c0014c2e:	c3                   	ret    
c0014c2f:	90                   	nop

c0014c30 <RTC::timeInSecondsUTC()>:
c0014c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c34:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0014c3a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014c40:	c3                   	ret    
c0014c41:	90                   	nop

c0014c42 <RTC::timeInDatetimeUTC()>:
c0014c42:	53                   	push   ebx
c0014c43:	83 ec 14             	sub    esp,0x14
c0014c46:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0014c50:	50                   	push   eax
c0014c51:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0014c54:	83 c4 0c             	add    esp,0xc
c0014c57:	52                   	push   edx
c0014c58:	50                   	push   eax
c0014c59:	53                   	push   ebx
c0014c5a:	e8 2d 5f ff ff       	call   c000ab8c <secondsToDatetime(unsigned long long)>
c0014c5f:	89 d8                	mov    eax,ebx
c0014c61:	83 c4 14             	add    esp,0x14
c0014c64:	5b                   	pop    ebx
c0014c65:	c2 04 00             	ret    0x4

c0014c68 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0014c68:	56                   	push   esi
c0014c69:	53                   	push   ebx
c0014c6a:	83 ec 14             	sub    esp,0x14
c0014c6d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014c71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c73:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0014c76:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014c7a:	52                   	push   edx
c0014c7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c83:	50                   	push   eax
c0014c84:	e8 03 5f ff ff       	call   c000ab8c <secondsToDatetime(unsigned long long)>
c0014c89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c8d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014c91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014c95:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0014c99:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014c9d:	89 f0                	mov    eax,esi
c0014c9f:	83 c4 20             	add    esp,0x20
c0014ca2:	5b                   	pop    ebx
c0014ca3:	5e                   	pop    esi
c0014ca4:	ff e0                	jmp    eax

c0014ca6 <RTC::~RTC()>:
c0014ca6:	83 ec 0c             	sub    esp,0xc
c0014ca9:	ba 9c e4 01 c0       	mov    edx,0xc001e49c
c0014cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cb2:	89 10                	mov    DWORD PTR [eax],edx
c0014cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cb8:	83 ec 0c             	sub    esp,0xc
c0014cbb:	50                   	push   eax
c0014cbc:	e8 4f 5c ff ff       	call   c000a910 <Clock::~Clock()>
c0014cc1:	83 c4 10             	add    esp,0x10
c0014cc4:	90                   	nop
c0014cc5:	83 c4 0c             	add    esp,0xc
c0014cc8:	c3                   	ret    
c0014cc9:	90                   	nop

c0014cca <RTC::~RTC()>:
c0014cca:	83 ec 0c             	sub    esp,0xc
c0014ccd:	83 ec 0c             	sub    esp,0xc
c0014cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cd4:	e8 cd ff ff ff       	call   c0014ca6 <RTC::~RTC()>
c0014cd9:	83 c4 10             	add    esp,0x10
c0014cdc:	83 ec 08             	sub    esp,0x8
c0014cdf:	68 60 01 00 00       	push   0x160
c0014ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ce8:	e8 f5 4b ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c0014ced:	83 c4 10             	add    esp,0x10
c0014cf0:	83 c4 0c             	add    esp,0xc
c0014cf3:	c3                   	ret    

c0014cf4 <RTC::get_update_in_progress_flag()>:
c0014cf4:	83 ec 14             	sub    esp,0x14
c0014cf7:	6a 0a                	push   0xa
c0014cf9:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014cff:	e8 be 15 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014d04:	83 c4 1c             	add    esp,0x1c
c0014d07:	c0 e8 07             	shr    al,0x7
c0014d0a:	c3                   	ret    
c0014d0b:	90                   	nop

c0014d0c <RTC::completeRTCRefresh()>:
c0014d0c:	55                   	push   ebp
c0014d0d:	57                   	push   edi
c0014d0e:	56                   	push   esi
c0014d0f:	53                   	push   ebx
c0014d10:	83 ec 2c             	sub    esp,0x2c
c0014d13:	8b 1d 6c 1a 02 c0    	mov    ebx,DWORD PTR ds:0xc0021a6c
c0014d19:	83 ec 0c             	sub    esp,0xc
c0014d1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014d20:	e8 cf ff ff ff       	call   c0014cf4 <RTC::get_update_in_progress_flag()>
c0014d25:	83 c4 10             	add    esp,0x10
c0014d28:	84 c0                	test   al,al
c0014d2a:	74 0e                	je     c0014d3a <RTC::completeRTCRefresh()+0x2e>
c0014d2c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014d32:	3b 05 6c 1a 02 c0    	cmp    eax,DWORD PTR ds:0xc0021a6c
c0014d38:	73 df                	jae    c0014d19 <RTC::completeRTCRefresh()+0xd>
c0014d3a:	55                   	push   ebp
c0014d3b:	55                   	push   ebp
c0014d3c:	6a 00                	push   0x0
c0014d3e:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014d44:	e8 79 15 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014d49:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014d4d:	58                   	pop    eax
c0014d4e:	5a                   	pop    edx
c0014d4f:	6a 02                	push   0x2
c0014d51:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014d57:	e8 66 15 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014d5c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0014d60:	59                   	pop    ecx
c0014d61:	5b                   	pop    ebx
c0014d62:	6a 04                	push   0x4
c0014d64:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014d6a:	e8 53 15 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014d6f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0014d73:	5e                   	pop    esi
c0014d74:	5f                   	pop    edi
c0014d75:	6a 07                	push   0x7
c0014d77:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014d7d:	e8 40 15 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014d82:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0014d86:	5d                   	pop    ebp
c0014d87:	58                   	pop    eax
c0014d88:	6a 08                	push   0x8
c0014d8a:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014d90:	e8 2d 15 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014d95:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0014d99:	58                   	pop    eax
c0014d9a:	5a                   	pop    edx
c0014d9b:	6a 09                	push   0x9
c0014d9d:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014da3:	e8 1a 15 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014da8:	83 c4 10             	add    esp,0x10
c0014dab:	0f b6 e8             	movzx  ebp,al
c0014dae:	8b 1d 6c 1a 02 c0    	mov    ebx,DWORD PTR ds:0xc0021a6c
c0014db4:	83 ec 0c             	sub    esp,0xc
c0014db7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014dbb:	e8 34 ff ff ff       	call   c0014cf4 <RTC::get_update_in_progress_flag()>
c0014dc0:	83 c4 10             	add    esp,0x10
c0014dc3:	84 c0                	test   al,al
c0014dc5:	74 0e                	je     c0014dd5 <RTC::completeRTCRefresh()+0xc9>
c0014dc7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014dcd:	3b 05 6c 1a 02 c0    	cmp    eax,DWORD PTR ds:0xc0021a6c
c0014dd3:	73 df                	jae    c0014db4 <RTC::completeRTCRefresh()+0xa8>
c0014dd5:	50                   	push   eax
c0014dd6:	50                   	push   eax
c0014dd7:	6a 00                	push   0x0
c0014dd9:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014ddf:	e8 de 14 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014de4:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0014de8:	58                   	pop    eax
c0014de9:	5a                   	pop    edx
c0014dea:	6a 02                	push   0x2
c0014dec:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014df2:	e8 cb 14 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014df7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014dfb:	59                   	pop    ecx
c0014dfc:	5b                   	pop    ebx
c0014dfd:	6a 04                	push   0x4
c0014dff:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014e05:	e8 b8 14 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014e0a:	5e                   	pop    esi
c0014e0b:	88 c3                	mov    bl,al
c0014e0d:	5f                   	pop    edi
c0014e0e:	6a 07                	push   0x7
c0014e10:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014e16:	e8 a7 14 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014e1b:	89 c6                	mov    esi,eax
c0014e1d:	58                   	pop    eax
c0014e1e:	5a                   	pop    edx
c0014e1f:	6a 08                	push   0x8
c0014e21:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014e27:	e8 96 14 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014e2c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0014e30:	59                   	pop    ecx
c0014e31:	5f                   	pop    edi
c0014e32:	6a 09                	push   0x9
c0014e34:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014e3a:	e8 83 14 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014e3f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0014e43:	0f b6 f8             	movzx  edi,al
c0014e46:	83 c4 10             	add    esp,0x10
c0014e49:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0014e4d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014e51:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0014e55:	89 f1                	mov    ecx,esi
c0014e57:	0f 94 c0             	sete   al
c0014e5a:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0014e5e:	0f 94 c2             	sete   dl
c0014e61:	21 d0                	and    eax,edx
c0014e63:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0014e67:	0f 94 c2             	sete   dl
c0014e6a:	21 c2                	and    edx,eax
c0014e6c:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0014e70:	0f 94 c0             	sete   al
c0014e73:	21 d0                	and    eax,edx
c0014e75:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014e79:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0014e7d:	0f 94 c1             	sete   cl
c0014e80:	84 c8                	test   al,cl
c0014e82:	75 29                	jne    c0014ead <RTC::completeRTCRefresh()+0x1a1>
c0014e84:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014e88:	89 fd                	mov    ebp,edi
c0014e8a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014e8e:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0014e92:	89 f0                	mov    eax,esi
c0014e94:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0014e98:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014e9c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014ea0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014ea4:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014ea8:	e9 01 ff ff ff       	jmp    c0014dae <RTC::completeRTCRefresh()+0xa2>
c0014ead:	39 fd                	cmp    ebp,edi
c0014eaf:	75 d3                	jne    c0014e84 <RTC::completeRTCRefresh()+0x178>
c0014eb1:	55                   	push   ebp
c0014eb2:	55                   	push   ebp
c0014eb3:	6a 0b                	push   0xb
c0014eb5:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014ebb:	e8 02 14 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0014ec0:	83 c4 10             	add    esp,0x10
c0014ec3:	89 c5                	mov    ebp,eax
c0014ec5:	a8 04                	test   al,0x4
c0014ec7:	75 78                	jne    c0014f41 <RTC::completeRTCRefresh()+0x235>
c0014ec9:	b1 0a                	mov    cl,0xa
c0014ecb:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0014ecf:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014ed3:	83 e2 0f             	and    edx,0xf
c0014ed6:	c0 e8 04             	shr    al,0x4
c0014ed9:	c1 ef 04             	shr    edi,0x4
c0014edc:	f6 e1                	mul    cl
c0014ede:	6b ff 0a             	imul   edi,edi,0xa
c0014ee1:	01 d0                	add    eax,edx
c0014ee3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014ee7:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014eeb:	83 e2 0f             	and    edx,0xf
c0014eee:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014ef2:	c0 e8 04             	shr    al,0x4
c0014ef5:	f6 e1                	mul    cl
c0014ef7:	01 d0                	add    eax,edx
c0014ef9:	88 da                	mov    dl,bl
c0014efb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014eff:	83 e2 0f             	and    edx,0xf
c0014f02:	88 d8                	mov    al,bl
c0014f04:	83 e3 80             	and    ebx,0xffffff80
c0014f07:	c0 e8 04             	shr    al,0x4
c0014f0a:	83 e0 07             	and    eax,0x7
c0014f0d:	f6 e1                	mul    cl
c0014f0f:	01 d0                	add    eax,edx
c0014f11:	89 f2                	mov    edx,esi
c0014f13:	09 c3                	or     ebx,eax
c0014f15:	83 e2 0f             	and    edx,0xf
c0014f18:	89 f0                	mov    eax,esi
c0014f1a:	c0 e8 04             	shr    al,0x4
c0014f1d:	f6 e1                	mul    cl
c0014f1f:	8d 34 02             	lea    esi,[edx+eax*1]
c0014f22:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014f26:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014f2a:	83 e2 0f             	and    edx,0xf
c0014f2d:	c0 e8 04             	shr    al,0x4
c0014f30:	f6 e1                	mul    cl
c0014f32:	01 d0                	add    eax,edx
c0014f34:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0014f38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f3c:	83 e0 0f             	and    eax,0xf
c0014f3f:	01 c7                	add    edi,eax
c0014f41:	83 e5 02             	and    ebp,0x2
c0014f44:	75 14                	jne    c0014f5a <RTC::completeRTCRefresh()+0x24e>
c0014f46:	84 db                	test   bl,bl
c0014f48:	79 10                	jns    c0014f5a <RTC::completeRTCRefresh()+0x24e>
c0014f4a:	83 e3 7f             	and    ebx,0x7f
c0014f4d:	b9 18 00 00 00       	mov    ecx,0x18
c0014f52:	8d 43 0c             	lea    eax,[ebx+0xc]
c0014f55:	99                   	cdq    
c0014f56:	f7 f9                	idiv   ecx
c0014f58:	88 d3                	mov    bl,dl
c0014f5a:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0014f60:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0014f66:	77 06                	ja     c0014f6e <RTC::completeRTCRefresh()+0x262>
c0014f68:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0014f6e:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0014f73:	31 d2                	xor    edx,edx
c0014f75:	c1 e1 10             	shl    ecx,0x10
c0014f78:	89 d7                	mov    edi,edx
c0014f7a:	c1 e5 10             	shl    ebp,0x10
c0014f7d:	31 c0                	xor    eax,eax
c0014f7f:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0014f85:	09 cf                	or     edi,ecx
c0014f87:	89 fa                	mov    edx,edi
c0014f89:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0014f8d:	88 da                	mov    dl,bl
c0014f8f:	89 f3                	mov    ebx,esi
c0014f91:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0014f95:	88 d8                	mov    al,bl
c0014f97:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0014f9b:	0f b7 c8             	movzx  ecx,ax
c0014f9e:	09 e9                	or     ecx,ebp
c0014fa0:	89 c8                	mov    eax,ecx
c0014fa2:	51                   	push   ecx
c0014fa3:	51                   	push   ecx
c0014fa4:	52                   	push   edx
c0014fa5:	50                   	push   eax
c0014fa6:	e8 54 5a ff ff       	call   c000a9ff <datetimeToSeconds(datetime_t)>
c0014fab:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0014faf:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0014fb5:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0014fbb:	83 c4 3c             	add    esp,0x3c
c0014fbe:	5b                   	pop    ebx
c0014fbf:	5e                   	pop    esi
c0014fc0:	5f                   	pop    edi
c0014fc1:	5d                   	pop    ebp
c0014fc2:	c3                   	ret    
c0014fc3:	90                   	nop

c0014fc4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0014fc4:	55                   	push   ebp
c0014fc5:	57                   	push   edi
c0014fc6:	56                   	push   esi
c0014fc7:	53                   	push   ebx
c0014fc8:	83 ec 30             	sub    esp,0x30
c0014fcb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0014fcf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0014fd3:	6a 00                	push   0x0
c0014fd5:	6a 00                	push   0x0
c0014fd7:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014fdd:	e8 f6 13 ff ff       	call   c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014fe2:	83 c4 0c             	add    esp,0xc
c0014fe5:	6a 00                	push   0x0
c0014fe7:	6a 02                	push   0x2
c0014fe9:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0014fef:	e8 e4 13 ff ff       	call   c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014ff4:	31 d2                	xor    edx,edx
c0014ff6:	89 f9                	mov    ecx,edi
c0014ff8:	89 f8                	mov    eax,edi
c0014ffa:	c1 e9 10             	shr    ecx,0x10
c0014ffd:	0f b6 c4             	movzx  eax,ah
c0015000:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015004:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015008:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001500c:	b9 64 00 00 00       	mov    ecx,0x64
c0015011:	89 f0                	mov    eax,esi
c0015013:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015017:	89 f0                	mov    eax,esi
c0015019:	0f b6 c4             	movzx  eax,ah
c001501c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015020:	89 f0                	mov    eax,esi
c0015022:	c1 e8 10             	shr    eax,0x10
c0015025:	66 f7 f1             	div    cx
c0015028:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c001502d:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015032:	59                   	pop    ecx
c0015033:	5b                   	pop    ebx
c0015034:	89 fb                	mov    ebx,edi
c0015036:	6a 0b                	push   0xb
c0015038:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c001503e:	e8 7f 12 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0015043:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015047:	83 c4 10             	add    esp,0x10
c001504a:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001504f:	75 74                	jne    c00150c5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015051:	b2 0a                	mov    dl,0xa
c0015053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015057:	0f b6 c1             	movzx  eax,cl
c001505a:	f6 f2                	div    dl
c001505c:	88 c3                	mov    bl,al
c001505e:	88 e0                	mov    al,ah
c0015060:	c1 e3 04             	shl    ebx,0x4
c0015063:	09 c3                	or     ebx,eax
c0015065:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001506a:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001506e:	f6 f2                	div    dl
c0015070:	88 c1                	mov    cl,al
c0015072:	88 e0                	mov    al,ah
c0015074:	c1 e1 04             	shl    ecx,0x4
c0015077:	09 c1                	or     ecx,eax
c0015079:	89 f8                	mov    eax,edi
c001507b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001507f:	0f b6 c0             	movzx  eax,al
c0015082:	f6 f2                	div    dl
c0015084:	88 c3                	mov    bl,al
c0015086:	88 e0                	mov    al,ah
c0015088:	c1 e3 04             	shl    ebx,0x4
c001508b:	09 c3                	or     ebx,eax
c001508d:	89 f0                	mov    eax,esi
c001508f:	0f b6 c0             	movzx  eax,al
c0015092:	f6 f2                	div    dl
c0015094:	88 c1                	mov    cl,al
c0015096:	88 e0                	mov    al,ah
c0015098:	c1 e1 04             	shl    ecx,0x4
c001509b:	09 c1                	or     ecx,eax
c001509d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00150a2:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00150a6:	f6 f2                	div    dl
c00150a8:	88 c1                	mov    cl,al
c00150aa:	88 e0                	mov    al,ah
c00150ac:	c1 e1 04             	shl    ecx,0x4
c00150af:	09 c1                	or     ecx,eax
c00150b1:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00150b6:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00150ba:	f6 f2                	div    dl
c00150bc:	89 c5                	mov    ebp,eax
c00150be:	88 e0                	mov    al,ah
c00150c0:	c1 e5 04             	shl    ebp,0x4
c00150c3:	09 c5                	or     ebp,eax
c00150c5:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00150ca:	75 17                	jne    c00150e3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00150cc:	80 fb 0b             	cmp    bl,0xb
c00150cf:	76 0c                	jbe    c00150dd <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00150d1:	80 eb 0c             	sub    bl,0xc
c00150d4:	75 02                	jne    c00150d8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00150d6:	b3 0c                	mov    bl,0xc
c00150d8:	83 cb 80             	or     ebx,0xffffff80
c00150db:	eb 06                	jmp    c00150e3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00150dd:	84 db                	test   bl,bl
c00150df:	75 02                	jne    c00150e3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00150e1:	b3 0c                	mov    bl,0xc
c00150e3:	0f b6 db             	movzx  ebx,bl
c00150e6:	50                   	push   eax
c00150e7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00150ec:	50                   	push   eax
c00150ed:	6a 00                	push   0x0
c00150ef:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c00150f5:	e8 de 12 ff ff       	call   c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00150fa:	83 c4 0c             	add    esp,0xc
c00150fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015102:	50                   	push   eax
c0015103:	6a 02                	push   0x2
c0015105:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c001510b:	e8 c8 12 ff ff       	call   c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015110:	83 c4 0c             	add    esp,0xc
c0015113:	53                   	push   ebx
c0015114:	6a 04                	push   0x4
c0015116:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c001511c:	e8 b7 12 ff ff       	call   c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015121:	83 c4 0c             	add    esp,0xc
c0015124:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015129:	50                   	push   eax
c001512a:	6a 07                	push   0x7
c001512c:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0015132:	e8 a1 12 ff ff       	call   c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015137:	83 c4 0c             	add    esp,0xc
c001513a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001513f:	50                   	push   eax
c0015140:	6a 08                	push   0x8
c0015142:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0015148:	e8 8b 12 ff ff       	call   c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001514d:	83 c4 0c             	add    esp,0xc
c0015150:	89 e8                	mov    eax,ebp
c0015152:	0f b6 e8             	movzx  ebp,al
c0015155:	55                   	push   ebp
c0015156:	6a 09                	push   0x9
c0015158:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c001515e:	e8 75 12 ff ff       	call   c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015163:	5a                   	pop    edx
c0015164:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015168:	e8 9f fb ff ff       	call   c0014d0c <RTC::completeRTCRefresh()>
c001516d:	83 c4 3c             	add    esp,0x3c
c0015170:	b0 01                	mov    al,0x1
c0015172:	5b                   	pop    ebx
c0015173:	5e                   	pop    esi
c0015174:	5f                   	pop    edi
c0015175:	5d                   	pop    ebp
c0015176:	c3                   	ret    

c0015177 <rtcIRQHandler(regs*, void*)>:
c0015177:	53                   	push   ebx
c0015178:	83 ec 10             	sub    esp,0x10
c001517b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001517f:	6a 0c                	push   0xc
c0015181:	ff 35 88 f4 01 c0    	push   DWORD PTR ds:0xc001f488
c0015187:	e8 36 11 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	84 c0                	test   al,al
c0015191:	79 24                	jns    c00151b7 <rtcIRQHandler(regs*, void*)+0x40>
c0015193:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001519a:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00151a1:	66 ff 05 14 2a 02 c0 	inc    WORD PTR ds:0xc0022a14
c00151a8:	75 0d                	jne    c00151b7 <rtcIRQHandler(regs*, void*)+0x40>
c00151aa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00151ae:	83 c4 08             	add    esp,0x8
c00151b1:	5b                   	pop    ebx
c00151b2:	e9 55 fb ff ff       	jmp    c0014d0c <RTC::completeRTCRefresh()>
c00151b7:	83 c4 08             	add    esp,0x8
c00151ba:	5b                   	pop    ebx
c00151bb:	c3                   	ret    

c00151bc <RTC::RTC()>:
c00151bc:	83 ec 1c             	sub    esp,0x1c
c00151bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151c3:	83 ec 08             	sub    esp,0x8
c00151c6:	68 7f e4 01 c0       	push   0xc001e47f
c00151cb:	50                   	push   eax
c00151cc:	e8 09 57 ff ff       	call   c000a8da <Clock::Clock(char const*)>
c00151d1:	83 c4 10             	add    esp,0x10
c00151d4:	ba 9c e4 01 c0       	mov    edx,0xc001e49c
c00151d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151dd:	89 10                	mov    DWORD PTR [eax],edx
c00151df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151e3:	83 ec 0c             	sub    esp,0xc
c00151e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151ea:	6a 01                	push   0x1
c00151ec:	68 77 51 01 c0       	push   0xc0015177
c00151f1:	6a 08                	push   0x8
c00151f3:	50                   	push   eax
c00151f4:	e8 cb 5b ff ff       	call   c000adc4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00151f9:	83 c4 20             	add    esp,0x20
c00151fc:	89 c2                	mov    edx,eax
c00151fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015202:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015208:	fa                   	cli    
c0015209:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c001520e:	40                   	inc    eax
c001520f:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0015214:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0015219:	83 ec 08             	sub    esp,0x8
c001521c:	6a 0b                	push   0xb
c001521e:	50                   	push   eax
c001521f:	e8 9e 10 ff ff       	call   c00062c2 <Computer::readCMOS(unsigned char)>
c0015224:	83 c4 10             	add    esp,0x10
c0015227:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001522b:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c0015230:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015234:	83 ca 10             	or     edx,0x10
c0015237:	81 e2 ff 00 00 00    	and    edx,0xff
c001523d:	83 ec 04             	sub    esp,0x4
c0015240:	52                   	push   edx
c0015241:	6a 0b                	push   0xb
c0015243:	50                   	push   eax
c0015244:	e8 8f 11 ff ff       	call   c00063d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015249:	83 c4 10             	add    esp,0x10
c001524c:	83 ec 0c             	sub    esp,0xc
c001524f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015253:	e8 b4 fa ff ff       	call   c0014d0c <RTC::completeRTCRefresh()>
c0015258:	83 c4 10             	add    esp,0x10
c001525b:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0015260:	48                   	dec    eax
c0015261:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0015266:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c001526b:	85 c0                	test   eax,eax
c001526d:	75 01                	jne    c0015270 <RTC::RTC()+0xb4>
c001526f:	fb                   	sti    
c0015270:	90                   	nop
c0015271:	83 c4 1c             	add    esp,0x1c
c0015274:	c3                   	ret    
c0015275:	66 90                	xchg   ax,ax
c0015277:	90                   	nop

c0015278 <HalConsoleScroll(int, int)>:
c0015278:	83 ec 10             	sub    esp,0x10
c001527b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015283:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001528b:	90                   	nop
c001528c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015291:	0f 8f e1 00 00 00    	jg     c0015378 <HalConsoleScroll(int, int)+0x100>
c0015297:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001529f:	90                   	nop
c00152a0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00152a8:	0f 8f be 00 00 00    	jg     c001536c <HalConsoleScroll(int, int)+0xf4>
c00152ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00152b2:	89 d0                	mov    eax,edx
c00152b4:	c1 e0 02             	shl    eax,0x2
c00152b7:	01 d0                	add    eax,edx
c00152b9:	c1 e0 05             	shl    eax,0x5
c00152bc:	89 c2                	mov    edx,eax
c00152be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152c2:	01 d0                	add    eax,edx
c00152c4:	89 c2                	mov    edx,eax
c00152c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00152ca:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00152cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00152d1:	89 d0                	mov    eax,edx
c00152d3:	c1 e0 02             	shl    eax,0x2
c00152d6:	01 d0                	add    eax,edx
c00152d8:	c1 e0 05             	shl    eax,0x5
c00152db:	89 c2                	mov    edx,eax
c00152dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152e1:	01 d0                	add    eax,edx
c00152e3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00152e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00152ed:	01 c2                	add    edx,eax
c00152ef:	8a 01                	mov    al,BYTE PTR [ecx]
c00152f1:	88 02                	mov    BYTE PTR [edx],al
c00152f3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00152f8:	75 66                	jne    c0015360 <HalConsoleScroll(int, int)+0xe8>
c00152fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152fe:	83 e0 01             	and    eax,0x1
c0015301:	74 39                	je     c001533c <HalConsoleScroll(int, int)+0xc4>
c0015303:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015307:	83 e0 0f             	and    eax,0xf
c001530a:	88 c2                	mov    dl,al
c001530c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015310:	c1 e0 04             	shl    eax,0x4
c0015313:	88 d1                	mov    cl,dl
c0015315:	09 c1                	or     ecx,eax
c0015317:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001531b:	89 d0                	mov    eax,edx
c001531d:	c1 e0 02             	shl    eax,0x2
c0015320:	01 d0                	add    eax,edx
c0015322:	c1 e0 05             	shl    eax,0x5
c0015325:	89 c2                	mov    edx,eax
c0015327:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001532b:	01 d0                	add    eax,edx
c001532d:	89 c2                	mov    edx,eax
c001532f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015333:	01 d0                	add    eax,edx
c0015335:	88 ca                	mov    dl,cl
c0015337:	88 10                	mov    BYTE PTR [eax],dl
c0015339:	eb 25                	jmp    c0015360 <HalConsoleScroll(int, int)+0xe8>
c001533b:	90                   	nop
c001533c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015340:	89 d0                	mov    eax,edx
c0015342:	c1 e0 02             	shl    eax,0x2
c0015345:	01 d0                	add    eax,edx
c0015347:	c1 e0 05             	shl    eax,0x5
c001534a:	89 c2                	mov    edx,eax
c001534c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015350:	01 d0                	add    eax,edx
c0015352:	89 c2                	mov    edx,eax
c0015354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015358:	01 d0                	add    eax,edx
c001535a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001535d:	8d 76 00             	lea    esi,[esi+0x0]
c0015360:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015364:	e9 37 ff ff ff       	jmp    c00152a0 <HalConsoleScroll(int, int)+0x28>
c0015369:	8d 76 00             	lea    esi,[esi+0x0]
c001536c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015370:	e9 17 ff ff ff       	jmp    c001528c <HalConsoleScroll(int, int)+0x14>
c0015375:	8d 76 00             	lea    esi,[esi+0x0]
c0015378:	90                   	nop
c0015379:	83 c4 10             	add    esp,0x10
c001537c:	c3                   	ret    
c001537d:	8d 76 00             	lea    esi,[esi+0x0]

c0015380 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015380:	83 ec 14             	sub    esp,0x14
c0015383:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015387:	88 04 24             	mov    BYTE PTR [esp],al
c001538a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001538d:	25 ff 00 00 00       	and    eax,0xff
c0015392:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015396:	89 d1                	mov    ecx,edx
c0015398:	83 e1 0f             	and    ecx,0xf
c001539b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001539f:	c1 e2 04             	shl    edx,0x4
c00153a2:	81 e2 ff 00 00 00    	and    edx,0xff
c00153a8:	09 ca                	or     edx,ecx
c00153aa:	c1 e2 08             	shl    edx,0x8
c00153ad:	09 d0                	or     eax,edx
c00153af:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00153b4:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00153bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00153c0:	89 d0                	mov    eax,edx
c00153c2:	c1 e0 02             	shl    eax,0x2
c00153c5:	01 d0                	add    eax,edx
c00153c7:	c1 e0 04             	shl    eax,0x4
c00153ca:	89 c2                	mov    edx,eax
c00153cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153d0:	01 d0                	add    eax,edx
c00153d2:	01 c0                	add    eax,eax
c00153d4:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00153d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153dc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00153e1:	66 89 02             	mov    WORD PTR [edx],ax
c00153e4:	90                   	nop
c00153e5:	83 c4 14             	add    esp,0x14
c00153e8:	c3                   	ret    
c00153e9:	8d 76 00             	lea    esi,[esi+0x0]

c00153ec <HalConsoleCursorUpdate(int, int)>:
c00153ec:	83 ec 20             	sub    esp,0x20
c00153ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153f3:	89 c2                	mov    edx,eax
c00153f5:	89 d0                	mov    eax,edx
c00153f7:	c1 e0 02             	shl    eax,0x2
c00153fa:	01 d0                	add    eax,edx
c00153fc:	c1 e0 04             	shl    eax,0x4
c00153ff:	89 c2                	mov    edx,eax
c0015401:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015405:	01 d0                	add    eax,edx
c0015407:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001540c:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015413:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015418:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001541c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015420:	ee                   	out    dx,al
c0015421:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015426:	25 ff 00 00 00       	and    eax,0xff
c001542b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015432:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015436:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001543a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001543e:	ee                   	out    dx,al
c001543f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015446:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001544b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001544f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015453:	ee                   	out    dx,al
c0015454:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015459:	66 c1 e8 08          	shr    ax,0x8
c001545d:	25 ff 00 00 00       	and    eax,0xff
c0015462:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015469:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001546d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015471:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015475:	ee                   	out    dx,al
c0015476:	90                   	nop
c0015477:	83 c4 20             	add    esp,0x20
c001547a:	c3                   	ret    
c001547b:	90                   	nop

c001547c <FAT::getName()>:
c001547c:	b8 d0 e4 01 c0       	mov    eax,0xc001e4d0
c0015481:	c3                   	ret    
c0015482:	66 90                	xchg   ax,ax

c0015484 <FAT::tell(void*, unsigned long long*)>:
c0015484:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015489:	75 09                	jne    c0015494 <FAT::tell(void*, unsigned long long*)+0x10>
c001548b:	b8 04 00 00 00       	mov    eax,0x4
c0015490:	c3                   	ret    
c0015491:	8d 76 00             	lea    esi,[esi+0x0]
c0015494:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015499:	75 09                	jne    c00154a4 <FAT::tell(void*, unsigned long long*)+0x20>
c001549b:	b8 04 00 00 00       	mov    eax,0x4
c00154a0:	c3                   	ret    
c00154a1:	8d 76 00             	lea    esi,[esi+0x0]
c00154a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00154a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00154ab:	ba 00 00 00 00       	mov    edx,0x0
c00154b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00154b4:	89 01                	mov    DWORD PTR [ecx],eax
c00154b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00154b9:	b8 00 00 00 00       	mov    eax,0x0
c00154be:	c3                   	ret    
c00154bf:	90                   	nop

c00154c0 <FAT::stat(void*, unsigned long long*)>:
c00154c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00154c5:	75 09                	jne    c00154d0 <FAT::stat(void*, unsigned long long*)+0x10>
c00154c7:	b8 04 00 00 00       	mov    eax,0x4
c00154cc:	c3                   	ret    
c00154cd:	8d 76 00             	lea    esi,[esi+0x0]
c00154d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00154d5:	75 09                	jne    c00154e0 <FAT::stat(void*, unsigned long long*)+0x20>
c00154d7:	b8 04 00 00 00       	mov    eax,0x4
c00154dc:	c3                   	ret    
c00154dd:	8d 76 00             	lea    esi,[esi+0x0]
c00154e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00154e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00154e7:	ba 00 00 00 00       	mov    edx,0x0
c00154ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00154f0:	89 01                	mov    DWORD PTR [ecx],eax
c00154f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00154f5:	b8 00 00 00 00       	mov    eax,0x0
c00154fa:	c3                   	ret    
c00154fb:	90                   	nop

c00154fc <FAT::~FAT()>:
c00154fc:	83 ec 0c             	sub    esp,0xc
c00154ff:	ba 1c e5 01 c0       	mov    edx,0xc001e51c
c0015504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015508:	89 10                	mov    DWORD PTR [eax],edx
c001550a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001550e:	83 ec 0c             	sub    esp,0xc
c0015511:	50                   	push   eax
c0015512:	e8 07 48 ff ff       	call   c0009d1e <Filesystem::~Filesystem()>
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	90                   	nop
c001551b:	83 c4 0c             	add    esp,0xc
c001551e:	c3                   	ret    
c001551f:	90                   	nop

c0015520 <FAT::~FAT()>:
c0015520:	83 ec 0c             	sub    esp,0xc
c0015523:	83 ec 0c             	sub    esp,0xc
c0015526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001552a:	e8 cd ff ff ff       	call   c00154fc <FAT::~FAT()>
c001552f:	83 c4 10             	add    esp,0x10
c0015532:	83 ec 08             	sub    esp,0x8
c0015535:	6a 08                	push   0x8
c0015537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001553b:	e8 a2 43 ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c0015540:	83 c4 10             	add    esp,0x10
c0015543:	83 c4 0c             	add    esp,0xc
c0015546:	c3                   	ret    
c0015547:	90                   	nop

c0015548 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0015548:	83 ec 1c             	sub    esp,0x1c
c001554b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0015552:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015557:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001555b:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c0015562:	83 f8 ff             	cmp    eax,0xffffffff
c0015565:	75 35                	jne    c001559c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0015567:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001556b:	88 c2                	mov    dl,al
c001556d:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c0015572:	01 d0                	add    eax,edx
c0015574:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015578:	8b 15 20 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a20
c001557e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015582:	89 14 85 40 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5c0],edx
c0015589:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c001558e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015592:	89 14 85 c0 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd540],edx
c0015599:	eb 19                	jmp    c00155b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001559b:	90                   	nop
c001559c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00155a0:	88 c2                	mov    dl,al
c00155a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00155a6:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c00155ad:	01 d0                	add    eax,edx
c00155af:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00155b3:	90                   	nop
c00155b4:	83 ec 04             	sub    esp,0x4
c00155b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00155bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00155bf:	8d 44 24 15          	lea    eax,[esp+0x15]
c00155c3:	50                   	push   eax
c00155c4:	e8 b8 f6 fe ff       	call   c0004c81 <f_getlabel>
c00155c9:	83 c4 10             	add    esp,0x10
c00155cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00155d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00155d5:	75 09                	jne    c00155e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00155d7:	b8 00 00 00 00       	mov    eax,0x0
c00155dc:	eb 0a                	jmp    c00155e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00155de:	66 90                	xchg   ax,ax
c00155e0:	b8 01 00 00 00       	mov    eax,0x1
c00155e5:	8d 76 00             	lea    esi,[esi+0x0]
c00155e8:	83 c4 1c             	add    esp,0x1c
c00155eb:	c3                   	ret    

c00155ec <FAT::setlabel(LogicalDisk*, int, char*)>:
c00155ec:	57                   	push   edi
c00155ed:	83 ec 58             	sub    esp,0x58
c00155f0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00155f8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00155fc:	b8 00 00 00 00       	mov    eax,0x0
c0015601:	b9 0f 00 00 00       	mov    ecx,0xf
c0015606:	fc                   	cld    
c0015607:	89 d7                	mov    edi,edx
c0015609:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001560b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001560f:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c0015616:	83 f8 ff             	cmp    eax,0xffffffff
c0015619:	75 35                	jne    c0015650 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001561b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001561f:	88 c2                	mov    dl,al
c0015621:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c0015626:	01 d0                	add    eax,edx
c0015628:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001562c:	8b 15 20 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a20
c0015632:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015636:	89 14 85 40 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5c0],edx
c001563d:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c0015642:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0015646:	89 14 85 c0 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd540],edx
c001564d:	eb 19                	jmp    c0015668 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001564f:	90                   	nop
c0015650:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015654:	88 c2                	mov    dl,al
c0015656:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001565a:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c0015661:	01 d0                	add    eax,edx
c0015663:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015667:	90                   	nop
c0015668:	83 ec 08             	sub    esp,0x8
c001566b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001566f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015673:	50                   	push   eax
c0015674:	e8 67 b1 fe ff       	call   c00007e0 <strcat>
c0015679:	83 c4 10             	add    esp,0x10
c001567c:	83 ec 0c             	sub    esp,0xc
c001567f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015683:	50                   	push   eax
c0015684:	e8 49 f7 fe ff       	call   c0004dd2 <f_setlabel>
c0015689:	83 c4 10             	add    esp,0x10
c001568c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015690:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0015695:	75 09                	jne    c00156a0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0015697:	b8 00 00 00 00       	mov    eax,0x0
c001569c:	eb 0a                	jmp    c00156a8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001569e:	66 90                	xchg   ax,ax
c00156a0:	b8 01 00 00 00       	mov    eax,0x1
c00156a5:	8d 76 00             	lea    esi,[esi+0x0]
c00156a8:	83 c4 58             	add    esp,0x58
c00156ab:	5f                   	pop    edi
c00156ac:	c3                   	ret    
c00156ad:	90                   	nop
c00156ae:	66 90                	xchg   ax,ax

c00156b0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00156b0:	83 ec 2c             	sub    esp,0x2c
c00156b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00156bb:	83 ec 08             	sub    esp,0x8
c00156be:	68 f4 e4 01 c0       	push   0xc001e4f4
c00156c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00156c7:	e8 34 b0 fe ff       	call   c0000700 <strcmp>
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	85 c0                	test   eax,eax
c00156d1:	0f 94 c0             	sete   al
c00156d4:	84 c0                	test   al,al
c00156d6:	74 10                	je     c00156e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00156d8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00156e0:	e9 b3 00 00 00       	jmp    c0015798 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00156e5:	8d 76 00             	lea    esi,[esi+0x0]
c00156e8:	83 ec 08             	sub    esp,0x8
c00156eb:	68 e6 e4 01 c0       	push   0xc001e4e6
c00156f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00156f4:	e8 07 b0 fe ff       	call   c0000700 <strcmp>
c00156f9:	83 c4 10             	add    esp,0x10
c00156fc:	85 c0                	test   eax,eax
c00156fe:	0f 94 c0             	sete   al
c0015701:	84 c0                	test   al,al
c0015703:	74 0f                	je     c0015714 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0015705:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001570d:	e9 86 00 00 00       	jmp    c0015798 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015712:	66 90                	xchg   ax,ax
c0015714:	83 ec 08             	sub    esp,0x8
c0015717:	68 ec e4 01 c0       	push   0xc001e4ec
c001571c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015720:	e8 db af fe ff       	call   c0000700 <strcmp>
c0015725:	83 c4 10             	add    esp,0x10
c0015728:	85 c0                	test   eax,eax
c001572a:	0f 94 c0             	sete   al
c001572d:	84 c0                	test   al,al
c001572f:	74 0b                	je     c001573c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0015731:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0015739:	eb 5d                	jmp    c0015798 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001573b:	90                   	nop
c001573c:	83 ec 08             	sub    esp,0x8
c001573f:	68 dc c4 01 c0       	push   0xc001c4dc
c0015744:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015748:	e8 b3 af fe ff       	call   c0000700 <strcmp>
c001574d:	83 c4 10             	add    esp,0x10
c0015750:	85 c0                	test   eax,eax
c0015752:	0f 94 c0             	sete   al
c0015755:	84 c0                	test   al,al
c0015757:	74 0b                	je     c0015764 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0015759:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0015761:	eb 35                	jmp    c0015798 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015763:	90                   	nop
c0015764:	83 ec 08             	sub    esp,0x8
c0015767:	68 f2 e4 01 c0       	push   0xc001e4f2
c001576c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015770:	e8 8b af fe ff       	call   c0000700 <strcmp>
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	85 c0                	test   eax,eax
c001577a:	0f 94 c0             	sete   al
c001577d:	84 c0                	test   al,al
c001577f:	74 0b                	je     c001578c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0015781:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0015789:	eb 0d                	jmp    c0015798 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001578b:	90                   	nop
c001578c:	b8 08 00 00 00       	mov    eax,0x8
c0015791:	e9 ea 00 00 00       	jmp    c0015880 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015796:	66 90                	xchg   ax,ax
c0015798:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001579f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00157a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00157a8:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c00157af:	83 f8 ff             	cmp    eax,0xffffffff
c00157b2:	75 34                	jne    c00157e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00157b4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00157b8:	88 c2                	mov    dl,al
c00157ba:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c00157bf:	01 d0                	add    eax,edx
c00157c1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00157c5:	8b 15 20 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a20
c00157cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00157cf:	89 14 85 40 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5c0],edx
c00157d6:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c00157db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00157df:	89 14 85 c0 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd540],edx
c00157e6:	eb 18                	jmp    c0015800 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00157e8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00157ec:	88 c2                	mov    dl,al
c00157ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00157f2:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c00157f9:	01 d0                	add    eax,edx
c00157fb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00157ff:	90                   	nop
c0015800:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015804:	88 04 24             	mov    BYTE PTR [esp],al
c0015807:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001580b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001580f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015817:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001581c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015824:	83 ec 0c             	sub    esp,0xc
c0015827:	68 00 20 00 00       	push   0x2000
c001582c:	e8 e4 13 ff ff       	call   c0006c15 <malloc>
c0015831:	83 c4 10             	add    esp,0x10
c0015834:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015838:	68 00 20 00 00       	push   0x2000
c001583d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015841:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015845:	50                   	push   eax
c0015846:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001584a:	50                   	push   eax
c001584b:	e8 72 f8 fe ff       	call   c00050c2 <f_mkfs>
c0015850:	83 c4 10             	add    esp,0x10
c0015853:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015857:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001585c:	75 0a                	jne    c0015868 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001585e:	b8 00 00 00 00       	mov    eax,0x0
c0015863:	eb 1b                	jmp    c0015880 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015865:	8d 76 00             	lea    esi,[esi+0x0]
c0015868:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001586d:	75 09                	jne    c0015878 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001586f:	b8 09 00 00 00       	mov    eax,0x9
c0015874:	eb 0a                	jmp    c0015880 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015876:	66 90                	xchg   ax,ax
c0015878:	b8 01 00 00 00       	mov    eax,0x1
c001587d:	8d 76 00             	lea    esi,[esi+0x0]
c0015880:	83 c4 2c             	add    esp,0x2c
c0015883:	c3                   	ret    

c0015884 <FAT::tryMount(LogicalDisk*, int)>:
c0015884:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001588a:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c001588f:	83 f8 14             	cmp    eax,0x14
c0015892:	75 18                	jne    c00158ac <FAT::tryMount(LogicalDisk*, int)+0x28>
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	68 f8 e4 01 c0       	push   0xc001e4f8
c001589c:	e8 86 9c ff ff       	call   c000f527 <Krnl::panic(char const*)>
c00158a1:	83 c4 10             	add    esp,0x10
c00158a4:	b0 00                	mov    al,0x0
c00158a6:	e9 e9 01 00 00       	jmp    c0015a94 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00158ab:	90                   	nop
c00158ac:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00158b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00158b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00158bf:	3d 00 02 00 00       	cmp    eax,0x200
c00158c4:	74 0a                	je     c00158d0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00158c6:	b0 00                	mov    al,0x0
c00158c8:	e9 c7 01 00 00       	jmp    c0015a94 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00158cd:	8d 76 00             	lea    esi,[esi+0x0]
c00158d0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00158d8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00158df:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c00158e6:	83 f8 ff             	cmp    eax,0xffffffff
c00158e9:	74 09                	je     c00158f4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00158eb:	b0 01                	mov    al,0x1
c00158ed:	e9 a2 01 00 00       	jmp    c0015a94 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00158f2:	66 90                	xchg   ax,ax
c00158f4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00158fe:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0015906:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001590d:	88 c2                	mov    dl,al
c001590f:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c0015914:	01 d0                	add    eax,edx
c0015916:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001591d:	8b 15 20 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a20
c0015923:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001592a:	89 14 85 40 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5c0],edx
c0015931:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c0015936:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001593d:	89 14 85 c0 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd540],edx
c0015944:	83 ec 0c             	sub    esp,0xc
c0015947:	68 34 02 00 00       	push   0x234
c001594c:	e8 c4 12 ff ff       	call   c0006c15 <malloc>
c0015951:	83 c4 10             	add    esp,0x10
c0015954:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001595b:	83 ec 04             	sub    esp,0x4
c001595e:	6a 00                	push   0x0
c0015960:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015967:	50                   	push   eax
c0015968:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001596f:	e8 74 df fe ff       	call   c00038e8 <f_mount>
c0015974:	83 c4 10             	add    esp,0x10
c0015977:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001597e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0015986:	74 1c                	je     c00159a4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015992:	e8 9e 12 ff ff       	call   c0006c35 <rfree>
c0015997:	83 c4 10             	add    esp,0x10
c001599a:	b0 00                	mov    al,0x0
c001599c:	e9 f3 00 00 00       	jmp    c0015a94 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00159a1:	8d 76 00             	lea    esi,[esi+0x0]
c00159a4:	83 ec 04             	sub    esp,0x4
c00159a7:	68 00 01 00 00       	push   0x100
c00159ac:	6a 00                	push   0x0
c00159ae:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00159b5:	50                   	push   eax
c00159b6:	e8 35 ab fe ff       	call   c00004f0 <memset>
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	83 ec 08             	sub    esp,0x8
c00159c1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00159c8:	50                   	push   eax
c00159c9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00159d0:	50                   	push   eax
c00159d1:	e8 0a ae fe ff       	call   c00007e0 <strcat>
c00159d6:	83 c4 10             	add    esp,0x10
c00159d9:	83 ec 08             	sub    esp,0x8
c00159dc:	68 06 e5 01 c0       	push   0xc001e506
c00159e1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00159e8:	50                   	push   eax
c00159e9:	e8 f2 ad fe ff       	call   c00007e0 <strcat>
c00159ee:	83 c4 10             	add    esp,0x10
c00159f1:	83 ec 04             	sub    esp,0x4
c00159f4:	6a 01                	push   0x1
c00159f6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00159fd:	50                   	push   eax
c00159fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015a02:	50                   	push   eax
c0015a03:	e8 42 df fe ff       	call   c000394a <f_open>
c0015a08:	83 c4 10             	add    esp,0x10
c0015a0b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0015a12:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0015a19:	85 c0                	test   eax,eax
c0015a1b:	74 0b                	je     c0015a28 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0015a1d:	78 31                	js     c0015a50 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0015a1f:	83 e8 04             	sub    eax,0x4
c0015a22:	83 f8 01             	cmp    eax,0x1
c0015a25:	77 29                	ja     c0015a50 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0015a27:	90                   	nop
c0015a28:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0015a30:	83 ec 0c             	sub    esp,0xc
c0015a33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015a37:	50                   	push   eax
c0015a38:	e8 c0 e6 fe ff       	call   c00040fd <f_close>
c0015a3d:	83 c4 10             	add    esp,0x10
c0015a40:	90                   	nop
c0015a41:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0015a49:	74 41                	je     c0015a8c <FAT::tryMount(LogicalDisk*, int)+0x208>
c0015a4b:	eb 33                	jmp    c0015a80 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0015a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a50:	83 ec 0c             	sub    esp,0xc
c0015a53:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015a5a:	e8 d6 11 ff ff       	call   c0006c35 <rfree>
c0015a5f:	83 c4 10             	add    esp,0x10
c0015a62:	83 ec 04             	sub    esp,0x4
c0015a65:	6a 00                	push   0x0
c0015a67:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015a6e:	50                   	push   eax
c0015a6f:	6a 00                	push   0x0
c0015a71:	e8 72 de fe ff       	call   c00038e8 <f_mount>
c0015a76:	83 c4 10             	add    esp,0x10
c0015a79:	b0 00                	mov    al,0x0
c0015a7b:	eb 17                	jmp    c0015a94 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a80:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c0015a85:	40                   	inc    eax
c0015a86:	a3 20 2a 02 c0       	mov    ds:0xc0022a20,eax
c0015a8b:	90                   	nop
c0015a8c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0015a93:	90                   	nop
c0015a94:	81 c4 4c 03 00 00    	add    esp,0x34c
c0015a9a:	c3                   	ret    
c0015a9b:	90                   	nop

c0015a9c <FAT::allocateSwapfile(char const*, int)>:
c0015a9c:	55                   	push   ebp
c0015a9d:	57                   	push   edi
c0015a9e:	56                   	push   esi
c0015a9f:	53                   	push   ebx
c0015aa0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0015aa6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0015ab1:	83 ec 0c             	sub    esp,0xc
c0015ab4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0015abb:	e8 55 11 ff ff       	call   c0006c15 <malloc>
c0015ac0:	83 c4 10             	add    esp,0x10
c0015ac3:	89 c7                	mov    edi,eax
c0015ac5:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0015aca:	83 ec 04             	sub    esp,0x4
c0015acd:	50                   	push   eax
c0015ace:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0015ad5:	57                   	push   edi
c0015ad6:	e8 73 44 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c0015adb:	83 c4 10             	add    esp,0x10
c0015ade:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0015ae5:	83 ec 04             	sub    esp,0x4
c0015ae8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015aec:	50                   	push   eax
c0015aed:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015af1:	50                   	push   eax
c0015af2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015af9:	e8 bc 47 ff ff       	call   c000a2ba <File::stat(unsigned long long*, bool*)>
c0015afe:	83 c4 10             	add    esp,0x10
c0015b01:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015b08:	c1 e0 14             	shl    eax,0x14
c0015b0b:	89 c7                	mov    edi,eax
c0015b0d:	89 c5                	mov    ebp,eax
c0015b0f:	c1 fd 1f             	sar    ebp,0x1f
c0015b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b1a:	89 f9                	mov    ecx,edi
c0015b1c:	31 c1                	xor    ecx,eax
c0015b1e:	89 cb                	mov    ebx,ecx
c0015b20:	89 e9                	mov    ecx,ebp
c0015b22:	31 d1                	xor    ecx,edx
c0015b24:	89 ce                	mov    esi,ecx
c0015b26:	89 f0                	mov    eax,esi
c0015b28:	09 d8                	or     eax,ebx
c0015b2a:	0f 84 9c 00 00 00    	je     c0015bcc <FAT::allocateSwapfile(char const*, int)+0x130>
c0015b30:	83 ec 0c             	sub    esp,0xc
c0015b33:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015b3a:	e8 47 46 ff ff       	call   c000a186 <File::unlink()>
c0015b3f:	83 c4 10             	add    esp,0x10
c0015b42:	83 ec 08             	sub    esp,0x8
c0015b45:	6a 12                	push   0x12
c0015b47:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015b4e:	e8 bb 44 ff ff       	call   c000a00e <File::open(FileOpenMode)>
c0015b53:	83 c4 10             	add    esp,0x10
c0015b56:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015b5d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015b63:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015b6a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015b71:	c1 e0 14             	shl    eax,0x14
c0015b74:	83 ec 04             	sub    esp,0x4
c0015b77:	6a 01                	push   0x1
c0015b79:	50                   	push   eax
c0015b7a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0015b81:	e8 dc f3 fe ff       	call   c0004f62 <f_expand>
c0015b86:	83 c4 10             	add    esp,0x10
c0015b89:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b92:	83 c0 10             	add    eax,0x10
c0015b95:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b97:	83 ec 0c             	sub    esp,0xc
c0015b9a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015b9e:	52                   	push   edx
c0015b9f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0015ba3:	52                   	push   edx
c0015ba4:	6a 00                	push   0x0
c0015ba6:	68 00 04 00 00       	push   0x400
c0015bab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015bb2:	ff d0                	call   eax
c0015bb4:	83 c4 20             	add    esp,0x20
c0015bb7:	83 ec 0c             	sub    esp,0xc
c0015bba:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015bc1:	e8 a6 44 ff ff       	call   c000a06c <File::close()>
c0015bc6:	83 c4 10             	add    esp,0x10
c0015bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bcc:	83 ec 08             	sub    esp,0x8
c0015bcf:	6a 01                	push   0x1
c0015bd1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015bd8:	e8 31 44 ff ff       	call   c000a00e <File::open(FileOpenMode)>
c0015bdd:	83 c4 10             	add    esp,0x10
c0015be0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be9:	83 c0 0c             	add    eax,0xc
c0015bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bee:	83 ec 0c             	sub    esp,0xc
c0015bf1:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015bf5:	52                   	push   edx
c0015bf6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0015bfa:	52                   	push   edx
c0015bfb:	6a 00                	push   0x0
c0015bfd:	6a 04                	push   0x4
c0015bff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015c06:	ff d0                	call   eax
c0015c08:	83 c4 20             	add    esp,0x20
c0015c0b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015c12:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015c18:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015c1f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0015c26:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015c29:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0015c30:	83 ec 0c             	sub    esp,0xc
c0015c33:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015c3a:	e8 2d 44 ff ff       	call   c000a06c <File::close()>
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0015c49:	ba 00 00 00 00       	mov    edx,0x0
c0015c4e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0015c54:	5b                   	pop    ebx
c0015c55:	5e                   	pop    esi
c0015c56:	5f                   	pop    edi
c0015c57:	5d                   	pop    ebp
c0015c58:	c3                   	ret    
c0015c59:	90                   	nop
c0015c5a:	66 90                	xchg   ax,ax

c0015c5c <FAT::readDir(void*, unsigned long, void*, int*)>:
c0015c5c:	57                   	push   edi
c0015c5d:	56                   	push   esi
c0015c5e:	53                   	push   ebx
c0015c5f:	81 ec 50 02 00 00    	sub    esp,0x250
c0015c65:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0015c6d:	74 0d                	je     c0015c7c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0015c6f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0015c77:	75 0f                	jne    c0015c88 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0015c79:	8d 76 00             	lea    esi,[esi+0x0]
c0015c7c:	b8 04 00 00 00       	mov    eax,0x4
c0015c81:	e9 36 01 00 00       	jmp    c0015dbc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015c86:	66 90                	xchg   ax,ax
c0015c88:	83 ec 08             	sub    esp,0x8
c0015c8b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015c92:	50                   	push   eax
c0015c93:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0015c9a:	e8 21 e7 fe ff       	call   c00043c0 <f_readdir>
c0015c9f:	83 c4 10             	add    esp,0x10
c0015ca2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0015ca9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0015cb0:	83 ec 0c             	sub    esp,0xc
c0015cb3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0015cba:	83 c0 16             	add    eax,0x16
c0015cbd:	50                   	push   eax
c0015cbe:	e8 9d a8 fe ff       	call   c0000560 <strlen>
c0015cc3:	83 c4 10             	add    esp,0x10
c0015cc6:	ba 00 00 00 00       	mov    edx,0x0
c0015ccb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ccf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015cd3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0015cda:	25 ff 00 00 00       	and    eax,0xff
c0015cdf:	83 e0 10             	and    eax,0x10
c0015ce2:	74 08                	je     c0015cec <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0015ce4:	b8 02 00 00 00       	mov    eax,0x2
c0015ce9:	eb 09                	jmp    c0015cf4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0015ceb:	90                   	nop
c0015cec:	b8 01 00 00 00       	mov    eax,0x1
c0015cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015cf8:	83 ec 08             	sub    esp,0x8
c0015cfb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015d02:	83 c0 16             	add    eax,0x16
c0015d05:	50                   	push   eax
c0015d06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015d0a:	83 c0 10             	add    eax,0x10
c0015d0d:	50                   	push   eax
c0015d0e:	e8 0d a9 fe ff       	call   c0000620 <strcpy>
c0015d13:	83 c4 10             	add    esp,0x10
c0015d16:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0015d1d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0015d24:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d28:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0015d2f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0015d36:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0015d3d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0015d44:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0015d4b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0015d52:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0015d59:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0015d60:	89 c6                	mov    esi,eax
c0015d62:	89 d7                	mov    edi,edx
c0015d64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d66:	89 c8                	mov    eax,ecx
c0015d68:	89 fa                	mov    edx,edi
c0015d6a:	89 f3                	mov    ebx,esi
c0015d6c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0015d73:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0015d7a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0015d81:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0015d88:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0015d8e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0015d95:	84 c0                	test   al,al
c0015d97:	75 07                	jne    c0015da0 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0015d99:	b8 07 00 00 00       	mov    eax,0x7
c0015d9e:	eb 1c                	jmp    c0015dbc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015da0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0015da7:	85 c0                	test   eax,eax
c0015da9:	75 09                	jne    c0015db4 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0015dab:	b8 00 00 00 00       	mov    eax,0x0
c0015db0:	eb 0a                	jmp    c0015dbc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015db2:	66 90                	xchg   ax,ax
c0015db4:	b8 01 00 00 00       	mov    eax,0x1
c0015db9:	8d 76 00             	lea    esi,[esi+0x0]
c0015dbc:	81 c4 50 02 00 00    	add    esp,0x250
c0015dc2:	5b                   	pop    ebx
c0015dc3:	5e                   	pop    esi
c0015dc4:	5f                   	pop    edi
c0015dc5:	c3                   	ret    
c0015dc6:	66 90                	xchg   ax,ax

c0015dc8 <FAT::read(void*, unsigned long, void*, int*)>:
c0015dc8:	83 ec 1c             	sub    esp,0x1c
c0015dcb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015dd0:	74 0a                	je     c0015ddc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0015dd2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015dd7:	75 0b                	jne    c0015de4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0015dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0015ddc:	b8 04 00 00 00       	mov    eax,0x4
c0015de1:	eb 41                	jmp    c0015e24 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015de3:	90                   	nop
c0015de4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015de8:	50                   	push   eax
c0015de9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ded:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015df1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015df5:	e8 1b de fe ff       	call   c0003c15 <f_read>
c0015dfa:	83 c4 10             	add    esp,0x10
c0015dfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e05:	89 c2                	mov    edx,eax
c0015e07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e0b:	89 10                	mov    DWORD PTR [eax],edx
c0015e0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e11:	85 c0                	test   eax,eax
c0015e13:	75 07                	jne    c0015e1c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0015e15:	b8 00 00 00 00       	mov    eax,0x0
c0015e1a:	eb 08                	jmp    c0015e24 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015e1c:	b8 01 00 00 00       	mov    eax,0x1
c0015e21:	8d 76 00             	lea    esi,[esi+0x0]
c0015e24:	83 c4 1c             	add    esp,0x1c
c0015e27:	c3                   	ret    

c0015e28 <FAT::write(void*, unsigned long, void*, int*)>:
c0015e28:	83 ec 1c             	sub    esp,0x1c
c0015e2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015e30:	74 0a                	je     c0015e3c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0015e32:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015e37:	75 0b                	jne    c0015e44 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0015e39:	8d 76 00             	lea    esi,[esi+0x0]
c0015e3c:	b8 04 00 00 00       	mov    eax,0x4
c0015e41:	eb 41                	jmp    c0015e84 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015e43:	90                   	nop
c0015e44:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015e48:	50                   	push   eax
c0015e49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015e51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e55:	e8 ba df fe ff       	call   c0003e14 <f_write>
c0015e5a:	83 c4 10             	add    esp,0x10
c0015e5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e65:	89 c2                	mov    edx,eax
c0015e67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e6b:	89 10                	mov    DWORD PTR [eax],edx
c0015e6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e71:	85 c0                	test   eax,eax
c0015e73:	75 07                	jne    c0015e7c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0015e75:	b8 00 00 00 00       	mov    eax,0x0
c0015e7a:	eb 08                	jmp    c0015e84 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015e7c:	b8 01 00 00 00       	mov    eax,0x1
c0015e81:	8d 76 00             	lea    esi,[esi+0x0]
c0015e84:	83 c4 1c             	add    esp,0x1c
c0015e87:	c3                   	ret    

c0015e88 <FAT::close(void*)>:
c0015e88:	83 ec 1c             	sub    esp,0x1c
c0015e8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015e90:	75 0a                	jne    c0015e9c <FAT::close(void*)+0x14>
c0015e92:	b8 04 00 00 00       	mov    eax,0x4
c0015e97:	eb 3f                	jmp    c0015ed8 <FAT::close(void*)+0x50>
c0015e99:	8d 76 00             	lea    esi,[esi+0x0]
c0015e9c:	83 ec 0c             	sub    esp,0xc
c0015e9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ea3:	e8 55 e2 fe ff       	call   c00040fd <f_close>
c0015ea8:	83 c4 10             	add    esp,0x10
c0015eab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015eaf:	83 ec 0c             	sub    esp,0xc
c0015eb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015eb6:	e8 6a 0d ff ff       	call   c0006c25 <free>
c0015ebb:	83 c4 10             	add    esp,0x10
c0015ebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ec2:	85 c0                	test   eax,eax
c0015ec4:	75 0a                	jne    c0015ed0 <FAT::close(void*)+0x48>
c0015ec6:	b8 00 00 00 00       	mov    eax,0x0
c0015ecb:	eb 0b                	jmp    c0015ed8 <FAT::close(void*)+0x50>
c0015ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0015ed0:	b8 01 00 00 00       	mov    eax,0x1
c0015ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ed8:	83 c4 1c             	add    esp,0x1c
c0015edb:	c3                   	ret    

c0015edc <FAT::closeDir(void*)>:
c0015edc:	83 ec 1c             	sub    esp,0x1c
c0015edf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015ee4:	75 0a                	jne    c0015ef0 <FAT::closeDir(void*)+0x14>
c0015ee6:	b8 04 00 00 00       	mov    eax,0x4
c0015eeb:	eb 3f                	jmp    c0015f2c <FAT::closeDir(void*)+0x50>
c0015eed:	8d 76 00             	lea    esi,[esi+0x0]
c0015ef0:	83 ec 0c             	sub    esp,0xc
c0015ef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ef7:	e8 a2 e4 fe ff       	call   c000439e <f_closedir>
c0015efc:	83 c4 10             	add    esp,0x10
c0015eff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f03:	83 ec 0c             	sub    esp,0xc
c0015f06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f0a:	e8 16 0d ff ff       	call   c0006c25 <free>
c0015f0f:	83 c4 10             	add    esp,0x10
c0015f12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f16:	85 c0                	test   eax,eax
c0015f18:	75 0a                	jne    c0015f24 <FAT::closeDir(void*)+0x48>
c0015f1a:	b8 00 00 00 00       	mov    eax,0x0
c0015f1f:	eb 0b                	jmp    c0015f2c <FAT::closeDir(void*)+0x50>
c0015f21:	8d 76 00             	lea    esi,[esi+0x0]
c0015f24:	b8 01 00 00 00       	mov    eax,0x1
c0015f29:	8d 76 00             	lea    esi,[esi+0x0]
c0015f2c:	83 c4 1c             	add    esp,0x1c
c0015f2f:	c3                   	ret    

c0015f30 <FAT::seek(void*, unsigned long long)>:
c0015f30:	83 ec 2c             	sub    esp,0x2c
c0015f33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015f37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015f3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015f3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f43:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0015f48:	75 0a                	jne    c0015f54 <FAT::seek(void*, unsigned long long)+0x24>
c0015f4a:	b8 04 00 00 00       	mov    eax,0x4
c0015f4f:	eb 33                	jmp    c0015f84 <FAT::seek(void*, unsigned long long)+0x54>
c0015f51:	8d 76 00             	lea    esi,[esi+0x0]
c0015f54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f58:	83 ec 08             	sub    esp,0x8
c0015f5b:	50                   	push   eax
c0015f5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015f60:	e8 c7 e1 fe ff       	call   c000412c <f_lseek>
c0015f65:	83 c4 10             	add    esp,0x10
c0015f68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f70:	85 c0                	test   eax,eax
c0015f72:	75 08                	jne    c0015f7c <FAT::seek(void*, unsigned long long)+0x4c>
c0015f74:	b8 00 00 00 00       	mov    eax,0x0
c0015f79:	eb 09                	jmp    c0015f84 <FAT::seek(void*, unsigned long long)+0x54>
c0015f7b:	90                   	nop
c0015f7c:	b8 01 00 00 00       	mov    eax,0x1
c0015f81:	8d 76 00             	lea    esi,[esi+0x0]
c0015f84:	83 c4 2c             	add    esp,0x2c
c0015f87:	c3                   	ret    

c0015f88 <fatWrapperReadDisk>:
c0015f88:	53                   	push   ebx
c0015f89:	83 ec 18             	sub    esp,0x18
c0015f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f90:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015f94:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f98:	25 ff 00 00 00       	and    eax,0xff
c0015f9d:	8b 0c 85 00 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde600]
c0015fa4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015fa8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015fac:	ba 00 00 00 00       	mov    edx,0x0
c0015fb1:	83 ec 0c             	sub    esp,0xc
c0015fb4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fb8:	53                   	push   ebx
c0015fb9:	52                   	push   edx
c0015fba:	50                   	push   eax
c0015fbb:	51                   	push   ecx
c0015fbc:	e8 ff 60 ff ff       	call   c000c0c0 <LogicalDisk::read(unsigned long long, int, void*)>
c0015fc1:	83 c4 20             	add    esp,0x20
c0015fc4:	83 c4 18             	add    esp,0x18
c0015fc7:	5b                   	pop    ebx
c0015fc8:	c3                   	ret    
c0015fc9:	8d 76 00             	lea    esi,[esi+0x0]

c0015fcc <fatWrapperWriteDisk>:
c0015fcc:	53                   	push   ebx
c0015fcd:	83 ec 18             	sub    esp,0x18
c0015fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015fd8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fdc:	25 ff 00 00 00       	and    eax,0xff
c0015fe1:	8b 0c 85 00 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde600]
c0015fe8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015fec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ff0:	ba 00 00 00 00       	mov    edx,0x0
c0015ff5:	83 ec 0c             	sub    esp,0xc
c0015ff8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ffc:	53                   	push   ebx
c0015ffd:	52                   	push   edx
c0015ffe:	50                   	push   eax
c0015fff:	51                   	push   ecx
c0016000:	e8 27 61 ff ff       	call   c000c12c <LogicalDisk::write(unsigned long long, int, void*)>
c0016005:	83 c4 20             	add    esp,0x20
c0016008:	83 c4 18             	add    esp,0x18
c001600b:	5b                   	pop    ebx
c001600c:	c3                   	ret    
c001600d:	8d 76 00             	lea    esi,[esi+0x0]

c0016010 <fatWrapperIoctl>:
c0016010:	53                   	push   ebx
c0016011:	83 ec 28             	sub    esp,0x28
c0016014:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016018:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001601c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016020:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016024:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016029:	75 35                	jne    c0016060 <fatWrapperIoctl+0x50>
c001602b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001602f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016033:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016037:	25 ff 00 00 00       	and    eax,0xff
c001603c:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c0016043:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016049:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001604f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016053:	66 89 02             	mov    WORD PTR [edx],ax
c0016056:	b8 00 00 00 00       	mov    eax,0x0
c001605b:	e9 c4 00 00 00       	jmp    c0016124 <fatWrapperIoctl+0x114>
c0016060:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016065:	75 75                	jne    c00160dc <fatWrapperIoctl+0xcc>
c0016067:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001606b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001606f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016073:	25 ff 00 00 00       	and    eax,0xff
c0016078:	8b 04 85 00 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde600]
c001607f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016085:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001608b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016091:	89 c8                	mov    eax,ecx
c0016093:	89 da                	mov    edx,ebx
c0016095:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016099:	c1 e0 0a             	shl    eax,0xa
c001609c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00160a0:	81 e1 ff 00 00 00    	and    ecx,0xff
c00160a6:	8b 0c 8d 00 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde600]
c00160ad:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00160b3:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00160b9:	89 cb                	mov    ebx,ecx
c00160bb:	c1 fb 1f             	sar    ebx,0x1f
c00160be:	53                   	push   ebx
c00160bf:	51                   	push   ecx
c00160c0:	52                   	push   edx
c00160c1:	50                   	push   eax
c00160c2:	e8 29 56 00 00       	call   c001b6f0 <__udivdi3>
c00160c7:	83 c4 10             	add    esp,0x10
c00160ca:	89 c2                	mov    edx,eax
c00160cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160d0:	89 10                	mov    DWORD PTR [eax],edx
c00160d2:	b8 00 00 00 00       	mov    eax,0x0
c00160d7:	eb 4b                	jmp    c0016124 <fatWrapperIoctl+0x114>
c00160d9:	8d 76 00             	lea    esi,[esi+0x0]
c00160dc:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00160e1:	75 09                	jne    c00160ec <fatWrapperIoctl+0xdc>
c00160e3:	b8 00 00 00 00       	mov    eax,0x0
c00160e8:	eb 3a                	jmp    c0016124 <fatWrapperIoctl+0x114>
c00160ea:	66 90                	xchg   ax,ax
c00160ec:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00160f1:	75 19                	jne    c001610c <fatWrapperIoctl+0xfc>
c00160f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00160f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160ff:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016105:	b8 00 00 00 00       	mov    eax,0x0
c001610a:	eb 18                	jmp    c0016124 <fatWrapperIoctl+0x114>
c001610c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016111:	75 09                	jne    c001611c <fatWrapperIoctl+0x10c>
c0016113:	b8 00 00 00 00       	mov    eax,0x0
c0016118:	eb 0a                	jmp    c0016124 <fatWrapperIoctl+0x114>
c001611a:	66 90                	xchg   ax,ax
c001611c:	b8 04 00 00 00       	mov    eax,0x4
c0016121:	8d 76 00             	lea    esi,[esi+0x0]
c0016124:	83 c4 28             	add    esp,0x28
c0016127:	5b                   	pop    ebx
c0016128:	c3                   	ret    
c0016129:	90                   	nop
c001612a:	66 90                	xchg   ax,ax

c001612c <FAT::FAT()>:
c001612c:	83 ec 1c             	sub    esp,0x1c
c001612f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016133:	83 ec 0c             	sub    esp,0xc
c0016136:	50                   	push   eax
c0016137:	e8 be 3b ff ff       	call   c0009cfa <Filesystem::Filesystem()>
c001613c:	83 c4 10             	add    esp,0x10
c001613f:	ba 1c e5 01 c0       	mov    edx,0xc001e51c
c0016144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016148:	89 10                	mov    DWORD PTR [eax],edx
c001614a:	c7 05 20 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a20,0x0
c0016154:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001615c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016161:	7f 15                	jg     c0016178 <FAT::FAT()+0x4c>
c0016163:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016167:	c7 04 85 40 2a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdd5c0],0xffffffff
c0016172:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016176:	eb e4                	jmp    c001615c <FAT::FAT()+0x30>
c0016178:	90                   	nop
c0016179:	83 c4 1c             	add    esp,0x1c
c001617c:	c3                   	ret    
c001617d:	90                   	nop
c001617e:	66 90                	xchg   ax,ax

c0016180 <FAT::fixFilepath(char*)>:
c0016180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016184:	8a 00                	mov    al,BYTE PTR [eax]
c0016186:	3c 40                	cmp    al,0x40
c0016188:	7e 2e                	jle    c00161b8 <FAT::fixFilepath(char*)+0x38>
c001618a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001618e:	8a 00                	mov    al,BYTE PTR [eax]
c0016190:	83 e8 41             	sub    eax,0x41
c0016193:	88 c2                	mov    dl,al
c0016195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016199:	88 10                	mov    BYTE PTR [eax],dl
c001619b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001619f:	8a 00                	mov    al,BYTE PTR [eax]
c00161a1:	0f be c0             	movsx  eax,al
c00161a4:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c00161ab:	83 c0 30             	add    eax,0x30
c00161ae:	88 c2                	mov    dl,al
c00161b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161b4:	88 10                	mov    BYTE PTR [eax],dl
c00161b6:	66 90                	xchg   ax,ax
c00161b8:	90                   	nop
c00161b9:	c3                   	ret    
c00161ba:	66 90                	xchg   ax,ax

c00161bc <FAT::open(char const*, void**, FileOpenMode)>:
c00161bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00161c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00161ca:	74 0c                	je     c00161d8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00161cc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00161d4:	75 0e                	jne    c00161e4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00161d6:	66 90                	xchg   ax,ax
c00161d8:	b8 04 00 00 00       	mov    eax,0x4
c00161dd:	e9 0a 01 00 00       	jmp    c00162ec <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00161e2:	66 90                	xchg   ax,ax
c00161e4:	83 ec 08             	sub    esp,0x8
c00161e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00161ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00161f2:	50                   	push   eax
c00161f3:	e8 28 a4 fe ff       	call   c0000620 <strcpy>
c00161f8:	83 c4 10             	add    esp,0x10
c00161fb:	83 ec 08             	sub    esp,0x8
c00161fe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016202:	50                   	push   eax
c0016203:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001620a:	e8 71 ff ff ff       	call   c0016180 <FAT::fixFilepath(char*)>
c001620f:	83 c4 10             	add    esp,0x10
c0016212:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001621a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016221:	83 e0 01             	and    eax,0x1
c0016224:	74 0a                	je     c0016230 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016226:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001622e:	66 90                	xchg   ax,ax
c0016230:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016237:	83 e0 04             	and    eax,0x4
c001623a:	74 10                	je     c001624c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001623c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016244:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001624c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016253:	83 e0 02             	and    eax,0x2
c0016256:	74 08                	je     c0016260 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016258:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016260:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016267:	83 e0 08             	and    eax,0x8
c001626a:	74 08                	je     c0016274 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001626c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016274:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001627b:	83 e0 10             	and    eax,0x10
c001627e:	74 08                	je     c0016288 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016280:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016288:	83 ec 0c             	sub    esp,0xc
c001628b:	68 28 02 00 00       	push   0x228
c0016290:	e8 80 09 ff ff       	call   c0006c15 <malloc>
c0016295:	83 c4 10             	add    esp,0x10
c0016298:	89 c2                	mov    edx,eax
c001629a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00162a1:	89 10                	mov    DWORD PTR [eax],edx
c00162a3:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00162aa:	31 d2                	xor    edx,edx
c00162ac:	88 c2                	mov    dl,al
c00162ae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00162b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00162b7:	83 ec 04             	sub    esp,0x4
c00162ba:	52                   	push   edx
c00162bb:	8d 54 24 10          	lea    edx,[esp+0x10]
c00162bf:	52                   	push   edx
c00162c0:	50                   	push   eax
c00162c1:	e8 84 d6 fe ff       	call   c000394a <f_open>
c00162c6:	83 c4 10             	add    esp,0x10
c00162c9:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00162d0:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00162d8:	74 0a                	je     c00162e4 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00162da:	b8 01 00 00 00       	mov    eax,0x1
c00162df:	eb 0b                	jmp    c00162ec <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00162e1:	8d 76 00             	lea    esi,[esi+0x0]
c00162e4:	b8 00 00 00 00       	mov    eax,0x0
c00162e9:	8d 76 00             	lea    esi,[esi+0x0]
c00162ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00162f2:	c3                   	ret    
c00162f3:	90                   	nop

c00162f4 <FAT::openDir(char const*, void**)>:
c00162f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00162fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016302:	74 0c                	je     c0016310 <FAT::openDir(char const*, void**)+0x1c>
c0016304:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001630c:	75 0e                	jne    c001631c <FAT::openDir(char const*, void**)+0x28>
c001630e:	66 90                	xchg   ax,ax
c0016310:	b8 04 00 00 00       	mov    eax,0x4
c0016315:	e9 82 00 00 00       	jmp    c001639c <FAT::openDir(char const*, void**)+0xa8>
c001631a:	66 90                	xchg   ax,ax
c001631c:	83 ec 08             	sub    esp,0x8
c001631f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016326:	8d 44 24 18          	lea    eax,[esp+0x18]
c001632a:	50                   	push   eax
c001632b:	e8 f0 a2 fe ff       	call   c0000620 <strcpy>
c0016330:	83 c4 10             	add    esp,0x10
c0016333:	83 ec 08             	sub    esp,0x8
c0016336:	8d 44 24 14          	lea    eax,[esp+0x14]
c001633a:	50                   	push   eax
c001633b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016342:	e8 39 fe ff ff       	call   c0016180 <FAT::fixFilepath(char*)>
c0016347:	83 c4 10             	add    esp,0x10
c001634a:	83 ec 0c             	sub    esp,0xc
c001634d:	6a 30                	push   0x30
c001634f:	e8 c1 08 ff ff       	call   c0006c15 <malloc>
c0016354:	83 c4 10             	add    esp,0x10
c0016357:	89 c2                	mov    edx,eax
c0016359:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016360:	89 10                	mov    DWORD PTR [eax],edx
c0016362:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016369:	8b 00                	mov    eax,DWORD PTR [eax]
c001636b:	83 ec 08             	sub    esp,0x8
c001636e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016372:	52                   	push   edx
c0016373:	50                   	push   eax
c0016374:	e8 5a df fe ff       	call   c00042d3 <f_opendir>
c0016379:	83 c4 10             	add    esp,0x10
c001637c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016383:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001638b:	74 07                	je     c0016394 <FAT::openDir(char const*, void**)+0xa0>
c001638d:	b8 01 00 00 00       	mov    eax,0x1
c0016392:	eb 08                	jmp    c001639c <FAT::openDir(char const*, void**)+0xa8>
c0016394:	b8 00 00 00 00       	mov    eax,0x0
c0016399:	8d 76 00             	lea    esi,[esi+0x0]
c001639c:	81 c4 1c 01 00 00    	add    esp,0x11c
c00163a2:	c3                   	ret    
c00163a3:	90                   	nop

c00163a4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00163a4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00163aa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00163b2:	75 0c                	jne    c00163c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00163b4:	b8 04 00 00 00       	mov    eax,0x4
c00163b9:	e9 d6 00 00 00       	jmp    c0016494 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00163be:	66 90                	xchg   ax,ax
c00163c0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00163c8:	75 0a                	jne    c00163d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00163ca:	b8 04 00 00 00       	mov    eax,0x4
c00163cf:	e9 c0 00 00 00       	jmp    c0016494 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00163d4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00163dc:	75 0a                	jne    c00163e8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00163de:	b8 04 00 00 00       	mov    eax,0x4
c00163e3:	e9 ac 00 00 00       	jmp    c0016494 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00163e8:	83 ec 08             	sub    esp,0x8
c00163eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00163f2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00163f9:	50                   	push   eax
c00163fa:	e8 21 a2 fe ff       	call   c0000620 <strcpy>
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	83 ec 08             	sub    esp,0x8
c0016405:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001640c:	50                   	push   eax
c001640d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016414:	e8 67 fd ff ff       	call   c0016180 <FAT::fixFilepath(char*)>
c0016419:	83 c4 10             	add    esp,0x10
c001641c:	83 ec 08             	sub    esp,0x8
c001641f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016423:	50                   	push   eax
c0016424:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001642b:	50                   	push   eax
c001642c:	e8 21 e0 fe ff       	call   c0004452 <f_stat>
c0016431:	83 c4 10             	add    esp,0x10
c0016434:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001643b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016442:	85 c0                	test   eax,eax
c0016444:	74 0a                	je     c0016450 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016446:	83 f8 04             	cmp    eax,0x4
c0016449:	74 39                	je     c0016484 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001644b:	eb 3f                	jmp    c001648c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001644d:	8d 76 00             	lea    esi,[esi+0x0]
c0016450:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016454:	25 ff 00 00 00       	and    eax,0xff
c0016459:	83 e0 10             	and    eax,0x10
c001645c:	0f 95 c2             	setne  dl
c001645f:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016466:	88 10                	mov    BYTE PTR [eax],dl
c0016468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001646c:	ba 00 00 00 00       	mov    edx,0x0
c0016471:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016478:	89 01                	mov    DWORD PTR [ecx],eax
c001647a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001647d:	b8 00 00 00 00       	mov    eax,0x0
c0016482:	eb 10                	jmp    c0016494 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016484:	b8 02 00 00 00       	mov    eax,0x2
c0016489:	eb 09                	jmp    c0016494 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001648b:	90                   	nop
c001648c:	b8 01 00 00 00       	mov    eax,0x1
c0016491:	8d 76 00             	lea    esi,[esi+0x0]
c0016494:	81 c4 2c 02 00 00    	add    esp,0x22c
c001649a:	c3                   	ret    
c001649b:	90                   	nop

c001649c <FAT::unlink(char const*)>:
c001649c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00164a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00164aa:	75 08                	jne    c00164b4 <FAT::unlink(char const*)+0x18>
c00164ac:	b8 04 00 00 00       	mov    eax,0x4
c00164b1:	eb 61                	jmp    c0016514 <FAT::unlink(char const*)+0x78>
c00164b3:	90                   	nop
c00164b4:	83 ec 08             	sub    esp,0x8
c00164b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00164be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00164c2:	50                   	push   eax
c00164c3:	e8 58 a1 fe ff       	call   c0000620 <strcpy>
c00164c8:	83 c4 10             	add    esp,0x10
c00164cb:	83 ec 08             	sub    esp,0x8
c00164ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00164d2:	50                   	push   eax
c00164d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00164da:	e8 a1 fc ff ff       	call   c0016180 <FAT::fixFilepath(char*)>
c00164df:	83 c4 10             	add    esp,0x10
c00164e2:	83 ec 0c             	sub    esp,0xc
c00164e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00164e9:	50                   	push   eax
c00164ea:	e8 c8 e1 fe ff       	call   c00046b7 <f_unlink>
c00164ef:	83 c4 10             	add    esp,0x10
c00164f2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00164f9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0016500:	85 c0                	test   eax,eax
c0016502:	75 08                	jne    c001650c <FAT::unlink(char const*)+0x70>
c0016504:	b8 00 00 00 00       	mov    eax,0x0
c0016509:	eb 09                	jmp    c0016514 <FAT::unlink(char const*)+0x78>
c001650b:	90                   	nop
c001650c:	b8 01 00 00 00       	mov    eax,0x1
c0016511:	8d 76 00             	lea    esi,[esi+0x0]
c0016514:	81 c4 1c 01 00 00    	add    esp,0x11c
c001651a:	c3                   	ret    
c001651b:	90                   	nop

c001651c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001651c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0016522:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0016529:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0016530:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016534:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016538:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0016540:	75 0a                	jne    c001654c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0016542:	b8 04 00 00 00       	mov    eax,0x4
c0016547:	e9 54 01 00 00       	jmp    c00166a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001654c:	83 ec 08             	sub    esp,0x8
c001654f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016556:	8d 44 24 24          	lea    eax,[esp+0x24]
c001655a:	50                   	push   eax
c001655b:	e8 c0 a0 fe ff       	call   c0000620 <strcpy>
c0016560:	83 c4 10             	add    esp,0x10
c0016563:	83 ec 08             	sub    esp,0x8
c0016566:	8d 44 24 20          	lea    eax,[esp+0x20]
c001656a:	50                   	push   eax
c001656b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016572:	e8 09 fc ff ff       	call   c0016180 <FAT::fixFilepath(char*)>
c0016577:	83 c4 10             	add    esp,0x10
c001657a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0016582:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001658a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001658e:	25 ff 00 00 00       	and    eax,0xff
c0016593:	83 e0 01             	and    eax,0x1
c0016596:	74 08                	je     c00165a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0016598:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00165a0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00165a4:	25 ff 00 00 00       	and    eax,0xff
c00165a9:	83 e0 02             	and    eax,0x2
c00165ac:	74 0a                	je     c00165b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00165ae:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00165b6:	66 90                	xchg   ax,ax
c00165b8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00165bc:	25 ff 00 00 00       	and    eax,0xff
c00165c1:	83 e0 04             	and    eax,0x4
c00165c4:	74 0a                	je     c00165d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00165c6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00165ce:	66 90                	xchg   ax,ax
c00165d0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00165d4:	25 ff 00 00 00       	and    eax,0xff
c00165d9:	83 e0 08             	and    eax,0x8
c00165dc:	74 0a                	je     c00165e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00165de:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00165e6:	66 90                	xchg   ax,ax
c00165e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165ec:	25 ff 00 00 00       	and    eax,0xff
c00165f1:	83 e0 01             	and    eax,0x1
c00165f4:	74 0a                	je     c0016600 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00165f6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00165fe:	66 90                	xchg   ax,ax
c0016600:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016604:	25 ff 00 00 00       	and    eax,0xff
c0016609:	83 e0 02             	and    eax,0x2
c001660c:	74 0a                	je     c0016618 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001660e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0016616:	66 90                	xchg   ax,ax
c0016618:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001661c:	25 ff 00 00 00       	and    eax,0xff
c0016621:	83 e0 04             	and    eax,0x4
c0016624:	74 0a                	je     c0016630 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0016626:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001662e:	66 90                	xchg   ax,ax
c0016630:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016634:	25 ff 00 00 00       	and    eax,0xff
c0016639:	83 e0 08             	and    eax,0x8
c001663c:	74 0a                	je     c0016648 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001663e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0016646:	66 90                	xchg   ax,ax
c0016648:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001664f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0016656:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001665d:	31 d2                	xor    edx,edx
c001665f:	88 c2                	mov    dl,al
c0016661:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0016668:	25 ff 00 00 00       	and    eax,0xff
c001666d:	83 ec 04             	sub    esp,0x4
c0016670:	52                   	push   edx
c0016671:	50                   	push   eax
c0016672:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016676:	50                   	push   eax
c0016677:	e8 ae e4 fe ff       	call   c0004b2a <f_chmod>
c001667c:	83 c4 10             	add    esp,0x10
c001667f:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0016686:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001668d:	85 c0                	test   eax,eax
c001668f:	75 07                	jne    c0016698 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0016691:	b8 00 00 00 00       	mov    eax,0x0
c0016696:	eb 08                	jmp    c00166a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0016698:	b8 01 00 00 00       	mov    eax,0x1
c001669d:	8d 76 00             	lea    esi,[esi+0x0]
c00166a0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00166a6:	c3                   	ret    
c00166a7:	90                   	nop

c00166a8 <FAT::rename(char const*, char const*)>:
c00166a8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00166ae:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00166b6:	74 0c                	je     c00166c4 <FAT::rename(char const*, char const*)+0x1c>
c00166b8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00166c0:	75 0e                	jne    c00166d0 <FAT::rename(char const*, char const*)+0x28>
c00166c2:	66 90                	xchg   ax,ax
c00166c4:	b8 04 00 00 00       	mov    eax,0x4
c00166c9:	e9 9e 00 00 00       	jmp    c001676c <FAT::rename(char const*, char const*)+0xc4>
c00166ce:	66 90                	xchg   ax,ax
c00166d0:	83 ec 08             	sub    esp,0x8
c00166d3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00166da:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00166e1:	50                   	push   eax
c00166e2:	e8 39 9f fe ff       	call   c0000620 <strcpy>
c00166e7:	83 c4 10             	add    esp,0x10
c00166ea:	83 ec 08             	sub    esp,0x8
c00166ed:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00166f4:	50                   	push   eax
c00166f5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00166fc:	e8 7f fa ff ff       	call   c0016180 <FAT::fixFilepath(char*)>
c0016701:	83 c4 10             	add    esp,0x10
c0016704:	83 ec 08             	sub    esp,0x8
c0016707:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001670e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016712:	50                   	push   eax
c0016713:	e8 08 9f fe ff       	call   c0000620 <strcpy>
c0016718:	83 c4 10             	add    esp,0x10
c001671b:	83 ec 08             	sub    esp,0x8
c001671e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016722:	50                   	push   eax
c0016723:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001672a:	e8 51 fa ff ff       	call   c0016180 <FAT::fixFilepath(char*)>
c001672f:	83 c4 10             	add    esp,0x10
c0016732:	83 ec 08             	sub    esp,0x8
c0016735:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016739:	50                   	push   eax
c001673a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0016741:	50                   	push   eax
c0016742:	e8 2d e2 fe ff       	call   c0004974 <f_rename>
c0016747:	83 c4 10             	add    esp,0x10
c001674a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0016751:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0016758:	85 c0                	test   eax,eax
c001675a:	75 08                	jne    c0016764 <FAT::rename(char const*, char const*)+0xbc>
c001675c:	b8 00 00 00 00       	mov    eax,0x0
c0016761:	eb 09                	jmp    c001676c <FAT::rename(char const*, char const*)+0xc4>
c0016763:	90                   	nop
c0016764:	b8 01 00 00 00       	mov    eax,0x1
c0016769:	8d 76 00             	lea    esi,[esi+0x0]
c001676c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0016772:	c3                   	ret    
c0016773:	90                   	nop

c0016774 <FAT::mkdir(char const*)>:
c0016774:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001677a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016782:	75 08                	jne    c001678c <FAT::mkdir(char const*)+0x18>
c0016784:	b8 04 00 00 00       	mov    eax,0x4
c0016789:	eb 61                	jmp    c00167ec <FAT::mkdir(char const*)+0x78>
c001678b:	90                   	nop
c001678c:	83 ec 08             	sub    esp,0x8
c001678f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016796:	8d 44 24 18          	lea    eax,[esp+0x18]
c001679a:	50                   	push   eax
c001679b:	e8 80 9e fe ff       	call   c0000620 <strcpy>
c00167a0:	83 c4 10             	add    esp,0x10
c00167a3:	83 ec 08             	sub    esp,0x8
c00167a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00167aa:	50                   	push   eax
c00167ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00167b2:	e8 c9 f9 ff ff       	call   c0016180 <FAT::fixFilepath(char*)>
c00167b7:	83 c4 10             	add    esp,0x10
c00167ba:	83 ec 0c             	sub    esp,0xc
c00167bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00167c1:	50                   	push   eax
c00167c2:	e8 12 e0 fe ff       	call   c00047d9 <f_mkdir>
c00167c7:	83 c4 10             	add    esp,0x10
c00167ca:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00167d1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00167d8:	85 c0                	test   eax,eax
c00167da:	75 08                	jne    c00167e4 <FAT::mkdir(char const*)+0x70>
c00167dc:	b8 00 00 00 00       	mov    eax,0x0
c00167e1:	eb 09                	jmp    c00167ec <FAT::mkdir(char const*)+0x78>
c00167e3:	90                   	nop
c00167e4:	b8 01 00 00 00       	mov    eax,0x1
c00167e9:	8d 76 00             	lea    esi,[esi+0x0]
c00167ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00167f2:	c3                   	ret    
c00167f3:	90                   	nop

c00167f4 <FAT::exists(char const*)>:
c00167f4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00167fa:	83 ec 08             	sub    esp,0x8
c00167fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016804:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016808:	50                   	push   eax
c0016809:	e8 12 9e fe ff       	call   c0000620 <strcpy>
c001680e:	83 c4 10             	add    esp,0x10
c0016811:	83 ec 08             	sub    esp,0x8
c0016814:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016818:	50                   	push   eax
c0016819:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016820:	e8 5b f9 ff ff       	call   c0016180 <FAT::fixFilepath(char*)>
c0016825:	83 c4 10             	add    esp,0x10
c0016828:	83 ec 08             	sub    esp,0x8
c001682b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0016832:	50                   	push   eax
c0016833:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016837:	50                   	push   eax
c0016838:	e8 15 dc fe ff       	call   c0004452 <f_stat>
c001683d:	83 c4 10             	add    esp,0x10
c0016840:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016847:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001684e:	85 c0                	test   eax,eax
c0016850:	75 06                	jne    c0016858 <FAT::exists(char const*)+0x64>
c0016852:	b0 01                	mov    al,0x1
c0016854:	eb 06                	jmp    c001685c <FAT::exists(char const*)+0x68>
c0016856:	66 90                	xchg   ax,ax
c0016858:	b0 00                	mov    al,0x0
c001685a:	66 90                	xchg   ax,ax
c001685c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0016862:	c3                   	ret    
c0016863:	90                   	nop

c0016864 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0016864:	b8 08 00 00 00       	mov    eax,0x8
c0016869:	c3                   	ret    

c001686a <ISO9660::seek(void*, unsigned long long)>:
c001686a:	53                   	push   ebx
c001686b:	b8 04 00 00 00       	mov    eax,0x4
c0016870:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016874:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016878:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001687c:	85 d2                	test   edx,edx
c001687e:	74 17                	je     c0016897 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0016880:	89 c8                	mov    eax,ecx
c0016882:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0016885:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0016888:	b8 01 00 00 00       	mov    eax,0x1
c001688d:	73 08                	jae    c0016897 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001688f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0016892:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0016895:	31 c0                	xor    eax,eax
c0016897:	5b                   	pop    ebx
c0016898:	c3                   	ret    
c0016899:	90                   	nop

c001689a <ISO9660::tell(void*, unsigned long long*)>:
c001689a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001689e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168a2:	85 d2                	test   edx,edx
c00168a4:	74 12                	je     c00168b8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00168a6:	85 c0                	test   eax,eax
c00168a8:	74 0e                	je     c00168b8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00168aa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00168ad:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00168b0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00168b3:	89 10                	mov    DWORD PTR [eax],edx
c00168b5:	31 c0                	xor    eax,eax
c00168b7:	c3                   	ret    
c00168b8:	b8 04 00 00 00       	mov    eax,0x4
c00168bd:	c3                   	ret    

c00168be <ISO9660::getName()>:
c00168be:	b8 7c e5 01 c0       	mov    eax,0xc001e57c
c00168c3:	c3                   	ret    

c00168c4 <ISO9660::stat(void*, unsigned long long*)>:
c00168c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00168c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168cc:	85 d2                	test   edx,edx
c00168ce:	74 12                	je     c00168e2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00168d0:	85 c0                	test   eax,eax
c00168d2:	74 0e                	je     c00168e2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00168d4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00168d7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00168da:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00168dd:	89 10                	mov    DWORD PTR [eax],edx
c00168df:	31 c0                	xor    eax,eax
c00168e1:	c3                   	ret    
c00168e2:	b8 04 00 00 00       	mov    eax,0x4
c00168e7:	c3                   	ret    

c00168e8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00168e8:	b8 01 00 00 00       	mov    eax,0x1
c00168ed:	c3                   	ret    

c00168ee <ISO9660::unlink(char const*)>:
c00168ee:	b8 01 00 00 00       	mov    eax,0x1
c00168f3:	c3                   	ret    

c00168f4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00168f4:	b8 01 00 00 00       	mov    eax,0x1
c00168f9:	c3                   	ret    

c00168fa <ISO9660::rename(char const*, char const*)>:
c00168fa:	b8 01 00 00 00       	mov    eax,0x1
c00168ff:	c3                   	ret    

c0016900 <ISO9660::mkdir(char const*)>:
c0016900:	b8 01 00 00 00       	mov    eax,0x1
c0016905:	c3                   	ret    

c0016906 <ISO9660::close(void*)>:
c0016906:	83 ec 0c             	sub    esp,0xc
c0016909:	b8 04 00 00 00       	mov    eax,0x4
c001690e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016912:	85 d2                	test   edx,edx
c0016914:	74 0e                	je     c0016924 <ISO9660::close(void*)+0x1e>
c0016916:	83 ec 0c             	sub    esp,0xc
c0016919:	52                   	push   edx
c001691a:	e8 06 03 ff ff       	call   c0006c25 <free>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	31 c0                	xor    eax,eax
c0016924:	83 c4 0c             	add    esp,0xc
c0016927:	c3                   	ret    

c0016928 <ISO9660::closeDir(void*)>:
c0016928:	83 ec 0c             	sub    esp,0xc
c001692b:	b8 04 00 00 00       	mov    eax,0x4
c0016930:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016934:	85 d2                	test   edx,edx
c0016936:	74 0e                	je     c0016946 <ISO9660::closeDir(void*)+0x1e>
c0016938:	83 ec 0c             	sub    esp,0xc
c001693b:	52                   	push   edx
c001693c:	e8 e4 02 ff ff       	call   c0006c25 <free>
c0016941:	83 c4 10             	add    esp,0x10
c0016944:	31 c0                	xor    eax,eax
c0016946:	83 c4 0c             	add    esp,0xc
c0016949:	c3                   	ret    

c001694a <ISO9660::~ISO9660()>:
c001694a:	83 ec 0c             	sub    esp,0xc
c001694d:	ba a0 e5 01 c0       	mov    edx,0xc001e5a0
c0016952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016956:	89 10                	mov    DWORD PTR [eax],edx
c0016958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695c:	83 ec 0c             	sub    esp,0xc
c001695f:	50                   	push   eax
c0016960:	e8 b9 33 ff ff       	call   c0009d1e <Filesystem::~Filesystem()>
c0016965:	83 c4 10             	add    esp,0x10
c0016968:	90                   	nop
c0016969:	83 c4 0c             	add    esp,0xc
c001696c:	c3                   	ret    
c001696d:	90                   	nop

c001696e <ISO9660::~ISO9660()>:
c001696e:	83 ec 0c             	sub    esp,0xc
c0016971:	83 ec 0c             	sub    esp,0xc
c0016974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016978:	e8 cd ff ff ff       	call   c001694a <ISO9660::~ISO9660()>
c001697d:	83 c4 10             	add    esp,0x10
c0016980:	83 ec 08             	sub    esp,0x8
c0016983:	6a 08                	push   0x8
c0016985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016989:	e8 54 2f ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001698e:	83 c4 10             	add    esp,0x10
c0016991:	83 c4 0c             	add    esp,0xc
c0016994:	c3                   	ret    

c0016995 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0016995:	55                   	push   ebp
c0016996:	31 c9                	xor    ecx,ecx
c0016998:	57                   	push   edi
c0016999:	56                   	push   esi
c001699a:	53                   	push   ebx
c001699b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001699f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00169a3:	89 eb                	mov    ebx,ebp
c00169a5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00169a9:	39 ce                	cmp    esi,ecx
c00169ab:	7e 17                	jle    c00169c4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00169ad:	31 d2                	xor    edx,edx
c00169af:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00169b3:	7d 13                	jge    c00169c8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00169b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00169b9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00169bc:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00169bf:	75 0d                	jne    c00169ce <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00169c1:	42                   	inc    edx
c00169c2:	eb eb                	jmp    c00169af <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00169c4:	31 c0                	xor    eax,eax
c00169c6:	eb 0a                	jmp    c00169d2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00169c8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00169cc:	eb 04                	jmp    c00169d2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00169ce:	41                   	inc    ecx
c00169cf:	43                   	inc    ebx
c00169d0:	eb d7                	jmp    c00169a9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00169d2:	5b                   	pop    ebx
c00169d3:	5e                   	pop    esi
c00169d4:	5f                   	pop    edi
c00169d5:	5d                   	pop    ebp
c00169d6:	c3                   	ret    

c00169d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00169d7:	57                   	push   edi
c00169d8:	56                   	push   esi
c00169d9:	53                   	push   ebx
c00169da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169de:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00169e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00169e6:	39 35 20 2b 02 c0    	cmp    DWORD PTR ds:0xc0022b20,esi
c00169ec:	75 08                	jne    c00169f6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00169ee:	38 1d b4 ee 01 c0    	cmp    BYTE PTR ds:0xc001eeb4,bl
c00169f4:	74 4a                	je     c0016a40 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00169f6:	83 ec 0c             	sub    esp,0xc
c00169f9:	31 d2                	xor    edx,edx
c00169fb:	68 40 2b 02 c0       	push   0xc0022b40
c0016a00:	0f be c3             	movsx  eax,bl
c0016a03:	6a 01                	push   0x1
c0016a05:	52                   	push   edx
c0016a06:	56                   	push   esi
c0016a07:	ff 34 85 fc 18 02 c0 	push   DWORD PTR [eax*4-0x3ffde704]
c0016a0e:	e8 ad 56 ff ff       	call   c000c0c0 <LogicalDisk::read(unsigned long long, int, void*)>
c0016a13:	83 c4 20             	add    esp,0x20
c0016a16:	85 c0                	test   eax,eax
c0016a18:	75 0e                	jne    c0016a28 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0016a1a:	89 35 20 2b 02 c0    	mov    DWORD PTR ds:0xc0022b20,esi
c0016a20:	88 1d b4 ee 01 c0    	mov    BYTE PTR ds:0xc001eeb4,bl
c0016a26:	eb 18                	jmp    c0016a40 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0016a28:	50                   	push   eax
c0016a29:	68 00 08 00 00       	push   0x800
c0016a2e:	6a 00                	push   0x0
c0016a30:	57                   	push   edi
c0016a31:	e8 ba 9a fe ff       	call   c00004f0 <memset>
c0016a36:	83 c4 10             	add    esp,0x10
c0016a39:	b8 01 00 00 00       	mov    eax,0x1
c0016a3e:	eb 0e                	jmp    c0016a4e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0016a40:	be 40 2b 02 c0       	mov    esi,0xc0022b40
c0016a45:	b9 00 08 00 00       	mov    ecx,0x800
c0016a4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a4c:	31 c0                	xor    eax,eax
c0016a4e:	5b                   	pop    ebx
c0016a4f:	5e                   	pop    esi
c0016a50:	5f                   	pop    edi
c0016a51:	c3                   	ret    

c0016a52 <ISO9660::tryMount(LogicalDisk*, int)>:
c0016a52:	81 ec 10 08 00 00    	sub    esp,0x810
c0016a58:	c7 05 20 2b 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0022b20,0xdeadbeef
c0016a62:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0016a69:	83 c0 41             	add    eax,0x41
c0016a6c:	0f be c0             	movsx  eax,al
c0016a6f:	50                   	push   eax
c0016a70:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016a74:	50                   	push   eax
c0016a75:	6a 10                	push   0x10
c0016a77:	e8 5b ff ff ff       	call   c00169d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016a7c:	83 c4 10             	add    esp,0x10
c0016a7f:	31 d2                	xor    edx,edx
c0016a81:	85 c0                	test   eax,eax
c0016a83:	75 24                	jne    c0016aa9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016a85:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0016a8a:	75 1d                	jne    c0016aa9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016a8c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0016a91:	75 16                	jne    c0016aa9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016a93:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0016a98:	75 0f                	jne    c0016aa9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016a9a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0016a9f:	75 08                	jne    c0016aa9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016aa1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0016aa6:	0f 94 c2             	sete   dl
c0016aa9:	88 d0                	mov    al,dl
c0016aab:	81 c4 0c 08 00 00    	add    esp,0x80c
c0016ab1:	c3                   	ret    

c0016ab2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0016ab2:	55                   	push   ebp
c0016ab3:	57                   	push   edi
c0016ab4:	56                   	push   esi
c0016ab5:	53                   	push   ebx
c0016ab6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0016abc:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0016ac3:	85 ed                	test   ebp,ebp
c0016ac5:	0f 84 da 01 00 00    	je     c0016ca5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016acb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0016ad3:	0f 84 cc 01 00 00    	je     c0016ca5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016ad9:	b8 01 00 00 00       	mov    eax,0x1
c0016ade:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0016ae2:	0f 85 c2 01 00 00    	jne    c0016caa <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016ae8:	31 d2                	xor    edx,edx
c0016aea:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0016af1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016af4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016af7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016afa:	89 04 24             	mov    DWORD PTR [esp],eax
c0016afd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b01:	01 c8                	add    eax,ecx
c0016b03:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016b06:	11 da                	adc    edx,ebx
c0016b08:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0016b0c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016b10:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016b14:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016b18:	19 d7                	sbb    edi,edx
c0016b1a:	72 11                	jb     c0016b2d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0016b1c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016b1f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016b23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b2b:	eb 0c                	jmp    c0016b39 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0016b2d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0016b31:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016b35:	29 ce                	sub    esi,ecx
c0016b37:	19 df                	sbb    edi,ebx
c0016b39:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b3c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0016b3f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0016b43:	c1 e0 0b             	shl    eax,0xb
c0016b46:	01 c8                	add    eax,ecx
c0016b48:	11 da                	adc    edx,ebx
c0016b4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b51:	51                   	push   ecx
c0016b52:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016b56:	50                   	push   eax
c0016b57:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0016b5b:	53                   	push   ebx
c0016b5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b64:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016b68:	50                   	push   eax
c0016b69:	e8 69 fe ff ff       	call   c00169d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016b6e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0016b71:	b8 00 08 00 00       	mov    eax,0x800
c0016b76:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0016b7c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0016b80:	29 d0                	sub    eax,edx
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	89 f9                	mov    ecx,edi
c0016b87:	39 c6                	cmp    esi,eax
c0016b89:	83 d9 00             	sbb    ecx,0x0
c0016b8c:	7d 1b                	jge    c0016ba9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0016b8e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016b93:	75 12                	jne    c0016ba7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0016b95:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016b9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016ba2:	e9 fa 00 00 00       	jmp    c0016ca1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0016ba7:	89 f0                	mov    eax,esi
c0016ba9:	01 d3                	add    ebx,edx
c0016bab:	31 d2                	xor    edx,edx
c0016bad:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016bb1:	39 c2                	cmp    edx,eax
c0016bb3:	7d 14                	jge    c0016bc9 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0016bb5:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0016bbc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bc0:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0016bc3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0016bc6:	42                   	inc    edx
c0016bc7:	eb e8                	jmp    c0016bb1 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0016bc9:	89 c2                	mov    edx,eax
c0016bcb:	85 c0                	test   eax,eax
c0016bcd:	79 02                	jns    c0016bd1 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0016bcf:	31 d2                	xor    edx,edx
c0016bd1:	01 c2                	add    edx,eax
c0016bd3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016bd6:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0016bdd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0016be1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016be5:	99                   	cdq    
c0016be6:	01 c1                	add    ecx,eax
c0016be8:	11 d3                	adc    ebx,edx
c0016bea:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0016bee:	29 c6                	sub    esi,eax
c0016bf0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0016bf4:	19 d7                	sbb    edi,edx
c0016bf6:	89 34 24             	mov    DWORD PTR [esp],esi
c0016bf9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0016bfd:	b8 ff 07 00 00       	mov    eax,0x7ff
c0016c02:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0016c05:	b8 00 00 00 00       	mov    eax,0x0
c0016c0a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0016c0e:	7d 43                	jge    c0016c53 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0016c10:	52                   	push   edx
c0016c11:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016c15:	50                   	push   eax
c0016c16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c1e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016c22:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016c26:	50                   	push   eax
c0016c27:	e8 ab fd ff ff       	call   c00169d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016c2c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0016c34:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0016c39:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0016c41:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0016c49:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	eb aa                	jmp    c0016bfd <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0016c53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c57:	0b 04 24             	or     eax,DWORD PTR [esp]
c0016c5a:	74 2a                	je     c0016c86 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0016c5c:	50                   	push   eax
c0016c5d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016c61:	50                   	push   eax
c0016c62:	8d 74 24 28          	lea    esi,[esp+0x28]
c0016c66:	56                   	push   esi
c0016c67:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016c6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016c6f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0016c73:	51                   	push   ecx
c0016c74:	e8 5e fd ff ff       	call   c00169d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016c79:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016c7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016c81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c83:	83 c4 10             	add    esp,0x10
c0016c86:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016c8d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c95:	89 18                	mov    DWORD PTR [eax],ebx
c0016c97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c9b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016c9e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016ca1:	31 c0                	xor    eax,eax
c0016ca3:	eb 05                	jmp    c0016caa <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016ca5:	b8 04 00 00 00       	mov    eax,0x4
c0016caa:	81 c4 2c 08 00 00    	add    esp,0x82c
c0016cb0:	5b                   	pop    ebx
c0016cb1:	5e                   	pop    esi
c0016cb2:	5f                   	pop    edi
c0016cb3:	5d                   	pop    ebp
c0016cb4:	c3                   	ret    
c0016cb5:	90                   	nop

c0016cb6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0016cb6:	55                   	push   ebp
c0016cb7:	57                   	push   edi
c0016cb8:	56                   	push   esi
c0016cb9:	53                   	push   ebx
c0016cba:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0016cc0:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0016cc7:	85 ed                	test   ebp,ebp
c0016cc9:	0f 84 4f 02 00 00    	je     c0016f1e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016ccf:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0016cd7:	0f 84 41 02 00 00    	je     c0016f1e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016cdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016ce0:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0016ce3:	75 0a                	jne    c0016cef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0016ce5:	b8 07 00 00 00       	mov    eax,0x7
c0016cea:	e9 34 02 00 00       	jmp    c0016f23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016cef:	50                   	push   eax
c0016cf0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016cf4:	50                   	push   eax
c0016cf5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016cfc:	53                   	push   ebx
c0016cfd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d00:	c1 e0 0b             	shl    eax,0xb
c0016d03:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0016d06:	c1 e8 0b             	shr    eax,0xb
c0016d09:	50                   	push   eax
c0016d0a:	e8 c8 fc ff ff       	call   c00169d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016d0f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016d12:	83 c4 10             	add    esp,0x10
c0016d15:	89 c1                	mov    ecx,eax
c0016d17:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016d1a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0016d20:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0016d23:	84 db                	test   bl,bl
c0016d25:	0f 85 8b 00 00 00    	jne    c0016db6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0016d2b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0016d31:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016d34:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0016d3a:	29 c6                	sub    esi,eax
c0016d3c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016d40:	89 f3                	mov    ebx,esi
c0016d42:	89 f1                	mov    ecx,esi
c0016d44:	c1 fb 1f             	sar    ebx,0x1f
c0016d47:	01 f0                	add    eax,esi
c0016d49:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016d4c:	11 da                	adc    edx,ebx
c0016d4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d51:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016d55:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016d58:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016d5b:	89 d8                	mov    eax,ebx
c0016d5d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0016d61:	ba 00 00 00 00       	mov    edx,0x0
c0016d66:	19 f8                	sbb    eax,edi
c0016d68:	b8 00 00 00 00       	mov    eax,0x0
c0016d6d:	73 08                	jae    c0016d77 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0016d6f:	89 f0                	mov    eax,esi
c0016d71:	89 fa                	mov    edx,edi
c0016d73:	29 c8                	sub    eax,ecx
c0016d75:	19 da                	sbb    edx,ebx
c0016d77:	89 d7                	mov    edi,edx
c0016d79:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016d7c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016d7f:	09 c7                	or     edi,eax
c0016d81:	0f 84 5e ff ff ff    	je     c0016ce5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0016d87:	57                   	push   edi
c0016d88:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016d8c:	50                   	push   eax
c0016d8d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016d94:	53                   	push   ebx
c0016d95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d98:	c1 e0 0b             	shl    eax,0xb
c0016d9b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016d9f:	c1 e8 0b             	shr    eax,0xb
c0016da2:	50                   	push   eax
c0016da3:	e8 2f fc ff ff       	call   c00169d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016da8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	25 ff 07 00 00       	and    eax,0x7ff
c0016db3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0016db6:	31 ff                	xor    edi,edi
c0016db8:	56                   	push   esi
c0016db9:	6a 28                	push   0x28
c0016dbb:	6a 00                	push   0x0
c0016dbd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016dc1:	50                   	push   eax
c0016dc2:	e8 29 97 fe ff       	call   c00004f0 <memset>
c0016dc7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016dca:	25 ff 07 00 00       	and    eax,0x7ff
c0016dcf:	89 c6                	mov    esi,eax
c0016dd1:	83 c6 21             	add    esi,0x21
c0016dd4:	83 d7 00             	adc    edi,0x0
c0016dd7:	83 c4 10             	add    esp,0x10
c0016dda:	31 c9                	xor    ecx,ecx
c0016ddc:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0016de3:	83 f9 28             	cmp    ecx,0x28
c0016de6:	88 04 24             	mov    BYTE PTR [esp],al
c0016de9:	0f 94 c2             	sete   dl
c0016dec:	88 d0                	mov    al,dl
c0016dee:	ba ff 07 00 00       	mov    edx,0x7ff
c0016df3:	39 f2                	cmp    edx,esi
c0016df5:	ba 00 00 00 00       	mov    edx,0x0
c0016dfa:	19 fa                	sbb    edx,edi
c0016dfc:	0f 92 c2             	setb   dl
c0016dff:	09 c2                	or     edx,eax
c0016e01:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0016e05:	0f 94 c0             	sete   al
c0016e08:	08 d0                	or     al,dl
c0016e0a:	75 16                	jne    c0016e22 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016e0c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0016e10:	74 10                	je     c0016e22 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016e12:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016e15:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0016e19:	41                   	inc    ecx
c0016e1a:	83 c6 01             	add    esi,0x1
c0016e1d:	83 d7 00             	adc    edi,0x0
c0016e20:	eb ba                	jmp    c0016ddc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0016e22:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0016e29:	83 ec 0c             	sub    esp,0xc
c0016e2c:	8d 74 24 24          	lea    esi,[esp+0x24]
c0016e30:	56                   	push   esi
c0016e31:	e8 2a 97 fe ff       	call   c0000560 <strlen>
c0016e36:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0016e3d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016e41:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0016e49:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016e4c:	5a                   	pop    edx
c0016e4d:	25 ff 07 00 00       	and    eax,0x7ff
c0016e52:	59                   	pop    ecx
c0016e53:	01 f8                	add    eax,edi
c0016e55:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c0016e5c:	0f 95 c0             	setne  al
c0016e5f:	0f b6 c0             	movzx  eax,al
c0016e62:	40                   	inc    eax
c0016e63:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016e67:	56                   	push   esi
c0016e68:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016e6c:	50                   	push   eax
c0016e6d:	e8 ae 97 fe ff       	call   c0000620 <strcpy>
c0016e72:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0016e76:	83 c4 10             	add    esp,0x10
c0016e79:	84 c0                	test   al,al
c0016e7b:	75 21                	jne    c0016e9e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1e8>
c0016e7d:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0016e85:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016e8d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016e95:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0016e9c:	eb 28                	jmp    c0016ec6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016e9e:	fe c8                	dec    al
c0016ea0:	75 24                	jne    c0016ec6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016ea2:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0016eaa:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016eb2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016eba:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0016ec1:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0016ec6:	8d 74 24 40          	lea    esi,[esp+0x40]
c0016eca:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0016ed1:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0016ed8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016eda:	0f b6 f3             	movzx  esi,bl
c0016edd:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0016ee4:	31 db                	xor    ebx,ebx
c0016ee6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016eec:	89 df                	mov    edi,ebx
c0016eee:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0016ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016ef4:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0016ef7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0016efa:	39 c6                	cmp    esi,eax
c0016efc:	19 d7                	sbb    edi,edx
c0016efe:	72 10                	jb     c0016f10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25a>
c0016f00:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0016f07:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0016f0e:	eb 0a                	jmp    c0016f1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x264>
c0016f10:	29 f0                	sub    eax,esi
c0016f12:	19 da                	sbb    edx,ebx
c0016f14:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016f17:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016f1a:	31 c0                	xor    eax,eax
c0016f1c:	eb 05                	jmp    c0016f23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016f1e:	b8 04 00 00 00       	mov    eax,0x4
c0016f23:	81 c4 5c 09 00 00    	add    esp,0x95c
c0016f29:	5b                   	pop    ebx
c0016f2a:	5e                   	pop    esi
c0016f2b:	5f                   	pop    edi
c0016f2c:	5d                   	pop    ebp
c0016f2d:	c3                   	ret    

c0016f2e <readRoot(unsigned int*, unsigned int*, char)>:
c0016f2e:	57                   	push   edi
c0016f2f:	56                   	push   esi
c0016f30:	81 ec 38 08 00 00    	sub    esp,0x838
c0016f36:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0016f3e:	50                   	push   eax
c0016f3f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0016f43:	50                   	push   eax
c0016f44:	6a 10                	push   0x10
c0016f46:	e8 8c fa ff ff       	call   c00169d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016f4b:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0016f52:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0016f56:	b9 22 00 00 00       	mov    ecx,0x22
c0016f5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f5d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016f64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016f68:	89 10                	mov    DWORD PTR [eax],edx
c0016f6a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0016f71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f75:	89 10                	mov    DWORD PTR [eax],edx
c0016f77:	81 c4 44 08 00 00    	add    esp,0x844
c0016f7d:	b0 01                	mov    al,0x1
c0016f7f:	5e                   	pop    esi
c0016f80:	5f                   	pop    edi
c0016f81:	c3                   	ret    

c0016f82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0016f82:	55                   	push   ebp
c0016f83:	57                   	push   edi
c0016f84:	56                   	push   esi
c0016f85:	53                   	push   ebx
c0016f86:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016f8c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0016f93:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0016f9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f9e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0016fa2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016fa6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016faa:	75 03                	jne    c0016faf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0016fac:	83 c3 02             	add    ebx,0x2
c0016faf:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0016fb2:	75 03                	jne    c0016fb7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0016fb4:	43                   	inc    ebx
c0016fb5:	eb f8                	jmp    c0016faf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0016fb7:	52                   	push   edx
c0016fb8:	68 00 01 00 00       	push   0x100
c0016fbd:	6a 00                	push   0x0
c0016fbf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0016fc3:	50                   	push   eax
c0016fc4:	e8 27 95 fe ff       	call   c00004f0 <memset>
c0016fc9:	83 c4 10             	add    esp,0x10
c0016fcc:	31 d2                	xor    edx,edx
c0016fce:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0016fd1:	84 c0                	test   al,al
c0016fd3:	74 21                	je     c0016ff6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0016fd5:	3c 2f                	cmp    al,0x2f
c0016fd7:	75 0b                	jne    c0016fe4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0016fd9:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0016fdd:	bd 01 00 00 00       	mov    ebp,0x1
c0016fe2:	eb 14                	jmp    c0016ff8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0016fe4:	8d 48 9f             	lea    ecx,[eax-0x61]
c0016fe7:	80 f9 19             	cmp    cl,0x19
c0016fea:	77 03                	ja     c0016fef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0016fec:	83 e8 20             	sub    eax,0x20
c0016fef:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0016ff3:	42                   	inc    edx
c0016ff4:	eb d8                	jmp    c0016fce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0016ff6:	31 ed                	xor    ebp,ebp
c0016ff8:	83 ec 0c             	sub    esp,0xc
c0016ffb:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0017002:	e8 0e fc fe ff       	call   c0006c15 <malloc>
c0017007:	89 c6                	mov    esi,eax
c0017009:	89 c2                	mov    edx,eax
c001700b:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0017012:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0017018:	c1 ef 0b             	shr    edi,0xb
c001701b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0017022:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0017026:	83 c4 10             	add    esp,0x10
c0017029:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001702e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017032:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0017039:	74 29                	je     c0017064 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001703b:	50                   	push   eax
c001703c:	57                   	push   edi
c001703d:	52                   	push   edx
c001703e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0017042:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0017049:	e8 89 f9 ff ff       	call   c00169d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001704e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017052:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0017059:	81 c2 00 08 00 00    	add    edx,0x800
c001705f:	83 c4 10             	add    esp,0x10
c0017062:	eb ca                	jmp    c001702e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c0017064:	83 ec 0c             	sub    esp,0xc
c0017067:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001706b:	57                   	push   edi
c001706c:	e8 ef 94 fe ff       	call   c0000560 <strlen>
c0017071:	50                   	push   eax
c0017072:	57                   	push   edi
c0017073:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001707a:	56                   	push   esi
c001707b:	e8 15 f9 ff ff       	call   c0016995 <__memmem(unsigned char*, int, unsigned char*, int)>
c0017080:	83 c4 20             	add    esp,0x20
c0017083:	85 c0                	test   eax,eax
c0017085:	75 13                	jne    c001709a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c0017087:	83 ec 0c             	sub    esp,0xc
c001708a:	56                   	push   esi
c001708b:	e8 95 fb fe ff       	call   c0006c25 <free>
c0017090:	83 c4 10             	add    esp,0x10
c0017093:	31 c0                	xor    eax,eax
c0017095:	e9 b3 00 00 00       	jmp    c001714d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001709a:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001709e:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00170a2:	c1 e7 08             	shl    edi,0x8
c00170a5:	c1 e2 10             	shl    edx,0x10
c00170a8:	09 d7                	or     edi,edx
c00170aa:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00170ae:	09 d7                	or     edi,edx
c00170b0:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00170b4:	c1 e2 18             	shl    edx,0x18
c00170b7:	09 d7                	or     edi,edx
c00170b9:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00170bd:	89 d1                	mov    ecx,edx
c00170bf:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00170c3:	c1 e1 08             	shl    ecx,0x8
c00170c6:	c1 e2 10             	shl    edx,0x10
c00170c9:	09 ca                	or     edx,ecx
c00170cb:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00170cf:	09 ca                	or     edx,ecx
c00170d1:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00170d5:	c1 e1 18             	shl    ecx,0x18
c00170d8:	09 ca                	or     edx,ecx
c00170da:	89 e9                	mov    ecx,ebp
c00170dc:	84 c9                	test   cl,cl
c00170de:	74 3c                	je     c001711c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c00170e0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00170e4:	83 ec 0c             	sub    esp,0xc
c00170e7:	56                   	push   esi
c00170e8:	e8 38 fb fe ff       	call   c0006c25 <free>
c00170ed:	83 c4 0c             	add    esp,0xc
c00170f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00170f7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00170fc:	50                   	push   eax
c00170fd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017104:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001710b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001710f:	52                   	push   edx
c0017110:	57                   	push   edi
c0017111:	53                   	push   ebx
c0017112:	e8 6b fe ff ff       	call   c0016f82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017117:	83 c4 20             	add    esp,0x20
c001711a:	eb 31                	jmp    c001714d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001711c:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001711f:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0017126:	d0 e8                	shr    al,1
c0017128:	89 3b                	mov    DWORD PTR [ebx],edi
c001712a:	83 e0 01             	and    eax,0x1
c001712d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017134:	83 ec 0c             	sub    esp,0xc
c0017137:	89 13                	mov    DWORD PTR [ebx],edx
c0017139:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0017140:	89 03                	mov    DWORD PTR [ebx],eax
c0017142:	56                   	push   esi
c0017143:	e8 dd fa fe ff       	call   c0006c25 <free>
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	b0 01                	mov    al,0x1
c001714d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017153:	5b                   	pop    ebx
c0017154:	5e                   	pop    esi
c0017155:	5f                   	pop    edi
c0017156:	5d                   	pop    ebp
c0017157:	c3                   	ret    

c0017158 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0017158:	55                   	push   ebp
c0017159:	57                   	push   edi
c001715a:	56                   	push   esi
c001715b:	53                   	push   ebx
c001715c:	83 ec 20             	sub    esp,0x20
c001715f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017163:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017167:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001716b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017173:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001717b:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0017180:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0017186:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001718c:	57                   	push   edi
c001718d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017191:	50                   	push   eax
c0017192:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017196:	50                   	push   eax
c0017197:	e8 92 fd ff ff       	call   c0016f2e <readRoot(unsigned int*, unsigned int*, char)>
c001719c:	5a                   	pop    edx
c001719d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00171a1:	e8 ba 93 fe ff       	call   c0000560 <strlen>
c00171a6:	83 c4 10             	add    esp,0x10
c00171a9:	83 f8 03             	cmp    eax,0x3
c00171ac:	77 17                	ja     c00171c5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00171ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171b2:	89 03                	mov    DWORD PTR [ebx],eax
c00171b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171b8:	89 06                	mov    DWORD PTR [esi],eax
c00171ba:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00171c1:	b0 01                	mov    al,0x1
c00171c3:	eb 19                	jmp    c00171de <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00171c5:	50                   	push   eax
c00171c6:	55                   	push   ebp
c00171c7:	57                   	push   edi
c00171c8:	56                   	push   esi
c00171c9:	53                   	push   ebx
c00171ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00171d6:	e8 a7 fd ff ff       	call   c0016f82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00171db:	83 c4 20             	add    esp,0x20
c00171de:	83 c4 1c             	add    esp,0x1c
c00171e1:	5b                   	pop    ebx
c00171e2:	5e                   	pop    esi
c00171e3:	5f                   	pop    edi
c00171e4:	5d                   	pop    ebp
c00171e5:	c3                   	ret    

c00171e6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00171e6:	57                   	push   edi
c00171e7:	56                   	push   esi
c00171e8:	53                   	push   ebx
c00171e9:	83 ec 10             	sub    esp,0x10
c00171ec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00171f0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00171f4:	85 ff                	test   edi,edi
c00171f6:	0f 84 8b 00 00 00    	je     c0017287 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00171fc:	85 f6                	test   esi,esi
c00171fe:	0f 84 83 00 00 00    	je     c0017287 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0017204:	b8 03 00 00 00       	mov    eax,0x3
c0017209:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001720e:	75 7c                	jne    c001728c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0017210:	83 ec 0c             	sub    esp,0xc
c0017213:	6a 1c                	push   0x1c
c0017215:	e8 fb f9 fe ff       	call   c0006c15 <malloc>
c001721a:	89 07                	mov    DWORD PTR [edi],eax
c001721c:	89 c3                	mov    ebx,eax
c001721e:	58                   	pop    eax
c001721f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017223:	50                   	push   eax
c0017224:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017227:	50                   	push   eax
c0017228:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001722c:	50                   	push   eax
c001722d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017231:	50                   	push   eax
c0017232:	56                   	push   esi
c0017233:	e8 20 ff ff ff       	call   c0017158 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017238:	83 c4 20             	add    esp,0x20
c001723b:	84 c0                	test   al,al
c001723d:	74 07                	je     c0017246 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001723f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017244:	74 0b                	je     c0017251 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0017246:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001724a:	b8 01 00 00 00       	mov    eax,0x1
c001724f:	eb 3b                	jmp    c001728c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0017251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017255:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0017259:	89 03                	mov    DWORD PTR [ebx],eax
c001725b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017262:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017266:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001726d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017274:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0017277:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001727e:	8a 06                	mov    al,BYTE PTR [esi]
c0017280:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0017283:	31 c0                	xor    eax,eax
c0017285:	eb 05                	jmp    c001728c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0017287:	b8 04 00 00 00       	mov    eax,0x4
c001728c:	83 c4 10             	add    esp,0x10
c001728f:	5b                   	pop    ebx
c0017290:	5e                   	pop    esi
c0017291:	5f                   	pop    edi
c0017292:	c3                   	ret    
c0017293:	90                   	nop

c0017294 <ISO9660::exists(char const*)>:
c0017294:	83 ec 28             	sub    esp,0x28
c0017297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001729b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001729f:	52                   	push   edx
c00172a0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00172a3:	52                   	push   edx
c00172a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00172a8:	52                   	push   edx
c00172a9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00172ad:	52                   	push   edx
c00172ae:	50                   	push   eax
c00172af:	e8 a4 fe ff ff       	call   c0017158 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00172b4:	83 c4 3c             	add    esp,0x3c
c00172b7:	c3                   	ret    

c00172b8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00172b8:	56                   	push   esi
c00172b9:	53                   	push   ebx
c00172ba:	83 ec 14             	sub    esp,0x14
c00172bd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00172c1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00172c5:	85 db                	test   ebx,ebx
c00172c7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00172cb:	0f 94 c2             	sete   dl
c00172ce:	85 f6                	test   esi,esi
c00172d0:	0f 94 c0             	sete   al
c00172d3:	08 c2                	or     dl,al
c00172d5:	75 68                	jne    c001733f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00172d7:	85 c9                	test   ecx,ecx
c00172d9:	74 64                	je     c001733f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00172db:	83 ec 0c             	sub    esp,0xc
c00172de:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00172e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172e5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00172eb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00172f2:	50                   	push   eax
c00172f3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00172f6:	50                   	push   eax
c00172f7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00172fb:	50                   	push   eax
c00172fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017300:	50                   	push   eax
c0017301:	51                   	push   ecx
c0017302:	e8 51 fe ff ff       	call   c0017158 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017307:	83 c4 20             	add    esp,0x20
c001730a:	ba 01 00 00 00       	mov    edx,0x1
c001730f:	84 c0                	test   al,al
c0017311:	74 31                	je     c0017344 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0017313:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017317:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001731e:	89 03                	mov    DWORD PTR [ebx],eax
c0017320:	ba 00 00 00 00       	mov    edx,0x0
c0017325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017329:	85 c0                	test   eax,eax
c001732b:	0f 95 06             	setne  BYTE PTR [esi]
c001732e:	74 14                	je     c0017344 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0017330:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0017336:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001733d:	eb 05                	jmp    c0017344 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001733f:	ba 04 00 00 00       	mov    edx,0x4
c0017344:	83 c4 14             	add    esp,0x14
c0017347:	89 d0                	mov    eax,edx
c0017349:	5b                   	pop    ebx
c001734a:	5e                   	pop    esi
c001734b:	c3                   	ret    

c001734c <ISO9660::openDir(char const*, void**)>:
c001734c:	57                   	push   edi
c001734d:	56                   	push   esi
c001734e:	53                   	push   ebx
c001734f:	83 ec 10             	sub    esp,0x10
c0017352:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017356:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001735a:	85 ff                	test   edi,edi
c001735c:	74 7b                	je     c00173d9 <ISO9660::openDir(char const*, void**)+0x8d>
c001735e:	85 f6                	test   esi,esi
c0017360:	74 77                	je     c00173d9 <ISO9660::openDir(char const*, void**)+0x8d>
c0017362:	83 ec 0c             	sub    esp,0xc
c0017365:	6a 1c                	push   0x1c
c0017367:	e8 a9 f8 fe ff       	call   c0006c15 <malloc>
c001736c:	89 07                	mov    DWORD PTR [edi],eax
c001736e:	89 c3                	mov    ebx,eax
c0017370:	58                   	pop    eax
c0017371:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017375:	50                   	push   eax
c0017376:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017379:	50                   	push   eax
c001737a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001737e:	50                   	push   eax
c001737f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017383:	50                   	push   eax
c0017384:	56                   	push   esi
c0017385:	e8 ce fd ff ff       	call   c0017158 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001738a:	83 c4 20             	add    esp,0x20
c001738d:	84 c0                	test   al,al
c001738f:	74 07                	je     c0017398 <ISO9660::openDir(char const*, void**)+0x4c>
c0017391:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017396:	75 0b                	jne    c00173a3 <ISO9660::openDir(char const*, void**)+0x57>
c0017398:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001739c:	b8 01 00 00 00       	mov    eax,0x1
c00173a1:	eb 3b                	jmp    c00173de <ISO9660::openDir(char const*, void**)+0x92>
c00173a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173a7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00173ab:	89 03                	mov    DWORD PTR [ebx],eax
c00173ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00173b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00173b8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173bf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00173c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00173c9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00173d0:	8a 06                	mov    al,BYTE PTR [esi]
c00173d2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00173d5:	31 c0                	xor    eax,eax
c00173d7:	eb 05                	jmp    c00173de <ISO9660::openDir(char const*, void**)+0x92>
c00173d9:	b8 04 00 00 00       	mov    eax,0x4
c00173de:	83 c4 10             	add    esp,0x10
c00173e1:	5b                   	pop    ebx
c00173e2:	5e                   	pop    esi
c00173e3:	5f                   	pop    edi
c00173e4:	c3                   	ret    
c00173e5:	90                   	nop

c00173e6 <ISO9660::ISO9660()>:
c00173e6:	83 ec 0c             	sub    esp,0xc
c00173e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173ed:	83 ec 0c             	sub    esp,0xc
c00173f0:	50                   	push   eax
c00173f1:	e8 04 29 ff ff       	call   c0009cfa <Filesystem::Filesystem()>
c00173f6:	83 c4 10             	add    esp,0x10
c00173f9:	ba a0 e5 01 c0       	mov    edx,0xc001e5a0
c00173fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017402:	89 10                	mov    DWORD PTR [eax],edx
c0017404:	90                   	nop
c0017405:	83 c4 0c             	add    esp,0xc
c0017408:	c3                   	ret    
c0017409:	90                   	nop

c001740a <SoundCard::beginPlayback()>:
c001740a:	c7 44 24 04 00 e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e600
c0017412:	e9 10 81 ff ff       	jmp    c000f527 <Krnl::panic(char const*)>
c0017417:	90                   	nop

c0017418 <SoundCard::stopPlayback()>:
c0017418:	c7 44 24 04 00 e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e600
c0017420:	e9 02 81 ff ff       	jmp    c000f527 <Krnl::panic(char const*)>
c0017425:	90                   	nop

c0017426 <SoundCard::SoundCard(char const*)>:
c0017426:	83 ec 1c             	sub    esp,0x1c
c0017429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001742d:	83 ec 08             	sub    esp,0x8
c0017430:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017434:	50                   	push   eax
c0017435:	e8 76 3b ff ff       	call   c000afb0 <Device::Device(char const*)>
c001743a:	83 c4 10             	add    esp,0x10
c001743d:	ba 4c e6 01 c0       	mov    edx,0xc001e64c
c0017442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017446:	89 10                	mov    DWORD PTR [eax],edx
c0017448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001744c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017453:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017457:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017465:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001746f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017473:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001747d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017481:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001748b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017493:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017498:	7f 19                	jg     c00174b3 <SoundCard::SoundCard(char const*)+0x8d>
c001749a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001749e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174a2:	83 c2 54             	add    edx,0x54
c00174a5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00174ad:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00174b1:	eb e0                	jmp    c0017493 <SoundCard::SoundCard(char const*)+0x6d>
c00174b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174b7:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00174be:	90                   	nop
c00174bf:	83 c4 1c             	add    esp,0x1c
c00174c2:	c3                   	ret    
c00174c3:	90                   	nop

c00174c4 <SoundCard::~SoundCard()>:
c00174c4:	83 ec 0c             	sub    esp,0xc
c00174c7:	ba 4c e6 01 c0       	mov    edx,0xc001e64c
c00174cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174d0:	89 10                	mov    DWORD PTR [eax],edx
c00174d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174d6:	83 ec 0c             	sub    esp,0xc
c00174d9:	50                   	push   eax
c00174da:	e8 3b 38 ff ff       	call   c000ad1a <Device::~Device()>
c00174df:	83 c4 10             	add    esp,0x10
c00174e2:	90                   	nop
c00174e3:	83 c4 0c             	add    esp,0xc
c00174e6:	c3                   	ret    
c00174e7:	90                   	nop

c00174e8 <SoundCard::~SoundCard()>:
c00174e8:	83 ec 0c             	sub    esp,0xc
c00174eb:	83 ec 0c             	sub    esp,0xc
c00174ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174f2:	e8 cd ff ff ff       	call   c00174c4 <SoundCard::~SoundCard()>
c00174f7:	83 c4 10             	add    esp,0x10
c00174fa:	83 ec 08             	sub    esp,0x8
c00174fd:	68 e8 01 00 00       	push   0x1e8
c0017502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017506:	e8 d7 23 ff ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	83 c4 0c             	add    esp,0xc
c0017511:	c3                   	ret    

c0017512 <SoundCard::configureRates(int, int, int)>:
c0017512:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017516:	31 c0                	xor    eax,eax
c0017518:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001751f:	75 20                	jne    c0017541 <SoundCard::configureRates(int, int, int)+0x2f>
c0017521:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017525:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001752b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001752f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017539:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001753f:	b0 01                	mov    al,0x1
c0017541:	c3                   	ret    

c0017542 <SoundCard::getSamples16(int, short*)>:
c0017542:	55                   	push   ebp
c0017543:	57                   	push   edi
c0017544:	31 ff                	xor    edi,edi
c0017546:	56                   	push   esi
c0017547:	53                   	push   ebx
c0017548:	31 db                	xor    ebx,ebx
c001754a:	83 ec 10             	sub    esp,0x10
c001754d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017551:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017555:	8d 04 36             	lea    eax,[esi+esi*1]
c0017558:	50                   	push   eax
c0017559:	6a 00                	push   0x0
c001755b:	55                   	push   ebp
c001755c:	e8 8f 8f fe ff       	call   c00004f0 <memset>
c0017561:	83 c4 10             	add    esp,0x10
c0017564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017568:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001756f:	85 c0                	test   eax,eax
c0017571:	74 1b                	je     c001758e <SoundCard::getSamples16(int, short*)+0x4c>
c0017573:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017577:	75 15                	jne    c001758e <SoundCard::getSamples16(int, short*)+0x4c>
c0017579:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001757d:	55                   	push   ebp
c001757e:	56                   	push   esi
c001757f:	50                   	push   eax
c0017580:	e8 ef 02 00 00       	call   c0017874 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017585:	83 c4 10             	add    esp,0x10
c0017588:	39 c7                	cmp    edi,eax
c001758a:	7d 02                	jge    c001758e <SoundCard::getSamples16(int, short*)+0x4c>
c001758c:	89 c7                	mov    edi,eax
c001758e:	43                   	inc    ebx
c001758f:	83 fb 20             	cmp    ebx,0x20
c0017592:	75 d0                	jne    c0017564 <SoundCard::getSamples16(int, short*)+0x22>
c0017594:	83 c4 0c             	add    esp,0xc
c0017597:	89 f8                	mov    eax,edi
c0017599:	5b                   	pop    ebx
c001759a:	5e                   	pop    esi
c001759b:	5f                   	pop    edi
c001759c:	5d                   	pop    ebp
c001759d:	c3                   	ret    

c001759e <SoundCard::getSamples32(int, int*)>:
c001759e:	55                   	push   ebp
c001759f:	57                   	push   edi
c00175a0:	31 ff                	xor    edi,edi
c00175a2:	56                   	push   esi
c00175a3:	31 f6                	xor    esi,esi
c00175a5:	53                   	push   ebx
c00175a6:	83 ec 10             	sub    esp,0x10
c00175a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175ad:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00175b1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00175b5:	c1 e0 02             	shl    eax,0x2
c00175b8:	50                   	push   eax
c00175b9:	6a 00                	push   0x0
c00175bb:	55                   	push   ebp
c00175bc:	e8 2f 8f fe ff       	call   c00004f0 <memset>
c00175c1:	83 c4 10             	add    esp,0x10
c00175c4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00175cb:	85 c0                	test   eax,eax
c00175cd:	74 1b                	je     c00175ea <SoundCard::getSamples32(int, int*)+0x4c>
c00175cf:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00175d3:	75 15                	jne    c00175ea <SoundCard::getSamples32(int, int*)+0x4c>
c00175d5:	53                   	push   ebx
c00175d6:	55                   	push   ebp
c00175d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175db:	50                   	push   eax
c00175dc:	e8 57 03 00 00       	call   c0017938 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00175e1:	83 c4 10             	add    esp,0x10
c00175e4:	39 c6                	cmp    esi,eax
c00175e6:	7d 02                	jge    c00175ea <SoundCard::getSamples32(int, int*)+0x4c>
c00175e8:	89 c6                	mov    esi,eax
c00175ea:	47                   	inc    edi
c00175eb:	83 ff 20             	cmp    edi,0x20
c00175ee:	75 d4                	jne    c00175c4 <SoundCard::getSamples32(int, int*)+0x26>
c00175f0:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00175f6:	85 f6                	test   esi,esi
c00175f8:	75 0f                	jne    c0017609 <SoundCard::getSamples32(int, int*)+0x6b>
c00175fa:	84 c0                	test   al,al
c00175fc:	74 1b                	je     c0017619 <SoundCard::getSamples32(int, int*)+0x7b>
c00175fe:	83 ec 0c             	sub    esp,0xc
c0017601:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017603:	53                   	push   ebx
c0017604:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017607:	eb 0d                	jmp    c0017616 <SoundCard::getSamples32(int, int*)+0x78>
c0017609:	84 c0                	test   al,al
c001760b:	75 0c                	jne    c0017619 <SoundCard::getSamples32(int, int*)+0x7b>
c001760d:	83 ec 0c             	sub    esp,0xc
c0017610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017612:	53                   	push   ebx
c0017613:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017616:	83 c4 10             	add    esp,0x10
c0017619:	83 c4 0c             	add    esp,0xc
c001761c:	89 f0                	mov    eax,esi
c001761e:	5b                   	pop    ebx
c001761f:	5e                   	pop    esi
c0017620:	5f                   	pop    edi
c0017621:	5d                   	pop    ebp
c0017622:	c3                   	ret    
c0017623:	90                   	nop

c0017624 <SoundCard::addChannel(SoundPort*)>:
c0017624:	83 ec 0c             	sub    esp,0xc
c0017627:	31 c0                	xor    eax,eax
c0017629:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001762d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017635:	74 1b                	je     c0017652 <SoundCard::addChannel(SoundPort*)+0x2e>
c0017637:	40                   	inc    eax
c0017638:	83 f8 20             	cmp    eax,0x20
c001763b:	75 f0                	jne    c001762d <SoundCard::addChannel(SoundPort*)+0x9>
c001763d:	83 ec 0c             	sub    esp,0xc
c0017640:	68 25 e6 01 c0       	push   0xc001e625
c0017645:	e8 dd 7e ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001764a:	83 c4 10             	add    esp,0x10
c001764d:	83 c8 ff             	or     eax,0xffffffff
c0017650:	eb 0b                	jmp    c001765d <SoundCard::addChannel(SoundPort*)+0x39>
c0017652:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017656:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001765d:	83 c4 0c             	add    esp,0xc
c0017660:	c3                   	ret    
c0017661:	90                   	nop

c0017662 <SoundCard::removeChannel(int)>:
c0017662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001766a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017675:	c3                   	ret    
c0017676:	66 90                	xchg   ax,ax

c0017678 <SoundPort::SoundPort(int, int, int, int)>:
c0017678:	83 ec 0c             	sub    esp,0xc
c001767b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001767f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001768a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001768e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017692:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017696:	89 10                	mov    DWORD PTR [eax],edx
c0017698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001769c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176a0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00176a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00176ae:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00176b3:	75 13                	jne    c00176c8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00176b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00176bb:	05 a0 0f 00 00       	add    eax,0xfa0
c00176c0:	01 c0                	add    eax,eax
c00176c2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176c6:	66 90                	xchg   ax,ax
c00176c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00176d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176d7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00176de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00176e5:	c1 e0 02             	shl    eax,0x2
c00176e8:	83 ec 0c             	sub    esp,0xc
c00176eb:	50                   	push   eax
c00176ec:	e8 24 f5 fe ff       	call   c0006c15 <malloc>
c00176f1:	83 c4 10             	add    esp,0x10
c00176f4:	89 c2                	mov    edx,eax
c00176f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00176fd:	90                   	nop
c00176fe:	83 c4 0c             	add    esp,0xc
c0017701:	c3                   	ret    
c0017702:	66 90                	xchg   ax,ax

c0017704 <SoundPort::~SoundPort()>:
c0017704:	83 ec 0c             	sub    esp,0xc
c0017707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001770b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001770e:	85 c0                	test   eax,eax
c0017710:	74 1e                	je     c0017730 <SoundPort::~SoundPort()+0x2c>
c0017712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017716:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017719:	83 ec 0c             	sub    esp,0xc
c001771c:	50                   	push   eax
c001771d:	e8 03 f5 fe ff       	call   c0006c25 <free>
c0017722:	83 c4 10             	add    esp,0x10
c0017725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017729:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017730:	90                   	nop
c0017731:	83 c4 0c             	add    esp,0xc
c0017734:	c3                   	ret    
c0017735:	90                   	nop
c0017736:	66 90                	xchg   ax,ax

c0017738 <SoundPort::unpause()>:
c0017738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001773c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017740:	c3                   	ret    
c0017741:	90                   	nop
c0017742:	66 90                	xchg   ax,ax

c0017744 <SoundPort::pause()>:
c0017744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017748:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001774c:	c3                   	ret    
c001774d:	90                   	nop
c001774e:	66 90                	xchg   ax,ax

c0017750 <SoundPort::getBufferUsed()>:
c0017750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017754:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017757:	c3                   	ret    

c0017758 <SoundPort::getBufferSize()>:
c0017758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001775c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001775f:	c3                   	ret    

c0017760 <SoundPort::buffer16(short*, int)>:
c0017760:	55                   	push   ebp
c0017761:	57                   	push   edi
c0017762:	56                   	push   esi
c0017763:	53                   	push   ebx
c0017764:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017768:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001776c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001776f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017772:	74 68                	je     c00177dc <SoundPort::buffer16(short*, int)+0x7c>
c0017774:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017778:	85 c9                	test   ecx,ecx
c001777a:	7e 60                	jle    c00177dc <SoundPort::buffer16(short*, int)+0x7c>
c001777c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017780:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017783:	c1 e1 0f             	shl    ecx,0xf
c0017786:	8d 70 01             	lea    esi,[eax+0x1]
c0017789:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001778c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001778f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017792:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017795:	74 4d                	je     c00177e4 <SoundPort::buffer16(short*, int)+0x84>
c0017797:	31 f6                	xor    esi,esi
c0017799:	eb 21                	jmp    c00177bc <SoundPort::buffer16(short*, int)+0x5c>
c001779b:	90                   	nop
c001779c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00177a1:	8d 79 01             	lea    edi,[ecx+0x1]
c00177a4:	c1 e3 0f             	shl    ebx,0xf
c00177a7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00177aa:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00177ad:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00177b0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00177b3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00177b6:	74 1c                	je     c00177d4 <SoundPort::buffer16(short*, int)+0x74>
c00177b8:	89 c6                	mov    esi,eax
c00177ba:	66 90                	xchg   ax,ax
c00177bc:	8d 46 01             	lea    eax,[esi+0x1]
c00177bf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00177c3:	75 d7                	jne    c001779c <SoundPort::buffer16(short*, int)+0x3c>
c00177c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177c9:	8d 76 00             	lea    esi,[esi+0x0]
c00177cc:	5b                   	pop    ebx
c00177cd:	5e                   	pop    esi
c00177ce:	5f                   	pop    edi
c00177cf:	5d                   	pop    ebp
c00177d0:	c3                   	ret    
c00177d1:	8d 76 00             	lea    esi,[esi+0x0]
c00177d4:	5b                   	pop    ebx
c00177d5:	8d 46 02             	lea    eax,[esi+0x2]
c00177d8:	5e                   	pop    esi
c00177d9:	5f                   	pop    edi
c00177da:	5d                   	pop    ebp
c00177db:	c3                   	ret    
c00177dc:	5b                   	pop    ebx
c00177dd:	31 c0                	xor    eax,eax
c00177df:	5e                   	pop    esi
c00177e0:	5f                   	pop    edi
c00177e1:	5d                   	pop    ebp
c00177e2:	c3                   	ret    
c00177e3:	90                   	nop
c00177e4:	b8 01 00 00 00       	mov    eax,0x1
c00177e9:	eb e1                	jmp    c00177cc <SoundPort::buffer16(short*, int)+0x6c>
c00177eb:	90                   	nop

c00177ec <SoundPort::buffer32(int*, int)>:
c00177ec:	55                   	push   ebp
c00177ed:	57                   	push   edi
c00177ee:	56                   	push   esi
c00177ef:	53                   	push   ebx
c00177f0:	51                   	push   ecx
c00177f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177f9:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00177fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017800:	89 04 24             	mov    DWORD PTR [esp],eax
c0017803:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017806:	74 5c                	je     c0017864 <SoundPort::buffer32(int*, int)+0x78>
c0017808:	85 c0                	test   eax,eax
c001780a:	7e 58                	jle    c0017864 <SoundPort::buffer32(int*, int)+0x78>
c001780c:	8d 71 01             	lea    esi,[ecx+0x1]
c001780f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017812:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017815:	8b 37                	mov    esi,DWORD PTR [edi]
c0017817:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001781a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001781d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017820:	74 4a                	je     c001786c <SoundPort::buffer32(int*, int)+0x80>
c0017822:	31 f6                	xor    esi,esi
c0017824:	eb 1e                	jmp    c0017844 <SoundPort::buffer32(int*, int)+0x58>
c0017826:	66 90                	xchg   ax,ax
c0017828:	8d 69 01             	lea    ebp,[ecx+0x1]
c001782b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001782e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017831:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017834:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017838:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001783b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001783e:	74 18                	je     c0017858 <SoundPort::buffer32(int*, int)+0x6c>
c0017840:	89 de                	mov    esi,ebx
c0017842:	66 90                	xchg   ax,ax
c0017844:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017847:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001784a:	75 dc                	jne    c0017828 <SoundPort::buffer32(int*, int)+0x3c>
c001784c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001784f:	90                   	nop
c0017850:	5a                   	pop    edx
c0017851:	5b                   	pop    ebx
c0017852:	5e                   	pop    esi
c0017853:	5f                   	pop    edi
c0017854:	5d                   	pop    ebp
c0017855:	c3                   	ret    
c0017856:	66 90                	xchg   ax,ax
c0017858:	5a                   	pop    edx
c0017859:	8d 46 02             	lea    eax,[esi+0x2]
c001785c:	5b                   	pop    ebx
c001785d:	5e                   	pop    esi
c001785e:	5f                   	pop    edi
c001785f:	5d                   	pop    ebp
c0017860:	c3                   	ret    
c0017861:	8d 76 00             	lea    esi,[esi+0x0]
c0017864:	5a                   	pop    edx
c0017865:	31 c0                	xor    eax,eax
c0017867:	5b                   	pop    ebx
c0017868:	5e                   	pop    esi
c0017869:	5f                   	pop    edi
c001786a:	5d                   	pop    ebp
c001786b:	c3                   	ret    
c001786c:	b8 01 00 00 00       	mov    eax,0x1
c0017871:	eb dd                	jmp    c0017850 <SoundPort::buffer32(int*, int)+0x64>
c0017873:	90                   	nop

c0017874 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017874:	57                   	push   edi
c0017875:	56                   	push   esi
c0017876:	53                   	push   ebx
c0017877:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001787b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001787f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017885:	39 03                	cmp    DWORD PTR [ebx],eax
c0017887:	74 13                	je     c001789c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017889:	83 ec 0c             	sub    esp,0xc
c001788c:	68 78 e6 01 c0       	push   0xc001e678
c0017891:	e8 91 7c ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0017896:	83 c4 10             	add    esp,0x10
c0017899:	8d 76 00             	lea    esi,[esi+0x0]
c001789c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00178a2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00178a5:	74 11                	je     c00178b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00178a7:	83 ec 0c             	sub    esp,0xc
c00178aa:	68 b7 e6 01 c0       	push   0xc001e6b7
c00178af:	e8 73 7c ff ff       	call   c000f527 <Krnl::panic(char const*)>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	90                   	nop
c00178b8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00178be:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00178c1:	74 11                	je     c00178d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00178c3:	83 ec 0c             	sub    esp,0xc
c00178c6:	68 b7 e6 01 c0       	push   0xc001e6b7
c00178cb:	e8 57 7c ff ff       	call   c000f527 <Krnl::panic(char const*)>
c00178d0:	83 c4 10             	add    esp,0x10
c00178d3:	90                   	nop
c00178d4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00178d7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00178db:	7e 07                	jle    c00178e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00178dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00178e1:	8d 76 00             	lea    esi,[esi+0x0]
c00178e4:	85 f6                	test   esi,esi
c00178e6:	7e 2c                	jle    c0017914 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00178e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178ec:	8d 3c 36             	lea    edi,[esi+esi*1]
c00178ef:	31 c9                	xor    ecx,ecx
c00178f1:	01 d7                	add    edi,edx
c00178f3:	90                   	nop
c00178f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00178f7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00178fa:	85 c0                	test   eax,eax
c00178fc:	79 06                	jns    c0017904 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00178fe:	05 ff 7f 00 00       	add    eax,0x7fff
c0017903:	90                   	nop
c0017904:	c1 f8 0f             	sar    eax,0xf
c0017907:	83 c1 04             	add    ecx,0x4
c001790a:	66 01 02             	add    WORD PTR [edx],ax
c001790d:	83 c2 02             	add    edx,0x2
c0017910:	39 d7                	cmp    edi,edx
c0017912:	75 e0                	jne    c00178f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017917:	50                   	push   eax
c0017918:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001791b:	29 f0                	sub    eax,esi
c001791d:	c1 e0 02             	shl    eax,0x2
c0017920:	50                   	push   eax
c0017921:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017924:	50                   	push   eax
c0017925:	52                   	push   edx
c0017926:	e8 d5 8a fe ff       	call   c0000400 <memmove>
c001792b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001792e:	83 c4 10             	add    esp,0x10
c0017931:	89 f0                	mov    eax,esi
c0017933:	5b                   	pop    ebx
c0017934:	5e                   	pop    esi
c0017935:	5f                   	pop    edi
c0017936:	c3                   	ret    
c0017937:	90                   	nop

c0017938 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017938:	57                   	push   edi
c0017939:	56                   	push   esi
c001793a:	53                   	push   ebx
c001793b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001793f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017943:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017947:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001794d:	39 06                	cmp    DWORD PTR [esi],eax
c001794f:	74 13                	je     c0017964 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017951:	83 ec 0c             	sub    esp,0xc
c0017954:	68 98 e6 01 c0       	push   0xc001e698
c0017959:	e8 c9 7b ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	8d 76 00             	lea    esi,[esi+0x0]
c0017964:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001796a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001796d:	74 11                	je     c0017980 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001796f:	83 ec 0c             	sub    esp,0xc
c0017972:	68 d3 e6 01 c0       	push   0xc001e6d3
c0017977:	e8 ab 7b ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001797c:	83 c4 10             	add    esp,0x10
c001797f:	90                   	nop
c0017980:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017986:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017989:	74 11                	je     c001799c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001798b:	83 ec 0c             	sub    esp,0xc
c001798e:	68 d3 e6 01 c0       	push   0xc001e6d3
c0017993:	e8 8f 7b ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0017998:	83 c4 10             	add    esp,0x10
c001799b:	90                   	nop
c001799c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001799f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00179a3:	7e 07                	jle    c00179ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00179a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00179a9:	8d 76 00             	lea    esi,[esi+0x0]
c00179ac:	85 ff                	test   edi,edi
c00179ae:	7e 1c                	jle    c00179cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00179b0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00179b7:	31 c0                	xor    eax,eax
c00179b9:	8d 76 00             	lea    esi,[esi+0x0]
c00179bc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00179bf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00179c2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00179c5:	83 c0 04             	add    eax,0x4
c00179c8:	39 c1                	cmp    ecx,eax
c00179ca:	75 f0                	jne    c00179bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00179cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00179cf:	50                   	push   eax
c00179d0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00179d3:	29 f8                	sub    eax,edi
c00179d5:	c1 e0 02             	shl    eax,0x2
c00179d8:	50                   	push   eax
c00179d9:	8d 04 ba             	lea    eax,[edx+edi*4]
c00179dc:	50                   	push   eax
c00179dd:	52                   	push   edx
c00179de:	e8 1d 8a fe ff       	call   c0000400 <memmove>
c00179e3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	89 f8                	mov    eax,edi
c00179eb:	5b                   	pop    ebx
c00179ec:	5e                   	pop    esi
c00179ed:	5f                   	pop    edi
c00179ee:	c3                   	ret    
c00179ef:	90                   	nop

c00179f0 <PCI::open(int, int, void*)>:
c00179f0:	83 ec 18             	sub    esp,0x18
c00179f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017a01:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a03:	50                   	push   eax
c0017a04:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017a07:	31 c0                	xor    eax,eax
c0017a09:	83 c4 1c             	add    esp,0x1c
c0017a0c:	c3                   	ret    
c0017a0d:	90                   	nop

c0017a0e <PCI::close(int, int, void*)>:
c0017a0e:	31 c0                	xor    eax,eax
c0017a10:	c3                   	ret    
c0017a11:	90                   	nop

c0017a12 <PCI::PCI()>:
c0017a12:	83 ec 0c             	sub    esp,0xc
c0017a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a19:	83 ec 08             	sub    esp,0x8
c0017a1c:	68 ef e6 01 c0       	push   0xc001e6ef
c0017a21:	50                   	push   eax
c0017a22:	e8 45 2d ff ff       	call   c000a76c <Bus::Bus(char const*)>
c0017a27:	83 c4 10             	add    esp,0x10
c0017a2a:	ba 98 e7 01 c0       	mov    edx,0xc001e798
c0017a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a33:	89 10                	mov    DWORD PTR [eax],edx
c0017a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a39:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0017a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a47:	a3 40 33 02 c0       	mov    ds:0xc0023340,eax
c0017a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a50:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017a56:	31 d2                	xor    edx,edx
c0017a58:	88 c2                	mov    dl,al
c0017a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a5e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0017a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017a6f:	31 d2                	xor    edx,edx
c0017a71:	88 c2                	mov    dl,al
c0017a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a77:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0017a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017a86:	8d 50 01             	lea    edx,[eax+0x1]
c0017a89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017a8d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0017a93:	31 d2                	xor    edx,edx
c0017a95:	88 c2                	mov    dl,al
c0017a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a9b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0017a9f:	83 c9 c0             	or     ecx,0xffffffc0
c0017aa2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0017aa6:	90                   	nop
c0017aa7:	83 c4 0c             	add    esp,0xc
c0017aaa:	c3                   	ret    
c0017aab:	90                   	nop

c0017aac <PCI::readBAR8(unsigned int, int)>:
c0017aac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ab4:	f6 c2 01             	test   dl,0x1
c0017ab7:	74 07                	je     c0017ac0 <PCI::readBAR8(unsigned int, int)+0x14>
c0017ab9:	83 e2 fc             	and    edx,0xfffffffc
c0017abc:	01 c2                	add    edx,eax
c0017abe:	ec                   	in     al,dx
c0017abf:	c3                   	ret    
c0017ac0:	83 e2 f0             	and    edx,0xfffffff0
c0017ac3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0017ac6:	c3                   	ret    
c0017ac7:	90                   	nop

c0017ac8 <PCI::readBAR16(unsigned int, int)>:
c0017ac8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017acc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ad0:	f6 c2 01             	test   dl,0x1
c0017ad3:	74 08                	je     c0017add <PCI::readBAR16(unsigned int, int)+0x15>
c0017ad5:	83 e2 fc             	and    edx,0xfffffffc
c0017ad8:	01 c2                	add    edx,eax
c0017ada:	66 ed                	in     ax,dx
c0017adc:	c3                   	ret    
c0017add:	83 e2 f0             	and    edx,0xfffffff0
c0017ae0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0017ae4:	c3                   	ret    
c0017ae5:	90                   	nop

c0017ae6 <PCI::readBAR32(unsigned int, int)>:
c0017ae6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017aea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017aee:	f6 c2 01             	test   dl,0x1
c0017af1:	74 07                	je     c0017afa <PCI::readBAR32(unsigned int, int)+0x14>
c0017af3:	83 e2 fc             	and    edx,0xfffffffc
c0017af6:	01 c2                	add    edx,eax
c0017af8:	ed                   	in     eax,dx
c0017af9:	c3                   	ret    
c0017afa:	83 e2 f0             	and    edx,0xfffffff0
c0017afd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0017b00:	c3                   	ret    
c0017b01:	90                   	nop

c0017b02 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0017b02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017b0e:	f6 c2 01             	test   dl,0x1
c0017b11:	74 07                	je     c0017b1a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0017b13:	83 e2 fc             	and    edx,0xfffffffc
c0017b16:	01 ca                	add    edx,ecx
c0017b18:	ee                   	out    dx,al
c0017b19:	c3                   	ret    
c0017b1a:	83 e2 f0             	and    edx,0xfffffff0
c0017b1d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0017b20:	c3                   	ret    
c0017b21:	90                   	nop

c0017b22 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0017b22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017b2e:	f6 c2 01             	test   dl,0x1
c0017b31:	74 08                	je     c0017b3b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0017b33:	83 e2 fc             	and    edx,0xfffffffc
c0017b36:	01 ca                	add    edx,ecx
c0017b38:	66 ef                	out    dx,ax
c0017b3a:	c3                   	ret    
c0017b3b:	83 e2 f0             	and    edx,0xfffffff0
c0017b3e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0017b42:	c3                   	ret    
c0017b43:	90                   	nop

c0017b44 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0017b44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017b50:	f6 c2 01             	test   dl,0x1
c0017b53:	74 07                	je     c0017b5c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0017b55:	83 e2 fc             	and    edx,0xfffffffc
c0017b58:	01 ca                	add    edx,ecx
c0017b5a:	ef                   	out    dx,eax
c0017b5b:	c3                   	ret    
c0017b5c:	83 e2 f0             	and    edx,0xfffffff0
c0017b5f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0017b62:	c3                   	ret    
c0017b63:	90                   	nop

c0017b64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017b64:	55                   	push   ebp
c0017b65:	57                   	push   edi
c0017b66:	56                   	push   esi
c0017b67:	53                   	push   ebx
c0017b68:	83 ec 0c             	sub    esp,0xc
c0017b6b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017b6f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0017b73:	89 f0                	mov    eax,esi
c0017b75:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0017b79:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017b7d:	3c 07                	cmp    al,0x7
c0017b7f:	76 10                	jbe    c0017b91 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0017b81:	83 ec 0c             	sub    esp,0xc
c0017b84:	68 f7 e6 01 c0       	push   0xc001e6f7
c0017b89:	e8 99 79 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0017b8e:	83 c4 10             	add    esp,0x10
c0017b91:	80 fb 0f             	cmp    bl,0xf
c0017b94:	76 10                	jbe    c0017ba6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0017b96:	83 ec 0c             	sub    esp,0xc
c0017b99:	68 27 e7 01 c0       	push   0xc001e727
c0017b9e:	e8 84 79 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0017ba3:	83 c4 10             	add    esp,0x10
c0017ba6:	8d 04 36             	lea    eax,[esi+esi*1]
c0017ba9:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017bae:	83 c8 f0             	or     eax,0xfffffff0
c0017bb1:	ee                   	out    dx,al
c0017bb2:	ba fa 0c 00 00       	mov    edx,0xcfa
c0017bb7:	89 e8                	mov    eax,ebp
c0017bb9:	ee                   	out    dx,al
c0017bba:	83 c4 0c             	add    esp,0xc
c0017bbd:	89 d8                	mov    eax,ebx
c0017bbf:	66 81 e7 fc 00       	and    di,0xfc
c0017bc4:	5b                   	pop    ebx
c0017bc5:	c1 e0 08             	shl    eax,0x8
c0017bc8:	5e                   	pop    esi
c0017bc9:	09 f8                	or     eax,edi
c0017bcb:	5f                   	pop    edi
c0017bcc:	66 0d 00 c0          	or     ax,0xc000
c0017bd0:	5d                   	pop    ebp
c0017bd1:	c3                   	ret    

c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017bd2:	57                   	push   edi
c0017bd3:	56                   	push   esi
c0017bd4:	53                   	push   ebx
c0017bd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017bd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bdd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0017be3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017be7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017beb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017bef:	83 ff 01             	cmp    edi,0x1
c0017bf2:	75 3e                	jne    c0017c32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0017bf4:	89 de                	mov    esi,ebx
c0017bf6:	0f b6 c0             	movzx  eax,al
c0017bf9:	81 e6 fc 00 00 00    	and    esi,0xfc
c0017bff:	c1 e0 10             	shl    eax,0x10
c0017c02:	0f b6 c9             	movzx  ecx,cl
c0017c05:	09 f0                	or     eax,esi
c0017c07:	c1 e1 08             	shl    ecx,0x8
c0017c0a:	0f b6 d2             	movzx  edx,dl
c0017c0d:	09 c8                	or     eax,ecx
c0017c0f:	c1 e2 0b             	shl    edx,0xb
c0017c12:	09 d0                	or     eax,edx
c0017c14:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017c19:	0d 00 00 00 80       	or     eax,0x80000000
c0017c1e:	ef                   	out    dx,eax
c0017c1f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017c24:	ed                   	in     eax,dx
c0017c25:	83 e3 02             	and    ebx,0x2
c0017c28:	0f b6 cb             	movzx  ecx,bl
c0017c2b:	c1 e1 03             	shl    ecx,0x3
c0017c2e:	d3 e8                	shr    eax,cl
c0017c30:	eb 43                	jmp    c0017c75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017c32:	83 ff 02             	cmp    edi,0x2
c0017c35:	75 2c                	jne    c0017c63 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0017c37:	83 ec 0c             	sub    esp,0xc
c0017c3a:	0f b6 c9             	movzx  ecx,cl
c0017c3d:	0f b6 d2             	movzx  edx,dl
c0017c40:	0f b6 fb             	movzx  edi,bl
c0017c43:	0f b6 c0             	movzx  eax,al
c0017c46:	57                   	push   edi
c0017c47:	51                   	push   ecx
c0017c48:	52                   	push   edx
c0017c49:	50                   	push   eax
c0017c4a:	56                   	push   esi
c0017c4b:	e8 14 ff ff ff       	call   c0017b64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c50:	89 c2                	mov    edx,eax
c0017c52:	ed                   	in     eax,dx
c0017c53:	83 e3 02             	and    ebx,0x2
c0017c56:	83 c4 20             	add    esp,0x20
c0017c59:	0f b6 cb             	movzx  ecx,bl
c0017c5c:	c1 e1 03             	shl    ecx,0x3
c0017c5f:	d3 e8                	shr    eax,cl
c0017c61:	eb 12                	jmp    c0017c75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017c63:	83 ec 0c             	sub    esp,0xc
c0017c66:	68 57 e7 01 c0       	push   0xc001e757
c0017c6b:	e8 b7 78 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c0017c70:	83 c4 10             	add    esp,0x10
c0017c73:	31 c0                	xor    eax,eax
c0017c75:	5b                   	pop    ebx
c0017c76:	5e                   	pop    esi
c0017c77:	5f                   	pop    edi
c0017c78:	c3                   	ret    
c0017c79:	90                   	nop

c0017c7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0017c7a:	83 ec 18             	sub    esp,0x18
c0017c7d:	6a 00                	push   0x0
c0017c7f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c84:	50                   	push   eax
c0017c85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c8a:	50                   	push   eax
c0017c8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c90:	50                   	push   eax
c0017c91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c95:	e8 38 ff ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c9a:	83 c4 2c             	add    esp,0x2c
c0017c9d:	c3                   	ret    

c0017c9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0017c9e:	83 ec 18             	sub    esp,0x18
c0017ca1:	6a 0e                	push   0xe
c0017ca3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017ca8:	50                   	push   eax
c0017ca9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cae:	50                   	push   eax
c0017caf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cb4:	50                   	push   eax
c0017cb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cb9:	e8 14 ff ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017cbe:	83 c4 2c             	add    esp,0x2c
c0017cc1:	0f b6 c0             	movzx  eax,al
c0017cc4:	c3                   	ret    
c0017cc5:	90                   	nop

c0017cc6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0017cc6:	55                   	push   ebp
c0017cc7:	57                   	push   edi
c0017cc8:	56                   	push   esi
c0017cc9:	53                   	push   ebx
c0017cca:	83 ec 18             	sub    esp,0x18
c0017ccd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0017cd2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0017cd7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0017cdc:	6a 0a                	push   0xa
c0017cde:	56                   	push   esi
c0017cdf:	55                   	push   ebp
c0017ce0:	57                   	push   edi
c0017ce1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017ce5:	e8 e8 fe ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017cea:	83 c4 14             	add    esp,0x14
c0017ced:	89 c3                	mov    ebx,eax
c0017cef:	6a 0a                	push   0xa
c0017cf1:	0f b6 db             	movzx  ebx,bl
c0017cf4:	56                   	push   esi
c0017cf5:	55                   	push   ebp
c0017cf6:	57                   	push   edi
c0017cf7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017cfb:	e8 d2 fe ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d00:	83 c4 2c             	add    esp,0x2c
c0017d03:	25 00 ff 00 00       	and    eax,0xff00
c0017d08:	09 d8                	or     eax,ebx
c0017d0a:	5b                   	pop    ebx
c0017d0b:	5e                   	pop    esi
c0017d0c:	5f                   	pop    edi
c0017d0d:	5d                   	pop    ebp
c0017d0e:	c3                   	ret    
c0017d0f:	90                   	nop

c0017d10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0017d10:	83 ec 18             	sub    esp,0x18
c0017d13:	6a 08                	push   0x8
c0017d15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d1a:	50                   	push   eax
c0017d1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d20:	50                   	push   eax
c0017d21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d26:	50                   	push   eax
c0017d27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d2b:	e8 a2 fe ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d30:	83 c4 2c             	add    esp,0x2c
c0017d33:	0f b6 c4             	movzx  eax,ah
c0017d36:	c3                   	ret    
c0017d37:	90                   	nop

c0017d38 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0017d38:	83 ec 18             	sub    esp,0x18
c0017d3b:	6a 08                	push   0x8
c0017d3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d42:	50                   	push   eax
c0017d43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d48:	50                   	push   eax
c0017d49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d4e:	50                   	push   eax
c0017d4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d53:	e8 7a fe ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d58:	83 c4 2c             	add    esp,0x2c
c0017d5b:	c3                   	ret    

c0017d5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0017d5c:	83 ec 18             	sub    esp,0x18
c0017d5f:	6a 3c                	push   0x3c
c0017d61:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d66:	50                   	push   eax
c0017d67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d6c:	50                   	push   eax
c0017d6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d72:	50                   	push   eax
c0017d73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d77:	e8 56 fe ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d7c:	83 c4 2c             	add    esp,0x2c
c0017d7f:	c3                   	ret    

c0017d80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0017d80:	83 ec 18             	sub    esp,0x18
c0017d83:	6a 18                	push   0x18
c0017d85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d8a:	50                   	push   eax
c0017d8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d90:	50                   	push   eax
c0017d91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d96:	50                   	push   eax
c0017d97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d9b:	e8 32 fe ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017da0:	83 c4 2c             	add    esp,0x2c
c0017da3:	0f b6 c4             	movzx  eax,ah
c0017da6:	c3                   	ret    
c0017da7:	90                   	nop

c0017da8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017da8:	55                   	push   ebp
c0017da9:	57                   	push   edi
c0017daa:	56                   	push   esi
c0017dab:	53                   	push   ebx
c0017dac:	83 ec 28             	sub    esp,0x28
c0017daf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0017db3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0017db8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0017dbd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0017dc2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0017dc9:	8d 43 12             	lea    eax,[ebx+0x12]
c0017dcc:	83 c3 10             	add    ebx,0x10
c0017dcf:	0f b6 c0             	movzx  eax,al
c0017dd2:	0f b6 db             	movzx  ebx,bl
c0017dd5:	50                   	push   eax
c0017dd6:	51                   	push   ecx
c0017dd7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0017ddb:	57                   	push   edi
c0017ddc:	55                   	push   ebp
c0017ddd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017de1:	e8 ec fd ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017de6:	83 c4 14             	add    esp,0x14
c0017de9:	89 c6                	mov    esi,eax
c0017deb:	53                   	push   ebx
c0017dec:	c1 e6 10             	shl    esi,0x10
c0017def:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017df3:	51                   	push   ecx
c0017df4:	57                   	push   edi
c0017df5:	55                   	push   ebp
c0017df6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017dfa:	e8 d3 fd ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017dff:	83 c4 3c             	add    esp,0x3c
c0017e02:	0f b7 c0             	movzx  eax,ax
c0017e05:	5b                   	pop    ebx
c0017e06:	09 f0                	or     eax,esi
c0017e08:	5e                   	pop    esi
c0017e09:	5f                   	pop    edi
c0017e0a:	5d                   	pop    ebp
c0017e0b:	c3                   	ret    

c0017e0c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0017e0c:	55                   	push   ebp
c0017e0d:	57                   	push   edi
c0017e0e:	56                   	push   esi
c0017e0f:	53                   	push   ebx
c0017e10:	83 ec 0c             	sub    esp,0xc
c0017e13:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017e17:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0017e1b:	89 f5                	mov    ebp,esi
c0017e1d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0017e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017e33:	83 f9 01             	cmp    ecx,0x1
c0017e36:	75 5d                	jne    c0017e95 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0017e38:	0f b6 c8             	movzx  ecx,al
c0017e3b:	0f b6 d2             	movzx  edx,dl
c0017e3e:	c1 e1 10             	shl    ecx,0x10
c0017e41:	c1 e2 0b             	shl    edx,0xb
c0017e44:	89 f0                	mov    eax,esi
c0017e46:	25 fc 00 00 00       	and    eax,0xfc
c0017e4b:	09 c1                	or     ecx,eax
c0017e4d:	89 e8                	mov    eax,ebp
c0017e4f:	0f b6 c0             	movzx  eax,al
c0017e52:	c1 e0 08             	shl    eax,0x8
c0017e55:	09 c1                	or     ecx,eax
c0017e57:	09 d1                	or     ecx,edx
c0017e59:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017e5e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0017e64:	89 c8                	mov    eax,ecx
c0017e66:	ef                   	out    dx,eax
c0017e67:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017e6c:	ed                   	in     eax,dx
c0017e6d:	0f b7 db             	movzx  ebx,bx
c0017e70:	83 e6 02             	and    esi,0x2
c0017e73:	74 0a                	je     c0017e7f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0017e75:	0f b7 d0             	movzx  edx,ax
c0017e78:	c1 e3 10             	shl    ebx,0x10
c0017e7b:	09 d3                	or     ebx,edx
c0017e7d:	eb 05                	jmp    c0017e84 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0017e7f:	66 31 c0             	xor    ax,ax
c0017e82:	09 c3                	or     ebx,eax
c0017e84:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017e89:	89 c8                	mov    eax,ecx
c0017e8b:	ef                   	out    dx,eax
c0017e8c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017e91:	89 d8                	mov    eax,ebx
c0017e93:	eb 41                	jmp    c0017ed6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017e95:	83 f9 02             	cmp    ecx,0x2
c0017e98:	75 45                	jne    c0017edf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0017e9a:	83 ec 0c             	sub    esp,0xc
c0017e9d:	0f b6 d2             	movzx  edx,dl
c0017ea0:	89 f1                	mov    ecx,esi
c0017ea2:	0f b6 c0             	movzx  eax,al
c0017ea5:	0f b6 f1             	movzx  esi,cl
c0017ea8:	89 e9                	mov    ecx,ebp
c0017eaa:	56                   	push   esi
c0017eab:	0f b6 c9             	movzx  ecx,cl
c0017eae:	51                   	push   ecx
c0017eaf:	52                   	push   edx
c0017eb0:	50                   	push   eax
c0017eb1:	57                   	push   edi
c0017eb2:	e8 ad fc ff ff       	call   c0017b64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017eb7:	89 c2                	mov    edx,eax
c0017eb9:	ed                   	in     eax,dx
c0017eba:	83 c4 20             	add    esp,0x20
c0017ebd:	0f b7 db             	movzx  ebx,bx
c0017ec0:	f6 c2 02             	test   dl,0x2
c0017ec3:	74 0c                	je     c0017ed1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0017ec5:	0f b7 c8             	movzx  ecx,ax
c0017ec8:	89 d8                	mov    eax,ebx
c0017eca:	c1 e0 10             	shl    eax,0x10
c0017ecd:	09 c8                	or     eax,ecx
c0017ecf:	eb 05                	jmp    c0017ed6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017ed1:	66 31 c0             	xor    ax,ax
c0017ed4:	09 d8                	or     eax,ebx
c0017ed6:	ef                   	out    dx,eax
c0017ed7:	83 c4 0c             	add    esp,0xc
c0017eda:	5b                   	pop    ebx
c0017edb:	5e                   	pop    esi
c0017edc:	5f                   	pop    edi
c0017edd:	5d                   	pop    ebp
c0017ede:	c3                   	ret    
c0017edf:	c7 44 24 20 57 e7 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e757
c0017ee7:	83 c4 0c             	add    esp,0xc
c0017eea:	5b                   	pop    ebx
c0017eeb:	5e                   	pop    esi
c0017eec:	5f                   	pop    edi
c0017eed:	5d                   	pop    ebp
c0017eee:	e9 34 76 ff ff       	jmp    c000f527 <Krnl::panic(char const*)>
c0017ef3:	90                   	nop

c0017ef4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0017ef4:	55                   	push   ebp
c0017ef5:	57                   	push   edi
c0017ef6:	56                   	push   esi
c0017ef7:	53                   	push   ebx
c0017ef8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017efe:	80 3d 4c 33 02 c0 00 	cmp    BYTE PTR ds:0xc002334c,0x0
c0017f05:	0f 85 84 00 00 00    	jne    c0017f8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	68 14 01 00 00       	push   0x114
c0017f13:	e8 fd ec fe ff       	call   c0006c15 <malloc>
c0017f18:	83 c4 0c             	add    esp,0xc
c0017f1b:	89 c3                	mov    ebx,eax
c0017f1d:	ff 35 90 29 02 c0    	push   DWORD PTR ds:0xc0022990
c0017f23:	68 5d e7 01 c0       	push   0xc001e75d
c0017f28:	50                   	push   eax
c0017f29:	e8 20 20 ff ff       	call   c0009f4e <File::File(char const*, Process*)>
c0017f2e:	5a                   	pop    edx
c0017f2f:	59                   	pop    ecx
c0017f30:	6a 01                	push   0x1
c0017f32:	53                   	push   ebx
c0017f33:	e8 d6 20 ff ff       	call   c000a00e <File::open(FileOpenMode)>
c0017f38:	83 c4 0c             	add    esp,0xc
c0017f3b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0017f3f:	50                   	push   eax
c0017f40:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017f44:	50                   	push   eax
c0017f45:	53                   	push   ebx
c0017f46:	e8 6f 23 ff ff       	call   c000a2ba <File::stat(unsigned long long*, bool*)>
c0017f4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f4f:	40                   	inc    eax
c0017f50:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f53:	e8 bd ec fe ff       	call   c0006c15 <malloc>
c0017f58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f5c:	a3 48 33 02 c0       	mov    ds:0xc0023348,eax
c0017f61:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0017f65:	5e                   	pop    esi
c0017f66:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017f68:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017f6c:	51                   	push   ecx
c0017f6d:	50                   	push   eax
c0017f6e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017f72:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017f76:	53                   	push   ebx
c0017f77:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017f7a:	83 c4 14             	add    esp,0x14
c0017f7d:	53                   	push   ebx
c0017f7e:	e8 e9 20 ff ff       	call   c000a06c <File::close()>
c0017f83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f87:	83 c4 10             	add    esp,0x10
c0017f8a:	a3 44 33 02 c0       	mov    ds:0xc0023344,eax
c0017f8f:	a1 44 33 02 c0       	mov    eax,ds:0xc0023344
c0017f94:	8b 15 48 33 02 c0    	mov    edx,DWORD PTR ds:0xc0023348
c0017f9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f9d:	31 ff                	xor    edi,edi
c0017f9f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0017fa7:	31 f6                	xor    esi,esi
c0017fa9:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0017fae:	31 db                	xor    ebx,ebx
c0017fb0:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0017fb8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017fbd:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0017fc4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0017fc8:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0017fcf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017fd3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0017fd6:	0f 8e 6b 01 00 00    	jle    c0018147 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0017fdc:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0017fdf:	d4 40                	aam    0x40
c0017fe1:	d5 39                	aad    0x39
c0017fe3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fe7:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0017feb:	d4 40                	aam    0x40
c0017fed:	d5 39                	aad    0x39
c0017fef:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017ff3:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0017ff7:	d4 40                	aam    0x40
c0017ff9:	d5 39                	aad    0x39
c0017ffb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017fff:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018003:	d4 40                	aam    0x40
c0018005:	d5 39                	aad    0x39
c0018007:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001800b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001800f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018013:	3c 56                	cmp    al,0x56
c0018015:	74 45                	je     c001805c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018017:	d4 40                	aam    0x40
c0018019:	d5 39                	aad    0x39
c001801b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001801e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018022:	0f b6 c9             	movzx  ecx,cl
c0018025:	c1 e1 04             	shl    ecx,0x4
c0018028:	d4 40                	aam    0x40
c001802a:	d5 39                	aad    0x39
c001802c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001802f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018033:	0f b6 db             	movzx  ebx,bl
c0018036:	09 cb                	or     ebx,ecx
c0018038:	c1 e3 04             	shl    ebx,0x4
c001803b:	d4 40                	aam    0x40
c001803d:	d5 39                	aad    0x39
c001803f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018042:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018046:	0f b6 c9             	movzx  ecx,cl
c0018049:	09 cb                	or     ebx,ecx
c001804b:	c1 e3 04             	shl    ebx,0x4
c001804e:	89 d9                	mov    ecx,ebx
c0018050:	d4 40                	aam    0x40
c0018052:	d5 39                	aad    0x39
c0018054:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018057:	0f b6 db             	movzx  ebx,bl
c001805a:	09 cb                	or     ebx,ecx
c001805c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018060:	80 f9 44             	cmp    cl,0x44
c0018063:	74 47                	je     c00180ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018065:	88 c8                	mov    al,cl
c0018067:	d4 40                	aam    0x40
c0018069:	d5 39                	aad    0x39
c001806b:	83 e8 30             	sub    eax,0x30
c001806e:	0f b6 e8             	movzx  ebp,al
c0018071:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018075:	c1 e5 04             	shl    ebp,0x4
c0018078:	d4 40                	aam    0x40
c001807a:	d5 39                	aad    0x39
c001807c:	83 e8 30             	sub    eax,0x30
c001807f:	0f b6 f0             	movzx  esi,al
c0018082:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018086:	09 ee                	or     esi,ebp
c0018088:	c1 e6 04             	shl    esi,0x4
c001808b:	d4 40                	aam    0x40
c001808d:	d5 39                	aad    0x39
c001808f:	83 e8 30             	sub    eax,0x30
c0018092:	0f b6 e8             	movzx  ebp,al
c0018095:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018099:	09 ee                	or     esi,ebp
c001809b:	c1 e6 04             	shl    esi,0x4
c001809e:	89 f5                	mov    ebp,esi
c00180a0:	d4 40                	aam    0x40
c00180a2:	d5 39                	aad    0x39
c00180a4:	83 e8 30             	sub    eax,0x30
c00180a7:	0f b6 f0             	movzx  esi,al
c00180aa:	09 ee                	or     esi,ebp
c00180ac:	83 c7 10             	add    edi,0x10
c00180af:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00180b3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00180b6:	3c 0a                	cmp    al,0xa
c00180b8:	74 09                	je     c00180c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00180ba:	45                   	inc    ebp
c00180bb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00180be:	75 16                	jne    c00180d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00180c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00180c3:	3c 0a                	cmp    al,0xa
c00180c5:	0f 94 c0             	sete   al
c00180c8:	0f b6 c0             	movzx  eax,al
c00180cb:	01 c7                	add    edi,eax
c00180cd:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00180d2:	75 0c                	jne    c00180e0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00180d4:	eb 15                	jmp    c00180eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00180d6:	47                   	inc    edi
c00180d7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00180da:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00180de:	eb d3                	jmp    c00180b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c00180e0:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00180e5:	0f 85 e8 fe ff ff    	jne    c0017fd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00180eb:	80 f9 44             	cmp    cl,0x44
c00180ee:	74 0b                	je     c00180fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c00180f0:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00180f5:	0f 85 d8 fe ff ff    	jne    c0017fd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00180fb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00180ff:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018103:	c1 e1 04             	shl    ecx,0x4
c0018106:	83 e8 30             	sub    eax,0x30
c0018109:	09 c8                	or     eax,ecx
c001810b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001810f:	0f 85 be fe ff ff    	jne    c0017fd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018115:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018119:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001811d:	c1 e1 04             	shl    ecx,0x4
c0018120:	83 e8 30             	sub    eax,0x30
c0018123:	09 c8                	or     eax,ecx
c0018125:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018129:	0f 85 a4 fe ff ff    	jne    c0017fd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001812f:	50                   	push   eax
c0018130:	50                   	push   eax
c0018131:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018135:	50                   	push   eax
c0018136:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001813d:	e8 de 84 fe ff       	call   c0000620 <strcpy>
c0018142:	83 c4 10             	add    esp,0x10
c0018145:	eb 15                	jmp    c001815c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018147:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001814e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018159:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001815c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018163:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018169:	5b                   	pop    ebx
c001816a:	5e                   	pop    esi
c001816b:	5f                   	pop    edi
c001816c:	5d                   	pop    ebp
c001816d:	c3                   	ret    

c001816e <PCI::checkBus(unsigned char)>:
c001816e:	56                   	push   esi
c001816f:	53                   	push   ebx
c0018170:	31 f6                	xor    esi,esi
c0018172:	51                   	push   ecx
c0018173:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018177:	0f b6 c3             	movzx  eax,bl
c001817a:	52                   	push   edx
c001817b:	56                   	push   esi
c001817c:	46                   	inc    esi
c001817d:	50                   	push   eax
c001817e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018182:	e8 f3 02 00 00       	call   c001847a <PCI::checkDevice(unsigned char, unsigned char)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	83 fe 20             	cmp    esi,0x20
c001818d:	75 e8                	jne    c0018177 <PCI::checkBus(unsigned char)+0x9>
c001818f:	58                   	pop    eax
c0018190:	5b                   	pop    ebx
c0018191:	5e                   	pop    esi
c0018192:	c3                   	ret    
c0018193:	90                   	nop

c0018194 <PCI::foundDevice(PCIDeviceInfo)>:
c0018194:	55                   	push   ebp
c0018195:	57                   	push   edi
c0018196:	56                   	push   esi
c0018197:	53                   	push   ebx
c0018198:	83 ec 1c             	sub    esp,0x1c
c001819b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001819f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00181a5:	0f 84 52 01 00 00    	je     c00182fd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00181ab:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00181af:	66 81 f9 06 04       	cmp    cx,0x406
c00181b4:	75 2c                	jne    c00181e2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00181b6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00181bb:	50                   	push   eax
c00181bc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00181c1:	50                   	push   eax
c00181c2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00181c7:	50                   	push   eax
c00181c8:	56                   	push   esi
c00181c9:	e8 b2 fb ff ff       	call   c0017d80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00181ce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00181d2:	0f b6 c0             	movzx  eax,al
c00181d5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00181d9:	83 c4 2c             	add    esp,0x2c
c00181dc:	5b                   	pop    ebx
c00181dd:	5e                   	pop    esi
c00181de:	5f                   	pop    edi
c00181df:	5d                   	pop    ebp
c00181e0:	eb 8c                	jmp    c001816e <PCI::checkBus(unsigned char)>
c00181e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00181e6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00181ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00181f0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00181f4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00181f8:	88 d3                	mov    bl,dl
c00181fa:	85 c0                	test   eax,eax
c00181fc:	74 33                	je     c0018231 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00181fe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018201:	85 d2                	test   edx,edx
c0018203:	74 28                	je     c001822d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018205:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001820b:	31 ef                	xor    edi,ebp
c001820d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018213:	75 18                	jne    c001822d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018215:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018219:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001821f:	75 0c                	jne    c001822d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018221:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018227:	0f 84 d0 00 00 00    	je     c00182fd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001822d:	8b 00                	mov    eax,DWORD PTR [eax]
c001822f:	eb c9                	jmp    c00181fa <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018231:	66 81 f9 01 06       	cmp    cx,0x601
c0018236:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001823a:	75 19                	jne    c0018255 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001823c:	83 ec 0c             	sub    esp,0xc
c001823f:	68 64 01 00 00       	push   0x164
c0018244:	e8 cc e9 fe ff       	call   c0006c15 <malloc>
c0018249:	89 c5                	mov    ebp,eax
c001824b:	89 04 24             	mov    DWORD PTR [esp],eax
c001824e:	e8 47 0e 00 00       	call   c001909a <SATABus::SATABus()>
c0018253:	eb 1e                	jmp    c0018273 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018255:	66 81 f9 01 01       	cmp    cx,0x101
c001825a:	75 60                	jne    c00182bc <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001825c:	83 ec 0c             	sub    esp,0xc
c001825f:	68 70 02 00 00       	push   0x270
c0018264:	e8 ac e9 fe ff       	call   c0006c15 <malloc>
c0018269:	89 c5                	mov    ebp,eax
c001826b:	89 04 24             	mov    DWORD PTR [esp],eax
c001826e:	e8 cb 02 00 00       	call   c001853e <IDE::IDE()>
c0018273:	58                   	pop    eax
c0018274:	5a                   	pop    edx
c0018275:	55                   	push   ebp
c0018276:	56                   	push   esi
c0018277:	e8 9c 2b ff ff       	call   c000ae18 <Device::addChild(Device*)>
c001827c:	83 ec 1c             	sub    esp,0x1c
c001827f:	b9 09 00 00 00       	mov    ecx,0x9
c0018284:	fc                   	cld    
c0018285:	89 e7                	mov    edi,esp
c0018287:	89 de                	mov    esi,ebx
c0018289:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001828b:	55                   	push   ebp
c001828c:	e8 cd 2a ff ff       	call   c000ad5e <Device::preOpenPCI(PCIDeviceInfo)>
c0018291:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018294:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018298:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00182a0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00182a8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00182b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00182b3:	83 c4 4c             	add    esp,0x4c
c00182b6:	5b                   	pop    ebx
c00182b7:	5e                   	pop    esi
c00182b8:	5f                   	pop    edi
c00182b9:	5d                   	pop    ebp
c00182ba:	ff e0                	jmp    eax
c00182bc:	83 ec 0c             	sub    esp,0xc
c00182bf:	68 58 01 00 00       	push   0x158
c00182c4:	e8 4c e9 fe ff       	call   c0006c15 <malloc>
c00182c9:	89 c5                	mov    ebp,eax
c00182cb:	58                   	pop    eax
c00182cc:	5a                   	pop    edx
c00182cd:	68 76 e7 01 c0       	push   0xc001e776
c00182d2:	55                   	push   ebp
c00182d3:	e8 de 2d ff ff       	call   c000b0b6 <DriverlessDevice::DriverlessDevice(char const*)>
c00182d8:	59                   	pop    ecx
c00182d9:	5f                   	pop    edi
c00182da:	55                   	push   ebp
c00182db:	56                   	push   esi
c00182dc:	e8 37 2b ff ff       	call   c000ae18 <Device::addChild(Device*)>
c00182e1:	b9 09 00 00 00       	mov    ecx,0x9
c00182e6:	fc                   	cld    
c00182e7:	89 df                	mov    edi,ebx
c00182e9:	89 de                	mov    esi,ebx
c00182eb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00182ed:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00182f1:	83 c4 2c             	add    esp,0x2c
c00182f4:	5b                   	pop    ebx
c00182f5:	5e                   	pop    esi
c00182f6:	5f                   	pop    edi
c00182f7:	5d                   	pop    ebp
c00182f8:	e9 61 2a ff ff       	jmp    c000ad5e <Device::preOpenPCI(PCIDeviceInfo)>
c00182fd:	83 c4 1c             	add    esp,0x1c
c0018300:	5b                   	pop    ebx
c0018301:	5e                   	pop    esi
c0018302:	5f                   	pop    edi
c0018303:	5d                   	pop    ebp
c0018304:	c3                   	ret    
c0018305:	90                   	nop

c0018306 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018306:	55                   	push   ebp
c0018307:	57                   	push   edi
c0018308:	56                   	push   esi
c0018309:	53                   	push   ebx
c001830a:	83 ec 68             	sub    esp,0x68
c001830d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018311:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018318:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001831c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018323:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018328:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001832c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018333:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018338:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001833c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018341:	6a 0c                	push   0xc
c0018343:	57                   	push   edi
c0018344:	53                   	push   ebx
c0018345:	56                   	push   esi
c0018346:	55                   	push   ebp
c0018347:	e8 86 f8 ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001834c:	83 c4 20             	add    esp,0x20
c001834f:	57                   	push   edi
c0018350:	53                   	push   ebx
c0018351:	56                   	push   esi
c0018352:	55                   	push   ebp
c0018353:	e8 6e f9 ff ff       	call   c0017cc6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018358:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001835d:	57                   	push   edi
c001835e:	53                   	push   ebx
c001835f:	56                   	push   esi
c0018360:	55                   	push   ebp
c0018361:	e8 f6 f9 ff ff       	call   c0017d5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018366:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001836a:	83 c4 14             	add    esp,0x14
c001836d:	6a 3c                	push   0x3c
c001836f:	57                   	push   edi
c0018370:	53                   	push   ebx
c0018371:	56                   	push   esi
c0018372:	55                   	push   ebp
c0018373:	e8 5a f8 ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018378:	0f b6 c4             	movzx  eax,ah
c001837b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001837f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018383:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018387:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c001838c:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [eax+0x1e4]
c0018392:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018398:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001839c:	83 c4 20             	add    esp,0x20
c001839f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00183a4:	74 30                	je     c00183d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00183a6:	31 c0                	xor    eax,eax
c00183a8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00183ac:	7e 28                	jle    c00183d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00183ae:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00183b6:	39 cb                	cmp    ebx,ecx
c00183b8:	75 19                	jne    c00183d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00183ba:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00183c2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00183c6:	75 0b                	jne    c00183d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00183c8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c00183cf:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c00183d3:	40                   	inc    eax
c00183d4:	eb d2                	jmp    c00183a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00183d6:	31 d2                	xor    edx,edx
c00183d8:	83 ec 0c             	sub    esp,0xc
c00183db:	57                   	push   edi
c00183dc:	53                   	push   ebx
c00183dd:	56                   	push   esi
c00183de:	52                   	push   edx
c00183df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00183e3:	55                   	push   ebp
c00183e4:	e8 bf f9 ff ff       	call   c0017da8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183ed:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00183f1:	42                   	inc    edx
c00183f2:	83 c4 20             	add    esp,0x20
c00183f5:	83 fa 06             	cmp    edx,0x6
c00183f8:	75 de                	jne    c00183d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c00183fa:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00183ff:	83 ec 0c             	sub    esp,0xc
c0018402:	86 e0                	xchg   al,ah
c0018404:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018409:	6a 02                	push   0x2
c001840b:	57                   	push   edi
c001840c:	53                   	push   ebx
c001840d:	56                   	push   esi
c001840e:	55                   	push   ebp
c001840f:	e8 be f7 ff ff       	call   c0017bd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018414:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018419:	83 c4 20             	add    esp,0x20
c001841c:	57                   	push   edi
c001841d:	53                   	push   ebx
c001841e:	56                   	push   esi
c001841f:	55                   	push   ebp
c0018420:	e8 eb f8 ff ff       	call   c0017d10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018425:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018429:	57                   	push   edi
c001842a:	53                   	push   ebx
c001842b:	56                   	push   esi
c001842c:	55                   	push   ebp
c001842d:	e8 48 f8 ff ff       	call   c0017c7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018432:	b9 09 00 00 00       	mov    ecx,0x9
c0018437:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001843c:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018440:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018444:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018448:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001844c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018450:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018454:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018458:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001845c:	83 ec 0c             	sub    esp,0xc
c001845f:	fc                   	cld    
c0018460:	89 e7                	mov    edi,esp
c0018462:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018466:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018468:	55                   	push   ebp
c0018469:	e8 26 fd ff ff       	call   c0018194 <PCI::foundDevice(PCIDeviceInfo)>
c001846e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018474:	5b                   	pop    ebx
c0018475:	5e                   	pop    esi
c0018476:	5f                   	pop    edi
c0018477:	5d                   	pop    ebp
c0018478:	c3                   	ret    
c0018479:	90                   	nop

c001847a <PCI::checkDevice(unsigned char, unsigned char)>:
c001847a:	55                   	push   ebp
c001847b:	57                   	push   edi
c001847c:	56                   	push   esi
c001847d:	53                   	push   ebx
c001847e:	83 ec 0c             	sub    esp,0xc
c0018481:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018485:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001848a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001848f:	6a 00                	push   0x0
c0018491:	56                   	push   esi
c0018492:	57                   	push   edi
c0018493:	55                   	push   ebp
c0018494:	e8 e1 f7 ff ff       	call   c0017c7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018499:	6a 00                	push   0x0
c001849b:	56                   	push   esi
c001849c:	57                   	push   edi
c001849d:	55                   	push   ebp
c001849e:	e8 63 fe ff ff       	call   c0018306 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00184a3:	83 c4 20             	add    esp,0x20
c00184a6:	6a 00                	push   0x0
c00184a8:	56                   	push   esi
c00184a9:	57                   	push   edi
c00184aa:	55                   	push   ebp
c00184ab:	e8 ee f7 ff ff       	call   c0017c9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00184b0:	83 c4 10             	add    esp,0x10
c00184b3:	84 c0                	test   al,al
c00184b5:	79 27                	jns    c00184de <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00184b7:	bb 01 00 00 00       	mov    ebx,0x1
c00184bc:	53                   	push   ebx
c00184bd:	56                   	push   esi
c00184be:	57                   	push   edi
c00184bf:	55                   	push   ebp
c00184c0:	e8 b5 f7 ff ff       	call   c0017c7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00184c5:	83 c4 10             	add    esp,0x10
c00184c8:	66 40                	inc    ax
c00184ca:	74 0c                	je     c00184d8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00184cc:	53                   	push   ebx
c00184cd:	56                   	push   esi
c00184ce:	57                   	push   edi
c00184cf:	55                   	push   ebp
c00184d0:	e8 31 fe ff ff       	call   c0018306 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00184d5:	83 c4 10             	add    esp,0x10
c00184d8:	43                   	inc    ebx
c00184d9:	83 fb 08             	cmp    ebx,0x8
c00184dc:	75 de                	jne    c00184bc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00184de:	83 c4 0c             	add    esp,0xc
c00184e1:	5b                   	pop    ebx
c00184e2:	5e                   	pop    esi
c00184e3:	5f                   	pop    edi
c00184e4:	5d                   	pop    ebp
c00184e5:	c3                   	ret    

c00184e6 <PCI::detect()>:
c00184e6:	56                   	push   esi
c00184e7:	53                   	push   ebx
c00184e8:	53                   	push   ebx
c00184e9:	31 db                	xor    ebx,ebx
c00184eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184ef:	6a 00                	push   0x0
c00184f1:	6a 00                	push   0x0
c00184f3:	6a 00                	push   0x0
c00184f5:	56                   	push   esi
c00184f6:	e8 a3 f7 ff ff       	call   c0017c9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00184fb:	83 c4 10             	add    esp,0x10
c00184fe:	a8 80                	test   al,0x80
c0018500:	75 21                	jne    c0018523 <PCI::detect()+0x3d>
c0018502:	51                   	push   ecx
c0018503:	51                   	push   ecx
c0018504:	6a 00                	push   0x0
c0018506:	56                   	push   esi
c0018507:	e8 62 fc ff ff       	call   c001816e <PCI::checkBus(unsigned char)>
c001850c:	83 c4 10             	add    esp,0x10
c001850f:	eb 24                	jmp    c0018535 <PCI::detect()+0x4f>
c0018511:	52                   	push   edx
c0018512:	52                   	push   edx
c0018513:	53                   	push   ebx
c0018514:	43                   	inc    ebx
c0018515:	56                   	push   esi
c0018516:	e8 53 fc ff ff       	call   c001816e <PCI::checkBus(unsigned char)>
c001851b:	83 c4 10             	add    esp,0x10
c001851e:	83 fb 08             	cmp    ebx,0x8
c0018521:	74 12                	je     c0018535 <PCI::detect()+0x4f>
c0018523:	53                   	push   ebx
c0018524:	6a 00                	push   0x0
c0018526:	6a 00                	push   0x0
c0018528:	56                   	push   esi
c0018529:	e8 4c f7 ff ff       	call   c0017c7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001852e:	83 c4 10             	add    esp,0x10
c0018531:	66 40                	inc    ax
c0018533:	74 dc                	je     c0018511 <PCI::detect()+0x2b>
c0018535:	58                   	pop    eax
c0018536:	5b                   	pop    ebx
c0018537:	5e                   	pop    esi
c0018538:	c3                   	ret    
c0018539:	90                   	nop

c001853a <IDE::close(int, int, void*)>:
c001853a:	83 c8 ff             	or     eax,0xffffffff
c001853d:	c3                   	ret    

c001853e <IDE::IDE()>:
c001853e:	83 ec 0c             	sub    esp,0xc
c0018541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018545:	83 ec 08             	sub    esp,0x8
c0018548:	68 bc e7 01 c0       	push   0xc001e7bc
c001854d:	50                   	push   eax
c001854e:	e8 09 2c ff ff       	call   c000b15c <HardDiskController::HardDiskController(char const*)>
c0018553:	83 c4 10             	add    esp,0x10
c0018556:	ba 4c e8 01 c0       	mov    edx,0xc001e84c
c001855b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001855f:	89 10                	mov    DWORD PTR [eax],edx
c0018561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018565:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001856c:	90                   	nop
c001856d:	83 c4 0c             	add    esp,0xc
c0018570:	c3                   	ret    
c0018571:	90                   	nop

c0018572 <IDE::prepareInterrupt(unsigned char)>:
c0018572:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018577:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001857b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018583:	c3                   	ret    

c0018584 <selectDrive(unsigned char, unsigned char)>:
c0018584:	c3                   	ret    
c0018585:	90                   	nop

c0018586 <IDE::getBase(unsigned char)>:
c0018586:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001858b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001858f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018597:	c3                   	ret    

c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018598:	55                   	push   ebp
c0018599:	57                   	push   edi
c001859a:	56                   	push   esi
c001859b:	53                   	push   ebx
c001859c:	83 ec 1c             	sub    esp,0x1c
c001859f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00185a3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00185a7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00185aa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00185b2:	80 f9 03             	cmp    cl,0x3
c00185b5:	77 51                	ja     c0018608 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00185b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00185bb:	0f b6 f2             	movzx  esi,dl
c00185be:	0f b6 db             	movzx  ebx,bl
c00185c1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00185c4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00185c8:	83 ca 80             	or     edx,0xffffff80
c00185cb:	0f b6 d2             	movzx  edx,dl
c00185ce:	52                   	push   edx
c00185cf:	6a 0c                	push   0xc
c00185d1:	56                   	push   esi
c00185d2:	57                   	push   edi
c00185d3:	e8 c0 ff ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00185d8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00185dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00185e1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00185e5:	ee                   	out    dx,al
c00185e6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00185eb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00185ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00185f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00185f7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00185ff:	83 c4 2c             	add    esp,0x2c
c0018602:	5b                   	pop    ebx
c0018603:	5e                   	pop    esi
c0018604:	5f                   	pop    edi
c0018605:	5d                   	pop    ebp
c0018606:	eb 90                	jmp    c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018608:	80 fb 07             	cmp    bl,0x7
c001860b:	77 12                	ja     c001861f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001860d:	0f b6 d2             	movzx  edx,dl
c0018610:	0f b6 db             	movzx  ebx,bl
c0018613:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001861b:	89 da                	mov    edx,ebx
c001861d:	eb 2f                	jmp    c001864e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001861f:	80 fb 0d             	cmp    bl,0xd
c0018622:	77 13                	ja     c0018637 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018624:	0f b6 d2             	movzx  edx,dl
c0018627:	0f b6 db             	movzx  ebx,bl
c001862a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018631:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018635:	eb 17                	jmp    c001864e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018637:	80 fb 15             	cmp    bl,0x15
c001863a:	77 13                	ja     c001864f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001863c:	0f b6 d2             	movzx  edx,dl
c001863f:	0f b6 db             	movzx  ebx,bl
c0018642:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001864a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001864e:	ee                   	out    dx,al
c001864f:	83 c4 1c             	add    esp,0x1c
c0018652:	5b                   	pop    ebx
c0018653:	5e                   	pop    esi
c0018654:	5f                   	pop    edi
c0018655:	5d                   	pop    ebp
c0018656:	c3                   	ret    
c0018657:	90                   	nop

c0018658 <IDE::read(unsigned char, unsigned char)>:
c0018658:	55                   	push   ebp
c0018659:	57                   	push   edi
c001865a:	56                   	push   esi
c001865b:	53                   	push   ebx
c001865c:	83 ec 1c             	sub    esp,0x1c
c001865f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018663:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018667:	8d 43 f8             	lea    eax,[ebx-0x8]
c001866a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001866e:	3c 03                	cmp    al,0x3
c0018670:	77 43                	ja     c00186b5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018672:	0f b6 f2             	movzx  esi,dl
c0018675:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018678:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001867c:	83 c8 80             	or     eax,0xffffff80
c001867f:	0f b6 c0             	movzx  eax,al
c0018682:	50                   	push   eax
c0018683:	6a 0c                	push   0xc
c0018685:	56                   	push   esi
c0018686:	57                   	push   edi
c0018687:	e8 0c ff ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001868c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018691:	0f b6 c3             	movzx  eax,bl
c0018694:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018698:	ec                   	in     al,dx
c0018699:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001869d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00186a2:	52                   	push   edx
c00186a3:	6a 0c                	push   0xc
c00186a5:	56                   	push   esi
c00186a6:	57                   	push   edi
c00186a7:	e8 ec fe ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00186ac:	83 c4 20             	add    esp,0x20
c00186af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00186b3:	eb 49                	jmp    c00186fe <IDE::read(unsigned char, unsigned char)+0xa6>
c00186b5:	80 fb 07             	cmp    bl,0x7
c00186b8:	77 12                	ja     c00186cc <IDE::read(unsigned char, unsigned char)+0x74>
c00186ba:	0f b6 d2             	movzx  edx,dl
c00186bd:	0f b6 c3             	movzx  eax,bl
c00186c0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00186c8:	89 c2                	mov    edx,eax
c00186ca:	eb 31                	jmp    c00186fd <IDE::read(unsigned char, unsigned char)+0xa5>
c00186cc:	80 fb 0d             	cmp    bl,0xd
c00186cf:	77 13                	ja     c00186e4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00186d1:	0f b6 d2             	movzx  edx,dl
c00186d4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00186db:	0f b6 d3             	movzx  edx,bl
c00186de:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00186e2:	eb 19                	jmp    c00186fd <IDE::read(unsigned char, unsigned char)+0xa5>
c00186e4:	31 c0                	xor    eax,eax
c00186e6:	80 fb 15             	cmp    bl,0x15
c00186e9:	77 13                	ja     c00186fe <IDE::read(unsigned char, unsigned char)+0xa6>
c00186eb:	0f b6 d2             	movzx  edx,dl
c00186ee:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00186f6:	0f b6 d3             	movzx  edx,bl
c00186f9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00186fd:	ec                   	in     al,dx
c00186fe:	83 c4 1c             	add    esp,0x1c
c0018701:	5b                   	pop    ebx
c0018702:	5e                   	pop    esi
c0018703:	5f                   	pop    edi
c0018704:	5d                   	pop    ebp
c0018705:	c3                   	ret    

c0018706 <IDE::waitInterrupt(unsigned char)>:
c0018706:	57                   	push   edi
c0018707:	56                   	push   esi
c0018708:	31 f6                	xor    esi,esi
c001870a:	53                   	push   ebx
c001870b:	83 ec 10             	sub    esp,0x10
c001870e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018712:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018716:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001871a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001871f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018726:	84 db                	test   bl,bl
c0018728:	75 33                	jne    c001875d <IDE::waitInterrupt(unsigned char)+0x57>
c001872a:	52                   	push   edx
c001872b:	6a 0c                	push   0xc
c001872d:	50                   	push   eax
c001872e:	57                   	push   edi
c001872f:	e8 24 ff ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018734:	83 c4 10             	add    esp,0x10
c0018737:	a8 01                	test   al,0x1
c0018739:	75 2a                	jne    c0018765 <IDE::waitInterrupt(unsigned char)+0x5f>
c001873b:	f7 c6 04 00 00 00    	test   esi,0x4
c0018741:	75 12                	jne    c0018755 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018743:	83 fe 32             	cmp    esi,0x32
c0018746:	7e 0d                	jle    c0018755 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018748:	83 ec 0c             	sub    esp,0xc
c001874b:	6a 64                	push   0x64
c001874d:	e8 4a a5 ff ff       	call   c0012c9c <milliTenthSleep(unsigned int)>
c0018752:	83 c4 10             	add    esp,0x10
c0018755:	83 fe 3c             	cmp    esi,0x3c
c0018758:	74 0b                	je     c0018765 <IDE::waitInterrupt(unsigned char)+0x5f>
c001875a:	46                   	inc    esi
c001875b:	eb bd                	jmp    c001871a <IDE::waitInterrupt(unsigned char)+0x14>
c001875d:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018765:	83 c4 10             	add    esp,0x10
c0018768:	88 d8                	mov    al,bl
c001876a:	5b                   	pop    ebx
c001876b:	5e                   	pop    esi
c001876c:	5f                   	pop    edi
c001876d:	c3                   	ret    

c001876e <ideChannel0IRQHandler(regs*, void*)>:
c001876e:	83 ec 10             	sub    esp,0x10
c0018771:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018775:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001877c:	6a 07                	push   0x7
c001877e:	6a 00                	push   0x0
c0018780:	50                   	push   eax
c0018781:	e8 d2 fe ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018786:	83 c4 1c             	add    esp,0x1c
c0018789:	c3                   	ret    

c001878a <ideChannel1IRQHandler(regs*, void*)>:
c001878a:	83 ec 10             	sub    esp,0x10
c001878d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018791:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018798:	6a 07                	push   0x7
c001879a:	6a 01                	push   0x1
c001879c:	50                   	push   eax
c001879d:	e8 b6 fe ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c00187a2:	83 c4 1c             	add    esp,0x1c
c00187a5:	c3                   	ret    

c00187a6 <IDE::enableIRQs(unsigned char, bool)>:
c00187a6:	57                   	push   edi
c00187a7:	56                   	push   esi
c00187a8:	be 04 00 00 00       	mov    esi,0x4
c00187ad:	53                   	push   ebx
c00187ae:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00187b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00187b7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00187bc:	0f 94 c0             	sete   al
c00187bf:	01 c0                	add    eax,eax
c00187c1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00187c8:	0f b6 c0             	movzx  eax,al
c00187cb:	50                   	push   eax
c00187cc:	6a 0c                	push   0xc
c00187ce:	57                   	push   edi
c00187cf:	53                   	push   ebx
c00187d0:	e8 c3 fd ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00187d5:	83 c4 10             	add    esp,0x10
c00187d8:	50                   	push   eax
c00187d9:	6a 0c                	push   0xc
c00187db:	57                   	push   edi
c00187dc:	53                   	push   ebx
c00187dd:	e8 76 fe ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c00187e2:	83 c4 10             	add    esp,0x10
c00187e5:	4e                   	dec    esi
c00187e6:	75 f0                	jne    c00187d8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00187e8:	5b                   	pop    ebx
c00187e9:	5e                   	pop    esi
c00187ea:	5f                   	pop    edi
c00187eb:	c3                   	ret    

c00187ec <IDE::open(int, int, void*)>:
c00187ec:	55                   	push   ebp
c00187ed:	57                   	push   edi
c00187ee:	56                   	push   esi
c00187ef:	53                   	push   ebx
c00187f0:	83 ec 1c             	sub    esp,0x1c
c00187f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00187f7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018800:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018809:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018810:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018817:	0f 85 b0 02 00 00    	jne    c0018acd <IDE::open(int, int, void*)+0x2e1>
c001881d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018823:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018827:	83 e0 7f             	and    eax,0x7f
c001882a:	3c 05                	cmp    al,0x5
c001882c:	74 04                	je     c0018832 <IDE::open(int, int, void*)+0x46>
c001882e:	3c 0f                	cmp    al,0xf
c0018830:	75 32                	jne    c0018864 <IDE::open(int, int, void*)+0x78>
c0018832:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018838:	83 e0 fc             	and    eax,0xfffffffc
c001883b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018842:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018848:	83 e0 fc             	and    eax,0xfffffffc
c001884b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018852:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018858:	83 e0 fc             	and    eax,0xfffffffc
c001885b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018862:	eb 14                	jmp    c0018878 <IDE::open(int, int, void*)+0x8c>
c0018864:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001886e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018878:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001887f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018886:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001888a:	89 c6                	mov    esi,eax
c001888c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018891:	c1 e6 10             	shl    esi,0x10
c0018894:	89 e8                	mov    eax,ebp
c0018896:	89 fa                	mov    edx,edi
c0018898:	c1 e0 0b             	shl    eax,0xb
c001889b:	09 f0                	or     eax,esi
c001889d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00188a4:	c1 e6 08             	shl    esi,0x8
c00188a7:	09 c6                	or     esi,eax
c00188a9:	89 f0                	mov    eax,esi
c00188ab:	0d 08 00 00 80       	or     eax,0x80000008
c00188b0:	ef                   	out    dx,eax
c00188b1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00188b6:	89 ca                	mov    edx,ecx
c00188b8:	ed                   	in     eax,dx
c00188b9:	c1 e8 10             	shr    eax,0x10
c00188bc:	3d ff ff 00 00       	cmp    eax,0xffff
c00188c1:	0f 84 f5 00 00 00    	je     c00189bc <IDE::open(int, int, void*)+0x1d0>
c00188c7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00188cd:	89 fa                	mov    edx,edi
c00188cf:	89 f0                	mov    eax,esi
c00188d1:	ef                   	out    dx,eax
c00188d2:	b0 fe                	mov    al,0xfe
c00188d4:	89 ca                	mov    edx,ecx
c00188d6:	ee                   	out    dx,al
c00188d7:	89 f0                	mov    eax,esi
c00188d9:	89 fa                	mov    edx,edi
c00188db:	ef                   	out    dx,eax
c00188dc:	89 ca                	mov    edx,ecx
c00188de:	ed                   	in     eax,dx
c00188df:	3c fe                	cmp    al,0xfe
c00188e1:	0f 85 a9 00 00 00    	jne    c0018990 <IDE::open(int, int, void*)+0x1a4>
c00188e7:	8b 15 88 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f488
c00188ed:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00188f4:	74 33                	je     c0018929 <IDE::open(int, int, void*)+0x13d>
c00188f6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00188fc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018900:	40                   	inc    eax
c0018901:	83 ec 0c             	sub    esp,0xc
c0018904:	0f b6 c0             	movzx  eax,al
c0018907:	50                   	push   eax
c0018908:	55                   	push   ebp
c0018909:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001890d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0018913:	51                   	push   ecx
c0018914:	e8 8b 52 ff ff       	call   c000dba4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018919:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001891e:	83 c4 1c             	add    esp,0x1c
c0018921:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018927:	eb 0a                	jmp    c0018933 <IDE::open(int, int, void*)+0x147>
c0018929:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018933:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001893a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018941:	c1 e1 10             	shl    ecx,0x10
c0018944:	c1 e0 08             	shl    eax,0x8
c0018947:	bf f8 0c 00 00       	mov    edi,0xcf8
c001894c:	09 c1                	or     ecx,eax
c001894e:	89 fa                	mov    edx,edi
c0018950:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018957:	c1 e0 0b             	shl    eax,0xb
c001895a:	09 c1                	or     ecx,eax
c001895c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018962:	89 c8                	mov    eax,ecx
c0018964:	ef                   	out    dx,eax
c0018965:	be fc 0c 00 00       	mov    esi,0xcfc
c001896a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018970:	89 f2                	mov    edx,esi
c0018972:	ee                   	out    dx,al
c0018973:	89 c8                	mov    eax,ecx
c0018975:	89 fa                	mov    edx,edi
c0018977:	ef                   	out    dx,eax
c0018978:	89 f2                	mov    edx,esi
c001897a:	ed                   	in     eax,dx
c001897b:	0f b6 c0             	movzx  eax,al
c001897e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018984:	74 46                	je     c00189cc <IDE::open(int, int, void*)+0x1e0>
c0018986:	83 ec 0c             	sub    esp,0xc
c0018989:	68 d4 e7 01 c0       	push   0xc001e7d4
c001898e:	eb 34                	jmp    c00189c4 <IDE::open(int, int, void*)+0x1d8>
c0018990:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018999:	75 17                	jne    c00189b2 <IDE::open(int, int, void*)+0x1c6>
c001899b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00189a0:	74 07                	je     c00189a9 <IDE::open(int, int, void*)+0x1bd>
c00189a2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00189a7:	75 09                	jne    c00189b2 <IDE::open(int, int, void*)+0x1c6>
c00189a9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00189b0:	eb 1a                	jmp    c00189cc <IDE::open(int, int, void*)+0x1e0>
c00189b2:	83 ec 0c             	sub    esp,0xc
c00189b5:	68 dc e7 01 c0       	push   0xc001e7dc
c00189ba:	eb 08                	jmp    c00189c4 <IDE::open(int, int, void*)+0x1d8>
c00189bc:	83 ec 0c             	sub    esp,0xc
c00189bf:	68 0d e8 01 c0       	push   0xc001e80d
c00189c4:	e8 5e 6b ff ff       	call   c000f527 <Krnl::panic(char const*)>
c00189c9:	83 c4 10             	add    esp,0x10
c00189cc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00189d3:	79 1a                	jns    c00189ef <IDE::open(int, int, void*)+0x203>
c00189d5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00189db:	83 e0 fc             	and    eax,0xfffffffc
c00189de:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00189e5:	83 c0 08             	add    eax,0x8
c00189e8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00189ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189f5:	89 c2                	mov    edx,eax
c00189f7:	83 e2 0f             	and    edx,0xf
c00189fa:	66 83 fa 08          	cmp    dx,0x8
c00189fe:	75 0a                	jne    c0018a0a <IDE::open(int, int, void*)+0x21e>
c0018a00:	83 e8 02             	sub    eax,0x2
c0018a03:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018a0a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018a10:	89 c2                	mov    edx,eax
c0018a12:	83 e2 0f             	and    edx,0xf
c0018a15:	66 83 fa 08          	cmp    dx,0x8
c0018a19:	75 0a                	jne    c0018a25 <IDE::open(int, int, void*)+0x239>
c0018a1b:	83 e8 02             	sub    eax,0x2
c0018a1e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018a25:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018a2c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0018a33:	89 d0                	mov    eax,edx
c0018a35:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018a38:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018a3c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0018a40:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018a43:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018a48:	0f b6 c9             	movzx  ecx,cl
c0018a4b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0018a52:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018a55:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018a59:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0018a5d:	8d 50 02             	lea    edx,[eax+0x2]
c0018a60:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018a65:	0f b6 d2             	movzx  edx,dl
c0018a68:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0018a6e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018a71:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018a75:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0018a79:	8d 48 03             	lea    ecx,[eax+0x3]
c0018a7c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018a81:	0f b6 c9             	movzx  ecx,cl
c0018a84:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0018a8a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018a8d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018a91:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0018a95:	8d 50 04             	lea    edx,[eax+0x4]
c0018a98:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0018a9e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018aa3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0018aaa:	66 85 f6             	test   si,si
c0018aad:	74 5b                	je     c0018b0a <IDE::open(int, int, void*)+0x31e>
c0018aaf:	0f b6 d2             	movzx  edx,dl
c0018ab2:	83 c0 05             	add    eax,0x5
c0018ab5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018ab8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018abc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0018ac0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018ac6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018acb:	eb 3d                	jmp    c0018b0a <IDE::open(int, int, void*)+0x31e>
c0018acd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0018ad3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018ada:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018ae1:	66 05 06 02          	add    ax,0x206
c0018ae5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018aec:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0018af3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018afa:	66 05 06 02          	add    ax,0x206
c0018afe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018b05:	e9 e5 fe ff ff       	jmp    c00189ef <IDE::open(int, int, void*)+0x203>
c0018b0a:	50                   	push   eax
c0018b0b:	50                   	push   eax
c0018b0c:	6a 00                	push   0x0
c0018b0e:	53                   	push   ebx
c0018b0f:	e8 5e fa ff ff       	call   c0018572 <IDE::prepareInterrupt(unsigned char)>
c0018b14:	5a                   	pop    edx
c0018b15:	59                   	pop    ecx
c0018b16:	6a 01                	push   0x1
c0018b18:	53                   	push   ebx
c0018b19:	e8 54 fa ff ff       	call   c0018572 <IDE::prepareInterrupt(unsigned char)>
c0018b1e:	83 c4 0c             	add    esp,0xc
c0018b21:	6a 00                	push   0x0
c0018b23:	6a 00                	push   0x0
c0018b25:	53                   	push   ebx
c0018b26:	e8 7b fc ff ff       	call   c00187a6 <IDE::enableIRQs(unsigned char, bool)>
c0018b2b:	83 c4 0c             	add    esp,0xc
c0018b2e:	6a 00                	push   0x0
c0018b30:	6a 01                	push   0x1
c0018b32:	53                   	push   ebx
c0018b33:	e8 6e fc ff ff       	call   c00187a6 <IDE::enableIRQs(unsigned char, bool)>
c0018b38:	83 c4 10             	add    esp,0x10
c0018b3b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0018b42:	74 34                	je     c0018b78 <IDE::open(int, int, void*)+0x38c>
c0018b44:	83 ec 0c             	sub    esp,0xc
c0018b47:	53                   	push   ebx
c0018b48:	6a 01                	push   0x1
c0018b4a:	68 6e 87 01 c0       	push   0xc001876e
c0018b4f:	6a 0e                	push   0xe
c0018b51:	53                   	push   ebx
c0018b52:	e8 6d 22 ff ff       	call   c000adc4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018b57:	83 c4 14             	add    esp,0x14
c0018b5a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018b60:	53                   	push   ebx
c0018b61:	6a 01                	push   0x1
c0018b63:	68 8a 87 01 c0       	push   0xc001878a
c0018b68:	6a 0f                	push   0xf
c0018b6a:	53                   	push   ebx
c0018b6b:	e8 54 22 ff ff       	call   c000adc4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018b70:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0018b76:	eb 38                	jmp    c0018bb0 <IDE::open(int, int, void*)+0x3c4>
c0018b78:	83 ec 0c             	sub    esp,0xc
c0018b7b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0018b85:	53                   	push   ebx
c0018b86:	6a 00                	push   0x0
c0018b88:	68 6e 87 01 c0       	push   0xc001876e
c0018b8d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0018b93:	53                   	push   ebx
c0018b94:	e8 2b 22 ff ff       	call   c000adc4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018b99:	83 c4 14             	add    esp,0x14
c0018b9c:	53                   	push   ebx
c0018b9d:	6a 00                	push   0x0
c0018b9f:	68 8a 87 01 c0       	push   0xc001878a
c0018ba4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0018baa:	53                   	push   ebx
c0018bab:	e8 14 22 ff ff       	call   c000adc4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018bb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018bb2:	83 c4 20             	add    esp,0x20
c0018bb5:	83 ec 0c             	sub    esp,0xc
c0018bb8:	53                   	push   ebx
c0018bb9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0018bbc:	83 c4 0c             	add    esp,0xc
c0018bbf:	6a 07                	push   0x7
c0018bc1:	6a 00                	push   0x0
c0018bc3:	53                   	push   ebx
c0018bc4:	e8 8f fa ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018bc9:	83 c4 0c             	add    esp,0xc
c0018bcc:	6a 07                	push   0x7
c0018bce:	6a 01                	push   0x1
c0018bd0:	53                   	push   ebx
c0018bd1:	e8 82 fa ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018bd6:	83 c4 0c             	add    esp,0xc
c0018bd9:	6a 01                	push   0x1
c0018bdb:	6a 00                	push   0x0
c0018bdd:	53                   	push   ebx
c0018bde:	e8 c3 fb ff ff       	call   c00187a6 <IDE::enableIRQs(unsigned char, bool)>
c0018be3:	83 c4 0c             	add    esp,0xc
c0018be6:	6a 01                	push   0x1
c0018be8:	6a 01                	push   0x1
c0018bea:	53                   	push   ebx
c0018beb:	e8 b6 fb ff ff       	call   c00187a6 <IDE::enableIRQs(unsigned char, bool)>
c0018bf0:	83 c4 2c             	add    esp,0x2c
c0018bf3:	31 c0                	xor    eax,eax
c0018bf5:	5b                   	pop    ebx
c0018bf6:	5e                   	pop    esi
c0018bf7:	5f                   	pop    edi
c0018bf8:	5d                   	pop    ebp
c0018bf9:	c3                   	ret    

c0018bfa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0018bfa:	55                   	push   ebp
c0018bfb:	57                   	push   edi
c0018bfc:	56                   	push   esi
c0018bfd:	53                   	push   ebx
c0018bfe:	83 ec 1c             	sub    esp,0x1c
c0018c01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c09:	8d 50 f8             	lea    edx,[eax-0x8]
c0018c0c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018c10:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018c14:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018c18:	80 fa 03             	cmp    dl,0x3
c0018c1b:	77 5d                	ja     c0018c7a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0018c1d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c25:	0f b6 db             	movzx  ebx,bl
c0018c28:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0018c2b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0018c2f:	83 ca 80             	or     edx,0xffffff80
c0018c32:	0f b6 d2             	movzx  edx,dl
c0018c35:	52                   	push   edx
c0018c36:	6a 0c                	push   0xc
c0018c38:	53                   	push   ebx
c0018c39:	56                   	push   esi
c0018c3a:	e8 59 f9 ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c3f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0018c44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c48:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018c4c:	0f b6 c0             	movzx  eax,al
c0018c4f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0018c53:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018c55:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0018c5a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0018c5e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018c62:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018c66:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018c6e:	83 c4 2c             	add    esp,0x2c
c0018c71:	5b                   	pop    ebx
c0018c72:	5e                   	pop    esi
c0018c73:	5f                   	pop    edi
c0018c74:	5d                   	pop    ebp
c0018c75:	e9 1e f9 ff ff       	jmp    c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c7a:	3c 07                	cmp    al,0x7
c0018c7c:	77 10                	ja     c0018c8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0018c7e:	0f b6 db             	movzx  ebx,bl
c0018c81:	0f b6 d0             	movzx  edx,al
c0018c84:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0018c8c:	eb 2d                	jmp    c0018cbb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018c8e:	3c 0d                	cmp    al,0xd
c0018c90:	77 13                	ja     c0018ca5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0018c92:	0f b6 db             	movzx  ebx,bl
c0018c95:	0f b6 c0             	movzx  eax,al
c0018c98:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0018c9f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0018ca3:	eb 16                	jmp    c0018cbb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018ca5:	3c 15                	cmp    al,0x15
c0018ca7:	77 14                	ja     c0018cbd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0018ca9:	0f b6 db             	movzx  ebx,bl
c0018cac:	0f b6 c0             	movzx  eax,al
c0018caf:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0018cb7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0018cbb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018cbd:	83 c4 1c             	add    esp,0x1c
c0018cc0:	5b                   	pop    ebx
c0018cc1:	5e                   	pop    esi
c0018cc2:	5f                   	pop    edi
c0018cc3:	5d                   	pop    ebp
c0018cc4:	c3                   	ret    
c0018cc5:	90                   	nop

c0018cc6 <IDE::detect()>:
c0018cc6:	55                   	push   ebp
c0018cc7:	57                   	push   edi
c0018cc8:	56                   	push   esi
c0018cc9:	53                   	push   ebx
c0018cca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018cd0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0018cd7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0018cde:	0f 85 97 02 00 00    	jne    c0018f7b <IDE::detect()+0x2b5>
c0018ce4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0018ceb:	31 f6                	xor    esi,esi
c0018ced:	31 ed                	xor    ebp,ebp
c0018cef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018cf7:	89 e8                	mov    eax,ebp
c0018cf9:	c1 e0 06             	shl    eax,0x6
c0018cfc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0018d04:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018d08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018d0c:	c1 e0 04             	shl    eax,0x4
c0018d0f:	83 c8 a0             	or     eax,0xffffffa0
c0018d12:	0f b6 c0             	movzx  eax,al
c0018d15:	50                   	push   eax
c0018d16:	6a 06                	push   0x6
c0018d18:	56                   	push   esi
c0018d19:	53                   	push   ebx
c0018d1a:	e8 79 f8 ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d1f:	83 c4 0c             	add    esp,0xc
c0018d22:	6a 0c                	push   0xc
c0018d24:	56                   	push   esi
c0018d25:	53                   	push   ebx
c0018d26:	e8 2d f9 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018d2b:	83 c4 0c             	add    esp,0xc
c0018d2e:	6a 0c                	push   0xc
c0018d30:	56                   	push   esi
c0018d31:	53                   	push   ebx
c0018d32:	e8 21 f9 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018d37:	83 c4 0c             	add    esp,0xc
c0018d3a:	6a 0c                	push   0xc
c0018d3c:	56                   	push   esi
c0018d3d:	53                   	push   ebx
c0018d3e:	e8 15 f9 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018d43:	83 c4 0c             	add    esp,0xc
c0018d46:	6a 0c                	push   0xc
c0018d48:	56                   	push   esi
c0018d49:	53                   	push   ebx
c0018d4a:	e8 09 f9 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018d4f:	68 ec 00 00 00       	push   0xec
c0018d54:	6a 07                	push   0x7
c0018d56:	56                   	push   esi
c0018d57:	53                   	push   ebx
c0018d58:	e8 3b f8 ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d5d:	83 c4 1c             	add    esp,0x1c
c0018d60:	6a 0c                	push   0xc
c0018d62:	56                   	push   esi
c0018d63:	53                   	push   ebx
c0018d64:	e8 ef f8 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018d69:	83 c4 0c             	add    esp,0xc
c0018d6c:	6a 0c                	push   0xc
c0018d6e:	56                   	push   esi
c0018d6f:	53                   	push   ebx
c0018d70:	e8 e3 f8 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018d75:	83 c4 0c             	add    esp,0xc
c0018d78:	6a 0c                	push   0xc
c0018d7a:	56                   	push   esi
c0018d7b:	53                   	push   ebx
c0018d7c:	e8 d7 f8 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018d81:	83 c4 0c             	add    esp,0xc
c0018d84:	6a 0c                	push   0xc
c0018d86:	56                   	push   esi
c0018d87:	53                   	push   ebx
c0018d88:	e8 cb f8 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018d8d:	83 c4 0c             	add    esp,0xc
c0018d90:	6a 0c                	push   0xc
c0018d92:	56                   	push   esi
c0018d93:	53                   	push   ebx
c0018d94:	e8 bf f8 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018d99:	83 c4 10             	add    esp,0x10
c0018d9c:	84 c0                	test   al,al
c0018d9e:	0f 84 5f 01 00 00    	je     c0018f03 <IDE::detect()+0x23d>
c0018da4:	31 ff                	xor    edi,edi
c0018da6:	50                   	push   eax
c0018da7:	6a 0c                	push   0xc
c0018da9:	56                   	push   esi
c0018daa:	53                   	push   ebx
c0018dab:	e8 a8 f8 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018db0:	83 c4 10             	add    esp,0x10
c0018db3:	a8 01                	test   al,0x1
c0018db5:	0f 85 69 01 00 00    	jne    c0018f24 <IDE::detect()+0x25e>
c0018dbb:	84 c0                	test   al,al
c0018dbd:	78 04                	js     c0018dc3 <IDE::detect()+0xfd>
c0018dbf:	a8 08                	test   al,0x8
c0018dc1:	75 23                	jne    c0018de6 <IDE::detect()+0x120>
c0018dc3:	47                   	inc    edi
c0018dc4:	81 ff 17 01 00 00    	cmp    edi,0x117
c0018dca:	7e da                	jle    c0018da6 <IDE::detect()+0xe0>
c0018dcc:	83 ec 0c             	sub    esp,0xc
c0018dcf:	6a 32                	push   0x32
c0018dd1:	e8 c6 9e ff ff       	call   c0012c9c <milliTenthSleep(unsigned int)>
c0018dd6:	83 c4 10             	add    esp,0x10
c0018dd9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0018ddf:	75 c5                	jne    c0018da6 <IDE::detect()+0xe0>
c0018de1:	e9 3e 01 00 00       	jmp    c0018f24 <IDE::detect()+0x25e>
c0018de6:	31 c9                	xor    ecx,ecx
c0018de8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0018dec:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0018df0:	83 ec 0c             	sub    esp,0xc
c0018df3:	68 80 00 00 00       	push   0x80
c0018df8:	57                   	push   edi
c0018df9:	6a 00                	push   0x0
c0018dfb:	56                   	push   esi
c0018dfc:	53                   	push   ebx
c0018dfd:	e8 f8 fd ff ff       	call   c0018bfa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0018e02:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0018e07:	89 e8                	mov    eax,ebp
c0018e09:	89 d1                	mov    ecx,edx
c0018e0b:	c1 e0 06             	shl    eax,0x6
c0018e0e:	01 d8                	add    eax,ebx
c0018e10:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0018e17:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0018e1e:	89 f2                	mov    edx,esi
c0018e20:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0018e26:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0018e2a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0018e30:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018e34:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0018e3b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0018e43:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0018e4a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0018e52:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0018e58:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0018e5f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0018e65:	8d 54 24 58          	lea    edx,[esp+0x58]
c0018e69:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018e6d:	83 c4 20             	add    esp,0x20
c0018e70:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0018e73:	83 c0 02             	add    eax,0x2
c0018e76:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0018e7c:	83 c7 02             	add    edi,0x2
c0018e7f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0018e82:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0018e88:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0018e8c:	75 e2                	jne    c0018e70 <IDE::detect()+0x1aa>
c0018e8e:	89 e8                	mov    eax,ebp
c0018e90:	c1 e0 06             	shl    eax,0x6
c0018e93:	01 d8                	add    eax,ebx
c0018e95:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0018e9b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0018ea2:	66 c1 ea 09          	shr    dx,0x9
c0018ea6:	83 e2 01             	and    edx,0x1
c0018ea9:	84 c9                	test   cl,cl
c0018eab:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0018eb1:	75 22                	jne    c0018ed5 <IDE::detect()+0x20f>
c0018eb3:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0018eba:	74 46                	je     c0018f02 <IDE::detect()+0x23c>
c0018ebc:	83 ec 0c             	sub    esp,0xc
c0018ebf:	68 7c 01 00 00       	push   0x17c
c0018ec4:	e8 4c dd fe ff       	call   c0006c15 <malloc>
c0018ec9:	89 c7                	mov    edi,eax
c0018ecb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ece:	e8 07 05 00 00       	call   c00193da <ATA::ATA()>
c0018ed3:	eb 17                	jmp    c0018eec <IDE::detect()+0x226>
c0018ed5:	83 ec 0c             	sub    esp,0xc
c0018ed8:	68 84 01 00 00       	push   0x184
c0018edd:	e8 33 dd fe ff       	call   c0006c15 <malloc>
c0018ee2:	89 c7                	mov    edi,eax
c0018ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ee7:	e8 e6 0a 00 00       	call   c00199d2 <ATAPI::ATAPI()>
c0018eec:	5a                   	pop    edx
c0018eed:	59                   	pop    ecx
c0018eee:	57                   	push   edi
c0018eef:	53                   	push   ebx
c0018ef0:	e8 23 1f ff ff       	call   c000ae18 <Device::addChild(Device*)>
c0018ef5:	8b 07                	mov    eax,DWORD PTR [edi]
c0018ef7:	53                   	push   ebx
c0018ef8:	55                   	push   ebp
c0018ef9:	6a 00                	push   0x0
c0018efb:	57                   	push   edi
c0018efc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018eff:	83 c4 20             	add    esp,0x20
c0018f02:	45                   	inc    ebp
c0018f03:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0018f08:	74 0d                	je     c0018f17 <IDE::detect()+0x251>
c0018f0a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018f12:	e9 e0 fd ff ff       	jmp    c0018cf7 <IDE::detect()+0x31>
c0018f17:	4e                   	dec    esi
c0018f18:	74 61                	je     c0018f7b <IDE::detect()+0x2b5>
c0018f1a:	be 01 00 00 00       	mov    esi,0x1
c0018f1f:	e9 cb fd ff ff       	jmp    c0018cef <IDE::detect()+0x29>
c0018f24:	50                   	push   eax
c0018f25:	6a 04                	push   0x4
c0018f27:	56                   	push   esi
c0018f28:	53                   	push   ebx
c0018f29:	e8 2a f7 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018f2e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018f32:	83 c4 0c             	add    esp,0xc
c0018f35:	6a 05                	push   0x5
c0018f37:	56                   	push   esi
c0018f38:	53                   	push   ebx
c0018f39:	e8 1a f7 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018f3e:	83 c4 10             	add    esp,0x10
c0018f41:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018f45:	80 fa 14             	cmp    dl,0x14
c0018f48:	75 04                	jne    c0018f4e <IDE::detect()+0x288>
c0018f4a:	3c eb                	cmp    al,0xeb
c0018f4c:	eb 07                	jmp    c0018f55 <IDE::detect()+0x28f>
c0018f4e:	3c 96                	cmp    al,0x96
c0018f50:	75 b1                	jne    c0018f03 <IDE::detect()+0x23d>
c0018f52:	80 fa 69             	cmp    dl,0x69
c0018f55:	75 ac                	jne    c0018f03 <IDE::detect()+0x23d>
c0018f57:	68 a1 00 00 00       	push   0xa1
c0018f5c:	6a 07                	push   0x7
c0018f5e:	56                   	push   esi
c0018f5f:	53                   	push   ebx
c0018f60:	e8 33 f6 ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018f65:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0018f6c:	e8 2b 9d ff ff       	call   c0012c9c <milliTenthSleep(unsigned int)>
c0018f71:	83 c4 10             	add    esp,0x10
c0018f74:	b1 01                	mov    cl,0x1
c0018f76:	e9 6d fe ff ff       	jmp    c0018de8 <IDE::detect()+0x122>
c0018f7b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018f81:	5b                   	pop    ebx
c0018f82:	5e                   	pop    esi
c0018f83:	5f                   	pop    edi
c0018f84:	5d                   	pop    ebp
c0018f85:	c3                   	ret    

c0018f86 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0018f86:	55                   	push   ebp
c0018f87:	57                   	push   edi
c0018f88:	56                   	push   esi
c0018f89:	53                   	push   ebx
c0018f8a:	83 ec 1c             	sub    esp,0x1c
c0018f8d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018f91:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018f95:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0018f99:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0018f9d:	88 c3                	mov    bl,al
c0018f9f:	84 c0                	test   al,al
c0018fa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fa5:	0f 84 81 00 00 00    	je     c001902c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018fab:	83 ec 0c             	sub    esp,0xc
c0018fae:	68 37 e8 01 c0       	push   0xc001e837
c0018fb3:	e8 20 0a ff ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0018fb8:	83 c4 10             	add    esp,0x10
c0018fbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018fbf:	3c 01                	cmp    al,0x1
c0018fc1:	74 63                	je     c0019026 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0018fc3:	3c 02                	cmp    al,0x2
c0018fc5:	75 53                	jne    c001901a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0018fc7:	01 f6                	add    esi,esi
c0018fc9:	09 ee                	or     esi,ebp
c0018fcb:	50                   	push   eax
c0018fcc:	89 f0                	mov    eax,esi
c0018fce:	6a 01                	push   0x1
c0018fd0:	0f b6 f0             	movzx  esi,al
c0018fd3:	c1 e6 06             	shl    esi,0x6
c0018fd6:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0018fde:	50                   	push   eax
c0018fdf:	57                   	push   edi
c0018fe0:	e8 73 f6 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0018fe5:	83 c4 10             	add    esp,0x10
c0018fe8:	a8 01                	test   al,0x1
c0018fea:	74 02                	je     c0018fee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0018fec:	b3 07                	mov    bl,0x7
c0018fee:	a8 02                	test   al,0x2
c0018ff0:	74 02                	je     c0018ff4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0018ff2:	b3 03                	mov    bl,0x3
c0018ff4:	a8 04                	test   al,0x4
c0018ff6:	74 02                	je     c0018ffa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0018ff8:	b3 14                	mov    bl,0x14
c0018ffa:	a8 08                	test   al,0x8
c0018ffc:	74 02                	je     c0019000 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0018ffe:	b3 03                	mov    bl,0x3
c0019000:	a8 10                	test   al,0x10
c0019002:	74 02                	je     c0019006 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019004:	b3 15                	mov    bl,0x15
c0019006:	a8 20                	test   al,0x20
c0019008:	74 02                	je     c001900c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001900a:	b3 03                	mov    bl,0x3
c001900c:	a8 40                	test   al,0x40
c001900e:	74 02                	je     c0019012 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019010:	b3 16                	mov    bl,0x16
c0019012:	84 c0                	test   al,al
c0019014:	79 16                	jns    c001902c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019016:	b3 0d                	mov    bl,0xd
c0019018:	eb 12                	jmp    c001902c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001901a:	3c 03                	cmp    al,0x3
c001901c:	74 0c                	je     c001902a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001901e:	3c 04                	cmp    al,0x4
c0019020:	75 0a                	jne    c001902c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019022:	b3 08                	mov    bl,0x8
c0019024:	eb 06                	jmp    c001902c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019026:	b3 13                	mov    bl,0x13
c0019028:	eb 02                	jmp    c001902c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001902a:	b3 17                	mov    bl,0x17
c001902c:	83 c4 1c             	add    esp,0x1c
c001902f:	88 d8                	mov    al,bl
c0019031:	5b                   	pop    ebx
c0019032:	5e                   	pop    esi
c0019033:	5f                   	pop    edi
c0019034:	5d                   	pop    ebp
c0019035:	c3                   	ret    

c0019036 <IDE::polling(unsigned char, unsigned int)>:
c0019036:	55                   	push   ebp
c0019037:	bd 04 00 00 00       	mov    ebp,0x4
c001903c:	57                   	push   edi
c001903d:	56                   	push   esi
c001903e:	53                   	push   ebx
c001903f:	83 ec 0c             	sub    esp,0xc
c0019042:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019046:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001904a:	0f b6 f3             	movzx  esi,bl
c001904d:	52                   	push   edx
c001904e:	6a 0c                	push   0xc
c0019050:	56                   	push   esi
c0019051:	57                   	push   edi
c0019052:	e8 01 f6 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0019057:	83 c4 10             	add    esp,0x10
c001905a:	4d                   	dec    ebp
c001905b:	75 ed                	jne    c001904a <IDE::polling(unsigned char, unsigned int)+0x14>
c001905d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019062:	50                   	push   eax
c0019063:	6a 0c                	push   0xc
c0019065:	56                   	push   esi
c0019066:	57                   	push   edi
c0019067:	e8 ec f5 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c001906c:	83 c4 10             	add    esp,0x10
c001906f:	a8 01                	test   al,0x1
c0019071:	75 17                	jne    c001908a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019073:	a8 20                	test   al,0x20
c0019075:	75 0f                	jne    c0019086 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019077:	4b                   	dec    ebx
c0019078:	74 10                	je     c001908a <IDE::polling(unsigned char, unsigned int)+0x54>
c001907a:	84 c0                	test   al,al
c001907c:	78 e4                	js     c0019062 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001907e:	a8 08                	test   al,0x8
c0019080:	74 e0                	je     c0019062 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019082:	31 c0                	xor    eax,eax
c0019084:	eb 06                	jmp    c001908c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019086:	b0 01                	mov    al,0x1
c0019088:	eb 02                	jmp    c001908c <IDE::polling(unsigned char, unsigned int)+0x56>
c001908a:	b0 02                	mov    al,0x2
c001908c:	83 c4 0c             	add    esp,0xc
c001908f:	5b                   	pop    ebx
c0019090:	5e                   	pop    esi
c0019091:	5f                   	pop    edi
c0019092:	5d                   	pop    ebp
c0019093:	c3                   	ret    

c0019094 <SATABus::close(int, int, void*)>:
c0019094:	31 c0                	xor    eax,eax
c0019096:	c3                   	ret    
c0019097:	90                   	nop

c0019098 <SATABus::detect()>:
c0019098:	c3                   	ret    
c0019099:	90                   	nop

c001909a <SATABus::SATABus()>:
c001909a:	83 ec 0c             	sub    esp,0xc
c001909d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a1:	83 ec 08             	sub    esp,0x8
c00190a4:	68 70 e8 01 c0       	push   0xc001e870
c00190a9:	50                   	push   eax
c00190aa:	e8 ad 20 ff ff       	call   c000b15c <HardDiskController::HardDiskController(char const*)>
c00190af:	83 c4 10             	add    esp,0x10
c00190b2:	ba 9c e8 01 c0       	mov    edx,0xc001e89c
c00190b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190bb:	89 10                	mov    DWORD PTR [eax],edx
c00190bd:	83 ec 0c             	sub    esp,0xc
c00190c0:	6a 50                	push   0x50
c00190c2:	e8 d9 df fe ff       	call   c00070a0 <Phys::allocateContiguousPages(int)>
c00190c7:	83 c4 10             	add    esp,0x10
c00190ca:	89 c2                	mov    edx,eax
c00190cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00190d6:	83 ec 0c             	sub    esp,0xc
c00190d9:	6a 50                	push   0x50
c00190db:	e8 71 f6 fe ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c00190e0:	83 c4 10             	add    esp,0x10
c00190e3:	89 c2                	mov    edx,eax
c00190e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00190ef:	a1 74 f5 01 c0       	mov    eax,ds:0xc001f574
c00190f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00190f8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00190fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019102:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019108:	83 ec 0c             	sub    esp,0xc
c001910b:	6a 03                	push   0x3
c001910d:	6a 50                	push   0x50
c001910f:	51                   	push   ecx
c0019110:	52                   	push   edx
c0019111:	50                   	push   eax
c0019112:	e8 8d ff fe ff       	call   c00090a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019117:	83 c4 20             	add    esp,0x20
c001911a:	90                   	nop
c001911b:	83 c4 0c             	add    esp,0xc
c001911e:	c3                   	ret    
c001911f:	90                   	nop

c0019120 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019124:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019127:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001912a:	09 c2                	or     edx,eax
c001912c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019130:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019136:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019138:	31 c0                	xor    eax,eax
c001913a:	c1 e9 08             	shr    ecx,0x8
c001913d:	83 e1 0f             	and    ecx,0xf
c0019140:	39 c8                	cmp    eax,ecx
c0019142:	74 0a                	je     c001914e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019144:	f6 c2 01             	test   dl,0x1
c0019147:	74 08                	je     c0019151 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019149:	d1 ea                	shr    edx,1
c001914b:	40                   	inc    eax
c001914c:	eb f2                	jmp    c0019140 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001914e:	83 c8 ff             	or     eax,0xffffffff
c0019151:	c3                   	ret    

c0019152 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019152:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019156:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019159:	89 c2                	mov    edx,eax
c001915b:	c1 ea 08             	shr    edx,0x8
c001915e:	83 e2 0f             	and    edx,0xf
c0019161:	fe ca                	dec    dl
c0019163:	75 31                	jne    c0019196 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019165:	83 e0 0f             	and    eax,0xf
c0019168:	3c 03                	cmp    al,0x3
c001916a:	75 2a                	jne    c0019196 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001916c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001916f:	b8 02 00 00 00       	mov    eax,0x2
c0019174:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001917a:	74 1c                	je     c0019198 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001917c:	b8 04 00 00 00       	mov    eax,0x4
c0019181:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019187:	74 0f                	je     c0019198 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019189:	31 c0                	xor    eax,eax
c001918b:	83 fa 03             	cmp    edx,0x3
c001918e:	0f 94 c0             	sete   al
c0019191:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019195:	c3                   	ret    
c0019196:	31 c0                	xor    eax,eax
c0019198:	c3                   	ret    
c0019199:	90                   	nop

c001919a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001919a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001919e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00191a1:	0f ba e2 0f          	bt     edx,0xf
c00191a5:	72 f7                	jb     c001919e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00191a7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00191aa:	83 ca 10             	or     edx,0x10
c00191ad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00191b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00191b3:	83 ca 01             	or     edx,0x1
c00191b6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00191b9:	c3                   	ret    

c00191ba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00191ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00191be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00191c1:	83 e2 fe             	and    edx,0xfffffffe
c00191c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00191c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00191ca:	83 e2 ef             	and    edx,0xffffffef
c00191cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00191d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00191d3:	0f ba e2 0e          	bt     edx,0xe
c00191d7:	72 f7                	jb     c00191d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00191d9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00191dc:	0f ba e2 0f          	bt     edx,0xf
c00191e0:	72 ee                	jb     c00191d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00191e2:	c3                   	ret    
c00191e3:	90                   	nop

c00191e4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00191e4:	55                   	push   ebp
c00191e5:	57                   	push   edi
c00191e6:	56                   	push   esi
c00191e7:	53                   	push   ebx
c00191e8:	83 ec 1c             	sub    esp,0x1c
c00191eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00191ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00191f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00191f7:	53                   	push   ebx
c00191f8:	89 fd                	mov    ebp,edi
c00191fa:	56                   	push   esi
c00191fb:	c1 e5 0a             	shl    ebp,0xa
c00191fe:	e8 b7 ff ff ff       	call   c00191ba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019203:	83 ec 0c             	sub    esp,0xc
c0019206:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001920c:	01 e8                	add    eax,ebp
c001920e:	89 03                	mov    DWORD PTR [ebx],eax
c0019210:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019212:	68 00 04 00 00       	push   0x400
c0019217:	6a 00                	push   0x0
c0019219:	50                   	push   eax
c001921a:	e8 d1 72 fe ff       	call   c00004f0 <memset>
c001921f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019225:	89 fa                	mov    edx,edi
c0019227:	01 e8                	add    eax,ebp
c0019229:	c1 e7 0d             	shl    edi,0xd
c001922c:	89 03                	mov    DWORD PTR [ebx],eax
c001922e:	c1 e2 08             	shl    edx,0x8
c0019231:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019238:	81 c2 00 80 00 00    	add    edx,0x8000
c001923e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0019242:	89 d0                	mov    eax,edx
c0019244:	83 c4 1c             	add    esp,0x1c
c0019247:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001924d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019250:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019253:	68 00 01 00 00       	push   0x100
c0019258:	6a 00                	push   0x0
c001925a:	50                   	push   eax
c001925b:	e8 90 72 fe ff       	call   c00004f0 <memset>
c0019260:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019264:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001926a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0019270:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019274:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019277:	83 c4 10             	add    esp,0x10
c001927a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019281:	31 ff                	xor    edi,edi
c0019283:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019289:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001928f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019293:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019299:	83 c5 20             	add    ebp,0x20
c001929c:	01 f8                	add    eax,edi
c001929e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00192a1:	52                   	push   edx
c00192a2:	68 00 01 00 00       	push   0x100
c00192a7:	6a 00                	push   0x0
c00192a9:	50                   	push   eax
c00192aa:	e8 41 72 fe ff       	call   c00004f0 <memset>
c00192af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192b3:	83 c4 10             	add    esp,0x10
c00192b6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00192bc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00192c3:	01 f8                	add    eax,edi
c00192c5:	81 c7 00 01 00 00    	add    edi,0x100
c00192cb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00192ce:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00192d4:	75 b3                	jne    c0019289 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00192d6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00192da:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00192de:	83 c4 1c             	add    esp,0x1c
c00192e1:	5b                   	pop    ebx
c00192e2:	5e                   	pop    esi
c00192e3:	5f                   	pop    edi
c00192e4:	5d                   	pop    ebp
c00192e5:	e9 b0 fe ff ff       	jmp    c001919a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00192ea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00192ea:	55                   	push   ebp
c00192eb:	57                   	push   edi
c00192ec:	56                   	push   esi
c00192ed:	53                   	push   ebx
c00192ee:	31 db                	xor    ebx,ebx
c00192f0:	83 ec 0c             	sub    esp,0xc
c00192f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00192f7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00192fb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00192fe:	f7 c7 01 00 00 00    	test   edi,0x1
c0019304:	74 7a                	je     c0019380 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019306:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001930a:	89 d8                	mov    eax,ebx
c001930c:	c1 e0 07             	shl    eax,0x7
c001930f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019316:	55                   	push   ebp
c0019317:	56                   	push   esi
c0019318:	e8 35 fe ff ff       	call   c0019152 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001931d:	5a                   	pop    edx
c001931e:	83 f8 01             	cmp    eax,0x1
c0019321:	59                   	pop    ecx
c0019322:	75 21                	jne    c0019345 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019324:	50                   	push   eax
c0019325:	53                   	push   ebx
c0019326:	55                   	push   ebp
c0019327:	56                   	push   esi
c0019328:	e8 b7 fe ff ff       	call   c00191e4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001932d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019334:	e8 dc d8 fe ff       	call   c0006c15 <malloc>
c0019339:	89 c5                	mov    ebp,eax
c001933b:	89 04 24             	mov    DWORD PTR [esp],eax
c001933e:	e8 43 0d 00 00       	call   c001a086 <SATA::SATA()>
c0019343:	eb 24                	jmp    c0019369 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019345:	83 f8 04             	cmp    eax,0x4
c0019348:	75 36                	jne    c0019380 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001934a:	51                   	push   ecx
c001934b:	53                   	push   ebx
c001934c:	55                   	push   ebp
c001934d:	56                   	push   esi
c001934e:	e8 91 fe ff ff       	call   c00191e4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019353:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001935a:	e8 b6 d8 fe ff       	call   c0006c15 <malloc>
c001935f:	89 c5                	mov    ebp,eax
c0019361:	89 04 24             	mov    DWORD PTR [esp],eax
c0019364:	e8 79 10 00 00       	call   c001a3e2 <SATAPI::SATAPI()>
c0019369:	58                   	pop    eax
c001936a:	5a                   	pop    edx
c001936b:	55                   	push   ebp
c001936c:	56                   	push   esi
c001936d:	e8 a6 1a ff ff       	call   c000ae18 <Device::addChild(Device*)>
c0019372:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019375:	56                   	push   esi
c0019376:	6a 00                	push   0x0
c0019378:	53                   	push   ebx
c0019379:	55                   	push   ebp
c001937a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001937d:	83 c4 20             	add    esp,0x20
c0019380:	d1 ef                	shr    edi,1
c0019382:	43                   	inc    ebx
c0019383:	83 fb 20             	cmp    ebx,0x20
c0019386:	0f 85 72 ff ff ff    	jne    c00192fe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001938c:	83 c4 0c             	add    esp,0xc
c001938f:	5b                   	pop    ebx
c0019390:	5e                   	pop    esi
c0019391:	5f                   	pop    edi
c0019392:	5d                   	pop    ebp
c0019393:	c3                   	ret    

c0019394 <SATABus::open(int, int, void*)>:
c0019394:	83 ec 14             	sub    esp,0x14
c0019397:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001939b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00193a1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00193a7:	52                   	push   edx
c00193a8:	50                   	push   eax
c00193a9:	e8 3c ff ff ff       	call   c00192ea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00193ae:	31 c0                	xor    eax,eax
c00193b0:	83 c4 1c             	add    esp,0x1c
c00193b3:	c3                   	ret    

c00193b4 <ATA::close(int, int, void*)>:
c00193b4:	83 ec 0c             	sub    esp,0xc
c00193b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00193c1:	85 c0                	test   eax,eax
c00193c3:	74 0c                	je     c00193d1 <ATA::close(int, int, void*)+0x1d>
c00193c5:	83 ec 0c             	sub    esp,0xc
c00193c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00193ca:	50                   	push   eax
c00193cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00193ce:	83 c4 10             	add    esp,0x10
c00193d1:	31 c0                	xor    eax,eax
c00193d3:	83 c4 0c             	add    esp,0xc
c00193d6:	c3                   	ret    
c00193d7:	90                   	nop

c00193d8 <ATA::powerSaving(PowerSavingLevel)>:
c00193d8:	c3                   	ret    
c00193d9:	90                   	nop

c00193da <ATA::ATA()>:
c00193da:	83 ec 0c             	sub    esp,0xc
c00193dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193e1:	83 ec 04             	sub    esp,0x4
c00193e4:	68 00 02 00 00       	push   0x200
c00193e9:	68 69 e9 01 c0       	push   0xc001e969
c00193ee:	50                   	push   eax
c00193ef:	e8 f2 1d ff ff       	call   c000b1e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00193f4:	83 c4 10             	add    esp,0x10
c00193f7:	ba dc e8 01 c0       	mov    edx,0xc001e8dc
c00193fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019400:	89 10                	mov    DWORD PTR [eax],edx
c0019402:	90                   	nop
c0019403:	83 c4 0c             	add    esp,0xc
c0019406:	c3                   	ret    
c0019407:	90                   	nop

c0019408 <ATA::flush(bool)>:
c0019408:	53                   	push   ebx
c0019409:	83 ec 08             	sub    esp,0x8
c001940c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019411:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019415:	19 c0                	sbb    eax,eax
c0019417:	83 e0 fd             	and    eax,0xfffffffd
c001941a:	05 ea 00 00 00       	add    eax,0xea
c001941f:	50                   	push   eax
c0019420:	6a 07                	push   0x7
c0019422:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019429:	50                   	push   eax
c001942a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019430:	e8 63 f1 ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019435:	83 c4 0c             	add    esp,0xc
c0019438:	6a 00                	push   0x0
c001943a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019441:	50                   	push   eax
c0019442:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019448:	e8 e9 fb ff ff       	call   c0019036 <IDE::polling(unsigned char, unsigned int)>
c001944d:	83 c4 18             	add    esp,0x18
c0019450:	5b                   	pop    ebx
c0019451:	c3                   	ret    

c0019452 <ATA::readyForCommand()>:
c0019452:	56                   	push   esi
c0019453:	53                   	push   ebx
c0019454:	53                   	push   ebx
c0019455:	31 db                	xor    ebx,ebx
c0019457:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001945b:	51                   	push   ecx
c001945c:	6a 0c                	push   0xc
c001945e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019465:	50                   	push   eax
c0019466:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001946c:	e8 e7 f1 ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0019471:	83 c4 10             	add    esp,0x10
c0019474:	a8 88                	test   al,0x88
c0019476:	74 1f                	je     c0019497 <ATA::readyForCommand()+0x45>
c0019478:	43                   	inc    ebx
c0019479:	83 fb 63             	cmp    ebx,0x63
c001947c:	7e dd                	jle    c001945b <ATA::readyForCommand()+0x9>
c001947e:	83 ec 0c             	sub    esp,0xc
c0019481:	6a 0a                	push   0xa
c0019483:	e8 14 98 ff ff       	call   c0012c9c <milliTenthSleep(unsigned int)>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019491:	75 c8                	jne    c001945b <ATA::readyForCommand()+0x9>
c0019493:	31 c0                	xor    eax,eax
c0019495:	eb 02                	jmp    c0019499 <ATA::readyForCommand()+0x47>
c0019497:	b0 01                	mov    al,0x1
c0019499:	5a                   	pop    edx
c001949a:	5b                   	pop    ebx
c001949b:	5e                   	pop    esi
c001949c:	c3                   	ret    
c001949d:	90                   	nop

c001949e <ATA::access(unsigned long long, int, void*, bool)>:
c001949e:	55                   	push   ebp
c001949f:	57                   	push   edi
c00194a0:	56                   	push   esi
c00194a1:	53                   	push   ebx
c00194a2:	83 ec 2c             	sub    esp,0x2c
c00194a5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00194a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00194ad:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00194b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00194b5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00194b9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00194bd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00194c1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00194c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00194cb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00194d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00194d5:	c1 e0 06             	shl    eax,0x6
c00194d8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00194e0:	74 5d                	je     c001953f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00194e2:	89 fa                	mov    edx,edi
c00194e4:	89 f0                	mov    eax,esi
c00194e6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00194ea:	c1 ea 1c             	shr    edx,0x1c
c00194ed:	89 d1                	mov    ecx,edx
c00194ef:	09 c1                	or     ecx,eax
c00194f1:	74 25                	je     c0019518 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00194f3:	31 ed                	xor    ebp,ebp
c00194f5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00194fc:	89 fa                	mov    edx,edi
c00194fe:	89 f0                	mov    eax,esi
c0019500:	0f ad d0             	shrd   eax,edx,cl
c0019503:	d3 ea                	shr    edx,cl
c0019505:	f6 c1 20             	test   cl,0x20
c0019508:	74 02                	je     c001950c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001950a:	89 d0                	mov    eax,edx
c001950c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019510:	45                   	inc    ebp
c0019511:	83 fd 06             	cmp    ebp,0x6
c0019514:	75 df                	jne    c00194f5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019516:	eb 76                	jmp    c001958e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019518:	89 f0                	mov    eax,esi
c001951a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001951f:	89 fa                	mov    edx,edi
c0019521:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019528:	0f ac d0 10          	shrd   eax,edx,0x10
c001952c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019531:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019535:	c1 ee 18             	shr    esi,0x18
c0019538:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001953d:	eb 56                	jmp    c0019595 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001953f:	6a 00                	push   0x0
c0019541:	6a 3f                	push   0x3f
c0019543:	57                   	push   edi
c0019544:	56                   	push   esi
c0019545:	e8 a6 22 00 00       	call   c001b7f0 <__umoddi3>
c001954a:	83 c4 10             	add    esp,0x10
c001954d:	40                   	inc    eax
c001954e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019552:	6a 00                	push   0x0
c0019554:	68 f0 03 00 00       	push   0x3f0
c0019559:	57                   	push   edi
c001955a:	56                   	push   esi
c001955b:	e8 90 21 00 00       	call   c001b6f0 <__udivdi3>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019568:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001956f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019574:	6a 00                	push   0x0
c0019576:	6a 3f                	push   0x3f
c0019578:	57                   	push   edi
c0019579:	56                   	push   esi
c001957a:	e8 71 21 00 00       	call   c001b6f0 <__udivdi3>
c001957f:	83 c4 10             	add    esp,0x10
c0019582:	89 c6                	mov    esi,eax
c0019584:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019589:	83 e6 0f             	and    esi,0xf
c001958c:	eb 07                	jmp    c0019595 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001958e:	31 f6                	xor    esi,esi
c0019590:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019595:	bf 01 00 00 00       	mov    edi,0x1
c001959a:	50                   	push   eax
c001959b:	6a 00                	push   0x0
c001959d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195a4:	50                   	push   eax
c00195a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00195a9:	e8 f8 f1 ff ff       	call   c00187a6 <IDE::enableIRQs(unsigned char, bool)>
c00195ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00195b1:	e8 9c fe ff ff       	call   c0019452 <ATA::readyForCommand()>
c00195b6:	83 c4 10             	add    esp,0x10
c00195b9:	84 c0                	test   al,al
c00195bb:	0f 84 4e 02 00 00    	je     c001980f <ATA::access(unsigned long long, int, void*, bool)+0x371>
c00195c1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00195c7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00195cd:	c1 e0 04             	shl    eax,0x4
c00195d0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00195d7:	09 c6                	or     esi,eax
c00195d9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00195de:	75 05                	jne    c00195e5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00195e0:	83 ce a0             	or     esi,0xffffffa0
c00195e3:	eb 03                	jmp    c00195e8 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00195e5:	83 ce e0             	or     esi,0xffffffe0
c00195e8:	89 f0                	mov    eax,esi
c00195ea:	0f b6 f0             	movzx  esi,al
c00195ed:	56                   	push   esi
c00195ee:	6a 06                	push   0x6
c00195f0:	51                   	push   ecx
c00195f1:	52                   	push   edx
c00195f2:	e8 a1 ef ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195f7:	83 c4 10             	add    esp,0x10
c00195fa:	6a 00                	push   0x0
c00195fc:	6a 01                	push   0x1
c00195fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019605:	50                   	push   eax
c0019606:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001960c:	e8 87 ef ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019611:	83 c4 10             	add    esp,0x10
c0019614:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019619:	75 6e                	jne    c0019689 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001961b:	6a 00                	push   0x0
c001961d:	6a 08                	push   0x8
c001961f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019626:	50                   	push   eax
c0019627:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001962d:	e8 66 ef ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019632:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019637:	50                   	push   eax
c0019638:	6a 09                	push   0x9
c001963a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019641:	50                   	push   eax
c0019642:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019648:	e8 4b ef ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001964d:	83 c4 20             	add    esp,0x20
c0019650:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019655:	50                   	push   eax
c0019656:	6a 0a                	push   0xa
c0019658:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001965f:	50                   	push   eax
c0019660:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019666:	e8 2d ef ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001966b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019670:	50                   	push   eax
c0019671:	6a 0b                	push   0xb
c0019673:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001967a:	50                   	push   eax
c001967b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019681:	e8 12 ef ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019686:	83 c4 20             	add    esp,0x20
c0019689:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001968e:	50                   	push   eax
c001968f:	6a 02                	push   0x2
c0019691:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019698:	50                   	push   eax
c0019699:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001969f:	e8 f4 ee ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196a4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00196a9:	50                   	push   eax
c00196aa:	6a 03                	push   0x3
c00196ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00196b3:	50                   	push   eax
c00196b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196ba:	e8 d9 ee ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196bf:	83 c4 20             	add    esp,0x20
c00196c2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00196c7:	50                   	push   eax
c00196c8:	6a 04                	push   0x4
c00196ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00196d1:	50                   	push   eax
c00196d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196d8:	e8 bb ee ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00196e2:	50                   	push   eax
c00196e3:	6a 05                	push   0x5
c00196e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00196ec:	50                   	push   eax
c00196ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196f3:	e8 a0 ee ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196f8:	83 c4 20             	add    esp,0x20
c00196fb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019700:	0f 94 c0             	sete   al
c0019703:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019708:	74 09                	je     c0019713 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001970a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019711:	eb 07                	jmp    c001971a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019713:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001971a:	0f b6 c0             	movzx  eax,al
c001971d:	50                   	push   eax
c001971e:	6a 07                	push   0x7
c0019720:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019727:	50                   	push   eax
c0019728:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001972e:	e8 65 ee ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019733:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019737:	83 c4 10             	add    esp,0x10
c001973a:	85 f6                	test   esi,esi
c001973c:	0f 84 ae 00 00 00    	je     c00197f0 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019742:	50                   	push   eax
c0019743:	6a 01                	push   0x1
c0019745:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001974c:	50                   	push   eax
c001974d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019753:	e8 de f8 ff ff       	call   c0019036 <IDE::polling(unsigned char, unsigned int)>
c0019758:	83 c4 10             	add    esp,0x10
c001975b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019761:	84 c0                	test   al,al
c0019763:	74 20                	je     c0019785 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019765:	0f b6 f8             	movzx  edi,al
c0019768:	0f b6 d2             	movzx  edx,dl
c001976b:	57                   	push   edi
c001976c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019773:	50                   	push   eax
c0019774:	52                   	push   edx
c0019775:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001977b:	e8 06 f8 ff ff       	call   c0018f86 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019780:	e9 87 00 00 00       	jmp    c001980c <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019785:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001978a:	74 33                	je     c00197bf <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001978c:	31 ed                	xor    ebp,ebp
c001978e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019792:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019796:	50                   	push   eax
c0019797:	50                   	push   eax
c0019798:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001979f:	50                   	push   eax
c00197a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197a6:	e8 db ed ff ff       	call   c0018586 <IDE::getBase(unsigned char)>
c00197ab:	89 c2                	mov    edx,eax
c00197ad:	89 f8                	mov    eax,edi
c00197af:	66 ef                	out    dx,ax
c00197b1:	45                   	inc    ebp
c00197b2:	83 c4 10             	add    esp,0x10
c00197b5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00197bb:	75 d1                	jne    c001978e <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c00197bd:	eb 23                	jmp    c00197e2 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c00197bf:	0f b6 d2             	movzx  edx,dl
c00197c2:	51                   	push   ecx
c00197c3:	51                   	push   ecx
c00197c4:	52                   	push   edx
c00197c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197cb:	e8 b6 ed ff ff       	call   c0018586 <IDE::getBase(unsigned char)>
c00197d0:	b9 00 01 00 00       	mov    ecx,0x100
c00197d5:	89 c2                	mov    edx,eax
c00197d7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00197db:	fc                   	cld    
c00197dc:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00197df:	83 c4 10             	add    esp,0x10
c00197e2:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00197ea:	4e                   	dec    esi
c00197eb:	e9 4a ff ff ff       	jmp    c001973a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00197f0:	31 ff                	xor    edi,edi
c00197f2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00197f7:	74 16                	je     c001980f <ATA::access(unsigned long long, int, void*, bool)+0x371>
c00197f9:	50                   	push   eax
c00197fa:	50                   	push   eax
c00197fb:	31 c0                	xor    eax,eax
c00197fd:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019802:	0f 94 c0             	sete   al
c0019805:	50                   	push   eax
c0019806:	53                   	push   ebx
c0019807:	e8 fc fb ff ff       	call   c0019408 <ATA::flush(bool)>
c001980c:	83 c4 10             	add    esp,0x10
c001980f:	83 c4 2c             	add    esp,0x2c
c0019812:	89 f8                	mov    eax,edi
c0019814:	5b                   	pop    ebx
c0019815:	5e                   	pop    esi
c0019816:	5f                   	pop    edi
c0019817:	5d                   	pop    ebp
c0019818:	c3                   	ret    
c0019819:	90                   	nop

c001981a <ATA::read(unsigned long long, int, void*)>:
c001981a:	57                   	push   edi
c001981b:	b8 04 00 00 00       	mov    eax,0x4
c0019820:	56                   	push   esi
c0019821:	53                   	push   ebx
c0019822:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019826:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001982a:	8d 7a ff             	lea    edi,[edx-0x1]
c001982d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019831:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019835:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001983b:	77 25                	ja     c0019862 <ATA::read(unsigned long long, int, void*)+0x48>
c001983d:	b8 06 00 00 00       	mov    eax,0x6
c0019842:	85 f6                	test   esi,esi
c0019844:	74 1c                	je     c0019862 <ATA::read(unsigned long long, int, void*)+0x48>
c0019846:	50                   	push   eax
c0019847:	50                   	push   eax
c0019848:	6a 00                	push   0x0
c001984a:	56                   	push   esi
c001984b:	52                   	push   edx
c001984c:	53                   	push   ebx
c001984d:	51                   	push   ecx
c001984e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019852:	e8 47 fc ff ff       	call   c001949e <ATA::access(unsigned long long, int, void*, bool)>
c0019857:	83 c4 20             	add    esp,0x20
c001985a:	85 c0                	test   eax,eax
c001985c:	0f 95 c0             	setne  al
c001985f:	0f b6 c0             	movzx  eax,al
c0019862:	5b                   	pop    ebx
c0019863:	5e                   	pop    esi
c0019864:	5f                   	pop    edi
c0019865:	c3                   	ret    

c0019866 <ATA::write(unsigned long long, int, void*)>:
c0019866:	57                   	push   edi
c0019867:	b8 04 00 00 00       	mov    eax,0x4
c001986c:	56                   	push   esi
c001986d:	53                   	push   ebx
c001986e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019872:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019876:	8d 7a ff             	lea    edi,[edx-0x1]
c0019879:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001987d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019881:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019887:	77 25                	ja     c00198ae <ATA::write(unsigned long long, int, void*)+0x48>
c0019889:	b8 06 00 00 00       	mov    eax,0x6
c001988e:	85 f6                	test   esi,esi
c0019890:	74 1c                	je     c00198ae <ATA::write(unsigned long long, int, void*)+0x48>
c0019892:	50                   	push   eax
c0019893:	50                   	push   eax
c0019894:	6a 01                	push   0x1
c0019896:	56                   	push   esi
c0019897:	52                   	push   edx
c0019898:	53                   	push   ebx
c0019899:	51                   	push   ecx
c001989a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001989e:	e8 fb fb ff ff       	call   c001949e <ATA::access(unsigned long long, int, void*, bool)>
c00198a3:	83 c4 20             	add    esp,0x20
c00198a6:	85 c0                	test   eax,eax
c00198a8:	0f 95 c0             	setne  al
c00198ab:	0f b6 c0             	movzx  eax,al
c00198ae:	5b                   	pop    ebx
c00198af:	5e                   	pop    esi
c00198b0:	5f                   	pop    edi
c00198b1:	c3                   	ret    

c00198b2 <ATA::detectCHS()>:
c00198b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00198b6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00198bc:	c1 e0 06             	shl    eax,0x6
c00198bf:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00198c5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00198cf:	c7 44 24 04 c0 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e8c0
c00198d7:	e9 4b 5c ff ff       	jmp    c000f527 <Krnl::panic(char const*)>

c00198dc <ATA::open(int, int, void*)>:
c00198dc:	53                   	push   ebx
c00198dd:	83 ec 08             	sub    esp,0x8
c00198e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00198e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00198e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00198ec:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00198f2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00198f8:	c1 e0 06             	shl    eax,0x6
c00198fb:	01 d0                	add    eax,edx
c00198fd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019904:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001990a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019911:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001991b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019921:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019928:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001992f:	75 0c                	jne    c001993d <ATA::open(int, int, void*)+0x61>
c0019931:	83 ec 0c             	sub    esp,0xc
c0019934:	53                   	push   ebx
c0019935:	e8 78 ff ff ff       	call   c00198b2 <ATA::detectCHS()>
c001993a:	83 c4 10             	add    esp,0x10
c001993d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019943:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019949:	c1 e0 06             	shl    eax,0x6
c001994c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019953:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001995d:	d1 e8                	shr    eax,1
c001995f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019965:	6a 04                	push   0x4
c0019967:	6a 0c                	push   0xc
c0019969:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019970:	50                   	push   eax
c0019971:	52                   	push   edx
c0019972:	e8 21 ec ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019977:	90                   	nop
c0019978:	90                   	nop
c0019979:	6a 00                	push   0x0
c001997b:	6a 0c                	push   0xc
c001997d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019984:	50                   	push   eax
c0019985:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001998b:	e8 08 ec ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019990:	83 c4 14             	add    esp,0x14
c0019993:	53                   	push   ebx
c0019994:	e8 b5 18 ff ff       	call   c000b24e <PhysicalDisk::startCache()>
c0019999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001999c:	e8 25 29 ff ff       	call   c000c2c6 <createPartitionsForDisk(PhysicalDisk*)>
c00199a1:	31 c0                	xor    eax,eax
c00199a3:	83 c4 18             	add    esp,0x18
c00199a6:	5b                   	pop    ebx
c00199a7:	c3                   	ret    

c00199a8 <ATAPI::write(unsigned long long, int, void*)>:
c00199a8:	b8 03 00 00 00       	mov    eax,0x3
c00199ad:	c3                   	ret    

c00199ae <ATAPI::close(int, int, void*)>:
c00199ae:	83 ec 0c             	sub    esp,0xc
c00199b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199b5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00199bb:	85 c0                	test   eax,eax
c00199bd:	74 0c                	je     c00199cb <ATAPI::close(int, int, void*)+0x1d>
c00199bf:	83 ec 0c             	sub    esp,0xc
c00199c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00199c4:	50                   	push   eax
c00199c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00199c8:	83 c4 10             	add    esp,0x10
c00199cb:	31 c0                	xor    eax,eax
c00199cd:	83 c4 0c             	add    esp,0xc
c00199d0:	c3                   	ret    
c00199d1:	90                   	nop

c00199d2 <ATAPI::ATAPI()>:
c00199d2:	83 ec 0c             	sub    esp,0xc
c00199d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199d9:	83 ec 04             	sub    esp,0x4
c00199dc:	68 00 08 00 00       	push   0x800
c00199e1:	68 09 ea 01 c0       	push   0xc001ea09
c00199e6:	50                   	push   eax
c00199e7:	e8 fa 17 ff ff       	call   c000b1e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00199ec:	83 c4 10             	add    esp,0x10
c00199ef:	ba 24 e9 01 c0       	mov    edx,0xc001e924
c00199f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199f8:	89 10                	mov    DWORD PTR [eax],edx
c00199fa:	90                   	nop
c00199fb:	83 c4 0c             	add    esp,0xc
c00199fe:	c3                   	ret    
c00199ff:	90                   	nop

c0019a00 <ATAPI::readyForCommand()>:
c0019a00:	56                   	push   esi
c0019a01:	53                   	push   ebx
c0019a02:	53                   	push   ebx
c0019a03:	31 db                	xor    ebx,ebx
c0019a05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a09:	51                   	push   ecx
c0019a0a:	6a 0c                	push   0xc
c0019a0c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019a13:	50                   	push   eax
c0019a14:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019a1a:	e8 39 ec ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0019a1f:	83 c4 10             	add    esp,0x10
c0019a22:	a8 88                	test   al,0x88
c0019a24:	74 25                	je     c0019a4b <ATAPI::readyForCommand()+0x4b>
c0019a26:	43                   	inc    ebx
c0019a27:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0019a2d:	7e da                	jle    c0019a09 <ATAPI::readyForCommand()+0x9>
c0019a2f:	83 ec 0c             	sub    esp,0xc
c0019a32:	68 5e 01 00 00       	push   0x15e
c0019a37:	e8 60 92 ff ff       	call   c0012c9c <milliTenthSleep(unsigned int)>
c0019a3c:	83 c4 10             	add    esp,0x10
c0019a3f:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0019a45:	75 c2                	jne    c0019a09 <ATAPI::readyForCommand()+0x9>
c0019a47:	31 c0                	xor    eax,eax
c0019a49:	eb 02                	jmp    c0019a4d <ATAPI::readyForCommand()+0x4d>
c0019a4b:	b0 01                	mov    al,0x1
c0019a4d:	5a                   	pop    edx
c0019a4e:	5b                   	pop    ebx
c0019a4f:	5e                   	pop    esi
c0019a50:	c3                   	ret    
c0019a51:	90                   	nop

c0019a52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0019a52:	55                   	push   ebp
c0019a53:	57                   	push   edi
c0019a54:	56                   	push   esi
c0019a55:	53                   	push   ebx
c0019a56:	83 ec 20             	sub    esp,0x20
c0019a59:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019a5d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019a61:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019a65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019a69:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019a6d:	6a 01                	push   0x1
c0019a6f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a76:	50                   	push   eax
c0019a77:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a7d:	e8 24 ed ff ff       	call   c00187a6 <IDE::enableIRQs(unsigned char, bool)>
c0019a82:	5e                   	pop    esi
c0019a83:	58                   	pop    eax
c0019a84:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a8b:	50                   	push   eax
c0019a8c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a92:	e8 db ea ff ff       	call   c0018572 <IDE::prepareInterrupt(unsigned char)>
c0019a97:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019a9a:	e8 61 ff ff ff       	call   c0019a00 <ATAPI::readyForCommand()>
c0019a9f:	83 c4 10             	add    esp,0x10
c0019aa2:	84 c0                	test   al,al
c0019aa4:	75 0a                	jne    c0019ab0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0019aa6:	bb 01 00 00 00       	mov    ebx,0x1
c0019aab:	e9 57 02 00 00       	jmp    c0019d07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019ab0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0019ab6:	c1 e0 04             	shl    eax,0x4
c0019ab9:	0f b6 c0             	movzx  eax,al
c0019abc:	50                   	push   eax
c0019abd:	6a 06                	push   0x6
c0019abf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ac6:	50                   	push   eax
c0019ac7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019acd:	e8 c6 ea ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ad2:	6a 00                	push   0x0
c0019ad4:	6a 01                	push   0x1
c0019ad6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019add:	50                   	push   eax
c0019ade:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ae4:	e8 af ea ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ae9:	83 c4 20             	add    esp,0x20
c0019aec:	0f b6 c3             	movzx  eax,bl
c0019aef:	0f b6 df             	movzx  ebx,bh
c0019af2:	50                   	push   eax
c0019af3:	6a 04                	push   0x4
c0019af5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019afc:	50                   	push   eax
c0019afd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b03:	e8 90 ea ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b08:	53                   	push   ebx
c0019b09:	6a 05                	push   0x5
c0019b0b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b12:	50                   	push   eax
c0019b13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b19:	e8 7a ea ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b1e:	83 c4 20             	add    esp,0x20
c0019b21:	68 a0 00 00 00       	push   0xa0
c0019b26:	6a 07                	push   0x7
c0019b28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b2f:	50                   	push   eax
c0019b30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b36:	e8 5d ea ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b3b:	83 c4 0c             	add    esp,0xc
c0019b3e:	6a 01                	push   0x1
c0019b40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b47:	50                   	push   eax
c0019b48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b4e:	e8 e3 f4 ff ff       	call   c0019036 <IDE::polling(unsigned char, unsigned int)>
c0019b53:	83 c4 10             	add    esp,0x10
c0019b56:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0019b5c:	84 c0                	test   al,al
c0019b5e:	74 23                	je     c0019b83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0019b60:	0f b6 d8             	movzx  ebx,al
c0019b63:	0f b6 d2             	movzx  edx,dl
c0019b66:	53                   	push   ebx
c0019b67:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0019b6e:	50                   	push   eax
c0019b6f:	52                   	push   edx
c0019b70:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b76:	e8 0b f4 ff ff       	call   c0018f86 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019b7b:	83 c4 10             	add    esp,0x10
c0019b7e:	e9 84 01 00 00       	jmp    c0019d07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019b83:	0f b6 d2             	movzx  edx,dl
c0019b86:	53                   	push   ebx
c0019b87:	53                   	push   ebx
c0019b88:	52                   	push   edx
c0019b89:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b8f:	e8 f2 e9 ff ff       	call   c0018586 <IDE::getBase(unsigned char)>
c0019b94:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019b98:	b9 06 00 00 00       	mov    ecx,0x6
c0019b9d:	89 c2                	mov    edx,eax
c0019b9f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0019ba2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0019ba6:	83 c4 10             	add    esp,0x10
c0019ba9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019baf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019bb6:	85 db                	test   ebx,ebx
c0019bb8:	0f 84 ec 00 00 00    	je     c0019caa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0019bbe:	51                   	push   ecx
c0019bbf:	51                   	push   ecx
c0019bc0:	52                   	push   edx
c0019bc1:	50                   	push   eax
c0019bc2:	e8 3f eb ff ff       	call   c0018706 <IDE::waitInterrupt(unsigned char)>
c0019bc7:	83 c4 10             	add    esp,0x10
c0019bca:	84 c0                	test   al,al
c0019bcc:	0f 84 d4 fe ff ff    	je     c0019aa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019bd2:	56                   	push   esi
c0019bd3:	56                   	push   esi
c0019bd4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019bdb:	50                   	push   eax
c0019bdc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019be2:	e8 8b e9 ff ff       	call   c0018572 <IDE::prepareInterrupt(unsigned char)>
c0019be7:	83 c4 0c             	add    esp,0xc
c0019bea:	6a 04                	push   0x4
c0019bec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019bf3:	50                   	push   eax
c0019bf4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019bfa:	e8 59 ea ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0019bff:	83 c4 0c             	add    esp,0xc
c0019c02:	89 c6                	mov    esi,eax
c0019c04:	6a 05                	push   0x5
c0019c06:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019c0d:	50                   	push   eax
c0019c0e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c14:	e8 3f ea ff ff       	call   c0018658 <IDE::read(unsigned char, unsigned char)>
c0019c19:	89 f1                	mov    ecx,esi
c0019c1b:	0f b6 c0             	movzx  eax,al
c0019c1e:	0f b6 f1             	movzx  esi,cl
c0019c21:	c1 e0 08             	shl    eax,0x8
c0019c24:	09 c6                	or     esi,eax
c0019c26:	d1 fe                	sar    esi,1
c0019c28:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0019c2c:	83 c4 10             	add    esp,0x10
c0019c2f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019c34:	74 41                	je     c0019c77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0019c36:	31 c9                	xor    ecx,ecx
c0019c38:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019c3e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019c45:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0019c49:	75 0a                	jne    c0019c55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0019c4b:	01 c9                	add    ecx,ecx
c0019c4d:	01 cd                	add    ebp,ecx
c0019c4f:	4b                   	dec    ebx
c0019c50:	e9 54 ff ff ff       	jmp    c0019ba9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0019c55:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0019c5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019c5e:	51                   	push   ecx
c0019c5f:	51                   	push   ecx
c0019c60:	52                   	push   edx
c0019c61:	50                   	push   eax
c0019c62:	e8 1f e9 ff ff       	call   c0018586 <IDE::getBase(unsigned char)>
c0019c67:	89 c2                	mov    edx,eax
c0019c69:	89 f0                	mov    eax,esi
c0019c6b:	66 ef                	out    dx,ax
c0019c6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019c71:	83 c4 10             	add    esp,0x10
c0019c74:	41                   	inc    ecx
c0019c75:	eb c1                	jmp    c0019c38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0019c77:	31 f6                	xor    esi,esi
c0019c79:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019c7f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019c86:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0019c8a:	75 06                	jne    c0019c92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0019c8c:	01 f6                	add    esi,esi
c0019c8e:	01 f5                	add    ebp,esi
c0019c90:	eb bd                	jmp    c0019c4f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0019c92:	51                   	push   ecx
c0019c93:	51                   	push   ecx
c0019c94:	52                   	push   edx
c0019c95:	50                   	push   eax
c0019c96:	e8 eb e8 ff ff       	call   c0018586 <IDE::getBase(unsigned char)>
c0019c9b:	89 c2                	mov    edx,eax
c0019c9d:	66 ed                	in     ax,dx
c0019c9f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0019ca4:	83 c4 10             	add    esp,0x10
c0019ca7:	46                   	inc    esi
c0019ca8:	eb cf                	jmp    c0019c79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0019caa:	51                   	push   ecx
c0019cab:	51                   	push   ecx
c0019cac:	52                   	push   edx
c0019cad:	50                   	push   eax
c0019cae:	e8 53 ea ff ff       	call   c0018706 <IDE::waitInterrupt(unsigned char)>
c0019cb3:	83 c4 10             	add    esp,0x10
c0019cb6:	84 c0                	test   al,al
c0019cb8:	0f 84 e8 fd ff ff    	je     c0019aa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019cbe:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019cc3:	52                   	push   edx
c0019cc4:	52                   	push   edx
c0019cc5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ccc:	50                   	push   eax
c0019ccd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019cd3:	e8 9a e8 ff ff       	call   c0018572 <IDE::prepareInterrupt(unsigned char)>
c0019cd8:	83 c4 10             	add    esp,0x10
c0019cdb:	50                   	push   eax
c0019cdc:	50                   	push   eax
c0019cdd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ce4:	50                   	push   eax
c0019ce5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ceb:	e8 96 e8 ff ff       	call   c0018586 <IDE::getBase(unsigned char)>
c0019cf0:	8d 50 07             	lea    edx,[eax+0x7]
c0019cf3:	ec                   	in     al,dx
c0019cf4:	83 c4 10             	add    esp,0x10
c0019cf7:	a8 88                	test   al,0x88
c0019cf9:	74 0a                	je     c0019d05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0019cfb:	4b                   	dec    ebx
c0019cfc:	75 dd                	jne    c0019cdb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0019cfe:	bb 02 00 00 00       	mov    ebx,0x2
c0019d03:	eb 02                	jmp    c0019d07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019d05:	31 db                	xor    ebx,ebx
c0019d07:	83 c4 1c             	add    esp,0x1c
c0019d0a:	89 d8                	mov    eax,ebx
c0019d0c:	5b                   	pop    ebx
c0019d0d:	5e                   	pop    esi
c0019d0e:	5f                   	pop    edi
c0019d0f:	5d                   	pop    ebp
c0019d10:	c3                   	ret    
c0019d11:	90                   	nop

c0019d12 <ATAPI::diskRemoved()>:
c0019d12:	53                   	push   ebx
c0019d13:	83 ec 14             	sub    esp,0x14
c0019d16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019d1a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019d21:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0019d27:	e8 1a 23 ff ff       	call   c000c046 <LogicalDisk::unmount()>
c0019d2c:	58                   	pop    eax
c0019d2d:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0019d33:	e8 54 2c ff ff       	call   c000c98c <VCache::writeWriteBuffer()>
c0019d38:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019d3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019d42:	83 c4 18             	add    esp,0x18
c0019d45:	5b                   	pop    ebx
c0019d46:	e9 31 2c ff ff       	jmp    c000c97c <VCache::invalidateReadBuffer()>
c0019d4b:	90                   	nop

c0019d4c <ATAPI::eject()>:
c0019d4c:	57                   	push   edi
c0019d4d:	b9 03 00 00 00       	mov    ecx,0x3
c0019d52:	53                   	push   ebx
c0019d53:	83 ec 14             	sub    esp,0x14
c0019d56:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019d5a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019d5e:	fc                   	cld    
c0019d5f:	31 c0                	xor    eax,eax
c0019d61:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019d63:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0019d68:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0019d6d:	50                   	push   eax
c0019d6e:	50                   	push   eax
c0019d6f:	6a 00                	push   0x0
c0019d71:	6a 00                	push   0x0
c0019d73:	6a 00                	push   0x0
c0019d75:	6a 02                	push   0x2
c0019d77:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019d7b:	50                   	push   eax
c0019d7c:	53                   	push   ebx
c0019d7d:	e8 d0 fc ff ff       	call   c0019a52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019d82:	83 c4 14             	add    esp,0x14
c0019d85:	53                   	push   ebx
c0019d86:	e8 87 ff ff ff       	call   c0019d12 <ATAPI::diskRemoved()>
c0019d8b:	83 c4 24             	add    esp,0x24
c0019d8e:	31 c0                	xor    eax,eax
c0019d90:	5b                   	pop    ebx
c0019d91:	5f                   	pop    edi
c0019d92:	c3                   	ret    
c0019d93:	90                   	nop

c0019d94 <ATAPI::diskInserted()>:
c0019d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d98:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0019d9f:	c3                   	ret    

c0019da0 <ATAPI::detectMedia()>:
c0019da0:	56                   	push   esi
c0019da1:	53                   	push   ebx
c0019da2:	83 ec 28             	sub    esp,0x28
c0019da5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019da9:	6a 0c                	push   0xc
c0019dab:	6a 00                	push   0x0
c0019dad:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0019db1:	56                   	push   esi
c0019db2:	e8 39 67 fe ff       	call   c00004f0 <memset>
c0019db7:	58                   	pop    eax
c0019db8:	5a                   	pop    edx
c0019db9:	6a 00                	push   0x0
c0019dbb:	6a 00                	push   0x0
c0019dbd:	6a 00                	push   0x0
c0019dbf:	6a 00                	push   0x0
c0019dc1:	56                   	push   esi
c0019dc2:	53                   	push   ebx
c0019dc3:	e8 8a fc ff ff       	call   c0019a52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019dc8:	83 c4 1c             	add    esp,0x1c
c0019dcb:	6a 0c                	push   0xc
c0019dcd:	6a 00                	push   0x0
c0019dcf:	56                   	push   esi
c0019dd0:	e8 1b 67 fe ff       	call   c00004f0 <memset>
c0019dd5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0019dda:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0019ddf:	59                   	pop    ecx
c0019de0:	58                   	pop    eax
c0019de1:	6a 01                	push   0x1
c0019de3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0019de7:	50                   	push   eax
c0019de8:	6a 00                	push   0x0
c0019dea:	6a 12                	push   0x12
c0019dec:	56                   	push   esi
c0019ded:	53                   	push   ebx
c0019dee:	e8 5f fc ff ff       	call   c0019a52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019df3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0019df7:	83 c4 20             	add    esp,0x20
c0019dfa:	83 e0 7f             	and    eax,0x7f
c0019dfd:	3c 70                	cmp    al,0x70
c0019dff:	74 15                	je     c0019e16 <ATAPI::detectMedia()+0x76>
c0019e01:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019e08:	75 0c                	jne    c0019e16 <ATAPI::detectMedia()+0x76>
c0019e0a:	83 ec 0c             	sub    esp,0xc
c0019e0d:	53                   	push   ebx
c0019e0e:	e8 81 ff ff ff       	call   c0019d94 <ATAPI::diskInserted()>
c0019e13:	83 c4 10             	add    esp,0x10
c0019e16:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019e1a:	83 e0 0f             	and    eax,0xf
c0019e1d:	3c 02                	cmp    al,0x2
c0019e1f:	75 1b                	jne    c0019e3c <ATAPI::detectMedia()+0x9c>
c0019e21:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0019e26:	75 2d                	jne    c0019e55 <ATAPI::detectMedia()+0xb5>
c0019e28:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019e2f:	74 24                	je     c0019e55 <ATAPI::detectMedia()+0xb5>
c0019e31:	83 ec 0c             	sub    esp,0xc
c0019e34:	53                   	push   ebx
c0019e35:	e8 d8 fe ff ff       	call   c0019d12 <ATAPI::diskRemoved()>
c0019e3a:	eb 16                	jmp    c0019e52 <ATAPI::detectMedia()+0xb2>
c0019e3c:	84 c0                	test   al,al
c0019e3e:	75 15                	jne    c0019e55 <ATAPI::detectMedia()+0xb5>
c0019e40:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019e47:	75 0c                	jne    c0019e55 <ATAPI::detectMedia()+0xb5>
c0019e49:	83 ec 0c             	sub    esp,0xc
c0019e4c:	53                   	push   ebx
c0019e4d:	e8 42 ff ff ff       	call   c0019d94 <ATAPI::diskInserted()>
c0019e52:	83 c4 10             	add    esp,0x10
c0019e55:	83 c4 24             	add    esp,0x24
c0019e58:	5b                   	pop    ebx
c0019e59:	5e                   	pop    esi
c0019e5a:	c3                   	ret    
c0019e5b:	90                   	nop

c0019e5c <ATAPI::open(int, int, void*)>:
c0019e5c:	56                   	push   esi
c0019e5d:	53                   	push   ebx
c0019e5e:	50                   	push   eax
c0019e5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e6b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019e71:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019e77:	c1 e0 06             	shl    eax,0x6
c0019e7a:	01 d0                	add    eax,edx
c0019e7c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0019e83:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0019e89:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0019e90:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0019e9a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019ea0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0019ea7:	6a 04                	push   0x4
c0019ea9:	6a 0c                	push   0xc
c0019eab:	51                   	push   ecx
c0019eac:	52                   	push   edx
c0019ead:	e8 e6 e6 ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019eb2:	90                   	nop
c0019eb3:	90                   	nop
c0019eb4:	6a 00                	push   0x0
c0019eb6:	6a 0c                	push   0xc
c0019eb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ebf:	50                   	push   eax
c0019ec0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ec6:	e8 cd e6 ff ff       	call   c0018598 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ecb:	83 c4 14             	add    esp,0x14
c0019ece:	68 74 01 00 00       	push   0x174
c0019ed3:	e8 3d cd fe ff       	call   c0006c15 <malloc>
c0019ed8:	83 c4 0c             	add    esp,0xc
c0019edb:	89 c6                	mov    esi,eax
c0019edd:	6a 00                	push   0x0
c0019edf:	68 ff ff ff 7f       	push   0x7fffffff
c0019ee4:	6a 00                	push   0x0
c0019ee6:	6a 00                	push   0x0
c0019ee8:	53                   	push   ebx
c0019ee9:	68 f2 ea 01 c0       	push   0xc001eaf2
c0019eee:	50                   	push   eax
c0019eef:	e8 9e 1f ff ff       	call   c000be92 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0019ef4:	83 c4 14             	add    esp,0x14
c0019ef7:	56                   	push   esi
c0019ef8:	e8 4b 20 ff ff       	call   c000bf48 <LogicalDisk::assignDriveLetter()>
c0019efd:	5a                   	pop    edx
c0019efe:	0f be c0             	movsx  eax,al
c0019f01:	59                   	pop    ecx
c0019f02:	50                   	push   eax
c0019f03:	68 0c e9 01 c0       	push   0xc001e90c
c0019f08:	e8 cb fa fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c0019f0d:	58                   	pop    eax
c0019f0e:	5a                   	pop    edx
c0019f0f:	56                   	push   esi
c0019f10:	53                   	push   ebx
c0019f11:	e8 02 0f ff ff       	call   c000ae18 <Device::addChild(Device*)>
c0019f16:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0019f1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f1f:	e8 2a 13 ff ff       	call   c000b24e <PhysicalDisk::startCache()>
c0019f24:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019f2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f2e:	e8 6d fe ff ff       	call   c0019da0 <ATAPI::detectMedia()>
c0019f33:	83 c4 14             	add    esp,0x14
c0019f36:	31 c0                	xor    eax,eax
c0019f38:	5b                   	pop    ebx
c0019f39:	5e                   	pop    esi
c0019f3a:	c3                   	ret    
c0019f3b:	90                   	nop

c0019f3c <ATAPI::read(unsigned long long, int, void*)>:
c0019f3c:	55                   	push   ebp
c0019f3d:	57                   	push   edi
c0019f3e:	56                   	push   esi
c0019f3f:	53                   	push   ebx
c0019f40:	83 ec 1c             	sub    esp,0x1c
c0019f43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019f47:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019f4b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019f4f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019f56:	74 3c                	je     c0019f94 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0019f58:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019f5c:	b9 03 00 00 00       	mov    ecx,0x3
c0019f61:	fc                   	cld    
c0019f62:	31 c0                	xor    eax,eax
c0019f64:	0f ce                	bswap  esi
c0019f66:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019f68:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0019f6d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0019f71:	89 e8                	mov    eax,ebp
c0019f73:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019f77:	50                   	push   eax
c0019f78:	50                   	push   eax
c0019f79:	55                   	push   ebp
c0019f7a:	c1 e5 0b             	shl    ebp,0xb
c0019f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019f81:	6a 00                	push   0x0
c0019f83:	55                   	push   ebp
c0019f84:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019f88:	50                   	push   eax
c0019f89:	53                   	push   ebx
c0019f8a:	e8 c3 fa ff ff       	call   c0019a52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019f8f:	83 c4 20             	add    esp,0x20
c0019f92:	eb 1a                	jmp    c0019fae <ATAPI::read(unsigned long long, int, void*)+0x72>
c0019f94:	83 ec 0c             	sub    esp,0xc
c0019f97:	53                   	push   ebx
c0019f98:	e8 03 fe ff ff       	call   c0019da0 <ATAPI::detectMedia()>
c0019f9d:	83 c4 10             	add    esp,0x10
c0019fa0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019fa7:	75 af                	jne    c0019f58 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0019fa9:	b8 02 00 00 00       	mov    eax,0x2
c0019fae:	83 c4 1c             	add    esp,0x1c
c0019fb1:	5b                   	pop    ebx
c0019fb2:	5e                   	pop    esi
c0019fb3:	5f                   	pop    edi
c0019fb4:	5d                   	pop    ebp
c0019fb5:	c3                   	ret    

c0019fb6 <SATA::close(int, int, void*)>:
c0019fb6:	83 ec 0c             	sub    esp,0xc
c0019fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fbd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019fc3:	85 c0                	test   eax,eax
c0019fc5:	74 0c                	je     c0019fd3 <SATA::close(int, int, void*)+0x1d>
c0019fc7:	83 ec 0c             	sub    esp,0xc
c0019fca:	8b 10                	mov    edx,DWORD PTR [eax]
c0019fcc:	50                   	push   eax
c0019fcd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019fd0:	83 c4 10             	add    esp,0x10
c0019fd3:	31 c0                	xor    eax,eax
c0019fd5:	83 c4 0c             	add    esp,0xc
c0019fd8:	c3                   	ret    
c0019fd9:	90                   	nop

c0019fda <SATA::powerSaving(PowerSavingLevel)>:
c0019fda:	c3                   	ret    
c0019fdb:	90                   	nop

c0019fdc <SATA::open(int, int, void*)>:
c0019fdc:	56                   	push   esi
c0019fdd:	53                   	push   ebx
c0019fde:	50                   	push   eax
c0019fdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019fe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019fe7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019ff1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0019ff7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a001:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a005:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a00f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a015:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a01c:	e8 c1 cf fe ff       	call   c0006fe2 <Phys::allocatePage()>
c001a021:	89 c6                	mov    esi,eax
c001a023:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a029:	81 c6 00 10 00 00    	add    esi,0x1000
c001a02f:	e8 ae cf fe ff       	call   c0006fe2 <Phys::allocatePage()>
c001a034:	39 c6                	cmp    esi,eax
c001a036:	74 10                	je     c001a048 <SATA::open(int, int, void*)+0x6c>
c001a038:	83 ec 0c             	sub    esp,0xc
c001a03b:	68 54 e9 01 c0       	push   0xc001e954
c001a040:	e8 e2 54 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001a045:	83 c4 10             	add    esp,0x10
c001a048:	83 ec 0c             	sub    esp,0xc
c001a04b:	6a 02                	push   0x2
c001a04d:	e8 ff e6 fe ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c001a052:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a058:	6a 03                	push   0x3
c001a05a:	50                   	push   eax
c001a05b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a061:	ff 35 74 f5 01 c0    	push   DWORD PTR ds:0xc001f574
c001a067:	e8 3e ed fe ff       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c001a06c:	83 c4 14             	add    esp,0x14
c001a06f:	53                   	push   ebx
c001a070:	e8 d9 11 ff ff       	call   c000b24e <PhysicalDisk::startCache()>
c001a075:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a078:	e8 49 22 ff ff       	call   c000c2c6 <createPartitionsForDisk(PhysicalDisk*)>
c001a07d:	83 c4 14             	add    esp,0x14
c001a080:	31 c0                	xor    eax,eax
c001a082:	5b                   	pop    ebx
c001a083:	5e                   	pop    esi
c001a084:	c3                   	ret    
c001a085:	90                   	nop

c001a086 <SATA::SATA()>:
c001a086:	83 ec 0c             	sub    esp,0xc
c001a089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a08d:	83 ec 04             	sub    esp,0x4
c001a090:	68 00 02 00 00       	push   0x200
c001a095:	68 68 e9 01 c0       	push   0xc001e968
c001a09a:	50                   	push   eax
c001a09b:	e8 46 11 ff ff       	call   c000b1e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a0a0:	83 c4 10             	add    esp,0x10
c001a0a3:	ba d8 e9 01 c0       	mov    edx,0xc001e9d8
c001a0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ac:	89 10                	mov    DWORD PTR [eax],edx
c001a0ae:	90                   	nop
c001a0af:	83 c4 0c             	add    esp,0xc
c001a0b2:	c3                   	ret    
c001a0b3:	90                   	nop

c001a0b4 <SATA::access(unsigned long long, int, void*, bool)>:
c001a0b4:	55                   	push   ebp
c001a0b5:	57                   	push   edi
c001a0b6:	56                   	push   esi
c001a0b7:	53                   	push   ebx
c001a0b8:	83 ec 2c             	sub    esp,0x2c
c001a0bb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a0bf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a0c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0c7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a0cb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a0cf:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a0d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0d8:	7e 10                	jle    c001a0ea <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a0da:	83 ec 0c             	sub    esp,0xc
c001a0dd:	68 78 e9 01 c0       	push   0xc001e978
c001a0e2:	e8 40 54 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0f0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a0f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a0fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a100:	89 d0                	mov    eax,edx
c001a102:	c1 e0 07             	shl    eax,0x7
c001a105:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a109:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a113:	51                   	push   ecx
c001a114:	8d 42 02             	lea    eax,[edx+0x2]
c001a117:	51                   	push   ecx
c001a118:	c1 e0 07             	shl    eax,0x7
c001a11b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a11f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a123:	50                   	push   eax
c001a124:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a12a:	e8 f1 ef ff ff       	call   c0019120 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a12f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a133:	83 c4 10             	add    esp,0x10
c001a136:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a13b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a13f:	0f 84 4f 01 00 00    	je     c001a294 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a145:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a149:	c1 e0 09             	shl    eax,0x9
c001a14c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a151:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a155:	74 0e                	je     c001a165 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a157:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a15d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a161:	89 c1                	mov    ecx,eax
c001a163:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a165:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a169:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a16f:	8d 42 02             	lea    eax,[edx+0x2]
c001a172:	c1 e0 07             	shl    eax,0x7
c001a175:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a179:	8b 00                	mov    eax,DWORD PTR [eax]
c001a17b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a181:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a187:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a18b:	c1 e1 05             	shl    ecx,0x5
c001a18e:	01 c8                	add    eax,ecx
c001a190:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a194:	83 e1 01             	and    ecx,0x1
c001a197:	89 ce                	mov    esi,ecx
c001a199:	8a 08                	mov    cl,BYTE PTR [eax]
c001a19b:	c1 e6 06             	shl    esi,0x6
c001a19e:	83 e1 bf             	and    ecx,0xffffffbf
c001a1a1:	09 f1                	or     ecx,esi
c001a1a3:	88 08                	mov    BYTE PTR [eax],cl
c001a1a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a1a7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a1ad:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a1b3:	89 08                	mov    DWORD PTR [eax],ecx
c001a1b5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a1bb:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a1c1:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a1c7:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a1ca:	50                   	push   eax
c001a1cb:	68 90 00 00 00       	push   0x90
c001a1d0:	6a 00                	push   0x0
c001a1d2:	56                   	push   esi
c001a1d3:	e8 18 63 fe ff       	call   c00004f0 <memset>
c001a1d8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a1de:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a1e2:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a1e8:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a1ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a1f0:	83 c4 10             	add    esp,0x10
c001a1f3:	48                   	dec    eax
c001a1f4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a1f9:	89 c1                	mov    ecx,eax
c001a1fb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a201:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a206:	09 c8                	or     eax,ecx
c001a208:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a20e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a211:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a218:	66 25 00 7f          	and    ax,0x7f00
c001a21c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a220:	66 0d 27 80          	or     ax,0x8027
c001a224:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a229:	66 89 06             	mov    WORD PTR [esi],ax
c001a22c:	19 c0                	sbb    eax,eax
c001a22e:	83 e0 f0             	and    eax,0xfffffff0
c001a231:	83 c0 35             	add    eax,0x35
c001a234:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a237:	89 e8                	mov    eax,ebp
c001a239:	c1 e8 10             	shr    eax,0x10
c001a23c:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a23f:	89 e8                	mov    eax,ebp
c001a241:	c1 e8 18             	shr    eax,0x18
c001a244:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a247:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a24b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a24e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a252:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a255:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a259:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a25d:	89 d6                	mov    esi,edx
c001a25f:	31 c0                	xor    eax,eax
c001a261:	c1 e6 07             	shl    esi,0x7
c001a264:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a268:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a26e:	80 e1 88             	and    cl,0x88
c001a271:	74 0a                	je     c001a27d <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a273:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a278:	74 0a                	je     c001a284 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a27a:	40                   	inc    eax
c001a27b:	eb eb                	jmp    c001a268 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a27d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a282:	75 17                	jne    c001a29b <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a284:	83 ec 0c             	sub    esp,0xc
c001a287:	68 b1 e9 01 c0       	push   0xc001e9b1
c001a28c:	e8 47 f7 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a291:	83 c4 10             	add    esp,0x10
c001a294:	b8 01 00 00 00       	mov    eax,0x1
c001a299:	eb 5d                	jmp    c001a2f8 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a29b:	b8 01 00 00 00       	mov    eax,0x1
c001a2a0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a2a4:	c1 e2 07             	shl    edx,0x7
c001a2a7:	d3 e0                	shl    eax,cl
c001a2a9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a2ad:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a2b3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a2b9:	85 c8                	test   eax,ecx
c001a2bb:	74 16                	je     c001a2d3 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a2bd:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a2c3:	0f ba e1 1e          	bt     ecx,0x1e
c001a2c7:	73 ea                	jae    c001a2b3 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a2c9:	83 ec 0c             	sub    esp,0xc
c001a2cc:	68 bf e9 01 c0       	push   0xc001e9bf
c001a2d1:	eb b9                	jmp    c001a28c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a2d3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a2d9:	0f ba e0 1e          	bt     eax,0x1e
c001a2dd:	72 b5                	jb     c001a294 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a2df:	31 c0                	xor    eax,eax
c001a2e1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a2e6:	75 10                	jne    c001a2f8 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a2e8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a2ee:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a2f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2f8:	83 c4 2c             	add    esp,0x2c
c001a2fb:	5b                   	pop    ebx
c001a2fc:	5e                   	pop    esi
c001a2fd:	5f                   	pop    edi
c001a2fe:	5d                   	pop    ebp
c001a2ff:	c3                   	ret    

c001a300 <SATA::read(unsigned long long, int, void*)>:
c001a300:	57                   	push   edi
c001a301:	b8 04 00 00 00       	mov    eax,0x4
c001a306:	56                   	push   esi
c001a307:	53                   	push   ebx
c001a308:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a30c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a310:	8d 7a ff             	lea    edi,[edx-0x1]
c001a313:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a317:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a31b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a321:	77 25                	ja     c001a348 <SATA::read(unsigned long long, int, void*)+0x48>
c001a323:	b8 06 00 00 00       	mov    eax,0x6
c001a328:	85 f6                	test   esi,esi
c001a32a:	74 1c                	je     c001a348 <SATA::read(unsigned long long, int, void*)+0x48>
c001a32c:	50                   	push   eax
c001a32d:	50                   	push   eax
c001a32e:	6a 00                	push   0x0
c001a330:	56                   	push   esi
c001a331:	52                   	push   edx
c001a332:	53                   	push   ebx
c001a333:	51                   	push   ecx
c001a334:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a338:	e8 77 fd ff ff       	call   c001a0b4 <SATA::access(unsigned long long, int, void*, bool)>
c001a33d:	83 c4 20             	add    esp,0x20
c001a340:	85 c0                	test   eax,eax
c001a342:	0f 95 c0             	setne  al
c001a345:	0f b6 c0             	movzx  eax,al
c001a348:	5b                   	pop    ebx
c001a349:	5e                   	pop    esi
c001a34a:	5f                   	pop    edi
c001a34b:	c3                   	ret    

c001a34c <SATA::write(unsigned long long, int, void*)>:
c001a34c:	55                   	push   ebp
c001a34d:	b8 04 00 00 00       	mov    eax,0x4
c001a352:	57                   	push   edi
c001a353:	56                   	push   esi
c001a354:	53                   	push   ebx
c001a355:	83 ec 0c             	sub    esp,0xc
c001a358:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a35c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a360:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a363:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a367:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a36b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a371:	77 3d                	ja     c001a3b0 <SATA::write(unsigned long long, int, void*)+0x64>
c001a373:	b8 06 00 00 00       	mov    eax,0x6
c001a378:	85 ed                	test   ebp,ebp
c001a37a:	74 34                	je     c001a3b0 <SATA::write(unsigned long long, int, void*)+0x64>
c001a37c:	c1 e3 09             	shl    ebx,0x9
c001a37f:	01 eb                	add    ebx,ebp
c001a381:	89 d6                	mov    esi,edx
c001a383:	89 cf                	mov    edi,ecx
c001a385:	83 c6 01             	add    esi,0x1
c001a388:	83 d7 00             	adc    edi,0x0
c001a38b:	50                   	push   eax
c001a38c:	50                   	push   eax
c001a38d:	6a 01                	push   0x1
c001a38f:	55                   	push   ebp
c001a390:	81 c5 00 02 00 00    	add    ebp,0x200
c001a396:	6a 01                	push   0x1
c001a398:	51                   	push   ecx
c001a399:	52                   	push   edx
c001a39a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a39e:	e8 11 fd ff ff       	call   c001a0b4 <SATA::access(unsigned long long, int, void*, bool)>
c001a3a3:	83 c4 20             	add    esp,0x20
c001a3a6:	89 f2                	mov    edx,esi
c001a3a8:	89 f9                	mov    ecx,edi
c001a3aa:	39 dd                	cmp    ebp,ebx
c001a3ac:	75 d3                	jne    c001a381 <SATA::write(unsigned long long, int, void*)+0x35>
c001a3ae:	31 c0                	xor    eax,eax
c001a3b0:	83 c4 0c             	add    esp,0xc
c001a3b3:	5b                   	pop    ebx
c001a3b4:	5e                   	pop    esi
c001a3b5:	5f                   	pop    edi
c001a3b6:	5d                   	pop    ebp
c001a3b7:	c3                   	ret    

c001a3b8 <SATAPI::write(unsigned long long, int, void*)>:
c001a3b8:	b8 03 00 00 00       	mov    eax,0x3
c001a3bd:	c3                   	ret    

c001a3be <SATAPI::close(int, int, void*)>:
c001a3be:	83 ec 0c             	sub    esp,0xc
c001a3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3c5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a3cb:	85 c0                	test   eax,eax
c001a3cd:	74 0c                	je     c001a3db <SATAPI::close(int, int, void*)+0x1d>
c001a3cf:	83 ec 0c             	sub    esp,0xc
c001a3d2:	8b 10                	mov    edx,DWORD PTR [eax]
c001a3d4:	50                   	push   eax
c001a3d5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a3d8:	83 c4 10             	add    esp,0x10
c001a3db:	31 c0                	xor    eax,eax
c001a3dd:	83 c4 0c             	add    esp,0xc
c001a3e0:	c3                   	ret    
c001a3e1:	90                   	nop

c001a3e2 <SATAPI::SATAPI()>:
c001a3e2:	83 ec 0c             	sub    esp,0xc
c001a3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3e9:	83 ec 04             	sub    esp,0x4
c001a3ec:	68 00 08 00 00       	push   0x800
c001a3f1:	68 08 ea 01 c0       	push   0xc001ea08
c001a3f6:	50                   	push   eax
c001a3f7:	e8 ea 0d ff ff       	call   c000b1e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a3fc:	83 c4 10             	add    esp,0x10
c001a3ff:	ba 44 eb 01 c0       	mov    edx,0xc001eb44
c001a404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a408:	89 10                	mov    DWORD PTR [eax],edx
c001a40a:	90                   	nop
c001a40b:	83 c4 0c             	add    esp,0xc
c001a40e:	c3                   	ret    
c001a40f:	90                   	nop

c001a410 <SATAPI::diskRemoved()>:
c001a410:	c3                   	ret    
c001a411:	90                   	nop

c001a412 <SATAPI::diskInserted()>:
c001a412:	83 ec 18             	sub    esp,0x18
c001a415:	68 14 ea 01 c0       	push   0xc001ea14
c001a41a:	e8 b9 f5 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a41f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a423:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a42a:	83 c4 1c             	add    esp,0x1c
c001a42d:	c3                   	ret    

c001a42e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a42e:	55                   	push   ebp
c001a42f:	57                   	push   edi
c001a430:	56                   	push   esi
c001a431:	53                   	push   ebx
c001a432:	83 ec 38             	sub    esp,0x38
c001a435:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a439:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a43d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a441:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a445:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a449:	68 2c ea 01 c0       	push   0xc001ea2c
c001a44e:	e8 85 f5 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a453:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001a459:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a45f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a463:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001a469:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a46d:	c1 e0 07             	shl    eax,0x7
c001a470:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001a474:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a478:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a482:	5a                   	pop    edx
c001a483:	59                   	pop    ecx
c001a484:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a488:	8d 58 02             	lea    ebx,[eax+0x2]
c001a48b:	c1 e3 07             	shl    ebx,0x7
c001a48e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001a492:	53                   	push   ebx
c001a493:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001a499:	e8 82 ec ff ff       	call   c0019120 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a49e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a4a2:	83 c4 10             	add    esp,0x10
c001a4a5:	b8 01 00 00 00       	mov    eax,0x1
c001a4aa:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a4af:	0f 84 ff 01 00 00    	je     c001a6b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001a4b5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a4bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4bd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a4c3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a4c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4cd:	c1 e1 05             	shl    ecx,0x5
c001a4d0:	01 c8                	add    eax,ecx
c001a4d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a4d4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001a4da:	81 c9 25 00 01 00    	or     ecx,0x10025
c001a4e0:	89 08                	mov    DWORD PTR [eax],ecx
c001a4e2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a4e8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001a4ee:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001a4f4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001a4f7:	8d 7b 40             	lea    edi,[ebx+0x40]
c001a4fa:	50                   	push   eax
c001a4fb:	68 90 00 00 00       	push   0x90
c001a500:	6a 00                	push   0x0
c001a502:	53                   	push   ebx
c001a503:	e8 e8 5f fe ff       	call   c00004f0 <memset>
c001a508:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001a50c:	b9 0c 00 00 00       	mov    ecx,0xc
c001a511:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a513:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001a519:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001a51d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001a523:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001a527:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001a52b:	48                   	dec    eax
c001a52c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a531:	89 c1                	mov    ecx,eax
c001a533:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001a539:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a53e:	09 c8                	or     eax,ecx
c001a540:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001a546:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001a549:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001a550:	66 25 00 7f          	and    ax,0x7f00
c001a554:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a558:	66 0d 27 80          	or     ax,0x8027
c001a55c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001a560:	66 89 03             	mov    WORD PTR [ebx],ax
c001a563:	89 d0                	mov    eax,edx
c001a565:	c1 ea 18             	shr    edx,0x18
c001a568:	c1 e8 10             	shr    eax,0x10
c001a56b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001a56e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001a571:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a575:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001a578:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a57c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001a57f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a583:	83 c4 10             	add    esp,0x10
c001a586:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001a58a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a58e:	31 c0                	xor    eax,eax
c001a590:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001a596:	80 e1 88             	and    cl,0x88
c001a599:	74 0a                	je     c001a5a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001a59b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a5a0:	74 0a                	je     c001a5ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001a5a2:	40                   	inc    eax
c001a5a3:	eb eb                	jmp    c001a590 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001a5a5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a5aa:	75 0a                	jne    c001a5b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001a5ac:	83 ec 0c             	sub    esp,0xc
c001a5af:	68 46 ea 01 c0       	push   0xc001ea46
c001a5b4:	eb 43                	jmp    c001a5f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a5b6:	be 01 00 00 00       	mov    esi,0x1
c001a5bb:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a5bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a5c3:	d3 e6                	shl    esi,cl
c001a5c5:	c1 e7 07             	shl    edi,0x7
c001a5c8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001a5ce:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c001a5d3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001a5d7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001a5dd:	85 c6                	test   esi,eax
c001a5df:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001a5e5:	0f 84 96 00 00 00    	je     c001a681 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c001a5eb:	0f ba e0 1e          	bt     eax,0x1e
c001a5ef:	73 1a                	jae    c001a60b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c001a5f1:	83 ec 0c             	sub    esp,0xc
c001a5f4:	68 5b ea 01 c0       	push   0xc001ea5b
c001a5f9:	e8 da f3 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a5fe:	83 c4 10             	add    esp,0x10
c001a601:	b8 01 00 00 00       	mov    eax,0x1
c001a606:	e9 a9 00 00 00       	jmp    c001a6b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001a60b:	83 fb 0d             	cmp    ebx,0xd
c001a60e:	77 12                	ja     c001a622 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c001a610:	83 ec 0c             	sub    esp,0xc
c001a613:	68 c8 00 00 00       	push   0xc8
c001a618:	e8 7f 86 ff ff       	call   c0012c9c <milliTenthSleep(unsigned int)>
c001a61d:	83 c4 10             	add    esp,0x10
c001a620:	eb 2a                	jmp    c001a64c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001a622:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c001a628:	83 f8 0d             	cmp    eax,0xd
c001a62b:	77 0a                	ja     c001a637 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c001a62d:	83 ec 0c             	sub    esp,0xc
c001a630:	68 58 02 00 00       	push   0x258
c001a635:	eb 28                	jmp    c001a65f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001a637:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c001a63d:	83 f8 0d             	cmp    eax,0xd
c001a640:	77 0a                	ja     c001a64c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001a642:	83 ec 0c             	sub    esp,0xc
c001a645:	68 dc 05 00 00       	push   0x5dc
c001a64a:	eb 13                	jmp    c001a65f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001a64c:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c001a652:	83 f8 0d             	cmp    eax,0xd
c001a655:	77 10                	ja     c001a667 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001a657:	83 ec 0c             	sub    esp,0xc
c001a65a:	68 c4 09 00 00       	push   0x9c4
c001a65f:	e8 38 86 ff ff       	call   c0012c9c <milliTenthSleep(unsigned int)>
c001a664:	83 c4 10             	add    esp,0x10
c001a667:	43                   	inc    ebx
c001a668:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c001a66e:	0f 85 63 ff ff ff    	jne    c001a5d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c001a674:	83 ec 0c             	sub    esp,0xc
c001a677:	68 6e ea 01 c0       	push   0xc001ea6e
c001a67c:	e9 78 ff ff ff       	jmp    c001a5f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a681:	0f ba e0 1e          	bt     eax,0x1e
c001a685:	73 0d                	jae    c001a694 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001a687:	83 ec 0c             	sub    esp,0xc
c001a68a:	68 82 ea 01 c0       	push   0xc001ea82
c001a68f:	e9 65 ff ff ff       	jmp    c001a5f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a694:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001a699:	74 17                	je     c001a6b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001a69b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001a6a0:	74 10                	je     c001a6b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001a6a2:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001a6a8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001a6ac:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a6b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6b2:	31 c0                	xor    eax,eax
c001a6b4:	83 c4 2c             	add    esp,0x2c
c001a6b7:	5b                   	pop    ebx
c001a6b8:	5e                   	pop    esi
c001a6b9:	5f                   	pop    edi
c001a6ba:	5d                   	pop    ebp
c001a6bb:	c3                   	ret    

c001a6bc <SATAPI::eject()>:
c001a6bc:	57                   	push   edi
c001a6bd:	b9 03 00 00 00       	mov    ecx,0x3
c001a6c2:	83 ec 18             	sub    esp,0x18
c001a6c5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a6c9:	fc                   	cld    
c001a6ca:	31 c0                	xor    eax,eax
c001a6cc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a6ce:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a6d3:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a6d8:	50                   	push   eax
c001a6d9:	6a 00                	push   0x0
c001a6db:	6a 00                	push   0x0
c001a6dd:	6a 00                	push   0x0
c001a6df:	6a 00                	push   0x0
c001a6e1:	6a 02                	push   0x2
c001a6e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a6e7:	50                   	push   eax
c001a6e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a6ec:	e8 3d fd ff ff       	call   c001a42e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a6f1:	31 c0                	xor    eax,eax
c001a6f3:	83 c4 38             	add    esp,0x38
c001a6f6:	5f                   	pop    edi
c001a6f7:	c3                   	ret    

c001a6f8 <SATAPI::detectMedia()>:
c001a6f8:	56                   	push   esi
c001a6f9:	53                   	push   ebx
c001a6fa:	83 ec 30             	sub    esp,0x30
c001a6fd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a701:	68 97 ea 01 c0       	push   0xc001ea97
c001a706:	e8 cd f2 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a70b:	83 c4 0c             	add    esp,0xc
c001a70e:	6a 0c                	push   0xc
c001a710:	6a 00                	push   0x0
c001a712:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a716:	56                   	push   esi
c001a717:	e8 d4 5d fe ff       	call   c00004f0 <memset>
c001a71c:	83 c4 0c             	add    esp,0xc
c001a71f:	6a 00                	push   0x0
c001a721:	6a 00                	push   0x0
c001a723:	6a 00                	push   0x0
c001a725:	6a 00                	push   0x0
c001a727:	6a 00                	push   0x0
c001a729:	56                   	push   esi
c001a72a:	53                   	push   ebx
c001a72b:	e8 fe fc ff ff       	call   c001a42e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a730:	83 c4 20             	add    esp,0x20
c001a733:	48                   	dec    eax
c001a734:	74 34                	je     c001a76a <SATAPI::detectMedia()+0x72>
c001a736:	50                   	push   eax
c001a737:	6a 0c                	push   0xc
c001a739:	6a 00                	push   0x0
c001a73b:	56                   	push   esi
c001a73c:	e8 af 5d fe ff       	call   c00004f0 <memset>
c001a741:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a746:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a74b:	83 c4 0c             	add    esp,0xc
c001a74e:	6a 01                	push   0x1
c001a750:	8d 44 24 16          	lea    eax,[esp+0x16]
c001a754:	50                   	push   eax
c001a755:	6a 00                	push   0x0
c001a757:	6a 00                	push   0x0
c001a759:	6a 12                	push   0x12
c001a75b:	56                   	push   esi
c001a75c:	53                   	push   ebx
c001a75d:	e8 cc fc ff ff       	call   c001a42e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a762:	83 c4 20             	add    esp,0x20
c001a765:	48                   	dec    eax
c001a766:	75 39                	jne    c001a7a1 <SATAPI::detectMedia()+0xa9>
c001a768:	eb 1e                	jmp    c001a788 <SATAPI::detectMedia()+0x90>
c001a76a:	83 ec 0c             	sub    esp,0xc
c001a76d:	68 ab ea 01 c0       	push   0xc001eaab
c001a772:	e8 61 f2 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a777:	83 c4 10             	add    esp,0x10
c001a77a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a781:	74 b3                	je     c001a736 <SATAPI::detectMedia()+0x3e>
c001a783:	e9 93 00 00 00       	jmp    c001a81b <SATAPI::detectMedia()+0x123>
c001a788:	83 ec 0c             	sub    esp,0xc
c001a78b:	68 b5 ea 01 c0       	push   0xc001eab5
c001a790:	e8 43 f2 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a795:	83 c4 10             	add    esp,0x10
c001a798:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a79f:	75 7a                	jne    c001a81b <SATAPI::detectMedia()+0x123>
c001a7a1:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a7a5:	83 e0 7f             	and    eax,0x7f
c001a7a8:	3c 70                	cmp    al,0x70
c001a7aa:	74 25                	je     c001a7d1 <SATAPI::detectMedia()+0xd9>
c001a7ac:	83 ec 0c             	sub    esp,0xc
c001a7af:	68 bf ea 01 c0       	push   0xc001eabf
c001a7b4:	e8 1f f2 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a7b9:	83 c4 10             	add    esp,0x10
c001a7bc:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a7c3:	75 0c                	jne    c001a7d1 <SATAPI::detectMedia()+0xd9>
c001a7c5:	83 ec 0c             	sub    esp,0xc
c001a7c8:	53                   	push   ebx
c001a7c9:	e8 44 fc ff ff       	call   c001a412 <SATAPI::diskInserted()>
c001a7ce:	83 c4 10             	add    esp,0x10
c001a7d1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a7d5:	83 e0 0f             	and    eax,0xf
c001a7d8:	3c 02                	cmp    al,0x2
c001a7da:	75 16                	jne    c001a7f2 <SATAPI::detectMedia()+0xfa>
c001a7dc:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a7e1:	75 38                	jne    c001a81b <SATAPI::detectMedia()+0x123>
c001a7e3:	83 ec 0c             	sub    esp,0xc
c001a7e6:	68 c8 ea 01 c0       	push   0xc001eac8
c001a7eb:	e8 e8 f1 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a7f0:	eb 26                	jmp    c001a818 <SATAPI::detectMedia()+0x120>
c001a7f2:	84 c0                	test   al,al
c001a7f4:	75 25                	jne    c001a81b <SATAPI::detectMedia()+0x123>
c001a7f6:	83 ec 0c             	sub    esp,0xc
c001a7f9:	68 d1 ea 01 c0       	push   0xc001ead1
c001a7fe:	e8 d5 f1 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a803:	83 c4 10             	add    esp,0x10
c001a806:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a80d:	75 0c                	jne    c001a81b <SATAPI::detectMedia()+0x123>
c001a80f:	83 ec 0c             	sub    esp,0xc
c001a812:	53                   	push   ebx
c001a813:	e8 fa fb ff ff       	call   c001a412 <SATAPI::diskInserted()>
c001a818:	83 c4 10             	add    esp,0x10
c001a81b:	83 c4 24             	add    esp,0x24
c001a81e:	5b                   	pop    ebx
c001a81f:	5e                   	pop    esi
c001a820:	c3                   	ret    
c001a821:	90                   	nop

c001a822 <SATAPI::open(int, int, void*)>:
c001a822:	56                   	push   esi
c001a823:	53                   	push   ebx
c001a824:	51                   	push   ecx
c001a825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a829:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a82d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a837:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a83d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a847:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a84b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a855:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a85b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a862:	e8 7b c7 fe ff       	call   c0006fe2 <Phys::allocatePage()>
c001a867:	89 c6                	mov    esi,eax
c001a869:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001a86f:	81 c6 00 10 00 00    	add    esi,0x1000
c001a875:	e8 68 c7 fe ff       	call   c0006fe2 <Phys::allocatePage()>
c001a87a:	39 c6                	cmp    esi,eax
c001a87c:	74 10                	je     c001a88e <SATAPI::open(int, int, void*)+0x6c>
c001a87e:	83 ec 0c             	sub    esp,0xc
c001a881:	68 db ea 01 c0       	push   0xc001eadb
c001a886:	e8 9c 4c ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001a88b:	83 c4 10             	add    esp,0x10
c001a88e:	83 ec 0c             	sub    esp,0xc
c001a891:	6a 02                	push   0x2
c001a893:	e8 b9 de fe ff       	call   c0008751 <Virt::allocateKernelVirtualPages(int)>
c001a898:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001a89e:	6a 03                	push   0x3
c001a8a0:	50                   	push   eax
c001a8a1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001a8a7:	ff 35 74 f5 01 c0    	push   DWORD PTR ds:0xc001f574
c001a8ad:	e8 f8 e4 fe ff       	call   c0008daa <VAS::mapPage(unsigned long, unsigned long, int)>
c001a8b2:	83 c4 14             	add    esp,0x14
c001a8b5:	68 74 01 00 00       	push   0x174
c001a8ba:	e8 56 c3 fe ff       	call   c0006c15 <malloc>
c001a8bf:	83 c4 0c             	add    esp,0xc
c001a8c2:	89 c6                	mov    esi,eax
c001a8c4:	6a 00                	push   0x0
c001a8c6:	68 ff ff ff 7f       	push   0x7fffffff
c001a8cb:	6a 00                	push   0x0
c001a8cd:	6a 00                	push   0x0
c001a8cf:	53                   	push   ebx
c001a8d0:	68 f1 ea 01 c0       	push   0xc001eaf1
c001a8d5:	50                   	push   eax
c001a8d6:	e8 b7 15 ff ff       	call   c000be92 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a8db:	83 c4 14             	add    esp,0x14
c001a8de:	56                   	push   esi
c001a8df:	e8 64 16 ff ff       	call   c000bf48 <LogicalDisk::assignDriveLetter()>
c001a8e4:	5a                   	pop    edx
c001a8e5:	0f be c0             	movsx  eax,al
c001a8e8:	59                   	pop    ecx
c001a8e9:	50                   	push   eax
c001a8ea:	68 0c e9 01 c0       	push   0xc001e90c
c001a8ef:	e8 e4 f0 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a8f4:	58                   	pop    eax
c001a8f5:	5a                   	pop    edx
c001a8f6:	56                   	push   esi
c001a8f7:	53                   	push   ebx
c001a8f8:	e8 1b 05 ff ff       	call   c000ae18 <Device::addChild(Device*)>
c001a8fd:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001a903:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a906:	e8 43 09 ff ff       	call   c000b24e <PhysicalDisk::startCache()>
c001a90b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001a912:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a915:	e8 de fd ff ff       	call   c001a6f8 <SATAPI::detectMedia()>
c001a91a:	83 c4 14             	add    esp,0x14
c001a91d:	31 c0                	xor    eax,eax
c001a91f:	5b                   	pop    ebx
c001a920:	5e                   	pop    esi
c001a921:	c3                   	ret    

c001a922 <SATAPI::read(unsigned long long, int, void*)>:
c001a922:	55                   	push   ebp
c001a923:	57                   	push   edi
c001a924:	56                   	push   esi
c001a925:	53                   	push   ebx
c001a926:	83 ec 48             	sub    esp,0x48
c001a929:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a92d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001a931:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c001a935:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a939:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a93d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a941:	68 ff ea 01 c0       	push   0xc001eaff
c001a946:	e8 8d f0 fe ff       	call   c00099d8 <Dbg::kprintf(char const*, ...)>
c001a94b:	83 c4 10             	add    esp,0x10
c001a94e:	83 fb 04             	cmp    ebx,0x4
c001a951:	7e 10                	jle    c001a963 <SATAPI::read(unsigned long long, int, void*)+0x41>
c001a953:	83 ec 0c             	sub    esp,0xc
c001a956:	68 10 eb 01 c0       	push   0xc001eb10
c001a95b:	e8 c7 4b ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001a960:	83 c4 10             	add    esp,0x10
c001a963:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001a967:	31 ed                	xor    ebp,ebp
c001a969:	b9 03 00 00 00       	mov    ecx,0x3
c001a96e:	fc                   	cld    
c001a96f:	89 e8                	mov    eax,ebp
c001a971:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a973:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c001a978:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001a97d:	50                   	push   eax
c001a97e:	6a 00                	push   0x0
c001a980:	6a 00                	push   0x0
c001a982:	6a 00                	push   0x0
c001a984:	6a 00                	push   0x0
c001a986:	6a 02                	push   0x2
c001a988:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a98c:	50                   	push   eax
c001a98d:	56                   	push   esi
c001a98e:	e8 9b fa ff ff       	call   c001a42e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a993:	8d 7c 24 44          	lea    edi,[esp+0x44]
c001a997:	89 e8                	mov    eax,ebp
c001a999:	b9 03 00 00 00       	mov    ecx,0x3
c001a99e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a9a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a9a4:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c001a9a8:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c001a9ad:	0f c8                	bswap  eax
c001a9af:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c001a9b3:	83 c4 1c             	add    esp,0x1c
c001a9b6:	53                   	push   ebx
c001a9b7:	c1 e3 0b             	shl    ebx,0xb
c001a9ba:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001a9be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a9c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a9c6:	53                   	push   ebx
c001a9c7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a9cb:	50                   	push   eax
c001a9cc:	56                   	push   esi
c001a9cd:	e8 5c fa ff ff       	call   c001a42e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a9d2:	83 c4 20             	add    esp,0x20
c001a9d5:	85 c0                	test   eax,eax
c001a9d7:	74 14                	je     c001a9ed <SATAPI::read(unsigned long long, int, void*)+0xcb>
c001a9d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a9dd:	83 ec 0c             	sub    esp,0xc
c001a9e0:	56                   	push   esi
c001a9e1:	e8 12 fd ff ff       	call   c001a6f8 <SATAPI::detectMedia()>
c001a9e6:	83 c4 10             	add    esp,0x10
c001a9e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9ed:	83 c4 3c             	add    esp,0x3c
c001a9f0:	5b                   	pop    ebx
c001a9f1:	5e                   	pop    esi
c001a9f2:	5f                   	pop    edi
c001a9f3:	5d                   	pop    ebp
c001a9f4:	c3                   	ret    
c001a9f5:	90                   	nop

c001a9f6 <IOAPIC::close(int, int, void*)>:
c001a9f6:	b8 00 00 00 00       	mov    eax,0x0
c001a9fb:	c3                   	ret    

c001a9fc <apicGetBase()>:
c001a9fc:	55                   	push   ebp
c001a9fd:	89 e5                	mov    ebp,esp
c001a9ff:	83 ec 18             	sub    esp,0x18
c001aa02:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c001aa07:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001aa0d:	83 e0 08             	and    eax,0x8
c001aa10:	84 c0                	test   al,al
c001aa12:	75 07                	jne    c001aa1b <apicGetBase()+0x1f>
c001aa14:	b8 00 00 00 00       	mov    eax,0x0
c001aa19:	eb 21                	jmp    c001aa3c <apicGetBase()+0x40>
c001aa1b:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c001aa20:	83 ec 08             	sub    esp,0x8
c001aa23:	6a 1b                	push   0x1b
c001aa25:	50                   	push   eax
c001aa26:	e8 e3 b7 fe ff       	call   c000620e <Computer::rdmsr(unsigned int)>
c001aa2b:	83 c4 10             	add    esp,0x10
c001aa2e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001aa31:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001aa34:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aa37:	25 00 f0 ff ff       	and    eax,0xfffff000
c001aa3c:	c9                   	leave  
c001aa3d:	c3                   	ret    

c001aa3e <IOAPIC::IOAPIC()>:
c001aa3e:	83 ec 0c             	sub    esp,0xc
c001aa41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa45:	83 ec 08             	sub    esp,0x8
c001aa48:	68 74 eb 01 c0       	push   0xc001eb74
c001aa4d:	50                   	push   eax
c001aa4e:	e8 5d 05 ff ff       	call   c000afb0 <Device::Device(char const*)>
c001aa53:	83 c4 10             	add    esp,0x10
c001aa56:	ba 84 eb 01 c0       	mov    edx,0xc001eb84
c001aa5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa5f:	89 10                	mov    DWORD PTR [eax],edx
c001aa61:	90                   	nop
c001aa62:	83 c4 0c             	add    esp,0xc
c001aa65:	c3                   	ret    

c001aa66 <apicOpen()>:
c001aa66:	55                   	push   ebp
c001aa67:	89 e5                	mov    ebp,esp
c001aa69:	53                   	push   ebx
c001aa6a:	83 ec 34             	sub    esp,0x34
c001aa6d:	a0 a0 33 02 c0       	mov    al,ds:0xc00233a0
c001aa72:	83 f0 01             	xor    eax,0x1
c001aa75:	84 c0                	test   al,al
c001aa77:	0f 84 9d 00 00 00    	je     c001ab1a <apicOpen()+0xb4>
c001aa7d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001aa81:	a0 60 1d 02 c0       	mov    al,ds:0xc0021d60
c001aa86:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001aa89:	0f 83 84 00 00 00    	jae    c001ab13 <apicOpen()+0xad>
c001aa8f:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001aa96:	83 ec 0c             	sub    esp,0xc
c001aa99:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001aa9c:	e8 74 c1 fe ff       	call   c0006c15 <malloc>
c001aaa1:	83 c4 10             	add    esp,0x10
c001aaa4:	89 c3                	mov    ebx,eax
c001aaa6:	83 ec 0c             	sub    esp,0xc
c001aaa9:	53                   	push   ebx
c001aaaa:	e8 8f ff ff ff       	call   c001aa3e <IOAPIC::IOAPIC()>
c001aaaf:	83 c4 10             	add    esp,0x10
c001aab2:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001aab5:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001aab8:	25 ff 00 00 00       	and    eax,0xff
c001aabd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001aac0:	89 14 85 80 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc80],edx
c001aac7:	a1 60 33 02 c0       	mov    eax,ds:0xc0023360
c001aacc:	40                   	inc    eax
c001aacd:	a3 60 33 02 c0       	mov    ds:0xc0023360,eax
c001aad2:	a1 88 f4 01 c0       	mov    eax,ds:0xc001f488
c001aad7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001aadd:	83 ec 08             	sub    esp,0x8
c001aae0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001aae3:	50                   	push   eax
c001aae4:	e8 2f 03 ff ff       	call   c000ae18 <Device::addChild(Device*)>
c001aae9:	83 c4 10             	add    esp,0x10
c001aaec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001aaef:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaf1:	83 c0 08             	add    eax,0x8
c001aaf4:	8b 10                	mov    edx,DWORD PTR [eax]
c001aaf6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001aaf9:	25 ff 00 00 00       	and    eax,0xff
c001aafe:	6a 00                	push   0x0
c001ab00:	6a 00                	push   0x0
c001ab02:	50                   	push   eax
c001ab03:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ab06:	ff d2                	call   edx
c001ab08:	83 c4 10             	add    esp,0x10
c001ab0b:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001ab0e:	e9 6e ff ff ff       	jmp    c001aa81 <apicOpen()+0x1b>
c001ab13:	c6 05 a0 33 02 c0 01 	mov    BYTE PTR ds:0xc00233a0,0x1
c001ab1a:	e8 dd fe ff ff       	call   c001a9fc <apicGetBase()>
c001ab1f:	05 f0 00 00 00       	add    eax,0xf0
c001ab24:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ab27:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ab2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab2c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ab2f:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ab36:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ab3d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ab40:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ab43:	89 10                	mov    DWORD PTR [eax],edx
c001ab45:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ab4c:	a1 b0 1c 02 c0       	mov    eax,ds:0xc0021cb0
c001ab51:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ab54:	7d 70                	jge    c001abc6 <apicOpen()+0x160>
c001ab56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ab59:	8b 04 85 c0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde340]
c001ab60:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ab63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ab66:	8b 04 85 c0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde340]
c001ab6d:	c1 e8 08             	shr    eax,0x8
c001ab70:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ab74:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ab77:	8b 04 85 c0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde340]
c001ab7e:	c1 e8 18             	shr    eax,0x18
c001ab81:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ab84:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001ab88:	75 37                	jne    c001abc1 <apicOpen()+0x15b>
c001ab8a:	e8 6d fe ff ff       	call   c001a9fc <apicGetBase()>
c001ab8f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ab93:	75 07                	jne    c001ab9c <apicOpen()+0x136>
c001ab95:	ba 60 03 00 00       	mov    edx,0x360
c001ab9a:	eb 05                	jmp    c001aba1 <apicOpen()+0x13b>
c001ab9c:	ba 50 03 00 00       	mov    edx,0x350
c001aba1:	01 d0                	add    eax,edx
c001aba3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001aba6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001aba9:	8b 00                	mov    eax,DWORD PTR [eax]
c001abab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001abae:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001abb5:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001abb9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001abbc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001abbf:	89 10                	mov    DWORD PTR [eax],edx
c001abc1:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001abc4:	eb 86                	jmp    c001ab4c <apicOpen()+0xe6>
c001abc6:	90                   	nop
c001abc7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001abca:	c9                   	leave  
c001abcb:	c3                   	ret    

c001abcc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001abcc:	55                   	push   ebp
c001abcd:	89 e5                	mov    ebp,esp
c001abcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001abd8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001abdb:	72 1d                	jb     c001abfa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001abdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abe0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001abe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abe9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001abef:	01 d0                	add    eax,edx
c001abf1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001abf4:	73 04                	jae    c001abfa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001abf6:	b0 01                	mov    al,0x1
c001abf8:	eb 02                	jmp    c001abfc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001abfa:	b0 00                	mov    al,0x0
c001abfc:	5d                   	pop    ebp
c001abfd:	c3                   	ret    

c001abfe <IOAPIC::read(int)>:
c001abfe:	55                   	push   ebp
c001abff:	89 e5                	mov    ebp,esp
c001ac01:	83 ec 10             	sub    esp,0x10
c001ac04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac07:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ac0d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ac10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ac13:	31 d2                	xor    edx,edx
c001ac15:	88 c2                	mov    dl,al
c001ac17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ac1a:	89 10                	mov    DWORD PTR [eax],edx
c001ac1c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ac1f:	83 c0 10             	add    eax,0x10
c001ac22:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac24:	c9                   	leave  
c001ac25:	c3                   	ret    

c001ac26 <IOAPIC::open(int, int, void*)>:
c001ac26:	55                   	push   ebp
c001ac27:	89 e5                	mov    ebp,esp
c001ac29:	57                   	push   edi
c001ac2a:	56                   	push   esi
c001ac2b:	53                   	push   ebx
c001ac2c:	83 ec 04             	sub    esp,0x4
c001ac2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac32:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ac35:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ac3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac3e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ac44:	8b 14 85 a0 1d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde260]
c001ac4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac4e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ac54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac57:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ac5d:	8b 14 85 20 1e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde1e0]
c001ac64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac67:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ac6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac70:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ac76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac79:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ac7f:	89 c6                	mov    esi,eax
c001ac81:	81 e6 ff 00 00 00    	and    esi,0xff
c001ac87:	89 d0                	mov    eax,edx
c001ac89:	ba 00 00 00 00       	mov    edx,0x0
c001ac8e:	89 c7                	mov    edi,eax
c001ac90:	83 e7 ff             	and    edi,0xffffffff
c001ac93:	89 f9                	mov    ecx,edi
c001ac95:	89 d0                	mov    eax,edx
c001ac97:	25 ff 00 00 00       	and    eax,0xff
c001ac9c:	89 c3                	mov    ebx,eax
c001ac9e:	89 c8                	mov    eax,ecx
c001aca0:	89 da                	mov    edx,ebx
c001aca2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001aca5:	8d 5e 08             	lea    ebx,[esi+0x8]
c001aca8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001acac:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001acb0:	83 e0 00             	and    eax,0x0
c001acb3:	09 d0                	or     eax,edx
c001acb5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001acb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001acbc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001acc2:	8d 50 01             	lea    edx,[eax+0x1]
c001acc5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001acc8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001acce:	31 d2                	xor    edx,edx
c001acd0:	88 c2                	mov    dl,al
c001acd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001acd5:	83 c2 08             	add    edx,0x8
c001acd8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001acdc:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ace2:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ace8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001acec:	6a 01                	push   0x1
c001acee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001acf1:	e8 08 ff ff ff       	call   c001abfe <IOAPIC::read(int)>
c001acf6:	83 c4 08             	add    esp,0x8
c001acf9:	c1 f8 10             	sar    eax,0x10
c001acfc:	25 ff 00 00 00       	and    eax,0xff
c001ad01:	8d 50 01             	lea    edx,[eax+0x1]
c001ad04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad07:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ad0d:	b8 00 00 00 00       	mov    eax,0x0
c001ad12:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ad15:	5b                   	pop    ebx
c001ad16:	5e                   	pop    esi
c001ad17:	5f                   	pop    edi
c001ad18:	5d                   	pop    ebp
c001ad19:	c3                   	ret    

c001ad1a <IOAPIC::write(int, int)>:
c001ad1a:	55                   	push   ebp
c001ad1b:	89 e5                	mov    ebp,esp
c001ad1d:	83 ec 10             	sub    esp,0x10
c001ad20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad23:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ad29:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ad2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ad2f:	31 d2                	xor    edx,edx
c001ad31:	88 c2                	mov    dl,al
c001ad33:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ad36:	89 10                	mov    DWORD PTR [eax],edx
c001ad38:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ad3b:	8d 50 10             	lea    edx,[eax+0x10]
c001ad3e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ad41:	89 02                	mov    DWORD PTR [edx],eax
c001ad43:	90                   	nop
c001ad44:	c9                   	leave  
c001ad45:	c3                   	ret    

c001ad46 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ad46:	55                   	push   ebp
c001ad47:	89 e5                	mov    ebp,esp
c001ad49:	53                   	push   ebx
c001ad4a:	83 ec 2c             	sub    esp,0x2c
c001ad4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ad50:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ad53:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ad56:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ad59:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ad5c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ad5f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ad62:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ad65:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ad68:	88 d8                	mov    al,bl
c001ad6a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ad6d:	88 c8                	mov    al,cl
c001ad6f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ad72:	88 d0                	mov    al,dl
c001ad74:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ad77:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ad7a:	25 ff 00 00 00       	and    eax,0xff
c001ad7f:	83 c0 08             	add    eax,0x8
c001ad82:	01 c0                	add    eax,eax
c001ad84:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ad87:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ad8a:	25 ff 00 00 00       	and    eax,0xff
c001ad8f:	83 c0 08             	add    eax,0x8
c001ad92:	01 c0                	add    eax,eax
c001ad94:	40                   	inc    eax
c001ad95:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ad98:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ad9b:	50                   	push   eax
c001ad9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ad9f:	e8 5a fe ff ff       	call   c001abfe <IOAPIC::read(int)>
c001ada4:	83 c4 08             	add    esp,0x8
c001ada7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001adaa:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001adb1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001adb4:	c1 e0 18             	shl    eax,0x18
c001adb7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001adba:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001adbd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001adc0:	52                   	push   edx
c001adc1:	50                   	push   eax
c001adc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001adc5:	e8 50 ff ff ff       	call   c001ad1a <IOAPIC::write(int, int)>
c001adca:	83 c4 0c             	add    esp,0xc
c001adcd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001add0:	50                   	push   eax
c001add1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001add4:	e8 25 fe ff ff       	call   c001abfe <IOAPIC::read(int)>
c001add9:	83 c4 08             	add    esp,0x8
c001addc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001addf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ade6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001aded:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001adf4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001adf8:	74 09                	je     c001ae03 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001adfa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ae01:	eb 07                	jmp    c001ae0a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001ae03:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ae0a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001ae0e:	74 09                	je     c001ae19 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001ae10:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ae17:	eb 07                	jmp    c001ae20 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001ae19:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ae20:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ae27:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001ae2a:	25 ff 00 00 00       	and    eax,0xff
c001ae2f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ae32:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ae35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ae38:	52                   	push   edx
c001ae39:	50                   	push   eax
c001ae3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ae3d:	e8 d8 fe ff ff       	call   c001ad1a <IOAPIC::write(int, int)>
c001ae42:	83 c4 0c             	add    esp,0xc
c001ae45:	90                   	nop
c001ae46:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ae49:	c9                   	leave  
c001ae4a:	c3                   	ret    
c001ae4b:	90                   	nop

c001ae4c <APICTimer::close(int, int, void*)>:
c001ae4c:	b8 00 00 00 00       	mov    eax,0x0
c001ae51:	c3                   	ret    
c001ae52:	66 90                	xchg   ax,ax

c001ae54 <apicTimerHandler(regs*, void*)>:
c001ae54:	83 ec 0c             	sub    esp,0xc
c001ae57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae5b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ae5d:	b8 10 27 00 00       	mov    eax,0x2710
c001ae62:	ba 00 00 00 00       	mov    edx,0x0
c001ae67:	f7 f1                	div    ecx
c001ae69:	83 ec 0c             	sub    esp,0xc
c001ae6c:	50                   	push   eax
c001ae6d:	e8 3a 18 ff ff       	call   c000c6ac <timerHandler(unsigned int)>
c001ae72:	83 c4 10             	add    esp,0x10
c001ae75:	90                   	nop
c001ae76:	83 c4 0c             	add    esp,0xc
c001ae79:	c3                   	ret    
c001ae7a:	66 90                	xchg   ax,ax

c001ae7c <APICTimer::open(int, int, void*)>:
c001ae7c:	83 ec 0c             	sub    esp,0xc
c001ae7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae83:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae85:	83 c0 24             	add    eax,0x24
c001ae88:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae8a:	83 ec 08             	sub    esp,0x8
c001ae8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae95:	ff d0                	call   eax
c001ae97:	83 c4 10             	add    esp,0x10
c001ae9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aea2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001aea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aeb0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001aeb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aeba:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001aec0:	83 ec 0c             	sub    esp,0xc
c001aec3:	51                   	push   ecx
c001aec4:	6a 01                	push   0x1
c001aec6:	68 54 ae 01 c0       	push   0xc001ae54
c001aecb:	52                   	push   edx
c001aecc:	50                   	push   eax
c001aecd:	e8 f2 fe fe ff       	call   c000adc4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aed2:	83 c4 20             	add    esp,0x20
c001aed5:	89 c2                	mov    edx,eax
c001aed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aedb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001aee1:	b8 00 00 00 00       	mov    eax,0x0
c001aee6:	83 c4 0c             	add    esp,0xc
c001aee9:	c3                   	ret    
c001aeea:	66 90                	xchg   ax,ax

c001aeec <APICTimer::write(int)>:
c001aeec:	83 ec 0c             	sub    esp,0xc
c001aeef:	83 ec 0c             	sub    esp,0xc
c001aef2:	68 a8 eb 01 c0       	push   0xc001eba8
c001aef7:	e8 2b 46 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001aefc:	83 c4 10             	add    esp,0x10
c001aeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001af0d:	90                   	nop
c001af0e:	83 c4 0c             	add    esp,0xc
c001af11:	c3                   	ret    
c001af12:	66 90                	xchg   ax,ax

c001af14 <APICTimer::APICTimer()>:
c001af14:	83 ec 0c             	sub    esp,0xc
c001af17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1b:	83 ec 08             	sub    esp,0x8
c001af1e:	68 b8 eb 01 c0       	push   0xc001ebb8
c001af23:	50                   	push   eax
c001af24:	e8 b7 16 ff ff       	call   c000c5e0 <Timer::Timer(char const*)>
c001af29:	83 c4 10             	add    esp,0x10
c001af2c:	ba cc eb 01 c0       	mov    edx,0xc001ebcc
c001af31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af35:	89 10                	mov    DWORD PTR [eax],edx
c001af37:	90                   	nop
c001af38:	83 c4 0c             	add    esp,0xc
c001af3b:	c3                   	ret    

c001af3c <PIT::write(int)>:
c001af3c:	83 ec 10             	sub    esp,0x10
c001af3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af47:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001af4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af51:	a3 a4 33 02 c0       	mov    ds:0xc00233a4,eax
c001af56:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001af5b:	99                   	cdq    
c001af5c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001af60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af64:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001af6b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001af70:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001af74:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001af79:	ee                   	out    dx,al
c001af7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af7e:	25 ff 00 00 00       	and    eax,0xff
c001af83:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001af8a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001af8e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001af92:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001af97:	ee                   	out    dx,al
c001af98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af9c:	c1 f8 08             	sar    eax,0x8
c001af9f:	25 ff 00 00 00       	and    eax,0xff
c001afa4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001afab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001afaf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001afb3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001afb8:	ee                   	out    dx,al
c001afb9:	90                   	nop
c001afba:	83 c4 10             	add    esp,0x10
c001afbd:	c3                   	ret    
c001afbe:	66 90                	xchg   ax,ax

c001afc0 <pitHandler(regs*, void*)>:
c001afc0:	83 ec 0c             	sub    esp,0xc
c001afc3:	8b 0d a4 33 02 c0    	mov    ecx,DWORD PTR ds:0xc00233a4
c001afc9:	b8 10 27 00 00       	mov    eax,0x2710
c001afce:	99                   	cdq    
c001afcf:	f7 f9                	idiv   ecx
c001afd1:	83 ec 0c             	sub    esp,0xc
c001afd4:	50                   	push   eax
c001afd5:	e8 d2 16 ff ff       	call   c000c6ac <timerHandler(unsigned int)>
c001afda:	83 c4 10             	add    esp,0x10
c001afdd:	90                   	nop
c001afde:	83 c4 0c             	add    esp,0xc
c001afe1:	c3                   	ret    
c001afe2:	66 90                	xchg   ax,ax

c001afe4 <PIT::open(int, int, void*)>:
c001afe4:	83 ec 0c             	sub    esp,0xc
c001afe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001afed:	83 c0 24             	add    eax,0x24
c001aff0:	8b 00                	mov    eax,DWORD PTR [eax]
c001aff2:	83 ec 08             	sub    esp,0x8
c001aff5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aff9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001affd:	ff d0                	call   eax
c001afff:	83 c4 10             	add    esp,0x10
c001b002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b006:	83 ec 0c             	sub    esp,0xc
c001b009:	6a 00                	push   0x0
c001b00b:	6a 01                	push   0x1
c001b00d:	68 c0 af 01 c0       	push   0xc001afc0
c001b012:	6a 00                	push   0x0
c001b014:	50                   	push   eax
c001b015:	e8 aa fd fe ff       	call   c000adc4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b01a:	83 c4 20             	add    esp,0x20
c001b01d:	89 c2                	mov    edx,eax
c001b01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b023:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b029:	b8 00 00 00 00       	mov    eax,0x0
c001b02e:	83 c4 0c             	add    esp,0xc
c001b031:	c3                   	ret    
c001b032:	66 90                	xchg   ax,ax

c001b034 <PIT::close(int, int, void*)>:
c001b034:	83 ec 0c             	sub    esp,0xc
c001b037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b03b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b049:	6a 01                	push   0x1
c001b04b:	68 c0 af 01 c0       	push   0xc001afc0
c001b050:	6a 00                	push   0x0
c001b052:	50                   	push   eax
c001b053:	e8 a2 fd fe ff       	call   c000adfa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b058:	83 c4 10             	add    esp,0x10
c001b05b:	b8 00 00 00 00       	mov    eax,0x0
c001b060:	83 c4 0c             	add    esp,0xc
c001b063:	c3                   	ret    

c001b064 <PIT::PIT()>:
c001b064:	83 ec 0c             	sub    esp,0xc
c001b067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b06b:	83 ec 08             	sub    esp,0x8
c001b06e:	68 f4 eb 01 c0       	push   0xc001ebf4
c001b073:	50                   	push   eax
c001b074:	e8 67 15 ff ff       	call   c000c5e0 <Timer::Timer(char const*)>
c001b079:	83 c4 10             	add    esp,0x10
c001b07c:	ba 1c ec 01 c0       	mov    edx,0xc001ec1c
c001b081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b085:	89 10                	mov    DWORD PTR [eax],edx
c001b087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b08b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b091:	31 d2                	xor    edx,edx
c001b093:	88 c2                	mov    dl,al
c001b095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b099:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b0aa:	31 d2                	xor    edx,edx
c001b0ac:	88 c2                	mov    dl,al
c001b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0b2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b0c1:	8d 50 01             	lea    edx,[eax+0x1]
c001b0c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0c8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b0ce:	31 d2                	xor    edx,edx
c001b0d0:	88 c2                	mov    dl,al
c001b0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0d6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b0da:	83 e1 3f             	and    ecx,0x3f
c001b0dd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b0e1:	90                   	nop
c001b0e2:	83 c4 0c             	add    esp,0xc
c001b0e5:	c3                   	ret    
c001b0e6:	66 90                	xchg   ax,ax
c001b0e8:	66 90                	xchg   ax,ax
c001b0ea:	66 90                	xchg   ax,ax
c001b0ec:	66 90                	xchg   ax,ax
c001b0ee:	66 90                	xchg   ax,ax

c001b0f0 <avxDetect>:
c001b0f0:	b8 01 00 00 00       	mov    eax,0x1
c001b0f5:	0f a2                	cpuid  
c001b0f7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b0fd:	74 15                	je     c001b114 <avxDetect.noAVX>
c001b0ff:	b8 01 00 00 00       	mov    eax,0x1
c001b104:	0f a2                	cpuid  
c001b106:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b10c:	74 06                	je     c001b114 <avxDetect.noAVX>
c001b10e:	b8 01 00 00 00       	mov    eax,0x1
c001b113:	c3                   	ret    

c001b114 <avxDetect.noAVX>:
c001b114:	b8 00 00 00 00       	mov    eax,0x0
c001b119:	c3                   	ret    

c001b11a <avxSave>:
c001b11a:	53                   	push   ebx
c001b11b:	52                   	push   edx
c001b11c:	31 c0                	xor    eax,eax
c001b11e:	48                   	dec    eax
c001b11f:	89 c2                	mov    edx,eax
c001b121:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b125:	0f ae 23             	xsave  [ebx]
c001b128:	5a                   	pop    edx
c001b129:	5b                   	pop    ebx
c001b12a:	c3                   	ret    

c001b12b <avxLoad>:
c001b12b:	53                   	push   ebx
c001b12c:	52                   	push   edx
c001b12d:	31 c0                	xor    eax,eax
c001b12f:	48                   	dec    eax
c001b130:	89 c2                	mov    edx,eax
c001b132:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b136:	0f ae 2b             	xrstor [ebx]
c001b139:	5a                   	pop    edx
c001b13a:	5b                   	pop    ebx
c001b13b:	c3                   	ret    

c001b13c <avxInit>:
c001b13c:	e8 57 02 00 00       	call   c001b398 <sseInit>
c001b141:	50                   	push   eax
c001b142:	51                   	push   ecx
c001b143:	0f 20 e0             	mov    eax,cr4
c001b146:	0d 00 00 04 00       	or     eax,0x40000
c001b14b:	0f 22 e0             	mov    cr4,eax
c001b14e:	31 c9                	xor    ecx,ecx
c001b150:	0f 01 d0             	xgetbv 
c001b153:	0d 07 00 00 00       	or     eax,0x7
c001b158:	0f 01 d1             	xsetbv 
c001b15b:	59                   	pop    ecx
c001b15c:	58                   	pop    eax
c001b15d:	c3                   	ret    

c001b15e <avxClose>:
c001b15e:	c3                   	ret    

c001b15f <wouldSheSayYes>:
c001b15f:	c3                   	ret    
c001b160:	49                   	dec    ecx
c001b161:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b165:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b169:	75 20                	jne    c001b18b <isr0+0xb>
c001b16b:	4e                   	dec    esi
c001b16c:	79 61                	jns    c001b1cf <isr7+0x3>
c001b16e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b173:	66 90                	xchg   ax,ax
c001b175:	66 90                	xchg   ax,ax
c001b177:	66 90                	xchg   ax,ax
c001b179:	66 90                	xchg   ax,ax
c001b17b:	66 90                	xchg   ax,ax
c001b17d:	66 90                	xchg   ax,ax
c001b17f:	90                   	nop

c001b180 <isr0>:
c001b180:	fa                   	cli    
c001b181:	68 00 00 00 00       	push   0x0
c001b186:	68 00 00 00 00       	push   0x0
c001b18b:	e9 44 01 00 00       	jmp    c001b2d4 <int_common_stub>

c001b190 <isr1>:
c001b190:	fa                   	cli    
c001b191:	6a 00                	push   0x0
c001b193:	6a 01                	push   0x1
c001b195:	e9 3a 01 00 00       	jmp    c001b2d4 <int_common_stub>

c001b19a <isr2>:
c001b19a:	fa                   	cli    
c001b19b:	6a 00                	push   0x0
c001b19d:	6a 02                	push   0x2
c001b19f:	e9 30 01 00 00       	jmp    c001b2d4 <int_common_stub>

c001b1a4 <isr3>:
c001b1a4:	fa                   	cli    
c001b1a5:	6a 00                	push   0x0
c001b1a7:	6a 03                	push   0x3
c001b1a9:	e9 26 01 00 00       	jmp    c001b2d4 <int_common_stub>

c001b1ae <isr4>:
c001b1ae:	fa                   	cli    
c001b1af:	6a 00                	push   0x0
c001b1b1:	6a 04                	push   0x4
c001b1b3:	e9 1c 01 00 00       	jmp    c001b2d4 <int_common_stub>

c001b1b8 <isr5>:
c001b1b8:	fa                   	cli    
c001b1b9:	6a 00                	push   0x0
c001b1bb:	6a 05                	push   0x5
c001b1bd:	e9 12 01 00 00       	jmp    c001b2d4 <int_common_stub>

c001b1c2 <isr6>:
c001b1c2:	fa                   	cli    
c001b1c3:	6a 00                	push   0x0
c001b1c5:	6a 06                	push   0x6
c001b1c7:	e9 08 01 00 00       	jmp    c001b2d4 <int_common_stub>

c001b1cc <isr7>:
c001b1cc:	fa                   	cli    
c001b1cd:	6a 00                	push   0x0
c001b1cf:	6a 07                	push   0x7
c001b1d1:	e9 fe 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b1d6 <isr8>:
c001b1d6:	fa                   	cli    
c001b1d7:	6a 08                	push   0x8
c001b1d9:	e9 f6 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b1de <isr9>:
c001b1de:	fa                   	cli    
c001b1df:	6a 00                	push   0x0
c001b1e1:	6a 09                	push   0x9
c001b1e3:	e9 ec 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b1e8 <isr10>:
c001b1e8:	fa                   	cli    
c001b1e9:	6a 0a                	push   0xa
c001b1eb:	e9 e4 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b1f0 <isr11>:
c001b1f0:	fa                   	cli    
c001b1f1:	6a 0b                	push   0xb
c001b1f3:	e9 dc 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b1f8 <isr12>:
c001b1f8:	fa                   	cli    
c001b1f9:	6a 0c                	push   0xc
c001b1fb:	e9 d4 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b200 <isr13>:
c001b200:	fa                   	cli    
c001b201:	6a 0d                	push   0xd
c001b203:	e9 cc 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b208 <isr14>:
c001b208:	fa                   	cli    
c001b209:	6a 0e                	push   0xe
c001b20b:	e9 c4 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b210 <isr15>:
c001b210:	fa                   	cli    
c001b211:	6a 00                	push   0x0
c001b213:	6a 0f                	push   0xf
c001b215:	e9 ba 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b21a <isr16>:
c001b21a:	fa                   	cli    
c001b21b:	6a 00                	push   0x0
c001b21d:	6a 10                	push   0x10
c001b21f:	e9 b0 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b224 <isr17>:
c001b224:	fa                   	cli    
c001b225:	6a 00                	push   0x0
c001b227:	6a 11                	push   0x11
c001b229:	e9 a6 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b22e <isr18>:
c001b22e:	fa                   	cli    
c001b22f:	6a 00                	push   0x0
c001b231:	6a 12                	push   0x12
c001b233:	e9 9c 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b238 <irq3>:
c001b238:	fa                   	cli    
c001b239:	6a 00                	push   0x0
c001b23b:	6a 23                	push   0x23
c001b23d:	e9 92 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b242 <irq4>:
c001b242:	fa                   	cli    
c001b243:	6a 00                	push   0x0
c001b245:	6a 24                	push   0x24
c001b247:	e9 88 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b24c <irq5>:
c001b24c:	fa                   	cli    
c001b24d:	6a 00                	push   0x0
c001b24f:	6a 25                	push   0x25
c001b251:	e9 7e 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b256 <irq6>:
c001b256:	fa                   	cli    
c001b257:	6a 00                	push   0x0
c001b259:	6a 26                	push   0x26
c001b25b:	e9 74 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b260 <irq7>:
c001b260:	fa                   	cli    
c001b261:	6a 00                	push   0x0
c001b263:	6a 27                	push   0x27
c001b265:	e9 6a 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b26a <irq8>:
c001b26a:	fa                   	cli    
c001b26b:	6a 00                	push   0x0
c001b26d:	6a 28                	push   0x28
c001b26f:	e9 60 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b274 <irq9>:
c001b274:	fa                   	cli    
c001b275:	6a 00                	push   0x0
c001b277:	6a 29                	push   0x29
c001b279:	e9 56 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b27e <irq10>:
c001b27e:	fa                   	cli    
c001b27f:	6a 00                	push   0x0
c001b281:	6a 2a                	push   0x2a
c001b283:	e9 4c 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b288 <irq11>:
c001b288:	fa                   	cli    
c001b289:	6a 00                	push   0x0
c001b28b:	6a 2b                	push   0x2b
c001b28d:	e9 42 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b292 <irq12>:
c001b292:	fa                   	cli    
c001b293:	6a 00                	push   0x0
c001b295:	6a 2c                	push   0x2c
c001b297:	e9 38 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b29c <irq13>:
c001b29c:	fa                   	cli    
c001b29d:	6a 00                	push   0x0
c001b29f:	6a 2d                	push   0x2d
c001b2a1:	e9 2e 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b2a6 <irq14>:
c001b2a6:	fa                   	cli    
c001b2a7:	6a 00                	push   0x0
c001b2a9:	6a 2e                	push   0x2e
c001b2ab:	e9 24 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b2b0 <irq15>:
c001b2b0:	fa                   	cli    
c001b2b1:	6a 00                	push   0x0
c001b2b3:	6a 2f                	push   0x2f
c001b2b5:	e9 1a 00 00 00       	jmp    c001b2d4 <int_common_stub>

c001b2ba <irq1>:
c001b2ba:	fa                   	cli    
c001b2bb:	6a 00                	push   0x0
c001b2bd:	6a 21                	push   0x21
c001b2bf:	eb 13                	jmp    c001b2d4 <int_common_stub>

c001b2c1 <irq2>:
c001b2c1:	fa                   	cli    
c001b2c2:	6a 00                	push   0x0
c001b2c4:	6a 22                	push   0x22
c001b2c6:	eb 0c                	jmp    c001b2d4 <int_common_stub>

c001b2c8 <isr96>:
c001b2c8:	6a 00                	push   0x0
c001b2ca:	6a 60                	push   0x60
c001b2cc:	fb                   	sti    
c001b2cd:	eb 05                	jmp    c001b2d4 <int_common_stub>

c001b2cf <irq0>:
c001b2cf:	fa                   	cli    
c001b2d0:	6a 00                	push   0x0
c001b2d2:	6a 20                	push   0x20

c001b2d4 <int_common_stub>:
c001b2d4:	60                   	pusha  
c001b2d5:	1e                   	push   ds
c001b2d6:	06                   	push   es
c001b2d7:	0f a0                	push   fs
c001b2d9:	0f a8                	push   gs
c001b2db:	66 b8 10 00          	mov    ax,0x10
c001b2df:	66 8e d8             	mov    ds,ax
c001b2e2:	66 8e c0             	mov    es,ax
c001b2e5:	66 8e e0             	mov    fs,ax
c001b2e8:	66 8e e8             	mov    gs,ax
c001b2eb:	54                   	push   esp
c001b2ec:	fc                   	cld    
c001b2ed:	e8 d2 ff fe ff       	call   c000b2c4 <int_handler>
c001b2f2:	81 c4 04 00 00 00    	add    esp,0x4
c001b2f8:	0f a9                	pop    gs
c001b2fa:	0f a1                	pop    fs
c001b2fc:	07                   	pop    es
c001b2fd:	1f                   	pop    ds
c001b2fe:	61                   	popa   
c001b2ff:	81 c4 08 00 00 00    	add    esp,0x8
c001b305:	cf                   	iret   

c001b306 <irq16>:
c001b306:	fa                   	cli    
c001b307:	6a 00                	push   0x0
c001b309:	6a 30                	push   0x30
c001b30b:	e9 c4 ff ff ff       	jmp    c001b2d4 <int_common_stub>

c001b310 <irq17>:
c001b310:	fa                   	cli    
c001b311:	6a 00                	push   0x0
c001b313:	6a 31                	push   0x31
c001b315:	e9 ba ff ff ff       	jmp    c001b2d4 <int_common_stub>

c001b31a <irq18>:
c001b31a:	fa                   	cli    
c001b31b:	6a 00                	push   0x0
c001b31d:	6a 32                	push   0x32
c001b31f:	e9 b0 ff ff ff       	jmp    c001b2d4 <int_common_stub>

c001b324 <irq19>:
c001b324:	fa                   	cli    
c001b325:	6a 00                	push   0x0
c001b327:	6a 33                	push   0x33
c001b329:	e9 a6 ff ff ff       	jmp    c001b2d4 <int_common_stub>

c001b32e <irq20>:
c001b32e:	fa                   	cli    
c001b32f:	6a 00                	push   0x0
c001b331:	6a 34                	push   0x34
c001b333:	e9 9c ff ff ff       	jmp    c001b2d4 <int_common_stub>

c001b338 <irq21>:
c001b338:	fa                   	cli    
c001b339:	6a 00                	push   0x0
c001b33b:	6a 35                	push   0x35
c001b33d:	e9 92 ff ff ff       	jmp    c001b2d4 <int_common_stub>

c001b342 <irq22>:
c001b342:	fa                   	cli    
c001b343:	6a 00                	push   0x0
c001b345:	6a 36                	push   0x36
c001b347:	e9 88 ff ff ff       	jmp    c001b2d4 <int_common_stub>

c001b34c <irq23>:
c001b34c:	fa                   	cli    
c001b34d:	6a 00                	push   0x0
c001b34f:	6a 37                	push   0x37
c001b351:	e9 7e ff ff ff       	jmp    c001b2d4 <int_common_stub>
c001b356:	66 90                	xchg   ax,ax
c001b358:	66 90                	xchg   ax,ax
c001b35a:	66 90                	xchg   ax,ax
c001b35c:	66 90                	xchg   ax,ax
c001b35e:	66 90                	xchg   ax,ax

c001b360 <i386GetRDRAND>:
c001b360:	b9 64 00 00 00       	mov    ecx,0x64

c001b365 <retry>:
c001b365:	0f c7 f0             	rdrand eax
c001b368:	72 05                	jb     c001b36f <retry.done>
c001b36a:	e2 f9                	loop   c001b365 <retry>

c001b36c <retry.fail>:
c001b36c:	31 c0                	xor    eax,eax
c001b36e:	c3                   	ret    

c001b36f <retry.done>:
c001b36f:	c3                   	ret    

c001b370 <absolutelyNoChanceInHell>:
c001b370:	b8 01 00 00 00       	mov    eax,0x1
c001b375:	0f a2                	cpuid  
c001b377:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b37d:	74 06                	je     c001b385 <sseDetect.noSSE>
c001b37f:	b8 01 00 00 00       	mov    eax,0x1
c001b384:	c3                   	ret    

c001b385 <sseDetect.noSSE>:
c001b385:	31 c0                	xor    eax,eax
c001b387:	c3                   	ret    

c001b388 <sseSave>:
c001b388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b38c:	0f ae 00             	fxsave [eax]
c001b38f:	c3                   	ret    

c001b390 <sseLoad>:
c001b390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b394:	0f ae 08             	fxrstor [eax]
c001b397:	c3                   	ret    

c001b398 <sseInit>:
c001b398:	e8 42 00 00 00       	call   c001b3df <x87Init>
c001b39d:	0f 20 e0             	mov    eax,cr4
c001b3a0:	66 0d 00 06          	or     ax,0x600
c001b3a4:	0f 22 e0             	mov    cr4,eax
c001b3a7:	c3                   	ret    

c001b3a8 <sseClose>:
c001b3a8:	c3                   	ret    
c001b3a9:	66 90                	xchg   ax,ax
c001b3ab:	66 90                	xchg   ax,ax
c001b3ad:	66 90                	xchg   ax,ax
c001b3af:	90                   	nop

c001b3b0 <value_37F>:
c001b3b0:	7f 03                	jg     c001b3b5 <value_37A+0x1>

c001b3b2 <value_37E>:
c001b3b2:	7e 03                	jle    c001b3b7 <x87Detect+0x1>

c001b3b4 <value_37A>:
c001b3b4:	7a 03                	jp     c001b3b9 <x87Detect+0x3>

c001b3b6 <x87Detect>:
c001b3b6:	b8 01 00 00 00       	mov    eax,0x1
c001b3bb:	0f a2                	cpuid  
c001b3bd:	f7 c2 01 00 00 00    	test   edx,0x1
c001b3c3:	74 06                	je     c001b3cb <x87Detect.nox87>
c001b3c5:	b8 01 00 00 00       	mov    eax,0x1
c001b3ca:	c3                   	ret    

c001b3cb <x87Detect.nox87>:
c001b3cb:	b8 00 00 00 00       	mov    eax,0x0
c001b3d0:	c3                   	ret    

c001b3d1 <x87Save>:
c001b3d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3d5:	dd 30                	fnsave [eax]
c001b3d7:	c3                   	ret    

c001b3d8 <x87Load>:
c001b3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3dc:	dd 20                	frstor [eax]
c001b3de:	c3                   	ret    

c001b3df <x87Init>:
c001b3df:	0f 20 c0             	mov    eax,cr0
c001b3e2:	66 25 fb ff          	and    ax,0xfffb
c001b3e6:	66 0d 22 00          	or     ax,0x22
c001b3ea:	0f 22 c0             	mov    cr0,eax
c001b3ed:	db e3                	fninit 
c001b3ef:	0f 06                	clts   
c001b3f1:	d9 2d b4 b3 01 c0    	fldcw  WORD PTR ds:0xc001b3b4
c001b3f7:	c3                   	ret    

c001b3f8 <x87Close>:
c001b3f8:	c3                   	ret    
c001b3f9:	66 90                	xchg   ax,ax
c001b3fb:	90                   	nop

c001b3fc <__do_global_ctors_aux>:
c001b3fc:	a1 ac c3 01 c0       	mov    eax,ds:0xc001c3ac
c001b401:	83 f8 ff             	cmp    eax,0xffffffff
c001b404:	74 1a                	je     c001b420 <__do_global_ctors_aux+0x24>
c001b406:	55                   	push   ebp
c001b407:	89 e5                	mov    ebp,esp
c001b409:	53                   	push   ebx
c001b40a:	52                   	push   edx
c001b40b:	bb ac c3 01 c0       	mov    ebx,0xc001c3ac
c001b410:	ff d0                	call   eax
c001b412:	83 eb 04             	sub    ebx,0x4
c001b415:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b417:	83 f8 ff             	cmp    eax,0xffffffff
c001b41a:	75 f4                	jne    c001b410 <__do_global_ctors_aux+0x14>
c001b41c:	58                   	pop    eax
c001b41d:	5b                   	pop    ebx
c001b41e:	5d                   	pop    ebp
c001b41f:	c3                   	ret    
c001b420:	c3                   	ret    
c001b421:	66 90                	xchg   ax,ax
c001b423:	90                   	nop

c001b424 <__divdi3>:
c001b424:	55                   	push   ebp
c001b425:	57                   	push   edi
c001b426:	56                   	push   esi
c001b427:	53                   	push   ebx
c001b428:	83 ec 1c             	sub    esp,0x1c
c001b42b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b42f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b433:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b436:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b43a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b43e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b442:	85 db                	test   ebx,ebx
c001b444:	0f 88 8e 00 00 00    	js     c001b4d8 <__divdi3+0xb4>
c001b44a:	89 dd                	mov    ebp,ebx
c001b44c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b454:	89 d3                	mov    ebx,edx
c001b456:	85 d2                	test   edx,edx
c001b458:	79 0d                	jns    c001b467 <__divdi3+0x43>
c001b45a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b45e:	f7 d8                	neg    eax
c001b460:	83 d2 00             	adc    edx,0x0
c001b463:	f7 da                	neg    edx
c001b465:	89 d3                	mov    ebx,edx
c001b467:	89 c7                	mov    edi,eax
c001b469:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b46c:	85 db                	test   ebx,ebx
c001b46e:	75 48                	jne    c001b4b8 <__divdi3+0x94>
c001b470:	39 ef                	cmp    edi,ebp
c001b472:	76 24                	jbe    c001b498 <__divdi3+0x74>
c001b474:	89 ea                	mov    edx,ebp
c001b476:	f7 f7                	div    edi
c001b478:	89 c1                	mov    ecx,eax
c001b47a:	31 f6                	xor    esi,esi
c001b47c:	89 c8                	mov    eax,ecx
c001b47e:	89 f2                	mov    edx,esi
c001b480:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b484:	85 c9                	test   ecx,ecx
c001b486:	74 07                	je     c001b48f <__divdi3+0x6b>
c001b488:	f7 d8                	neg    eax
c001b48a:	83 d2 00             	adc    edx,0x0
c001b48d:	f7 da                	neg    edx
c001b48f:	83 c4 1c             	add    esp,0x1c
c001b492:	5b                   	pop    ebx
c001b493:	5e                   	pop    esi
c001b494:	5f                   	pop    edi
c001b495:	5d                   	pop    ebp
c001b496:	c3                   	ret    
c001b497:	90                   	nop
c001b498:	85 ff                	test   edi,edi
c001b49a:	75 0b                	jne    c001b4a7 <__divdi3+0x83>
c001b49c:	b8 01 00 00 00       	mov    eax,0x1
c001b4a1:	31 d2                	xor    edx,edx
c001b4a3:	f7 f3                	div    ebx
c001b4a5:	89 c7                	mov    edi,eax
c001b4a7:	31 d2                	xor    edx,edx
c001b4a9:	89 e8                	mov    eax,ebp
c001b4ab:	f7 f7                	div    edi
c001b4ad:	89 c6                	mov    esi,eax
c001b4af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b4b2:	f7 f7                	div    edi
c001b4b4:	89 c1                	mov    ecx,eax
c001b4b6:	eb c4                	jmp    c001b47c <__divdi3+0x58>
c001b4b8:	39 eb                	cmp    ebx,ebp
c001b4ba:	77 3c                	ja     c001b4f8 <__divdi3+0xd4>
c001b4bc:	0f bd f3             	bsr    esi,ebx
c001b4bf:	83 f6 1f             	xor    esi,0x1f
c001b4c2:	75 40                	jne    c001b504 <__divdi3+0xe0>
c001b4c4:	39 eb                	cmp    ebx,ebp
c001b4c6:	72 09                	jb     c001b4d1 <__divdi3+0xad>
c001b4c8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b4cb:	0f 87 97 00 00 00    	ja     c001b568 <__divdi3+0x144>
c001b4d1:	b9 01 00 00 00       	mov    ecx,0x1
c001b4d6:	eb a4                	jmp    c001b47c <__divdi3+0x58>
c001b4d8:	f7 d9                	neg    ecx
c001b4da:	83 d3 00             	adc    ebx,0x0
c001b4dd:	f7 db                	neg    ebx
c001b4df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b4e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b4e6:	89 dd                	mov    ebp,ebx
c001b4e8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001b4f0:	e9 5f ff ff ff       	jmp    c001b454 <__divdi3+0x30>
c001b4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4f8:	31 f6                	xor    esi,esi
c001b4fa:	31 c9                	xor    ecx,ecx
c001b4fc:	e9 7b ff ff ff       	jmp    c001b47c <__divdi3+0x58>
c001b501:	8d 76 00             	lea    esi,[esi+0x0]
c001b504:	b8 20 00 00 00       	mov    eax,0x20
c001b509:	29 f0                	sub    eax,esi
c001b50b:	89 f1                	mov    ecx,esi
c001b50d:	d3 e3                	shl    ebx,cl
c001b50f:	89 fa                	mov    edx,edi
c001b511:	88 c1                	mov    cl,al
c001b513:	d3 ea                	shr    edx,cl
c001b515:	09 da                	or     edx,ebx
c001b517:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b51b:	89 f1                	mov    ecx,esi
c001b51d:	d3 e7                	shl    edi,cl
c001b51f:	89 eb                	mov    ebx,ebp
c001b521:	88 c1                	mov    cl,al
c001b523:	d3 eb                	shr    ebx,cl
c001b525:	89 f1                	mov    ecx,esi
c001b527:	d3 e5                	shl    ebp,cl
c001b529:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001b52c:	88 c1                	mov    cl,al
c001b52e:	d3 ea                	shr    edx,cl
c001b530:	09 d5                	or     ebp,edx
c001b532:	89 e8                	mov    eax,ebp
c001b534:	89 da                	mov    edx,ebx
c001b536:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001b53a:	89 d3                	mov    ebx,edx
c001b53c:	89 c5                	mov    ebp,eax
c001b53e:	f7 e7                	mul    edi
c001b540:	39 d3                	cmp    ebx,edx
c001b542:	72 18                	jb     c001b55c <__divdi3+0x138>
c001b544:	74 0a                	je     c001b550 <__divdi3+0x12c>
c001b546:	89 e9                	mov    ecx,ebp
c001b548:	31 f6                	xor    esi,esi
c001b54a:	e9 2d ff ff ff       	jmp    c001b47c <__divdi3+0x58>
c001b54f:	90                   	nop
c001b550:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001b553:	89 f1                	mov    ecx,esi
c001b555:	d3 e7                	shl    edi,cl
c001b557:	39 c7                	cmp    edi,eax
c001b559:	73 eb                	jae    c001b546 <__divdi3+0x122>
c001b55b:	90                   	nop
c001b55c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001b55f:	31 f6                	xor    esi,esi
c001b561:	e9 16 ff ff ff       	jmp    c001b47c <__divdi3+0x58>
c001b566:	66 90                	xchg   ax,ax
c001b568:	31 c9                	xor    ecx,ecx
c001b56a:	e9 0d ff ff ff       	jmp    c001b47c <__divdi3+0x58>
c001b56f:	90                   	nop

c001b570 <__moddi3>:
c001b570:	55                   	push   ebp
c001b571:	57                   	push   edi
c001b572:	56                   	push   esi
c001b573:	53                   	push   ebx
c001b574:	83 ec 2c             	sub    esp,0x2c
c001b577:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b57b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001b57f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b583:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001b587:	85 db                	test   ebx,ebx
c001b589:	0f 88 85 00 00 00    	js     c001b614 <__moddi3+0xa4>
c001b58f:	89 de                	mov    esi,ebx
c001b591:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b599:	89 d7                	mov    edi,edx
c001b59b:	85 d2                	test   edx,edx
c001b59d:	79 09                	jns    c001b5a8 <__moddi3+0x38>
c001b59f:	f7 d8                	neg    eax
c001b5a1:	83 d2 00             	adc    edx,0x0
c001b5a4:	f7 da                	neg    edx
c001b5a6:	89 d7                	mov    edi,edx
c001b5a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5ac:	89 cd                	mov    ebp,ecx
c001b5ae:	85 ff                	test   edi,edi
c001b5b0:	75 52                	jne    c001b604 <__moddi3+0x94>
c001b5b2:	89 c3                	mov    ebx,eax
c001b5b4:	39 f0                	cmp    eax,esi
c001b5b6:	76 24                	jbe    c001b5dc <__moddi3+0x6c>
c001b5b8:	89 c8                	mov    eax,ecx
c001b5ba:	89 f2                	mov    edx,esi
c001b5bc:	f7 f3                	div    ebx
c001b5be:	89 d6                	mov    esi,edx
c001b5c0:	89 f0                	mov    eax,esi
c001b5c2:	31 d2                	xor    edx,edx
c001b5c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b5c8:	85 c9                	test   ecx,ecx
c001b5ca:	74 07                	je     c001b5d3 <__moddi3+0x63>
c001b5cc:	f7 d8                	neg    eax
c001b5ce:	83 d2 00             	adc    edx,0x0
c001b5d1:	f7 da                	neg    edx
c001b5d3:	83 c4 2c             	add    esp,0x2c
c001b5d6:	5b                   	pop    ebx
c001b5d7:	5e                   	pop    esi
c001b5d8:	5f                   	pop    edi
c001b5d9:	5d                   	pop    ebp
c001b5da:	c3                   	ret    
c001b5db:	90                   	nop
c001b5dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b5e0:	85 db                	test   ebx,ebx
c001b5e2:	75 0d                	jne    c001b5f1 <__moddi3+0x81>
c001b5e4:	b8 01 00 00 00       	mov    eax,0x1
c001b5e9:	31 d2                	xor    edx,edx
c001b5eb:	f7 f7                	div    edi
c001b5ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5f1:	89 f0                	mov    eax,esi
c001b5f3:	31 d2                	xor    edx,edx
c001b5f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b5f9:	f7 f7                	div    edi
c001b5fb:	89 e8                	mov    eax,ebp
c001b5fd:	f7 f7                	div    edi
c001b5ff:	89 d6                	mov    esi,edx
c001b601:	eb bd                	jmp    c001b5c0 <__moddi3+0x50>
c001b603:	90                   	nop
c001b604:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b608:	39 f7                	cmp    edi,esi
c001b60a:	76 20                	jbe    c001b62c <__moddi3+0xbc>
c001b60c:	89 c8                	mov    eax,ecx
c001b60e:	89 f2                	mov    edx,esi
c001b610:	eb b2                	jmp    c001b5c4 <__moddi3+0x54>
c001b612:	66 90                	xchg   ax,ax
c001b614:	f7 d9                	neg    ecx
c001b616:	83 d3 00             	adc    ebx,0x0
c001b619:	f7 db                	neg    ebx
c001b61b:	89 de                	mov    esi,ebx
c001b61d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001b625:	e9 6f ff ff ff       	jmp    c001b599 <__moddi3+0x29>
c001b62a:	66 90                	xchg   ax,ax
c001b62c:	0f bd c7             	bsr    eax,edi
c001b62f:	83 f0 1f             	xor    eax,0x1f
c001b632:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b636:	75 24                	jne    c001b65c <__moddi3+0xec>
c001b638:	39 f7                	cmp    edi,esi
c001b63a:	72 06                	jb     c001b642 <__moddi3+0xd2>
c001b63c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001b640:	77 0c                	ja     c001b64e <__moddi3+0xde>
c001b642:	89 e9                	mov    ecx,ebp
c001b644:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001b648:	19 fe                	sbb    esi,edi
c001b64a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b64e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b652:	89 f2                	mov    edx,esi
c001b654:	e9 6b ff ff ff       	jmp    c001b5c4 <__moddi3+0x54>
c001b659:	8d 76 00             	lea    esi,[esi+0x0]
c001b65c:	b8 20 00 00 00       	mov    eax,0x20
c001b661:	89 c2                	mov    edx,eax
c001b663:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b667:	29 da                	sub    edx,ebx
c001b669:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b66d:	88 d9                	mov    cl,bl
c001b66f:	d3 e7                	shl    edi,cl
c001b671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b675:	88 d1                	mov    cl,dl
c001b677:	d3 e8                	shr    eax,cl
c001b679:	09 c7                	or     edi,eax
c001b67b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001b67f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b683:	89 d8                	mov    eax,ebx
c001b685:	88 d9                	mov    cl,bl
c001b687:	d3 e7                	shl    edi,cl
c001b689:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b68d:	89 f3                	mov    ebx,esi
c001b68f:	88 d1                	mov    cl,dl
c001b691:	d3 eb                	shr    ebx,cl
c001b693:	89 c7                	mov    edi,eax
c001b695:	88 c1                	mov    cl,al
c001b697:	d3 e6                	shl    esi,cl
c001b699:	89 e8                	mov    eax,ebp
c001b69b:	88 d1                	mov    cl,dl
c001b69d:	d3 e8                	shr    eax,cl
c001b69f:	09 f0                	or     eax,esi
c001b6a1:	89 f9                	mov    ecx,edi
c001b6a3:	d3 e5                	shl    ebp,cl
c001b6a5:	89 da                	mov    edx,ebx
c001b6a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001b6ab:	89 d3                	mov    ebx,edx
c001b6ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b6b1:	89 c6                	mov    esi,eax
c001b6b3:	89 d1                	mov    ecx,edx
c001b6b5:	39 d3                	cmp    ebx,edx
c001b6b7:	72 27                	jb     c001b6e0 <__moddi3+0x170>
c001b6b9:	74 21                	je     c001b6dc <__moddi3+0x16c>
c001b6bb:	29 f5                	sub    ebp,esi
c001b6bd:	19 cb                	sbb    ebx,ecx
c001b6bf:	89 de                	mov    esi,ebx
c001b6c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001b6c5:	d3 e6                	shl    esi,cl
c001b6c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b6cb:	89 f9                	mov    ecx,edi
c001b6cd:	d3 ed                	shr    ebp,cl
c001b6cf:	09 ee                	or     esi,ebp
c001b6d1:	89 f0                	mov    eax,esi
c001b6d3:	d3 eb                	shr    ebx,cl
c001b6d5:	89 da                	mov    edx,ebx
c001b6d7:	e9 e8 fe ff ff       	jmp    c001b5c4 <__moddi3+0x54>
c001b6dc:	39 c5                	cmp    ebp,eax
c001b6de:	73 db                	jae    c001b6bb <__moddi3+0x14b>
c001b6e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b6e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001b6e8:	89 d1                	mov    ecx,edx
c001b6ea:	89 c6                	mov    esi,eax
c001b6ec:	eb cd                	jmp    c001b6bb <__moddi3+0x14b>
c001b6ee:	66 90                	xchg   ax,ax

c001b6f0 <__udivdi3>:
c001b6f0:	55                   	push   ebp
c001b6f1:	57                   	push   edi
c001b6f2:	56                   	push   esi
c001b6f3:	53                   	push   ebx
c001b6f4:	83 ec 1c             	sub    esp,0x1c
c001b6f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b6fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b6ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b703:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b707:	85 d2                	test   edx,edx
c001b709:	75 41                	jne    c001b74c <__udivdi3+0x5c>
c001b70b:	39 f7                	cmp    edi,esi
c001b70d:	76 15                	jbe    c001b724 <__udivdi3+0x34>
c001b70f:	89 e8                	mov    eax,ebp
c001b711:	89 f2                	mov    edx,esi
c001b713:	f7 f7                	div    edi
c001b715:	31 db                	xor    ebx,ebx
c001b717:	89 da                	mov    edx,ebx
c001b719:	83 c4 1c             	add    esp,0x1c
c001b71c:	5b                   	pop    ebx
c001b71d:	5e                   	pop    esi
c001b71e:	5f                   	pop    edi
c001b71f:	5d                   	pop    ebp
c001b720:	c3                   	ret    
c001b721:	8d 76 00             	lea    esi,[esi+0x0]
c001b724:	89 f9                	mov    ecx,edi
c001b726:	85 ff                	test   edi,edi
c001b728:	75 0b                	jne    c001b735 <__udivdi3+0x45>
c001b72a:	b8 01 00 00 00       	mov    eax,0x1
c001b72f:	31 d2                	xor    edx,edx
c001b731:	f7 f7                	div    edi
c001b733:	89 c1                	mov    ecx,eax
c001b735:	31 d2                	xor    edx,edx
c001b737:	89 f0                	mov    eax,esi
c001b739:	f7 f1                	div    ecx
c001b73b:	89 c3                	mov    ebx,eax
c001b73d:	89 e8                	mov    eax,ebp
c001b73f:	f7 f1                	div    ecx
c001b741:	89 da                	mov    edx,ebx
c001b743:	83 c4 1c             	add    esp,0x1c
c001b746:	5b                   	pop    ebx
c001b747:	5e                   	pop    esi
c001b748:	5f                   	pop    edi
c001b749:	5d                   	pop    ebp
c001b74a:	c3                   	ret    
c001b74b:	90                   	nop
c001b74c:	39 f2                	cmp    edx,esi
c001b74e:	77 1c                	ja     c001b76c <__udivdi3+0x7c>
c001b750:	0f bd da             	bsr    ebx,edx
c001b753:	83 f3 1f             	xor    ebx,0x1f
c001b756:	75 24                	jne    c001b77c <__udivdi3+0x8c>
c001b758:	39 f2                	cmp    edx,esi
c001b75a:	72 08                	jb     c001b764 <__udivdi3+0x74>
c001b75c:	39 ef                	cmp    edi,ebp
c001b75e:	0f 87 84 00 00 00    	ja     c001b7e8 <__udivdi3+0xf8>
c001b764:	b8 01 00 00 00       	mov    eax,0x1
c001b769:	eb ac                	jmp    c001b717 <__udivdi3+0x27>
c001b76b:	90                   	nop
c001b76c:	31 db                	xor    ebx,ebx
c001b76e:	31 c0                	xor    eax,eax
c001b770:	89 da                	mov    edx,ebx
c001b772:	83 c4 1c             	add    esp,0x1c
c001b775:	5b                   	pop    ebx
c001b776:	5e                   	pop    esi
c001b777:	5f                   	pop    edi
c001b778:	5d                   	pop    ebp
c001b779:	c3                   	ret    
c001b77a:	66 90                	xchg   ax,ax
c001b77c:	b8 20 00 00 00       	mov    eax,0x20
c001b781:	29 d8                	sub    eax,ebx
c001b783:	88 d9                	mov    cl,bl
c001b785:	d3 e2                	shl    edx,cl
c001b787:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b78b:	89 fa                	mov    edx,edi
c001b78d:	88 c1                	mov    cl,al
c001b78f:	d3 ea                	shr    edx,cl
c001b791:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b795:	09 d1                	or     ecx,edx
c001b797:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b79b:	88 d9                	mov    cl,bl
c001b79d:	d3 e7                	shl    edi,cl
c001b79f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b7a3:	89 f7                	mov    edi,esi
c001b7a5:	88 c1                	mov    cl,al
c001b7a7:	d3 ef                	shr    edi,cl
c001b7a9:	88 d9                	mov    cl,bl
c001b7ab:	d3 e6                	shl    esi,cl
c001b7ad:	89 ea                	mov    edx,ebp
c001b7af:	88 c1                	mov    cl,al
c001b7b1:	d3 ea                	shr    edx,cl
c001b7b3:	09 d6                	or     esi,edx
c001b7b5:	89 f0                	mov    eax,esi
c001b7b7:	89 fa                	mov    edx,edi
c001b7b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b7bd:	89 d7                	mov    edi,edx
c001b7bf:	89 c6                	mov    esi,eax
c001b7c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b7c5:	39 d7                	cmp    edi,edx
c001b7c7:	72 13                	jb     c001b7dc <__udivdi3+0xec>
c001b7c9:	74 09                	je     c001b7d4 <__udivdi3+0xe4>
c001b7cb:	89 f0                	mov    eax,esi
c001b7cd:	31 db                	xor    ebx,ebx
c001b7cf:	e9 43 ff ff ff       	jmp    c001b717 <__udivdi3+0x27>
c001b7d4:	88 d9                	mov    cl,bl
c001b7d6:	d3 e5                	shl    ebp,cl
c001b7d8:	39 c5                	cmp    ebp,eax
c001b7da:	73 ef                	jae    c001b7cb <__udivdi3+0xdb>
c001b7dc:	8d 46 ff             	lea    eax,[esi-0x1]
c001b7df:	31 db                	xor    ebx,ebx
c001b7e1:	e9 31 ff ff ff       	jmp    c001b717 <__udivdi3+0x27>
c001b7e6:	66 90                	xchg   ax,ax
c001b7e8:	31 c0                	xor    eax,eax
c001b7ea:	e9 28 ff ff ff       	jmp    c001b717 <__udivdi3+0x27>
c001b7ef:	90                   	nop

c001b7f0 <__umoddi3>:
c001b7f0:	55                   	push   ebp
c001b7f1:	57                   	push   edi
c001b7f2:	56                   	push   esi
c001b7f3:	53                   	push   ebx
c001b7f4:	83 ec 1c             	sub    esp,0x1c
c001b7f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b7fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b7ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b803:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b807:	89 da                	mov    edx,ebx
c001b809:	85 c0                	test   eax,eax
c001b80b:	75 37                	jne    c001b844 <__umoddi3+0x54>
c001b80d:	39 df                	cmp    edi,ebx
c001b80f:	76 13                	jbe    c001b824 <__umoddi3+0x34>
c001b811:	89 f0                	mov    eax,esi
c001b813:	f7 f7                	div    edi
c001b815:	89 d0                	mov    eax,edx
c001b817:	31 d2                	xor    edx,edx
c001b819:	83 c4 1c             	add    esp,0x1c
c001b81c:	5b                   	pop    ebx
c001b81d:	5e                   	pop    esi
c001b81e:	5f                   	pop    edi
c001b81f:	5d                   	pop    ebp
c001b820:	c3                   	ret    
c001b821:	8d 76 00             	lea    esi,[esi+0x0]
c001b824:	89 fd                	mov    ebp,edi
c001b826:	85 ff                	test   edi,edi
c001b828:	75 0b                	jne    c001b835 <__umoddi3+0x45>
c001b82a:	b8 01 00 00 00       	mov    eax,0x1
c001b82f:	31 d2                	xor    edx,edx
c001b831:	f7 f7                	div    edi
c001b833:	89 c5                	mov    ebp,eax
c001b835:	89 d8                	mov    eax,ebx
c001b837:	31 d2                	xor    edx,edx
c001b839:	f7 f5                	div    ebp
c001b83b:	89 f0                	mov    eax,esi
c001b83d:	f7 f5                	div    ebp
c001b83f:	89 d0                	mov    eax,edx
c001b841:	eb d4                	jmp    c001b817 <__umoddi3+0x27>
c001b843:	90                   	nop
c001b844:	89 f1                	mov    ecx,esi
c001b846:	39 d8                	cmp    eax,ebx
c001b848:	76 0a                	jbe    c001b854 <__umoddi3+0x64>
c001b84a:	89 f0                	mov    eax,esi
c001b84c:	83 c4 1c             	add    esp,0x1c
c001b84f:	5b                   	pop    ebx
c001b850:	5e                   	pop    esi
c001b851:	5f                   	pop    edi
c001b852:	5d                   	pop    ebp
c001b853:	c3                   	ret    
c001b854:	0f bd e8             	bsr    ebp,eax
c001b857:	83 f5 1f             	xor    ebp,0x1f
c001b85a:	75 1c                	jne    c001b878 <__umoddi3+0x88>
c001b85c:	39 d8                	cmp    eax,ebx
c001b85e:	72 04                	jb     c001b864 <__umoddi3+0x74>
c001b860:	39 f7                	cmp    edi,esi
c001b862:	77 08                	ja     c001b86c <__umoddi3+0x7c>
c001b864:	89 da                	mov    edx,ebx
c001b866:	29 fe                	sub    esi,edi
c001b868:	19 c2                	sbb    edx,eax
c001b86a:	89 f1                	mov    ecx,esi
c001b86c:	89 c8                	mov    eax,ecx
c001b86e:	83 c4 1c             	add    esp,0x1c
c001b871:	5b                   	pop    ebx
c001b872:	5e                   	pop    esi
c001b873:	5f                   	pop    edi
c001b874:	5d                   	pop    ebp
c001b875:	c3                   	ret    
c001b876:	66 90                	xchg   ax,ax
c001b878:	ba 20 00 00 00       	mov    edx,0x20
c001b87d:	29 ea                	sub    edx,ebp
c001b87f:	89 e9                	mov    ecx,ebp
c001b881:	d3 e0                	shl    eax,cl
c001b883:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b887:	89 f8                	mov    eax,edi
c001b889:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b88d:	88 d1                	mov    cl,dl
c001b88f:	d3 e8                	shr    eax,cl
c001b891:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b895:	09 c1                	or     ecx,eax
c001b897:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b89b:	89 e9                	mov    ecx,ebp
c001b89d:	d3 e7                	shl    edi,cl
c001b89f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b8a3:	89 d8                	mov    eax,ebx
c001b8a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b8a9:	88 d1                	mov    cl,dl
c001b8ab:	d3 e8                	shr    eax,cl
c001b8ad:	89 c7                	mov    edi,eax
c001b8af:	89 e9                	mov    ecx,ebp
c001b8b1:	d3 e3                	shl    ebx,cl
c001b8b3:	89 f0                	mov    eax,esi
c001b8b5:	88 d1                	mov    cl,dl
c001b8b7:	d3 e8                	shr    eax,cl
c001b8b9:	09 d8                	or     eax,ebx
c001b8bb:	89 e9                	mov    ecx,ebp
c001b8bd:	d3 e6                	shl    esi,cl
c001b8bf:	89 f3                	mov    ebx,esi
c001b8c1:	89 fa                	mov    edx,edi
c001b8c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b8c7:	89 d1                	mov    ecx,edx
c001b8c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b8cd:	89 c6                	mov    esi,eax
c001b8cf:	89 d7                	mov    edi,edx
c001b8d1:	39 d1                	cmp    ecx,edx
c001b8d3:	72 27                	jb     c001b8fc <__umoddi3+0x10c>
c001b8d5:	74 21                	je     c001b8f8 <__umoddi3+0x108>
c001b8d7:	89 ca                	mov    edx,ecx
c001b8d9:	29 f3                	sub    ebx,esi
c001b8db:	19 fa                	sbb    edx,edi
c001b8dd:	89 d0                	mov    eax,edx
c001b8df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001b8e3:	d3 e0                	shl    eax,cl
c001b8e5:	89 e9                	mov    ecx,ebp
c001b8e7:	d3 eb                	shr    ebx,cl
c001b8e9:	09 d8                	or     eax,ebx
c001b8eb:	d3 ea                	shr    edx,cl
c001b8ed:	83 c4 1c             	add    esp,0x1c
c001b8f0:	5b                   	pop    ebx
c001b8f1:	5e                   	pop    esi
c001b8f2:	5f                   	pop    edi
c001b8f3:	5d                   	pop    ebp
c001b8f4:	c3                   	ret    
c001b8f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8f8:	39 c3                	cmp    ebx,eax
c001b8fa:	73 db                	jae    c001b8d7 <__umoddi3+0xe7>
c001b8fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b900:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001b904:	89 d7                	mov    edi,edx
c001b906:	89 c6                	mov    esi,eax
c001b908:	eb cd                	jmp    c001b8d7 <__umoddi3+0xe7>

Disassembly of section .init:

c001b90a <_init>:
c001b90a:	55                   	push   ebp
c001b90b:	89 e5                	mov    ebp,esp
c001b90d:	e8 06 48 fe ff       	call   c0000118 <frame_dummy>
c001b912:	e8 e5 fa ff ff       	call   c001b3fc <__do_global_ctors_aux>
c001b917:	5d                   	pop    ebp
c001b918:	c3                   	ret    

Disassembly of section .fini:

c001b919 <_fini>:
c001b919:	55                   	push   ebp
c001b91a:	89 e5                	mov    ebp,esp
c001b91c:	e8 87 47 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001b921:	5d                   	pop    ebp
c001b922:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001b924 <Computer::~Computer()>:
c001b924:	83 ec 0c             	sub    esp,0xc
c001b927:	ba 10 cc 01 c0       	mov    edx,0xc001cc10
c001b92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b930:	89 10                	mov    DWORD PTR [eax],edx
c001b932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b936:	83 ec 0c             	sub    esp,0xc
c001b939:	50                   	push   eax
c001b93a:	e8 db f3 fe ff       	call   c000ad1a <Device::~Device()>
c001b93f:	83 c4 10             	add    esp,0x10
c001b942:	90                   	nop
c001b943:	83 c4 0c             	add    esp,0xc
c001b946:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001b948 <Computer::~Computer()>:
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	83 ec 0c             	sub    esp,0xc
c001b94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b952:	e8 cd ff ff ff       	call   c001b924 <Computer::~Computer()>
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	83 ec 08             	sub    esp,0x8
c001b95d:	68 ec 01 00 00       	push   0x1ec
c001b962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b966:	e8 77 df fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001b96b:	83 c4 10             	add    esp,0x10
c001b96e:	83 c4 0c             	add    esp,0xc
c001b971:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001b972 <idleCommon()>:
c001b972:	83 ec 0c             	sub    esp,0xc
c001b975:	fa                   	cli    
c001b976:	ff 05 68 29 02 c0    	inc    DWORD PTR ds:0xc0022968
c001b97c:	e8 1b 70 ff ff       	call   c001299c <schedule()>
c001b981:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c001b986:	48                   	dec    eax
c001b987:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c001b98c:	75 01                	jne    c001b98f <idleCommon()+0x1d>
c001b98e:	fb                   	sti    
c001b98f:	83 c4 0c             	add    esp,0xc
c001b992:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001b994 <LinkedList<UnixFile>::~LinkedList()>:
c001b994:	90                   	nop
c001b995:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001b996 <LinkedList<UnixFile>::LinkedList()>:
c001b996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b99a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b9d6:	90                   	nop
c001b9d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001b9d8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001b9d8:	83 ec 0c             	sub    esp,0xc
c001b9db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b9e0:	75 10                	jne    c001b9f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001b9e2:	83 ec 0c             	sub    esp,0xc
c001b9e5:	68 64 ce 01 c0       	push   0xc001ce64
c001b9ea:	e8 38 3b ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001b9ef:	83 c4 10             	add    esp,0x10
c001b9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9f8:	85 c0                	test   eax,eax
c001b9fa:	74 34                	je     c001ba30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001b9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba03:	85 c0                	test   eax,eax
c001ba05:	74 29                	je     c001ba30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ba07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ba15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ba20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba2e:	eb 65                	jmp    c001ba95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ba30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba34:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba36:	85 c0                	test   eax,eax
c001ba38:	75 4b                	jne    c001ba85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ba3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba41:	85 c0                	test   eax,eax
c001ba43:	75 40                	jne    c001ba85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ba45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba4d:	89 10                	mov    DWORD PTR [eax],edx
c001ba4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ba5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba6f:	85 c0                	test   eax,eax
c001ba71:	74 22                	je     c001ba95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ba73:	83 ec 0c             	sub    esp,0xc
c001ba76:	68 86 ce 01 c0       	push   0xc001ce86
c001ba7b:	e8 a7 3a ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001ba80:	83 c4 10             	add    esp,0x10
c001ba83:	eb 10                	jmp    c001ba95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ba85:	83 ec 0c             	sub    esp,0xc
c001ba88:	68 90 ce 01 c0       	push   0xc001ce90
c001ba8d:	e8 95 3a ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001ba92:	83 c4 10             	add    esp,0x10
c001ba95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba9c:	8d 50 01             	lea    edx,[eax+0x1]
c001ba9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001baa6:	90                   	nop
c001baa7:	83 c4 0c             	add    esp,0xc
c001baaa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001baac <LinkedList<UnixFile>::getFirstElement()>:
c001baac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bab0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bab2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001bab4 <LinkedList<UnixFile>::removeFirst()>:
c001bab4:	83 ec 0c             	sub    esp,0xc
c001bab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babb:	8b 00                	mov    eax,DWORD PTR [eax]
c001babd:	85 c0                	test   eax,eax
c001babf:	75 12                	jne    c001bad3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001bac1:	83 ec 0c             	sub    esp,0xc
c001bac4:	68 9c ce 01 c0       	push   0xc001ce9c
c001bac9:	e8 59 3a ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bace:	83 c4 10             	add    esp,0x10
c001bad1:	eb 7e                	jmp    c001bb51 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001bad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bad7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bada:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001badd:	85 c0                	test   eax,eax
c001badf:	74 10                	je     c001baf1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001bae1:	83 ec 0c             	sub    esp,0xc
c001bae4:	68 e7 ce 01 c0       	push   0xc001cee7
c001bae9:	e8 39 3a ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001baee:	83 c4 10             	add    esp,0x10
c001baf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001baf7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bafa:	85 c0                	test   eax,eax
c001bafc:	75 33                	jne    c001bb31 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001bafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bb1a:	83 f8 01             	cmp    eax,0x1
c001bb1d:	74 21                	je     c001bb40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001bb1f:	83 ec 0c             	sub    esp,0xc
c001bb22:	68 c0 ce 01 c0       	push   0xc001cec0
c001bb27:	e8 fb 39 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bb2c:	83 c4 10             	add    esp,0x10
c001bb2f:	eb 0f                	jmp    c001bb40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001bb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb35:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb37:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3e:	89 10                	mov    DWORD PTR [eax],edx
c001bb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bb47:	8d 50 ff             	lea    edx,[eax-0x1]
c001bb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bb51:	83 c4 0c             	add    esp,0xc
c001bb54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001bb56 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001bb56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bb5d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001bb5e <DriverlessDevice::~DriverlessDevice()>:
c001bb5e:	ba 3c d5 01 c0       	mov    edx,0xc001d53c
c001bb63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb67:	89 10                	mov    DWORD PTR [eax],edx
c001bb69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb6d:	50                   	push   eax
c001bb6e:	e8 a7 f1 fe ff       	call   c000ad1a <Device::~Device()>
c001bb73:	83 c4 04             	add    esp,0x4
c001bb76:	90                   	nop
c001bb77:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001bb78 <DriverlessDevice::~DriverlessDevice()>:
c001bb78:	83 ec 0c             	sub    esp,0xc
c001bb7b:	83 ec 0c             	sub    esp,0xc
c001bb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb82:	e8 d7 ff ff ff       	call   c001bb5e <DriverlessDevice::~DriverlessDevice()>
c001bb87:	83 c4 10             	add    esp,0x10
c001bb8a:	83 ec 08             	sub    esp,0x8
c001bb8d:	68 58 01 00 00       	push   0x158
c001bb92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb96:	e8 47 dd fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001bb9b:	83 c4 10             	add    esp,0x10
c001bb9e:	83 c4 0c             	add    esp,0xc
c001bba1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001bba2 <LinkedList<Device>::addElement(Device*)>:
c001bba2:	83 ec 0c             	sub    esp,0xc
c001bba5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bbaa:	75 10                	jne    c001bbbc <LinkedList<Device>::addElement(Device*)+0x1a>
c001bbac:	83 ec 0c             	sub    esp,0xc
c001bbaf:	68 64 ce 01 c0       	push   0xc001ce64
c001bbb4:	e8 6e 39 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bbb9:	83 c4 10             	add    esp,0x10
c001bbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbc2:	85 c0                	test   eax,eax
c001bbc4:	74 3a                	je     c001bc00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001bbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bbcd:	85 c0                	test   eax,eax
c001bbcf:	74 2f                	je     c001bc00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001bbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bbd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bbdc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001bbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bbea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bbf4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001bbfe:	eb 68                	jmp    c001bc68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc04:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc06:	85 c0                	test   eax,eax
c001bc08:	75 4e                	jne    c001bc58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001bc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc11:	85 c0                	test   eax,eax
c001bc13:	75 43                	jne    c001bc58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001bc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc1d:	89 10                	mov    DWORD PTR [eax],edx
c001bc1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc31:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001bc3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bc42:	85 c0                	test   eax,eax
c001bc44:	74 22                	je     c001bc68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bc46:	83 ec 0c             	sub    esp,0xc
c001bc49:	68 86 ce 01 c0       	push   0xc001ce86
c001bc4e:	e8 d4 38 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bc53:	83 c4 10             	add    esp,0x10
c001bc56:	eb 10                	jmp    c001bc68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bc58:	83 ec 0c             	sub    esp,0xc
c001bc5b:	68 90 ce 01 c0       	push   0xc001ce90
c001bc60:	e8 c2 38 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bc65:	83 c4 10             	add    esp,0x10
c001bc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bc6f:	8d 50 01             	lea    edx,[eax+0x1]
c001bc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bc79:	90                   	nop
c001bc7a:	83 c4 0c             	add    esp,0xc
c001bc7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001bc7e <LinkedList<Device>::LinkedList()>:
c001bc7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bc9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bca2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bcbe:	90                   	nop
c001bcbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001bcc0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001bcc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcc6:	85 c0                	test   eax,eax
c001bcc8:	75 0e                	jne    c001bcd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bcca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcd1:	85 c0                	test   eax,eax
c001bcd3:	75 03                	jne    c001bcd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bcd5:	b0 01                	mov    al,0x1
c001bcd7:	c3                   	ret    
c001bcd8:	b0 00                	mov    al,0x0
c001bcda:	90                   	nop
c001bcdb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001bcdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001bcdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bce0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bce2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001bce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001bce4:	83 ec 0c             	sub    esp,0xc
c001bce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bceb:	8b 00                	mov    eax,DWORD PTR [eax]
c001bced:	85 c0                	test   eax,eax
c001bcef:	75 17                	jne    c001bd08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001bcf1:	83 ec 0c             	sub    esp,0xc
c001bcf4:	68 9c ce 01 c0       	push   0xc001ce9c
c001bcf9:	e8 29 38 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bcfe:	83 c4 10             	add    esp,0x10
c001bd01:	e9 92 00 00 00       	jmp    c001bd98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001bd06:	66 90                	xchg   ax,ax
c001bd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd12:	85 c0                	test   eax,eax
c001bd14:	0f 95 c0             	setne  al
c001bd17:	84 c0                	test   al,al
c001bd19:	74 11                	je     c001bd2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001bd1b:	83 ec 0c             	sub    esp,0xc
c001bd1e:	68 e7 ce 01 c0       	push   0xc001cee7
c001bd23:	e8 ff 37 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bd28:	83 c4 10             	add    esp,0x10
c001bd2b:	90                   	nop
c001bd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd30:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd32:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd35:	85 c0                	test   eax,eax
c001bd37:	0f 94 c0             	sete   al
c001bd3a:	84 c0                	test   al,al
c001bd3c:	74 36                	je     c001bd74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001bd3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bd5a:	83 f8 01             	cmp    eax,0x1
c001bd5d:	74 25                	je     c001bd84 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001bd5f:	83 ec 0c             	sub    esp,0xc
c001bd62:	68 c0 ce 01 c0       	push   0xc001cec0
c001bd67:	e8 bb 37 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bd6c:	83 c4 10             	add    esp,0x10
c001bd6f:	eb 13                	jmp    c001bd84 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001bd71:	8d 76 00             	lea    esi,[esi+0x0]
c001bd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd78:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd7a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bd7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd81:	89 10                	mov    DWORD PTR [eax],edx
c001bd83:	90                   	nop
c001bd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bd8b:	8d 50 ff             	lea    edx,[eax-0x1]
c001bd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bd95:	8d 76 00             	lea    esi,[esi+0x0]
c001bd98:	83 c4 0c             	add    esp,0xc
c001bd9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001bd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001bd9c:	83 ec 0c             	sub    esp,0xc
c001bd9f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bda4:	75 12                	jne    c001bdb8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001bda6:	83 ec 0c             	sub    esp,0xc
c001bda9:	68 64 ce 01 c0       	push   0xc001ce64
c001bdae:	e8 74 37 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bdb3:	83 c4 10             	add    esp,0x10
c001bdb6:	66 90                	xchg   ax,ax
c001bdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdbe:	85 c0                	test   eax,eax
c001bdc0:	74 36                	je     c001bdf8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bdc9:	85 c0                	test   eax,eax
c001bdcb:	74 2b                	je     c001bdf8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bdcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bdd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bdd8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001bddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bddf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bde3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bded:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bdf4:	eb 6a                	jmp    c001be60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bdf6:	66 90                	xchg   ax,ax
c001bdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdfe:	85 c0                	test   eax,eax
c001be00:	75 4e                	jne    c001be50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001be02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001be09:	85 c0                	test   eax,eax
c001be0b:	75 43                	jne    c001be50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001be0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be15:	89 10                	mov    DWORD PTR [eax],edx
c001be17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001be22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001be29:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001be30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001be37:	85 c0                	test   eax,eax
c001be39:	74 25                	je     c001be60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001be3b:	83 ec 0c             	sub    esp,0xc
c001be3e:	68 86 ce 01 c0       	push   0xc001ce86
c001be43:	e8 df 36 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001be48:	83 c4 10             	add    esp,0x10
c001be4b:	eb 13                	jmp    c001be60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001be4d:	8d 76 00             	lea    esi,[esi+0x0]
c001be50:	83 ec 0c             	sub    esp,0xc
c001be53:	68 90 ce 01 c0       	push   0xc001ce90
c001be58:	e8 ca 36 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001be5d:	83 c4 10             	add    esp,0x10
c001be60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001be67:	8d 50 01             	lea    edx,[eax+0x1]
c001be6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001be71:	90                   	nop
c001be72:	83 c4 0c             	add    esp,0xc
c001be75:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001be78 <ACPI::~ACPI()>:
c001be78:	83 ec 0c             	sub    esp,0xc
c001be7b:	ba a4 da 01 c0       	mov    edx,0xc001daa4
c001be80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be84:	89 10                	mov    DWORD PTR [eax],edx
c001be86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be8a:	83 ec 0c             	sub    esp,0xc
c001be8d:	50                   	push   eax
c001be8e:	e8 87 ee fe ff       	call   c000ad1a <Device::~Device()>
c001be93:	83 c4 10             	add    esp,0x10
c001be96:	90                   	nop
c001be97:	83 c4 0c             	add    esp,0xc
c001be9a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001be9c <ACPI::~ACPI()>:
c001be9c:	83 ec 0c             	sub    esp,0xc
c001be9f:	83 ec 0c             	sub    esp,0xc
c001bea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bea6:	e8 cd ff ff ff       	call   c001be78 <ACPI::~ACPI()>
c001beab:	83 c4 10             	add    esp,0x10
c001beae:	83 ec 08             	sub    esp,0x8
c001beb1:	68 64 12 00 00       	push   0x1264
c001beb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001beba:	e8 23 da fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001bebf:	83 c4 10             	add    esp,0x10
c001bec2:	83 c4 0c             	add    esp,0xc
c001bec5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001bec8 <LinkedList<Device>::~LinkedList()>:
c001bec8:	90                   	nop
c001bec9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001becc <LinkedList<Device>::isEmpty()>:
c001becc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bed0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bed2:	85 c0                	test   eax,eax
c001bed4:	75 0e                	jne    c001bee4 <LinkedList<Device>::isEmpty()+0x18>
c001bed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bedd:	85 c0                	test   eax,eax
c001bedf:	75 03                	jne    c001bee4 <LinkedList<Device>::isEmpty()+0x18>
c001bee1:	b0 01                	mov    al,0x1
c001bee3:	c3                   	ret    
c001bee4:	b0 00                	mov    al,0x0
c001bee6:	90                   	nop
c001bee7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001bee8 <LinkedList<Device>::getFirstElement()>:
c001bee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beec:	8b 00                	mov    eax,DWORD PTR [eax]
c001beee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001bef0 <LinkedList<Device>::removeFirst()>:
c001bef0:	83 ec 0c             	sub    esp,0xc
c001bef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef7:	8b 00                	mov    eax,DWORD PTR [eax]
c001bef9:	85 c0                	test   eax,eax
c001befb:	75 17                	jne    c001bf14 <LinkedList<Device>::removeFirst()+0x24>
c001befd:	83 ec 0c             	sub    esp,0xc
c001bf00:	68 9c ce 01 c0       	push   0xc001ce9c
c001bf05:	e8 1d 36 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bf0a:	83 c4 10             	add    esp,0x10
c001bf0d:	e9 92 00 00 00       	jmp    c001bfa4 <LinkedList<Device>::removeFirst()+0xb4>
c001bf12:	66 90                	xchg   ax,ax
c001bf14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf1b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001bf21:	85 c0                	test   eax,eax
c001bf23:	74 13                	je     c001bf38 <LinkedList<Device>::removeFirst()+0x48>
c001bf25:	83 ec 0c             	sub    esp,0xc
c001bf28:	68 e7 ce 01 c0       	push   0xc001cee7
c001bf2d:	e8 f5 35 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bf32:	83 c4 10             	add    esp,0x10
c001bf35:	8d 76 00             	lea    esi,[esi+0x0]
c001bf38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf3e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001bf44:	85 c0                	test   eax,eax
c001bf46:	75 34                	jne    c001bf7c <LinkedList<Device>::removeFirst()+0x8c>
c001bf48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf64:	83 f8 01             	cmp    eax,0x1
c001bf67:	74 27                	je     c001bf90 <LinkedList<Device>::removeFirst()+0xa0>
c001bf69:	83 ec 0c             	sub    esp,0xc
c001bf6c:	68 c0 ce 01 c0       	push   0xc001cec0
c001bf71:	e8 b1 35 ff ff       	call   c000f527 <Krnl::panic(char const*)>
c001bf76:	83 c4 10             	add    esp,0x10
c001bf79:	eb 15                	jmp    c001bf90 <LinkedList<Device>::removeFirst()+0xa0>
c001bf7b:	90                   	nop
c001bf7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf80:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf82:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001bf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf8c:	89 10                	mov    DWORD PTR [eax],edx
c001bf8e:	66 90                	xchg   ax,ax
c001bf90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf97:	8d 50 ff             	lea    edx,[eax-0x1]
c001bf9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bfa1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfa4:	83 c4 0c             	add    esp,0xc
c001bfa7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001bfa8 <CPU::~CPU()>:
c001bfa8:	83 ec 0c             	sub    esp,0xc
c001bfab:	ba 40 dc 01 c0       	mov    edx,0xc001dc40
c001bfb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb4:	89 10                	mov    DWORD PTR [eax],edx
c001bfb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfba:	83 ec 0c             	sub    esp,0xc
c001bfbd:	50                   	push   eax
c001bfbe:	e8 57 ed fe ff       	call   c000ad1a <Device::~Device()>
c001bfc3:	83 c4 10             	add    esp,0x10
c001bfc6:	90                   	nop
c001bfc7:	83 c4 0c             	add    esp,0xc
c001bfca:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001bfcc <CPU::~CPU()>:
c001bfcc:	83 ec 0c             	sub    esp,0xc
c001bfcf:	83 ec 0c             	sub    esp,0xc
c001bfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfd6:	e8 cd ff ff ff       	call   c001bfa8 <CPU::~CPU()>
c001bfdb:	83 c4 10             	add    esp,0x10
c001bfde:	83 ec 08             	sub    esp,0x8
c001bfe1:	68 94 11 00 00       	push   0x1194
c001bfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfea:	e8 f3 d8 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001bfef:	83 c4 10             	add    esp,0x10
c001bff2:	83 c4 0c             	add    esp,0xc
c001bff5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001bff8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001bff8:	90                   	nop
c001bff9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001bffc <ThreadControlBlock::ThreadControlBlock()>:
c001bffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c000:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c007:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c00b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c016:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c01d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c021:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c02c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c033:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c037:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c03b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c03f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c043:	90                   	nop
c001c044:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c048 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c04c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c056:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c05d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c061:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c06c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c076:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c07d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c081:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c088:	90                   	nop
c001c089:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c08c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c08c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c090:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c093:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c094 <PCI::~PCI()>:
c001c094:	83 ec 0c             	sub    esp,0xc
c001c097:	ba 98 e7 01 c0       	mov    edx,0xc001e798
c001c09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a0:	89 10                	mov    DWORD PTR [eax],edx
c001c0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a6:	83 ec 0c             	sub    esp,0xc
c001c0a9:	50                   	push   eax
c001c0aa:	e8 f5 e6 fe ff       	call   c000a7a4 <Bus::~Bus()>
c001c0af:	83 c4 10             	add    esp,0x10
c001c0b2:	90                   	nop
c001c0b3:	83 c4 0c             	add    esp,0xc
c001c0b6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c0b8 <PCI::~PCI()>:
c001c0b8:	83 ec 0c             	sub    esp,0xc
c001c0bb:	83 ec 0c             	sub    esp,0xc
c001c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0c2:	e8 cd ff ff ff       	call   c001c094 <PCI::~PCI()>
c001c0c7:	83 c4 10             	add    esp,0x10
c001c0ca:	83 ec 08             	sub    esp,0x8
c001c0cd:	68 5c 01 00 00       	push   0x15c
c001c0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0d6:	e8 07 d8 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001c0db:	83 c4 10             	add    esp,0x10
c001c0de:	83 c4 0c             	add    esp,0xc
c001c0e1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c0e2 <IDE::~IDE()>:
c001c0e2:	83 ec 0c             	sub    esp,0xc
c001c0e5:	ba 4c e8 01 c0       	mov    edx,0xc001e84c
c001c0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ee:	89 10                	mov    DWORD PTR [eax],edx
c001c0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0f4:	83 ec 0c             	sub    esp,0xc
c001c0f7:	50                   	push   eax
c001c0f8:	e8 97 f0 fe ff       	call   c000b194 <HardDiskController::~HardDiskController()>
c001c0fd:	83 c4 10             	add    esp,0x10
c001c100:	90                   	nop
c001c101:	83 c4 0c             	add    esp,0xc
c001c104:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c106 <IDE::~IDE()>:
c001c106:	83 ec 0c             	sub    esp,0xc
c001c109:	83 ec 0c             	sub    esp,0xc
c001c10c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c110:	e8 cd ff ff ff       	call   c001c0e2 <IDE::~IDE()>
c001c115:	83 c4 10             	add    esp,0x10
c001c118:	83 ec 08             	sub    esp,0x8
c001c11b:	68 70 02 00 00       	push   0x270
c001c120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c124:	e8 b9 d7 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001c129:	83 c4 10             	add    esp,0x10
c001c12c:	83 c4 0c             	add    esp,0xc
c001c12f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c130 <SATABus::~SATABus()>:
c001c130:	83 ec 0c             	sub    esp,0xc
c001c133:	ba 9c e8 01 c0       	mov    edx,0xc001e89c
c001c138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c13c:	89 10                	mov    DWORD PTR [eax],edx
c001c13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c142:	83 ec 0c             	sub    esp,0xc
c001c145:	50                   	push   eax
c001c146:	e8 49 f0 fe ff       	call   c000b194 <HardDiskController::~HardDiskController()>
c001c14b:	83 c4 10             	add    esp,0x10
c001c14e:	90                   	nop
c001c14f:	83 c4 0c             	add    esp,0xc
c001c152:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c154 <SATABus::~SATABus()>:
c001c154:	83 ec 0c             	sub    esp,0xc
c001c157:	83 ec 0c             	sub    esp,0xc
c001c15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c15e:	e8 cd ff ff ff       	call   c001c130 <SATABus::~SATABus()>
c001c163:	83 c4 10             	add    esp,0x10
c001c166:	83 ec 08             	sub    esp,0x8
c001c169:	68 64 01 00 00       	push   0x164
c001c16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c172:	e8 6b d7 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001c177:	83 c4 10             	add    esp,0x10
c001c17a:	83 c4 0c             	add    esp,0xc
c001c17d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c17e <ATA::~ATA()>:
c001c17e:	83 ec 0c             	sub    esp,0xc
c001c181:	ba dc e8 01 c0       	mov    edx,0xc001e8dc
c001c186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18a:	89 10                	mov    DWORD PTR [eax],edx
c001c18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c190:	83 ec 0c             	sub    esp,0xc
c001c193:	50                   	push   eax
c001c194:	e8 dd f0 fe ff       	call   c000b276 <PhysicalDisk::~PhysicalDisk()>
c001c199:	83 c4 10             	add    esp,0x10
c001c19c:	90                   	nop
c001c19d:	83 c4 0c             	add    esp,0xc
c001c1a0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c1a2 <ATA::~ATA()>:
c001c1a2:	83 ec 0c             	sub    esp,0xc
c001c1a5:	83 ec 0c             	sub    esp,0xc
c001c1a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1ac:	e8 cd ff ff ff       	call   c001c17e <ATA::~ATA()>
c001c1b1:	83 c4 10             	add    esp,0x10
c001c1b4:	83 ec 08             	sub    esp,0x8
c001c1b7:	68 7c 01 00 00       	push   0x17c
c001c1bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1c0:	e8 1d d7 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001c1c5:	83 c4 10             	add    esp,0x10
c001c1c8:	83 c4 0c             	add    esp,0xc
c001c1cb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c1cc <ATAPI::~ATAPI()>:
c001c1cc:	83 ec 0c             	sub    esp,0xc
c001c1cf:	ba 24 e9 01 c0       	mov    edx,0xc001e924
c001c1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d8:	89 10                	mov    DWORD PTR [eax],edx
c001c1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1de:	83 ec 0c             	sub    esp,0xc
c001c1e1:	50                   	push   eax
c001c1e2:	e8 8f f0 fe ff       	call   c000b276 <PhysicalDisk::~PhysicalDisk()>
c001c1e7:	83 c4 10             	add    esp,0x10
c001c1ea:	90                   	nop
c001c1eb:	83 c4 0c             	add    esp,0xc
c001c1ee:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c1f0 <ATAPI::~ATAPI()>:
c001c1f0:	83 ec 0c             	sub    esp,0xc
c001c1f3:	83 ec 0c             	sub    esp,0xc
c001c1f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1fa:	e8 cd ff ff ff       	call   c001c1cc <ATAPI::~ATAPI()>
c001c1ff:	83 c4 10             	add    esp,0x10
c001c202:	83 ec 08             	sub    esp,0x8
c001c205:	68 84 01 00 00       	push   0x184
c001c20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c20e:	e8 cf d6 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001c213:	83 c4 10             	add    esp,0x10
c001c216:	83 c4 0c             	add    esp,0xc
c001c219:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c21a <SATA::~SATA()>:
c001c21a:	83 ec 0c             	sub    esp,0xc
c001c21d:	ba d8 e9 01 c0       	mov    edx,0xc001e9d8
c001c222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c226:	89 10                	mov    DWORD PTR [eax],edx
c001c228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c22c:	83 ec 0c             	sub    esp,0xc
c001c22f:	50                   	push   eax
c001c230:	e8 41 f0 fe ff       	call   c000b276 <PhysicalDisk::~PhysicalDisk()>
c001c235:	83 c4 10             	add    esp,0x10
c001c238:	90                   	nop
c001c239:	83 c4 0c             	add    esp,0xc
c001c23c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c23e <SATA::~SATA()>:
c001c23e:	83 ec 0c             	sub    esp,0xc
c001c241:	83 ec 0c             	sub    esp,0xc
c001c244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c248:	e8 cd ff ff ff       	call   c001c21a <SATA::~SATA()>
c001c24d:	83 c4 10             	add    esp,0x10
c001c250:	83 ec 08             	sub    esp,0x8
c001c253:	68 7c 01 00 00       	push   0x17c
c001c258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c25c:	e8 81 d6 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001c261:	83 c4 10             	add    esp,0x10
c001c264:	83 c4 0c             	add    esp,0xc
c001c267:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c268 <SATAPI::~SATAPI()>:
c001c268:	83 ec 0c             	sub    esp,0xc
c001c26b:	ba 44 eb 01 c0       	mov    edx,0xc001eb44
c001c270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c274:	89 10                	mov    DWORD PTR [eax],edx
c001c276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c27a:	83 ec 0c             	sub    esp,0xc
c001c27d:	50                   	push   eax
c001c27e:	e8 f3 ef fe ff       	call   c000b276 <PhysicalDisk::~PhysicalDisk()>
c001c283:	83 c4 10             	add    esp,0x10
c001c286:	90                   	nop
c001c287:	83 c4 0c             	add    esp,0xc
c001c28a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c28c <SATAPI::~SATAPI()>:
c001c28c:	83 ec 0c             	sub    esp,0xc
c001c28f:	83 ec 0c             	sub    esp,0xc
c001c292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c296:	e8 cd ff ff ff       	call   c001c268 <SATAPI::~SATAPI()>
c001c29b:	83 c4 10             	add    esp,0x10
c001c29e:	83 ec 08             	sub    esp,0x8
c001c2a1:	68 84 01 00 00       	push   0x184
c001c2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2aa:	e8 33 d6 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001c2af:	83 c4 10             	add    esp,0x10
c001c2b2:	83 c4 0c             	add    esp,0xc
c001c2b5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c2b6 <IOAPIC::~IOAPIC()>:
c001c2b6:	83 ec 0c             	sub    esp,0xc
c001c2b9:	ba 84 eb 01 c0       	mov    edx,0xc001eb84
c001c2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c2:	89 10                	mov    DWORD PTR [eax],edx
c001c2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c8:	83 ec 0c             	sub    esp,0xc
c001c2cb:	50                   	push   eax
c001c2cc:	e8 49 ea fe ff       	call   c000ad1a <Device::~Device()>
c001c2d1:	83 c4 10             	add    esp,0x10
c001c2d4:	90                   	nop
c001c2d5:	83 c4 0c             	add    esp,0xc
c001c2d8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c2da <IOAPIC::~IOAPIC()>:
c001c2da:	83 ec 0c             	sub    esp,0xc
c001c2dd:	83 ec 0c             	sub    esp,0xc
c001c2e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2e4:	e8 cd ff ff ff       	call   c001c2b6 <IOAPIC::~IOAPIC()>
c001c2e9:	83 c4 10             	add    esp,0x10
c001c2ec:	83 ec 08             	sub    esp,0x8
c001c2ef:	68 68 01 00 00       	push   0x168
c001c2f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2f8:	e8 e5 d5 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001c2fd:	83 c4 10             	add    esp,0x10
c001c300:	83 c4 0c             	add    esp,0xc
c001c303:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c304 <APICTimer::~APICTimer()>:
c001c304:	83 ec 0c             	sub    esp,0xc
c001c307:	ba cc eb 01 c0       	mov    edx,0xc001ebcc
c001c30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c310:	89 10                	mov    DWORD PTR [eax],edx
c001c312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c316:	83 ec 0c             	sub    esp,0xc
c001c319:	50                   	push   eax
c001c31a:	e8 f9 02 ff ff       	call   c000c618 <Timer::~Timer()>
c001c31f:	83 c4 10             	add    esp,0x10
c001c322:	90                   	nop
c001c323:	83 c4 0c             	add    esp,0xc
c001c326:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c328 <APICTimer::~APICTimer()>:
c001c328:	83 ec 0c             	sub    esp,0xc
c001c32b:	83 ec 0c             	sub    esp,0xc
c001c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c332:	e8 cd ff ff ff       	call   c001c304 <APICTimer::~APICTimer()>
c001c337:	83 c4 10             	add    esp,0x10
c001c33a:	83 ec 08             	sub    esp,0x8
c001c33d:	68 60 01 00 00       	push   0x160
c001c342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c346:	e8 97 d5 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001c34b:	83 c4 10             	add    esp,0x10
c001c34e:	83 c4 0c             	add    esp,0xc
c001c351:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c354 <PIT::~PIT()>:
c001c354:	83 ec 0c             	sub    esp,0xc
c001c357:	ba 1c ec 01 c0       	mov    edx,0xc001ec1c
c001c35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c360:	89 10                	mov    DWORD PTR [eax],edx
c001c362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c366:	83 ec 0c             	sub    esp,0xc
c001c369:	50                   	push   eax
c001c36a:	e8 a9 02 ff ff       	call   c000c618 <Timer::~Timer()>
c001c36f:	83 c4 10             	add    esp,0x10
c001c372:	90                   	nop
c001c373:	83 c4 0c             	add    esp,0xc
c001c376:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c378 <PIT::~PIT()>:
c001c378:	83 ec 0c             	sub    esp,0xc
c001c37b:	83 ec 0c             	sub    esp,0xc
c001c37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c382:	e8 cd ff ff ff       	call   c001c354 <PIT::~PIT()>
c001c387:	83 c4 10             	add    esp,0x10
c001c38a:	83 ec 08             	sub    esp,0x8
c001c38d:	68 5c 01 00 00       	push   0x15c
c001c392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c396:	e8 47 d5 fe ff       	call   c00098e2 <operator delete(void*, unsigned long)>
c001c39b:	83 c4 10             	add    esp,0x10
c001c39e:	83 c4 0c             	add    esp,0xc
c001c3a1:	c3                   	ret    
