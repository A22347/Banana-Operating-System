
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 f4 fc 01 c0       	mov    eax,0xc001fcf4
c0000025:	3d f4 fc 01 c0       	cmp    eax,0xc001fcf4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 f4 fc 01 c0       	push   0xc001fcf4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 f4 fc 01 c0       	mov    eax,0xc001fcf4
c0000051:	2d f4 fc 01 c0       	sub    eax,0xc001fcf4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 f4 fc 01 c0       	push   0xc001fcf4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 08 cf 01 c0       	mov    ebx,0xc001cf08
c0000097:	81 eb 04 cf 01 c0    	sub    ebx,0xc001cf04
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 04 cf 01 c0       	mov    esi,0xc001cf04
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 f4 fc 01 c0       	push   0xc001fcf4
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 f4 fc 01 c0       	push   0xc001fcf4
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 9c 2e 01 00       	call   c001314c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 80 a1 00 00       	call   c000a448 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 7a 2e 01 00       	call   c001314c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 83 33 01 00       	call   c0013674 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 d2 39 01 00       	call   c0013ccc <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 58 ff 00 00       	jmp    c00102da <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 20 cf 01 c0 02 	test   BYTE PTR [edx-0x3ffe30e0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 cf 01 c0 01 	test   BYTE PTR [edx-0x3ffe30e0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 20 cf 01 c0 08 	test   BYTE PTR [edx-0x3ffe30e0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 20 cf 01 c0 04 	test   BYTE PTR [ebx-0x3ffe30e0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 20 cf 01 c0 01 	test   BYTE PTR [edx-0x3ffe30e0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 24 d0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2fdc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 72 53 01 00       	jmp    c001705c <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 a0 53 01 00       	jmp    c00170a0 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 c5 53 01 00       	jmp    c00170e4 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 80 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2e80]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 80 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2e80]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba f8 f1 01 c0       	mov    edx,0xc001f1f8
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 3c d0 01 c0       	mov    edx,0xc001d03c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 42 d0 01 c0       	mov    eax,0xc001d042
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 00 d1 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f00]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 4b d0 01 c0       	mov    eax,0xc001d04b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 80 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2e80]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 d0 d0 01 c0       	mov    eax,0xc001d0d0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb c0 d0 01 c0       	mov    ebx,0xc001d0c0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba a0 d0 01 c0       	mov    edx,0xc001d0a0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba b0 d0 01 c0       	mov    edx,0xc001d0b0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 52 d0 01 c0       	mov    edx,0xc001d052
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 5e d0 01 c0       	mov    edx,0xc001d05e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 72 d0 01 c0       	mov    edx,0xc001d072
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c a0 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d4a0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 a0 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d4a0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 a0 d2 01 c0       	mov    eax,0xc001d2a0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 e0 d1 01 c0       	mov    eax,0xc001d1e0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 a0 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2e60]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 b9 19 01 00       	call   c0017938 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 a0 d5 01 c0       	push   0xc001d5a0
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 a0 d5 01 c0       	push   0xc001d5a0
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 a3 d5 01 c0       	push   0xc001d5a3
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 aa d5 01 c0       	push   0xc001d5aa
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 f2 51 00 00       	call   c000bbca <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 b1 d5 01 c0       	push   0xc001d5b1
c0006a09:	e8 69 92 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 ca d5 01 c0       	push   0xc001d5ca
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 66 ca 00 00       	call   c001349c <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 79 cc 00 00       	call   c00136c4 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 18 41 01 c0       	push   0xc0014118
c0006a5a:	52                   	push   edx
c0006a5b:	e8 64 cc 00 00       	call   c00136c4 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 c8 d6 01 c0       	push   0xc001d6c8
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 fe 91 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c0006a79:	e8 79 da 00 00       	call   c00144f7 <Vm::initialise8086()>
c0006a7e:	e8 8b 3f 00 00       	call   c000aa0e <Fs::initVFS()>
c0006a83:	c7 04 24 d7 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5d7
c0006a8a:	e8 e8 91 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 c8 d6 01 c0       	push   0xc001d6c8
c0006aae:	e8 c4 91 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c0006ab3:	e8 9a 96 00 00       	call   c0010152 <Krnl::loadSystemEnv()>
c0006ab8:	e8 f7 98 00 00       	call   c00103b4 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 f1 d5 01 c0       	push   0xc001d5f1
c0006ac7:	68 fa d5 01 c0       	push   0xc001d5fa
c0006acc:	e8 61 af 00 00       	call   c0011a32 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 43 4a 00 00       	call   c000b51c <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ec d6 01 c0 	mov    DWORD PTR [esp],0xc001d6ec
c0006ae0:	e8 92 91 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 d1 50 00 00       	call   c000bbc8 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 02 d6 01 c0 	mov    DWORD PTR [esp],0xc001d602
c0006afe:	e8 74 91 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 13 d6 01 c0       	push   0xc001d613
c0006b12:	e8 a2 c3 00 00       	call   c0012eb9 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 ca c5 00 00       	call   c00130ea <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 b3 cf 00 00       	call   c0013ae0 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 2f d6 01 c0       	push   0xc001d62f
c0006b41:	50                   	push   eax
c0006b42:	e8 fd 50 00 00       	call   c000bc44 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 38 d7 01 c0       	mov    edx,0xc001d738
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 d5 52 01 00       	call   c001bf06 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 38 85 00 00       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 11 85 00 00       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 ef 84 00 00       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 cd 84 00 00       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 db 83 00 00       	call   c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 b6 83 00 00       	call   c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 3f 51 01 00       	call   c001bec0 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 3c 4e 01 00       	call   c001bbe0 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 d2 83 00 00       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 38 d6 01 c0       	push   0xc001d638
c0006e14:	e8 d6 94 00 00       	call   c00102ef <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 3e d6 01 c0       	push   0xc001d63e
c0006e4c:	e8 9e 94 00 00       	call   c00102ef <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 83 7d 00 00       	jmp    c000ec1c <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 44 d6 01 c0       	push   0xc001d644
c0006eed:	0f 94 05 60 f9 01 c0 	sete   BYTE PTR ds:0xc001f960
c0006ef4:	e8 7e 8d 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 a5 78 00 00       	call   c000e7b4 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 8e 4b 00 00       	call   c000baac <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 5c d6 01 c0 	mov    DWORD PTR [esp],0xc001d65c
c0006f37:	e8 3b 8d 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 0a 83 00 00       	call   c000f25c <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 4b 4b 00 00       	call   c000baac <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 0c d7 01 c0       	push   0xc001d70c
c0006f7e:	e8 f4 8c 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c0006f83:	e8 a6 e6 00 00       	call   c001562e <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 76 d6 01 c0 	mov    DWORD PTR [esp],0xc001d676
c0006f8f:	e8 e3 8c 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 3c c8 00 00       	call   c00137dc <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 91 d6 01 c0       	push   0xc001d691
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 7c 36 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 a2 d6 01 c0       	push   0xc001d6a2
c000700e:	e8 dc 92 00 00       	call   c00102ef <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 af d6 01 c0       	push   0xc001d6af
c0007023:	e8 c7 92 00 00       	call   c00102ef <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 b9 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d6b9
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 b0 92 00 00       	jmp    c00102ef <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 e3 e0 00 00       	call   c0015308 <HalSystemIdle()>
c0007225:	e8 98 52 01 00       	call   c001c4c2 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 70 bc 01 c0       	push   0xc001bc70
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 80 bc 01 c0       	push   0xc001bc80
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 8a bc 01 c0       	push   0xc001bc8a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 94 bc 01 c0       	push   0xc001bc94
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 9e bc 01 c0       	push   0xc001bc9e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 a8 bc 01 c0       	push   0xc001bca8
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 b2 bc 01 c0       	push   0xc001bcb2
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 bc bc 01 c0       	push   0xc001bcbc
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 c6 bc 01 c0       	push   0xc001bcc6
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 ce bc 01 c0       	push   0xc001bcce
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 d8 bc 01 c0       	push   0xc001bcd8
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 e0 bc 01 c0       	push   0xc001bce0
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 e8 bc 01 c0       	push   0xc001bce8
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 f0 bc 01 c0       	push   0xc001bcf0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 f8 bc 01 c0       	push   0xc001bcf8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 00 bd 01 c0       	push   0xc001bd00
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 0a bd 01 c0       	push   0xc001bd0a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 14 bd 01 c0       	push   0xc001bd14
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 1e bd 01 c0       	push   0xc001bd1e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 b8 bd 01 c0       	push   0xc001bdb8
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 bf bd 01 c0       	push   0xc001bdbf
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 aa bd 01 c0       	push   0xc001bdaa
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 b1 bd 01 c0       	push   0xc001bdb1
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 28 bd 01 c0       	push   0xc001bd28
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 32 bd 01 c0       	push   0xc001bd32
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 3c bd 01 c0       	push   0xc001bd3c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 46 bd 01 c0       	push   0xc001bd46
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 50 bd 01 c0       	push   0xc001bd50
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 5a bd 01 c0       	push   0xc001bd5a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 64 bd 01 c0       	push   0xc001bd64
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 6e bd 01 c0       	push   0xc001bd6e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 78 bd 01 c0       	push   0xc001bd78
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 82 bd 01 c0       	push   0xc001bd82
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 8c bd 01 c0       	push   0xc001bd8c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 96 bd 01 c0       	push   0xc001bd96
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 a0 bd 01 c0       	push   0xc001bda0
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 51 be 01 c0       	push   0xc001be51
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 5b be 01 c0       	push   0xc001be5b
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 65 be 01 c0       	push   0xc001be65
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 6f be 01 c0       	push   0xc001be6f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 79 be 01 c0       	push   0xc001be79
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 83 be 01 c0       	push   0xc001be83
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 8d be 01 c0       	push   0xc001be8d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 97 be 01 c0       	push   0xc001be97
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 e3 23 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 c6 bc 01 c0       	push   0xc001bcc6
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 48 f9 01 c0    	mov    edx,DWORD PTR ds:0xc001f948
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d 48 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f948
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 1e 22 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 48 f9 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f948,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 48 f9 01 c0       	mov    eax,ds:0xc001f948
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 5c d7 01 c0       	push   0xc001d75c
c000770e:	e8 5a 2f 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 8c d7 01 c0       	push   0xc001d78c
c000772d:	e8 bd 8b 00 00       	call   c00102ef <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 91 d7 01 c0       	push   0xc001d791
c0007743:	e8 a7 8b 00 00       	call   c00102ef <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 76 22 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 02 1f 00 00       	call   c000969e <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 98 d7 01 c0       	push   0xc001d798
c0007862:	e8 06 2e 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0007867:	e8 9d 83 00 00       	call   c000fc09 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 25 24 00 00       	call   c0009cb8 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 bc 4b 01 00       	call   c001c45a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 c5 1e 00 00       	call   c0009794 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 b0 d7 01 c0       	push   0xc001d7b0
c000792c:	e8 be 89 00 00       	call   c00102ef <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 b0 d7 01 c0       	push   0xc001d7b0
c0007993:	e8 57 89 00 00       	call   c00102ef <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 4c f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f94c
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 4c f9 01 c0    	add    eax,DWORD PTR ds:0xc001f94c
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 4c f9 01 c0    	mov    edx,DWORD PTR ds:0xc001f94c
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 55 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d855
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 6c 88 00 00       	jmp    c00102ef <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 78 28 00 00       	call   c000a368 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 d8 d7 01 c0       	push   0xc001d7d8
c0007aff:	e8 eb 87 00 00       	call   c00102ef <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 6b d8 01 c0       	push   0xc001d86b
c0007c18:	e8 50 2a 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 08 d8 01 c0       	push   0xc001d808
c0007ca4:	e8 c4 29 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 2c d8 01 c0       	push   0xc001d82c
c0007d40:	e8 28 29 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 91 d8 01 c0       	push   0xc001d891
c0007d76:	e8 f2 28 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 83 d8 01 c0       	push   0xc001d883
c0007de5:	e8 05 85 00 00       	call   c00102ef <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba f0 d8 01 c0       	mov    edx,0xc001d8f0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 7d 26 00 00       	call   c000a577 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 ad d8 01 c0       	push   0xc001d8ad
c0007fa7:	e8 43 83 00 00       	call   c00102ef <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 ef b8 00 00       	call   c00138e4 <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 b3 42 01 00       	call   c001c340 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 ca d8 01 c0       	push   0xc001d8ca
c00080a2:	e8 48 82 00 00       	call   c00102ef <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba f0 d8 01 c0       	mov    edx,0xc001d8f0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 84 d9 01 c0       	mov    edx,0xc001d984
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 06 24 00 00       	call   c000a577 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 40 47 00 00       	call   c000c8cc <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 0e e3 00 00       	call   c00164c0 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 80 f9 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0680]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 80 f9 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0680]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 38 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe07c8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 10 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe07f0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 31 e0 00 00       	call   c001634c <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 8c e0 00 00       	jmp    c0016454 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 04 d9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d904
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 db 7e 00 00       	jmp    c00102ef <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 54 2f 00 00       	jmp    c000b4c3 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 12 d9 01 c0       	mov    esi,0xc001d912
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 9e db 00 00       	call   c0016454 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 84 d9 01 c0       	mov    edx,0xc001d984
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 48 0f 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 23 d9 01 c0       	push   0xc001d923
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 29 d9 01 c0       	push   0xc001d929
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 2f d9 01 c0       	push   0xc001d92f
c0008b78:	e8 72 77 00 00       	call   c00102ef <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba 4c da 01 c0       	mov    edx,0xc001da4c
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 c0 f9 01 c0       	mov    eax,ds:0xc001f9c0
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 c0 f9 01 c0    	mov    DWORD PTR ds:0xc001f9c0,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 a3 36 01 00       	call   c001c528 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 68 da 01 c0       	mov    edx,0xc001da68
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba 4c da 01 c0       	mov    edx,0xc001da4c
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 a7 35 01 00       	call   c001c5fc <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 9b 35 01 00       	call   c001c604 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 a1 34 01 00       	call   c001c528 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 24 da 01 c0       	push   0xc001da24
c00090a9:	e8 41 72 00 00       	call   c00102ef <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 9b 14 00 00       	call   c000a577 <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 68 da 01 c0       	mov    edx,0xc001da68
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 4f 14 00 00       	call   c000a577 <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 aa 34 01 00       	call   c001c5fc <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 37 35 01 00       	call   c001c6a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 f5 32 01 00       	call   c001c4e6 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 44 f9 01 c0       	push   0xc001f944
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 e4 c4 01 c0       	push   0xc001c4e4
c0009206:	e8 1c 13 00 00       	call   c000a527 <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 c8 f9 01 c0    	add    eax,DWORD PTR ds:0xc001f9c8
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d c8 f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f9c8
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d c4 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f9c4
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 c4 f9 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f9c4,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d c4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9c4,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 7c da 01 c0       	push   0xc001da7c
c00092ff:	e8 eb 6f 00 00       	call   c00102ef <KePanic(char const*)>
c0009304:	8b 3d c4 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f9c4
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d c4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9c4,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 c4 f9 01 c0       	mov    eax,ds:0xc001f9c4
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 c4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9c4,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 c4 f9 01 c0       	mov    ds:0xc001f9c4,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 cc f9 01 c0 	imul   eax,DWORD PTR ds:0xc001f9cc
c00093bf:	03 05 d4 f9 01 c0    	add    eax,DWORD PTR ds:0xc001f9d4
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d cc f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f9cc
c00093d5:	a1 d0 f9 01 c0       	mov    eax,ds:0xc001f9d0
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d d0 f9 01 c0    	cmp    DWORD PTR ds:0xc001f9d0,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 69 dc 01 c0       	push   0xc001dc69
c0009419:	e8 d1 6e 00 00       	call   c00102ef <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 80 dc 01 c0       	push   0xc001dc80
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d d0 f9 01 c0    	mov    DWORD PTR ds:0xc001f9d0,ebx
c00094b7:	c6 05 d8 f9 01 c0 43 	mov    BYTE PTR ds:0xc001f9d8,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 d4 f9 01 c0       	mov    ds:0xc001f9d4,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 cc f9 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f9cc,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 d0 f9 01 c0       	mov    eax,ds:0xc001f9d0
c00094e9:	f7 35 cc f9 01 c0    	div    DWORD PTR ds:0xc001f9cc
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS(VAS*)>:
c0009500:	83 ec 0c             	sub    esp,0xc
c0009503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009507:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009519:	83 ec 0c             	sub    esp,0xc
c000951c:	68 9c da 01 c0       	push   0xc001da9c
c0009521:	e8 c9 6d 00 00       	call   c00102ef <KePanic(char const*)>
c0009526:	83 c4 10             	add    esp,0x10
c0009529:	90                   	nop
c000952a:	83 c4 0c             	add    esp,0xc
c000952d:	c3                   	ret    

c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000952e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009532:	89 c2                	mov    edx,eax
c0009534:	c1 e8 0a             	shr    eax,0xa
c0009537:	c1 ea 16             	shr    edx,0x16
c000953a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000953f:	19 c9                	sbb    ecx,ecx
c0009541:	c1 e2 0c             	shl    edx,0xc
c0009544:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000954a:	25 fc 0f 00 00       	and    eax,0xffc
c000954f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009556:	01 d0                	add    eax,edx
c0009558:	c3                   	ret    
c0009559:	90                   	nop

c000955a <VAS::getPageTableEntry(unsigned long)>:
c000955a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000955e:	89 ca                	mov    edx,ecx
c0009560:	c1 e9 0a             	shr    ecx,0xa
c0009563:	c1 ea 16             	shr    edx,0x16
c0009566:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000956c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009572:	c1 e0 0c             	shl    eax,0xc
c0009575:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009578:	c3                   	ret    

c0009579 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009579:	57                   	push   edi
c000957a:	56                   	push   esi
c000957b:	be 01 00 00 00       	mov    esi,0x1
c0009580:	53                   	push   ebx
c0009581:	83 ec 10             	sub    esp,0x10
c0009584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009588:	c1 eb 0c             	shr    ebx,0xc
c000958b:	eb 3f                	jmp    c00095cc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000958d:	83 ec 08             	sub    esp,0x8
c0009590:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0009595:	57                   	push   edi
c0009596:	50                   	push   eax
c0009597:	e8 be ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000959c:	83 c4 10             	add    esp,0x10
c000959f:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095a5:	f6 c4 04             	test   ah,0x4
c00095a8:	75 60                	jne    c000960a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095aa:	80 fa 04             	cmp    dl,0x4
c00095ad:	74 79                	je     c0009628 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095af:	80 fa 02             	cmp    dl,0x2
c00095b2:	0f 84 89 00 00 00    	je     c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095b8:	80 fa 03             	cmp    dl,0x3
c00095bb:	0f 84 ae 00 00 00    	je     c000966f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095c1:	fe ca                	dec    dl
c00095c3:	0f 84 93 00 00 00    	je     c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095c9:	43                   	inc    ebx
c00095ca:	31 f6                	xor    esi,esi
c00095cc:	53                   	push   ebx
c00095cd:	89 df                	mov    edi,ebx
c00095cf:	e8 8d fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00095d4:	c1 e7 0c             	shl    edi,0xc
c00095d7:	5a                   	pop    edx
c00095d8:	84 c0                	test   al,al
c00095da:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095de:	75 ad                	jne    c000958d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095e0:	83 ec 0c             	sub    esp,0xc
c00095e3:	68 97 dc 01 c0       	push   0xc001dc97
c00095e8:	e8 02 6d 00 00       	call   c00102ef <KePanic(char const*)>
c00095ed:	5a                   	pop    edx
c00095ee:	59                   	pop    ecx
c00095ef:	57                   	push   edi
c00095f0:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c00095f6:	57                   	push   edi
c00095f7:	e8 5e ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00095fc:	83 c4 10             	add    esp,0x10
c00095ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0009601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009605:	f6 c4 04             	test   ah,0x4
c0009608:	74 bf                	je     c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000960a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000960e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009613:	83 ec 0c             	sub    esp,0xc
c0009616:	50                   	push   eax
c0009617:	e8 17 e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009623:	80 fa 04             	cmp    dl,0x4
c0009626:	75 87                	jne    c00095af <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009628:	89 f0                	mov    eax,esi
c000962a:	84 c0                	test   al,al
c000962c:	75 47                	jne    c0009675 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000962e:	c7 44 24 20 c0 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dac0
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	5b                   	pop    ebx
c000963a:	5e                   	pop    esi
c000963b:	5f                   	pop    edi
c000963c:	e9 ae 6c 00 00       	jmp    c00102ef <KePanic(char const*)>
c0009641:	89 f0                	mov    eax,esi
c0009643:	84 c0                	test   al,al
c0009645:	75 15                	jne    c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	68 b3 dc 01 c0       	push   0xc001dcb3
c000964f:	e8 9b 6c 00 00       	call   c00102ef <KePanic(char const*)>
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	e9 6d ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000965c:	83 ec 08             	sub    esp,0x8
c000965f:	6a 00                	push   0x0
c0009661:	53                   	push   ebx
c0009662:	e8 c5 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	e9 5a ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000966f:	89 f0                	mov    eax,esi
c0009671:	84 c0                	test   al,al
c0009673:	75 15                	jne    c000968a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009675:	83 ec 08             	sub    esp,0x8
c0009678:	6a 00                	push   0x0
c000967a:	53                   	push   ebx
c000967b:	e8 ac fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	5b                   	pop    ebx
c0009687:	5e                   	pop    esi
c0009688:	5f                   	pop    edi
c0009689:	c3                   	ret    
c000968a:	c7 44 24 20 cf dc 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dccf
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	5b                   	pop    ebx
c0009696:	5e                   	pop    esi
c0009697:	5f                   	pop    edi
c0009698:	e9 52 6c 00 00       	jmp    c00102ef <KePanic(char const*)>
c000969d:	90                   	nop

c000969e <VAS::freeAllocatedPages(unsigned long)>:
c000969e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096aa:	74 09                	je     c00096b5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096b0:	e9 c4 fe ff ff       	jmp    c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00096b5:	c7 44 24 04 e4 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dae4
c00096bd:	e9 ab 0f 00 00       	jmp    c000a66d <Dbg::kprintf(char const*, ...)>

c00096c2 <VAS::virtualToPhysical(unsigned long)>:
c00096c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096c6:	50                   	push   eax
c00096c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096cb:	52                   	push   edx
c00096cc:	e8 89 fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00096d1:	59                   	pop    ecx
c00096d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00096d4:	5a                   	pop    edx
c00096d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096da:	c3                   	ret    
c00096db:	90                   	nop

c00096dc <VAS::reflagRange(unsigned long, int, int, int)>:
c00096dc:	55                   	push   ebp
c00096dd:	57                   	push   edi
c00096de:	56                   	push   esi
c00096df:	53                   	push   ebx
c00096e0:	83 ec 0c             	sub    esp,0xc
c00096e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00096e7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00096eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00096ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00096f3:	85 ff                	test   edi,edi
c00096f5:	7e 33                	jle    c000972a <VAS::reflagRange(unsigned long, int, int, int)+0x4e>
c00096f7:	c1 e7 0c             	shl    edi,0xc
c00096fa:	01 ef                	add    edi,ebp
c00096fc:	55                   	push   ebp
c00096fd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0009703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009707:	50                   	push   eax
c0009708:	e8 4d fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000970d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000970f:	21 d9                	and    ecx,ebx
c0009711:	09 f1                	or     ecx,esi
c0009713:	89 08                	mov    DWORD PTR [eax],ecx
c0009715:	89 34 24             	mov    DWORD PTR [esp],esi
c0009718:	53                   	push   ebx
c0009719:	68 e9 dc 01 c0       	push   0xc001dce9
c000971e:	e8 4a 0f 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0009723:	83 c4 10             	add    esp,0x10
c0009726:	39 ef                	cmp    edi,ebp
c0009728:	75 d2                	jne    c00096fc <VAS::reflagRange(unsigned long, int, int, int)+0x20>
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <VAS::setToWriteCombining(unsigned long, int)>:
c0009732:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009737:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000973d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009744:	75 01                	jne    c0009747 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009746:	c3                   	ret    
c0009747:	83 ec 18             	sub    esp,0x18
c000974a:	68 80 00 00 00       	push   0x80
c000974f:	6a ff                	push   0xffffffff
c0009751:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009755:	50                   	push   eax
c0009756:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000975a:	52                   	push   edx
c000975b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000975f:	51                   	push   ecx
c0009760:	e8 77 ff ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c0009765:	83 c4 2c             	add    esp,0x2c
c0009768:	c3                   	ret    
c0009769:	90                   	nop

c000976a <VAS::mapOtherVASIn(bool, VAS*)>:
c000976a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000976f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009773:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000977a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000977d:	19 c0                	sbb    eax,eax
c000977f:	83 ca 03             	or     edx,0x3
c0009782:	83 e0 fc             	and    eax,0xfffffffc
c0009785:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000978c:	0f 20 d8             	mov    eax,cr3
c000978f:	0f 22 d8             	mov    cr3,eax
c0009792:	c3                   	ret    
c0009793:	90                   	nop

c0009794 <VAS::~VAS()>:
c0009794:	83 ec 2c             	sub    esp,0x2c
c0009797:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000979f:	fa                   	cli    
c00097a0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097a5:	40                   	inc    eax
c00097a6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00097ab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097b5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097bf:	6a 01                	push   0x1
c00097c1:	50                   	push   eax
c00097c2:	e8 a3 ff ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c00097c7:	83 c4 0c             	add    esp,0xc
c00097ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097d2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097da:	0f 8f d4 00 00 00    	jg     c00098b4 <VAS::~VAS()+0x120>
c00097e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00097e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097eb:	c1 e2 02             	shl    edx,0x2
c00097ee:	01 d0                	add    eax,edx
c00097f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097fa:	83 e0 01             	and    eax,0x1
c00097fd:	0f 84 a8 00 00 00    	je     c00098ab <VAS::~VAS()+0x117>
c0009803:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000980b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009813:	7f 72                	jg     c0009887 <VAS::~VAS()+0xf3>
c0009815:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009819:	c1 e0 0a             	shl    eax,0xa
c000981c:	89 c2                	mov    edx,eax
c000981e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009822:	01 d0                	add    eax,edx
c0009824:	c1 e0 0c             	shl    eax,0xc
c0009827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000982b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009830:	8b 00                	mov    eax,DWORD PTR [eax]
c0009832:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009835:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000983b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000983f:	6a 01                	push   0x1
c0009841:	50                   	push   eax
c0009842:	e8 e7 fc ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009847:	83 c4 0c             	add    esp,0xc
c000984a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000984e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000985c:	25 01 04 00 00       	and    eax,0x401
c0009861:	3d 01 04 00 00       	cmp    eax,0x401
c0009866:	75 19                	jne    c0009881 <VAS::~VAS()+0xed>
c0009868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000986c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009871:	83 ec 0c             	sub    esp,0xc
c0009874:	50                   	push   eax
c0009875:	e8 b9 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000987a:	83 c4 10             	add    esp,0x10
c000987d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009881:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009885:	eb 84                	jmp    c000980b <VAS::~VAS()+0x77>
c0009887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000988b:	25 00 04 00 00       	and    eax,0x400
c0009890:	74 19                	je     c00098ab <VAS::~VAS()+0x117>
c0009892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009896:	25 00 f0 ff ff       	and    eax,0xfffff000
c000989b:	83 ec 0c             	sub    esp,0xc
c000989e:	50                   	push   eax
c000989f:	e8 8f e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098a4:	83 c4 10             	add    esp,0x10
c00098a7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098ab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098af:	e9 1e ff ff ff       	jmp    c00097d2 <VAS::~VAS()+0x3e>
c00098b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098bb:	83 ec 0c             	sub    esp,0xc
c00098be:	50                   	push   eax
c00098bf:	e8 b5 fc ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00098c4:	83 c4 10             	add    esp,0x10
c00098c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098ce:	83 ec 0c             	sub    esp,0xc
c00098d1:	50                   	push   eax
c00098d2:	e8 5c e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098d7:	83 c4 10             	add    esp,0x10
c00098da:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098de:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098e3:	48                   	dec    eax
c00098e4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00098e9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098ee:	85 c0                	test   eax,eax
c00098f0:	75 01                	jne    c00098f3 <VAS::~VAS()+0x15f>
c00098f2:	fb                   	sti    
c00098f3:	90                   	nop
c00098f4:	83 c4 2c             	add    esp,0x2c
c00098f7:	c3                   	ret    

c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00098f8:	55                   	push   ebp
c00098f9:	57                   	push   edi
c00098fa:	56                   	push   esi
c00098fb:	53                   	push   ebx
c00098fc:	83 ec 1c             	sub    esp,0x1c
c00098ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009903:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009907:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000990d:	77 0b                	ja     c000991a <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000990f:	0f 20 d8             	mov    eax,cr3
c0009912:	0f 20 d8             	mov    eax,cr3
c0009915:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009918:	75 47                	jne    c0009961 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000991a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000991e:	09 d8                	or     eax,ebx
c0009920:	a9 ff 0f 00 00       	test   eax,0xfff
c0009925:	75 57                	jne    c000997e <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009927:	89 de                	mov    esi,ebx
c0009929:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000992c:	c1 ee 16             	shr    esi,0x16
c000992f:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009936:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000993a:	74 54                	je     c0009990 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000993c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009940:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009946:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000994a:	c1 e6 0c             	shl    esi,0xc
c000994d:	c1 eb 0a             	shr    ebx,0xa
c0009950:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009956:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009959:	83 c4 1c             	add    esp,0x1c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    
c0009961:	83 ec 0c             	sub    esp,0xc
c0009964:	68 08 db 01 c0       	push   0xc001db08
c0009969:	e8 ff 0c 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000996e:	83 c4 10             	add    esp,0x10
c0009971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009975:	09 d8                	or     eax,ebx
c0009977:	a9 ff 0f 00 00       	test   eax,0xfff
c000997c:	74 a9                	je     c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000997e:	83 ec 0c             	sub    esp,0xc
c0009981:	68 70 db 01 c0       	push   0xc001db70
c0009986:	e8 64 69 00 00       	call   c00102ef <KePanic(char const*)>
c000998b:	83 c4 10             	add    esp,0x10
c000998e:	eb 97                	jmp    c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009994:	e8 fc e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009999:	83 ec 0c             	sub    esp,0xc
c000999c:	89 c5                	mov    ebp,eax
c000999e:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099a8:	6a 01                	push   0x1
c00099aa:	e8 d6 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099af:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099b6:	6a 01                	push   0x1
c00099b8:	50                   	push   eax
c00099b9:	55                   	push   ebp
c00099ba:	81 cd 07 04 00 00    	or     ebp,0x407
c00099c0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099c4:	51                   	push   ecx
c00099c5:	e8 28 02 00 00       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ca:	83 c4 1c             	add    esp,0x1c
c00099cd:	68 00 10 00 00       	push   0x1000
c00099d2:	6a 00                	push   0x0
c00099d4:	50                   	push   eax
c00099d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099d9:	e8 f2 6a ff ff       	call   c00004d0 <memset>
c00099de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00099e2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099e5:	e8 8f fb ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00099ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099f1:	83 c4 10             	add    esp,0x10
c00099f4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00099f7:	e9 40 ff ff ff       	jmp    c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c00099fc <VAS::allocatePages(int, int)>:
c00099fc:	55                   	push   ebp
c00099fd:	57                   	push   edi
c00099fe:	56                   	push   esi
c00099ff:	53                   	push   ebx
c0009a00:	83 ec 1c             	sub    esp,0x1c
c0009a03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a07:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a12:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a18:	83 e0 01             	and    eax,0x1
c0009a1b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a1f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a23:	0f 85 cc 00 00 00    	jne    c0009af5 <VAS::allocatePages(int, int)+0xf9>
c0009a29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a30:	85 c0                	test   eax,eax
c0009a32:	0f 84 a1 00 00 00    	je     c0009ad9 <VAS::allocatePages(int, int)+0xdd>
c0009a38:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a40:	c1 e6 0c             	shl    esi,0xc
c0009a43:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a47:	85 c0                	test   eax,eax
c0009a49:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a4c:	7e 33                	jle    c0009a81 <VAS::allocatePages(int, int)+0x85>
c0009a4e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a56:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a5c:	e8 34 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a61:	55                   	push   ebp
c0009a62:	53                   	push   ebx
c0009a63:	50                   	push   eax
c0009a64:	57                   	push   edi
c0009a65:	e8 8e fe ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a6a:	83 c4 10             	add    esp,0x10
c0009a6d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a72:	74 03                	je     c0009a77 <VAS::allocatePages(int, int)+0x7b>
c0009a74:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a77:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a7d:	39 de                	cmp    esi,ebx
c0009a7f:	75 db                	jne    c0009a5c <VAS::allocatePages(int, int)+0x60>
c0009a81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a86:	75 12                	jne    c0009a9a <VAS::allocatePages(int, int)+0x9e>
c0009a88:	0f 20 d8             	mov    eax,cr3
c0009a8b:	0f 22 d8             	mov    cr3,eax
c0009a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a92:	83 c4 1c             	add    esp,0x1c
c0009a95:	5b                   	pop    ebx
c0009a96:	5e                   	pop    esi
c0009a97:	5f                   	pop    edi
c0009a98:	5d                   	pop    ebp
c0009a99:	c3                   	ret    
c0009a9a:	c1 ee 0a             	shr    esi,0xa
c0009a9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009aa1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009aa7:	c1 eb 0a             	shr    ebx,0xa
c0009aaa:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ab0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ab6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009abc:	39 c3                	cmp    ebx,eax
c0009abe:	77 ce                	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009ac0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ac3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ac9:	39 d8                	cmp    eax,ebx
c0009acb:	73 f3                	jae    c0009ac0 <VAS::allocatePages(int, int)+0xc4>
c0009acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ad1:	83 c4 1c             	add    esp,0x1c
c0009ad4:	5b                   	pop    ebx
c0009ad5:	5e                   	pop    esi
c0009ad6:	5f                   	pop    edi
c0009ad7:	5d                   	pop    ebp
c0009ad8:	c3                   	ret    
c0009ad9:	83 ec 0c             	sub    esp,0xc
c0009adc:	68 94 db 01 c0       	push   0xc001db94
c0009ae1:	e8 09 68 00 00       	call   c00102ef <KePanic(char const*)>
c0009ae6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ae9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aed:	83 c4 10             	add    esp,0x10
c0009af0:	e9 43 ff ff ff       	jmp    c0009a38 <VAS::allocatePages(int, int)+0x3c>
c0009af5:	83 ec 0c             	sub    esp,0xc
c0009af8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009afc:	51                   	push   ecx
c0009afd:	e8 83 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b06:	83 c4 10             	add    esp,0x10
c0009b09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b0e:	0f 87 9b 00 00 00    	ja     c0009baf <VAS::allocatePages(int, int)+0x1b3>
c0009b14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b18:	85 d2                	test   edx,edx
c0009b1a:	7e 3c                	jle    c0009b58 <VAS::allocatePages(int, int)+0x15c>
c0009b1c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b20:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b28:	c1 e5 0c             	shl    ebp,0xc
c0009b2b:	81 ce 00 04 00 00    	or     esi,0x400
c0009b31:	01 dd                	add    ebp,ebx
c0009b33:	e8 5d df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b38:	56                   	push   esi
c0009b39:	53                   	push   ebx
c0009b3a:	50                   	push   eax
c0009b3b:	57                   	push   edi
c0009b3c:	e8 b7 fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b41:	83 c4 10             	add    esp,0x10
c0009b44:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b49:	74 03                	je     c0009b4e <VAS::allocatePages(int, int)+0x152>
c0009b4b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b4e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b54:	39 dd                	cmp    ebp,ebx
c0009b56:	75 db                	jne    c0009b33 <VAS::allocatePages(int, int)+0x137>
c0009b58:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b5d:	0f 84 25 ff ff ff    	je     c0009a88 <VAS::allocatePages(int, int)+0x8c>
c0009b63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b6b:	89 d3                	mov    ebx,edx
c0009b6d:	c1 e0 0c             	shl    eax,0xc
c0009b70:	c1 eb 0a             	shr    ebx,0xa
c0009b73:	01 d0                	add    eax,edx
c0009b75:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b7b:	c1 e8 0a             	shr    eax,0xa
c0009b7e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b89:	2d 00 00 40 00       	sub    eax,0x400000
c0009b8e:	39 c3                	cmp    ebx,eax
c0009b90:	0f 87 f8 fe ff ff    	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009b96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b9f:	39 d8                	cmp    eax,ebx
c0009ba1:	73 f3                	jae    c0009b96 <VAS::allocatePages(int, int)+0x19a>
c0009ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ba7:	83 c4 1c             	add    esp,0x1c
c0009baa:	5b                   	pop    ebx
c0009bab:	5e                   	pop    esi
c0009bac:	5f                   	pop    edi
c0009bad:	5d                   	pop    ebp
c0009bae:	c3                   	ret    
c0009baf:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bba:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bc1:	0f 84 4d ff ff ff    	je     c0009b14 <VAS::allocatePages(int, int)+0x118>
c0009bc7:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bcf:	e9 40 ff ff ff       	jmp    c0009b14 <VAS::allocatePages(int, int)+0x118>

c0009bd4 <VAS::setCPUSpecific(unsigned long)>:
c0009bd4:	83 ec 0c             	sub    esp,0xc
c0009bd7:	6a 05                	push   0x5
c0009bd9:	68 00 00 40 c2       	push   0xc2400000
c0009bde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be2:	50                   	push   eax
c0009be3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009be7:	52                   	push   edx
c0009be8:	e8 0b fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bed:	83 c4 1c             	add    esp,0x1c
c0009bf0:	c3                   	ret    
c0009bf1:	90                   	nop

c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009bf2:	55                   	push   ebp
c0009bf3:	57                   	push   edi
c0009bf4:	56                   	push   esi
c0009bf5:	53                   	push   ebx
c0009bf6:	83 ec 1c             	sub    esp,0x1c
c0009bf9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bfe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c08:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c0c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c12:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c16:	83 e0 01             	and    eax,0x1
c0009c19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c21:	85 c0                	test   eax,eax
c0009c23:	7e 39                	jle    c0009c5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c29:	89 f3                	mov    ebx,esi
c0009c2b:	c1 e0 0c             	shl    eax,0xc
c0009c2e:	01 f0                	add    eax,esi
c0009c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c34:	55                   	push   ebp
c0009c35:	53                   	push   ebx
c0009c36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c3a:	29 f0                	sub    eax,esi
c0009c3c:	01 d8                	add    eax,ebx
c0009c3e:	50                   	push   eax
c0009c3f:	57                   	push   edi
c0009c40:	e8 b3 fc ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c45:	83 c4 10             	add    esp,0x10
c0009c48:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c4d:	74 03                	je     c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c4f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c52:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c58:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c5c:	75 d6                	jne    c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c5e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c63:	75 10                	jne    c0009c75 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c65:	0f 20 d8             	mov    eax,cr3
c0009c68:	0f 22 d8             	mov    cr3,eax
c0009c6b:	83 c4 1c             	add    esp,0x1c
c0009c6e:	89 f0                	mov    eax,esi
c0009c70:	5b                   	pop    ebx
c0009c71:	5e                   	pop    esi
c0009c72:	5f                   	pop    edi
c0009c73:	5d                   	pop    ebp
c0009c74:	c3                   	ret    
c0009c75:	89 f3                	mov    ebx,esi
c0009c77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c7b:	c1 eb 0a             	shr    ebx,0xa
c0009c7e:	c1 e0 0c             	shl    eax,0xc
c0009c81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c87:	01 f0                	add    eax,esi
c0009c89:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c8f:	c1 e8 0a             	shr    eax,0xa
c0009c92:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c97:	2d 00 00 40 00       	sub    eax,0x400000
c0009c9c:	39 c3                	cmp    ebx,eax
c0009c9e:	77 cb                	ja     c0009c6b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009ca0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ca3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ca9:	39 d8                	cmp    eax,ebx
c0009cab:	73 f3                	jae    c0009ca0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	89 f0                	mov    eax,esi
c0009cb2:	5b                   	pop    ebx
c0009cb3:	5e                   	pop    esi
c0009cb4:	5f                   	pop    edi
c0009cb5:	5d                   	pop    ebp
c0009cb6:	c3                   	ret    
c0009cb7:	90                   	nop

c0009cb8 <VAS::VAS()>:
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd5:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c0009cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cde:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ce6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ced:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009cf4:	ba 7d 00 02 c0       	mov    edx,0xc002007d
c0009cf9:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009cfe:	29 c2                	sub    edx,eax
c0009d00:	89 d0                	mov    eax,edx
c0009d02:	05 ff 0f 00 00       	add    eax,0xfff
c0009d07:	c1 e8 0c             	shr    eax,0xc
c0009d0a:	89 c1                	mov    ecx,eax
c0009d0c:	ba 00 00 02 c0       	mov    edx,0xc0020000
c0009d11:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009d16:	83 ec 0c             	sub    esp,0xc
c0009d19:	6a 07                	push   0x7
c0009d1b:	51                   	push   ecx
c0009d1c:	52                   	push   edx
c0009d1d:	50                   	push   eax
c0009d1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d22:	e8 cb fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d27:	83 c4 20             	add    esp,0x20
c0009d2a:	90                   	nop
c0009d2b:	83 c4 0c             	add    esp,0xc
c0009d2e:	c3                   	ret    
c0009d2f:	90                   	nop

c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d30:	55                   	push   ebp
c0009d31:	57                   	push   edi
c0009d32:	56                   	push   esi
c0009d33:	53                   	push   ebx
c0009d34:	83 ec 1c             	sub    esp,0x1c
c0009d37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d3f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d47:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4c:	75 4a                	jne    c0009d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d52:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d55:	c1 eb 16             	shr    ebx,0x16
c0009d58:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d5f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d63:	74 4d                	je     c0009db2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d69:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d6d:	c1 e8 0a             	shr    eax,0xa
c0009d70:	80 fa 01             	cmp    dl,0x1
c0009d73:	19 d2                	sbb    edx,edx
c0009d75:	c1 e3 0c             	shl    ebx,0xc
c0009d78:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d7c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d82:	25 fc 0f 00 00       	and    eax,0xffc
c0009d87:	01 d8                	add    eax,ebx
c0009d89:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d90:	83 c4 1c             	add    esp,0x1c
c0009d93:	5b                   	pop    ebx
c0009d94:	5e                   	pop    esi
c0009d95:	5f                   	pop    edi
c0009d96:	5d                   	pop    ebp
c0009d97:	c3                   	ret    
c0009d98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d9c:	83 ec 0c             	sub    esp,0xc
c0009d9f:	68 c0 db 01 c0       	push   0xc001dbc0
c0009da4:	e8 46 65 00 00       	call   c00102ef <KePanic(char const*)>
c0009da9:	83 c4 10             	add    esp,0x10
c0009dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009db0:	eb 9c                	jmp    c0009d4e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009db2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009db6:	e8 da dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dbb:	83 ec 0c             	sub    esp,0xc
c0009dbe:	89 c5                	mov    ebp,eax
c0009dc0:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009dc6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dca:	6a 01                	push   0x1
c0009dcc:	e8 b4 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009dd1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd8:	6a 01                	push   0x1
c0009dda:	50                   	push   eax
c0009ddb:	55                   	push   ebp
c0009ddc:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009de6:	51                   	push   ecx
c0009de7:	e8 06 fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dec:	83 c4 1c             	add    esp,0x1c
c0009def:	68 00 10 00 00       	push   0x1000
c0009df4:	6a 00                	push   0x0
c0009df6:	50                   	push   eax
c0009df7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dfb:	e8 d0 66 ff ff       	call   c00004d0 <memset>
c0009e00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e07:	e8 6d f7 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e0c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0f:	83 c4 10             	add    esp,0x10
c0009e12:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009e15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e19:	e9 47 ff ff ff       	jmp    c0009d65 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009e1e <VAS::VAS(bool)>:
c0009e1e:	53                   	push   ebx
c0009e1f:	83 ec 28             	sub    esp,0x28
c0009e22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e26:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e44:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e48:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e4b:	e8 45 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e50:	89 c2                	mov    edx,eax
c0009e52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e59:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e5f:	83 ec 0c             	sub    esp,0xc
c0009e62:	6a 01                	push   0x1
c0009e64:	e8 1c f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 c2                	mov    edx,eax
c0009e6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e72:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e75:	83 ec 0c             	sub    esp,0xc
c0009e78:	6a 03                	push   0x3
c0009e7a:	6a 01                	push   0x1
c0009e7c:	52                   	push   edx
c0009e7d:	50                   	push   eax
c0009e7e:	53                   	push   ebx
c0009e7f:	e8 6e fd ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e84:	83 c4 20             	add    esp,0x20
c0009e87:	89 c2                	mov    edx,eax
c0009e89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e90:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e98:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009ea0:	7f 1c                	jg     c0009ebe <VAS::VAS(bool)+0xa0>
c0009ea2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ea9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ead:	c1 e2 02             	shl    edx,0x2
c0009eb0:	01 d0                	add    eax,edx
c0009eb2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eb8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ebc:	eb da                	jmp    c0009e98 <VAS::VAS(bool)+0x7a>
c0009ebe:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009ec6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009ece:	7f 7a                	jg     c0009f4a <VAS::VAS(bool)+0x12c>
c0009ed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ed4:	2d 00 02 00 00       	sub    eax,0x200
c0009ed9:	c1 e0 0c             	shl    eax,0xc
c0009edc:	83 c8 03             	or     eax,0x3
c0009edf:	89 c2                	mov    edx,eax
c0009ee1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009ee6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eec:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ef2:	83 e0 10             	and    eax,0x10
c0009ef5:	84 c0                	test   al,al
c0009ef7:	74 07                	je     c0009f00 <VAS::VAS(bool)+0xe2>
c0009ef9:	b8 00 01 00 00       	mov    eax,0x100
c0009efe:	eb 05                	jmp    c0009f05 <VAS::VAS(bool)+0xe7>
c0009f00:	b8 00 00 00 00       	mov    eax,0x0
c0009f05:	09 d0                	or     eax,edx
c0009f07:	89 c1                	mov    ecx,eax
c0009f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f14:	c1 e2 02             	shl    edx,0x2
c0009f17:	01 d0                	add    eax,edx
c0009f19:	89 ca                	mov    edx,ecx
c0009f1b:	89 10                	mov    DWORD PTR [eax],edx
c0009f1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f21:	2d 40 03 00 00       	sub    eax,0x340
c0009f26:	83 f8 7f             	cmp    eax,0x7f
c0009f29:	77 16                	ja     c0009f41 <VAS::VAS(bool)+0x123>
c0009f2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f36:	c1 e2 02             	shl    edx,0x2
c0009f39:	01 d0                	add    eax,edx
c0009f3b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f41:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f45:	e9 7c ff ff ff       	jmp    c0009ec6 <VAS::VAS(bool)+0xa8>
c0009f4a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f55:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f5b:	83 e0 10             	and    eax,0x10
c0009f5e:	84 c0                	test   al,al
c0009f60:	74 07                	je     c0009f69 <VAS::VAS(bool)+0x14b>
c0009f62:	b8 03 41 00 00       	mov    eax,0x4103
c0009f67:	eb 05                	jmp    c0009f6e <VAS::VAS(bool)+0x150>
c0009f69:	b8 03 40 00 00       	mov    eax,0x4003
c0009f6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f72:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f75:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f7b:	89 02                	mov    DWORD PTR [edx],eax
c0009f7d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f88:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f8e:	83 ec 08             	sub    esp,0x8
c0009f91:	50                   	push   eax
c0009f92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f96:	e8 39 fc ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c0009f9b:	83 c4 10             	add    esp,0x10
c0009f9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fa2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009fa5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009faa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fb0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fb6:	83 e0 10             	and    eax,0x10
c0009fb9:	84 c0                	test   al,al
c0009fbb:	74 07                	je     c0009fc4 <VAS::VAS(bool)+0x1a6>
c0009fbd:	b8 00 01 00 00       	mov    eax,0x100
c0009fc2:	eb 05                	jmp    c0009fc9 <VAS::VAS(bool)+0x1ab>
c0009fc4:	b8 00 00 00 00       	mov    eax,0x0
c0009fc9:	09 c2                	or     edx,eax
c0009fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd2:	05 fc 0f 00 00       	add    eax,0xffc
c0009fd7:	83 ca 03             	or     edx,0x3
c0009fda:	89 10                	mov    DWORD PTR [eax],edx
c0009fdc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fe1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe7:	83 ec 0c             	sub    esp,0xc
c0009fea:	50                   	push   eax
c0009feb:	e8 50 1d 00 00       	call   c000bd40 <Device::getName()>
c0009ff0:	83 c4 10             	add    esp,0x10
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	68 03 dd 01 c0       	push   0xc001dd03
c0009ffb:	50                   	push   eax
c0009ffc:	e8 df 66 ff ff       	call   c00006e0 <strcmp>
c000a001:	83 c4 10             	add    esp,0x10
c000a004:	85 c0                	test   eax,eax
c000a006:	0f 94 c0             	sete   al
c000a009:	84 c0                	test   al,al
c000a00b:	0f 84 87 00 00 00    	je     c000a098 <VAS::VAS(bool)+0x27a>
c000a011:	fa                   	cli    
c000a012:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a017:	40                   	inc    eax
c000a018:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a01d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a028:	05 7c 09 00 00       	add    eax,0x97c
c000a02d:	83 ec 0c             	sub    esp,0xc
c000a030:	50                   	push   eax
c000a031:	e8 80 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a03e:	89 c3                	mov    ebx,eax
c000a040:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a045:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a04b:	05 7c 09 00 00       	add    eax,0x97c
c000a050:	83 ec 0c             	sub    esp,0xc
c000a053:	50                   	push   eax
c000a054:	e8 5d d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a059:	83 c4 10             	add    esp,0x10
c000a05c:	83 ec 08             	sub    esp,0x8
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a064:	e8 f1 f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a06e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a073:	6a 11                	push   0x11
c000a075:	53                   	push   ebx
c000a076:	50                   	push   eax
c000a077:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a07b:	e8 78 f8 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a088:	48                   	dec    eax
c000a089:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a08e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a093:	85 c0                	test   eax,eax
c000a095:	75 01                	jne    c000a098 <VAS::VAS(bool)+0x27a>
c000a097:	fb                   	sti    
c000a098:	fa                   	cli    
c000a099:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a09e:	40                   	inc    eax
c000a09f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a0a4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a0a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0ab:	83 ec 08             	sub    esp,0x8
c000a0ae:	50                   	push   eax
c000a0af:	68 11 dd 01 c0       	push   0xc001dd11
c000a0b4:	e8 b4 05 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a0b9:	83 c4 10             	add    esp,0x10
c000a0bc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a0c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a0c6:	83 ec 08             	sub    esp,0x8
c000a0c9:	50                   	push   eax
c000a0ca:	68 e4 db 01 c0       	push   0xc001dbe4
c000a0cf:	e8 99 05 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a0d4:	83 c4 10             	add    esp,0x10
c000a0d7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a0e1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000a0e7:	83 ec 08             	sub    esp,0x8
c000a0ea:	50                   	push   eax
c000a0eb:	68 10 dc 01 c0       	push   0xc001dc10
c000a0f0:	e8 78 05 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a0f5:	83 c4 10             	add    esp,0x10
c000a0f8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a0fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a102:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000a108:	83 ec 04             	sub    esp,0x4
c000a10b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a10f:	6a 01                	push   0x1
c000a111:	50                   	push   eax
c000a112:	e8 53 f6 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c000a117:	83 c4 10             	add    esp,0x10
c000a11a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a122:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a126:	b9 7d 00 02 c0       	mov    ecx,0xc002007d
c000a12b:	ba 00 00 02 c0       	mov    edx,0xc0020000
c000a130:	29 d1                	sub    ecx,edx
c000a132:	89 ca                	mov    edx,ecx
c000a134:	81 c2 ff 0f 00 00    	add    edx,0xfff
c000a13a:	c1 ea 0c             	shr    edx,0xc
c000a13d:	39 d0                	cmp    eax,edx
c000a13f:	73 5b                	jae    c000a19c <VAS::VAS(bool)+0x37e>
c000a141:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a146:	8b 00                	mov    eax,DWORD PTR [eax]
c000a148:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a14b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000a151:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a155:	c1 e2 0c             	shl    edx,0xc
c000a158:	89 d1                	mov    ecx,edx
c000a15a:	ba 00 00 02 c0       	mov    edx,0xc0020000
c000a15f:	01 ca                	add    edx,ecx
c000a161:	83 ec 04             	sub    esp,0x4
c000a164:	52                   	push   edx
c000a165:	6a 01                	push   0x1
c000a167:	50                   	push   eax
c000a168:	e8 c1 f3 ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000a16d:	83 c4 10             	add    esp,0x10
c000a170:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a178:	8b 00                	mov    eax,DWORD PTR [eax]
c000a17a:	83 e0 fd             	and    eax,0xfffffffd
c000a17d:	89 c2                	mov    edx,eax
c000a17f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a183:	89 10                	mov    DWORD PTR [eax],edx
c000a185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a189:	8b 00                	mov    eax,DWORD PTR [eax]
c000a18b:	83 c8 04             	or     eax,0x4
c000a18e:	89 c2                	mov    edx,eax
c000a190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a194:	89 10                	mov    DWORD PTR [eax],edx
c000a196:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a19a:	eb 86                	jmp    c000a122 <VAS::VAS(bool)+0x304>
c000a19c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a1a1:	48                   	dec    eax
c000a1a2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a1a7:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a1ac:	85 c0                	test   eax,eax
c000a1ae:	75 01                	jne    c000a1b1 <VAS::VAS(bool)+0x393>
c000a1b0:	fb                   	sti    
c000a1b1:	90                   	nop
c000a1b2:	83 c4 28             	add    esp,0x28
c000a1b5:	5b                   	pop    ebx
c000a1b6:	c3                   	ret    
c000a1b7:	90                   	nop

c000a1b8 <VAS::evict(unsigned long)>:
c000a1b8:	55                   	push   ebp
c000a1b9:	57                   	push   edi
c000a1ba:	56                   	push   esi
c000a1bb:	53                   	push   ebx
c000a1bc:	83 ec 1c             	sub    esp,0x1c
c000a1bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a1c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1cb:	e8 f6 f1 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a1d0:	8b 0d cc f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f9cc
c000a1d6:	89 c7                	mov    edi,eax
c000a1d8:	85 c9                	test   ecx,ecx
c000a1da:	7e 3e                	jle    c000a21a <VAS::evict(unsigned long)+0x62>
c000a1dc:	89 ee                	mov    esi,ebp
c000a1de:	31 db                	xor    ebx,ebx
c000a1e0:	83 ec 0c             	sub    esp,0xc
c000a1e3:	57                   	push   edi
c000a1e4:	e8 cb f1 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a1e9:	89 34 24             	mov    DWORD PTR [esp],esi
c000a1ec:	01 d8                	add    eax,ebx
c000a1ee:	6a 01                	push   0x1
c000a1f0:	31 d2                	xor    edx,edx
c000a1f2:	43                   	inc    ebx
c000a1f3:	52                   	push   edx
c000a1f4:	81 c6 00 02 00 00    	add    esi,0x200
c000a1fa:	50                   	push   eax
c000a1fb:	0f be 05 d8 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f9d8
c000a202:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a209:	52                   	push   edx
c000a20a:	e8 f1 2b 00 00       	call   c000ce00 <LogicalDisk::write(unsigned long long, int, void*)>
c000a20f:	83 c4 20             	add    esp,0x20
c000a212:	39 1d cc f9 01 c0    	cmp    DWORD PTR ds:0xc001f9cc,ebx
c000a218:	7f c6                	jg     c000a1e0 <VAS::evict(unsigned long)+0x28>
c000a21a:	83 ec 08             	sub    esp,0x8
c000a21d:	c1 e7 0b             	shl    edi,0xb
c000a220:	55                   	push   ebp
c000a221:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a225:	50                   	push   eax
c000a226:	e8 2f f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a22b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a22d:	89 d1                	mov    ecx,edx
c000a22f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a235:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a23b:	09 cf                	or     edi,ecx
c000a23d:	89 38                	mov    DWORD PTR [eax],edi
c000a23f:	89 14 24             	mov    DWORD PTR [esp],edx
c000a242:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a248:	e8 e6 d7 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a24d:	0f 20 d8             	mov    eax,cr3
c000a250:	0f 22 d8             	mov    cr3,eax
c000a253:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a258:	c7 44 24 40 28 dd 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dd28
c000a260:	8d 50 01             	lea    edx,[eax+0x1]
c000a263:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a267:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a26d:	83 c4 2c             	add    esp,0x2c
c000a270:	5b                   	pop    ebx
c000a271:	5e                   	pop    esi
c000a272:	5f                   	pop    edi
c000a273:	5d                   	pop    ebp
c000a274:	e9 f4 03 00 00       	jmp    c000a66d <Dbg::kprintf(char const*, ...)>
c000a279:	90                   	nop

c000a27a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a27a:	55                   	push   ebp
c000a27b:	57                   	push   edi
c000a27c:	56                   	push   esi
c000a27d:	53                   	push   ebx
c000a27e:	83 ec 14             	sub    esp,0x14
c000a281:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a285:	53                   	push   ebx
c000a286:	68 39 dd 01 c0       	push   0xc001dd39
c000a28b:	e8 dd 03 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a290:	83 c4 10             	add    esp,0x10
c000a293:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a299:	74 21                	je     c000a2bc <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a29b:	83 ec 08             	sub    esp,0x8
c000a29e:	53                   	push   ebx
c000a29f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a2a3:	57                   	push   edi
c000a2a4:	e8 b1 f2 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a2a9:	83 c4 10             	add    esp,0x10
c000a2ac:	89 c6                	mov    esi,eax
c000a2ae:	85 c0                	test   eax,eax
c000a2b0:	74 0a                	je     c000a2bc <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a2b2:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a2b4:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a2ba:	74 0a                	je     c000a2c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a2bc:	31 c0                	xor    eax,eax
c000a2be:	83 c4 0c             	add    esp,0xc
c000a2c1:	5b                   	pop    ebx
c000a2c2:	5e                   	pop    esi
c000a2c3:	5f                   	pop    edi
c000a2c4:	5d                   	pop    ebp
c000a2c5:	c3                   	ret    
c000a2c6:	e8 ca d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a2cb:	c1 ed 0b             	shr    ebp,0xb
c000a2ce:	8b 16                	mov    edx,DWORD PTR [esi]
c000a2d0:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a2d6:	09 c2                	or     edx,eax
c000a2d8:	81 ca 01 08 00 00    	or     edx,0x801
c000a2de:	89 16                	mov    DWORD PTR [esi],edx
c000a2e0:	8b 35 cc f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f9cc
c000a2e6:	85 f6                	test   esi,esi
c000a2e8:	7e 3e                	jle    c000a328 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a2ea:	89 df                	mov    edi,ebx
c000a2ec:	31 f6                	xor    esi,esi
c000a2ee:	83 ec 0c             	sub    esp,0xc
c000a2f1:	55                   	push   ebp
c000a2f2:	e8 bd f0 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a2f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a2fa:	01 f0                	add    eax,esi
c000a2fc:	6a 01                	push   0x1
c000a2fe:	31 d2                	xor    edx,edx
c000a300:	46                   	inc    esi
c000a301:	52                   	push   edx
c000a302:	81 c7 00 02 00 00    	add    edi,0x200
c000a308:	50                   	push   eax
c000a309:	0f be 05 d8 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f9d8
c000a310:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a317:	51                   	push   ecx
c000a318:	e8 77 2a 00 00       	call   c000cd94 <LogicalDisk::read(unsigned long long, int, void*)>
c000a31d:	83 c4 20             	add    esp,0x20
c000a320:	39 35 cc f9 01 c0    	cmp    DWORD PTR ds:0xc001f9cc,esi
c000a326:	7f c6                	jg     c000a2ee <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a328:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a32d:	48                   	dec    eax
c000a32e:	52                   	push   edx
c000a32f:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a334:	50                   	push   eax
c000a335:	53                   	push   ebx
c000a336:	68 4c dd 01 c0       	push   0xc001dd4c
c000a33b:	e8 2d 03 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a340:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a343:	e8 4e f0 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a348:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a34d:	83 c4 10             	add    esp,0x10
c000a350:	48                   	dec    eax
c000a351:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a356:	85 c0                	test   eax,eax
c000a358:	75 01                	jne    c000a35b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a35a:	fb                   	sti    
c000a35b:	0f 20 d8             	mov    eax,cr3
c000a35e:	0f 22 d8             	mov    cr3,eax
c000a361:	b0 01                	mov    al,0x1
c000a363:	e9 56 ff ff ff       	jmp    c000a2be <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a368 <VAS::scanForEviction()>:
c000a368:	57                   	push   edi
c000a369:	31 ff                	xor    edi,edi
c000a36b:	56                   	push   esi
c000a36c:	53                   	push   ebx
c000a36d:	83 ec 10             	sub    esp,0x10
c000a370:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a374:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a377:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a37d:	75 0e                	jne    c000a38d <VAS::scanForEviction()+0x25>
c000a37f:	89 da                	mov    edx,ebx
c000a381:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a384:	c1 ea 16             	shr    edx,0x16
c000a387:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a38b:	74 4e                	je     c000a3db <VAS::scanForEviction()+0x73>
c000a38d:	53                   	push   ebx
c000a38e:	56                   	push   esi
c000a38f:	e8 c6 f1 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a394:	5a                   	pop    edx
c000a395:	8b 10                	mov    edx,DWORD PTR [eax]
c000a397:	59                   	pop    ecx
c000a398:	89 d1                	mov    ecx,edx
c000a39a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a3a0:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a3a6:	74 3e                	je     c000a3e6 <VAS::scanForEviction()+0x7e>
c000a3a8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a3ae:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a3b4:	76 2b                	jbe    c000a3e1 <VAS::scanForEviction()+0x79>
c000a3b6:	47                   	inc    edi
c000a3b7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a3be:	83 ff 03             	cmp    edi,0x3
c000a3c1:	74 32                	je     c000a3f5 <VAS::scanForEviction()+0x8d>
c000a3c3:	31 db                	xor    ebx,ebx
c000a3c5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a3cb:	75 c0                	jne    c000a38d <VAS::scanForEviction()+0x25>
c000a3cd:	89 da                	mov    edx,ebx
c000a3cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a3d2:	c1 ea 16             	shr    edx,0x16
c000a3d5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a3d9:	75 b2                	jne    c000a38d <VAS::scanForEviction()+0x25>
c000a3db:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a3e1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a3e4:	eb 91                	jmp    c000a377 <VAS::scanForEviction()+0xf>
c000a3e6:	f6 c2 20             	test   dl,0x20
c000a3e9:	74 13                	je     c000a3fe <VAS::scanForEviction()+0x96>
c000a3eb:	83 e2 df             	and    edx,0xffffffdf
c000a3ee:	89 10                	mov    DWORD PTR [eax],edx
c000a3f0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a3f3:	eb b3                	jmp    c000a3a8 <VAS::scanForEviction()+0x40>
c000a3f5:	83 c4 10             	add    esp,0x10
c000a3f8:	31 c0                	xor    eax,eax
c000a3fa:	5b                   	pop    ebx
c000a3fb:	5e                   	pop    esi
c000a3fc:	5f                   	pop    edi
c000a3fd:	c3                   	ret    
c000a3fe:	83 ec 08             	sub    esp,0x8
c000a401:	89 d0                	mov    eax,edx
c000a403:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a408:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a40c:	53                   	push   ebx
c000a40d:	68 61 dd 01 c0       	push   0xc001dd61
c000a412:	e8 56 02 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a417:	58                   	pop    eax
c000a418:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a41b:	5a                   	pop    edx
c000a41c:	51                   	push   ecx
c000a41d:	56                   	push   esi
c000a41e:	e8 95 fd ff ff       	call   c000a1b8 <VAS::evict(unsigned long)>
c000a423:	5b                   	pop    ebx
c000a424:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a427:	5f                   	pop    edi
c000a428:	50                   	push   eax
c000a429:	68 75 dd 01 c0       	push   0xc001dd75
c000a42e:	e8 3a 02 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a433:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a43a:	83 c4 10             	add    esp,0x10
c000a43d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a441:	83 c4 10             	add    esp,0x10
c000a444:	5b                   	pop    ebx
c000a445:	5e                   	pop    esi
c000a446:	5f                   	pop    edi
c000a447:	c3                   	ret    

c000a448 <mapVASFirstTime>:
c000a448:	55                   	push   ebp
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 0c             	sub    esp,0xc
c000a44f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a454:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a457:	4a                   	dec    edx
c000a458:	0f 84 b1 00 00 00    	je     c000a50f <mapVASFirstTime+0xc7>
c000a45e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a461:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a464:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a469:	c1 e5 15             	shl    ebp,0x15
c000a46c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a471:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a477:	29 eb                	sub    ebx,ebp
c000a479:	29 ef                	sub    edi,ebp
c000a47b:	e8 15 d6 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a480:	83 ec 0c             	sub    esp,0xc
c000a483:	68 03 04 00 00       	push   0x403
c000a488:	6a 01                	push   0x1
c000a48a:	53                   	push   ebx
c000a48b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a491:	50                   	push   eax
c000a492:	56                   	push   esi
c000a493:	e8 5a f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a498:	83 c4 20             	add    esp,0x20
c000a49b:	39 fb                	cmp    ebx,edi
c000a49d:	75 dc                	jne    c000a47b <mapVASFirstTime+0x33>
c000a49f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a4a4:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a4a9:	29 eb                	sub    ebx,ebp
c000a4ab:	29 ef                	sub    edi,ebp
c000a4ad:	e8 e3 d5 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a4b2:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a4b6:	19 d2                	sbb    edx,edx
c000a4b8:	83 ec 0c             	sub    esp,0xc
c000a4bb:	83 e2 04             	and    edx,0x4
c000a4be:	81 c2 03 04 00 00    	add    edx,0x403
c000a4c4:	52                   	push   edx
c000a4c5:	6a 01                	push   0x1
c000a4c7:	53                   	push   ebx
c000a4c8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a4ce:	50                   	push   eax
c000a4cf:	56                   	push   esi
c000a4d0:	e8 1d f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4d5:	83 c4 20             	add    esp,0x20
c000a4d8:	39 df                	cmp    edi,ebx
c000a4da:	75 d1                	jne    c000a4ad <mapVASFirstTime+0x65>
c000a4dc:	b8 7c 10 02 c0       	mov    eax,0xc002107c
c000a4e1:	2d 00 00 02 c0       	sub    eax,0xc0020000
c000a4e6:	c1 e8 0c             	shr    eax,0xc
c000a4e9:	50                   	push   eax
c000a4ea:	68 7d 00 02 c0       	push   0xc002007d
c000a4ef:	68 00 00 02 c0       	push   0xc0020000
c000a4f4:	68 40 dc 01 c0       	push   0xc001dc40
c000a4f9:	e8 6f 01 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a4fe:	0f 20 d8             	mov    eax,cr3
c000a501:	0f 22 d8             	mov    cr3,eax
c000a504:	83 c4 10             	add    esp,0x10
c000a507:	83 c4 0c             	add    esp,0xc
c000a50a:	5b                   	pop    ebx
c000a50b:	5e                   	pop    esi
c000a50c:	5f                   	pop    edi
c000a50d:	5d                   	pop    ebp
c000a50e:	c3                   	ret    
c000a50f:	83 ec 0c             	sub    esp,0xc
c000a512:	68 88 dd 01 c0       	push   0xc001dd88
c000a517:	e8 51 01 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a51c:	83 c4 10             	add    esp,0x10
c000a51f:	83 c4 0c             	add    esp,0xc
c000a522:	5b                   	pop    ebx
c000a523:	5e                   	pop    esi
c000a524:	5f                   	pop    edi
c000a525:	5d                   	pop    ebp
c000a526:	c3                   	ret    

c000a527 <__cxa_atexit>:
c000a527:	31 c0                	xor    eax,eax
c000a529:	c3                   	ret    

c000a52a <__cxa_finalize>:
c000a52a:	c3                   	ret    

c000a52b <__stack_chk_fail>:
c000a52b:	55                   	push   ebp
c000a52c:	89 e5                	mov    ebp,esp
c000a52e:	83 ec 10             	sub    esp,0x10
c000a531:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a534:	68 a1 dd 01 c0       	push   0xc001dda1
c000a539:	e8 2f 01 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a53e:	58                   	pop    eax
c000a53f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a542:	5a                   	pop    edx
c000a543:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a546:	68 a1 dd 01 c0       	push   0xc001dda1
c000a54b:	e8 1d 01 00 00       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000a550:	c7 04 24 a9 dd 01 c0 	mov    DWORD PTR [esp],0xc001dda9
c000a557:	e8 93 5d 00 00       	call   c00102ef <KePanic(char const*)>
c000a55c:	83 c4 10             	add    esp,0x10
c000a55f:	c9                   	leave  
c000a560:	c3                   	ret    

c000a561 <__cxa_pure_virtual>:
c000a561:	83 ec 18             	sub    esp,0x18
c000a564:	68 c1 dd 01 c0       	push   0xc001ddc1
c000a569:	e8 81 5d 00 00       	call   c00102ef <KePanic(char const*)>
c000a56e:	83 c4 1c             	add    esp,0x1c
c000a571:	c3                   	ret    

c000a572 <operator new[](unsigned long)>:
c000a572:	e9 42 d2 ff ff       	jmp    c00077b9 <malloc>

c000a577 <operator delete(void*, unsigned long)>:
c000a577:	e9 5d d2 ff ff       	jmp    c00077d9 <rfree>

c000a57c <operator delete[](void*)>:
c000a57c:	e9 58 d2 ff ff       	jmp    c00077d9 <rfree>

c000a581 <operator delete[](void*, unsigned long)>:
c000a581:	e9 53 d2 ff ff       	jmp    c00077d9 <rfree>

c000a586 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a586:	55                   	push   ebp
c000a587:	b9 04 00 00 00       	mov    ecx,0x4
c000a58c:	57                   	push   edi
c000a58d:	56                   	push   esi
c000a58e:	be 13 d9 01 c0       	mov    esi,0xc001d913
c000a593:	53                   	push   ebx
c000a594:	83 ec 20             	sub    esp,0x20
c000a597:	a1 12 d9 01 c0       	mov    eax,ds:0xc001d912
c000a59c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a5a0:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a5a4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a5a8:	a1 1f d9 01 c0       	mov    eax,ds:0xc001d91f
c000a5ad:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a5b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a5b5:	fc                   	cld    
c000a5b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a5b8:	89 ee                	mov    esi,ebp
c000a5ba:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a5be:	eb 02                	jmp    c000a5c2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a5c0:	89 c6                	mov    esi,eax
c000a5c2:	31 d2                	xor    edx,edx
c000a5c4:	41                   	inc    ecx
c000a5c5:	89 f0                	mov    eax,esi
c000a5c7:	f7 f3                	div    ebx
c000a5c9:	39 de                	cmp    esi,ebx
c000a5cb:	73 f3                	jae    c000a5c0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a5cd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a5d0:	eb 02                	jmp    c000a5d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a5d2:	89 c5                	mov    ebp,eax
c000a5d4:	31 d2                	xor    edx,edx
c000a5d6:	49                   	dec    ecx
c000a5d7:	89 e8                	mov    eax,ebp
c000a5d9:	f7 f3                	div    ebx
c000a5db:	39 dd                	cmp    ebp,ebx
c000a5dd:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a5e1:	88 11                	mov    BYTE PTR [ecx],dl
c000a5e3:	73 ed                	jae    c000a5d2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a5e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5e9:	83 c4 20             	add    esp,0x20
c000a5ec:	5b                   	pop    ebx
c000a5ed:	5e                   	pop    esi
c000a5ee:	5f                   	pop    edi
c000a5ef:	5d                   	pop    ebp
c000a5f0:	c3                   	ret    

c000a5f1 <Dbg::logc(char)>:
c000a5f1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5f5:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a5fc:	75 12                	jne    c000a610 <Dbg::logc(char)+0x1f>
c000a5fe:	ba fd 03 00 00       	mov    edx,0x3fd
c000a603:	ec                   	in     al,dx
c000a604:	a8 20                	test   al,0x20
c000a606:	74 fb                	je     c000a603 <Dbg::logc(char)+0x12>
c000a608:	ba f8 03 00 00       	mov    edx,0x3f8
c000a60d:	88 c8                	mov    al,cl
c000a60f:	ee                   	out    dx,al
c000a610:	c3                   	ret    

c000a611 <Dbg::logs(char*)>:
c000a611:	53                   	push   ebx
c000a612:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a616:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a619:	84 c0                	test   al,al
c000a61b:	74 0f                	je     c000a62c <Dbg::logs(char*)+0x1b>
c000a61d:	50                   	push   eax
c000a61e:	43                   	inc    ebx
c000a61f:	e8 cd ff ff ff       	call   c000a5f1 <Dbg::logc(char)>
c000a624:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a627:	5a                   	pop    edx
c000a628:	84 c0                	test   al,al
c000a62a:	75 f1                	jne    c000a61d <Dbg::logs(char*)+0xc>
c000a62c:	5b                   	pop    ebx
c000a62d:	c3                   	ret    

c000a62e <Dbg::logWriteInt(unsigned int)>:
c000a62e:	83 ec 10             	sub    esp,0x10
c000a631:	6a 0a                	push   0xa
c000a633:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a637:	50                   	push   eax
c000a638:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a63c:	50                   	push   eax
c000a63d:	e8 44 ff ff ff       	call   c000a586 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a642:	50                   	push   eax
c000a643:	e8 c9 ff ff ff       	call   c000a611 <Dbg::logs(char*)>
c000a648:	83 c4 20             	add    esp,0x20
c000a64b:	c3                   	ret    

c000a64c <Dbg::logWriteIntBase(unsigned int, int)>:
c000a64c:	83 ec 10             	sub    esp,0x10
c000a64f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a653:	50                   	push   eax
c000a654:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a658:	50                   	push   eax
c000a659:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a65d:	52                   	push   edx
c000a65e:	e8 23 ff ff ff       	call   c000a586 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a663:	50                   	push   eax
c000a664:	e8 a8 ff ff ff       	call   c000a611 <Dbg::logs(char*)>
c000a669:	83 c4 20             	add    esp,0x20
c000a66c:	c3                   	ret    

c000a66d <Dbg::kprintf(char const*, ...)>:
c000a66d:	55                   	push   ebp
c000a66e:	57                   	push   edi
c000a66f:	56                   	push   esi
c000a670:	53                   	push   ebx
c000a671:	83 ec 0c             	sub    esp,0xc
c000a674:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a678:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a67f:	74 08                	je     c000a689 <Dbg::kprintf(char const*, ...)+0x1c>
c000a681:	83 c4 0c             	add    esp,0xc
c000a684:	5b                   	pop    ebx
c000a685:	5e                   	pop    esi
c000a686:	5f                   	pop    edi
c000a687:	5d                   	pop    ebp
c000a688:	c3                   	ret    
c000a689:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a68d:	31 ff                	xor    edi,edi
c000a68f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a693:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a696:	84 c0                	test   al,al
c000a698:	74 e7                	je     c000a681 <Dbg::kprintf(char const*, ...)+0x14>
c000a69a:	8d 77 01             	lea    esi,[edi+0x1]
c000a69d:	3c 25                	cmp    al,0x25
c000a69f:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a6a2:	75 47                	jne    c000a6eb <Dbg::kprintf(char const*, ...)+0x7e>
c000a6a4:	83 c7 02             	add    edi,0x2
c000a6a7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a6aa:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a6ad:	83 e8 25             	sub    eax,0x25
c000a6b0:	3c 53                	cmp    al,0x53
c000a6b2:	0f 87 d2 00 00 00    	ja     c000a78a <Dbg::kprintf(char const*, ...)+0x11d>
c000a6b8:	25 ff 00 00 00       	and    eax,0xff
c000a6bd:	ff 24 85 d4 dd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe222c]
c000a6c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6c8:	89 c8                	mov    eax,ecx
c000a6ca:	83 c1 04             	add    ecx,0x4
c000a6cd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a6d3:	55                   	push   ebp
c000a6d4:	e8 55 ff ff ff       	call   c000a62e <Dbg::logWriteInt(unsigned int)>
c000a6d9:	58                   	pop    eax
c000a6da:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a6dd:	84 c0                	test   al,al
c000a6df:	74 a0                	je     c000a681 <Dbg::kprintf(char const*, ...)+0x14>
c000a6e1:	8d 77 01             	lea    esi,[edi+0x1]
c000a6e4:	3c 25                	cmp    al,0x25
c000a6e6:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a6e9:	74 b9                	je     c000a6a4 <Dbg::kprintf(char const*, ...)+0x37>
c000a6eb:	50                   	push   eax
c000a6ec:	89 f7                	mov    edi,esi
c000a6ee:	e8 fe fe ff ff       	call   c000a5f1 <Dbg::logc(char)>
c000a6f3:	89 ee                	mov    esi,ebp
c000a6f5:	58                   	pop    eax
c000a6f6:	eb e2                	jmp    c000a6da <Dbg::kprintf(char const*, ...)+0x6d>
c000a6f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6fc:	89 c8                	mov    eax,ecx
c000a6fe:	83 c1 04             	add    ecx,0x4
c000a701:	8b 00                	mov    eax,DWORD PTR [eax]
c000a703:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a707:	50                   	push   eax
c000a708:	e8 04 ff ff ff       	call   c000a611 <Dbg::logs(char*)>
c000a70d:	58                   	pop    eax
c000a70e:	eb ca                	jmp    c000a6da <Dbg::kprintf(char const*, ...)+0x6d>
c000a710:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a714:	89 d0                	mov    eax,edx
c000a716:	83 c2 04             	add    edx,0x4
c000a719:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a71d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a71f:	50                   	push   eax
c000a720:	e8 09 ff ff ff       	call   c000a62e <Dbg::logWriteInt(unsigned int)>
c000a725:	58                   	pop    eax
c000a726:	eb b2                	jmp    c000a6da <Dbg::kprintf(char const*, ...)+0x6d>
c000a728:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a72c:	89 d0                	mov    eax,edx
c000a72e:	83 c2 04             	add    edx,0x4
c000a731:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a734:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a738:	50                   	push   eax
c000a739:	e8 b3 fe ff ff       	call   c000a5f1 <Dbg::logc(char)>
c000a73e:	58                   	pop    eax
c000a73f:	eb 99                	jmp    c000a6da <Dbg::kprintf(char const*, ...)+0x6d>
c000a741:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a745:	89 c8                	mov    eax,ecx
c000a747:	83 c1 04             	add    ecx,0x4
c000a74a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a74e:	6a 10                	push   0x10
c000a750:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a752:	51                   	push   ecx
c000a753:	e8 f4 fe ff ff       	call   c000a64c <Dbg::logWriteIntBase(unsigned int, int)>
c000a758:	5d                   	pop    ebp
c000a759:	58                   	pop    eax
c000a75a:	e9 7b ff ff ff       	jmp    c000a6da <Dbg::kprintf(char const*, ...)+0x6d>
c000a75f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a763:	89 d0                	mov    eax,edx
c000a765:	83 c2 08             	add    edx,0x8
c000a768:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a76c:	6a 10                	push   0x10
c000a76e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a770:	50                   	push   eax
c000a771:	e8 d6 fe ff ff       	call   c000a64c <Dbg::logWriteIntBase(unsigned int, int)>
c000a776:	58                   	pop    eax
c000a777:	5a                   	pop    edx
c000a778:	e9 5d ff ff ff       	jmp    c000a6da <Dbg::kprintf(char const*, ...)+0x6d>
c000a77d:	6a 25                	push   0x25
c000a77f:	e8 6d fe ff ff       	call   c000a5f1 <Dbg::logc(char)>
c000a784:	5a                   	pop    edx
c000a785:	e9 50 ff ff ff       	jmp    c000a6da <Dbg::kprintf(char const*, ...)+0x6d>
c000a78a:	6a 25                	push   0x25
c000a78c:	e8 60 fe ff ff       	call   c000a5f1 <Dbg::logc(char)>
c000a791:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a795:	50                   	push   eax
c000a796:	e8 56 fe ff ff       	call   c000a5f1 <Dbg::logc(char)>
c000a79b:	5a                   	pop    edx
c000a79c:	59                   	pop    ecx
c000a79d:	e9 38 ff ff ff       	jmp    c000a6da <Dbg::kprintf(char const*, ...)+0x6d>

c000a7a2 <File::read(unsigned long long, void*, int*)>:
c000a7a2:	53                   	push   ebx
c000a7a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7ab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7b2:	3c 19                	cmp    al,0x19
c000a7b4:	77 35                	ja     c000a7eb <File::read(unsigned long long, void*, int*)+0x49>
c000a7b6:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a7bd:	85 c0                	test   eax,eax
c000a7bf:	74 2a                	je     c000a7eb <File::read(unsigned long long, void*, int*)+0x49>
c000a7c1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a7c7:	85 c0                	test   eax,eax
c000a7c9:	74 20                	je     c000a7eb <File::read(unsigned long long, void*, int*)+0x49>
c000a7cb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7cf:	74 21                	je     c000a7f2 <File::read(unsigned long long, void*, int*)+0x50>
c000a7d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7d7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7e5:	5b                   	pop    ebx
c000a7e6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a7e9:	ff e0                	jmp    eax
c000a7eb:	b8 0b 00 00 00       	mov    eax,0xb
c000a7f0:	eb 05                	jmp    c000a7f7 <File::read(unsigned long long, void*, int*)+0x55>
c000a7f2:	b8 05 00 00 00       	mov    eax,0x5
c000a7f7:	5b                   	pop    ebx
c000a7f8:	c3                   	ret    
c000a7f9:	90                   	nop

c000a7fa <File::write(unsigned long long, void*, int*)>:
c000a7fa:	53                   	push   ebx
c000a7fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a803:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a80a:	3c 19                	cmp    al,0x19
c000a80c:	77 35                	ja     c000a843 <File::write(unsigned long long, void*, int*)+0x49>
c000a80e:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a815:	85 c0                	test   eax,eax
c000a817:	74 2a                	je     c000a843 <File::write(unsigned long long, void*, int*)+0x49>
c000a819:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a81f:	85 c0                	test   eax,eax
c000a821:	74 20                	je     c000a843 <File::write(unsigned long long, void*, int*)+0x49>
c000a823:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a827:	74 21                	je     c000a84a <File::write(unsigned long long, void*, int*)+0x50>
c000a829:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a82b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a82f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a839:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a83d:	5b                   	pop    ebx
c000a83e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a841:	ff e0                	jmp    eax
c000a843:	b8 0b 00 00 00       	mov    eax,0xb
c000a848:	eb 05                	jmp    c000a84f <File::write(unsigned long long, void*, int*)+0x55>
c000a84a:	b8 05 00 00 00       	mov    eax,0x5
c000a84f:	5b                   	pop    ebx
c000a850:	c3                   	ret    
c000a851:	90                   	nop

c000a852 <Directory::read(unsigned long long, void*, int*)>:
c000a852:	53                   	push   ebx
c000a853:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a857:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a85b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a862:	3c 19                	cmp    al,0x19
c000a864:	77 35                	ja     c000a89b <Directory::read(unsigned long long, void*, int*)+0x49>
c000a866:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a86d:	85 c0                	test   eax,eax
c000a86f:	74 2a                	je     c000a89b <Directory::read(unsigned long long, void*, int*)+0x49>
c000a871:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a877:	85 c0                	test   eax,eax
c000a879:	74 20                	je     c000a89b <Directory::read(unsigned long long, void*, int*)+0x49>
c000a87b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a87f:	74 21                	je     c000a8a2 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a881:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a883:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a887:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a88d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a891:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a895:	5b                   	pop    ebx
c000a896:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a899:	ff e0                	jmp    eax
c000a89b:	b8 0b 00 00 00       	mov    eax,0xb
c000a8a0:	eb 05                	jmp    c000a8a7 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a8a2:	b8 05 00 00 00       	mov    eax,0x5
c000a8a7:	5b                   	pop    ebx
c000a8a8:	c3                   	ret    
c000a8a9:	90                   	nop

c000a8aa <Directory::write(unsigned long long, void*, int*)>:
c000a8aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8ae:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a8b5:	b8 0b 00 00 00       	mov    eax,0xb
c000a8ba:	80 fa 19             	cmp    dl,0x19
c000a8bd:	77 18                	ja     c000a8d7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a8bf:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a8c6:	85 d2                	test   edx,edx
c000a8c8:	74 0d                	je     c000a8d7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a8ca:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a8d1:	19 c0                	sbb    eax,eax
c000a8d3:	83 e0 0a             	and    eax,0xa
c000a8d6:	40                   	inc    eax
c000a8d7:	c3                   	ret    

c000a8d8 <File::isAtty()>:
c000a8d8:	31 c0                	xor    eax,eax
c000a8da:	c3                   	ret    
c000a8db:	90                   	nop

c000a8dc <Directory::isAtty()>:
c000a8dc:	31 c0                	xor    eax,eax
c000a8de:	c3                   	ret    
c000a8df:	90                   	nop

c000a8e0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a8e0:	b8 0a 00 00 00       	mov    eax,0xa
c000a8e5:	c3                   	ret    

c000a8e6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a8e6:	b8 0a 00 00 00       	mov    eax,0xa
c000a8eb:	c3                   	ret    

c000a8ec <Filesystem::allocateSwapfile(char const*, int)>:
c000a8ec:	31 c0                	xor    eax,eax
c000a8ee:	31 d2                	xor    edx,edx
c000a8f0:	c3                   	ret    
c000a8f1:	90                   	nop

c000a8f2 <File::~File()>:
c000a8f2:	83 ec 0c             	sub    esp,0xc
c000a8f5:	ba 94 df 01 c0       	mov    edx,0xc001df94
c000a8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8fe:	89 10                	mov    DWORD PTR [eax],edx
c000a900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a904:	83 ec 0c             	sub    esp,0xc
c000a907:	50                   	push   eax
c000a908:	e8 17 e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	90                   	nop
c000a911:	83 c4 0c             	add    esp,0xc
c000a914:	c3                   	ret    
c000a915:	90                   	nop

c000a916 <File::~File()>:
c000a916:	83 ec 0c             	sub    esp,0xc
c000a919:	83 ec 0c             	sub    esp,0xc
c000a91c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a920:	e8 cd ff ff ff       	call   c000a8f2 <File::~File()>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	83 ec 08             	sub    esp,0x8
c000a92b:	68 14 01 00 00       	push   0x114
c000a930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a934:	e8 3e fc ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000a939:	83 c4 10             	add    esp,0x10
c000a93c:	83 c4 0c             	add    esp,0xc
c000a93f:	c3                   	ret    

c000a940 <Directory::~Directory()>:
c000a940:	83 ec 0c             	sub    esp,0xc
c000a943:	ba b0 df 01 c0       	mov    edx,0xc001dfb0
c000a948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a94c:	89 10                	mov    DWORD PTR [eax],edx
c000a94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a952:	83 ec 0c             	sub    esp,0xc
c000a955:	50                   	push   eax
c000a956:	e8 c9 e6 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a95b:	83 c4 10             	add    esp,0x10
c000a95e:	90                   	nop
c000a95f:	83 c4 0c             	add    esp,0xc
c000a962:	c3                   	ret    
c000a963:	90                   	nop

c000a964 <Directory::~Directory()>:
c000a964:	83 ec 0c             	sub    esp,0xc
c000a967:	83 ec 0c             	sub    esp,0xc
c000a96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a96e:	e8 cd ff ff ff       	call   c000a940 <Directory::~Directory()>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	83 ec 08             	sub    esp,0x8
c000a979:	68 14 01 00 00       	push   0x114
c000a97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a982:	e8 f0 fb ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000a987:	83 c4 10             	add    esp,0x10
c000a98a:	83 c4 0c             	add    esp,0xc
c000a98d:	c3                   	ret    

c000a98e <Filesystem::Filesystem()>:
c000a98e:	ba 2c df 01 c0       	mov    edx,0xc001df2c
c000a993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a997:	89 10                	mov    DWORD PTR [eax],edx
c000a999:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a99f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9aa:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a9af:	90                   	nop
c000a9b0:	c3                   	ret    
c000a9b1:	90                   	nop

c000a9b2 <Filesystem::~Filesystem()>:
c000a9b2:	ba 2c df 01 c0       	mov    edx,0xc001df2c
c000a9b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9bb:	89 10                	mov    DWORD PTR [eax],edx
c000a9bd:	90                   	nop
c000a9be:	c3                   	ret    
c000a9bf:	90                   	nop

c000a9c0 <Filesystem::~Filesystem()>:
c000a9c0:	83 ec 0c             	sub    esp,0xc
c000a9c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a9c7:	e8 e6 ff ff ff       	call   c000a9b2 <Filesystem::~Filesystem()>
c000a9cc:	83 c4 04             	add    esp,0x4
c000a9cf:	83 ec 08             	sub    esp,0x8
c000a9d2:	6a 08                	push   0x8
c000a9d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9d8:	e8 9a fb ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000a9dd:	83 c4 10             	add    esp,0x10
c000a9e0:	83 c4 0c             	add    esp,0xc
c000a9e3:	c3                   	ret    

c000a9e4 <Fs::getcwd(Process*, char*, int)>:
c000a9e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9e8:	31 c0                	xor    eax,eax
c000a9ea:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a9ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a9f1:	7d 15                	jge    c000aa08 <Fs::getcwd(Process*, char*, int)+0x24>
c000a9f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9f7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a9fe:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000aa01:	84 c9                	test   cl,cl
c000aa03:	74 06                	je     c000aa0b <Fs::getcwd(Process*, char*, int)+0x27>
c000aa05:	40                   	inc    eax
c000aa06:	eb e2                	jmp    c000a9ea <Fs::getcwd(Process*, char*, int)+0x6>
c000aa08:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000aa0b:	31 c0                	xor    eax,eax
c000aa0d:	c3                   	ret    

c000aa0e <Fs::initVFS()>:
c000aa0e:	83 ec 18             	sub    esp,0x18
c000aa11:	6a 08                	push   0x8
c000aa13:	e8 a1 cd ff ff       	call   c00077b9 <malloc>
c000aa18:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1b:	e8 e0 c7 00 00       	call   c0017200 <FAT::FAT()>
c000aa20:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000aa27:	e8 8d cd ff ff       	call   c00077b9 <malloc>
c000aa2c:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa2f:	e8 28 d5 00 00       	call   c0017f5c <ISO9660::ISO9660()>
c000aa34:	83 c4 1c             	add    esp,0x1c
c000aa37:	c3                   	ret    

c000aa38 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000aa38:	55                   	push   ebp
c000aa39:	57                   	push   edi
c000aa3a:	56                   	push   esi
c000aa3b:	53                   	push   ebx
c000aa3c:	81 ec 10 04 00 00    	sub    esp,0x410
c000aa42:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000aa49:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000aa50:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000aa57:	68 00 04 00 00       	push   0x400
c000aa5c:	6a 00                	push   0x0
c000aa5e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aa62:	56                   	push   esi
c000aa63:	e8 68 5a ff ff       	call   c00004d0 <memset>
c000aa68:	83 c4 10             	add    esp,0x10
c000aa6b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa6f:	75 0b                	jne    c000aa7c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa71:	50                   	push   eax
c000aa72:	50                   	push   eax
c000aa73:	57                   	push   edi
c000aa74:	56                   	push   esi
c000aa75:	e8 86 5b ff ff       	call   c0000600 <strcpy>
c000aa7a:	eb 41                	jmp    c000aabd <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa7c:	8a 07                	mov    al,BYTE PTR [edi]
c000aa7e:	3c 5c                	cmp    al,0x5c
c000aa80:	74 04                	je     c000aa86 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa82:	3c 2f                	cmp    al,0x2f
c000aa84:	75 18                	jne    c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa89:	3c 60                	cmp    al,0x60
c000aa8b:	7e 03                	jle    c000aa90 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa8d:	83 e8 20             	sub    eax,0x20
c000aa90:	88 04 24             	mov    BYTE PTR [esp],al
c000aa93:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa9a:	50                   	push   eax
c000aa9b:	50                   	push   eax
c000aa9c:	eb 18                	jmp    c000aab6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa9e:	50                   	push   eax
c000aa9f:	50                   	push   eax
c000aaa0:	55                   	push   ebp
c000aaa1:	56                   	push   esi
c000aaa2:	e8 59 5b ff ff       	call   c0000600 <strcpy>
c000aaa7:	5a                   	pop    edx
c000aaa8:	59                   	pop    ecx
c000aaa9:	68 5a ed 01 c0       	push   0xc001ed5a
c000aaae:	56                   	push   esi
c000aaaf:	e8 0c 5d ff ff       	call   c00007c0 <strcat>
c000aab4:	5d                   	pop    ebp
c000aab5:	58                   	pop    eax
c000aab6:	57                   	push   edi
c000aab7:	56                   	push   esi
c000aab8:	e8 03 5d ff ff       	call   c00007c0 <strcat>
c000aabd:	83 c4 10             	add    esp,0x10
c000aac0:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aac3:	3c 60                	cmp    al,0x60
c000aac5:	7e 03                	jle    c000aaca <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aac7:	83 e8 20             	sub    eax,0x20
c000aaca:	88 04 24             	mov    BYTE PTR [esp],al
c000aacd:	88 03                	mov    BYTE PTR [ebx],al
c000aacf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aad6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aadc:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aae0:	bf 03 00 00 00       	mov    edi,0x3
c000aae5:	b8 03 00 00 00       	mov    eax,0x3
c000aaea:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aaed:	84 d2                	test   dl,dl
c000aaef:	0f 84 91 00 00 00    	je     c000ab86 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aaf5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aaf8:	80 fa 5c             	cmp    dl,0x5c
c000aafb:	74 05                	je     c000ab02 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aafd:	80 fa 2f             	cmp    dl,0x2f
c000ab00:	75 12                	jne    c000ab14 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ab02:	89 c5                	mov    ebp,eax
c000ab04:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab09:	74 09                	je     c000ab14 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ab0b:	40                   	inc    eax
c000ab0c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ab10:	89 cf                	mov    edi,ecx
c000ab12:	eb d6                	jmp    c000aaea <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000ab14:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000ab19:	75 5b                	jne    c000ab76 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ab1b:	80 fa 2e             	cmp    dl,0x2e
c000ab1e:	75 56                	jne    c000ab76 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ab20:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ab24:	74 19                	je     c000ab3f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000ab26:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ab2b:	74 53                	je     c000ab80 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ab2d:	89 f9                	mov    ecx,edi
c000ab2f:	41                   	inc    ecx
c000ab30:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ab33:	80 fa 2f             	cmp    dl,0x2f
c000ab36:	74 f7                	je     c000ab2f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ab38:	80 fa 5c             	cmp    dl,0x5c
c000ab3b:	74 f2                	je     c000ab2f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ab3d:	eb d1                	jmp    c000ab10 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab3f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ab44:	74 3a                	je     c000ab80 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ab46:	83 f8 03             	cmp    eax,0x3
c000ab49:	74 c5                	je     c000ab10 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab4b:	41                   	inc    ecx
c000ab4c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ab4f:	80 fa 2f             	cmp    dl,0x2f
c000ab52:	74 f7                	je     c000ab4b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ab54:	80 fa 5c             	cmp    dl,0x5c
c000ab57:	74 f2                	je     c000ab4b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ab59:	48                   	dec    eax
c000ab5a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab5e:	75 06                	jne    c000ab66 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab60:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab64:	eb f3                	jmp    c000ab59 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab66:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab6a:	74 07                	je     c000ab73 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab6c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab70:	48                   	dec    eax
c000ab71:	eb f3                	jmp    c000ab66 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab73:	40                   	inc    eax
c000ab74:	eb 9a                	jmp    c000ab10 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab76:	80 fa 2f             	cmp    dl,0x2f
c000ab79:	74 95                	je     c000ab10 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab7b:	80 fa 5c             	cmp    dl,0x5c
c000ab7e:	74 90                	je     c000ab10 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab80:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab83:	40                   	inc    eax
c000ab84:	eb 8a                	jmp    c000ab10 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab86:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab8a:	83 ec 0c             	sub    esp,0xc
c000ab8d:	53                   	push   ebx
c000ab8e:	e8 ad 59 ff ff       	call   c0000540 <strlen>
c000ab93:	83 c4 10             	add    esp,0x10
c000ab96:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab9b:	75 26                	jne    c000abc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab9d:	83 ec 0c             	sub    esp,0xc
c000aba0:	53                   	push   ebx
c000aba1:	e8 9a 59 ff ff       	call   c0000540 <strlen>
c000aba6:	83 c4 10             	add    esp,0x10
c000aba9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000abae:	74 26                	je     c000abd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000abb0:	83 ec 0c             	sub    esp,0xc
c000abb3:	53                   	push   ebx
c000abb4:	e8 87 59 ff ff       	call   c0000540 <strlen>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000abc1:	eb c7                	jmp    c000ab8a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000abc3:	83 ec 0c             	sub    esp,0xc
c000abc6:	53                   	push   ebx
c000abc7:	e8 74 59 ff ff       	call   c0000540 <strlen>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000abd4:	74 c7                	je     c000ab9d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000abd6:	81 c4 0c 04 00 00    	add    esp,0x40c
c000abdc:	5b                   	pop    ebx
c000abdd:	5e                   	pop    esi
c000abde:	5f                   	pop    edi
c000abdf:	5d                   	pop    ebp
c000abe0:	c3                   	ret    
c000abe1:	90                   	nop

c000abe2 <File::File(char const*, Process*)>:
c000abe2:	83 ec 0c             	sub    esp,0xc
c000abe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe9:	83 ec 08             	sub    esp,0x8
c000abec:	6a 00                	push   0x0
c000abee:	50                   	push   eax
c000abef:	e8 4e e2 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	ba 94 df 01 c0       	mov    edx,0xc001df94
c000abfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac00:	89 10                	mov    DWORD PTR [eax],edx
c000ac02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ac06:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ac0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac10:	83 c0 0d             	add    eax,0xd
c000ac13:	83 ec 04             	sub    esp,0x4
c000ac16:	52                   	push   edx
c000ac17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1b:	50                   	push   eax
c000ac1c:	e8 17 fe ff ff       	call   c000aa38 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ac21:	83 c4 10             	add    esp,0x10
c000ac24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac28:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ac2b:	8d 50 bf             	lea    edx,[eax-0x41]
c000ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac32:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ac38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac3c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ac40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac44:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac4a:	25 ff 00 00 00       	and    eax,0xff
c000ac4f:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ac56:	85 c0                	test   eax,eax
c000ac58:	74 42                	je     c000ac9c <File::File(char const*, Process*)+0xba>
c000ac5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac5e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac64:	25 ff 00 00 00       	and    eax,0xff
c000ac69:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ac70:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac76:	85 c0                	test   eax,eax
c000ac78:	75 22                	jne    c000ac9c <File::File(char const*, Process*)+0xba>
c000ac7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac7e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac84:	25 ff 00 00 00       	and    eax,0xff
c000ac89:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	50                   	push   eax
c000ac94:	e8 39 20 00 00       	call   c000ccd2 <LogicalDisk::mount()>
c000ac99:	83 c4 10             	add    esp,0x10
c000ac9c:	90                   	nop
c000ac9d:	83 c4 0c             	add    esp,0xc
c000aca0:	c3                   	ret    
c000aca1:	90                   	nop

c000aca2 <File::open(FileOpenMode)>:
c000aca2:	53                   	push   ebx
c000aca3:	b8 0b 00 00 00       	mov    eax,0xb
c000aca8:	83 ec 08             	sub    esp,0x8
c000acab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000acaf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000acb6:	80 fa 19             	cmp    dl,0x19
c000acb9:	77 40                	ja     c000acfb <File::open(FileOpenMode)+0x59>
c000acbb:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000acc2:	85 d2                	test   edx,edx
c000acc4:	74 35                	je     c000acfb <File::open(FileOpenMode)+0x59>
c000acc6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000accc:	85 d2                	test   edx,edx
c000acce:	74 2b                	je     c000acfb <File::open(FileOpenMode)+0x59>
c000acd0:	b8 06 00 00 00       	mov    eax,0x6
c000acd5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000acd9:	75 20                	jne    c000acfb <File::open(FileOpenMode)+0x59>
c000acdb:	8b 02                	mov    eax,DWORD PTR [edx]
c000acdd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ace3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace7:	51                   	push   ecx
c000ace8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000aceb:	51                   	push   ecx
c000acec:	52                   	push   edx
c000aced:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	85 c0                	test   eax,eax
c000acf5:	75 04                	jne    c000acfb <File::open(FileOpenMode)+0x59>
c000acf7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000acfb:	83 c4 08             	add    esp,0x8
c000acfe:	5b                   	pop    ebx
c000acff:	c3                   	ret    

c000ad00 <File::close()>:
c000ad00:	53                   	push   ebx
c000ad01:	b8 0b 00 00 00       	mov    eax,0xb
c000ad06:	83 ec 08             	sub    esp,0x8
c000ad09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad0d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad14:	80 fa 19             	cmp    dl,0x19
c000ad17:	77 41                	ja     c000ad5a <File::close()+0x5a>
c000ad19:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ad20:	85 db                	test   ebx,ebx
c000ad22:	74 36                	je     c000ad5a <File::close()+0x5a>
c000ad24:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ad2b:	74 2d                	je     c000ad5a <File::close()+0x5a>
c000ad2d:	b8 05 00 00 00       	mov    eax,0x5
c000ad32:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad36:	74 22                	je     c000ad5a <File::close()+0x5a>
c000ad38:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ad3c:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000ad43:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad49:	53                   	push   ebx
c000ad4a:	53                   	push   ebx
c000ad4b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad4d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad53:	50                   	push   eax
c000ad54:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ad57:	83 c4 10             	add    esp,0x10
c000ad5a:	83 c4 08             	add    esp,0x8
c000ad5d:	5b                   	pop    ebx
c000ad5e:	c3                   	ret    
c000ad5f:	90                   	nop

c000ad60 <File::seek(unsigned long long)>:
c000ad60:	56                   	push   esi
c000ad61:	53                   	push   ebx
c000ad62:	b8 0b 00 00 00       	mov    eax,0xb
c000ad67:	51                   	push   ecx
c000ad68:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad6c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad70:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad7b:	80 fa 19             	cmp    dl,0x19
c000ad7e:	77 31                	ja     c000adb1 <File::seek(unsigned long long)+0x51>
c000ad80:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ad87:	85 d2                	test   edx,edx
c000ad89:	74 26                	je     c000adb1 <File::seek(unsigned long long)+0x51>
c000ad8b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad91:	85 d2                	test   edx,edx
c000ad93:	74 1c                	je     c000adb1 <File::seek(unsigned long long)+0x51>
c000ad95:	b8 05 00 00 00       	mov    eax,0x5
c000ad9a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad9e:	74 11                	je     c000adb1 <File::seek(unsigned long long)+0x51>
c000ada0:	8b 02                	mov    eax,DWORD PTR [edx]
c000ada2:	53                   	push   ebx
c000ada3:	51                   	push   ecx
c000ada4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000adaa:	52                   	push   edx
c000adab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000adae:	83 c4 10             	add    esp,0x10
c000adb1:	5a                   	pop    edx
c000adb2:	5b                   	pop    ebx
c000adb3:	5e                   	pop    esi
c000adb4:	c3                   	ret    
c000adb5:	90                   	nop

c000adb6 <File::tell(unsigned long long*)>:
c000adb6:	83 ec 0c             	sub    esp,0xc
c000adb9:	b8 0b 00 00 00       	mov    eax,0xb
c000adbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000adc2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000adc9:	80 fa 19             	cmp    dl,0x19
c000adcc:	77 34                	ja     c000ae02 <File::tell(unsigned long long*)+0x4c>
c000adce:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000add5:	85 d2                	test   edx,edx
c000add7:	74 29                	je     c000ae02 <File::tell(unsigned long long*)+0x4c>
c000add9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000addf:	85 d2                	test   edx,edx
c000ade1:	74 1f                	je     c000ae02 <File::tell(unsigned long long*)+0x4c>
c000ade3:	b8 05 00 00 00       	mov    eax,0x5
c000ade8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000adec:	74 14                	je     c000ae02 <File::tell(unsigned long long*)+0x4c>
c000adee:	50                   	push   eax
c000adef:	8b 02                	mov    eax,DWORD PTR [edx]
c000adf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000adf5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000adfb:	52                   	push   edx
c000adfc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000adff:	83 c4 10             	add    esp,0x10
c000ae02:	83 c4 0c             	add    esp,0xc
c000ae05:	c3                   	ret    

c000ae06 <File::rewind()>:
c000ae06:	83 ec 10             	sub    esp,0x10
c000ae09:	6a 00                	push   0x0
c000ae0b:	6a 00                	push   0x0
c000ae0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae11:	e8 4a ff ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c000ae16:	83 c4 1c             	add    esp,0x1c
c000ae19:	c3                   	ret    

c000ae1a <File::unlink()>:
c000ae1a:	83 ec 0c             	sub    esp,0xc
c000ae1d:	b8 0b 00 00 00       	mov    eax,0xb
c000ae22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae26:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae2d:	80 f9 19             	cmp    cl,0x19
c000ae30:	77 2f                	ja     c000ae61 <File::unlink()+0x47>
c000ae32:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae39:	85 c9                	test   ecx,ecx
c000ae3b:	74 24                	je     c000ae61 <File::unlink()+0x47>
c000ae3d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae43:	85 c9                	test   ecx,ecx
c000ae45:	74 1a                	je     c000ae61 <File::unlink()+0x47>
c000ae47:	b8 06 00 00 00       	mov    eax,0x6
c000ae4c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae50:	75 0f                	jne    c000ae61 <File::unlink()+0x47>
c000ae52:	83 c2 0d             	add    edx,0xd
c000ae55:	50                   	push   eax
c000ae56:	50                   	push   eax
c000ae57:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae59:	52                   	push   edx
c000ae5a:	51                   	push   ecx
c000ae5b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	83 c4 0c             	add    esp,0xc
c000ae64:	c3                   	ret    
c000ae65:	90                   	nop

c000ae66 <File::rename(char const*)>:
c000ae66:	83 ec 0c             	sub    esp,0xc
c000ae69:	b8 0b 00 00 00       	mov    eax,0xb
c000ae6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae72:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae79:	80 f9 19             	cmp    cl,0x19
c000ae7c:	77 32                	ja     c000aeb0 <File::rename(char const*)+0x4a>
c000ae7e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae85:	85 c9                	test   ecx,ecx
c000ae87:	74 27                	je     c000aeb0 <File::rename(char const*)+0x4a>
c000ae89:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae8f:	85 c9                	test   ecx,ecx
c000ae91:	74 1d                	je     c000aeb0 <File::rename(char const*)+0x4a>
c000ae93:	b8 06 00 00 00       	mov    eax,0x6
c000ae98:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae9c:	75 12                	jne    c000aeb0 <File::rename(char const*)+0x4a>
c000ae9e:	83 c2 0d             	add    edx,0xd
c000aea1:	50                   	push   eax
c000aea2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aea4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aea8:	52                   	push   edx
c000aea9:	51                   	push   ecx
c000aeaa:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	83 c4 0c             	add    esp,0xc
c000aeb3:	c3                   	ret    

c000aeb4 <File::chfatattr(unsigned char, unsigned char)>:
c000aeb4:	57                   	push   edi
c000aeb5:	b8 0b 00 00 00       	mov    eax,0xb
c000aeba:	56                   	push   esi
c000aebb:	53                   	push   ebx
c000aebc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aec0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aec4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aecb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000aecf:	80 f9 19             	cmp    cl,0x19
c000aed2:	77 37                	ja     c000af0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aed4:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000aedb:	85 c9                	test   ecx,ecx
c000aedd:	74 2c                	je     c000af0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aedf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000aee5:	85 c9                	test   ecx,ecx
c000aee7:	74 22                	je     c000af0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aee9:	b8 06 00 00 00       	mov    eax,0x6
c000aeee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aef2:	75 17                	jne    c000af0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aef4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000aef6:	89 f0                	mov    eax,esi
c000aef8:	83 c2 0d             	add    edx,0xd
c000aefb:	0f b6 f0             	movzx  esi,al
c000aefe:	0f b6 db             	movzx  ebx,bl
c000af01:	56                   	push   esi
c000af02:	53                   	push   ebx
c000af03:	52                   	push   edx
c000af04:	51                   	push   ecx
c000af05:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000af08:	83 c4 10             	add    esp,0x10
c000af0b:	5b                   	pop    ebx
c000af0c:	5e                   	pop    esi
c000af0d:	5f                   	pop    edi
c000af0e:	c3                   	ret    
c000af0f:	90                   	nop

c000af10 <File::exists()>:
c000af10:	83 ec 0c             	sub    esp,0xc
c000af13:	31 c0                	xor    eax,eax
c000af15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af19:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af20:	80 f9 19             	cmp    cl,0x19
c000af23:	77 24                	ja     c000af49 <File::exists()+0x39>
c000af25:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000af2c:	85 c9                	test   ecx,ecx
c000af2e:	74 19                	je     c000af49 <File::exists()+0x39>
c000af30:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000af36:	85 c9                	test   ecx,ecx
c000af38:	74 0f                	je     c000af49 <File::exists()+0x39>
c000af3a:	83 c2 0d             	add    edx,0xd
c000af3d:	50                   	push   eax
c000af3e:	50                   	push   eax
c000af3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af41:	52                   	push   edx
c000af42:	51                   	push   ecx
c000af43:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000af46:	83 c4 10             	add    esp,0x10
c000af49:	83 c4 0c             	add    esp,0xc
c000af4c:	c3                   	ret    
c000af4d:	90                   	nop

c000af4e <File::stat(unsigned long long*, bool*)>:
c000af4e:	56                   	push   esi
c000af4f:	53                   	push   ebx
c000af50:	50                   	push   eax
c000af51:	b8 0b 00 00 00       	mov    eax,0xb
c000af56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af65:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af69:	80 f9 19             	cmp    cl,0x19
c000af6c:	77 3d                	ja     c000afab <File::stat(unsigned long long*, bool*)+0x5d>
c000af6e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000af75:	85 c9                	test   ecx,ecx
c000af77:	74 32                	je     c000afab <File::stat(unsigned long long*, bool*)+0x5d>
c000af79:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000af7f:	85 c9                	test   ecx,ecx
c000af81:	74 28                	je     c000afab <File::stat(unsigned long long*, bool*)+0x5d>
c000af83:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af85:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af89:	74 13                	je     c000af9e <File::stat(unsigned long long*, bool*)+0x50>
c000af8b:	83 ec 04             	sub    esp,0x4
c000af8e:	56                   	push   esi
c000af8f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af95:	51                   	push   ecx
c000af96:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af99:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af9c:	eb 0a                	jmp    c000afa8 <File::stat(unsigned long long*, bool*)+0x5a>
c000af9e:	53                   	push   ebx
c000af9f:	83 c2 0d             	add    edx,0xd
c000afa2:	56                   	push   esi
c000afa3:	52                   	push   edx
c000afa4:	51                   	push   ecx
c000afa5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	5a                   	pop    edx
c000afac:	5b                   	pop    ebx
c000afad:	5e                   	pop    esi
c000afae:	c3                   	ret    

c000afaf <Fs::setcwd(Process*, char*)>:
c000afaf:	55                   	push   ebp
c000afb0:	57                   	push   edi
c000afb1:	56                   	push   esi
c000afb2:	53                   	push   ebx
c000afb3:	81 ec 20 02 00 00    	sub    esp,0x220
c000afb9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000afc0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000afc6:	57                   	push   edi
c000afc7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000afce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000afd2:	56                   	push   esi
c000afd3:	e8 60 fa ff ff       	call   c000aa38 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afd8:	89 34 24             	mov    DWORD PTR [esp],esi
c000afdb:	e8 60 55 ff ff       	call   c0000540 <strlen>
c000afe0:	83 c4 10             	add    esp,0x10
c000afe3:	83 f8 02             	cmp    eax,0x2
c000afe6:	77 15                	ja     c000affd <Fs::setcwd(Process*, char*)+0x4e>
c000afe8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000afed:	83 eb 41             	sub    ebx,0x41
c000aff0:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000aff7:	85 c0                	test   eax,eax
c000aff9:	75 1c                	jne    c000b017 <Fs::setcwd(Process*, char*)+0x68>
c000affb:	eb 2f                	jmp    c000b02c <Fs::setcwd(Process*, char*)+0x7d>
c000affd:	83 ec 0c             	sub    esp,0xc
c000b000:	56                   	push   esi
c000b001:	e8 3a 55 ff ff       	call   c0000540 <strlen>
c000b006:	83 c4 10             	add    esp,0x10
c000b009:	83 f8 03             	cmp    eax,0x3
c000b00c:	75 57                	jne    c000b065 <Fs::setcwd(Process*, char*)+0xb6>
c000b00e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b013:	75 50                	jne    c000b065 <Fs::setcwd(Process*, char*)+0xb6>
c000b015:	eb d1                	jmp    c000afe8 <Fs::setcwd(Process*, char*)+0x39>
c000b017:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b01e:	75 0c                	jne    c000b02c <Fs::setcwd(Process*, char*)+0x7d>
c000b020:	83 ec 0c             	sub    esp,0xc
c000b023:	50                   	push   eax
c000b024:	e8 a9 1c 00 00       	call   c000ccd2 <LogicalDisk::mount()>
c000b029:	83 c4 10             	add    esp,0x10
c000b02c:	b8 03 00 00 00       	mov    eax,0x3
c000b031:	83 fb 19             	cmp    ebx,0x19
c000b034:	0f 87 c6 00 00 00    	ja     c000b100 <Fs::setcwd(Process*, char*)+0x151>
c000b03a:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000b041:	b8 05 00 00 00       	mov    eax,0x5
c000b046:	85 d2                	test   edx,edx
c000b048:	0f 84 b2 00 00 00    	je     c000b100 <Fs::setcwd(Process*, char*)+0x151>
c000b04e:	b8 06 00 00 00       	mov    eax,0x6
c000b053:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b05a:	0f 85 92 00 00 00    	jne    c000b0f2 <Fs::setcwd(Process*, char*)+0x143>
c000b060:	e9 9b 00 00 00       	jmp    c000b100 <Fs::setcwd(Process*, char*)+0x151>
c000b065:	83 ec 0c             	sub    esp,0xc
c000b068:	68 14 01 00 00       	push   0x114
c000b06d:	e8 47 c7 ff ff       	call   c00077b9 <malloc>
c000b072:	83 c4 0c             	add    esp,0xc
c000b075:	89 c3                	mov    ebx,eax
c000b077:	55                   	push   ebp
c000b078:	56                   	push   esi
c000b079:	50                   	push   eax
c000b07a:	e8 63 fb ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c000b07f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b084:	83 c4 0c             	add    esp,0xc
c000b087:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b08b:	50                   	push   eax
c000b08c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b090:	50                   	push   eax
c000b091:	53                   	push   ebx
c000b092:	e8 b7 fe ff ff       	call   c000af4e <File::stat(unsigned long long*, bool*)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	83 f8 02             	cmp    eax,0x2
c000b09d:	74 04                	je     c000b0a3 <Fs::setcwd(Process*, char*)+0xf4>
c000b09f:	85 c0                	test   eax,eax
c000b0a1:	74 1c                	je     c000b0bf <Fs::setcwd(Process*, char*)+0x110>
c000b0a3:	b8 01 00 00 00       	mov    eax,0x1
c000b0a8:	85 db                	test   ebx,ebx
c000b0aa:	74 54                	je     c000b100 <Fs::setcwd(Process*, char*)+0x151>
c000b0ac:	83 ec 0c             	sub    esp,0xc
c000b0af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b1:	53                   	push   ebx
c000b0b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0b5:	83 c4 10             	add    esp,0x10
c000b0b8:	b8 01 00 00 00       	mov    eax,0x1
c000b0bd:	eb 41                	jmp    c000b100 <Fs::setcwd(Process*, char*)+0x151>
c000b0bf:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b0c4:	75 1c                	jne    c000b0e2 <Fs::setcwd(Process*, char*)+0x133>
c000b0c6:	b8 02 00 00 00       	mov    eax,0x2
c000b0cb:	85 db                	test   ebx,ebx
c000b0cd:	74 31                	je     c000b100 <Fs::setcwd(Process*, char*)+0x151>
c000b0cf:	83 ec 0c             	sub    esp,0xc
c000b0d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0d4:	53                   	push   ebx
c000b0d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0d8:	83 c4 10             	add    esp,0x10
c000b0db:	b8 02 00 00 00       	mov    eax,0x2
c000b0e0:	eb 1e                	jmp    c000b100 <Fs::setcwd(Process*, char*)+0x151>
c000b0e2:	85 db                	test   ebx,ebx
c000b0e4:	74 0c                	je     c000b0f2 <Fs::setcwd(Process*, char*)+0x143>
c000b0e6:	83 ec 0c             	sub    esp,0xc
c000b0e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0eb:	53                   	push   ebx
c000b0ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ef:	83 c4 10             	add    esp,0x10
c000b0f2:	50                   	push   eax
c000b0f3:	50                   	push   eax
c000b0f4:	56                   	push   esi
c000b0f5:	57                   	push   edi
c000b0f6:	e8 05 55 ff ff       	call   c0000600 <strcpy>
c000b0fb:	83 c4 10             	add    esp,0x10
c000b0fe:	31 c0                	xor    eax,eax
c000b100:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b106:	5b                   	pop    ebx
c000b107:	5e                   	pop    esi
c000b108:	5f                   	pop    edi
c000b109:	5d                   	pop    ebp
c000b10a:	c3                   	ret    
c000b10b:	90                   	nop

c000b10c <Directory::Directory(char const*, Process*)>:
c000b10c:	83 ec 0c             	sub    esp,0xc
c000b10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b113:	83 ec 08             	sub    esp,0x8
c000b116:	6a 00                	push   0x0
c000b118:	50                   	push   eax
c000b119:	e8 24 dd ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000b11e:	83 c4 10             	add    esp,0x10
c000b121:	ba b0 df 01 c0       	mov    edx,0xc001dfb0
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	89 10                	mov    DWORD PTR [eax],edx
c000b12c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b130:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b13a:	83 c0 0d             	add    eax,0xd
c000b13d:	83 ec 04             	sub    esp,0x4
c000b140:	52                   	push   edx
c000b141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b145:	50                   	push   eax
c000b146:	e8 ed f8 ff ff       	call   c000aa38 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b152:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b155:	8d 50 bf             	lea    edx,[eax-0x41]
c000b158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b15c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b166:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b16e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b174:	25 ff 00 00 00       	and    eax,0xff
c000b179:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b180:	85 c0                	test   eax,eax
c000b182:	74 42                	je     c000b1c6 <Directory::Directory(char const*, Process*)+0xba>
c000b184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b188:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b18e:	25 ff 00 00 00       	and    eax,0xff
c000b193:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b19a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1a0:	85 c0                	test   eax,eax
c000b1a2:	75 22                	jne    c000b1c6 <Directory::Directory(char const*, Process*)+0xba>
c000b1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1ae:	25 ff 00 00 00       	and    eax,0xff
c000b1b3:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	50                   	push   eax
c000b1be:	e8 0f 1b 00 00       	call   c000ccd2 <LogicalDisk::mount()>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	90                   	nop
c000b1c7:	83 c4 0c             	add    esp,0xc
c000b1ca:	c3                   	ret    
c000b1cb:	90                   	nop

c000b1cc <Directory::open()>:
c000b1cc:	53                   	push   ebx
c000b1cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d2:	83 ec 08             	sub    esp,0x8
c000b1d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1d9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b1e0:	80 fa 19             	cmp    dl,0x19
c000b1e3:	77 3d                	ja     c000b222 <Directory::open()+0x56>
c000b1e5:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b1ec:	85 d2                	test   edx,edx
c000b1ee:	74 32                	je     c000b222 <Directory::open()+0x56>
c000b1f0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b1f6:	85 d2                	test   edx,edx
c000b1f8:	74 28                	je     c000b222 <Directory::open()+0x56>
c000b1fa:	b8 06 00 00 00       	mov    eax,0x6
c000b1ff:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b203:	75 1d                	jne    c000b222 <Directory::open()+0x56>
c000b205:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b20b:	50                   	push   eax
c000b20c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b20e:	51                   	push   ecx
c000b20f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b212:	51                   	push   ecx
c000b213:	52                   	push   edx
c000b214:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b217:	83 c4 10             	add    esp,0x10
c000b21a:	85 c0                	test   eax,eax
c000b21c:	75 04                	jne    c000b222 <Directory::open()+0x56>
c000b21e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b222:	83 c4 08             	add    esp,0x8
c000b225:	5b                   	pop    ebx
c000b226:	c3                   	ret    
c000b227:	90                   	nop

c000b228 <Directory::close()>:
c000b228:	53                   	push   ebx
c000b229:	b8 0b 00 00 00       	mov    eax,0xb
c000b22e:	83 ec 08             	sub    esp,0x8
c000b231:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b235:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b23c:	80 fa 19             	cmp    dl,0x19
c000b23f:	77 41                	ja     c000b282 <Directory::close()+0x5a>
c000b241:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b248:	85 db                	test   ebx,ebx
c000b24a:	74 36                	je     c000b282 <Directory::close()+0x5a>
c000b24c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b253:	74 2d                	je     c000b282 <Directory::close()+0x5a>
c000b255:	b8 05 00 00 00       	mov    eax,0x5
c000b25a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b25e:	74 22                	je     c000b282 <Directory::close()+0x5a>
c000b260:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b264:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b26b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b271:	53                   	push   ebx
c000b272:	53                   	push   ebx
c000b273:	8b 10                	mov    edx,DWORD PTR [eax]
c000b275:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b27b:	50                   	push   eax
c000b27c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	83 c4 08             	add    esp,0x8
c000b285:	5b                   	pop    ebx
c000b286:	c3                   	ret    
c000b287:	90                   	nop

c000b288 <Directory::unlink()>:
c000b288:	83 ec 0c             	sub    esp,0xc
c000b28b:	b8 0b 00 00 00       	mov    eax,0xb
c000b290:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b294:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b29b:	80 f9 19             	cmp    cl,0x19
c000b29e:	77 2f                	ja     c000b2cf <Directory::unlink()+0x47>
c000b2a0:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b2a7:	85 c9                	test   ecx,ecx
c000b2a9:	74 24                	je     c000b2cf <Directory::unlink()+0x47>
c000b2ab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2b1:	85 c9                	test   ecx,ecx
c000b2b3:	74 1a                	je     c000b2cf <Directory::unlink()+0x47>
c000b2b5:	b8 06 00 00 00       	mov    eax,0x6
c000b2ba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2be:	75 0f                	jne    c000b2cf <Directory::unlink()+0x47>
c000b2c0:	83 c2 0d             	add    edx,0xd
c000b2c3:	50                   	push   eax
c000b2c4:	50                   	push   eax
c000b2c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2c7:	52                   	push   edx
c000b2c8:	51                   	push   ecx
c000b2c9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	83 c4 0c             	add    esp,0xc
c000b2d2:	c3                   	ret    
c000b2d3:	90                   	nop

c000b2d4 <Directory::rename(char const*)>:
c000b2d4:	83 ec 0c             	sub    esp,0xc
c000b2d7:	b8 0b 00 00 00       	mov    eax,0xb
c000b2dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2e0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2e7:	80 f9 19             	cmp    cl,0x19
c000b2ea:	77 32                	ja     c000b31e <Directory::rename(char const*)+0x4a>
c000b2ec:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b2f3:	85 c9                	test   ecx,ecx
c000b2f5:	74 27                	je     c000b31e <Directory::rename(char const*)+0x4a>
c000b2f7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2fd:	85 c9                	test   ecx,ecx
c000b2ff:	74 1d                	je     c000b31e <Directory::rename(char const*)+0x4a>
c000b301:	b8 06 00 00 00       	mov    eax,0x6
c000b306:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b30a:	75 12                	jne    c000b31e <Directory::rename(char const*)+0x4a>
c000b30c:	83 c2 0d             	add    edx,0xd
c000b30f:	50                   	push   eax
c000b310:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b312:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b316:	52                   	push   edx
c000b317:	51                   	push   ecx
c000b318:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b31b:	83 c4 10             	add    esp,0x10
c000b31e:	83 c4 0c             	add    esp,0xc
c000b321:	c3                   	ret    

c000b322 <Directory::exists()>:
c000b322:	83 ec 0c             	sub    esp,0xc
c000b325:	31 c0                	xor    eax,eax
c000b327:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b32b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b332:	80 f9 19             	cmp    cl,0x19
c000b335:	77 24                	ja     c000b35b <Directory::exists()+0x39>
c000b337:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b33e:	85 c9                	test   ecx,ecx
c000b340:	74 19                	je     c000b35b <Directory::exists()+0x39>
c000b342:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b348:	85 c9                	test   ecx,ecx
c000b34a:	74 0f                	je     c000b35b <Directory::exists()+0x39>
c000b34c:	83 c2 0d             	add    edx,0xd
c000b34f:	50                   	push   eax
c000b350:	50                   	push   eax
c000b351:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b353:	52                   	push   edx
c000b354:	51                   	push   ecx
c000b355:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	83 c4 0c             	add    esp,0xc
c000b35e:	c3                   	ret    
c000b35f:	90                   	nop

c000b360 <Directory::read(dirent*)>:
c000b360:	83 ec 1c             	sub    esp,0x1c
c000b363:	b8 0b 00 00 00       	mov    eax,0xb
c000b368:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b36c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b373:	80 fa 19             	cmp    dl,0x19
c000b376:	77 30                	ja     c000b3a8 <Directory::read(dirent*)+0x48>
c000b378:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b37f:	85 d2                	test   edx,edx
c000b381:	74 25                	je     c000b3a8 <Directory::read(dirent*)+0x48>
c000b383:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b38a:	74 1c                	je     c000b3a8 <Directory::read(dirent*)+0x48>
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b391:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b395:	52                   	push   edx
c000b396:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39a:	6a 00                	push   0x0
c000b39c:	68 10 01 00 00       	push   0x110
c000b3a1:	51                   	push   ecx
c000b3a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b3a5:	83 c4 20             	add    esp,0x20
c000b3a8:	83 c4 1c             	add    esp,0x1c
c000b3ab:	c3                   	ret    

c000b3ac <Directory::create()>:
c000b3ac:	83 ec 0c             	sub    esp,0xc
c000b3af:	b8 0b 00 00 00       	mov    eax,0xb
c000b3b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3bf:	80 f9 19             	cmp    cl,0x19
c000b3c2:	77 2f                	ja     c000b3f3 <Directory::create()+0x47>
c000b3c4:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b3cb:	85 c9                	test   ecx,ecx
c000b3cd:	74 24                	je     c000b3f3 <Directory::create()+0x47>
c000b3cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3d5:	85 c9                	test   ecx,ecx
c000b3d7:	74 1a                	je     c000b3f3 <Directory::create()+0x47>
c000b3d9:	b8 06 00 00 00       	mov    eax,0x6
c000b3de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3e2:	75 0f                	jne    c000b3f3 <Directory::create()+0x47>
c000b3e4:	83 c2 0d             	add    edx,0xd
c000b3e7:	50                   	push   eax
c000b3e8:	50                   	push   eax
c000b3e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3eb:	52                   	push   edx
c000b3ec:	51                   	push   ecx
c000b3ed:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b3f0:	83 c4 10             	add    esp,0x10
c000b3f3:	83 c4 0c             	add    esp,0xc
c000b3f6:	c3                   	ret    
c000b3f7:	90                   	nop

c000b3f8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b3f8:	b8 0a 00 00 00       	mov    eax,0xa
c000b3fd:	c3                   	ret    
c000b3fe:	66 90                	xchg   ax,ax

c000b400 <Bus::Bus(char const*)>:
c000b400:	83 ec 0c             	sub    esp,0xc
c000b403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b407:	83 ec 08             	sub    esp,0x8
c000b40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40e:	50                   	push   eax
c000b40f:	e8 30 08 00 00       	call   c000bc44 <Device::Device(char const*)>
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	ba cc df 01 c0       	mov    edx,0xc001dfcc
c000b41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b420:	89 10                	mov    DWORD PTR [eax],edx
c000b422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b426:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b430:	90                   	nop
c000b431:	83 c4 0c             	add    esp,0xc
c000b434:	c3                   	ret    
c000b435:	90                   	nop
c000b436:	66 90                	xchg   ax,ax

c000b438 <Bus::~Bus()>:
c000b438:	83 ec 0c             	sub    esp,0xc
c000b43b:	ba cc df 01 c0       	mov    edx,0xc001dfcc
c000b440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b444:	89 10                	mov    DWORD PTR [eax],edx
c000b446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44a:	83 ec 0c             	sub    esp,0xc
c000b44d:	50                   	push   eax
c000b44e:	e8 5b 05 00 00       	call   c000b9ae <Device::~Device()>
c000b453:	83 c4 10             	add    esp,0x10
c000b456:	90                   	nop
c000b457:	83 c4 0c             	add    esp,0xc
c000b45a:	c3                   	ret    
c000b45b:	90                   	nop

c000b45c <Bus::~Bus()>:
c000b45c:	83 ec 0c             	sub    esp,0xc
c000b45f:	83 ec 0c             	sub    esp,0xc
c000b462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b466:	e8 cd ff ff ff       	call   c000b438 <Bus::~Bus()>
c000b46b:	83 c4 10             	add    esp,0x10
c000b46e:	83 ec 08             	sub    esp,0x8
c000b471:	68 58 01 00 00       	push   0x158
c000b476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47a:	e8 f8 f0 ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000b47f:	83 c4 10             	add    esp,0x10
c000b482:	83 c4 0c             	add    esp,0xc
c000b485:	c3                   	ret    

c000b486 <beepThread(void*)>:
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b48e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b492:	48                   	dec    eax
c000b493:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b498:	75 01                	jne    c000b49b <beepThread(void*)+0x15>
c000b49a:	fb                   	sti    
c000b49b:	83 ec 0c             	sub    esp,0xc
c000b49e:	6b c2 0a             	imul   eax,edx,0xa
c000b4a1:	50                   	push   eax
c000b4a2:	e8 3d 87 00 00       	call   c0013be4 <milliTenthSleep(unsigned int)>
c000b4a7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b4ae:	e8 e3 a4 00 00       	call   c0015996 <HalMakeBeep(int)>
c000b4b3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b4bb:	83 c4 1c             	add    esp,0x1c
c000b4be:	e9 1d 86 00 00       	jmp    c0013ae0 <blockTask(TaskState)>

c000b4c3 <Krnl::beep(int, int, bool)>:
c000b4c3:	56                   	push   esi
c000b4c4:	53                   	push   ebx
c000b4c5:	83 ec 10             	sub    esp,0x10
c000b4c8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b4cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d4:	e8 bd a4 00 00       	call   c0015996 <HalMakeBeep(int)>
c000b4d9:	83 c4 10             	add    esp,0x10
c000b4dc:	89 f0                	mov    eax,esi
c000b4de:	84 c0                	test   al,al
c000b4e0:	74 1e                	je     c000b500 <Krnl::beep(int, int, bool)+0x3d>
c000b4e2:	83 ec 0c             	sub    esp,0xc
c000b4e5:	6b db 0a             	imul   ebx,ebx,0xa
c000b4e8:	53                   	push   ebx
c000b4e9:	e8 f6 86 00 00       	call   c0013be4 <milliTenthSleep(unsigned int)>
c000b4ee:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b4f6:	83 c4 14             	add    esp,0x14
c000b4f9:	5b                   	pop    ebx
c000b4fa:	5e                   	pop    esi
c000b4fb:	e9 96 a4 00 00       	jmp    c0015996 <HalMakeBeep(int)>
c000b500:	68 e6 00 00 00       	push   0xe6
c000b505:	53                   	push   ebx
c000b506:	68 86 b4 00 c0       	push   0xc000b486
c000b50b:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b511:	e8 ae 81 00 00       	call   c00136c4 <Process::createThread(void (*)(void*), void*, int)>
c000b516:	83 c4 14             	add    esp,0x14
c000b519:	5b                   	pop    ebx
c000b51a:	5e                   	pop    esi
c000b51b:	c3                   	ret    

c000b51c <User::loadClockSettings(int)>:
c000b51c:	53                   	push   ebx
c000b51d:	83 ec 14             	sub    esp,0x14
c000b520:	68 14 01 00 00       	push   0x114
c000b525:	e8 8f c2 ff ff       	call   c00077b9 <malloc>
c000b52a:	83 c4 0c             	add    esp,0xc
c000b52d:	89 c3                	mov    ebx,eax
c000b52f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b535:	68 f0 df 01 c0       	push   0xc001dff0
c000b53a:	50                   	push   eax
c000b53b:	e8 a2 f6 ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c000b540:	58                   	pop    eax
c000b541:	5a                   	pop    edx
c000b542:	6a 01                	push   0x1
c000b544:	53                   	push   ebx
c000b545:	e8 58 f7 ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c000b54a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b54d:	e8 ae f7 ff ff       	call   c000ad00 <File::close()>
c000b552:	83 c4 10             	add    esp,0x10
c000b555:	85 db                	test   ebx,ebx
c000b557:	74 0f                	je     c000b568 <User::loadClockSettings(int)+0x4c>
c000b559:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b55b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b55f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b562:	83 c4 08             	add    esp,0x8
c000b565:	5b                   	pop    ebx
c000b566:	ff e0                	jmp    eax
c000b568:	83 c4 08             	add    esp,0x8
c000b56b:	5b                   	pop    ebx
c000b56c:	c3                   	ret    
c000b56d:	90                   	nop

c000b56e <Clock::Clock(char const*)>:
c000b56e:	83 ec 0c             	sub    esp,0xc
c000b571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b575:	83 ec 08             	sub    esp,0x8
c000b578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57c:	50                   	push   eax
c000b57d:	e8 c2 06 00 00       	call   c000bc44 <Device::Device(char const*)>
c000b582:	83 c4 10             	add    esp,0x10
c000b585:	ba 18 e0 01 c0       	mov    edx,0xc001e018
c000b58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b58e:	89 10                	mov    DWORD PTR [eax],edx
c000b590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b594:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b59e:	90                   	nop
c000b59f:	83 c4 0c             	add    esp,0xc
c000b5a2:	c3                   	ret    
c000b5a3:	90                   	nop

c000b5a4 <Clock::~Clock()>:
c000b5a4:	83 ec 0c             	sub    esp,0xc
c000b5a7:	ba 18 e0 01 c0       	mov    edx,0xc001e018
c000b5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5b0:	89 10                	mov    DWORD PTR [eax],edx
c000b5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5b6:	83 ec 0c             	sub    esp,0xc
c000b5b9:	50                   	push   eax
c000b5ba:	e8 ef 03 00 00       	call   c000b9ae <Device::~Device()>
c000b5bf:	83 c4 10             	add    esp,0x10
c000b5c2:	90                   	nop
c000b5c3:	83 c4 0c             	add    esp,0xc
c000b5c6:	c3                   	ret    
c000b5c7:	90                   	nop

c000b5c8 <Clock::~Clock()>:
c000b5c8:	83 ec 0c             	sub    esp,0xc
c000b5cb:	83 ec 0c             	sub    esp,0xc
c000b5ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d2:	e8 cd ff ff ff       	call   c000b5a4 <Clock::~Clock()>
c000b5d7:	83 c4 10             	add    esp,0x10
c000b5da:	83 ec 08             	sub    esp,0x8
c000b5dd:	68 58 01 00 00       	push   0x158
c000b5e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e6:	e8 8c ef ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000b5eb:	83 c4 10             	add    esp,0x10
c000b5ee:	83 c4 0c             	add    esp,0xc
c000b5f1:	c3                   	ret    

c000b5f2 <Clock::timeInSecondsLocal()>:
c000b5f2:	53                   	push   ebx
c000b5f3:	83 ec 14             	sub    esp,0x14
c000b5f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5fa:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5fc:	50                   	push   eax
c000b5fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b600:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b607:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b60d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b613:	89 cb                	mov    ebx,ecx
c000b615:	c1 fb 1f             	sar    ebx,0x1f
c000b618:	01 c8                	add    eax,ecx
c000b61a:	11 da                	adc    edx,ebx
c000b61c:	83 c4 10             	add    esp,0x10
c000b61f:	31 c9                	xor    ecx,ecx
c000b621:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b628:	74 05                	je     c000b62f <Clock::timeInSecondsLocal()+0x3d>
c000b62a:	b9 08 07 00 00       	mov    ecx,0x708
c000b62f:	31 db                	xor    ebx,ebx
c000b631:	01 c8                	add    eax,ecx
c000b633:	11 da                	adc    edx,ebx
c000b635:	83 c4 08             	add    esp,0x8
c000b638:	5b                   	pop    ebx
c000b639:	c3                   	ret    

c000b63a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b63a:	57                   	push   edi
c000b63b:	56                   	push   esi
c000b63c:	53                   	push   ebx
c000b63d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b641:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b645:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b647:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b64b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b64e:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b655:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b65b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b661:	99                   	cdq    
c000b662:	29 c6                	sub    esi,eax
c000b664:	19 d7                	sbb    edi,edx
c000b666:	89 f0                	mov    eax,esi
c000b668:	89 fa                	mov    edx,edi
c000b66a:	31 f6                	xor    esi,esi
c000b66c:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b673:	74 05                	je     c000b67a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b675:	be 08 07 00 00       	mov    esi,0x708
c000b67a:	31 ff                	xor    edi,edi
c000b67c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b680:	29 f0                	sub    eax,esi
c000b682:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b686:	19 fa                	sbb    edx,edi
c000b688:	89 d8                	mov    eax,ebx
c000b68a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b68e:	5b                   	pop    ebx
c000b68f:	5e                   	pop    esi
c000b690:	5f                   	pop    edi
c000b691:	ff e0                	jmp    eax

c000b693 <datetimeToSeconds(datetime_t)>:
c000b693:	55                   	push   ebp
c000b694:	57                   	push   edi
c000b695:	56                   	push   esi
c000b696:	53                   	push   ebx
c000b697:	83 ec 14             	sub    esp,0x14
c000b69a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b69e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b6a2:	89 d3                	mov    ebx,edx
c000b6a4:	0f b6 c6             	movzx  eax,dh
c000b6a7:	c1 eb 10             	shr    ebx,0x10
c000b6aa:	48                   	dec    eax
c000b6ab:	66 81 eb 6c 07       	sub    bx,0x76c
c000b6b0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b6b4:	0f b6 f5             	movzx  esi,ch
c000b6b7:	89 cf                	mov    edi,ecx
c000b6b9:	6b f6 3c             	imul   esi,esi,0x3c
c000b6bc:	c1 ef 10             	shr    edi,0x10
c000b6bf:	0f b6 c9             	movzx  ecx,cl
c000b6c2:	89 f8                	mov    eax,edi
c000b6c4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b6ca:	0f b6 f8             	movzx  edi,al
c000b6cd:	0f b6 d2             	movzx  edx,dl
c000b6d0:	01 fe                	add    esi,edi
c000b6d2:	01 f1                	add    ecx,esi
c000b6d4:	0f b7 f3             	movzx  esi,bx
c000b6d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b6db:	c1 f9 1f             	sar    ecx,0x1f
c000b6de:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b6e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b6e7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b6ec:	8b 0c 8d 60 e0 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe1fa0]
c000b6f3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b6f7:	76 29                	jbe    c000b722 <datetimeToSeconds(datetime_t)+0x8f>
c000b6f9:	f6 c3 03             	test   bl,0x3
c000b6fc:	75 24                	jne    c000b722 <datetimeToSeconds(datetime_t)+0x8f>
c000b6fe:	31 d2                	xor    edx,edx
c000b700:	bf 64 00 00 00       	mov    edi,0x64
c000b705:	89 d8                	mov    eax,ebx
c000b707:	66 f7 f7             	div    di
c000b70a:	66 85 d2             	test   dx,dx
c000b70d:	75 12                	jne    c000b721 <datetimeToSeconds(datetime_t)+0x8e>
c000b70f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b715:	bf 90 01 00 00       	mov    edi,0x190
c000b71a:	99                   	cdq    
c000b71b:	f7 ff                	idiv   edi
c000b71d:	85 d2                	test   edx,edx
c000b71f:	75 01                	jne    c000b722 <datetimeToSeconds(datetime_t)+0x8f>
c000b721:	41                   	inc    ecx
c000b722:	66 83 fb 46          	cmp    bx,0x46
c000b726:	76 45                	jbe    c000b76d <datetimeToSeconds(datetime_t)+0xda>
c000b728:	bb 46 00 00 00       	mov    ebx,0x46
c000b72d:	bf 64 00 00 00       	mov    edi,0x64
c000b732:	bd 90 01 00 00       	mov    ebp,0x190
c000b737:	b8 6d 01 00 00       	mov    eax,0x16d
c000b73c:	f6 c3 03             	test   bl,0x3
c000b73f:	75 23                	jne    c000b764 <datetimeToSeconds(datetime_t)+0xd1>
c000b741:	89 d8                	mov    eax,ebx
c000b743:	99                   	cdq    
c000b744:	f7 ff                	idiv   edi
c000b746:	b8 6e 01 00 00       	mov    eax,0x16e
c000b74b:	85 d2                	test   edx,edx
c000b74d:	75 15                	jne    c000b764 <datetimeToSeconds(datetime_t)+0xd1>
c000b74f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b755:	99                   	cdq    
c000b756:	f7 fd                	idiv   ebp
c000b758:	31 c0                	xor    eax,eax
c000b75a:	85 d2                	test   edx,edx
c000b75c:	0f 94 c0             	sete   al
c000b75f:	05 6d 01 00 00       	add    eax,0x16d
c000b764:	01 c1                	add    ecx,eax
c000b766:	43                   	inc    ebx
c000b767:	39 f3                	cmp    ebx,esi
c000b769:	7c cc                	jl     c000b737 <datetimeToSeconds(datetime_t)+0xa4>
c000b76b:	eb 3b                	jmp    c000b7a8 <datetimeToSeconds(datetime_t)+0x115>
c000b76d:	74 39                	je     c000b7a8 <datetimeToSeconds(datetime_t)+0x115>
c000b76f:	b8 45 00 00 00       	mov    eax,0x45
c000b774:	89 c2                	mov    edx,eax
c000b776:	83 e2 03             	and    edx,0x3
c000b779:	39 f0                	cmp    eax,esi
c000b77b:	7e 13                	jle    c000b790 <datetimeToSeconds(datetime_t)+0xfd>
c000b77d:	85 d2                	test   edx,edx
c000b77f:	0f 94 c2             	sete   dl
c000b782:	48                   	dec    eax
c000b783:	0f b6 d2             	movzx  edx,dl
c000b786:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b78c:	29 d1                	sub    ecx,edx
c000b78e:	eb e4                	jmp    c000b774 <datetimeToSeconds(datetime_t)+0xe1>
c000b790:	b8 6d 01 00 00       	mov    eax,0x16d
c000b795:	85 d2                	test   edx,edx
c000b797:	75 0d                	jne    c000b7a6 <datetimeToSeconds(datetime_t)+0x113>
c000b799:	31 c0                	xor    eax,eax
c000b79b:	66 85 db             	test   bx,bx
c000b79e:	0f 95 c0             	setne  al
c000b7a1:	05 6d 01 00 00       	add    eax,0x16d
c000b7a6:	29 c1                	sub    ecx,eax
c000b7a8:	b8 80 51 01 00       	mov    eax,0x15180
c000b7ad:	f7 e9                	imul   ecx
c000b7af:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b7b3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b7b7:	83 c4 14             	add    esp,0x14
c000b7ba:	5b                   	pop    ebx
c000b7bb:	5e                   	pop    esi
c000b7bc:	5f                   	pop    edi
c000b7bd:	5d                   	pop    ebp
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b7c0:	57                   	push   edi
c000b7c1:	56                   	push   esi
c000b7c2:	53                   	push   ebx
c000b7c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b7c7:	8b 06                	mov    eax,DWORD PTR [esi]
c000b7c9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b7cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b7d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b7d4:	e8 ba fe ff ff       	call   c000b693 <datetimeToSeconds(datetime_t)>
c000b7d9:	59                   	pop    ecx
c000b7da:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b7e1:	5b                   	pop    ebx
c000b7e2:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b7e8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b7ee:	89 cb                	mov    ebx,ecx
c000b7f0:	c1 fb 1f             	sar    ebx,0x1f
c000b7f3:	29 c8                	sub    eax,ecx
c000b7f5:	19 da                	sbb    edx,ebx
c000b7f7:	31 c9                	xor    ecx,ecx
c000b7f9:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b800:	74 05                	je     c000b807 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b802:	b9 08 07 00 00       	mov    ecx,0x708
c000b807:	31 db                	xor    ebx,ebx
c000b809:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b80d:	29 c8                	sub    eax,ecx
c000b80f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b813:	19 da                	sbb    edx,ebx
c000b815:	89 f8                	mov    eax,edi
c000b817:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	ff e0                	jmp    eax

c000b820 <secondsToDatetime(unsigned long long)>:
c000b820:	55                   	push   ebp
c000b821:	57                   	push   edi
c000b822:	56                   	push   esi
c000b823:	53                   	push   ebx
c000b824:	83 ec 1c             	sub    esp,0x1c
c000b827:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b82b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b82f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b833:	6a 00                	push   0x0
c000b835:	68 80 51 01 00       	push   0x15180
c000b83a:	55                   	push   ebp
c000b83b:	57                   	push   edi
c000b83c:	e8 ff 09 01 00       	call   c001c240 <__udivdi3>
c000b841:	83 c4 10             	add    esp,0x10
c000b844:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b84a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84e:	6a 00                	push   0x0
c000b850:	68 80 51 01 00       	push   0x15180
c000b855:	55                   	push   ebp
c000b856:	57                   	push   edi
c000b857:	bf 10 0e 00 00       	mov    edi,0xe10
c000b85c:	e8 df 0a 01 00       	call   c001c340 <__umoddi3>
c000b861:	83 c4 10             	add    esp,0x10
c000b864:	99                   	cdq    
c000b865:	f7 ff                	idiv   edi
c000b867:	bf 3c 00 00 00       	mov    edi,0x3c
c000b86c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b86f:	89 d0                	mov    eax,edx
c000b871:	99                   	cdq    
c000b872:	f7 ff                	idiv   edi
c000b874:	85 db                	test   ebx,ebx
c000b876:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b879:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b87c:	79 11                	jns    c000b88f <secondsToDatetime(unsigned long long)+0x6f>
c000b87e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b882:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b888:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b88d:	eb 07                	jmp    c000b896 <secondsToDatetime(unsigned long long)+0x76>
c000b88f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b894:	89 d8                	mov    eax,ebx
c000b896:	bf b4 05 00 00       	mov    edi,0x5b4
c000b89b:	99                   	cdq    
c000b89c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b8a1:	f7 f9                	idiv   ecx
c000b8a3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b8a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8ac:	31 d2                	xor    edx,edx
c000b8ae:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b8b6:	01 c3                	add    ebx,eax
c000b8b8:	89 d8                	mov    eax,ebx
c000b8ba:	f7 f1                	div    ecx
c000b8bc:	31 d2                	xor    edx,edx
c000b8be:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b8c1:	89 d8                	mov    eax,ebx
c000b8c3:	f7 f7                	div    edi
c000b8c5:	31 d2                	xor    edx,edx
c000b8c7:	29 c1                	sub    ecx,eax
c000b8c9:	89 d8                	mov    eax,ebx
c000b8cb:	f7 f5                	div    ebp
c000b8cd:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b8d2:	29 c1                	sub    ecx,eax
c000b8d4:	31 d2                	xor    edx,edx
c000b8d6:	89 c8                	mov    eax,ecx
c000b8d8:	f7 f5                	div    ebp
c000b8da:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b8df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8e3:	31 d2                	xor    edx,edx
c000b8e5:	89 c8                	mov    eax,ecx
c000b8e7:	f7 f5                	div    ebp
c000b8e9:	31 d2                	xor    edx,edx
c000b8eb:	01 c3                	add    ebx,eax
c000b8ed:	89 c8                	mov    eax,ecx
c000b8ef:	f7 f7                	div    edi
c000b8f1:	bf 99 00 00 00       	mov    edi,0x99
c000b8f6:	29 c3                	sub    ebx,eax
c000b8f8:	31 d2                	xor    edx,edx
c000b8fa:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b902:	29 c3                	sub    ebx,eax
c000b904:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b907:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b90a:	bb 05 00 00 00       	mov    ebx,0x5
c000b90f:	83 c1 02             	add    ecx,0x2
c000b912:	89 c8                	mov    eax,ecx
c000b914:	f7 f7                	div    edi
c000b916:	31 d2                	xor    edx,edx
c000b918:	89 c7                	mov    edi,eax
c000b91a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b920:	83 c0 02             	add    eax,0x2
c000b923:	f7 f3                	div    ebx
c000b925:	89 eb                	mov    ebx,ebp
c000b927:	29 c3                	sub    ebx,eax
c000b929:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b92f:	88 1e                	mov    BYTE PTR [esi],bl
c000b931:	19 c0                	sbb    eax,eax
c000b933:	31 d2                	xor    edx,edx
c000b935:	83 e0 0c             	and    eax,0xc
c000b938:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b93c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b944:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b948:	83 f9 01             	cmp    ecx,0x1
c000b94b:	0f 96 c2             	setbe  dl
c000b94e:	41                   	inc    ecx
c000b94f:	01 d0                	add    eax,edx
c000b951:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b954:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b958:	83 c4 1c             	add    esp,0x1c
c000b95b:	89 f0                	mov    eax,esi
c000b95d:	5b                   	pop    ebx
c000b95e:	5e                   	pop    esi
c000b95f:	5f                   	pop    edi
c000b960:	5d                   	pop    ebp
c000b961:	c2 04 00             	ret    0x4

c000b964 <Clock::timeInDatetimeLocal()>:
c000b964:	53                   	push   ebx
c000b965:	83 ec 14             	sub    esp,0x14
c000b968:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b96c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b970:	e8 7d fc ff ff       	call   c000b5f2 <Clock::timeInSecondsLocal()>
c000b975:	83 c4 0c             	add    esp,0xc
c000b978:	52                   	push   edx
c000b979:	50                   	push   eax
c000b97a:	53                   	push   ebx
c000b97b:	e8 a0 fe ff ff       	call   c000b820 <secondsToDatetime(unsigned long long)>
c000b980:	89 d8                	mov    eax,ebx
c000b982:	83 c4 14             	add    esp,0x14
c000b985:	5b                   	pop    ebx
c000b986:	c2 04 00             	ret    0x4
c000b989:	90                   	nop

c000b98a <Device::hibernate()>:
c000b98a:	c3                   	ret    
c000b98b:	90                   	nop

c000b98c <Device::wake()>:
c000b98c:	c3                   	ret    
c000b98d:	90                   	nop

c000b98e <Device::detect()>:
c000b98e:	c3                   	ret    
c000b98f:	90                   	nop

c000b990 <Device::disableLegacy()>:
c000b990:	c3                   	ret    
c000b991:	90                   	nop

c000b992 <Device::powerSaving(PowerSavingLevel)>:
c000b992:	c3                   	ret    
c000b993:	90                   	nop

c000b994 <DriverlessDevice::close(int, int, void*)>:
c000b994:	31 c0                	xor    eax,eax
c000b996:	c3                   	ret    
c000b997:	90                   	nop

c000b998 <DriverlessDevice::detect()>:
c000b998:	c3                   	ret    
c000b999:	90                   	nop

c000b99a <DriverlessDevice::open(int, int, void*)>:
c000b99a:	83 ec 18             	sub    esp,0x18
c000b99d:	68 90 e0 01 c0       	push   0xc001e090
c000b9a2:	e8 48 49 00 00       	call   c00102ef <KePanic(char const*)>
c000b9a7:	83 c8 ff             	or     eax,0xffffffff
c000b9aa:	83 c4 1c             	add    esp,0x1c
c000b9ad:	c3                   	ret    

c000b9ae <Device::~Device()>:
c000b9ae:	ba f0 e0 01 c0       	mov    edx,0xc001e0f0
c000b9b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b7:	89 10                	mov    DWORD PTR [eax],edx
c000b9b9:	90                   	nop
c000b9ba:	c3                   	ret    
c000b9bb:	90                   	nop

c000b9bc <Device::~Device()>:
c000b9bc:	83 ec 0c             	sub    esp,0xc
c000b9bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b9c3:	e8 e6 ff ff ff       	call   c000b9ae <Device::~Device()>
c000b9c8:	83 c4 04             	add    esp,0x4
c000b9cb:	83 ec 08             	sub    esp,0x8
c000b9ce:	68 58 01 00 00       	push   0x158
c000b9d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d7:	e8 9b eb ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000b9dc:	83 c4 10             	add    esp,0x10
c000b9df:	83 c4 0c             	add    esp,0xc
c000b9e2:	c3                   	ret    
c000b9e3:	90                   	nop

c000b9e4 <Device::findAndLoadDriver()>:
c000b9e4:	c7 44 24 04 ae e0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e0ae
c000b9ec:	e9 7c ec ff ff       	jmp    c000a66d <Dbg::kprintf(char const*, ...)>
c000b9f1:	90                   	nop

c000b9f2 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b9f2:	57                   	push   edi
c000b9f3:	b9 09 00 00 00       	mov    ecx,0x9
c000b9f8:	56                   	push   esi
c000b9f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b9fd:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ba01:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ba0b:	81 c7 18 01 00 00    	add    edi,0x118
c000ba11:	fc                   	cld    
c000ba12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ba14:	5e                   	pop    esi
c000ba15:	5f                   	pop    edi
c000ba16:	c3                   	ret    
c000ba17:	90                   	nop

c000ba18 <Device::preOpenACPI(void*, char*, char*)>:
c000ba18:	57                   	push   edi
c000ba19:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ba1e:	56                   	push   esi
c000ba1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba27:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ba31:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ba37:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ba3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ba41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba43:	b9 0e 00 00 00       	mov    ecx,0xe
c000ba48:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000ba4e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba54:	5e                   	pop    esi
c000ba55:	5f                   	pop    edi
c000ba56:	c3                   	ret    
c000ba57:	90                   	nop

c000ba58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ba58:	53                   	push   ebx
c000ba59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba65:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba69:	0f b6 c0             	movzx  eax,al
c000ba6c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba78:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba7c:	5b                   	pop    ebx
c000ba7d:	e9 a6 05 00 00       	jmp    c000c028 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba82 <Device::getParent()>:
c000ba82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba86:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba8c:	c3                   	ret    
c000ba8d:	90                   	nop

c000ba8e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba96:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba9b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba9f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000baa3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000baa7:	e9 e8 06 00 00       	jmp    c000c194 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000baac <Device::addChild(Device*)>:
c000baac:	53                   	push   ebx
c000baad:	83 ec 08             	sub    esp,0x8
c000bab0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bab8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000babe:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bac4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bac6:	85 d2                	test   edx,edx
c000bac8:	74 04                	je     c000bace <Device::addChild(Device*)+0x22>
c000baca:	89 d3                	mov    ebx,edx
c000bacc:	eb f6                	jmp    c000bac4 <Device::addChild(Device*)+0x18>
c000bace:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bad1:	83 ec 0c             	sub    esp,0xc
c000bad4:	6a 08                	push   0x8
c000bad6:	e8 de bc ff ff       	call   c00077b9 <malloc>
c000badb:	89 03                	mov    DWORD PTR [ebx],eax
c000badd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bae3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baea:	83 c4 18             	add    esp,0x18
c000baed:	5b                   	pop    ebx
c000baee:	c3                   	ret    
c000baef:	90                   	nop

c000baf0 <Device::removeAllChildren()>:
c000baf0:	56                   	push   esi
c000baf1:	53                   	push   ebx
c000baf2:	52                   	push   edx
c000baf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000baf7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bafd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb00:	74 17                	je     c000bb19 <Device::removeAllChildren()+0x29>
c000bb02:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bb05:	85 c0                	test   eax,eax
c000bb07:	74 0c                	je     c000bb15 <Device::removeAllChildren()+0x25>
c000bb09:	83 ec 0c             	sub    esp,0xc
c000bb0c:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb0e:	50                   	push   eax
c000bb0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb17:	eb e4                	jmp    c000bafd <Device::removeAllChildren()+0xd>
c000bb19:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bb1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb25:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bb2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb32:	58                   	pop    eax
c000bb33:	5b                   	pop    ebx
c000bb34:	5e                   	pop    esi
c000bb35:	c3                   	ret    

c000bb36 <Device::hibernateAll()>:
c000bb36:	53                   	push   ebx
c000bb37:	83 ec 14             	sub    esp,0x14
c000bb3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb40:	53                   	push   ebx
c000bb41:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb50:	74 0f                	je     c000bb61 <Device::hibernateAll()+0x2b>
c000bb52:	83 ec 0c             	sub    esp,0xc
c000bb55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb58:	e8 d9 ff ff ff       	call   c000bb36 <Device::hibernateAll()>
c000bb5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb5f:	eb e9                	jmp    c000bb4a <Device::hibernateAll()+0x14>
c000bb61:	83 c4 08             	add    esp,0x8
c000bb64:	5b                   	pop    ebx
c000bb65:	c3                   	ret    

c000bb66 <Device::wakeAll()>:
c000bb66:	53                   	push   ebx
c000bb67:	83 ec 14             	sub    esp,0x14
c000bb6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb70:	53                   	push   ebx
c000bb71:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb74:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb7a:	83 c4 10             	add    esp,0x10
c000bb7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb80:	74 0f                	je     c000bb91 <Device::wakeAll()+0x2b>
c000bb82:	83 ec 0c             	sub    esp,0xc
c000bb85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb88:	e8 d9 ff ff ff       	call   c000bb66 <Device::wakeAll()>
c000bb8d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb8f:	eb e9                	jmp    c000bb7a <Device::wakeAll()+0x14>
c000bb91:	83 c4 08             	add    esp,0x8
c000bb94:	5b                   	pop    ebx
c000bb95:	c3                   	ret    

c000bb96 <Device::detectAll()>:
c000bb96:	53                   	push   ebx
c000bb97:	83 ec 14             	sub    esp,0x14
c000bb9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bba0:	53                   	push   ebx
c000bba1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bba4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbaa:	83 c4 10             	add    esp,0x10
c000bbad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbb0:	74 0f                	je     c000bbc1 <Device::detectAll()+0x2b>
c000bbb2:	83 ec 0c             	sub    esp,0xc
c000bbb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbb8:	e8 d9 ff ff ff       	call   c000bb96 <Device::detectAll()>
c000bbbd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbbf:	eb e9                	jmp    c000bbaa <Device::detectAll()+0x14>
c000bbc1:	83 c4 08             	add    esp,0x8
c000bbc4:	5b                   	pop    ebx
c000bbc5:	c3                   	ret    

c000bbc6 <Device::disableLegacyAll()>:
c000bbc6:	c3                   	ret    
c000bbc7:	90                   	nop

c000bbc8 <Device::loadDriversForAll()>:
c000bbc8:	c3                   	ret    
c000bbc9:	90                   	nop

c000bbca <Device::closeAll()>:
c000bbca:	53                   	push   ebx
c000bbcb:	83 ec 08             	sub    esp,0x8
c000bbce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbd4:	6a 00                	push   0x0
c000bbd6:	6a 00                	push   0x0
c000bbd8:	6a 00                	push   0x0
c000bbda:	53                   	push   ebx
c000bbdb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bbde:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbe4:	83 c4 10             	add    esp,0x10
c000bbe7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbea:	74 0f                	je     c000bbfb <Device::closeAll()+0x31>
c000bbec:	83 ec 0c             	sub    esp,0xc
c000bbef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbf2:	e8 d3 ff ff ff       	call   c000bbca <Device::closeAll()>
c000bbf7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbf9:	eb e9                	jmp    c000bbe4 <Device::closeAll()+0x1a>
c000bbfb:	83 c4 08             	add    esp,0x8
c000bbfe:	5b                   	pop    ebx
c000bbff:	c3                   	ret    

c000bc00 <Device::powerSavingAll(PowerSavingLevel)>:
c000bc00:	56                   	push   esi
c000bc01:	53                   	push   ebx
c000bc02:	83 ec 0c             	sub    esp,0xc
c000bc05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc09:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bc0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc0f:	56                   	push   esi
c000bc10:	53                   	push   ebx
c000bc11:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bc14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc1a:	83 c4 10             	add    esp,0x10
c000bc1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc20:	74 0f                	je     c000bc31 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bc22:	52                   	push   edx
c000bc23:	52                   	push   edx
c000bc24:	56                   	push   esi
c000bc25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc28:	e8 d3 ff ff ff       	call   c000bc00 <Device::powerSavingAll(PowerSavingLevel)>
c000bc2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc2f:	eb e9                	jmp    c000bc1a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bc31:	58                   	pop    eax
c000bc32:	5b                   	pop    ebx
c000bc33:	5e                   	pop    esi
c000bc34:	c3                   	ret    
c000bc35:	90                   	nop

c000bc36 <Device::setName(char const*)>:
c000bc36:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bc3e:	e9 bd 49 ff ff       	jmp    c0000600 <strcpy>
c000bc43:	90                   	nop

c000bc44 <Device::Device(char const*)>:
c000bc44:	83 ec 1c             	sub    esp,0x1c
c000bc47:	ba f0 e0 01 c0       	mov    edx,0xc001e0f0
c000bc4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc50:	89 10                	mov    DWORD PTR [eax],edx
c000bc52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc56:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bc60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc64:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc72:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc80:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc8a:	83 ec 08             	sub    esp,0x8
c000bc8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc95:	e8 9c ff ff ff       	call   c000bc36 <Device::setName(char const*)>
c000bc9a:	83 c4 10             	add    esp,0x10
c000bc9d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bca5:	83 ec 0c             	sub    esp,0xc
c000bca8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcac:	e8 08 bb ff ff       	call   c00077b9 <malloc>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bcba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bcc1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bcc5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bccf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bcd5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bcdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcdf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bce5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bcec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcf0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bcf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcfb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bd02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd06:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bd10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd14:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bd1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd22:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bd2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd30:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bd3a:	90                   	nop
c000bd3b:	83 c4 1c             	add    esp,0x1c
c000bd3e:	c3                   	ret    
c000bd3f:	90                   	nop

c000bd40 <Device::getName()>:
c000bd40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd44:	05 d0 00 00 00       	add    eax,0xd0
c000bd49:	c3                   	ret    

c000bd4a <DriverlessDevice::DriverlessDevice(char const*)>:
c000bd4a:	83 ec 0c             	sub    esp,0xc
c000bd4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd51:	83 ec 08             	sub    esp,0x8
c000bd54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd58:	50                   	push   eax
c000bd59:	e8 e6 fe ff ff       	call   c000bc44 <Device::Device(char const*)>
c000bd5e:	83 c4 10             	add    esp,0x10
c000bd61:	ba 1c e1 01 c0       	mov    edx,0xc001e11c
c000bd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd6a:	89 10                	mov    DWORD PTR [eax],edx
c000bd6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd70:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bd7a:	90                   	nop
c000bd7b:	83 c4 0c             	add    esp,0xc
c000bd7e:	c3                   	ret    
c000bd7f:	90                   	nop

c000bd80 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd80:	57                   	push   edi
c000bd81:	56                   	push   esi
c000bd82:	53                   	push   ebx
c000bd83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd8f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd95:	75 0c                	jne    c000bda3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd97:	52                   	push   edx
c000bd98:	52                   	push   edx
c000bd99:	53                   	push   ebx
c000bd9a:	56                   	push   esi
c000bd9b:	e8 52 09 01 00       	call   c001c6f2 <LinkedList<Device>::addElement(Device*)>
c000bda0:	83 c4 10             	add    esp,0x10
c000bda3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bda9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bdac:	74 12                	je     c000bdc0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bdae:	50                   	push   eax
c000bdaf:	57                   	push   edi
c000bdb0:	56                   	push   esi
c000bdb1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdb4:	e8 c7 ff ff ff       	call   c000bd80 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bdb9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bdbb:	83 c4 10             	add    esp,0x10
c000bdbe:	eb e9                	jmp    c000bda9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bdc0:	5b                   	pop    ebx
c000bdc1:	5e                   	pop    esi
c000bdc2:	5f                   	pop    edi
c000bdc3:	c3                   	ret    

c000bdc4 <getDevicesOfType(DeviceType)>:
c000bdc4:	53                   	push   ebx
c000bdc5:	83 ec 14             	sub    esp,0x14
c000bdc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdcc:	53                   	push   ebx
c000bdcd:	e8 fc 09 01 00       	call   c001c7ce <LinkedList<Device>::LinkedList()>
c000bdd2:	83 c4 0c             	add    esp,0xc
c000bdd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdd9:	53                   	push   ebx
c000bdda:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bde0:	e8 9b ff ff ff       	call   c000bd80 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bde5:	89 d8                	mov    eax,ebx
c000bde7:	83 c4 18             	add    esp,0x18
c000bdea:	5b                   	pop    ebx
c000bdeb:	c2 04 00             	ret    0x4
c000bdee:	66 90                	xchg   ax,ax

c000bdf0 <HardDiskController::HardDiskController(char const*)>:
c000bdf0:	83 ec 0c             	sub    esp,0xc
c000bdf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf7:	83 ec 08             	sub    esp,0x8
c000bdfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdfe:	50                   	push   eax
c000bdff:	e8 40 fe ff ff       	call   c000bc44 <Device::Device(char const*)>
c000be04:	83 c4 10             	add    esp,0x10
c000be07:	ba 48 e1 01 c0       	mov    edx,0xc001e148
c000be0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be10:	89 10                	mov    DWORD PTR [eax],edx
c000be12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be16:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000be20:	90                   	nop
c000be21:	83 c4 0c             	add    esp,0xc
c000be24:	c3                   	ret    
c000be25:	90                   	nop
c000be26:	66 90                	xchg   ax,ax

c000be28 <HardDiskController::~HardDiskController()>:
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	ba 48 e1 01 c0       	mov    edx,0xc001e148
c000be30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be34:	89 10                	mov    DWORD PTR [eax],edx
c000be36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3a:	83 ec 0c             	sub    esp,0xc
c000be3d:	50                   	push   eax
c000be3e:	e8 6b fb ff ff       	call   c000b9ae <Device::~Device()>
c000be43:	83 c4 10             	add    esp,0x10
c000be46:	90                   	nop
c000be47:	83 c4 0c             	add    esp,0xc
c000be4a:	c3                   	ret    
c000be4b:	90                   	nop

c000be4c <HardDiskController::~HardDiskController()>:
c000be4c:	83 ec 0c             	sub    esp,0xc
c000be4f:	83 ec 0c             	sub    esp,0xc
c000be52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be56:	e8 cd ff ff ff       	call   c000be28 <HardDiskController::~HardDiskController()>
c000be5b:	83 c4 10             	add    esp,0x10
c000be5e:	83 ec 08             	sub    esp,0x8
c000be61:	68 58 01 00 00       	push   0x158
c000be66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be6a:	e8 08 e7 ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000be6f:	83 c4 10             	add    esp,0x10
c000be72:	83 c4 0c             	add    esp,0xc
c000be75:	c3                   	ret    

c000be76 <PhysicalDisk::eject()>:
c000be76:	83 c8 ff             	or     eax,0xffffffff
c000be79:	c3                   	ret    

c000be7a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be7a:	83 ec 0c             	sub    esp,0xc
c000be7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be81:	83 ec 08             	sub    esp,0x8
c000be84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be88:	50                   	push   eax
c000be89:	e8 b6 fd ff ff       	call   c000bc44 <Device::Device(char const*)>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	ba 74 e1 01 c0       	mov    edx,0xc001e174
c000be96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be9a:	89 10                	mov    DWORD PTR [eax],edx
c000be9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000beb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bec4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bec8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bed2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bedc:	90                   	nop
c000bedd:	83 c4 0c             	add    esp,0xc
c000bee0:	c3                   	ret    
c000bee1:	90                   	nop

c000bee2 <PhysicalDisk::startCache()>:
c000bee2:	56                   	push   esi
c000bee3:	53                   	push   ebx
c000bee4:	83 ec 10             	sub    esp,0x10
c000bee7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000beeb:	6a 44                	push   0x44
c000beed:	e8 c7 b8 ff ff       	call   c00077b9 <malloc>
c000bef2:	89 c6                	mov    esi,eax
c000bef4:	58                   	pop    eax
c000bef5:	5a                   	pop    edx
c000bef6:	53                   	push   ebx
c000bef7:	56                   	push   esi
c000bef8:	e8 eb 15 00 00       	call   c000d4e8 <VCache::VCache(PhysicalDisk*)>
c000befd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bf03:	83 c4 14             	add    esp,0x14
c000bf06:	5b                   	pop    ebx
c000bf07:	5e                   	pop    esi
c000bf08:	c3                   	ret    
c000bf09:	90                   	nop

c000bf0a <PhysicalDisk::~PhysicalDisk()>:
c000bf0a:	83 ec 0c             	sub    esp,0xc
c000bf0d:	ba 74 e1 01 c0       	mov    edx,0xc001e174
c000bf12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf16:	89 10                	mov    DWORD PTR [eax],edx
c000bf18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf1c:	83 ec 0c             	sub    esp,0xc
c000bf1f:	50                   	push   eax
c000bf20:	e8 89 fa ff ff       	call   c000b9ae <Device::~Device()>
c000bf25:	83 c4 10             	add    esp,0x10
c000bf28:	90                   	nop
c000bf29:	83 c4 0c             	add    esp,0xc
c000bf2c:	c3                   	ret    
c000bf2d:	90                   	nop

c000bf2e <PhysicalDisk::~PhysicalDisk()>:
c000bf2e:	83 ec 0c             	sub    esp,0xc
c000bf31:	83 ec 0c             	sub    esp,0xc
c000bf34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf38:	e8 cd ff ff ff       	call   c000bf0a <PhysicalDisk::~PhysicalDisk()>
c000bf3d:	83 c4 10             	add    esp,0x10
c000bf40:	83 ec 08             	sub    esp,0x8
c000bf43:	68 6c 01 00 00       	push   0x16c
c000bf48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4c:	e8 26 e6 ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000bf51:	83 c4 10             	add    esp,0x10
c000bf54:	83 c4 0c             	add    esp,0xc
c000bf57:	c3                   	ret    

c000bf58 <int_handler>:
c000bf58:	55                   	push   ebp
c000bf59:	57                   	push   edi
c000bf5a:	56                   	push   esi
c000bf5b:	53                   	push   ebx
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bf63:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000bf6a:	74 0b                	je     c000bf77 <int_handler+0x1f>
c000bf6c:	fa                   	cli    
c000bf6d:	f4                   	hlt    
c000bf6e:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000bf75:	75 f5                	jne    c000bf6c <int_handler+0x14>
c000bf77:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf7a:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf7d:	83 f8 17             	cmp    eax,0x17
c000bf80:	76 3e                	jbe    c000bfc0 <int_handler+0x68>
c000bf82:	c1 e6 04             	shl    esi,0x4
c000bf85:	31 db                	xor    ebx,ebx
c000bf87:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000bf8d:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000bf93:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf97:	85 c0                	test   eax,eax
c000bf99:	74 13                	je     c000bfae <int_handler+0x56>
c000bf9b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf9e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bfa2:	74 2a                	je     c000bfce <int_handler+0x76>
c000bfa4:	83 ec 08             	sub    esp,0x8
c000bfa7:	52                   	push   edx
c000bfa8:	57                   	push   edi
c000bfa9:	ff d0                	call   eax
c000bfab:	83 c4 10             	add    esp,0x10
c000bfae:	43                   	inc    ebx
c000bfaf:	83 fb 04             	cmp    ebx,0x4
c000bfb2:	75 df                	jne    c000bf93 <int_handler+0x3b>
c000bfb4:	83 c4 0c             	add    esp,0xc
c000bfb7:	31 c0                	xor    eax,eax
c000bfb9:	5b                   	pop    ebx
c000bfba:	31 d2                	xor    edx,edx
c000bfbc:	5e                   	pop    esi
c000bfbd:	5f                   	pop    edi
c000bfbe:	5d                   	pop    ebp
c000bfbf:	c3                   	ret    
c000bfc0:	83 ec 0c             	sub    esp,0xc
c000bfc3:	50                   	push   eax
c000bfc4:	e8 0a 9a 00 00       	call   c00159d3 <HalEndOfInterrupt(int)>
c000bfc9:	83 c4 10             	add    esp,0x10
c000bfcc:	eb b4                	jmp    c000bf82 <int_handler+0x2a>
c000bfce:	83 ec 08             	sub    esp,0x8
c000bfd1:	52                   	push   edx
c000bfd2:	57                   	push   edi
c000bfd3:	ff d0                	call   eax
c000bfd5:	83 c4 10             	add    esp,0x10
c000bfd8:	83 c4 0c             	add    esp,0xc
c000bfdb:	5b                   	pop    ebx
c000bfdc:	5e                   	pop    esi
c000bfdd:	5f                   	pop    edi
c000bfde:	5d                   	pop    ebp
c000bfdf:	c3                   	ret    

c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bfe0:	56                   	push   esi
c000bfe1:	31 c0                	xor    eax,eax
c000bfe3:	53                   	push   ebx
c000bfe4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bfe8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bfec:	89 ca                	mov    edx,ecx
c000bfee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bff2:	c1 e2 04             	shl    edx,0x4
c000bff5:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000bffd:	74 15                	je     c000c014 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bfff:	40                   	inc    eax
c000c000:	83 f8 04             	cmp    eax,0x4
c000c003:	75 f0                	jne    c000bff5 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c005:	c7 44 24 0c a4 e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e1a4
c000c00d:	5b                   	pop    ebx
c000c00e:	5e                   	pop    esi
c000c00f:	e9 db 42 00 00       	jmp    c00102ef <KePanic(char const*)>
c000c014:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c017:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000c01e:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000c025:	5b                   	pop    ebx
c000c026:	5e                   	pop    esi
c000c027:	c3                   	ret    

c000c028 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c028:	57                   	push   edi
c000c029:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c02f:	56                   	push   esi
c000c030:	53                   	push   ebx
c000c031:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c035:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c039:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c040:	74 5b                	je     c000c09d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c042:	89 c7                	mov    edi,eax
c000c044:	84 c0                	test   al,al
c000c046:	74 24                	je     c000c06c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c048:	83 fe 0f             	cmp    esi,0xf
c000c04b:	0f 8f d9 00 00 00    	jg     c000c12a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c051:	8a 86 e0 f9 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0620]
c000c057:	25 ff 00 00 00       	and    eax,0xff
c000c05c:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000c064:	89 c6                	mov    esi,eax
c000c066:	66 d1 ef             	shr    di,1
c000c069:	83 e7 01             	and    edi,0x1
c000c06c:	83 ec 08             	sub    esp,0x8
c000c06f:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000c074:	31 db                	xor    ebx,ebx
c000c076:	50                   	push   eax
c000c077:	68 b1 e1 01 c0       	push   0xc001e1b1
c000c07c:	e8 ec e5 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000c089:	85 c0                	test   eax,eax
c000c08b:	7f 51                	jg     c000c0de <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c08d:	83 ec 0c             	sub    esp,0xc
c000c090:	68 c8 e1 01 c0       	push   0xc001e1c8
c000c095:	e8 55 42 00 00       	call   c00102ef <KePanic(char const*)>
c000c09a:	83 c4 10             	add    esp,0x10
c000c09d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c0a0:	31 d2                	xor    edx,edx
c000c0a2:	89 c8                	mov    eax,ecx
c000c0a4:	c1 e0 04             	shl    eax,0x4
c000c0a7:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000c0ae:	85 db                	test   ebx,ebx
c000c0b0:	0f 84 8b 00 00 00    	je     c000c141 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c0b6:	42                   	inc    edx
c000c0b7:	83 fa 04             	cmp    edx,0x4
c000c0ba:	75 eb                	jne    c000c0a7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c0bc:	83 ec 0c             	sub    esp,0xc
c000c0bf:	68 1c e2 01 c0       	push   0xc001e21c
c000c0c4:	e8 26 42 00 00       	call   c00102ef <KePanic(char const*)>
c000c0c9:	83 c4 10             	add    esp,0x10
c000c0cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c0d1:	5b                   	pop    ebx
c000c0d2:	5e                   	pop    esi
c000c0d3:	5f                   	pop    edi
c000c0d4:	c3                   	ret    
c000c0d5:	43                   	inc    ebx
c000c0d6:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000c0dc:	7e af                	jle    c000c08d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c0de:	83 ec 08             	sub    esp,0x8
c000c0e1:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c0e8:	56                   	push   esi
c000c0e9:	50                   	push   eax
c000c0ea:	e8 d1 f5 00 00       	call   c001b6c0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c0ef:	83 c4 10             	add    esp,0x10
c000c0f2:	84 c0                	test   al,al
c000c0f4:	74 df                	je     c000c0d5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c0f6:	81 e7 ff 00 00 00    	and    edi,0xff
c000c0fc:	50                   	push   eax
c000c0fd:	8d 46 20             	lea    eax,[esi+0x20]
c000c100:	57                   	push   edi
c000c101:	25 ff 00 00 00       	and    eax,0xff
c000c106:	6a 00                	push   0x0
c000c108:	50                   	push   eax
c000c109:	89 f0                	mov    eax,esi
c000c10b:	6a 00                	push   0x0
c000c10d:	25 ff 00 00 00       	and    eax,0xff
c000c112:	6a 00                	push   0x0
c000c114:	50                   	push   eax
c000c115:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c11c:	50                   	push   eax
c000c11d:	e8 18 f7 00 00       	call   c001b83a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c122:	83 c4 20             	add    esp,0x20
c000c125:	e9 73 ff ff ff       	jmp    c000c09d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c12a:	83 ec 0c             	sub    esp,0xc
c000c12d:	31 ff                	xor    edi,edi
c000c12f:	68 e4 e1 01 c0       	push   0xc001e1e4
c000c134:	e8 b6 41 00 00       	call   c00102ef <KePanic(char const*)>
c000c139:	83 c4 10             	add    esp,0x10
c000c13c:	e9 2b ff ff ff       	jmp    c000c06c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c141:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c144:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c148:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c14f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c153:	5b                   	pop    ebx
c000c154:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000c15b:	89 f0                	mov    eax,esi
c000c15d:	5e                   	pop    esi
c000c15e:	5f                   	pop    edi
c000c15f:	c3                   	ret    

c000c160 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c164:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c168:	c1 e0 04             	shl    eax,0x4
c000c16b:	8d 50 10             	lea    edx,[eax+0x10]
c000c16e:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c174:	74 08                	je     c000c17e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c176:	83 c0 04             	add    eax,0x4
c000c179:	39 d0                	cmp    eax,edx
c000c17b:	75 f1                	jne    c000c16e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c17d:	c3                   	ret    
c000c17e:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c188:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c192:	eb e2                	jmp    c000c176 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c194 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c194:	53                   	push   ebx
c000c195:	83 ec 08             	sub    esp,0x8
c000c198:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c19c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c1a1:	74 0e                	je     c000c1b1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c1a3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c1a8:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c1af:	75 37                	jne    c000c1e8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b5:	83 c0 20             	add    eax,0x20
c000c1b8:	c1 e0 04             	shl    eax,0x4
c000c1bb:	8d 50 10             	lea    edx,[eax+0x10]
c000c1be:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c1c4:	74 0c                	je     c000c1d2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c1c6:	83 c0 04             	add    eax,0x4
c000c1c9:	39 d0                	cmp    eax,edx
c000c1cb:	75 f1                	jne    c000c1be <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c1cd:	83 c4 08             	add    esp,0x8
c000c1d0:	5b                   	pop    ebx
c000c1d1:	c3                   	ret    
c000c1d2:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c1dc:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c1e6:	eb de                	jmp    c000c1c6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c1e8:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c1ed:	7f 12                	jg     c000c201 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c1ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1f3:	31 c0                	xor    eax,eax
c000c1f5:	8a 81 e0 f9 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0620]
c000c1fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1ff:	eb b0                	jmp    c000c1b1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c201:	83 ec 0c             	sub    esp,0xc
c000c204:	68 d5 e1 01 c0       	push   0xc001e1d5
c000c209:	e8 e1 40 00 00       	call   c00102ef <KePanic(char const*)>
c000c20e:	83 c4 10             	add    esp,0x10
c000c211:	eb 9e                	jmp    c000c1b1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c213 <setupINTS()>:
c000c213:	31 c0                	xor    eax,eax
c000c215:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c21f:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c229:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c233:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c23d:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c247:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c251:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c25b:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c265:	83 c0 10             	add    eax,0x10
c000c268:	3d 00 10 00 00       	cmp    eax,0x1000
c000c26d:	75 a6                	jne    c000c215 <setupINTS()+0x2>
c000c26f:	c3                   	ret    

c000c270 <convertLegacyIRQNumber(int)>:
c000c270:	83 ec 0c             	sub    esp,0xc
c000c273:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c284:	74 0f                	je     c000c295 <convertLegacyIRQNumber(int)+0x25>
c000c286:	83 f8 0f             	cmp    eax,0xf
c000c289:	7f 0e                	jg     c000c299 <convertLegacyIRQNumber(int)+0x29>
c000c28b:	31 c9                	xor    ecx,ecx
c000c28d:	8a 88 e0 f9 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0620]
c000c293:	89 c8                	mov    eax,ecx
c000c295:	83 c4 0c             	add    esp,0xc
c000c298:	c3                   	ret    
c000c299:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c29d:	83 ec 0c             	sub    esp,0xc
c000c2a0:	68 e4 e1 01 c0       	push   0xc001e1e4
c000c2a5:	e8 45 40 00 00       	call   c00102ef <KePanic(char const*)>
c000c2aa:	83 c4 10             	add    esp,0x10
c000c2ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2b1:	83 c4 0c             	add    esp,0xc
c000c2b4:	c3                   	ret    
c000c2b5:	90                   	nop

c000c2b6 <startGUI(void*)>:
c000c2b6:	55                   	push   ebp
c000c2b7:	89 e5                	mov    ebp,esp
c000c2b9:	53                   	push   ebx
c000c2ba:	83 ec 04             	sub    esp,0x4
c000c2bd:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2c2:	48                   	dec    eax
c000c2c3:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c2c8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2cd:	85 c0                	test   eax,eax
c000c2cf:	75 01                	jne    c000c2d2 <startGUI(void*)+0x1c>
c000c2d1:	fb                   	sti    
c000c2d2:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c2d8:	83 ec 08             	sub    esp,0x8
c000c2db:	6a 01                	push   0x1
c000c2dd:	68 41 e2 01 c0       	push   0xc001e241
c000c2e2:	e8 d2 6b 00 00       	call   c0012eb9 <Thr::loadDLL(char const*, bool)>
c000c2e7:	83 c4 10             	add    esp,0x10
c000c2ea:	83 ec 08             	sub    esp,0x8
c000c2ed:	53                   	push   ebx
c000c2ee:	50                   	push   eax
c000c2ef:	e8 f6 6d 00 00       	call   c00130ea <Thr::executeDLL(unsigned long, void*)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c2fd:	83 ec 08             	sub    esp,0x8
c000c300:	6a 01                	push   0x1
c000c302:	68 5b e2 01 c0       	push   0xc001e25b
c000c307:	e8 ad 6b 00 00       	call   c0012eb9 <Thr::loadDLL(char const*, bool)>
c000c30c:	83 c4 10             	add    esp,0x10
c000c30f:	83 ec 08             	sub    esp,0x8
c000c312:	53                   	push   ebx
c000c313:	50                   	push   eax
c000c314:	e8 d1 6d 00 00       	call   c00130ea <Thr::executeDLL(unsigned long, void*)>
c000c319:	83 c4 10             	add    esp,0x10
c000c31c:	90                   	nop
c000c31d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c320:	c9                   	leave  
c000c321:	c3                   	ret    

c000c322 <startGUIVESA(void*)>:
c000c322:	55                   	push   ebp
c000c323:	89 e5                	mov    ebp,esp
c000c325:	53                   	push   ebx
c000c326:	83 ec 04             	sub    esp,0x4
c000c329:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c32e:	48                   	dec    eax
c000c32f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c334:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c339:	85 c0                	test   eax,eax
c000c33b:	75 01                	jne    c000c33e <startGUIVESA(void*)+0x1c>
c000c33d:	fb                   	sti    
c000c33e:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c344:	83 ec 08             	sub    esp,0x8
c000c347:	6a 01                	push   0x1
c000c349:	68 79 e2 01 c0       	push   0xc001e279
c000c34e:	e8 66 6b 00 00       	call   c0012eb9 <Thr::loadDLL(char const*, bool)>
c000c353:	83 c4 10             	add    esp,0x10
c000c356:	83 ec 08             	sub    esp,0x8
c000c359:	53                   	push   ebx
c000c35a:	50                   	push   eax
c000c35b:	e8 8a 6d 00 00       	call   c00130ea <Thr::executeDLL(unsigned long, void*)>
c000c360:	83 c4 10             	add    esp,0x10
c000c363:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c369:	83 ec 08             	sub    esp,0x8
c000c36c:	6a 01                	push   0x1
c000c36e:	68 5b e2 01 c0       	push   0xc001e25b
c000c373:	e8 41 6b 00 00       	call   c0012eb9 <Thr::loadDLL(char const*, bool)>
c000c378:	83 c4 10             	add    esp,0x10
c000c37b:	83 ec 08             	sub    esp,0x8
c000c37e:	53                   	push   ebx
c000c37f:	50                   	push   eax
c000c380:	e8 65 6d 00 00       	call   c00130ea <Thr::executeDLL(unsigned long, void*)>
c000c385:	83 c4 10             	add    esp,0x10
c000c388:	90                   	nop
c000c389:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c38c:	c9                   	leave  
c000c38d:	c3                   	ret    

c000c38e <sendKeyToTerminal(unsigned char)>:
c000c38e:	55                   	push   ebp
c000c38f:	89 e5                	mov    ebp,esp
c000c391:	83 ec 28             	sub    esp,0x28
c000c394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c397:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c39a:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c3a0:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c3a3:	25 ff 00 00 00       	and    eax,0xff
c000c3a8:	83 ec 08             	sub    esp,0x8
c000c3ab:	50                   	push   eax
c000c3ac:	52                   	push   edx
c000c3ad:	e8 94 c6 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c3b2:	83 c4 10             	add    esp,0x10
c000c3b5:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c3b9:	74 0a                	je     c000c3c5 <sendKeyToTerminal(unsigned char)+0x37>
c000c3bb:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c3bf:	0f 85 8f 00 00 00    	jne    c000c454 <sendKeyToTerminal(unsigned char)+0xc6>
c000c3c5:	fa                   	cli    
c000c3c6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c3cb:	40                   	inc    eax
c000c3cc:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c3d1:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c3d6:	40                   	inc    eax
c000c3d7:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c3dc:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c3e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3e4:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c3ee:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c3f2:	74 1f                	je     c000c413 <sendKeyToTerminal(unsigned char)+0x85>
c000c3f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c3f7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c3fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c3fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c400:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c403:	83 ec 0c             	sub    esp,0xc
c000c406:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c409:	e8 9a 79 00 00       	call   c0013da8 <unblockTask(ThreadControlBlock*)>
c000c40e:	83 c4 10             	add    esp,0x10
c000c411:	eb db                	jmp    c000c3ee <sendKeyToTerminal(unsigned char)+0x60>
c000c413:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c418:	48                   	dec    eax
c000c419:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c41e:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c423:	85 c0                	test   eax,eax
c000c425:	75 18                	jne    c000c43f <sendKeyToTerminal(unsigned char)+0xb1>
c000c427:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c42c:	85 c0                	test   eax,eax
c000c42e:	74 0f                	je     c000c43f <sendKeyToTerminal(unsigned char)+0xb1>
c000c430:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c43a:	e8 a5 74 00 00       	call   c00138e4 <schedule()>
c000c43f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c444:	48                   	dec    eax
c000c445:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c44a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c44f:	85 c0                	test   eax,eax
c000c451:	75 01                	jne    c000c454 <sendKeyToTerminal(unsigned char)+0xc6>
c000c453:	fb                   	sti    
c000c454:	90                   	nop
c000c455:	c9                   	leave  
c000c456:	c3                   	ret    

c000c457 <sendKeyboardToken(KeyboardToken)>:
c000c457:	55                   	push   ebp
c000c458:	89 e5                	mov    ebp,esp
c000c45a:	83 ec 18             	sub    esp,0x18
c000c45d:	e8 dd 3e 00 00       	call   c001033f <Krnl::userIOReceived()>
c000c462:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c468:	25 ff ff 00 00       	and    eax,0xffff
c000c46d:	83 f2 01             	xor    edx,0x1
c000c470:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c476:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c47b:	85 c0                	test   eax,eax
c000c47d:	74 24                	je     c000c4a3 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c47f:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c485:	83 ec 04             	sub    esp,0x4
c000c488:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c48d:	83 ec 08             	sub    esp,0x8
c000c490:	89 e2                	mov    edx,esp
c000c492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c495:	89 02                	mov    DWORD PTR [edx],eax
c000c497:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c49a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c49e:	ff d1                	call   ecx
c000c4a0:	83 c4 10             	add    esp,0x10
c000c4a3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c4a7:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c4aa:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c4af:	38 c2                	cmp    dl,al
c000c4b1:	74 1e                	je     c000c4d1 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c4b3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c4b6:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c4bb:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c4c0:	25 ff 00 00 00       	and    eax,0xff
c000c4c5:	83 ec 0c             	sub    esp,0xc
c000c4c8:	50                   	push   eax
c000c4c9:	e8 ca bc ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c4ce:	83 c4 10             	add    esp,0x10
c000c4d1:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c4d4:	84 c0                	test   al,al
c000c4d6:	0f 84 ae 00 00 00    	je     c000c58a <sendKeyboardToken(KeyboardToken)+0x133>
c000c4dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4df:	66 3d 10 03          	cmp    ax,0x310
c000c4e3:	75 06                	jne    c000c4eb <sendKeyboardToken(KeyboardToken)+0x94>
c000c4e5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c4eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ee:	66 3d 11 03          	cmp    ax,0x311
c000c4f2:	75 06                	jne    c000c4fa <sendKeyboardToken(KeyboardToken)+0xa3>
c000c4f4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c4fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fd:	66 3d 12 03          	cmp    ax,0x312
c000c501:	75 06                	jne    c000c509 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c503:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c50c:	66 3d 13 03          	cmp    ax,0x313
c000c510:	75 06                	jne    c000c518 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c512:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51b:	66 3d 14 03          	cmp    ax,0x314
c000c51f:	75 06                	jne    c000c527 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c521:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52a:	66 3d 15 03          	cmp    ax,0x315
c000c52e:	75 06                	jne    c000c536 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c530:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c539:	66 3d 16 03          	cmp    ax,0x316
c000c53d:	75 06                	jne    c000c545 <sendKeyboardToken(KeyboardToken)+0xee>
c000c53f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c548:	66 3d 17 03          	cmp    ax,0x317
c000c54c:	75 06                	jne    c000c554 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c54e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c557:	66 3d 18 03          	cmp    ax,0x318
c000c55b:	75 06                	jne    c000c563 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c55d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c566:	66 3d 19 03          	cmp    ax,0x319
c000c56a:	75 06                	jne    c000c572 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c56c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c575:	66 3d 1a 03          	cmp    ax,0x31a
c000c579:	0f 85 c9 00 00 00    	jne    c000c648 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c57f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c585:	e9 be 00 00 00       	jmp    c000c648 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c58a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c58d:	66 3d 10 03          	cmp    ax,0x310
c000c591:	75 0a                	jne    c000c59d <sendKeyboardToken(KeyboardToken)+0x146>
c000c593:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c599:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a0:	66 3d 11 03          	cmp    ax,0x311
c000c5a4:	75 0a                	jne    c000c5b0 <sendKeyboardToken(KeyboardToken)+0x159>
c000c5a6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c5ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b3:	66 3d 12 03          	cmp    ax,0x312
c000c5b7:	75 0a                	jne    c000c5c3 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c5b9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c5bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c6:	66 3d 13 03          	cmp    ax,0x313
c000c5ca:	75 0a                	jne    c000c5d6 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c5cc:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c5d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d9:	66 3d 14 03          	cmp    ax,0x314
c000c5dd:	75 0a                	jne    c000c5e9 <sendKeyboardToken(KeyboardToken)+0x192>
c000c5df:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c5e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ec:	66 3d 15 03          	cmp    ax,0x315
c000c5f0:	75 0a                	jne    c000c5fc <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c5f2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c5f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ff:	66 3d 16 03          	cmp    ax,0x316
c000c603:	75 0a                	jne    c000c60f <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c605:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c60b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c612:	66 3d 17 03          	cmp    ax,0x317
c000c616:	75 0a                	jne    c000c622 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c618:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c61e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c625:	66 3d 18 03          	cmp    ax,0x318
c000c629:	75 0a                	jne    c000c635 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c62b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c631:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c638:	66 3d 19 03          	cmp    ax,0x319
c000c63c:	75 0a                	jne    c000c648 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c63e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c644:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c64b:	66 3d 00 02          	cmp    ax,0x200
c000c64f:	75 2c                	jne    c000c67d <sendKeyboardToken(KeyboardToken)+0x226>
c000c651:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c656:	83 f0 01             	xor    eax,0x1
c000c659:	84 c0                	test   al,al
c000c65b:	74 20                	je     c000c67d <sendKeyboardToken(KeyboardToken)+0x226>
c000c65d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c662:	6a 01                	push   0x1
c000c664:	6a 00                	push   0x0
c000c666:	68 b6 c2 00 c0       	push   0xc000c2b6
c000c66b:	50                   	push   eax
c000c66c:	e8 53 70 00 00       	call   c00136c4 <Process::createThread(void (*)(void*), void*, int)>
c000c671:	83 c4 10             	add    esp,0x10
c000c674:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c67b:	eb 33                	jmp    c000c6b0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c67d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c680:	66 3d 01 02          	cmp    ax,0x201
c000c684:	75 2a                	jne    c000c6b0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c686:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c68b:	83 f0 01             	xor    eax,0x1
c000c68e:	84 c0                	test   al,al
c000c690:	74 1e                	je     c000c6b0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c692:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c697:	6a 01                	push   0x1
c000c699:	6a 00                	push   0x0
c000c69b:	68 22 c3 00 c0       	push   0xc000c322
c000c6a0:	50                   	push   eax
c000c6a1:	e8 1e 70 00 00       	call   c00136c4 <Process::createThread(void (*)(void*), void*, int)>
c000c6a6:	83 c4 10             	add    esp,0x10
c000c6a9:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c6b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b3:	66 3d 1d 03          	cmp    ax,0x31d
c000c6b7:	75 06                	jne    c000c6bf <sendKeyboardToken(KeyboardToken)+0x268>
c000c6b9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c6bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c2:	66 3d 1c 03          	cmp    ax,0x31c
c000c6c6:	75 06                	jne    c000c6ce <sendKeyboardToken(KeyboardToken)+0x277>
c000c6c8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c6ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d1:	66 3d 1b 03          	cmp    ax,0x31b
c000c6d5:	75 06                	jne    c000c6dd <sendKeyboardToken(KeyboardToken)+0x286>
c000c6d7:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c6dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e0:	66 3d 1e 03          	cmp    ax,0x31e
c000c6e4:	75 06                	jne    c000c6ec <sendKeyboardToken(KeyboardToken)+0x295>
c000c6e6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c6ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ef:	66 3d 1f 03          	cmp    ax,0x31f
c000c6f3:	75 06                	jne    c000c6fb <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c6f5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c6fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6fe:	66 3d 1a 03          	cmp    ax,0x31a
c000c702:	75 06                	jne    c000c70a <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c704:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c70a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c70e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c711:	83 f0 01             	xor    eax,0x1
c000c714:	84 c0                	test   al,al
c000c716:	74 7b                	je     c000c793 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c718:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c71d:	84 c0                	test   al,al
c000c71f:	74 43                	je     c000c764 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c721:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c725:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c729:	74 2d                	je     c000c758 <sendKeyboardToken(KeyboardToken)+0x301>
c000c72b:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c731:	89 d0                	mov    eax,edx
c000c733:	c1 e0 02             	shl    eax,0x2
c000c736:	01 d0                	add    eax,edx
c000c738:	01 c0                	add    eax,eax
c000c73a:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c73f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c742:	25 ff ff 00 00       	and    eax,0xffff
c000c747:	8d 50 d0             	lea    edx,[eax-0x30]
c000c74a:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c74f:	01 d0                	add    eax,edx
c000c751:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c756:	eb 71                	jmp    c000c7c9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c758:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c762:	eb 65                	jmp    c000c7c9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c764:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c769:	85 c0                	test   eax,eax
c000c76b:	74 1a                	je     c000c787 <sendKeyboardToken(KeyboardToken)+0x330>
c000c76d:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c772:	25 ff 00 00 00       	and    eax,0xff
c000c777:	83 ec 0c             	sub    esp,0xc
c000c77a:	50                   	push   eax
c000c77b:	e8 0e fc ff ff       	call   c000c38e <sendKeyToTerminal(unsigned char)>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c787:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c791:	eb 36                	jmp    c000c7c9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c796:	66 3d 01 01          	cmp    ax,0x101
c000c79a:	75 2d                	jne    c000c7c9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c79c:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c7a1:	85 c0                	test   eax,eax
c000c7a3:	74 1a                	je     c000c7bf <sendKeyboardToken(KeyboardToken)+0x368>
c000c7a5:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c7aa:	25 ff 00 00 00       	and    eax,0xff
c000c7af:	83 ec 0c             	sub    esp,0xc
c000c7b2:	50                   	push   eax
c000c7b3:	e8 d6 fb ff ff       	call   c000c38e <sendKeyToTerminal(unsigned char)>
c000c7b8:	83 c4 10             	add    esp,0x10
c000c7bb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c7bf:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c7c9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7cc:	83 f0 01             	xor    eax,0x1
c000c7cf:	84 c0                	test   al,al
c000c7d1:	74 4e                	je     c000c821 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7d3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7d6:	83 f0 01             	xor    eax,0x1
c000c7d9:	84 c0                	test   al,al
c000c7db:	74 44                	je     c000c821 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7dd:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c7e2:	83 f0 01             	xor    eax,0x1
c000c7e5:	84 c0                	test   al,al
c000c7e7:	74 38                	je     c000c821 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ec:	66 83 f8 1f          	cmp    ax,0x1f
c000c7f0:	76 09                	jbe    c000c7fb <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c7f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f5:	66 83 f8 7e          	cmp    ax,0x7e
c000c7f9:	76 12                	jbe    c000c80d <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7fe:	66 83 f8 0a          	cmp    ax,0xa
c000c802:	74 09                	je     c000c80d <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c807:	66 83 f8 08          	cmp    ax,0x8
c000c80b:	75 14                	jne    c000c821 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c80d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c810:	25 ff 00 00 00       	and    eax,0xff
c000c815:	83 ec 0c             	sub    esp,0xc
c000c818:	50                   	push   eax
c000c819:	e8 70 fb ff ff       	call   c000c38e <sendKeyToTerminal(unsigned char)>
c000c81e:	83 c4 10             	add    esp,0x10
c000c821:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c824:	83 f0 01             	xor    eax,0x1
c000c827:	84 c0                	test   al,al
c000c829:	74 51                	je     c000c87c <sendKeyboardToken(KeyboardToken)+0x425>
c000c82b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c82e:	83 f0 01             	xor    eax,0x1
c000c831:	84 c0                	test   al,al
c000c833:	74 47                	je     c000c87c <sendKeyboardToken(KeyboardToken)+0x425>
c000c835:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c83a:	84 c0                	test   al,al
c000c83c:	74 3e                	je     c000c87c <sendKeyboardToken(KeyboardToken)+0x425>
c000c83e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c841:	66 83 f8 3f          	cmp    ax,0x3f
c000c845:	76 35                	jbe    c000c87c <sendKeyboardToken(KeyboardToken)+0x425>
c000c847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c84a:	66 83 f8 7f          	cmp    ax,0x7f
c000c84e:	77 2c                	ja     c000c87c <sendKeyboardToken(KeyboardToken)+0x425>
c000c850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c853:	88 c2                	mov    dl,al
c000c855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c858:	66 83 f8 5f          	cmp    ax,0x5f
c000c85c:	76 04                	jbe    c000c862 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c85e:	b0 20                	mov    al,0x20
c000c860:	eb 02                	jmp    c000c864 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c862:	b0 00                	mov    al,0x0
c000c864:	29 c2                	sub    edx,eax
c000c866:	88 d0                	mov    al,dl
c000c868:	83 e8 40             	sub    eax,0x40
c000c86b:	25 ff 00 00 00       	and    eax,0xff
c000c870:	83 ec 0c             	sub    esp,0xc
c000c873:	50                   	push   eax
c000c874:	e8 15 fb ff ff       	call   c000c38e <sendKeyToTerminal(unsigned char)>
c000c879:	83 c4 10             	add    esp,0x10
c000c87c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c87f:	66 3d 00 03          	cmp    ax,0x300
c000c883:	75 0f                	jne    c000c894 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c885:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c888:	83 f0 01             	xor    eax,0x1
c000c88b:	84 c0                	test   al,al
c000c88d:	74 05                	je     c000c894 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c88f:	e8 05 b9 ff ff       	call   c0008199 <doTerminalCycle()>
c000c894:	90                   	nop
c000c895:	c9                   	leave  
c000c896:	c3                   	ret    

c000c897 <clearInternalKeybuffer(VgaText*)>:
c000c897:	55                   	push   ebp
c000c898:	89 e5                	mov    ebp,esp
c000c89a:	83 ec 08             	sub    esp,0x8
c000c89d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a0:	05 b2 00 00 00       	add    eax,0xb2
c000c8a5:	83 ec 0c             	sub    esp,0xc
c000c8a8:	50                   	push   eax
c000c8a9:	e8 92 3c ff ff       	call   c0000540 <strlen>
c000c8ae:	83 c4 10             	add    esp,0x10
c000c8b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8b4:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c8ba:	83 ec 04             	sub    esp,0x4
c000c8bd:	50                   	push   eax
c000c8be:	6a 00                	push   0x0
c000c8c0:	52                   	push   edx
c000c8c1:	e8 0a 3c ff ff       	call   c00004d0 <memset>
c000c8c6:	83 c4 10             	add    esp,0x10
c000c8c9:	90                   	nop
c000c8ca:	c9                   	leave  
c000c8cb:	c3                   	ret    

c000c8cc <readKeyboard(VgaText*, char*, unsigned long)>:
c000c8cc:	55                   	push   ebp
c000c8cd:	89 e5                	mov    ebp,esp
c000c8cf:	83 ec 18             	sub    esp,0x18
c000c8d2:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c8d7:	85 c0                	test   eax,eax
c000c8d9:	74 2a                	je     c000c905 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c8db:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c8e1:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c8e7:	83 ec 04             	sub    esp,0x4
c000c8ea:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c8ef:	83 ec 08             	sub    esp,0x8
c000c8f2:	89 e2                	mov    edx,esp
c000c8f4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c8f7:	89 02                	mov    DWORD PTR [edx],eax
c000c8f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c8fc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c900:	ff d1                	call   ecx
c000c902:	83 c4 10             	add    esp,0x10
c000c905:	fb                   	sti    
c000c906:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c90d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c911:	0f 84 db 00 00 00    	je     c000c9f2 <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c91a:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c920:	84 c0                	test   al,al
c000c922:	75 28                	jne    c000c94c <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c924:	fa                   	cli    
c000c925:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c92a:	40                   	inc    eax
c000c92b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c930:	e8 af 6f 00 00       	call   c00138e4 <schedule()>
c000c935:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c93a:	48                   	dec    eax
c000c93b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c940:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c945:	85 c0                	test   eax,eax
c000c947:	75 ce                	jne    c000c917 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c949:	fb                   	sti    
c000c94a:	eb cb                	jmp    c000c917 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c94c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c94f:	8d 50 01             	lea    edx,[eax+0x1]
c000c952:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c955:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c958:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c95e:	88 10                	mov    BYTE PTR [eax],dl
c000c960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c963:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c969:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c96c:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c970:	75 2e                	jne    c000c9a0 <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c972:	83 ec 0c             	sub    esp,0xc
c000c975:	68 94 e2 01 c0       	push   0xc001e294
c000c97a:	e8 ee dc ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000c97f:	83 c4 10             	add    esp,0x10
c000c982:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c987:	8b 00                	mov    eax,DWORD PTR [eax]
c000c989:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c98c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c992:	83 ec 08             	sub    esp,0x8
c000c995:	6a 02                	push   0x2
c000c997:	50                   	push   eax
c000c998:	e8 3e 3d 00 00       	call   c00106db <KeRaiseSignal(SigHandlerBlock*, int)>
c000c99d:	83 c4 10             	add    esp,0x10
c000c9a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a3:	05 b2 00 00 00       	add    eax,0xb2
c000c9a8:	83 ec 0c             	sub    esp,0xc
c000c9ab:	50                   	push   eax
c000c9ac:	e8 8f 3b ff ff       	call   c0000540 <strlen>
c000c9b1:	83 c4 10             	add    esp,0x10
c000c9b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c9b7:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c9bd:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c9c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c9c3:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c9c9:	83 ec 04             	sub    esp,0x4
c000c9cc:	50                   	push   eax
c000c9cd:	51                   	push   ecx
c000c9ce:	52                   	push   edx
c000c9cf:	e8 0c 3a ff ff       	call   c00003e0 <memmove>
c000c9d4:	83 c4 10             	add    esp,0x10
c000c9d7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c9da:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c9dd:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c9e1:	74 0a                	je     c000c9ed <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c9e3:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c9e7:	0f 85 20 ff ff ff    	jne    c000c90d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c9ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9f0:	eb 03                	jmp    c000c9f5 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c9f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9f5:	c9                   	leave  
c000c9f6:	c3                   	ret    
c000c9f7:	90                   	nop

c000c9f8 <Keyboard::Keyboard(char const*)>:
c000c9f8:	83 ec 0c             	sub    esp,0xc
c000c9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ff:	83 ec 08             	sub    esp,0x8
c000ca02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca06:	50                   	push   eax
c000ca07:	e8 38 f2 ff ff       	call   c000bc44 <Device::Device(char const*)>
c000ca0c:	83 c4 10             	add    esp,0x10
c000ca0f:	ba ac e2 01 c0       	mov    edx,0xc001e2ac
c000ca14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca18:	89 10                	mov    DWORD PTR [eax],edx
c000ca1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ca28:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000ca2f:	90                   	nop
c000ca30:	83 c4 0c             	add    esp,0xc
c000ca33:	c3                   	ret    

c000ca34 <Keyboard::~Keyboard()>:
c000ca34:	83 ec 0c             	sub    esp,0xc
c000ca37:	ba ac e2 01 c0       	mov    edx,0xc001e2ac
c000ca3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca40:	89 10                	mov    DWORD PTR [eax],edx
c000ca42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca46:	83 ec 0c             	sub    esp,0xc
c000ca49:	50                   	push   eax
c000ca4a:	e8 5f ef ff ff       	call   c000b9ae <Device::~Device()>
c000ca4f:	83 c4 10             	add    esp,0x10
c000ca52:	90                   	nop
c000ca53:	83 c4 0c             	add    esp,0xc
c000ca56:	c3                   	ret    
c000ca57:	90                   	nop

c000ca58 <Keyboard::~Keyboard()>:
c000ca58:	83 ec 0c             	sub    esp,0xc
c000ca5b:	83 ec 0c             	sub    esp,0xc
c000ca5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca62:	e8 cd ff ff ff       	call   c000ca34 <Keyboard::~Keyboard()>
c000ca67:	83 c4 10             	add    esp,0x10
c000ca6a:	83 ec 08             	sub    esp,0x8
c000ca6d:	68 5c 01 00 00       	push   0x15c
c000ca72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca76:	e8 fc da ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000ca7b:	83 c4 10             	add    esp,0x10
c000ca7e:	83 c4 0c             	add    esp,0xc
c000ca81:	c3                   	ret    

c000ca82 <LogicalDisk::close(int, int, void*)>:
c000ca82:	83 c8 ff             	or     eax,0xffffffff
c000ca85:	c3                   	ret    

c000ca86 <LogicalDisk::~LogicalDisk()>:
c000ca86:	83 ec 0c             	sub    esp,0xc
c000ca89:	ba 24 e3 01 c0       	mov    edx,0xc001e324
c000ca8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca92:	89 10                	mov    DWORD PTR [eax],edx
c000ca94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca98:	83 ec 0c             	sub    esp,0xc
c000ca9b:	50                   	push   eax
c000ca9c:	e8 0d ef ff ff       	call   c000b9ae <Device::~Device()>
c000caa1:	83 c4 10             	add    esp,0x10
c000caa4:	90                   	nop
c000caa5:	83 c4 0c             	add    esp,0xc
c000caa8:	c3                   	ret    
c000caa9:	90                   	nop

c000caaa <LogicalDisk::~LogicalDisk()>:
c000caaa:	83 ec 0c             	sub    esp,0xc
c000caad:	83 ec 0c             	sub    esp,0xc
c000cab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab4:	e8 cd ff ff ff       	call   c000ca86 <LogicalDisk::~LogicalDisk()>
c000cab9:	83 c4 10             	add    esp,0x10
c000cabc:	83 ec 08             	sub    esp,0x8
c000cabf:	68 74 01 00 00       	push   0x174
c000cac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac8:	e8 aa da ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	83 c4 0c             	add    esp,0xc
c000cad3:	c3                   	ret    

c000cad4 <LogicalDisk::open(int, int, void*)>:
c000cad4:	83 ec 18             	sub    esp,0x18
c000cad7:	68 d8 e2 01 c0       	push   0xc001e2d8
c000cadc:	e8 0e 38 00 00       	call   c00102ef <KePanic(char const*)>
c000cae1:	83 c8 ff             	or     eax,0xffffffff
c000cae4:	83 c4 1c             	add    esp,0x1c
c000cae7:	c3                   	ret    

c000cae8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cae8:	53                   	push   ebx
c000cae9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000caed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000caf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000caf5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cafb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cb01:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cb07:	77 10                	ja     c000cb19 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cb09:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cb0f:	89 d3                	mov    ebx,edx
c000cb11:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cb17:	72 05                	jb     c000cb1e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cb19:	83 c8 ff             	or     eax,0xffffffff
c000cb1c:	89 c2                	mov    edx,eax
c000cb1e:	5b                   	pop    ebx
c000cb1f:	c3                   	ret    

c000cb20 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cb20:	56                   	push   esi
c000cb21:	83 c8 ff             	or     eax,0xffffffff
c000cb24:	53                   	push   ebx
c000cb25:	89 c2                	mov    edx,eax
c000cb27:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cb2b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cb2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cb33:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cb39:	77 27                	ja     c000cb62 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cb3b:	89 d8                	mov    eax,ebx
c000cb3d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cb43:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cb49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cb4e:	89 c2                	mov    edx,eax
c000cb50:	73 10                	jae    c000cb62 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cb52:	89 c8                	mov    eax,ecx
c000cb54:	89 da                	mov    edx,ebx
c000cb56:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cb5c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cb62:	5b                   	pop    ebx
c000cb63:	5e                   	pop    esi
c000cb64:	c3                   	ret    
c000cb65:	90                   	nop

c000cb66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cb66:	83 ec 1c             	sub    esp,0x1c
c000cb69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb8c:	83 ec 08             	sub    esp,0x8
c000cb8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb93:	50                   	push   eax
c000cb94:	e8 ab f0 ff ff       	call   c000bc44 <Device::Device(char const*)>
c000cb99:	83 c4 10             	add    esp,0x10
c000cb9c:	ba 24 e3 01 c0       	mov    edx,0xc001e324
c000cba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba5:	89 10                	mov    DWORD PTR [eax],edx
c000cba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbab:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cbcb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cbcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbd7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cbdd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cbe3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cbe7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cbea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbee:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cbf4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cbfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc02:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cc16:	90                   	nop
c000cc17:	83 c4 1c             	add    esp,0x1c
c000cc1a:	c3                   	ret    
c000cc1b:	90                   	nop

c000cc1c <LogicalDisk::assignDriveLetter()>:
c000cc1c:	55                   	push   ebp
c000cc1d:	57                   	push   edi
c000cc1e:	56                   	push   esi
c000cc1f:	53                   	push   ebx
c000cc20:	83 ec 14             	sub    esp,0x14
c000cc23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cc27:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000cc2d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cc33:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cc37:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cc3d:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cc43:	3c 01                	cmp    al,0x1
c000cc45:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cc49:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cc4d:	19 c0                	sbb    eax,eax
c000cc4f:	83 e0 02             	and    eax,0x2
c000cc52:	83 c0 41             	add    eax,0x41
c000cc55:	0f be e8             	movsx  ebp,al
c000cc58:	3c 43                	cmp    al,0x43
c000cc5a:	75 10                	jne    c000cc6c <LogicalDisk::assignDriveLetter()+0x50>
c000cc5c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cc63:	75 5d                	jne    c000ccc2 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc65:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc6a:	75 56                	jne    c000ccc2 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc6c:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc6f:	ba 01 00 00 00       	mov    edx,0x1
c000cc74:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc78:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc7c:	d3 e2                	shl    edx,cl
c000cc7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc82:	89 d7                	mov    edi,edx
c000cc84:	89 d6                	mov    esi,edx
c000cc86:	c1 ff 1f             	sar    edi,0x1f
c000cc89:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc8d:	21 f9                	and    ecx,edi
c000cc8f:	09 d1                	or     ecx,edx
c000cc91:	75 2f                	jne    c000ccc2 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc93:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc9b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cca1:	09 f2                	or     edx,esi
c000cca3:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cca9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccad:	09 fa                	or     edx,edi
c000ccaf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ccb3:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000ccb9:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000ccc0:	eb 08                	jmp    c000ccca <LogicalDisk::assignDriveLetter()+0xae>
c000ccc2:	45                   	inc    ebp
c000ccc3:	40                   	inc    eax
c000ccc4:	3c 5b                	cmp    al,0x5b
c000ccc6:	75 90                	jne    c000cc58 <LogicalDisk::assignDriveLetter()+0x3c>
c000ccc8:	31 c0                	xor    eax,eax
c000ccca:	83 c4 14             	add    esp,0x14
c000cccd:	5b                   	pop    ebx
c000ccce:	5e                   	pop    esi
c000cccf:	5f                   	pop    edi
c000ccd0:	5d                   	pop    ebp
c000ccd1:	c3                   	ret    

c000ccd2 <LogicalDisk::mount()>:
c000ccd2:	56                   	push   esi
c000ccd3:	53                   	push   ebx
c000ccd4:	53                   	push   ebx
c000ccd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccd9:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000ccdf:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cce9:	85 db                	test   ebx,ebx
c000cceb:	74 27                	je     c000cd14 <LogicalDisk::mount()+0x42>
c000cced:	51                   	push   ecx
c000ccee:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ccf5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ccf7:	83 e8 41             	sub    eax,0x41
c000ccfa:	50                   	push   eax
c000ccfb:	56                   	push   esi
c000ccfc:	53                   	push   ebx
c000ccfd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cd00:	83 c4 10             	add    esp,0x10
c000cd03:	84 c0                	test   al,al
c000cd05:	74 08                	je     c000cd0f <LogicalDisk::mount()+0x3d>
c000cd07:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cd0d:	eb 07                	jmp    c000cd16 <LogicalDisk::mount()+0x44>
c000cd0f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cd12:	eb d5                	jmp    c000cce9 <LogicalDisk::mount()+0x17>
c000cd14:	31 c0                	xor    eax,eax
c000cd16:	5a                   	pop    edx
c000cd17:	5b                   	pop    ebx
c000cd18:	5e                   	pop    esi
c000cd19:	c3                   	ret    

c000cd1a <LogicalDisk::unmount()>:
c000cd1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd1e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cd28:	c3                   	ret    
c000cd29:	90                   	nop

c000cd2a <LogicalDisk::eject()>:
c000cd2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd2e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cd34:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd3a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cd3d:	90                   	nop

c000cd3e <LogicalDisk::unassignDriveLetter()>:
c000cd3e:	57                   	push   edi
c000cd3f:	56                   	push   esi
c000cd40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd44:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cd4b:	84 c9                	test   cl,cl
c000cd4d:	75 0f                	jne    c000cd5e <LogicalDisk::unassignDriveLetter()+0x20>
c000cd4f:	c7 44 24 0c fc e2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e2fc
c000cd57:	5e                   	pop    esi
c000cd58:	5f                   	pop    edi
c000cd59:	e9 91 35 00 00       	jmp    c00102ef <KePanic(char const*)>
c000cd5e:	83 e9 41             	sub    ecx,0x41
c000cd61:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd68:	b8 01 00 00 00       	mov    eax,0x1
c000cd6d:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cd78:	d3 e0                	shl    eax,cl
c000cd7a:	89 c7                	mov    edi,eax
c000cd7c:	f7 d0                	not    eax
c000cd7e:	c1 ff 1f             	sar    edi,0x1f
c000cd81:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cd87:	89 fe                	mov    esi,edi
c000cd89:	f7 d6                	not    esi
c000cd8b:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cd91:	5e                   	pop    esi
c000cd92:	5f                   	pop    edi
c000cd93:	c3                   	ret    

c000cd94 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd94:	57                   	push   edi
c000cd95:	56                   	push   esi
c000cd96:	53                   	push   ebx
c000cd97:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd9f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cda3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cda7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdad:	77 41                	ja     c000cdf0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cdaf:	99                   	cdq    
c000cdb0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdb6:	01 c8                	add    eax,ecx
c000cdb8:	11 da                	adc    edx,ebx
c000cdba:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdc0:	19 d7                	sbb    edi,edx
c000cdc2:	72 33                	jb     c000cdf7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cdc4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdca:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdd0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdd4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdd8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cdde:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cde4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cde8:	5b                   	pop    ebx
c000cde9:	5e                   	pop    esi
c000cdea:	5f                   	pop    edi
c000cdeb:	e9 4e 0a 00 00       	jmp    c000d83e <VCache::read(unsigned long long, int, void*)>
c000cdf0:	b8 05 00 00 00       	mov    eax,0x5
c000cdf5:	eb 05                	jmp    c000cdfc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cdf7:	b8 07 00 00 00       	mov    eax,0x7
c000cdfc:	5b                   	pop    ebx
c000cdfd:	5e                   	pop    esi
c000cdfe:	5f                   	pop    edi
c000cdff:	c3                   	ret    

c000ce00 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ce00:	57                   	push   edi
c000ce01:	56                   	push   esi
c000ce02:	53                   	push   ebx
c000ce03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ce0b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ce0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ce13:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ce19:	77 41                	ja     c000ce5c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ce1b:	99                   	cdq    
c000ce1c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ce22:	01 c8                	add    eax,ecx
c000ce24:	11 da                	adc    edx,ebx
c000ce26:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ce2c:	19 d7                	sbb    edi,edx
c000ce2e:	72 33                	jb     c000ce63 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ce30:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ce36:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ce3c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ce40:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ce44:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ce4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce54:	5b                   	pop    ebx
c000ce55:	5e                   	pop    esi
c000ce56:	5f                   	pop    edi
c000ce57:	e9 cc 08 00 00       	jmp    c000d728 <VCache::write(unsigned long long, int, void*)>
c000ce5c:	b8 05 00 00 00       	mov    eax,0x5
c000ce61:	eb 05                	jmp    c000ce68 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ce63:	b8 07 00 00 00       	mov    eax,0x7
c000ce68:	5b                   	pop    ebx
c000ce69:	5e                   	pop    esi
c000ce6a:	5f                   	pop    edi
c000ce6b:	c3                   	ret    

c000ce6c <Mouse::Mouse(char const*)>:
c000ce6c:	83 ec 0c             	sub    esp,0xc
c000ce6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce73:	83 ec 08             	sub    esp,0x8
c000ce76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7a:	50                   	push   eax
c000ce7b:	e8 c4 ed ff ff       	call   c000bc44 <Device::Device(char const*)>
c000ce80:	83 c4 10             	add    esp,0x10
c000ce83:	ba 50 e3 01 c0       	mov    edx,0xc001e350
c000ce88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8c:	89 10                	mov    DWORD PTR [eax],edx
c000ce8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce92:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce9c:	90                   	nop
c000ce9d:	83 c4 0c             	add    esp,0xc
c000cea0:	c3                   	ret    
c000cea1:	90                   	nop
c000cea2:	66 90                	xchg   ax,ax

c000cea4 <Mouse::~Mouse()>:
c000cea4:	83 ec 0c             	sub    esp,0xc
c000cea7:	ba 50 e3 01 c0       	mov    edx,0xc001e350
c000ceac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb0:	89 10                	mov    DWORD PTR [eax],edx
c000ceb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb6:	83 ec 0c             	sub    esp,0xc
c000ceb9:	50                   	push   eax
c000ceba:	e8 ef ea ff ff       	call   c000b9ae <Device::~Device()>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	90                   	nop
c000cec3:	83 c4 0c             	add    esp,0xc
c000cec6:	c3                   	ret    
c000cec7:	90                   	nop

c000cec8 <Mouse::~Mouse()>:
c000cec8:	83 ec 0c             	sub    esp,0xc
c000cecb:	83 ec 0c             	sub    esp,0xc
c000cece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced2:	e8 cd ff ff ff       	call   c000cea4 <Mouse::~Mouse()>
c000ced7:	83 c4 10             	add    esp,0x10
c000ceda:	83 ec 08             	sub    esp,0x8
c000cedd:	68 58 01 00 00       	push   0x158
c000cee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee6:	e8 8c d6 ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000ceeb:	83 c4 10             	add    esp,0x10
c000ceee:	83 c4 0c             	add    esp,0xc
c000cef1:	c3                   	ret    

c000cef2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cef2:	55                   	push   ebp
c000cef3:	57                   	push   edi
c000cef4:	56                   	push   esi
c000cef5:	53                   	push   ebx
c000cef6:	81 ec 28 01 00 00    	sub    esp,0x128
c000cefc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cf03:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cf0a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cf11:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cf18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf1c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf20:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf27:	e8 14 ee ff ff       	call   c000bd40 <Device::getName()>
c000cf2c:	5a                   	pop    edx
c000cf2d:	59                   	pop    ecx
c000cf2e:	50                   	push   eax
c000cf2f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cf33:	55                   	push   ebp
c000cf34:	e8 c7 36 ff ff       	call   c0000600 <strcpy>
c000cf39:	5b                   	pop    ebx
c000cf3a:	58                   	pop    eax
c000cf3b:	68 74 e3 01 c0       	push   0xc001e374
c000cf40:	55                   	push   ebp
c000cf41:	e8 7a 38 ff ff       	call   c00007c0 <strcat>
c000cf46:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cf4d:	e8 67 a8 ff ff       	call   c00077b9 <malloc>
c000cf52:	83 c4 0c             	add    esp,0xc
c000cf55:	89 c3                	mov    ebx,eax
c000cf57:	57                   	push   edi
c000cf58:	56                   	push   esi
c000cf59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf61:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cf68:	55                   	push   ebp
c000cf69:	50                   	push   eax
c000cf6a:	e8 f7 fb ff ff       	call   c000cb66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf6f:	83 c4 14             	add    esp,0x14
c000cf72:	53                   	push   ebx
c000cf73:	e8 a4 fc ff ff       	call   c000cc1c <LogicalDisk::assignDriveLetter()>
c000cf78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf7b:	e8 52 fd ff ff       	call   c000ccd2 <LogicalDisk::mount()>
c000cf80:	58                   	pop    eax
c000cf81:	5a                   	pop    edx
c000cf82:	53                   	push   ebx
c000cf83:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf8a:	e8 1d eb ff ff       	call   c000baac <Device::addChild(Device*)>
c000cf8f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cf95:	5b                   	pop    ebx
c000cf96:	5e                   	pop    esi
c000cf97:	5f                   	pop    edi
c000cf98:	5d                   	pop    ebp
c000cf99:	c3                   	ret    

c000cf9a <createPartitionsForDisk(PhysicalDisk*)>:
c000cf9a:	55                   	push   ebp
c000cf9b:	57                   	push   edi
c000cf9c:	56                   	push   esi
c000cf9d:	53                   	push   ebx
c000cf9e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cfa4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cfab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cfb1:	3d 00 02 00 00       	cmp    eax,0x200
c000cfb6:	74 27                	je     c000cfdf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cfb8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cfbe:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cfc4:	83 ec 10             	sub    esp,0x10
c000cfc7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cfcb:	99                   	cdq    
c000cfcc:	c1 e6 0a             	shl    esi,0xa
c000cfcf:	52                   	push   edx
c000cfd0:	89 fd                	mov    ebp,edi
c000cfd2:	50                   	push   eax
c000cfd3:	55                   	push   ebp
c000cfd4:	56                   	push   esi
c000cfd5:	e8 66 f2 00 00       	call   c001c240 <__udivdi3>
c000cfda:	e9 b1 00 00 00       	jmp    c000d090 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cfdf:	83 ec 0c             	sub    esp,0xc
c000cfe2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cfe4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cfe8:	56                   	push   esi
c000cfe9:	6a 01                	push   0x1
c000cfeb:	6a 00                	push   0x0
c000cfed:	6a 00                	push   0x0
c000cfef:	53                   	push   ebx
c000cff0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cff3:	83 c4 20             	add    esp,0x20
c000cff6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cffe:	75 0a                	jne    c000d00a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d000:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d008:	74 2c                	je     c000d036 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d00a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d010:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d016:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d01c:	83 ec 10             	sub    esp,0x10
c000d01f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d023:	89 f7                	mov    edi,esi
c000d025:	c1 e0 0a             	shl    eax,0xa
c000d028:	c1 ff 1f             	sar    edi,0x1f
c000d02b:	57                   	push   edi
c000d02c:	56                   	push   esi
c000d02d:	52                   	push   edx
c000d02e:	50                   	push   eax
c000d02f:	e8 0c f2 00 00       	call   c001c240 <__udivdi3>
c000d034:	eb 5a                	jmp    c000d090 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d036:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d03d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d044:	83 e1 7f             	and    ecx,0x7f
c000d047:	83 e0 7f             	and    eax,0x7f
c000d04a:	01 c1                	add    ecx,eax
c000d04c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d053:	83 e0 7f             	and    eax,0x7f
c000d056:	01 c1                	add    ecx,eax
c000d058:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d05f:	83 e0 7f             	and    eax,0x7f
c000d062:	00 c1                	add    cl,al
c000d064:	74 41                	je     c000d0a7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d066:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d06c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d072:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d078:	83 ec 10             	sub    esp,0x10
c000d07b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d07f:	89 f7                	mov    edi,esi
c000d081:	c1 e0 0a             	shl    eax,0xa
c000d084:	c1 ff 1f             	sar    edi,0x1f
c000d087:	57                   	push   edi
c000d088:	56                   	push   esi
c000d089:	52                   	push   edx
c000d08a:	50                   	push   eax
c000d08b:	e8 b0 f1 00 00       	call   c001c240 <__udivdi3>
c000d090:	83 c4 14             	add    esp,0x14
c000d093:	52                   	push   edx
c000d094:	50                   	push   eax
c000d095:	6a 00                	push   0x0
c000d097:	6a 00                	push   0x0
c000d099:	53                   	push   ebx
c000d09a:	e8 53 fe ff ff       	call   c000cef2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d09f:	83 c4 20             	add    esp,0x20
c000d0a2:	e9 79 01 00 00       	jmp    c000d220 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d0a7:	89 f0                	mov    eax,esi
c000d0a9:	31 f6                	xor    esi,esi
c000d0ab:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d0b2:	75 02                	jne    c000d0b6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d0b4:	89 f1                	mov    ecx,esi
c000d0b6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d0bd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d0c4:	c1 e2 08             	shl    edx,0x8
c000d0c7:	c1 e7 10             	shl    edi,0x10
c000d0ca:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d0d2:	09 fa                	or     edx,edi
c000d0d4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d0dc:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d0e3:	83 c0 10             	add    eax,0x10
c000d0e6:	09 fa                	or     edx,edi
c000d0e8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d0ef:	c1 e7 18             	shl    edi,0x18
c000d0f2:	09 fa                	or     edx,edi
c000d0f4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d0fb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d0ff:	c1 e7 10             	shl    edi,0x10
c000d102:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d109:	c1 e2 08             	shl    edx,0x8
c000d10c:	09 fa                	or     edx,edi
c000d10e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d115:	09 fa                	or     edx,edi
c000d117:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d11e:	c1 e7 18             	shl    edi,0x18
c000d121:	09 fa                	or     edx,edi
c000d123:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d127:	46                   	inc    esi
c000d128:	83 fe 04             	cmp    esi,0x4
c000d12b:	0f 85 7a ff ff ff    	jne    c000d0ab <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d135:	83 f0 01             	xor    eax,0x1
c000d138:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d13c:	75 57                	jne    c000d195 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d142:	83 f0 01             	xor    eax,0x1
c000d145:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d149:	75 4a                	jne    c000d195 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d14b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d14f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d157:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d15f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d165:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d16b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d171:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d175:	89 f7                	mov    edi,esi
c000d177:	c1 e0 0a             	shl    eax,0xa
c000d17a:	c1 ff 1f             	sar    edi,0x1f
c000d17d:	57                   	push   edi
c000d17e:	56                   	push   esi
c000d17f:	52                   	push   edx
c000d180:	50                   	push   eax
c000d181:	e8 ba f0 00 00       	call   c001c240 <__udivdi3>
c000d186:	83 c4 10             	add    esp,0x10
c000d189:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d18d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d191:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d195:	84 c9                	test   cl,cl
c000d197:	74 53                	je     c000d1ec <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d199:	0f b6 c9             	movzx  ecx,cl
c000d19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d1a8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d1ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1b4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d1b8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d1c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1cc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d1d0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d1d4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d1d8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d1dc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1e0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1e4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d1e8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d1ec:	31 ed                	xor    ebp,ebp
c000d1ee:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d1f2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d1f6:	89 f8                	mov    eax,edi
c000d1f8:	09 f0                	or     eax,esi
c000d1fa:	74 1e                	je     c000d21a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d1fc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d200:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d204:	89 d1                	mov    ecx,edx
c000d206:	09 c1                	or     ecx,eax
c000d208:	74 10                	je     c000d21a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d20a:	83 ec 0c             	sub    esp,0xc
c000d20d:	57                   	push   edi
c000d20e:	56                   	push   esi
c000d20f:	52                   	push   edx
c000d210:	50                   	push   eax
c000d211:	53                   	push   ebx
c000d212:	e8 db fc ff ff       	call   c000cef2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d217:	83 c4 20             	add    esp,0x20
c000d21a:	45                   	inc    ebp
c000d21b:	83 fd 04             	cmp    ebp,0x4
c000d21e:	75 ce                	jne    c000d1ee <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d220:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d226:	5b                   	pop    ebx
c000d227:	5e                   	pop    esi
c000d228:	5f                   	pop    edi
c000d229:	5d                   	pop    ebp
c000d22a:	c3                   	ret    
c000d22b:	90                   	nop

c000d22c <Serial::Serial(char const*)>:
c000d22c:	83 ec 0c             	sub    esp,0xc
c000d22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d233:	83 ec 08             	sub    esp,0x8
c000d236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23a:	50                   	push   eax
c000d23b:	e8 04 ea ff ff       	call   c000bc44 <Device::Device(char const*)>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	ba 88 e3 01 c0       	mov    edx,0xc001e388
c000d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24c:	89 10                	mov    DWORD PTR [eax],edx
c000d24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d252:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d25c:	90                   	nop
c000d25d:	83 c4 0c             	add    esp,0xc
c000d260:	c3                   	ret    
c000d261:	90                   	nop
c000d262:	66 90                	xchg   ax,ax

c000d264 <Serial::~Serial()>:
c000d264:	83 ec 0c             	sub    esp,0xc
c000d267:	ba 88 e3 01 c0       	mov    edx,0xc001e388
c000d26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d270:	89 10                	mov    DWORD PTR [eax],edx
c000d272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d276:	83 ec 0c             	sub    esp,0xc
c000d279:	50                   	push   eax
c000d27a:	e8 2f e7 ff ff       	call   c000b9ae <Device::~Device()>
c000d27f:	83 c4 10             	add    esp,0x10
c000d282:	90                   	nop
c000d283:	83 c4 0c             	add    esp,0xc
c000d286:	c3                   	ret    
c000d287:	90                   	nop

c000d288 <Serial::~Serial()>:
c000d288:	83 ec 0c             	sub    esp,0xc
c000d28b:	83 ec 0c             	sub    esp,0xc
c000d28e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d292:	e8 cd ff ff ff       	call   c000d264 <Serial::~Serial()>
c000d297:	83 c4 10             	add    esp,0x10
c000d29a:	83 ec 08             	sub    esp,0x8
c000d29d:	68 58 01 00 00       	push   0x158
c000d2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a6:	e8 cc d2 ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000d2ab:	83 c4 10             	add    esp,0x10
c000d2ae:	83 c4 0c             	add    esp,0xc
c000d2b1:	c3                   	ret    
c000d2b2:	66 90                	xchg   ax,ax

c000d2b4 <Timer::Timer(char const*)>:
c000d2b4:	83 ec 0c             	sub    esp,0xc
c000d2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2bb:	83 ec 08             	sub    esp,0x8
c000d2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c2:	50                   	push   eax
c000d2c3:	e8 7c e9 ff ff       	call   c000bc44 <Device::Device(char const*)>
c000d2c8:	83 c4 10             	add    esp,0x10
c000d2cb:	ba cc e3 01 c0       	mov    edx,0xc001e3cc
c000d2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d4:	89 10                	mov    DWORD PTR [eax],edx
c000d2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2da:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d2e4:	90                   	nop
c000d2e5:	83 c4 0c             	add    esp,0xc
c000d2e8:	c3                   	ret    
c000d2e9:	90                   	nop
c000d2ea:	66 90                	xchg   ax,ax

c000d2ec <Timer::~Timer()>:
c000d2ec:	83 ec 0c             	sub    esp,0xc
c000d2ef:	ba cc e3 01 c0       	mov    edx,0xc001e3cc
c000d2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f8:	89 10                	mov    DWORD PTR [eax],edx
c000d2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fe:	83 ec 0c             	sub    esp,0xc
c000d301:	50                   	push   eax
c000d302:	e8 a7 e6 ff ff       	call   c000b9ae <Device::~Device()>
c000d307:	83 c4 10             	add    esp,0x10
c000d30a:	90                   	nop
c000d30b:	83 c4 0c             	add    esp,0xc
c000d30e:	c3                   	ret    
c000d30f:	90                   	nop

c000d310 <Timer::~Timer()>:
c000d310:	83 ec 0c             	sub    esp,0xc
c000d313:	83 ec 0c             	sub    esp,0xc
c000d316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d31a:	e8 cd ff ff ff       	call   c000d2ec <Timer::~Timer()>
c000d31f:	83 c4 10             	add    esp,0x10
c000d322:	83 ec 08             	sub    esp,0x8
c000d325:	68 5c 01 00 00       	push   0x15c
c000d32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32e:	e8 44 d2 ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000d333:	83 c4 10             	add    esp,0x10
c000d336:	83 c4 0c             	add    esp,0xc
c000d339:	c3                   	ret    

c000d33a <Timer::read()>:
c000d33a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d33e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d344:	c3                   	ret    

c000d345 <setupTimer(int)>:
c000d345:	53                   	push   ebx
c000d346:	83 ec 14             	sub    esp,0x14
c000d349:	68 5c 01 00 00       	push   0x15c
c000d34e:	e8 66 a4 ff ff       	call   c00077b9 <malloc>
c000d353:	89 04 24             	mov    DWORD PTR [esp],eax
c000d356:	89 c3                	mov    ebx,eax
c000d358:	e8 fb e7 00 00       	call   c001bb58 <PIT::PIT()>
c000d35d:	58                   	pop    eax
c000d35e:	5a                   	pop    edx
c000d35f:	53                   	push   ebx
c000d360:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d366:	e8 41 e7 ff ff       	call   c000baac <Device::addChild(Device*)>
c000d36b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d36d:	6a 00                	push   0x0
c000d36f:	6a 00                	push   0x0
c000d371:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d375:	53                   	push   ebx
c000d376:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d379:	89 d8                	mov    eax,ebx
c000d37b:	83 c4 28             	add    esp,0x28
c000d37e:	5b                   	pop    ebx
c000d37f:	c3                   	ret    

c000d380 <timerHandler(unsigned int)>:
c000d380:	56                   	push   esi
c000d381:	53                   	push   ebx
c000d382:	51                   	push   ecx
c000d383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d387:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d38d:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d394:	0f 84 4a 01 00 00    	je     c000d4e4 <timerHandler(unsigned int)+0x164>
c000d39a:	fa                   	cli    
c000d39b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d3a1:	83 ec 0c             	sub    esp,0xc
c000d3a4:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d3aa:	68 78 51 02 c0       	push   0xc0025178
c000d3af:	e8 5c f4 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d3b4:	83 c4 10             	add    esp,0x10
c000d3b7:	84 c0                	test   al,al
c000d3b9:	0f 85 a1 00 00 00    	jne    c000d460 <timerHandler(unsigned int)+0xe0>
c000d3bf:	83 ec 0c             	sub    esp,0xc
c000d3c2:	68 78 51 02 c0       	push   0xc0025178
c000d3c7:	e8 60 f4 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3cc:	83 c4 10             	add    esp,0x10
c000d3cf:	89 c6                	mov    esi,eax
c000d3d1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3d4:	83 ec 0c             	sub    esp,0xc
c000d3d7:	68 78 51 02 c0       	push   0xc0025178
c000d3dc:	e8 4b f4 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3e1:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d3e8:	89 c3                	mov    ebx,eax
c000d3ea:	e8 45 f4 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d3ef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d3f2:	83 c4 10             	add    esp,0x10
c000d3f5:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d3fb:	77 23                	ja     c000d420 <timerHandler(unsigned int)+0xa0>
c000d3fd:	83 ec 0c             	sub    esp,0xc
c000d400:	53                   	push   ebx
c000d401:	e8 a2 69 00 00       	call   c0013da8 <unblockTask(ThreadControlBlock*)>
c000d406:	83 c4 10             	add    esp,0x10
c000d409:	39 de                	cmp    esi,ebx
c000d40b:	75 27                	jne    c000d434 <timerHandler(unsigned int)+0xb4>
c000d40d:	83 ec 0c             	sub    esp,0xc
c000d410:	68 78 51 02 c0       	push   0xc0025178
c000d415:	e8 12 f4 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d41a:	89 c6                	mov    esi,eax
c000d41c:	eb 12                	jmp    c000d430 <timerHandler(unsigned int)+0xb0>
c000d41e:	66 90                	xchg   ax,ax
c000d420:	52                   	push   edx
c000d421:	52                   	push   edx
c000d422:	53                   	push   ebx
c000d423:	68 78 51 02 c0       	push   0xc0025178
c000d428:	e8 bf f4 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d42d:	8d 76 00             	lea    esi,[esi+0x0]
c000d430:	83 c4 10             	add    esp,0x10
c000d433:	90                   	nop
c000d434:	83 ec 0c             	sub    esp,0xc
c000d437:	68 78 51 02 c0       	push   0xc0025178
c000d43c:	e8 cf f3 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d441:	83 c4 10             	add    esp,0x10
c000d444:	84 c0                	test   al,al
c000d446:	75 18                	jne    c000d460 <timerHandler(unsigned int)+0xe0>
c000d448:	83 ec 0c             	sub    esp,0xc
c000d44b:	68 78 51 02 c0       	push   0xc0025178
c000d450:	e8 d7 f3 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	39 f0                	cmp    eax,esi
c000d45a:	0f 85 74 ff ff ff    	jne    c000d3d4 <timerHandler(unsigned int)+0x54>
c000d460:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d465:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d469:	74 41                	je     c000d4ac <timerHandler(unsigned int)+0x12c>
c000d46b:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d472:	74 38                	je     c000d4ac <timerHandler(unsigned int)+0x12c>
c000d474:	fa                   	cli    
c000d475:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d47b:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d480:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d486:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d489:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d48f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d492:	72 08                	jb     c000d49c <timerHandler(unsigned int)+0x11c>
c000d494:	e8 4b 64 00 00       	call   c00138e4 <schedule()>
c000d499:	8d 76 00             	lea    esi,[esi+0x0]
c000d49c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d4a1:	48                   	dec    eax
c000d4a2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d4a7:	75 03                	jne    c000d4ac <timerHandler(unsigned int)+0x12c>
c000d4a9:	fb                   	sti    
c000d4aa:	66 90                	xchg   ax,ax
c000d4ac:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d4b1:	48                   	dec    eax
c000d4b2:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d4b7:	75 1b                	jne    c000d4d4 <timerHandler(unsigned int)+0x154>
c000d4b9:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d4c0:	74 12                	je     c000d4d4 <timerHandler(unsigned int)+0x154>
c000d4c2:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d4cc:	e8 13 64 00 00       	call   c00138e4 <schedule()>
c000d4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000d4d4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d4d9:	48                   	dec    eax
c000d4da:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d4df:	75 03                	jne    c000d4e4 <timerHandler(unsigned int)+0x164>
c000d4e1:	fb                   	sti    
c000d4e2:	66 90                	xchg   ax,ax
c000d4e4:	58                   	pop    eax
c000d4e5:	5b                   	pop    ebx
c000d4e6:	5e                   	pop    esi
c000d4e7:	c3                   	ret    

c000d4e8 <VCache::VCache(PhysicalDisk*)>:
c000d4e8:	53                   	push   ebx
c000d4e9:	83 ec 18             	sub    esp,0x18
c000d4ec:	ba fc e3 01 c0       	mov    edx,0xc001e3fc
c000d4f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f5:	89 10                	mov    DWORD PTR [eax],edx
c000d4f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4fb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d506:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d50d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d511:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d518:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d51f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d523:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d52a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d531:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d535:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d53c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d540:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d548:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d54f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d55a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d55e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d562:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d56a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d56e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d572:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d579:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d581:	83 ec 0c             	sub    esp,0xc
c000d584:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d588:	e8 2c a2 ff ff       	call   c00077b9 <malloc>
c000d58d:	83 c4 10             	add    esp,0x10
c000d590:	89 c3                	mov    ebx,eax
c000d592:	83 ec 0c             	sub    esp,0xc
c000d595:	53                   	push   ebx
c000d596:	e8 15 61 00 00       	call   c00136b0 <Mutex::Mutex()>
c000d59b:	83 c4 10             	add    esp,0x10
c000d59e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d5a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d5ad:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d5b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d5bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5bf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d5c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d5cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5d0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d5d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d5dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d5e0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d5e3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d5e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d5ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d5f8:	05 00 01 00 00       	add    eax,0x100
c000d5fd:	c1 e0 04             	shl    eax,0x4
c000d600:	83 ec 0c             	sub    esp,0xc
c000d603:	50                   	push   eax
c000d604:	e8 b0 a1 ff ff       	call   c00077b9 <malloc>
c000d609:	83 c4 10             	add    esp,0x10
c000d60c:	89 c2                	mov    edx,eax
c000d60e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d612:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d619:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d624:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d628:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d62c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d632:	c1 e0 06             	shl    eax,0x6
c000d635:	83 ec 0c             	sub    esp,0xc
c000d638:	50                   	push   eax
c000d639:	e8 7b a1 ff ff       	call   c00077b9 <malloc>
c000d63e:	83 c4 10             	add    esp,0x10
c000d641:	89 c2                	mov    edx,eax
c000d643:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d647:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d64a:	90                   	nop
c000d64b:	83 c4 18             	add    esp,0x18
c000d64e:	5b                   	pop    ebx
c000d64f:	c3                   	ret    

c000d650 <VCache::invalidateReadBuffer()>:
c000d650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d654:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d65a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d65e:	c3                   	ret    
c000d65f:	90                   	nop

c000d660 <VCache::writeWriteBuffer()>:
c000d660:	53                   	push   ebx
c000d661:	83 ec 08             	sub    esp,0x8
c000d664:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d668:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d66c:	74 1e                	je     c000d68c <VCache::writeWriteBuffer()+0x2c>
c000d66e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d671:	83 ec 0c             	sub    esp,0xc
c000d674:	8b 10                	mov    edx,DWORD PTR [eax]
c000d676:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d679:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d67c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d67f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d682:	50                   	push   eax
c000d683:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d686:	83 c4 20             	add    esp,0x20
c000d689:	8d 76 00             	lea    esi,[esi+0x0]
c000d68c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d693:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d69a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d69e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d6a5:	83 c4 08             	add    esp,0x8
c000d6a8:	5b                   	pop    ebx
c000d6a9:	c3                   	ret    
c000d6aa:	66 90                	xchg   ax,ax

c000d6ac <VCache::~VCache()>:
c000d6ac:	83 ec 0c             	sub    esp,0xc
c000d6af:	ba fc e3 01 c0       	mov    edx,0xc001e3fc
c000d6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b8:	89 10                	mov    DWORD PTR [eax],edx
c000d6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6be:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d6c1:	84 c0                	test   al,al
c000d6c3:	74 0f                	je     c000d6d4 <VCache::~VCache()+0x28>
c000d6c5:	83 ec 0c             	sub    esp,0xc
c000d6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6cc:	e8 8f ff ff ff       	call   c000d660 <VCache::writeWriteBuffer()>
c000d6d1:	83 c4 10             	add    esp,0x10
c000d6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d6db:	83 ec 0c             	sub    esp,0xc
c000d6de:	50                   	push   eax
c000d6df:	e8 e5 a0 ff ff       	call   c00077c9 <free>
c000d6e4:	83 c4 10             	add    esp,0x10
c000d6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d6ee:	83 ec 0c             	sub    esp,0xc
c000d6f1:	50                   	push   eax
c000d6f2:	e8 d2 a0 ff ff       	call   c00077c9 <free>
c000d6f7:	83 c4 10             	add    esp,0x10
c000d6fa:	90                   	nop
c000d6fb:	83 c4 0c             	add    esp,0xc
c000d6fe:	c3                   	ret    
c000d6ff:	90                   	nop

c000d700 <VCache::~VCache()>:
c000d700:	83 ec 0c             	sub    esp,0xc
c000d703:	83 ec 0c             	sub    esp,0xc
c000d706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70a:	e8 9d ff ff ff       	call   c000d6ac <VCache::~VCache()>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	83 ec 08             	sub    esp,0x8
c000d715:	6a 44                	push   0x44
c000d717:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d71b:	e8 57 ce ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000d720:	83 c4 10             	add    esp,0x10
c000d723:	83 c4 0c             	add    esp,0xc
c000d726:	c3                   	ret    
c000d727:	90                   	nop

c000d728 <VCache::write(unsigned long long, int, void*)>:
c000d728:	55                   	push   ebp
c000d729:	57                   	push   edi
c000d72a:	56                   	push   esi
c000d72b:	53                   	push   ebx
c000d72c:	83 ec 1c             	sub    esp,0x1c
c000d72f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d733:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d737:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d73b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d73f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d743:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d747:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d74b:	31 c0                	xor    eax,eax
c000d74d:	8d 76 00             	lea    esi,[esi+0x0]
c000d750:	39 e8                	cmp    eax,ebp
c000d752:	7d 18                	jge    c000d76c <VCache::write(unsigned long long, int, void*)+0x44>
c000d754:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d757:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d75d:	0f af c8             	imul   ecx,eax
c000d760:	89 ca                	mov    edx,ecx
c000d762:	01 f2                	add    edx,esi
c000d764:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d766:	40                   	inc    eax
c000d767:	eb e7                	jmp    c000d750 <VCache::write(unsigned long long, int, void*)+0x28>
c000d769:	8d 76 00             	lea    esi,[esi+0x0]
c000d76c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d770:	74 0a                	je     c000d77c <VCache::write(unsigned long long, int, void*)+0x54>
c000d772:	53                   	push   ebx
c000d773:	e8 d8 fe ff ff       	call   c000d650 <VCache::invalidateReadBuffer()>
c000d778:	58                   	pop    eax
c000d779:	8d 76 00             	lea    esi,[esi+0x0]
c000d77c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d780:	74 5a                	je     c000d7dc <VCache::write(unsigned long long, int, void*)+0xb4>
c000d782:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d785:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d789:	89 f8                	mov    eax,edi
c000d78b:	99                   	cdq    
c000d78c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d78f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d792:	31 c1                	xor    ecx,eax
c000d794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d798:	31 d0                	xor    eax,edx
c000d79a:	09 c1                	or     ecx,eax
c000d79c:	75 32                	jne    c000d7d0 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d79e:	83 fd 01             	cmp    ebp,0x1
c000d7a1:	75 2d                	jne    c000d7d0 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d7a3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d7a6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d7ac:	0f af f9             	imul   edi,ecx
c000d7af:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d7b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7b4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7b7:	40                   	inc    eax
c000d7b8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d7bb:	83 f8 40             	cmp    eax,0x40
c000d7be:	75 74                	jne    c000d834 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d7c0:	83 ec 0c             	sub    esp,0xc
c000d7c3:	53                   	push   ebx
c000d7c4:	e8 97 fe ff ff       	call   c000d660 <VCache::writeWriteBuffer()>
c000d7c9:	83 c4 10             	add    esp,0x10
c000d7cc:	eb 66                	jmp    c000d834 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d7ce:	66 90                	xchg   ax,ax
c000d7d0:	83 ec 0c             	sub    esp,0xc
c000d7d3:	53                   	push   ebx
c000d7d4:	e8 87 fe ff ff       	call   c000d660 <VCache::writeWriteBuffer()>
c000d7d9:	83 c4 10             	add    esp,0x10
c000d7dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d7df:	83 fd 3f             	cmp    ebp,0x3f
c000d7e2:	7f 24                	jg     c000d808 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d7e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d7e8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d7eb:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d7ee:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d7f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d7f6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d7f9:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d7fc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d802:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d804:	eb 2e                	jmp    c000d834 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d806:	66 90                	xchg   ax,ax
c000d808:	8b 10                	mov    edx,DWORD PTR [eax]
c000d80a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d80e:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d812:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d816:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d81a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d81e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d822:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d826:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d829:	83 c4 1c             	add    esp,0x1c
c000d82c:	5b                   	pop    ebx
c000d82d:	5e                   	pop    esi
c000d82e:	5f                   	pop    edi
c000d82f:	5d                   	pop    ebp
c000d830:	ff e0                	jmp    eax
c000d832:	66 90                	xchg   ax,ax
c000d834:	83 c4 1c             	add    esp,0x1c
c000d837:	31 c0                	xor    eax,eax
c000d839:	5b                   	pop    ebx
c000d83a:	5e                   	pop    esi
c000d83b:	5f                   	pop    edi
c000d83c:	5d                   	pop    ebp
c000d83d:	c3                   	ret    

c000d83e <VCache::read(unsigned long long, int, void*)>:
c000d83e:	55                   	push   ebp
c000d83f:	57                   	push   edi
c000d840:	56                   	push   esi
c000d841:	53                   	push   ebx
c000d842:	83 ec 1c             	sub    esp,0x1c
c000d845:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d849:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d84d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d851:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d855:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d859:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d85d:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d861:	74 0d                	je     c000d870 <VCache::read(unsigned long long, int, void*)+0x32>
c000d863:	83 ec 0c             	sub    esp,0xc
c000d866:	55                   	push   ebp
c000d867:	e8 f4 fd ff ff       	call   c000d660 <VCache::writeWriteBuffer()>
c000d86c:	83 c4 10             	add    esp,0x10
c000d86f:	90                   	nop
c000d870:	83 ec 0c             	sub    esp,0xc
c000d873:	55                   	push   ebp
c000d874:	e8 d7 fd ff ff       	call   c000d650 <VCache::invalidateReadBuffer()>
c000d879:	83 c4 0c             	add    esp,0xc
c000d87c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d87f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d885:	6a 00                	push   0x0
c000d887:	53                   	push   ebx
c000d888:	e8 43 2c ff ff       	call   c00004d0 <memset>
c000d88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d890:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d894:	8b 10                	mov    edx,DWORD PTR [eax]
c000d896:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d89a:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d89e:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d8a2:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d8a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8aa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d8ad:	83 c4 2c             	add    esp,0x2c
c000d8b0:	5b                   	pop    ebx
c000d8b1:	5e                   	pop    esi
c000d8b2:	5f                   	pop    edi
c000d8b3:	5d                   	pop    ebp
c000d8b4:	ff e0                	jmp    eax

c000d8b6 <Video::putrect(int, int, int, int, unsigned int)>:
c000d8b6:	55                   	push   ebp
c000d8b7:	57                   	push   edi
c000d8b8:	56                   	push   esi
c000d8b9:	53                   	push   ebx
c000d8ba:	83 ec 1c             	sub    esp,0x1c
c000d8bd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d8c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8c5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d8c9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d8cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d8d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8d5:	01 df                	add    edi,ebx
c000d8d7:	39 fb                	cmp    ebx,edi
c000d8d9:	7d 1f                	jge    c000d8fa <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d8db:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d8df:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d8e3:	7d 12                	jge    c000d8f7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d8e5:	8b 16                	mov    edx,DWORD PTR [esi]
c000d8e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8eb:	53                   	push   ebx
c000d8ec:	55                   	push   ebp
c000d8ed:	45                   	inc    ebp
c000d8ee:	56                   	push   esi
c000d8ef:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	eb e8                	jmp    c000d8df <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d8f7:	43                   	inc    ebx
c000d8f8:	eb dd                	jmp    c000d8d7 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d8fa:	83 c4 1c             	add    esp,0x1c
c000d8fd:	5b                   	pop    ebx
c000d8fe:	5e                   	pop    esi
c000d8ff:	5f                   	pop    edi
c000d900:	5d                   	pop    ebp
c000d901:	c3                   	ret    

c000d902 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d902:	55                   	push   ebp
c000d903:	57                   	push   edi
c000d904:	31 ff                	xor    edi,edi
c000d906:	56                   	push   esi
c000d907:	53                   	push   ebx
c000d908:	83 ec 1c             	sub    esp,0x1c
c000d90b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d90f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d913:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d91a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d91f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d923:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d927:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d92b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d92e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d932:	01 f9                	add    ecx,edi
c000d934:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d938:	7d 2f                	jge    c000d969 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d93a:	31 f6                	xor    esi,esi
c000d93c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d940:	01 f2                	add    edx,esi
c000d942:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d946:	7d 1a                	jge    c000d962 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d948:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d94b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d94e:	46                   	inc    esi
c000d94f:	51                   	push   ecx
c000d950:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d954:	52                   	push   edx
c000d955:	55                   	push   ebp
c000d956:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d959:	83 c4 10             	add    esp,0x10
c000d95c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d960:	eb da                	jmp    c000d93c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d962:	47                   	inc    edi
c000d963:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d967:	eb c5                	jmp    c000d92e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d969:	83 c4 1c             	add    esp,0x1c
c000d96c:	5b                   	pop    ebx
c000d96d:	5e                   	pop    esi
c000d96e:	5f                   	pop    edi
c000d96f:	5d                   	pop    ebp
c000d970:	c3                   	ret    
c000d971:	90                   	nop

c000d972 <Video::blit(unsigned int*, int, int, int, int)>:
c000d972:	55                   	push   ebp
c000d973:	57                   	push   edi
c000d974:	56                   	push   esi
c000d975:	53                   	push   ebx
c000d976:	83 ec 1c             	sub    esp,0x1c
c000d979:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d97d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d981:	85 c0                	test   eax,eax
c000d983:	79 02                	jns    c000d987 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d985:	31 c0                	xor    eax,eax
c000d987:	c1 e0 02             	shl    eax,0x2
c000d98a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d98e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d992:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d996:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d99a:	39 d8                	cmp    eax,ebx
c000d99c:	7e 49                	jle    c000d9e7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d99e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d9a4:	7c 41                	jl     c000d9e7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d9a6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d9aa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9ae:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d9b2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d9b6:	39 f9                	cmp    ecx,edi
c000d9b8:	7e 22                	jle    c000d9dc <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d9ba:	83 c5 04             	add    ebp,0x4
c000d9bd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d9c3:	7c 14                	jl     c000d9d9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d9c5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d9c7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d9ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d9ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d9d2:	56                   	push   esi
c000d9d3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d9d6:	83 c4 10             	add    esp,0x10
c000d9d9:	47                   	inc    edi
c000d9da:	eb d2                	jmp    c000d9ae <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d9dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9e0:	43                   	inc    ebx
c000d9e1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d9e5:	eb ab                	jmp    c000d992 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d9e7:	83 c4 1c             	add    esp,0x1c
c000d9ea:	5b                   	pop    ebx
c000d9eb:	5e                   	pop    esi
c000d9ec:	5f                   	pop    edi
c000d9ed:	5d                   	pop    ebp
c000d9ee:	c3                   	ret    
c000d9ef:	90                   	nop

c000d9f0 <Video::clearScreen(unsigned int)>:
c000d9f0:	57                   	push   edi
c000d9f1:	56                   	push   esi
c000d9f2:	53                   	push   ebx
c000d9f3:	31 db                	xor    ebx,ebx
c000d9f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9f9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d9ff:	7e 1f                	jle    c000da20 <Video::clearScreen(unsigned int)+0x30>
c000da01:	31 ff                	xor    edi,edi
c000da03:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000da09:	7e 12                	jle    c000da1d <Video::clearScreen(unsigned int)+0x2d>
c000da0b:	8b 06                	mov    eax,DWORD PTR [esi]
c000da0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da11:	53                   	push   ebx
c000da12:	57                   	push   edi
c000da13:	47                   	inc    edi
c000da14:	56                   	push   esi
c000da15:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da18:	83 c4 10             	add    esp,0x10
c000da1b:	eb e6                	jmp    c000da03 <Video::clearScreen(unsigned int)+0x13>
c000da1d:	43                   	inc    ebx
c000da1e:	eb d9                	jmp    c000d9f9 <Video::clearScreen(unsigned int)+0x9>
c000da20:	5b                   	pop    ebx
c000da21:	5e                   	pop    esi
c000da22:	5f                   	pop    edi
c000da23:	c3                   	ret    

c000da24 <Video::putpixel(int, int, unsigned int)>:
c000da24:	c7 44 24 04 04 e4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e404
c000da2c:	e9 be 28 00 00       	jmp    c00102ef <KePanic(char const*)>
c000da31:	90                   	nop

c000da32 <Video::Video(char const*)>:
c000da32:	83 ec 0c             	sub    esp,0xc
c000da35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da39:	83 ec 08             	sub    esp,0x8
c000da3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da40:	50                   	push   eax
c000da41:	e8 fe e1 ff ff       	call   c000bc44 <Device::Device(char const*)>
c000da46:	83 c4 10             	add    esp,0x10
c000da49:	ba 74 e4 01 c0       	mov    edx,0xc001e474
c000da4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da52:	89 10                	mov    DWORD PTR [eax],edx
c000da54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da58:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000da62:	90                   	nop
c000da63:	83 c4 0c             	add    esp,0xc
c000da66:	c3                   	ret    
c000da67:	90                   	nop

c000da68 <Video::~Video()>:
c000da68:	83 ec 0c             	sub    esp,0xc
c000da6b:	ba 74 e4 01 c0       	mov    edx,0xc001e474
c000da70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da74:	89 10                	mov    DWORD PTR [eax],edx
c000da76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7a:	83 ec 0c             	sub    esp,0xc
c000da7d:	50                   	push   eax
c000da7e:	e8 2b df ff ff       	call   c000b9ae <Device::~Device()>
c000da83:	83 c4 10             	add    esp,0x10
c000da86:	90                   	nop
c000da87:	83 c4 0c             	add    esp,0xc
c000da8a:	c3                   	ret    
c000da8b:	90                   	nop

c000da8c <Video::~Video()>:
c000da8c:	83 ec 0c             	sub    esp,0xc
c000da8f:	83 ec 0c             	sub    esp,0xc
c000da92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da96:	e8 cd ff ff ff       	call   c000da68 <Video::~Video()>
c000da9b:	83 c4 10             	add    esp,0x10
c000da9e:	83 ec 08             	sub    esp,0x8
c000daa1:	68 64 01 00 00       	push   0x164
c000daa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daaa:	e8 c8 ca ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c000daaf:	83 c4 10             	add    esp,0x10
c000dab2:	83 c4 0c             	add    esp,0xc
c000dab5:	c3                   	ret    

c000dab6 <Video::isMonochrome()>:
c000dab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daba:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dac0:	c3                   	ret    
c000dac1:	90                   	nop

c000dac2 <Video::getWidth()>:
c000dac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dacc:	c3                   	ret    
c000dacd:	90                   	nop

c000dace <Video::getHeight()>:
c000dace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dad8:	c3                   	ret    
c000dad9:	90                   	nop

c000dada <Video::drawCursor(int, int, unsigned char*, int)>:
c000dada:	55                   	push   ebp
c000dadb:	57                   	push   edi
c000dadc:	56                   	push   esi
c000dadd:	53                   	push   ebx
c000dade:	83 ec 2c             	sub    esp,0x2c
c000dae1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dae5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dae9:	83 f8 01             	cmp    eax,0x1
c000daec:	19 c9                	sbb    ecx,ecx
c000daee:	31 db                	xor    ebx,ebx
c000daf0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000daf4:	89 cd                	mov    ebp,ecx
c000daf6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dafe:	f7 d5                	not    ebp
c000db00:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000db06:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000db0a:	01 d8                	add    eax,ebx
c000db0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db10:	56                   	push   esi
c000db11:	e8 b8 ff ff ff       	call   c000dace <Video::getHeight()>
c000db16:	59                   	pop    ecx
c000db17:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000db1b:	7e 70                	jle    c000db8d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000db1d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000db21:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000db25:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000db28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000db2c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000db30:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000db37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db3b:	89 f8                	mov    eax,edi
c000db3d:	83 c0 20             	add    eax,0x20
c000db40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db44:	56                   	push   esi
c000db45:	e8 78 ff ff ff       	call   c000dac2 <Video::getWidth()>
c000db4a:	5a                   	pop    edx
c000db4b:	39 c7                	cmp    edi,eax
c000db4d:	7d 34                	jge    c000db83 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000db4f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000db54:	74 05                	je     c000db5b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000db56:	8b 06                	mov    eax,DWORD PTR [esi]
c000db58:	55                   	push   ebp
c000db59:	eb 0d                	jmp    c000db68 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000db5b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000db60:	74 12                	je     c000db74 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000db62:	8b 06                	mov    eax,DWORD PTR [esi]
c000db64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db6c:	57                   	push   edi
c000db6d:	56                   	push   esi
c000db6e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db71:	83 c4 10             	add    esp,0x10
c000db74:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000db78:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000db7c:	47                   	inc    edi
c000db7d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000db81:	75 c1                	jne    c000db44 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000db83:	43                   	inc    ebx
c000db84:	83 fb 20             	cmp    ebx,0x20
c000db87:	0f 85 79 ff ff ff    	jne    c000db06 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000db8d:	83 c4 2c             	add    esp,0x2c
c000db90:	5b                   	pop    ebx
c000db91:	5e                   	pop    esi
c000db92:	5f                   	pop    edi
c000db93:	5d                   	pop    ebp
c000db94:	c3                   	ret    
c000db95:	90                   	nop

c000db96 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000db96:	55                   	push   ebp
c000db97:	57                   	push   edi
c000db98:	56                   	push   esi
c000db99:	53                   	push   ebx
c000db9a:	83 ec 28             	sub    esp,0x28
c000db9d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dba1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dba5:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dba9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dbad:	c1 e6 08             	shl    esi,0x8
c000dbb0:	01 c6                	add    esi,eax
c000dbb2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dbb6:	c1 e0 08             	shl    eax,0x8
c000dbb9:	01 d0                	add    eax,edx
c000dbbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbc3:	0f af c6             	imul   eax,esi
c000dbc6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dbcd:	50                   	push   eax
c000dbce:	e8 e6 9b ff ff       	call   c00077b9 <malloc>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	89 c7                	mov    edi,eax
c000dbd8:	85 c0                	test   eax,eax
c000dbda:	75 10                	jne    c000dbec <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dbdc:	83 ec 0c             	sub    esp,0xc
c000dbdf:	68 25 e4 01 c0       	push   0xc001e425
c000dbe4:	e8 06 27 00 00       	call   c00102ef <KePanic(char const*)>
c000dbe9:	83 c4 10             	add    esp,0x10
c000dbec:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dbef:	ba 12 00 00 00       	mov    edx,0x12
c000dbf4:	84 c0                	test   al,al
c000dbf6:	74 11                	je     c000dc09 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dbf8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dbfc:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dc00:	c1 fa 03             	sar    edx,0x3
c000dc03:	0f af d1             	imul   edx,ecx
c000dc06:	83 c2 12             	add    edx,0x12
c000dc09:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dc0d:	74 04                	je     c000dc13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dc0f:	85 f6                	test   esi,esi
c000dc11:	75 12                	jne    c000dc25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dc13:	83 ec 0c             	sub    esp,0xc
c000dc16:	68 35 e4 01 c0       	push   0xc001e435
c000dc1b:	e8 4d ca ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000dc20:	e9 b8 00 00 00       	jmp    c000dcdd <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dc25:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dc29:	80 f9 02             	cmp    cl,0x2
c000dc2c:	0f 85 96 00 00 00    	jne    c000dcc8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dc32:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dc37:	75 0e                	jne    c000dc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dc39:	84 c0                	test   al,al
c000dc3b:	75 0a                	jne    c000dc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dc3d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dc40:	83 e8 18             	sub    eax,0x18
c000dc43:	a8 f7                	test   al,0xf7
c000dc45:	74 0a                	je     c000dc51 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dc47:	83 ec 0c             	sub    esp,0xc
c000dc4a:	68 4a e4 01 c0       	push   0xc001e44a
c000dc4f:	eb 7f                	jmp    c000dcd0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dc51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dc59:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dc61:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dc65:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc6d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dc71:	75 0c                	jne    c000dc7f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dc73:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dc78:	c1 e0 18             	shl    eax,0x18
c000dc7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc7f:	45                   	inc    ebp
c000dc80:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dc85:	c1 e1 10             	shl    ecx,0x10
c000dc88:	89 c8                	mov    eax,ecx
c000dc8a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dc8f:	c1 e1 08             	shl    ecx,0x8
c000dc92:	09 c1                	or     ecx,eax
c000dc94:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dc98:	09 c1                	or     ecx,eax
c000dc9a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dc9e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dca2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dca6:	c1 f8 03             	sar    eax,0x3
c000dca9:	01 c2                	add    edx,eax
c000dcab:	89 e8                	mov    eax,ebp
c000dcad:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dcb1:	39 c6                	cmp    esi,eax
c000dcb3:	7f b0                	jg     c000dc65 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dcb5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dcb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dcbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dcc0:	7e 22                	jle    c000dce4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dcc2:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dcc6:	eb 99                	jmp    c000dc61 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dcc8:	50                   	push   eax
c000dcc9:	50                   	push   eax
c000dcca:	51                   	push   ecx
c000dccb:	68 58 e4 01 c0       	push   0xc001e458
c000dcd0:	e8 98 c9 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000dcd5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dcd8:	e8 ec 9a ff ff       	call   c00077c9 <free>
c000dcdd:	83 c4 10             	add    esp,0x10
c000dce0:	31 ff                	xor    edi,edi
c000dce2:	eb 0f                	jmp    c000dcf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dce4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dce8:	89 30                	mov    DWORD PTR [eax],esi
c000dcea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dcee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcf1:	89 30                	mov    DWORD PTR [eax],esi
c000dcf3:	83 c4 1c             	add    esp,0x1c
c000dcf6:	89 f8                	mov    eax,edi
c000dcf8:	5b                   	pop    ebx
c000dcf9:	5e                   	pop    esi
c000dcfa:	5f                   	pop    edi
c000dcfb:	5d                   	pop    ebp
c000dcfc:	c3                   	ret    
c000dcfd:	90                   	nop

c000dcfe <Video::putTGA(int, int, unsigned char*, int)>:
c000dcfe:	55                   	push   ebp
c000dcff:	57                   	push   edi
c000dd00:	56                   	push   esi
c000dd01:	53                   	push   ebx
c000dd02:	83 ec 28             	sub    esp,0x28
c000dd05:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dd09:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dd0d:	50                   	push   eax
c000dd0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dd12:	50                   	push   eax
c000dd13:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd17:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd1b:	56                   	push   esi
c000dd1c:	e8 75 fe ff ff       	call   c000db96 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dd21:	83 c4 20             	add    esp,0x20
c000dd24:	85 c0                	test   eax,eax
c000dd26:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dd2a:	74 35                	je     c000dd61 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dd2c:	89 c7                	mov    edi,eax
c000dd2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dd32:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd36:	39 d8                	cmp    eax,ebx
c000dd38:	7e 27                	jle    c000dd61 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dd3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dd3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd42:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dd46:	39 e8                	cmp    eax,ebp
c000dd48:	7e 14                	jle    c000dd5e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dd4a:	8b 06                	mov    eax,DWORD PTR [esi]
c000dd4c:	83 c7 04             	add    edi,0x4
c000dd4f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dd52:	53                   	push   ebx
c000dd53:	55                   	push   ebp
c000dd54:	45                   	inc    ebp
c000dd55:	56                   	push   esi
c000dd56:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dd59:	83 c4 10             	add    esp,0x10
c000dd5c:	eb e0                	jmp    c000dd3e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dd5e:	43                   	inc    ebx
c000dd5f:	eb cd                	jmp    c000dd2e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dd61:	83 c4 1c             	add    esp,0x1c
c000dd64:	5b                   	pop    ebx
c000dd65:	5e                   	pop    esi
c000dd66:	5f                   	pop    edi
c000dd67:	5d                   	pop    ebp
c000dd68:	c3                   	ret    
c000dd69:	66 90                	xchg   ax,ax
c000dd6b:	90                   	nop

c000dd6c <ACPI::close(int, int, void*)>:
c000dd6c:	83 ec 1c             	sub    esp,0x1c
c000dd6f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dd77:	74 0b                	je     c000dd84 <ACPI::close(int, int, void*)+0x18>
c000dd79:	b8 00 00 00 00       	mov    eax,0x0
c000dd7e:	e9 9d 00 00 00       	jmp    c000de20 <ACPI::close(int, int, void*)+0xb4>
c000dd83:	90                   	nop
c000dd84:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dd89:	75 29                	jne    c000ddb4 <ACPI::close(int, int, void*)+0x48>
c000dd8b:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dd90:	85 c0                	test   eax,eax
c000dd92:	74 08                	je     c000dd9c <ACPI::close(int, int, void*)+0x30>
c000dd94:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dd99:	ff d0                	call   eax
c000dd9b:	90                   	nop
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	68 b4 e4 01 c0       	push   0xc001e4b4
c000dda4:	e8 46 25 00 00       	call   c00102ef <KePanic(char const*)>
c000dda9:	83 c4 10             	add    esp,0x10
c000ddac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ddb1:	eb 6d                	jmp    c000de20 <ACPI::close(int, int, void*)+0xb4>
c000ddb3:	90                   	nop
c000ddb4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ddb9:	75 5d                	jne    c000de18 <ACPI::close(int, int, void*)+0xac>
c000ddbb:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000ddc0:	85 c0                	test   eax,eax
c000ddc2:	74 08                	je     c000ddcc <ACPI::close(int, int, void*)+0x60>
c000ddc4:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000ddc9:	ff d0                	call   eax
c000ddcb:	90                   	nop
c000ddcc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ddd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ddd4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ddd8:	25 ff 00 00 00       	and    eax,0xff
c000dddd:	83 e0 02             	and    eax,0x2
c000dde0:	74 1e                	je     c000de00 <ACPI::close(int, int, void*)+0x94>
c000dde2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dde9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dded:	89 c2                	mov    edx,eax
c000ddef:	ec                   	in     al,dx
c000ddf0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ddf4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ddf8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ddfc:	eb d6                	jmp    c000ddd4 <ACPI::close(int, int, void*)+0x68>
c000ddfe:	66 90                	xchg   ax,ax
c000de00:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000de07:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000de0c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000de10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000de14:	ee                   	out    dx,al
c000de15:	8d 76 00             	lea    esi,[esi+0x0]
c000de18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de1d:	8d 76 00             	lea    esi,[esi+0x0]
c000de20:	83 c4 1c             	add    esp,0x1c
c000de23:	c3                   	ret    

c000de24 <findRSDP()>:
c000de24:	83 ec 1c             	sub    esp,0x1c
c000de27:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000de2c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de32:	83 e0 04             	and    eax,0x4
c000de35:	84 c0                	test   al,al
c000de37:	75 07                	jne    c000de40 <findRSDP()+0x1c>
c000de39:	b8 00 00 00 00       	mov    eax,0x0
c000de3e:	eb 70                	jmp    c000deb0 <findRSDP()+0x8c>
c000de40:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000de45:	3d ff 07 00 00       	cmp    eax,0x7ff
c000de4a:	7f 1c                	jg     c000de68 <findRSDP()+0x44>
c000de4c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000de51:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000de57:	83 e2 fb             	and    edx,0xfffffffb
c000de5a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000de60:	b8 00 00 00 00       	mov    eax,0x0
c000de65:	eb 49                	jmp    c000deb0 <findRSDP()+0x8c>
c000de67:	90                   	nop
c000de68:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000de70:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000de78:	77 2e                	ja     c000dea8 <findRSDP()+0x84>
c000de7a:	83 ec 04             	sub    esp,0x4
c000de7d:	6a 08                	push   0x8
c000de7f:	68 4f e5 01 c0       	push   0xc001e54f
c000de84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de88:	e8 03 25 ff ff       	call   c0000390 <memcmp>
c000de8d:	83 c4 10             	add    esp,0x10
c000de90:	85 c0                	test   eax,eax
c000de92:	0f 94 c0             	sete   al
c000de95:	84 c0                	test   al,al
c000de97:	74 07                	je     c000dea0 <findRSDP()+0x7c>
c000de99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de9d:	eb 11                	jmp    c000deb0 <findRSDP()+0x8c>
c000de9f:	90                   	nop
c000dea0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dea5:	eb c9                	jmp    c000de70 <findRSDP()+0x4c>
c000dea7:	90                   	nop
c000dea8:	b8 00 00 00 00       	mov    eax,0x0
c000dead:	8d 76 00             	lea    esi,[esi+0x0]
c000deb0:	83 c4 1c             	add    esp,0x1c
c000deb3:	c3                   	ret    

c000deb4 <loadACPITables(unsigned char*)>:
c000deb4:	57                   	push   edi
c000deb5:	56                   	push   esi
c000deb6:	53                   	push   ebx
c000deb7:	83 ec 60             	sub    esp,0x60
c000deba:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000debf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dec5:	83 e0 04             	and    eax,0x4
c000dec8:	84 c0                	test   al,al
c000deca:	0f 84 3c 02 00 00    	je     c000e10c <loadACPITables(unsigned char*)+0x258>
c000ded0:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000ded5:	84 c0                	test   al,al
c000ded7:	74 77                	je     c000df50 <loadACPITables(unsigned char*)+0x9c>
c000ded9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dedd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dee1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dee5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dee8:	83 e8 24             	sub    eax,0x24
c000deeb:	c1 e8 03             	shr    eax,0x3
c000deee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000def2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000defa:	66 90                	xchg   ax,ax
c000defc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000df00:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000df04:	0f 8d b6 00 00 00    	jge    c000dfc0 <loadACPITables(unsigned char*)+0x10c>
c000df0a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df0e:	83 c0 24             	add    eax,0x24
c000df11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000df15:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000df19:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000df1d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000df21:	c1 e0 03             	shl    eax,0x3
c000df24:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000df28:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000df2c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000df2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000df31:	89 c1                	mov    ecx,eax
c000df33:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000df38:	8d 50 01             	lea    edx,[eax+0x1]
c000df3b:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000df41:	89 ca                	mov    edx,ecx
c000df43:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000df4a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000df4e:	eb ac                	jmp    c000defc <loadACPITables(unsigned char*)+0x48>
c000df50:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df54:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df58:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df5f:	83 e8 24             	sub    eax,0x24
c000df62:	c1 e8 02             	shr    eax,0x2
c000df65:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df69:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000df71:	8d 76 00             	lea    esi,[esi+0x0]
c000df74:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df78:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000df7c:	7d 42                	jge    c000dfc0 <loadACPITables(unsigned char*)+0x10c>
c000df7e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df82:	83 c0 24             	add    eax,0x24
c000df85:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df8d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000df91:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df95:	c1 e0 02             	shl    eax,0x2
c000df98:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dfa0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dfa2:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000dfa7:	8d 50 01             	lea    edx,[eax+0x1]
c000dfaa:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000dfb0:	89 ca                	mov    edx,ecx
c000dfb2:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000dfb9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000dfbd:	eb b5                	jmp    c000df74 <loadACPITables(unsigned char*)+0xc0>
c000dfbf:	90                   	nop
c000dfc0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dfc8:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000dfcd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dfd1:	0f 8d 39 01 00 00    	jge    c000e110 <loadACPITables(unsigned char*)+0x25c>
c000dfd7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dfdb:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000dfe2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000dfee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dff2:	25 ff 0f 00 00       	and    eax,0xfff
c000dff7:	89 c6                	mov    esi,eax
c000dff9:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000dfff:	83 ec 0c             	sub    esp,0xc
c000e002:	6a 01                	push   0x1
c000e004:	e8 7c b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e010:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e016:	83 ec 0c             	sub    esp,0xc
c000e019:	6a 01                	push   0x1
c000e01b:	6a 01                	push   0x1
c000e01d:	50                   	push   eax
c000e01e:	52                   	push   edx
c000e01f:	53                   	push   ebx
c000e020:	e8 cd bb ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e025:	83 c4 20             	add    esp,0x20
c000e028:	09 f0                	or     eax,esi
c000e02a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e02e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e032:	c1 e0 03             	shl    eax,0x3
c000e035:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e03a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e03e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e042:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e046:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e04e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e05a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e05e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e062:	89 c6                	mov    esi,eax
c000e064:	89 d7                	mov    edi,edx
c000e066:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e068:	89 c8                	mov    eax,ecx
c000e06a:	89 fa                	mov    edx,edi
c000e06c:	89 f3                	mov    ebx,esi
c000e06e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e072:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e07a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e07e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e081:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e085:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e089:	05 00 10 00 00       	add    eax,0x1000
c000e08e:	c1 e8 0c             	shr    eax,0xc
c000e091:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e095:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e099:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e09d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0a1:	25 ff 0f 00 00       	and    eax,0xfff
c000e0a6:	89 c6                	mov    esi,eax
c000e0a8:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e0ae:	83 ec 0c             	sub    esp,0xc
c000e0b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e0b5:	e8 cb b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e0ba:	83 c4 10             	add    esp,0x10
c000e0bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0c1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0c7:	83 ec 0c             	sub    esp,0xc
c000e0ca:	6a 01                	push   0x1
c000e0cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e0d0:	50                   	push   eax
c000e0d1:	52                   	push   edx
c000e0d2:	53                   	push   ebx
c000e0d3:	e8 1a bb ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0d8:	83 c4 20             	add    esp,0x20
c000e0db:	09 f0                	or     eax,esi
c000e0dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0e5:	83 ec 0c             	sub    esp,0xc
c000e0e8:	50                   	push   eax
c000e0e9:	e8 8b b4 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c000e0ee:	83 c4 10             	add    esp,0x10
c000e0f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0f5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e0f9:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000e100:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e104:	e9 bf fe ff ff       	jmp    c000dfc8 <loadACPITables(unsigned char*)+0x114>
c000e109:	8d 76 00             	lea    esi,[esi+0x0]
c000e10c:	90                   	nop
c000e10d:	8d 76 00             	lea    esi,[esi+0x0]
c000e110:	83 c4 60             	add    esp,0x60
c000e113:	5b                   	pop    ebx
c000e114:	5e                   	pop    esi
c000e115:	5f                   	pop    edi
c000e116:	c3                   	ret    
c000e117:	90                   	nop

c000e118 <findRSDT(unsigned char*)>:
c000e118:	57                   	push   edi
c000e119:	56                   	push   esi
c000e11a:	53                   	push   ebx
c000e11b:	83 ec 50             	sub    esp,0x50
c000e11e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e123:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e129:	83 e0 04             	and    eax,0x4
c000e12c:	84 c0                	test   al,al
c000e12e:	75 0c                	jne    c000e13c <findRSDT(unsigned char*)+0x24>
c000e130:	b8 00 00 00 00       	mov    eax,0x0
c000e135:	e9 26 01 00 00       	jmp    c000e260 <findRSDT(unsigned char*)+0x148>
c000e13a:	66 90                	xchg   ax,ax
c000e13c:	89 e0                	mov    eax,esp
c000e13e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e142:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e146:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e14a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e152:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e156:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e15a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e15e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e162:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e166:	89 c6                	mov    esi,eax
c000e168:	89 d7                	mov    edi,edx
c000e16a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e16c:	89 c8                	mov    eax,ecx
c000e16e:	89 fa                	mov    edx,edi
c000e170:	89 f3                	mov    ebx,esi
c000e172:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e176:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e17a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e17e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e182:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e186:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e18e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e192:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e196:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e19e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e1a6:	25 ff 0f 00 00       	and    eax,0xfff
c000e1ab:	89 c6                	mov    esi,eax
c000e1ad:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e1b3:	83 ec 0c             	sub    esp,0xc
c000e1b6:	6a 02                	push   0x2
c000e1b8:	e8 c8 b0 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e1bd:	83 c4 10             	add    esp,0x10
c000e1c0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e1c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1ca:	83 ec 0c             	sub    esp,0xc
c000e1cd:	6a 01                	push   0x1
c000e1cf:	6a 02                	push   0x2
c000e1d1:	50                   	push   eax
c000e1d2:	52                   	push   edx
c000e1d3:	53                   	push   ebx
c000e1d4:	e8 19 ba ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1d9:	83 c4 20             	add    esp,0x20
c000e1dc:	09 f0                	or     eax,esi
c000e1de:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e1e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1e6:	25 ff 0f 00 00       	and    eax,0xfff
c000e1eb:	89 c6                	mov    esi,eax
c000e1ed:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e1f3:	83 ec 0c             	sub    esp,0xc
c000e1f6:	6a 02                	push   0x2
c000e1f8:	e8 88 b0 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e204:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e20a:	83 ec 0c             	sub    esp,0xc
c000e20d:	6a 01                	push   0x1
c000e20f:	6a 02                	push   0x2
c000e211:	50                   	push   eax
c000e212:	52                   	push   edx
c000e213:	53                   	push   ebx
c000e214:	e8 d9 b9 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e219:	83 c4 20             	add    esp,0x20
c000e21c:	09 f0                	or     eax,esi
c000e21e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e222:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e227:	75 13                	jne    c000e23c <findRSDT(unsigned char*)+0x124>
c000e229:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e230:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e234:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e238:	eb 22                	jmp    c000e25c <findRSDT(unsigned char*)+0x144>
c000e23a:	66 90                	xchg   ax,ax
c000e23c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e241:	75 11                	jne    c000e254 <findRSDT(unsigned char*)+0x13c>
c000e243:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e24a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e24e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e252:	eb 08                	jmp    c000e25c <findRSDT(unsigned char*)+0x144>
c000e254:	b8 00 00 00 00       	mov    eax,0x0
c000e259:	eb 05                	jmp    c000e260 <findRSDT(unsigned char*)+0x148>
c000e25b:	90                   	nop
c000e25c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e260:	83 c4 50             	add    esp,0x50
c000e263:	5b                   	pop    ebx
c000e264:	5e                   	pop    esi
c000e265:	5f                   	pop    edi
c000e266:	c3                   	ret    
c000e267:	90                   	nop

c000e268 <findDataTable(unsigned char*, char*)>:
c000e268:	83 ec 1c             	sub    esp,0x1c
c000e26b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e270:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e276:	83 e0 04             	and    eax,0x4
c000e279:	84 c0                	test   al,al
c000e27b:	75 07                	jne    c000e284 <findDataTable(unsigned char*, char*)+0x1c>
c000e27d:	b8 00 00 00 00       	mov    eax,0x0
c000e282:	eb 58                	jmp    c000e2dc <findDataTable(unsigned char*, char*)+0x74>
c000e284:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e28c:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e291:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e295:	7d 3d                	jge    c000e2d4 <findDataTable(unsigned char*, char*)+0x6c>
c000e297:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e29b:	c1 e0 03             	shl    eax,0x3
c000e29e:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e2a3:	83 ec 04             	sub    esp,0x4
c000e2a6:	6a 04                	push   0x4
c000e2a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ac:	50                   	push   eax
c000e2ad:	e8 de 20 ff ff       	call   c0000390 <memcmp>
c000e2b2:	83 c4 10             	add    esp,0x10
c000e2b5:	85 c0                	test   eax,eax
c000e2b7:	0f 94 c0             	sete   al
c000e2ba:	84 c0                	test   al,al
c000e2bc:	74 0e                	je     c000e2cc <findDataTable(unsigned char*, char*)+0x64>
c000e2be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2c2:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e2c9:	eb 11                	jmp    c000e2dc <findDataTable(unsigned char*, char*)+0x74>
c000e2cb:	90                   	nop
c000e2cc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e2d0:	eb ba                	jmp    c000e28c <findDataTable(unsigned char*, char*)+0x24>
c000e2d2:	66 90                	xchg   ax,ax
c000e2d4:	b8 00 00 00 00       	mov    eax,0x0
c000e2d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2dc:	83 c4 1c             	add    esp,0x1c
c000e2df:	c3                   	ret    

c000e2e0 <scanMADT()>:
c000e2e0:	53                   	push   ebx
c000e2e1:	83 ec 38             	sub    esp,0x38
c000e2e4:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e2e9:	25 00 04 00 00       	and    eax,0x400
c000e2ee:	74 14                	je     c000e304 <scanMADT()+0x24>
c000e2f0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e2f5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2fb:	83 e2 fb             	and    edx,0xfffffffb
c000e2fe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e304:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e309:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e30f:	83 e0 04             	and    eax,0x4
c000e312:	84 c0                	test   al,al
c000e314:	0f 84 8a 04 00 00    	je     c000e7a4 <scanMADT()+0x4c4>
c000e31a:	e8 05 fb ff ff       	call   c000de24 <findRSDP()>
c000e31f:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e324:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e329:	85 c0                	test   eax,eax
c000e32b:	75 1b                	jne    c000e348 <scanMADT()+0x68>
c000e32d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e332:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e338:	83 e2 fb             	and    edx,0xfffffffb
c000e33b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e341:	e9 66 04 00 00       	jmp    c000e7ac <scanMADT()+0x4cc>
c000e346:	66 90                	xchg   ax,ax
c000e348:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e34d:	83 ec 0c             	sub    esp,0xc
c000e350:	50                   	push   eax
c000e351:	e8 c2 fd ff ff       	call   c000e118 <findRSDT(unsigned char*)>
c000e356:	83 c4 10             	add    esp,0x10
c000e359:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e35e:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e363:	85 c0                	test   eax,eax
c000e365:	75 19                	jne    c000e380 <scanMADT()+0xa0>
c000e367:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e36c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e372:	83 e2 fb             	and    edx,0xfffffffb
c000e375:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e37b:	e9 2c 04 00 00       	jmp    c000e7ac <scanMADT()+0x4cc>
c000e380:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e385:	83 ec 0c             	sub    esp,0xc
c000e388:	50                   	push   eax
c000e389:	e8 26 fb ff ff       	call   c000deb4 <loadACPITables(unsigned char*)>
c000e38e:	83 c4 10             	add    esp,0x10
c000e391:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e396:	83 ec 08             	sub    esp,0x8
c000e399:	68 58 e5 01 c0       	push   0xc001e558
c000e39e:	50                   	push   eax
c000e39f:	e8 c4 fe ff ff       	call   c000e268 <findDataTable(unsigned char*, char*)>
c000e3a4:	83 c4 10             	add    esp,0x10
c000e3a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e3ab:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e3b0:	75 1a                	jne    c000e3cc <scanMADT()+0xec>
c000e3b2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e3b7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3bd:	83 e2 fe             	and    edx,0xfffffffe
c000e3c0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3c6:	e9 e1 03 00 00       	jmp    c000e7ac <scanMADT()+0x4cc>
c000e3cb:	90                   	nop
c000e3cc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e3d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3db:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e3df:	0f 87 c7 03 00 00    	ja     c000e7ac <scanMADT()+0x4cc>
c000e3e5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e3ed:	0f 87 b9 03 00 00    	ja     c000e7ac <scanMADT()+0x4cc>
c000e3f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3f7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e3fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e402:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e406:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e40a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e40e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e412:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e416:	8d 50 01             	lea    edx,[eax+0x1]
c000e419:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e41d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e421:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e425:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e429:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e42e:	0f 86 74 03 00 00    	jbe    c000e7a8 <scanMADT()+0x4c8>
c000e434:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e439:	75 5d                	jne    c000e498 <scanMADT()+0x1b8>
c000e43b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e43f:	8d 50 01             	lea    edx,[eax+0x1]
c000e442:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e446:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e44c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e452:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e456:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e45a:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e460:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e464:	8d 42 01             	lea    eax,[edx+0x1]
c000e467:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e46b:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e470:	8d 48 01             	lea    ecx,[eax+0x1]
c000e473:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e479:	25 ff 00 00 00       	and    eax,0xff
c000e47e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e482:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e486:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e48c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e491:	e9 f6 02 00 00       	jmp    c000e78c <scanMADT()+0x4ac>
c000e496:	66 90                	xchg   ax,ax
c000e498:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e49d:	0f 85 29 01 00 00    	jne    c000e5cc <scanMADT()+0x2ec>
c000e4a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4a7:	8d 50 01             	lea    edx,[eax+0x1]
c000e4aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4ae:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e4b4:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4ba:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e4be:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e4c2:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e4c8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e4cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4d4:	01 d0                	add    eax,edx
c000e4d6:	83 c0 2c             	add    eax,0x2c
c000e4d9:	8a 00                	mov    al,BYTE PTR [eax]
c000e4db:	31 d2                	xor    edx,edx
c000e4dd:	88 c2                	mov    dl,al
c000e4df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e3:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4ea:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4ee:	25 ff 00 00 00       	and    eax,0xff
c000e4f3:	c1 e0 08             	shl    eax,0x8
c000e4f6:	89 d1                	mov    ecx,edx
c000e4f8:	09 c1                	or     ecx,eax
c000e4fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4fe:	8d 50 02             	lea    edx,[eax+0x2]
c000e501:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e505:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e509:	25 ff 00 00 00       	and    eax,0xff
c000e50e:	c1 e0 10             	shl    eax,0x10
c000e511:	09 c1                	or     ecx,eax
c000e513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e517:	8d 50 03             	lea    edx,[eax+0x3]
c000e51a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e51e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e522:	25 ff 00 00 00       	and    eax,0xff
c000e527:	c1 e0 18             	shl    eax,0x18
c000e52a:	09 c1                	or     ecx,eax
c000e52c:	89 ca                	mov    edx,ecx
c000e52e:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e533:	25 ff 00 00 00       	and    eax,0xff
c000e538:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e53f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e544:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e548:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e54c:	01 d0                	add    eax,edx
c000e54e:	83 c0 2c             	add    eax,0x2c
c000e551:	8a 00                	mov    al,BYTE PTR [eax]
c000e553:	31 d2                	xor    edx,edx
c000e555:	88 c2                	mov    dl,al
c000e557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e55b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e55e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e562:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e566:	25 ff 00 00 00       	and    eax,0xff
c000e56b:	c1 e0 08             	shl    eax,0x8
c000e56e:	89 d1                	mov    ecx,edx
c000e570:	09 c1                	or     ecx,eax
c000e572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e576:	8d 50 02             	lea    edx,[eax+0x2]
c000e579:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e57d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e581:	25 ff 00 00 00       	and    eax,0xff
c000e586:	c1 e0 10             	shl    eax,0x10
c000e589:	09 c1                	or     ecx,eax
c000e58b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e58f:	8d 50 03             	lea    edx,[eax+0x3]
c000e592:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e596:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e59a:	25 ff 00 00 00       	and    eax,0xff
c000e59f:	c1 e0 18             	shl    eax,0x18
c000e5a2:	09 c1                	or     ecx,eax
c000e5a4:	89 ca                	mov    edx,ecx
c000e5a6:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e5ab:	25 ff 00 00 00       	and    eax,0xff
c000e5b0:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e5b7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e5bc:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e5c1:	40                   	inc    eax
c000e5c2:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e5c7:	e9 c0 01 00 00       	jmp    c000e78c <scanMADT()+0x4ac>
c000e5cc:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e5d1:	0f 85 fd 00 00 00    	jne    c000e6d4 <scanMADT()+0x3f4>
c000e5d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5db:	8d 50 01             	lea    edx,[eax+0x1]
c000e5de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5e6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5ea:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e5ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f2:	8d 50 01             	lea    edx,[eax+0x1]
c000e5f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5fd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e601:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e605:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e609:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e60d:	01 d0                	add    eax,edx
c000e60f:	83 c0 2c             	add    eax,0x2c
c000e612:	8a 00                	mov    al,BYTE PTR [eax]
c000e614:	31 d2                	xor    edx,edx
c000e616:	88 c2                	mov    dl,al
c000e618:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e61c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e61f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e623:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e627:	25 ff 00 00 00       	and    eax,0xff
c000e62c:	c1 e0 08             	shl    eax,0x8
c000e62f:	89 d1                	mov    ecx,edx
c000e631:	09 c1                	or     ecx,eax
c000e633:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e637:	8d 50 02             	lea    edx,[eax+0x2]
c000e63a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e63e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e642:	25 ff 00 00 00       	and    eax,0xff
c000e647:	c1 e0 10             	shl    eax,0x10
c000e64a:	09 c1                	or     ecx,eax
c000e64c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e650:	8d 50 03             	lea    edx,[eax+0x3]
c000e653:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e657:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e65b:	25 ff 00 00 00       	and    eax,0xff
c000e660:	c1 e0 18             	shl    eax,0x18
c000e663:	09 c8                	or     eax,ecx
c000e665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e669:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e66e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e672:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e676:	01 d0                	add    eax,edx
c000e678:	83 c0 2c             	add    eax,0x2c
c000e67b:	8a 00                	mov    al,BYTE PTR [eax]
c000e67d:	25 ff 00 00 00       	and    eax,0xff
c000e682:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e686:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e689:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e68d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e691:	81 e2 ff 00 00 00    	and    edx,0xff
c000e697:	c1 e2 08             	shl    edx,0x8
c000e69a:	09 d0                	or     eax,edx
c000e69c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e6a1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e6a6:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e6aa:	25 ff 00 00 00       	and    eax,0xff
c000e6af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6b3:	88 90 e0 f9 01 c0    	mov    BYTE PTR [eax-0x3ffe0620],dl
c000e6b9:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e6bd:	31 d2                	xor    edx,edx
c000e6bf:	88 c2                	mov    dl,al
c000e6c1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e6c6:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e6ce:	e9 b9 00 00 00       	jmp    c000e78c <scanMADT()+0x4ac>
c000e6d3:	90                   	nop
c000e6d4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e6d9:	0f 85 a1 00 00 00    	jne    c000e780 <scanMADT()+0x4a0>
c000e6df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6e3:	8d 50 01             	lea    edx,[eax+0x1]
c000e6e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6ee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6f2:	25 ff 00 00 00       	and    eax,0xff
c000e6f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e6fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e703:	01 d0                	add    eax,edx
c000e705:	83 c0 2c             	add    eax,0x2c
c000e708:	8a 00                	mov    al,BYTE PTR [eax]
c000e70a:	31 d2                	xor    edx,edx
c000e70c:	88 c2                	mov    dl,al
c000e70e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e712:	8d 48 01             	lea    ecx,[eax+0x1]
c000e715:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e719:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e71d:	25 ff 00 00 00       	and    eax,0xff
c000e722:	c1 e0 08             	shl    eax,0x8
c000e725:	09 d0                	or     eax,edx
c000e727:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e72b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e730:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e734:	8d 50 01             	lea    edx,[eax+0x1]
c000e737:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e73b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e73f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e743:	25 ff 00 00 00       	and    eax,0xff
c000e748:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e750:	c1 e0 08             	shl    eax,0x8
c000e753:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e757:	89 c1                	mov    ecx,eax
c000e759:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e75d:	c1 e0 18             	shl    eax,0x18
c000e760:	89 c3                	mov    ebx,eax
c000e762:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e767:	8d 50 01             	lea    edx,[eax+0x1]
c000e76a:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e770:	09 d9                	or     ecx,ebx
c000e772:	89 ca                	mov    edx,ecx
c000e774:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e77b:	eb 0f                	jmp    c000e78c <scanMADT()+0x4ac>
c000e77d:	8d 76 00             	lea    esi,[esi+0x0]
c000e780:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e785:	75 05                	jne    c000e78c <scanMADT()+0x4ac>
c000e787:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e78c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e790:	31 d2                	xor    edx,edx
c000e792:	88 c2                	mov    dl,al
c000e794:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e798:	01 d0                	add    eax,edx
c000e79a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e79e:	e9 31 fc ff ff       	jmp    c000e3d4 <scanMADT()+0xf4>
c000e7a3:	90                   	nop
c000e7a4:	90                   	nop
c000e7a5:	eb 05                	jmp    c000e7ac <scanMADT()+0x4cc>
c000e7a7:	90                   	nop
c000e7a8:	90                   	nop
c000e7a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e7ac:	83 c4 38             	add    esp,0x38
c000e7af:	5b                   	pop    ebx
c000e7b0:	c3                   	ret    
c000e7b1:	90                   	nop
c000e7b2:	66 90                	xchg   ax,ax

c000e7b4 <ACPI::ACPI()>:
c000e7b4:	83 ec 0c             	sub    esp,0xc
c000e7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bb:	83 ec 08             	sub    esp,0x8
c000e7be:	68 5d e5 01 c0       	push   0xc001e55d
c000e7c3:	50                   	push   eax
c000e7c4:	e8 7b d4 ff ff       	call   c000bc44 <Device::Device(char const*)>
c000e7c9:	83 c4 10             	add    esp,0x10
c000e7cc:	ba 94 e6 01 c0       	mov    edx,0xc001e694
c000e7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d5:	89 10                	mov    DWORD PTR [eax],edx
c000e7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7db:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e7fe:	e8 dd fa ff ff       	call   c000e2e0 <scanMADT()>
c000e803:	90                   	nop
c000e804:	83 c4 0c             	add    esp,0xc
c000e807:	c3                   	ret    

c000e808 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e808:	83 ec 2c             	sub    esp,0x2c
c000e80b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e80f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e813:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e817:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e81b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e820:	88 d0                	mov    al,dl
c000e822:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e826:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e82b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e833:	90                   	nop
c000e834:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e838:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e83e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e842:	0f 8d 9c 00 00 00    	jge    c000e8e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e848:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e84c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e850:	83 c2 2a             	add    edx,0x2a
c000e853:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e857:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e85c:	75 7a                	jne    c000e8d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e85e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e862:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e866:	83 c2 2a             	add    edx,0x2a
c000e869:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e86d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e871:	75 65                	jne    c000e8d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e873:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e878:	74 3a                	je     c000e8b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e87a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e87e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e882:	83 c2 2a             	add    edx,0x2a
c000e885:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e889:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e88d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e890:	39 c2                	cmp    edx,eax
c000e892:	74 10                	je     c000e8a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e894:	83 ec 0c             	sub    esp,0xc
c000e897:	68 d8 e4 01 c0       	push   0xc001e4d8
c000e89c:	e8 4e 1a 00 00       	call   c00102ef <KePanic(char const*)>
c000e8a1:	83 c4 10             	add    esp,0x10
c000e8a4:	83 ec 0c             	sub    esp,0xc
c000e8a7:	68 62 e5 01 c0       	push   0xc001e562
c000e8ac:	e8 3e 1a 00 00       	call   c00102ef <KePanic(char const*)>
c000e8b1:	83 c4 10             	add    esp,0x10
c000e8b4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e8b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8c0:	83 c2 2a             	add    edx,0x2a
c000e8c3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e8c7:	8b 02                	mov    eax,DWORD PTR [edx]
c000e8c9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e8cc:	89 01                	mov    DWORD PTR [ecx],eax
c000e8ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e8d1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8d6:	66 90                	xchg   ax,ax
c000e8d8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e8dc:	e9 53 ff ff ff       	jmp    c000e834 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8e4:	90                   	nop
c000e8e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8e9:	83 c4 2c             	add    esp,0x2c
c000e8ec:	c2 04 00             	ret    0x4
c000e8ef:	90                   	nop

c000e8f0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e8f0:	83 ec 1c             	sub    esp,0x1c
c000e8f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8f7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e8fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e8ff:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e904:	88 c8                	mov    al,cl
c000e906:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e90a:	88 d0                	mov    al,dl
c000e90c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e914:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e91a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e91e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e921:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e925:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e929:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e92d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e933:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e937:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e93a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e93e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e947:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e94d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e951:	8d 48 01             	lea    ecx,[eax+0x1]
c000e954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e958:	83 c2 2a             	add    edx,0x2a
c000e95b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e963:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e96d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e970:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e974:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e97c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e982:	8d 50 01             	lea    edx,[eax+0x1]
c000e985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e989:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e98f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e993:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e999:	3d 00 02 00 00       	cmp    eax,0x200
c000e99e:	75 10                	jne    c000e9b0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	68 71 e5 01 c0       	push   0xc001e571
c000e9a8:	e8 42 19 00 00       	call   c00102ef <KePanic(char const*)>
c000e9ad:	83 c4 10             	add    esp,0x10
c000e9b0:	90                   	nop
c000e9b1:	83 c4 1c             	add    esp,0x1c
c000e9b4:	c3                   	ret    
c000e9b5:	90                   	nop
c000e9b6:	66 90                	xchg   ax,ax

c000e9b8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e9b8:	b8 00 00 00 00       	mov    eax,0x0
c000e9bd:	c3                   	ret    
c000e9be:	66 90                	xchg   ax,ax

c000e9c0 <ACPI::detectPCI()>:
c000e9c0:	53                   	push   ebx
c000e9c1:	83 ec 28             	sub    esp,0x28
c000e9c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e9c9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e9ce:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e9d3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e9d9:	83 e0 04             	and    eax,0x4
c000e9dc:	84 c0                	test   al,al
c000e9de:	74 2c                	je     c000ea0c <ACPI::detectPCI()+0x4c>
c000e9e0:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e9e5:	83 ec 08             	sub    esp,0x8
c000e9e8:	68 8e e5 01 c0       	push   0xc001e58e
c000e9ed:	50                   	push   eax
c000e9ee:	e8 75 f8 ff ff       	call   c000e268 <findDataTable(unsigned char*, char*)>
c000e9f3:	83 c4 10             	add    esp,0x10
c000e9f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9fa:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e9ff:	74 0b                	je     c000ea0c <ACPI::detectPCI()+0x4c>
c000ea01:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea06:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea0b:	90                   	nop
c000ea0c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ea14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea18:	8a 00                	mov    al,BYTE PTR [eax]
c000ea1a:	3c 01                	cmp    al,0x1
c000ea1c:	75 0e                	jne    c000ea2c <ACPI::detectPCI()+0x6c>
c000ea1e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea23:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea28:	eb 2a                	jmp    c000ea54 <ACPI::detectPCI()+0x94>
c000ea2a:	66 90                	xchg   ax,ax
c000ea2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea30:	8a 00                	mov    al,BYTE PTR [eax]
c000ea32:	3c 02                	cmp    al,0x2
c000ea34:	75 1e                	jne    c000ea54 <ACPI::detectPCI()+0x94>
c000ea36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea3b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea40:	74 12                	je     c000ea54 <ACPI::detectPCI()+0x94>
c000ea42:	83 ec 0c             	sub    esp,0xc
c000ea45:	68 08 e5 01 c0       	push   0xc001e508
c000ea4a:	e8 a0 18 00 00       	call   c00102ef <KePanic(char const*)>
c000ea4f:	83 c4 10             	add    esp,0x10
c000ea52:	66 90                	xchg   ax,ax
c000ea54:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ea58:	83 f0 01             	xor    eax,0x1
c000ea5b:	84 c0                	test   al,al
c000ea5d:	74 41                	je     c000eaa0 <ACPI::detectPCI()+0xe0>
c000ea5f:	e8 cc 16 ff ff       	call   c0000130 <manualPCIProbe>
c000ea64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea68:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ea6d:	75 0d                	jne    c000ea7c <ACPI::detectPCI()+0xbc>
c000ea6f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea74:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea79:	eb 25                	jmp    c000eaa0 <ACPI::detectPCI()+0xe0>
c000ea7b:	90                   	nop
c000ea7c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ea81:	75 1d                	jne    c000eaa0 <ACPI::detectPCI()+0xe0>
c000ea83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea88:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea8d:	74 11                	je     c000eaa0 <ACPI::detectPCI()+0xe0>
c000ea8f:	83 ec 0c             	sub    esp,0xc
c000ea92:	68 08 e5 01 c0       	push   0xc001e508
c000ea97:	e8 53 18 00 00       	call   c00102ef <KePanic(char const*)>
c000ea9c:	83 c4 10             	add    esp,0x10
c000ea9f:	90                   	nop
c000eaa0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eaa5:	0f 84 85 00 00 00    	je     c000eb30 <ACPI::detectPCI()+0x170>
c000eaab:	83 ec 0c             	sub    esp,0xc
c000eaae:	68 93 e5 01 c0       	push   0xc001e593
c000eab3:	e8 bf 11 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c000eab8:	83 c4 10             	add    esp,0x10
c000eabb:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eac3:	83 ec 0c             	sub    esp,0xc
c000eac6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eaca:	e8 ea 8c ff ff       	call   c00077b9 <malloc>
c000eacf:	83 c4 10             	add    esp,0x10
c000ead2:	89 c3                	mov    ebx,eax
c000ead4:	83 ec 0c             	sub    esp,0xc
c000ead7:	53                   	push   ebx
c000ead8:	e8 ad 9a 00 00       	call   c001858a <PCI::PCI()>
c000eadd:	83 c4 10             	add    esp,0x10
c000eae0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000eae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eae8:	83 ec 08             	sub    esp,0x8
c000eaeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eaef:	50                   	push   eax
c000eaf0:	e8 b7 cf ff ff       	call   c000baac <Device::addChild(Device*)>
c000eaf5:	83 c4 10             	add    esp,0x10
c000eaf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eafc:	8b 00                	mov    eax,DWORD PTR [eax]
c000eafe:	83 c0 08             	add    eax,0x8
c000eb01:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb03:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb08:	74 0a                	je     c000eb14 <ACPI::detectPCI()+0x154>
c000eb0a:	ba 01 00 00 00       	mov    edx,0x1
c000eb0f:	eb 0b                	jmp    c000eb1c <ACPI::detectPCI()+0x15c>
c000eb11:	8d 76 00             	lea    esi,[esi+0x0]
c000eb14:	ba 02 00 00 00       	mov    edx,0x2
c000eb19:	8d 76 00             	lea    esi,[esi+0x0]
c000eb1c:	6a 00                	push   0x0
c000eb1e:	6a 00                	push   0x0
c000eb20:	52                   	push   edx
c000eb21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eb25:	ff d0                	call   eax
c000eb27:	83 c4 10             	add    esp,0x10
c000eb2a:	e9 91 00 00 00       	jmp    c000ebc0 <ACPI::detectPCI()+0x200>
c000eb2f:	90                   	nop
c000eb30:	83 ec 0c             	sub    esp,0xc
c000eb33:	68 ab e5 01 c0       	push   0xc001e5ab
c000eb38:	e8 3a 11 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c000eb3d:	83 c4 10             	add    esp,0x10
c000eb40:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eb47:	83 ec 0c             	sub    esp,0xc
c000eb4a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000eb4e:	e8 66 8c ff ff       	call   c00077b9 <malloc>
c000eb53:	83 c4 10             	add    esp,0x10
c000eb56:	89 c3                	mov    ebx,eax
c000eb58:	83 ec 0c             	sub    esp,0xc
c000eb5b:	53                   	push   ebx
c000eb5c:	e8 55 a5 00 00       	call   c00190b6 <IDE::IDE()>
c000eb61:	83 c4 10             	add    esp,0x10
c000eb64:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb6c:	83 ec 08             	sub    esp,0x8
c000eb6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eb73:	50                   	push   eax
c000eb74:	e8 33 cf ff ff       	call   c000baac <Device::addChild(Device*)>
c000eb79:	83 c4 10             	add    esp,0x10
c000eb7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb80:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eb8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb8e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000eb97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb9b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eba8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebaa:	83 c0 08             	add    eax,0x8
c000ebad:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebaf:	6a 00                	push   0x0
c000ebb1:	6a 00                	push   0x0
c000ebb3:	6a 00                	push   0x0
c000ebb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebb9:	ff d0                	call   eax
c000ebbb:	83 c4 10             	add    esp,0x10
c000ebbe:	66 90                	xchg   ax,ax
c000ebc0:	90                   	nop
c000ebc1:	83 c4 28             	add    esp,0x28
c000ebc4:	5b                   	pop    ebx
c000ebc5:	c3                   	ret    
c000ebc6:	66 90                	xchg   ax,ax

c000ebc8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ebc8:	83 ec 1c             	sub    esp,0x1c
c000ebcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ebcf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ebd2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ebd6:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000ebdc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ebe0:	25 ff 00 00 00       	and    eax,0xff
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	52                   	push   edx
c000ebea:	e8 b7 82 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ebf6:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000ebfc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec00:	25 ff 00 00 00       	and    eax,0xff
c000ec05:	83 ec 04             	sub    esp,0x4
c000ec08:	6a 01                	push   0x1
c000ec0a:	50                   	push   eax
c000ec0b:	52                   	push   edx
c000ec0c:	e8 ab 83 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ec11:	83 c4 10             	add    esp,0x10
c000ec14:	90                   	nop
c000ec15:	83 c4 1c             	add    esp,0x1c
c000ec18:	c3                   	ret    
c000ec19:	90                   	nop
c000ec1a:	66 90                	xchg   ax,ax

c000ec1c <ACPI::sleep()>:
c000ec1c:	83 ec 0c             	sub    esp,0xc
c000ec1f:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000ec24:	85 c0                	test   eax,eax
c000ec26:	74 08                	je     c000ec30 <ACPI::sleep()+0x14>
c000ec28:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000ec2d:	ff d0                	call   eax
c000ec2f:	90                   	nop
c000ec30:	90                   	nop
c000ec31:	83 c4 0c             	add    esp,0xc
c000ec34:	c3                   	ret    
c000ec35:	90                   	nop
c000ec36:	66 90                	xchg   ax,ax

c000ec38 <ACPI::open(int, int, void*)>:
c000ec38:	57                   	push   edi
c000ec39:	56                   	push   esi
c000ec3a:	53                   	push   ebx
c000ec3b:	81 ec 70 01 00 00    	sub    esp,0x170
c000ec41:	83 ec 0c             	sub    esp,0xc
c000ec44:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ec4b:	e8 70 fd ff ff       	call   c000e9c0 <ACPI::detectPCI()>
c000ec50:	83 c4 10             	add    esp,0x10
c000ec53:	83 ec 0c             	sub    esp,0xc
c000ec56:	68 30 e5 01 c0       	push   0xc001e530
c000ec5b:	e8 17 10 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	83 ec 0c             	sub    esp,0xc
c000ec66:	68 c0 e5 01 c0       	push   0xc001e5c0
c000ec6b:	e8 d2 37 00 00       	call   c0012442 <Thr::loadKernelSymbolTable(char const*)>
c000ec70:	83 c4 10             	add    esp,0x10
c000ec73:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ec7b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ec86:	83 ec 0c             	sub    esp,0xc
c000ec89:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ec90:	e8 24 8b ff ff       	call   c00077b9 <malloc>
c000ec95:	83 c4 10             	add    esp,0x10
c000ec98:	89 c3                	mov    ebx,eax
c000ec9a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ec9f:	83 ec 04             	sub    esp,0x4
c000eca2:	50                   	push   eax
c000eca3:	68 de e5 01 c0       	push   0xc001e5de
c000eca8:	53                   	push   ebx
c000eca9:	e8 34 bf ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c000ecae:	83 c4 10             	add    esp,0x10
c000ecb1:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ecb8:	83 ec 08             	sub    esp,0x8
c000ecbb:	6a 01                	push   0x1
c000ecbd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ecc4:	e8 d9 bf ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ecd3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ecdb:	75 17                	jne    c000ecf4 <ACPI::open(int, int, void*)+0xbc>
c000ecdd:	83 ec 0c             	sub    esp,0xc
c000ece0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ece7:	e8 14 c0 ff ff       	call   c000ad00 <File::close()>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	eb 0b                	jmp    c000ecfc <ACPI::open(int, int, void*)+0xc4>
c000ecf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ecfc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ed04:	74 1e                	je     c000ed24 <ACPI::open(int, int, void*)+0xec>
c000ed06:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ed0d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed0f:	83 c0 08             	add    eax,0x8
c000ed12:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed14:	83 ec 0c             	sub    esp,0xc
c000ed17:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed1e:	ff d0                	call   eax
c000ed20:	83 c4 10             	add    esp,0x10
c000ed23:	90                   	nop
c000ed24:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ed2b:	83 f0 01             	xor    eax,0x1
c000ed2e:	84 c0                	test   al,al
c000ed30:	74 42                	je     c000ed74 <ACPI::open(int, int, void*)+0x13c>
c000ed32:	83 ec 0c             	sub    esp,0xc
c000ed35:	68 fc e5 01 c0       	push   0xc001e5fc
c000ed3a:	e8 38 0f 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c000ed3f:	83 c4 10             	add    esp,0x10
c000ed42:	83 ec 04             	sub    esp,0x4
c000ed45:	6a 0c                	push   0xc
c000ed47:	68 17 e6 01 c0       	push   0xc001e617
c000ed4c:	68 28 e6 01 c0       	push   0xc001e628
c000ed51:	e8 dc 2c 00 00       	call   c0011a32 <Reg::readIntWithDefault(char*, char*, int)>
c000ed56:	83 c4 10             	add    esp,0x10
c000ed59:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ed60:	83 ec 0c             	sub    esp,0xc
c000ed63:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ed6a:	e8 20 a7 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ed6f:	83 c4 10             	add    esp,0x10
c000ed72:	66 90                	xchg   ax,ax
c000ed74:	83 ec 0c             	sub    esp,0xc
c000ed77:	68 d7 d5 01 c0       	push   0xc001d5d7
c000ed7c:	e8 f6 0e 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c000ed81:	83 c4 10             	add    esp,0x10
c000ed84:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ed8b:	83 ec 08             	sub    esp,0x8
c000ed8e:	6a 12                	push   0x12
c000ed90:	50                   	push   eax
c000ed91:	e8 2e d0 ff ff       	call   c000bdc4 <getDevicesOfType(DeviceType)>
c000ed96:	83 c4 0c             	add    esp,0xc
c000ed99:	8d 76 00             	lea    esi,[esi+0x0]
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eda6:	50                   	push   eax
c000eda7:	e8 70 dc 00 00       	call   c001ca1c <LinkedList<Device>::isEmpty()>
c000edac:	83 c4 10             	add    esp,0x10
c000edaf:	83 f0 01             	xor    eax,0x1
c000edb2:	84 c0                	test   al,al
c000edb4:	0f 84 46 01 00 00    	je     c000ef00 <ACPI::open(int, int, void*)+0x2c8>
c000edba:	83 ec 0c             	sub    esp,0xc
c000edbd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edc4:	50                   	push   eax
c000edc5:	e8 6e dc 00 00       	call   c001ca38 <LinkedList<Device>::getFirstElement()>
c000edca:	83 c4 10             	add    esp,0x10
c000edcd:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edde:	50                   	push   eax
c000eddf:	e8 5c dc 00 00       	call   c001ca40 <LinkedList<Device>::removeFirst()>
c000ede4:	83 c4 10             	add    esp,0x10
c000ede7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000edee:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000edf5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000edfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ee00:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ee06:	ba 09 00 00 00       	mov    edx,0x9
c000ee0b:	fc                   	cld    
c000ee0c:	89 c7                	mov    edi,eax
c000ee0e:	89 de                	mov    esi,ebx
c000ee10:	89 d1                	mov    ecx,edx
c000ee12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee14:	83 ec 08             	sub    esp,0x8
c000ee17:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ee1b:	50                   	push   eax
c000ee1c:	83 ec 24             	sub    esp,0x24
c000ee1f:	89 e0                	mov    eax,esp
c000ee21:	89 c3                	mov    ebx,eax
c000ee23:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ee27:	ba 09 00 00 00       	mov    edx,0x9
c000ee2c:	89 df                	mov    edi,ebx
c000ee2e:	89 c6                	mov    esi,eax
c000ee30:	89 d1                	mov    ecx,edx
c000ee32:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee34:	e8 33 9c 00 00       	call   c0018a6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ee39:	83 c4 30             	add    esp,0x30
c000ee3c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ee43:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ee4b:	0f 84 4b ff ff ff    	je     c000ed9c <ACPI::open(int, int, void*)+0x164>
c000ee51:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ee5c:	83 ec 0c             	sub    esp,0xc
c000ee5f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ee66:	e8 4e 89 ff ff       	call   c00077b9 <malloc>
c000ee6b:	83 c4 10             	add    esp,0x10
c000ee6e:	89 c3                	mov    ebx,eax
c000ee70:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ee75:	83 ec 04             	sub    esp,0x4
c000ee78:	50                   	push   eax
c000ee79:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee80:	53                   	push   ebx
c000ee81:	e8 5c bd ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c000ee86:	83 c4 10             	add    esp,0x10
c000ee89:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ee90:	83 ec 0c             	sub    esp,0xc
c000ee93:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee9a:	e8 71 c0 ff ff       	call   c000af10 <File::exists()>
c000ee9f:	83 c4 10             	add    esp,0x10
c000eea2:	84 c0                	test   al,al
c000eea4:	74 2a                	je     c000eed0 <ACPI::open(int, int, void*)+0x298>
c000eea6:	83 ec 08             	sub    esp,0x8
c000eea9:	6a 01                	push   0x1
c000eeab:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eeb2:	e8 02 40 00 00       	call   c0012eb9 <Thr::loadDLL(char const*, bool)>
c000eeb7:	83 c4 10             	add    esp,0x10
c000eeba:	83 ec 08             	sub    esp,0x8
c000eebd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eec4:	50                   	push   eax
c000eec5:	e8 20 42 00 00       	call   c00130ea <Thr::executeDLL(unsigned long, void*)>
c000eeca:	83 c4 10             	add    esp,0x10
c000eecd:	8d 76 00             	lea    esi,[esi+0x0]
c000eed0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000eed8:	0f 84 be fe ff ff    	je     c000ed9c <ACPI::open(int, int, void*)+0x164>
c000eede:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000eee5:	8b 00                	mov    eax,DWORD PTR [eax]
c000eee7:	83 c0 08             	add    eax,0x8
c000eeea:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeec:	83 ec 0c             	sub    esp,0xc
c000eeef:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000eef6:	ff d0                	call   eax
c000eef8:	83 c4 10             	add    esp,0x10
c000eefb:	e9 9c fe ff ff       	jmp    c000ed9c <ACPI::open(int, int, void*)+0x164>
c000ef00:	83 ec 0c             	sub    esp,0xc
c000ef03:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ef0a:	50                   	push   eax
c000ef0b:	e8 08 db 00 00       	call   c001ca18 <LinkedList<Device>::~LinkedList()>
c000ef10:	83 c4 10             	add    esp,0x10
c000ef13:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000ef19:	83 ec 08             	sub    esp,0x8
c000ef1c:	6a 01                	push   0x1
c000ef1e:	68 2f e6 01 c0       	push   0xc001e62f
c000ef23:	e8 91 3f 00 00       	call   c0012eb9 <Thr::loadDLL(char const*, bool)>
c000ef28:	83 c4 10             	add    esp,0x10
c000ef2b:	83 ec 08             	sub    esp,0x8
c000ef2e:	53                   	push   ebx
c000ef2f:	50                   	push   eax
c000ef30:	e8 b5 41 00 00       	call   c00130ea <Thr::executeDLL(unsigned long, void*)>
c000ef35:	83 c4 10             	add    esp,0x10
c000ef38:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ef3d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef43:	83 e0 04             	and    eax,0x4
c000ef46:	84 c0                	test   al,al
c000ef48:	0f 84 16 01 00 00    	je     c000f064 <ACPI::open(int, int, void*)+0x42c>
c000ef4e:	83 ec 0c             	sub    esp,0xc
c000ef51:	68 4c e6 01 c0       	push   0xc001e64c
c000ef56:	e8 1c 0d 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c000ef5b:	83 c4 10             	add    esp,0x10
c000ef5e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ef69:	83 ec 0c             	sub    esp,0xc
c000ef6c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ef73:	e8 41 88 ff ff       	call   c00077b9 <malloc>
c000ef78:	83 c4 10             	add    esp,0x10
c000ef7b:	89 c3                	mov    ebx,eax
c000ef7d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ef82:	83 ec 04             	sub    esp,0x4
c000ef85:	50                   	push   eax
c000ef86:	68 69 e6 01 c0       	push   0xc001e669
c000ef8b:	53                   	push   ebx
c000ef8c:	e8 51 bc ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c000ef91:	83 c4 10             	add    esp,0x10
c000ef94:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ef9b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000efa3:	74 1b                	je     c000efc0 <ACPI::open(int, int, void*)+0x388>
c000efa5:	83 ec 0c             	sub    esp,0xc
c000efa8:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000efaf:	e8 5c bf ff ff       	call   c000af10 <File::exists()>
c000efb4:	83 c4 10             	add    esp,0x10
c000efb7:	84 c0                	test   al,al
c000efb9:	74 05                	je     c000efc0 <ACPI::open(int, int, void*)+0x388>
c000efbb:	b0 01                	mov    al,0x1
c000efbd:	eb 05                	jmp    c000efc4 <ACPI::open(int, int, void*)+0x38c>
c000efbf:	90                   	nop
c000efc0:	b0 00                	mov    al,0x0
c000efc2:	66 90                	xchg   ax,ax
c000efc4:	84 c0                	test   al,al
c000efc6:	74 28                	je     c000eff0 <ACPI::open(int, int, void*)+0x3b8>
c000efc8:	83 ec 08             	sub    esp,0x8
c000efcb:	6a 01                	push   0x1
c000efcd:	68 69 e6 01 c0       	push   0xc001e669
c000efd2:	e8 e2 3e 00 00       	call   c0012eb9 <Thr::loadDLL(char const*, bool)>
c000efd7:	83 c4 10             	add    esp,0x10
c000efda:	83 ec 08             	sub    esp,0x8
c000efdd:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000efe4:	50                   	push   eax
c000efe5:	e8 00 41 00 00       	call   c00130ea <Thr::executeDLL(unsigned long, void*)>
c000efea:	83 c4 10             	add    esp,0x10
c000efed:	8d 76 00             	lea    esi,[esi+0x0]
c000eff0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eff8:	74 2a                	je     c000f024 <ACPI::open(int, int, void*)+0x3ec>
c000effa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f002:	74 20                	je     c000f024 <ACPI::open(int, int, void*)+0x3ec>
c000f004:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f00b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f00d:	83 c0 08             	add    eax,0x8
c000f010:	8b 00                	mov    eax,DWORD PTR [eax]
c000f012:	83 ec 0c             	sub    esp,0xc
c000f015:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f01c:	ff d0                	call   eax
c000f01e:	83 c4 10             	add    esp,0x10
c000f021:	8d 76 00             	lea    esi,[esi+0x0]
c000f024:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000f029:	83 ec 08             	sub    esp,0x8
c000f02c:	68 86 e6 01 c0       	push   0xc001e686
c000f031:	50                   	push   eax
c000f032:	e8 31 f2 ff ff       	call   c000e268 <findDataTable(unsigned char*, char*)>
c000f037:	83 c4 10             	add    esp,0x10
c000f03a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f041:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f049:	74 19                	je     c000f064 <ACPI::open(int, int, void*)+0x42c>
c000f04b:	83 ec 08             	sub    esp,0x8
c000f04e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f055:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f05c:	e8 67 fb ff ff       	call   c000ebc8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f061:	83 c4 10             	add    esp,0x10
c000f064:	b8 00 00 00 00       	mov    eax,0x0
c000f069:	81 c4 70 01 00 00    	add    esp,0x170
c000f06f:	5b                   	pop    ebx
c000f070:	5e                   	pop    esi
c000f071:	5f                   	pop    edi
c000f072:	c3                   	ret    
c000f073:	90                   	nop

c000f074 <CPU::close(int, int, void*)>:
c000f074:	31 c0                	xor    eax,eax
c000f076:	c3                   	ret    
c000f077:	90                   	nop

c000f078 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f078:	60                   	pusha  
c000f079:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f07d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f081:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f085:	9c                   	pushf  
c000f086:	fa                   	cli    
c000f087:	0f 09                	wbinvd 
c000f089:	0f 30                	wrmsr  
c000f08b:	9d                   	popf   
c000f08c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f090:	89 02                	mov    DWORD PTR [edx],eax
c000f092:	61                   	popa   
c000f093:	c3                   	ret    

c000f094 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f094:	60                   	pusha  
c000f095:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f099:	9c                   	pushf  
c000f09a:	fa                   	cli    
c000f09b:	0f 09                	wbinvd 
c000f09d:	31 c0                	xor    eax,eax
c000f09f:	31 d2                	xor    edx,edx
c000f0a1:	0f 32                	rdmsr  
c000f0a3:	9d                   	popf   
c000f0a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0a8:	89 02                	mov    DWORD PTR [edx],eax
c000f0aa:	61                   	popa   
c000f0ab:	c3                   	ret    

c000f0ac <CPU::AMD_K6_writeback(int, int, int)>:
c000f0ac:	56                   	push   esi
c000f0ad:	53                   	push   ebx
c000f0ae:	83 ec 10             	sub    esp,0x10
c000f0b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0b5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f0ba:	75 5d                	jne    c000f119 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0bc:	83 f8 08             	cmp    eax,0x8
c000f0bf:	75 09                	jne    c000f0ca <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f0c1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f0c6:	7e 13                	jle    c000f0db <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f0c8:	eb 30                	jmp    c000f0fa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f0ca:	83 f8 06             	cmp    eax,0x6
c000f0cd:	7c 4a                	jl     c000f119 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0cf:	83 f8 07             	cmp    eax,0x7
c000f0d2:	7e 07                	jle    c000f0db <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f0d4:	83 f8 09             	cmp    eax,0x9
c000f0d7:	74 21                	je     c000f0fa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f0d9:	eb 3e                	jmp    c000f119 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0db:	89 e6                	mov    esi,esp
c000f0dd:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000f0e3:	56                   	push   esi
c000f0e4:	c1 eb 15             	shr    ebx,0x15
c000f0e7:	68 82 00 00 c0       	push   0xc0000082
c000f0ec:	83 e3 7e             	and    ebx,0x7e
c000f0ef:	e8 a0 ff ff ff       	call   c000f094 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f0f4:	56                   	push   esi
c000f0f5:	6a 00                	push   0x0
c000f0f7:	53                   	push   ebx
c000f0f8:	eb 12                	jmp    c000f10c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f0fa:	89 e3                	mov    ebx,esp
c000f0fc:	53                   	push   ebx
c000f0fd:	68 82 00 00 c0       	push   0xc0000082
c000f102:	e8 8d ff ff ff       	call   c000f094 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f107:	53                   	push   ebx
c000f108:	6a 00                	push   0x0
c000f10a:	6a 00                	push   0x0
c000f10c:	68 82 00 00 c0       	push   0xc0000082
c000f111:	e8 62 ff ff ff       	call   c000f078 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f116:	83 c4 18             	add    esp,0x18
c000f119:	83 c4 10             	add    esp,0x10
c000f11c:	5b                   	pop    ebx
c000f11d:	5e                   	pop    esi
c000f11e:	c3                   	ret    
c000f11f:	90                   	nop

c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f120:	55                   	push   ebp
c000f121:	57                   	push   edi
c000f122:	56                   	push   esi
c000f123:	53                   	push   ebx
c000f124:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f128:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f12c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f130:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f134:	39 05 f0 f9 01 c0    	cmp    DWORD PTR ds:0xc001f9f0,eax
c000f13a:	75 23                	jne    c000f15f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f13c:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000f141:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f145:	89 06                	mov    DWORD PTR [esi],eax
c000f147:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000f14c:	89 07                	mov    DWORD PTR [edi],eax
c000f14e:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000f153:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f156:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000f15b:	89 02                	mov    DWORD PTR [edx],eax
c000f15d:	eb 3f                	jmp    c000f19e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f15f:	31 c9                	xor    ecx,ecx
c000f161:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f165:	0f a2                	cpuid  
c000f167:	89 06                	mov    DWORD PTR [esi],eax
c000f169:	89 1f                	mov    DWORD PTR [edi],ebx
c000f16b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f16f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f172:	89 10                	mov    DWORD PTR [eax],edx
c000f174:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f178:	a3 f0 f9 01 c0       	mov    ds:0xc001f9f0,eax
c000f17d:	8b 06                	mov    eax,DWORD PTR [esi]
c000f17f:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f184:	8b 07                	mov    eax,DWORD PTR [edi]
c000f186:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f18b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f18e:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f193:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f197:	8b 00                	mov    eax,DWORD PTR [eax]
c000f199:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f19e:	5b                   	pop    ebx
c000f19f:	5e                   	pop    esi
c000f1a0:	5f                   	pop    edi
c000f1a1:	5d                   	pop    ebp
c000f1a2:	c3                   	ret    
c000f1a3:	90                   	nop

c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>:
c000f1a4:	83 ec 10             	sub    esp,0x10
c000f1a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1ab:	50                   	push   eax
c000f1ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1b0:	50                   	push   eax
c000f1b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1b5:	50                   	push   eax
c000f1b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1ba:	50                   	push   eax
c000f1bb:	6a 01                	push   0x1
c000f1bd:	e8 5e ff ff ff       	call   c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1c6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f1ca:	0f 95 c0             	setne  al
c000f1cd:	83 c4 24             	add    esp,0x24
c000f1d0:	c3                   	ret    
c000f1d1:	90                   	nop

c000f1d2 <CPU::cpuidCheckECX(unsigned int)>:
c000f1d2:	83 ec 10             	sub    esp,0x10
c000f1d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1d9:	50                   	push   eax
c000f1da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1de:	50                   	push   eax
c000f1df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1e3:	50                   	push   eax
c000f1e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1e8:	50                   	push   eax
c000f1e9:	6a 01                	push   0x1
c000f1eb:	e8 30 ff ff ff       	call   c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1f4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f1f8:	0f 95 c0             	setne  al
c000f1fb:	83 c4 24             	add    esp,0x24
c000f1fe:	c3                   	ret    
c000f1ff:	90                   	nop

c000f200 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f200:	83 ec 10             	sub    esp,0x10
c000f203:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f207:	50                   	push   eax
c000f208:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f20c:	50                   	push   eax
c000f20d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f211:	50                   	push   eax
c000f212:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f216:	50                   	push   eax
c000f217:	6a 07                	push   0x7
c000f219:	e8 02 ff ff ff       	call   c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f21e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f222:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f226:	0f 95 c0             	setne  al
c000f229:	83 c4 24             	add    esp,0x24
c000f22c:	c3                   	ret    
c000f22d:	90                   	nop

c000f22e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f22e:	83 ec 10             	sub    esp,0x10
c000f231:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f235:	50                   	push   eax
c000f236:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f23a:	50                   	push   eax
c000f23b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f23f:	50                   	push   eax
c000f240:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f244:	50                   	push   eax
c000f245:	6a 07                	push   0x7
c000f247:	e8 d4 fe ff ff       	call   c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f24c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f250:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f254:	0f 95 c0             	setne  al
c000f257:	83 c4 24             	add    esp,0x24
c000f25a:	c3                   	ret    
c000f25b:	90                   	nop

c000f25c <CPU::CPU()>:
c000f25c:	83 ec 0c             	sub    esp,0xc
c000f25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f263:	83 ec 08             	sub    esp,0x8
c000f266:	68 a9 e7 01 c0       	push   0xc001e7a9
c000f26b:	50                   	push   eax
c000f26c:	e8 d3 c9 ff ff       	call   c000bc44 <Device::Device(char const*)>
c000f271:	83 c4 10             	add    esp,0x10
c000f274:	ba 30 e8 01 c0       	mov    edx,0xc001e830
c000f279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f27d:	89 10                	mov    DWORD PTR [eax],edx
c000f27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f283:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f28d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f291:	05 78 01 00 00       	add    eax,0x178
c000f296:	83 ec 0c             	sub    esp,0xc
c000f299:	50                   	push   eax
c000f29a:	e8 db 7d ff ff       	call   c000707a <GDT::GDT()>
c000f29f:	83 c4 10             	add    esp,0x10
c000f2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a6:	05 7c 09 00 00       	add    eax,0x97c
c000f2ab:	83 ec 0c             	sub    esp,0xc
c000f2ae:	50                   	push   eax
c000f2af:	e8 00 80 ff ff       	call   c00072b4 <IDT::IDT()>
c000f2b4:	83 c4 10             	add    esp,0x10
c000f2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2bb:	05 7c 11 00 00       	add    eax,0x117c
c000f2c0:	83 ec 0c             	sub    esp,0xc
c000f2c3:	50                   	push   eax
c000f2c4:	e8 ff 98 ff ff       	call   c0008bc8 <TSS::TSS()>
c000f2c9:	83 c4 10             	add    esp,0x10
c000f2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2d0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f2d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2db:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f2e5:	90                   	nop
c000f2e6:	83 c4 0c             	add    esp,0xc
c000f2e9:	c3                   	ret    

c000f2ea <CPU::displayFeatures()>:
c000f2ea:	c3                   	ret    
c000f2eb:	90                   	nop

c000f2ec <CPU::detectFeatures()>:
c000f2ec:	55                   	push   ebp
c000f2ed:	57                   	push   edi
c000f2ee:	56                   	push   esi
c000f2ef:	53                   	push   ebx
c000f2f0:	83 ec 30             	sub    esp,0x30
c000f2f3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f2f7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f301:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f308:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f30e:	6a 0d                	push   0xd
c000f310:	6a 00                	push   0x0
c000f312:	55                   	push   ebp
c000f313:	e8 b8 11 ff ff       	call   c00004d0 <memset>
c000f318:	83 c4 10             	add    esp,0x10
c000f31b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f320:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f327:	0f 84 d5 05 00 00    	je     c000f902 <CPU::detectFeatures()+0x616>
c000f32d:	83 ec 0c             	sub    esp,0xc
c000f330:	89 ef                	mov    edi,ebp
c000f332:	6a 10                	push   0x10
c000f334:	e8 6b fe ff ff       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c000f339:	83 e0 01             	and    eax,0x1
c000f33c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f33f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f345:	83 e0 fd             	and    eax,0xfffffffd
c000f348:	09 d0                	or     eax,edx
c000f34a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f350:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f357:	e8 48 fe ff ff       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c000f35c:	83 e0 01             	and    eax,0x1
c000f35f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f366:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f36c:	83 e0 fb             	and    eax,0xfffffffb
c000f36f:	09 d0                	or     eax,edx
c000f371:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f377:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f37e:	e8 21 fe ff ff       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c000f383:	83 e0 01             	and    eax,0x1
c000f386:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f38d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f393:	83 e0 f7             	and    eax,0xfffffff7
c000f396:	09 d0                	or     eax,edx
c000f398:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f39e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f3a5:	e8 fa fd ff ff       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c000f3aa:	83 e0 01             	and    eax,0x1
c000f3ad:	c1 e0 04             	shl    eax,0x4
c000f3b0:	88 c2                	mov    dl,al
c000f3b2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3b8:	83 e0 ef             	and    eax,0xffffffef
c000f3bb:	09 d0                	or     eax,edx
c000f3bd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3c3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f3ca:	e8 d5 fd ff ff       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c000f3cf:	83 e0 01             	and    eax,0x1
c000f3d2:	c1 e0 05             	shl    eax,0x5
c000f3d5:	88 c2                	mov    dl,al
c000f3d7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3dd:	83 e0 df             	and    eax,0xffffffdf
c000f3e0:	09 d0                	or     eax,edx
c000f3e2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3e8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f3ef:	e8 b0 fd ff ff       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c000f3f4:	83 e0 01             	and    eax,0x1
c000f3f7:	8d 14 00             	lea    edx,[eax+eax*1]
c000f3fa:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f400:	83 e0 fd             	and    eax,0xfffffffd
c000f403:	09 d0                	or     eax,edx
c000f405:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f40b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f412:	e8 8d fd ff ff       	call   c000f1a4 <CPU::cpuidCheckEDX(unsigned int)>
c000f417:	83 e0 01             	and    eax,0x1
c000f41a:	c1 e0 06             	shl    eax,0x6
c000f41d:	88 c2                	mov    dl,al
c000f41f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f425:	83 e0 bf             	and    eax,0xffffffbf
c000f428:	09 d0                	or     eax,edx
c000f42a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f430:	58                   	pop    eax
c000f431:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f435:	50                   	push   eax
c000f436:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f43a:	50                   	push   eax
c000f43b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f43f:	56                   	push   esi
c000f440:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f444:	50                   	push   eax
c000f445:	6a 00                	push   0x0
c000f447:	e8 d4 fc ff ff       	call   c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f44c:	b8 04 00 00 00       	mov    eax,0x4
c000f451:	89 c1                	mov    ecx,eax
c000f453:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f455:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f45b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f45f:	89 c1                	mov    ecx,eax
c000f461:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f463:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f469:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f46d:	89 c1                	mov    ecx,eax
c000f46f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f471:	83 c4 18             	add    esp,0x18
c000f474:	68 b8 e6 01 c0       	push   0xc001e6b8
c000f479:	55                   	push   ebp
c000f47a:	e8 61 12 ff ff       	call   c00006e0 <strcmp>
c000f47f:	83 c4 10             	add    esp,0x10
c000f482:	85 c0                	test   eax,eax
c000f484:	75 0f                	jne    c000f495 <CPU::detectFeatures()+0x1a9>
c000f486:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f490:	e9 22 02 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f495:	50                   	push   eax
c000f496:	50                   	push   eax
c000f497:	68 c5 e6 01 c0       	push   0xc001e6c5
c000f49c:	55                   	push   ebp
c000f49d:	e8 3e 12 ff ff       	call   c00006e0 <strcmp>
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	85 c0                	test   eax,eax
c000f4a7:	74 dd                	je     c000f486 <CPU::detectFeatures()+0x19a>
c000f4a9:	50                   	push   eax
c000f4aa:	50                   	push   eax
c000f4ab:	68 d2 e6 01 c0       	push   0xc001e6d2
c000f4b0:	55                   	push   ebp
c000f4b1:	e8 2a 12 ff ff       	call   c00006e0 <strcmp>
c000f4b6:	83 c4 10             	add    esp,0x10
c000f4b9:	85 c0                	test   eax,eax
c000f4bb:	74 2a                	je     c000f4e7 <CPU::detectFeatures()+0x1fb>
c000f4bd:	50                   	push   eax
c000f4be:	50                   	push   eax
c000f4bf:	68 df e6 01 c0       	push   0xc001e6df
c000f4c4:	55                   	push   ebp
c000f4c5:	e8 16 12 ff ff       	call   c00006e0 <strcmp>
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	85 c0                	test   eax,eax
c000f4cf:	74 16                	je     c000f4e7 <CPU::detectFeatures()+0x1fb>
c000f4d1:	50                   	push   eax
c000f4d2:	50                   	push   eax
c000f4d3:	68 ec e6 01 c0       	push   0xc001e6ec
c000f4d8:	55                   	push   ebp
c000f4d9:	e8 02 12 ff ff       	call   c00006e0 <strcmp>
c000f4de:	83 c4 10             	add    esp,0x10
c000f4e1:	85 c0                	test   eax,eax
c000f4e3:	74 48                	je     c000f52d <CPU::detectFeatures()+0x241>
c000f4e5:	eb 0f                	jmp    c000f4f6 <CPU::detectFeatures()+0x20a>
c000f4e7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f4f1:	e9 c1 01 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f4f6:	50                   	push   eax
c000f4f7:	50                   	push   eax
c000f4f8:	68 f9 e6 01 c0       	push   0xc001e6f9
c000f4fd:	55                   	push   ebp
c000f4fe:	e8 dd 11 ff ff       	call   c00006e0 <strcmp>
c000f503:	83 c4 10             	add    esp,0x10
c000f506:	85 c0                	test   eax,eax
c000f508:	74 23                	je     c000f52d <CPU::detectFeatures()+0x241>
c000f50a:	57                   	push   edi
c000f50b:	57                   	push   edi
c000f50c:	68 06 e7 01 c0       	push   0xc001e706
c000f511:	55                   	push   ebp
c000f512:	e8 c9 11 ff ff       	call   c00006e0 <strcmp>
c000f517:	83 c4 10             	add    esp,0x10
c000f51a:	85 c0                	test   eax,eax
c000f51c:	75 1e                	jne    c000f53c <CPU::detectFeatures()+0x250>
c000f51e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f528:	e9 8a 01 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f52d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f537:	e9 7b 01 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f53c:	56                   	push   esi
c000f53d:	56                   	push   esi
c000f53e:	68 13 e7 01 c0       	push   0xc001e713
c000f543:	55                   	push   ebp
c000f544:	e8 97 11 ff ff       	call   c00006e0 <strcmp>
c000f549:	83 c4 10             	add    esp,0x10
c000f54c:	85 c0                	test   eax,eax
c000f54e:	75 0f                	jne    c000f55f <CPU::detectFeatures()+0x273>
c000f550:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f55a:	e9 58 01 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f55f:	51                   	push   ecx
c000f560:	51                   	push   ecx
c000f561:	68 d2 e6 01 c0       	push   0xc001e6d2
c000f566:	55                   	push   ebp
c000f567:	e8 74 11 ff ff       	call   c00006e0 <strcmp>
c000f56c:	83 c4 10             	add    esp,0x10
c000f56f:	85 c0                	test   eax,eax
c000f571:	75 0f                	jne    c000f582 <CPU::detectFeatures()+0x296>
c000f573:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f57d:	e9 35 01 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f582:	52                   	push   edx
c000f583:	52                   	push   edx
c000f584:	68 20 e7 01 c0       	push   0xc001e720
c000f589:	55                   	push   ebp
c000f58a:	e8 51 11 ff ff       	call   c00006e0 <strcmp>
c000f58f:	83 c4 10             	add    esp,0x10
c000f592:	85 c0                	test   eax,eax
c000f594:	75 0f                	jne    c000f5a5 <CPU::detectFeatures()+0x2b9>
c000f596:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f5a0:	e9 12 01 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f5a5:	50                   	push   eax
c000f5a6:	50                   	push   eax
c000f5a7:	68 2d e7 01 c0       	push   0xc001e72d
c000f5ac:	55                   	push   ebp
c000f5ad:	e8 2e 11 ff ff       	call   c00006e0 <strcmp>
c000f5b2:	83 c4 10             	add    esp,0x10
c000f5b5:	85 c0                	test   eax,eax
c000f5b7:	75 0f                	jne    c000f5c8 <CPU::detectFeatures()+0x2dc>
c000f5b9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f5c3:	e9 ef 00 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f5c8:	50                   	push   eax
c000f5c9:	50                   	push   eax
c000f5ca:	68 3a e7 01 c0       	push   0xc001e73a
c000f5cf:	55                   	push   ebp
c000f5d0:	e8 0b 11 ff ff       	call   c00006e0 <strcmp>
c000f5d5:	83 c4 10             	add    esp,0x10
c000f5d8:	85 c0                	test   eax,eax
c000f5da:	75 0f                	jne    c000f5eb <CPU::detectFeatures()+0x2ff>
c000f5dc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f5e6:	e9 cc 00 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f5eb:	50                   	push   eax
c000f5ec:	50                   	push   eax
c000f5ed:	68 47 e7 01 c0       	push   0xc001e747
c000f5f2:	55                   	push   ebp
c000f5f3:	e8 e8 10 ff ff       	call   c00006e0 <strcmp>
c000f5f8:	83 c4 10             	add    esp,0x10
c000f5fb:	85 c0                	test   eax,eax
c000f5fd:	75 0f                	jne    c000f60e <CPU::detectFeatures()+0x322>
c000f5ff:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f609:	e9 a9 00 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f60e:	50                   	push   eax
c000f60f:	50                   	push   eax
c000f610:	68 54 e7 01 c0       	push   0xc001e754
c000f615:	55                   	push   ebp
c000f616:	e8 c5 10 ff ff       	call   c00006e0 <strcmp>
c000f61b:	83 c4 10             	add    esp,0x10
c000f61e:	85 c0                	test   eax,eax
c000f620:	75 0f                	jne    c000f631 <CPU::detectFeatures()+0x345>
c000f622:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f62c:	e9 86 00 00 00       	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f631:	50                   	push   eax
c000f632:	50                   	push   eax
c000f633:	68 61 e7 01 c0       	push   0xc001e761
c000f638:	55                   	push   ebp
c000f639:	e8 a2 10 ff ff       	call   c00006e0 <strcmp>
c000f63e:	83 c4 10             	add    esp,0x10
c000f641:	85 c0                	test   eax,eax
c000f643:	75 0c                	jne    c000f651 <CPU::detectFeatures()+0x365>
c000f645:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f64f:	eb 66                	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f651:	50                   	push   eax
c000f652:	50                   	push   eax
c000f653:	68 6e e7 01 c0       	push   0xc001e76e
c000f658:	55                   	push   ebp
c000f659:	e8 82 10 ff ff       	call   c00006e0 <strcmp>
c000f65e:	83 c4 10             	add    esp,0x10
c000f661:	85 c0                	test   eax,eax
c000f663:	75 0c                	jne    c000f671 <CPU::detectFeatures()+0x385>
c000f665:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f66f:	eb 46                	jmp    c000f6b7 <CPU::detectFeatures()+0x3cb>
c000f671:	57                   	push   edi
c000f672:	57                   	push   edi
c000f673:	68 7b e7 01 c0       	push   0xc001e77b
c000f678:	55                   	push   ebp
c000f679:	e8 62 10 ff ff       	call   c00006e0 <strcmp>
c000f67e:	83 c4 10             	add    esp,0x10
c000f681:	85 c0                	test   eax,eax
c000f683:	74 e0                	je     c000f665 <CPU::detectFeatures()+0x379>
c000f685:	56                   	push   esi
c000f686:	56                   	push   esi
c000f687:	68 88 e7 01 c0       	push   0xc001e788
c000f68c:	55                   	push   ebp
c000f68d:	e8 4e 10 ff ff       	call   c00006e0 <strcmp>
c000f692:	83 c4 10             	add    esp,0x10
c000f695:	85 c0                	test   eax,eax
c000f697:	74 cc                	je     c000f665 <CPU::detectFeatures()+0x379>
c000f699:	51                   	push   ecx
c000f69a:	51                   	push   ecx
c000f69b:	68 95 e7 01 c0       	push   0xc001e795
c000f6a0:	55                   	push   ebp
c000f6a1:	e8 3a 10 ff ff       	call   c00006e0 <strcmp>
c000f6a6:	83 c4 10             	add    esp,0x10
c000f6a9:	85 c0                	test   eax,eax
c000f6ab:	74 b8                	je     c000f665 <CPU::detectFeatures()+0x379>
c000f6ad:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f6b7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f6bc:	0f 86 be 00 00 00    	jbe    c000f780 <CPU::detectFeatures()+0x494>
c000f6c2:	83 ec 0c             	sub    esp,0xc
c000f6c5:	68 80 00 00 00       	push   0x80
c000f6ca:	e8 31 fb ff ff       	call   c000f200 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6cf:	83 e0 01             	and    eax,0x1
c000f6d2:	c1 e0 06             	shl    eax,0x6
c000f6d5:	88 c2                	mov    dl,al
c000f6d7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f6dd:	83 e0 bf             	and    eax,0xffffffbf
c000f6e0:	09 d0                	or     eax,edx
c000f6e2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f6e8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f6ef:	e8 0c fb ff ff       	call   c000f200 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6f4:	83 e0 01             	and    eax,0x1
c000f6f7:	c1 e0 04             	shl    eax,0x4
c000f6fa:	88 c2                	mov    dl,al
c000f6fc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f702:	83 e0 ef             	and    eax,0xffffffef
c000f705:	09 d0                	or     eax,edx
c000f707:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f70d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f714:	e8 e7 fa ff ff       	call   c000f200 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f719:	c1 e0 07             	shl    eax,0x7
c000f71c:	88 c2                	mov    dl,al
c000f71e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f724:	83 e0 7f             	and    eax,0x7f
c000f727:	09 d0                	or     eax,edx
c000f729:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f72f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f736:	e8 f3 fa ff ff       	call   c000f22e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f73b:	83 e0 01             	and    eax,0x1
c000f73e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f745:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f74b:	83 e0 f7             	and    eax,0xfffffff7
c000f74e:	09 d0                	or     eax,edx
c000f750:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f756:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f75d:	e8 cc fa ff ff       	call   c000f22e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f762:	83 c4 10             	add    esp,0x10
c000f765:	83 e0 01             	and    eax,0x1
c000f768:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f76f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f775:	83 e0 fb             	and    eax,0xfffffffb
c000f778:	09 d0                	or     eax,edx
c000f77a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f780:	83 ec 0c             	sub    esp,0xc
c000f783:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f787:	50                   	push   eax
c000f788:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f78c:	50                   	push   eax
c000f78d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f791:	56                   	push   esi
c000f792:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f796:	50                   	push   eax
c000f797:	6a 01                	push   0x1
c000f799:	e8 82 f9 ff ff       	call   c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f79e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f7a2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f7a8:	88 ca                	mov    dl,cl
c000f7aa:	83 e0 f0             	and    eax,0xfffffff0
c000f7ad:	83 e2 0f             	and    edx,0xf
c000f7b0:	09 d0                	or     eax,edx
c000f7b2:	88 ca                	mov    dl,cl
c000f7b4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f7ba:	c0 ea 04             	shr    dl,0x4
c000f7bd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f7c1:	0f b6 c2             	movzx  eax,dl
c000f7c4:	83 c4 20             	add    esp,0x20
c000f7c7:	c1 e0 06             	shl    eax,0x6
c000f7ca:	89 c7                	mov    edi,eax
c000f7cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f7d2:	66 25 3f c0          	and    ax,0xc03f
c000f7d6:	09 f8                	or     eax,edi
c000f7d8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f7df:	89 c8                	mov    eax,ecx
c000f7e1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f7e8:	c1 e8 08             	shr    eax,0x8
c000f7eb:	83 e5 3f             	and    ebp,0x3f
c000f7ee:	83 e0 0f             	and    eax,0xf
c000f7f1:	89 c7                	mov    edi,eax
c000f7f3:	c1 e7 06             	shl    edi,0x6
c000f7f6:	09 ef                	or     edi,ebp
c000f7f8:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f7ff:	89 fa                	mov    edx,edi
c000f801:	83 e5 c0             	and    ebp,0xffffffc0
c000f804:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f80a:	88 c2                	mov    dl,al
c000f80c:	c0 ea 02             	shr    dl,0x2
c000f80f:	89 d7                	mov    edi,edx
c000f811:	09 ef                	or     edi,ebp
c000f813:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f819:	89 fa                	mov    edx,edi
c000f81b:	83 e5 cf             	and    ebp,0xffffffcf
c000f81e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f824:	89 cf                	mov    edi,ecx
c000f826:	c1 ef 0c             	shr    edi,0xc
c000f829:	83 e7 03             	and    edi,0x3
c000f82c:	c1 e7 04             	shl    edi,0x4
c000f82f:	09 ef                	or     edi,ebp
c000f831:	3c 06                	cmp    al,0x6
c000f833:	89 fa                	mov    edx,edi
c000f835:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f83b:	74 04                	je     c000f841 <CPU::detectFeatures()+0x555>
c000f83d:	3c 0f                	cmp    al,0xf
c000f83f:	75 5c                	jne    c000f89d <CPU::detectFeatures()+0x5b1>
c000f841:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f845:	89 cf                	mov    edi,ecx
c000f847:	c1 ef 10             	shr    edi,0x10
c000f84a:	c1 e7 04             	shl    edi,0x4
c000f84d:	09 fa                	or     edx,edi
c000f84f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f855:	0f b6 d2             	movzx  edx,dl
c000f858:	66 81 e7 3f c0       	and    di,0xc03f
c000f85d:	c1 e2 06             	shl    edx,0x6
c000f860:	09 fa                	or     edx,edi
c000f862:	3c 0f                	cmp    al,0xf
c000f864:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f86b:	75 30                	jne    c000f89d <CPU::detectFeatures()+0x5b1>
c000f86d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f873:	c1 e9 14             	shr    ecx,0x14
c000f876:	83 e0 3f             	and    eax,0x3f
c000f879:	83 c1 0f             	add    ecx,0xf
c000f87c:	88 ca                	mov    dl,cl
c000f87e:	c0 e9 02             	shr    cl,0x2
c000f881:	c1 e2 06             	shl    edx,0x6
c000f884:	09 d0                	or     eax,edx
c000f886:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f88c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f892:	83 e0 c0             	and    eax,0xffffffc0
c000f895:	09 c1                	or     ecx,eax
c000f897:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f89d:	83 ec 0c             	sub    esp,0xc
c000f8a0:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f8a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8ab:	50                   	push   eax
c000f8ac:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f8b0:	55                   	push   ebp
c000f8b1:	56                   	push   esi
c000f8b2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f8b6:	57                   	push   edi
c000f8b7:	68 00 00 00 80       	push   0x80000000
c000f8bc:	e8 5f f8 ff ff       	call   c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8c1:	83 c4 20             	add    esp,0x20
c000f8c4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f8cc:	76 22                	jbe    c000f8f0 <CPU::detectFeatures()+0x604>
c000f8ce:	83 ec 0c             	sub    esp,0xc
c000f8d1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8d5:	50                   	push   eax
c000f8d6:	55                   	push   ebp
c000f8d7:	56                   	push   esi
c000f8d8:	57                   	push   edi
c000f8d9:	68 01 00 00 80       	push   0x80000001
c000f8de:	e8 3d f8 ff ff       	call   c000f120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8e3:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f8ed:	83 c4 20             	add    esp,0x20
c000f8f0:	52                   	push   edx
c000f8f1:	52                   	push   edx
c000f8f2:	68 a1 e7 01 c0       	push   0xc001e7a1
c000f8f7:	53                   	push   ebx
c000f8f8:	e8 39 c3 ff ff       	call   c000bc36 <Device::setName(char const*)>
c000f8fd:	83 c4 10             	add    esp,0x10
c000f900:	eb 67                	jmp    c000f969 <CPU::detectFeatures()+0x67d>
c000f902:	50                   	push   eax
c000f903:	50                   	push   eax
c000f904:	68 06 e7 01 c0       	push   0xc001e706
c000f909:	55                   	push   ebp
c000f90a:	e8 f1 0c ff ff       	call   c0000600 <strcpy>
c000f90f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f919:	e8 a5 08 ff ff       	call   c00001c3 <is486>
c000f91e:	83 c4 10             	add    esp,0x10
c000f921:	85 c0                	test   eax,eax
c000f923:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f929:	74 1d                	je     c000f948 <CPU::detectFeatures()+0x65c>
c000f92b:	83 c8 07             	or     eax,0x7
c000f92e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f934:	0f 20 c0             	mov    eax,cr0
c000f937:	83 e0 14             	and    eax,0x14
c000f93a:	83 f8 04             	cmp    eax,0x4
c000f93d:	75 0e                	jne    c000f94d <CPU::detectFeatures()+0x661>
c000f93f:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f946:	eb 21                	jmp    c000f969 <CPU::detectFeatures()+0x67d>
c000f948:	83 e0 f8             	and    eax,0xfffffff8
c000f94b:	eb e1                	jmp    c000f92e <CPU::detectFeatures()+0x642>
c000f94d:	e8 4c 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f952:	83 e0 01             	and    eax,0x1
c000f955:	8d 14 00             	lea    edx,[eax+eax*1]
c000f958:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f95e:	83 e0 fd             	and    eax,0xfffffffd
c000f961:	09 d0                	or     eax,edx
c000f963:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f969:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f970:	74 0e                	je     c000f980 <CPU::detectFeatures()+0x694>
c000f972:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f977:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f97e:	eb 20                	jmp    c000f9a0 <CPU::detectFeatures()+0x6b4>
c000f980:	e8 19 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f985:	83 e0 01             	and    eax,0x1
c000f988:	8d 14 00             	lea    edx,[eax+eax*1]
c000f98b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f991:	83 e0 fd             	and    eax,0xfffffffd
c000f994:	09 d0                	or     eax,edx
c000f996:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f99c:	a8 02                	test   al,0x2
c000f99e:	75 d2                	jne    c000f972 <CPU::detectFeatures()+0x686>
c000f9a0:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f9a7:	83 c4 2c             	add    esp,0x2c
c000f9aa:	5b                   	pop    ebx
c000f9ab:	5e                   	pop    esi
c000f9ac:	5f                   	pop    edi
c000f9ad:	5d                   	pop    ebp
c000f9ae:	c3                   	ret    
c000f9af:	90                   	nop

c000f9b0 <CPU::setupSMEP()>:
c000f9b0:	0f 20 e0             	mov    eax,cr4
c000f9b3:	0d 00 00 10 00       	or     eax,0x100000
c000f9b8:	0f 22 e0             	mov    cr4,eax
c000f9bb:	c3                   	ret    

c000f9bc <CPU::setupUMIP()>:
c000f9bc:	0f 20 e0             	mov    eax,cr4
c000f9bf:	80 cc 08             	or     ah,0x8
c000f9c2:	0f 22 e0             	mov    cr4,eax
c000f9c5:	c3                   	ret    

c000f9c6 <CPU::setupTSC()>:
c000f9c6:	0f 20 e0             	mov    eax,cr4
c000f9c9:	83 c8 04             	or     eax,0x4
c000f9cc:	0f 22 e0             	mov    cr4,eax
c000f9cf:	c3                   	ret    

c000f9d0 <CPU::setupLargePages()>:
c000f9d0:	0f 20 e0             	mov    eax,cr4
c000f9d3:	83 c8 10             	or     eax,0x10
c000f9d6:	0f 22 e0             	mov    cr4,eax
c000f9d9:	c3                   	ret    

c000f9da <CPU::setupPAT()>:
c000f9da:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f9df:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f9e6:	74 2c                	je     c000fa14 <CPU::setupPAT()+0x3a>
c000f9e8:	53                   	push   ebx
c000f9e9:	83 ec 10             	sub    esp,0x10
c000f9ec:	68 77 02 00 00       	push   0x277
c000f9f1:	50                   	push   eax
c000f9f2:	e8 fb 73 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f9f7:	83 e2 f8             	and    edx,0xfffffff8
c000f9fa:	83 ca 01             	or     edx,0x1
c000f9fd:	52                   	push   edx
c000f9fe:	50                   	push   eax
c000f9ff:	68 77 02 00 00       	push   0x277
c000fa04:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000fa0a:	e8 0f 74 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000fa0f:	83 c4 28             	add    esp,0x28
c000fa12:	5b                   	pop    ebx
c000fa13:	c3                   	ret    
c000fa14:	c3                   	ret    
c000fa15:	90                   	nop

c000fa16 <CPU::setupMTRR()>:
c000fa16:	c3                   	ret    
c000fa17:	90                   	nop

c000fa18 <CPU::setupGlobalPages()>:
c000fa18:	0f 20 e0             	mov    eax,cr4
c000fa1b:	0c 80                	or     al,0x80
c000fa1d:	0f 22 e0             	mov    cr4,eax
c000fa20:	c3                   	ret    
c000fa21:	90                   	nop

c000fa22 <CPU::allowUsermodeDataAccess()>:
c000fa22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa26:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fa2d:	74 03                	je     c000fa32 <CPU::allowUsermodeDataAccess()+0x10>
c000fa2f:	0f 01 cb             	stac   
c000fa32:	c3                   	ret    
c000fa33:	90                   	nop

c000fa34 <CPU::prohibitUsermodeDataAccess()>:
c000fa34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa38:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fa3f:	74 03                	je     c000fa44 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fa41:	0f 01 ca             	clac   
c000fa44:	c3                   	ret    
c000fa45:	90                   	nop

c000fa46 <CPU::setupSMAP()>:
c000fa46:	0f 20 e0             	mov    eax,cr4
c000fa49:	0d 00 00 20 00       	or     eax,0x200000
c000fa4e:	0f 22 e0             	mov    cr4,eax
c000fa51:	eb e1                	jmp    c000fa34 <CPU::prohibitUsermodeDataAccess()>
c000fa53:	90                   	nop

c000fa54 <CPU::setupFeatures()>:
c000fa54:	53                   	push   ebx
c000fa55:	83 ec 08             	sub    esp,0x8
c000fa58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa5c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fa63:	74 18                	je     c000fa7d <CPU::setupFeatures()+0x29>
c000fa65:	83 ec 0c             	sub    esp,0xc
c000fa68:	68 ad e7 01 c0       	push   0xc001e7ad
c000fa6d:	e8 fb ab ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000fa72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa75:	e8 42 ff ff ff       	call   c000f9bc <CPU::setupUMIP()>
c000fa7a:	83 c4 10             	add    esp,0x10
c000fa7d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fa84:	74 18                	je     c000fa9e <CPU::setupFeatures()+0x4a>
c000fa86:	83 ec 0c             	sub    esp,0xc
c000fa89:	68 b7 e7 01 c0       	push   0xc001e7b7
c000fa8e:	e8 da ab ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000fa93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa96:	e8 2b ff ff ff       	call   c000f9c6 <CPU::setupTSC()>
c000fa9b:	83 c4 10             	add    esp,0x10
c000fa9e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000faa5:	74 18                	je     c000fabf <CPU::setupFeatures()+0x6b>
c000faa7:	83 ec 0c             	sub    esp,0xc
c000faaa:	68 c0 e7 01 c0       	push   0xc001e7c0
c000faaf:	e8 b9 ab ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000fab4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fab7:	e8 14 ff ff ff       	call   c000f9d0 <CPU::setupLargePages()>
c000fabc:	83 c4 10             	add    esp,0x10
c000fabf:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fac6:	74 18                	je     c000fae0 <CPU::setupFeatures()+0x8c>
c000fac8:	83 ec 0c             	sub    esp,0xc
c000facb:	68 c9 e7 01 c0       	push   0xc001e7c9
c000fad0:	e8 98 ab ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000fad5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fad8:	e8 3b ff ff ff       	call   c000fa18 <CPU::setupGlobalPages()>
c000fadd:	83 c4 10             	add    esp,0x10
c000fae0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fae7:	74 18                	je     c000fb01 <CPU::setupFeatures()+0xad>
c000fae9:	83 ec 0c             	sub    esp,0xc
c000faec:	68 db e7 01 c0       	push   0xc001e7db
c000faf1:	e8 77 ab ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c000faf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faf9:	e8 dc fe ff ff       	call   c000f9da <CPU::setupPAT()>
c000fafe:	83 c4 10             	add    esp,0x10
c000fb01:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fb08:	74 11                	je     c000fb1b <CPU::setupFeatures()+0xc7>
c000fb0a:	c7 44 24 10 e4 e7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e7e4
c000fb12:	83 c4 08             	add    esp,0x8
c000fb15:	5b                   	pop    ebx
c000fb16:	e9 52 ab ff ff       	jmp    c000a66d <Dbg::kprintf(char const*, ...)>
c000fb1b:	83 c4 08             	add    esp,0x8
c000fb1e:	5b                   	pop    ebx
c000fb1f:	c3                   	ret    

c000fb20 <CPU::open(int, int, void*)>:
c000fb20:	57                   	push   edi
c000fb21:	56                   	push   esi
c000fb22:	53                   	push   ebx
c000fb23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fb2b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fb31:	83 ec 0c             	sub    esp,0xc
c000fb34:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fb3a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fb40:	50                   	push   eax
c000fb41:	e8 96 75 ff ff       	call   c00070dc <GDT::setup()>
c000fb46:	83 c4 0c             	add    esp,0xc
c000fb49:	6a 00                	push   0x0
c000fb4b:	68 ef be ad de       	push   0xdeadbeef
c000fb50:	57                   	push   edi
c000fb51:	e8 b6 90 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000fb56:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fb59:	e8 8e 90 ff ff       	call   c0008bec <TSS::flush()>
c000fb5e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fb64:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb67:	e8 be 77 ff ff       	call   c000732a <IDT::setup()>
c000fb6c:	b8 00 04 00 00       	mov    eax,0x400
c000fb71:	0f 23 f8             	mov    db7,eax
c000fb74:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fb7e:	e8 12 7f ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fb83:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fb89:	89 30                	mov    DWORD PTR [eax],esi
c000fb8b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fb91:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fb94:	58                   	pop    eax
c000fb95:	5a                   	pop    edx
c000fb96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fb9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fba0:	e8 2f a0 ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c000fba5:	c7 04 24 ee e7 01 c0 	mov    DWORD PTR [esp],0xc001e7ee
c000fbac:	e8 c6 00 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c000fbb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb4:	e8 33 f7 ff ff       	call   c000f2ec <CPU::detectFeatures()>
c000fbb9:	c7 04 24 11 e8 01 c0 	mov    DWORD PTR [esp],0xc001e811
c000fbc0:	e8 b2 00 00 00       	call   c000fc77 <KeSetBootMessage(char const*)>
c000fbc5:	e8 26 5c 00 00       	call   c00157f0 <HalInitialise()>
c000fbca:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fbcf:	83 e0 10             	and    eax,0x10
c000fbd2:	83 f8 01             	cmp    eax,0x1
c000fbd5:	19 c0                	sbb    eax,eax
c000fbd7:	83 e0 46             	and    eax,0x46
c000fbda:	83 c0 1e             	add    eax,0x1e
c000fbdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbe0:	e8 60 d7 ff ff       	call   c000d345 <setupTimer(int)>
c000fbe5:	83 c4 10             	add    esp,0x10
c000fbe8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fbee:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fbf5:	74 0c                	je     c000fc03 <CPU::open(int, int, void*)+0xe3>
c000fbf7:	83 ec 0c             	sub    esp,0xc
c000fbfa:	53                   	push   ebx
c000fbfb:	e8 54 fe ff ff       	call   c000fa54 <CPU::setupFeatures()>
c000fc00:	83 c4 10             	add    esp,0x10
c000fc03:	5b                   	pop    ebx
c000fc04:	31 c0                	xor    eax,eax
c000fc06:	5e                   	pop    esi
c000fc07:	5f                   	pop    edi
c000fc08:	c3                   	ret    

c000fc09 <KeDisplaySplashScreen()>:
c000fc09:	55                   	push   ebp
c000fc0a:	bd 05 00 00 00       	mov    ebp,0x5
c000fc0f:	57                   	push   edi
c000fc10:	bf 00 fa 01 c0       	mov    edi,0xc001fa00
c000fc15:	56                   	push   esi
c000fc16:	be 0a 00 00 00       	mov    esi,0xa
c000fc1b:	53                   	push   ebx
c000fc1c:	31 db                	xor    ebx,ebx
c000fc1e:	83 ec 0c             	sub    esp,0xc
c000fc21:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fc24:	84 c0                	test   al,al
c000fc26:	74 47                	je     c000fc6f <KeDisplaySplashScreen()+0x66>
c000fc28:	80 bb 36 fa 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe05ca],0xdb
c000fc2f:	75 13                	jne    c000fc44 <KeDisplaySplashScreen()+0x3b>
c000fc31:	0f b6 93 35 fa 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe05cb]
c000fc38:	83 e2 fe             	and    edx,0xfffffffe
c000fc3b:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fc41:	75 01                	jne    c000fc44 <KeDisplaySplashScreen()+0x3b>
c000fc43:	46                   	inc    esi
c000fc44:	3c 0d                	cmp    al,0xd
c000fc46:	74 24                	je     c000fc6c <KeDisplaySplashScreen()+0x63>
c000fc48:	3c 0a                	cmp    al,0xa
c000fc4a:	75 0a                	jne    c000fc56 <KeDisplaySplashScreen()+0x4d>
c000fc4c:	45                   	inc    ebp
c000fc4d:	be 0a 00 00 00       	mov    esi,0xa
c000fc52:	31 db                	xor    ebx,ebx
c000fc54:	eb 16                	jmp    c000fc6c <KeDisplaySplashScreen()+0x63>
c000fc56:	83 ec 0c             	sub    esp,0xc
c000fc59:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fc5c:	55                   	push   ebp
c000fc5d:	43                   	inc    ebx
c000fc5e:	52                   	push   edx
c000fc5f:	6a 00                	push   0x0
c000fc61:	6a 0e                	push   0xe
c000fc63:	50                   	push   eax
c000fc64:	e8 eb 67 00 00       	call   c0016454 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fc69:	83 c4 20             	add    esp,0x20
c000fc6c:	47                   	inc    edi
c000fc6d:	eb b2                	jmp    c000fc21 <KeDisplaySplashScreen()+0x18>
c000fc6f:	83 c4 0c             	add    esp,0xc
c000fc72:	5b                   	pop    ebx
c000fc73:	5e                   	pop    esi
c000fc74:	5f                   	pop    edi
c000fc75:	5d                   	pop    ebp
c000fc76:	c3                   	ret    

c000fc77 <KeSetBootMessage(char const*)>:
c000fc77:	57                   	push   edi
c000fc78:	56                   	push   esi
c000fc79:	53                   	push   ebx
c000fc7a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fc80:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fc87:	68 9e 00 00 00       	push   0x9e
c000fc8c:	6a 00                	push   0x0
c000fc8e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fc92:	56                   	push   esi
c000fc93:	e8 38 08 ff ff       	call   c00004d0 <memset>
c000fc98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc9b:	e8 a0 08 ff ff       	call   c0000540 <strlen>
c000fca0:	ba 50 00 00 00       	mov    edx,0x50
c000fca5:	83 c4 10             	add    esp,0x10
c000fca8:	29 c2                	sub    edx,eax
c000fcaa:	31 c9                	xor    ecx,ecx
c000fcac:	83 e2 fe             	and    edx,0xfffffffe
c000fcaf:	01 f2                	add    edx,esi
c000fcb1:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fcb6:	84 c0                	test   al,al
c000fcb8:	74 0a                	je     c000fcc4 <KeSetBootMessage(char const*)+0x4d>
c000fcba:	80 cc 0f             	or     ah,0xf
c000fcbd:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fcc1:	41                   	inc    ecx
c000fcc2:	eb ed                	jmp    c000fcb1 <KeSetBootMessage(char const*)+0x3a>
c000fcc4:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fcc9:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fcce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcd0:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fcd6:	5b                   	pop    ebx
c000fcd7:	5e                   	pop    esi
c000fcd8:	5f                   	pop    edi
c000fcd9:	c3                   	ret    

c000fcda <EnvVarContainer::getEnv(char const*)>:
c000fcda:	57                   	push   edi
c000fcdb:	56                   	push   esi
c000fcdc:	53                   	push   ebx
c000fcdd:	31 db                	xor    ebx,ebx
c000fcdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fce3:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fce5:	7e 2b                	jle    c000fd12 <EnvVarContainer::getEnv(char const*)+0x38>
c000fce7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fcee:	50                   	push   eax
c000fcef:	50                   	push   eax
c000fcf0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fcf3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fcf6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fcfa:	e8 e1 09 ff ff       	call   c00006e0 <strcmp>
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	85 c0                	test   eax,eax
c000fd04:	75 09                	jne    c000fd0f <EnvVarContainer::getEnv(char const*)+0x35>
c000fd06:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd09:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fd0d:	eb 05                	jmp    c000fd14 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fd0f:	43                   	inc    ebx
c000fd10:	eb d1                	jmp    c000fce3 <EnvVarContainer::getEnv(char const*)+0x9>
c000fd12:	31 c0                	xor    eax,eax
c000fd14:	5b                   	pop    ebx
c000fd15:	5e                   	pop    esi
c000fd16:	5f                   	pop    edi
c000fd17:	c3                   	ret    

c000fd18 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fd18:	55                   	push   ebp
c000fd19:	57                   	push   edi
c000fd1a:	56                   	push   esi
c000fd1b:	53                   	push   ebx
c000fd1c:	83 ec 28             	sub    esp,0x28
c000fd1f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fd23:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fd27:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fd2b:	56                   	push   esi
c000fd2c:	e8 0f 08 ff ff       	call   c0000540 <strlen>
c000fd31:	40                   	inc    eax
c000fd32:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd35:	e8 7f 7a ff ff       	call   c00077b9 <malloc>
c000fd3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd41:	e8 fa 07 ff ff       	call   c0000540 <strlen>
c000fd46:	40                   	inc    eax
c000fd47:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd4a:	e8 6a 7a ff ff       	call   c00077b9 <malloc>
c000fd4f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fd56:	e8 e5 07 ff ff       	call   c0000540 <strlen>
c000fd5b:	83 c4 0c             	add    esp,0xc
c000fd5e:	40                   	inc    eax
c000fd5f:	50                   	push   eax
c000fd60:	6a 00                	push   0x0
c000fd62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd66:	e8 65 07 ff ff       	call   c00004d0 <memset>
c000fd6b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd6e:	e8 cd 07 ff ff       	call   c0000540 <strlen>
c000fd73:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd77:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd7f:	89 de                	mov    esi,ebx
c000fd81:	e8 ba 07 ff ff       	call   c0000540 <strlen>
c000fd86:	83 c4 0c             	add    esp,0xc
c000fd89:	40                   	inc    eax
c000fd8a:	50                   	push   eax
c000fd8b:	6a 00                	push   0x0
c000fd8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd91:	e8 3a 07 ff ff       	call   c00004d0 <memset>
c000fd96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd99:	e8 a2 07 ff ff       	call   c0000540 <strlen>
c000fd9e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fda2:	8d 48 01             	lea    ecx,[eax+0x1]
c000fda5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fda7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdaa:	40                   	inc    eax
c000fdab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdae:	c1 e0 03             	shl    eax,0x3
c000fdb1:	5a                   	pop    edx
c000fdb2:	59                   	pop    ecx
c000fdb3:	50                   	push   eax
c000fdb4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fdb7:	e8 e9 79 ff ff       	call   c00077a5 <realloc>
c000fdbc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fdc0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdc3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdc6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fdca:	b9 08 00 00 00       	mov    ecx,0x8
c000fdcf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdd1:	83 c4 2c             	add    esp,0x2c
c000fdd4:	5b                   	pop    ebx
c000fdd5:	5e                   	pop    esi
c000fdd6:	5f                   	pop    edi
c000fdd7:	5d                   	pop    ebp
c000fdd8:	c3                   	ret    
c000fdd9:	90                   	nop

c000fdda <EnvVarContainer::deleteEnv(char const*)>:
c000fdda:	c3                   	ret    
c000fddb:	90                   	nop

c000fddc <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fddc:	55                   	push   ebp
c000fddd:	57                   	push   edi
c000fdde:	56                   	push   esi
c000fddf:	53                   	push   ebx
c000fde0:	81 ec 38 01 00 00    	sub    esp,0x138
c000fde6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fded:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fdf4:	68 14 01 00 00       	push   0x114
c000fdf9:	e8 bb 79 ff ff       	call   c00077b9 <malloc>
c000fdfe:	83 c4 0c             	add    esp,0xc
c000fe01:	89 c3                	mov    ebx,eax
c000fe03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe06:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fe0d:	50                   	push   eax
c000fe0e:	e8 cf ad ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c000fe13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe16:	e8 f5 b0 ff ff       	call   c000af10 <File::exists()>
c000fe1b:	83 c4 10             	add    esp,0x10
c000fe1e:	84 c0                	test   al,al
c000fe20:	75 31                	jne    c000fe53 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fe22:	50                   	push   eax
c000fe23:	50                   	push   eax
c000fe24:	6a 12                	push   0x12
c000fe26:	53                   	push   ebx
c000fe27:	e8 76 ae ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c000fe2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe2e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fe31:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe34:	e8 07 07 ff ff       	call   c0000540 <strlen>
c000fe39:	5a                   	pop    edx
c000fe3a:	31 d2                	xor    edx,edx
c000fe3c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe40:	51                   	push   ecx
c000fe41:	56                   	push   esi
c000fe42:	52                   	push   edx
c000fe43:	50                   	push   eax
c000fe44:	53                   	push   ebx
c000fe45:	ff d7                	call   edi
c000fe47:	83 c4 14             	add    esp,0x14
c000fe4a:	53                   	push   ebx
c000fe4b:	e8 b0 ae ff ff       	call   c000ad00 <File::close()>
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	56                   	push   esi
c000fe54:	31 f6                	xor    esi,esi
c000fe56:	68 00 01 00 00       	push   0x100
c000fe5b:	6a 00                	push   0x0
c000fe5d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe61:	50                   	push   eax
c000fe62:	e8 69 06 ff ff       	call   c00004d0 <memset>
c000fe67:	5f                   	pop    edi
c000fe68:	58                   	pop    eax
c000fe69:	6a 01                	push   0x1
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 31 ae ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c000fe71:	83 c4 10             	add    esp,0x10
c000fe74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe7c:	83 ec 0c             	sub    esp,0xc
c000fe7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe81:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe85:	51                   	push   ecx
c000fe86:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fe8a:	52                   	push   edx
c000fe8b:	6a 00                	push   0x0
c000fe8d:	6a 01                	push   0x1
c000fe8f:	53                   	push   ebx
c000fe90:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe93:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fe97:	83 c4 20             	add    esp,0x20
c000fe9a:	3c 0d                	cmp    al,0xd
c000fe9c:	0f 84 09 01 00 00    	je     c000ffab <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fea2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fea7:	0f 84 ef 00 00 00    	je     c000ff9c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fead:	3c 0a                	cmp    al,0xa
c000feaf:	74 13                	je     c000fec4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000feb1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000feb6:	74 0c                	je     c000fec4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000feb8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000febe:	0f 8e d8 00 00 00    	jle    c000ff9c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fec4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fec8:	83 ec 0c             	sub    esp,0xc
c000fecb:	8d 78 01             	lea    edi,[eax+0x1]
c000fece:	57                   	push   edi
c000fecf:	e8 e5 78 ff ff       	call   c00077b9 <malloc>
c000fed4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fed8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fedc:	8d 56 04             	lea    edx,[esi+0x4]
c000fedf:	89 14 24             	mov    DWORD PTR [esp],edx
c000fee2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fee6:	e8 ce 78 ff ff       	call   c00077b9 <malloc>
c000feeb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000feef:	83 c4 0c             	add    esp,0xc
c000fef2:	57                   	push   edi
c000fef3:	6a 00                	push   0x0
c000fef5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fef9:	e8 d2 05 ff ff       	call   c00004d0 <memset>
c000fefe:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff02:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ff06:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ff0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff0c:	83 c4 0c             	add    esp,0xc
c000ff0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff13:	52                   	push   edx
c000ff14:	6a 00                	push   0x0
c000ff16:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff1a:	e8 b1 05 ff ff       	call   c00004d0 <memset>
c000ff1f:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff23:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ff27:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff2a:	e8 11 06 ff ff       	call   c0000540 <strlen>
c000ff2f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ff33:	89 c1                	mov    ecx,eax
c000ff35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff37:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff3a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ff3d:	40                   	inc    eax
c000ff3e:	83 c4 10             	add    esp,0x10
c000ff41:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff44:	85 d2                	test   edx,edx
c000ff46:	75 0c                	jne    c000ff54 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000ff48:	83 ec 0c             	sub    esp,0xc
c000ff4b:	6a 08                	push   0x8
c000ff4d:	e8 67 78 ff ff       	call   c00077b9 <malloc>
c000ff52:	eb 0c                	jmp    c000ff60 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000ff54:	c1 e0 03             	shl    eax,0x3
c000ff57:	51                   	push   ecx
c000ff58:	51                   	push   ecx
c000ff59:	50                   	push   eax
c000ff5a:	52                   	push   edx
c000ff5b:	e8 45 78 ff ff       	call   c00077a5 <realloc>
c000ff60:	83 c4 10             	add    esp,0x10
c000ff63:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ff66:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ff69:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ff6c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ff70:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ff74:	b9 08 00 00 00       	mov    ecx,0x8
c000ff79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff7b:	31 f6                	xor    esi,esi
c000ff7d:	50                   	push   eax
c000ff7e:	68 00 01 00 00       	push   0x100
c000ff83:	6a 00                	push   0x0
c000ff85:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff89:	50                   	push   eax
c000ff8a:	e8 41 05 ff ff       	call   c00004d0 <memset>
c000ff8f:	83 c4 10             	add    esp,0x10
c000ff92:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff9a:	eb 0f                	jmp    c000ffab <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff9c:	3c 3d                	cmp    al,0x3d
c000ff9e:	74 07                	je     c000ffa7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ffa0:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ffa4:	46                   	inc    esi
c000ffa5:	eb 04                	jmp    c000ffab <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffa7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ffab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ffb0:	0f 85 c6 fe ff ff    	jne    c000fe7c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ffb6:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ffbc:	5b                   	pop    ebx
c000ffbd:	5e                   	pop    esi
c000ffbe:	5f                   	pop    edi
c000ffbf:	5d                   	pop    ebp
c000ffc0:	c3                   	ret    
c000ffc1:	90                   	nop

c000ffc2 <EnvVarContainer::__loadSystem()>:
c000ffc2:	83 ec 10             	sub    esp,0x10
c000ffc5:	68 60 fb 01 c0       	push   0xc001fb60
c000ffca:	68 54 e8 01 c0       	push   0xc001e854
c000ffcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffd3:	e8 04 fe ff ff       	call   c000fddc <EnvVarContainer::loadFrom(char const*, char const*)>
c000ffd8:	83 c4 1c             	add    esp,0x1c
c000ffdb:	c3                   	ret    

c000ffdc <EnvVarContainer::__loadUser()>:
c000ffdc:	c3                   	ret    
c000ffdd:	90                   	nop

c000ffde <EnvVarContainer::EnvVarContainer(Process*)>:
c000ffde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffe2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ffe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fff0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fffe:	90                   	nop
c000ffff:	c3                   	ret    

c0010000 <EnvVarContainer::~EnvVarContainer()>:
c0010000:	83 ec 0c             	sub    esp,0xc
c0010003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010007:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001000a:	85 c0                	test   eax,eax
c001000c:	74 1d                	je     c001002b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001000e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010012:	8b 00                	mov    eax,DWORD PTR [eax]
c0010014:	85 c0                	test   eax,eax
c0010016:	74 13                	je     c001002b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001001f:	83 ec 0c             	sub    esp,0xc
c0010022:	50                   	push   eax
c0010023:	e8 a1 77 ff ff       	call   c00077c9 <free>
c0010028:	83 c4 10             	add    esp,0x10
c001002b:	90                   	nop
c001002c:	83 c4 0c             	add    esp,0xc
c001002f:	c3                   	ret    

c0010030 <Krnl::getEnv(Process*, char const*)>:
c0010030:	53                   	push   ebx
c0010031:	83 ec 08             	sub    esp,0x8
c0010034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010038:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001003c:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c0010042:	74 04                	je     c0010048 <Krnl::getEnv(Process*, char const*)+0x18>
c0010044:	85 c0                	test   eax,eax
c0010046:	75 0b                	jne    c0010053 <Krnl::getEnv(Process*, char const*)+0x23>
c0010048:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c001004d:	85 c0                	test   eax,eax
c001004f:	75 19                	jne    c001006a <Krnl::getEnv(Process*, char const*)+0x3a>
c0010051:	eb 27                	jmp    c001007a <Krnl::getEnv(Process*, char const*)+0x4a>
c0010053:	52                   	push   edx
c0010054:	52                   	push   edx
c0010055:	53                   	push   ebx
c0010056:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001005c:	e8 79 fc ff ff       	call   c000fcda <EnvVarContainer::getEnv(char const*)>
c0010061:	83 c4 10             	add    esp,0x10
c0010064:	85 c0                	test   eax,eax
c0010066:	75 28                	jne    c0010090 <Krnl::getEnv(Process*, char const*)+0x60>
c0010068:	eb de                	jmp    c0010048 <Krnl::getEnv(Process*, char const*)+0x18>
c001006a:	52                   	push   edx
c001006b:	52                   	push   edx
c001006c:	53                   	push   ebx
c001006d:	50                   	push   eax
c001006e:	e8 67 fc ff ff       	call   c000fcda <EnvVarContainer::getEnv(char const*)>
c0010073:	83 c4 10             	add    esp,0x10
c0010076:	85 c0                	test   eax,eax
c0010078:	75 16                	jne    c0010090 <Krnl::getEnv(Process*, char const*)+0x60>
c001007a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001007e:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0010083:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010087:	83 c4 08             	add    esp,0x8
c001008a:	5b                   	pop    ebx
c001008b:	e9 4a fc ff ff       	jmp    c000fcda <EnvVarContainer::getEnv(char const*)>
c0010090:	83 c4 08             	add    esp,0x8
c0010093:	5b                   	pop    ebx
c0010094:	c3                   	ret    

c0010095 <Krnl::setEnvSystem(char const*, char const*)>:
c0010095:	83 ec 10             	sub    esp,0x10
c0010098:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001009c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100a0:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c00100a6:	e8 6d fc ff ff       	call   c000fd18 <EnvVarContainer::setEnv(char const*, char const*)>
c00100ab:	83 c4 1c             	add    esp,0x1c
c00100ae:	c3                   	ret    

c00100af <Krnl::setEnvUser(char const*, char const*)>:
c00100af:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c00100b4:	85 c0                	test   eax,eax
c00100b6:	74 15                	je     c00100cd <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00100b8:	83 ec 10             	sub    esp,0x10
c00100bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100c3:	50                   	push   eax
c00100c4:	e8 4f fc ff ff       	call   c000fd18 <EnvVarContainer::setEnv(char const*, char const*)>
c00100c9:	83 c4 1c             	add    esp,0x1c
c00100cc:	c3                   	ret    
c00100cd:	c3                   	ret    

c00100ce <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00100ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100d2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00100d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00100dc:	e9 37 fc ff ff       	jmp    c000fd18 <EnvVarContainer::setEnv(char const*, char const*)>

c00100e1 <Krnl::deleteEnvSystem(char const*)>:
c00100e1:	c3                   	ret    

c00100e2 <Krnl::deleteEnvUser(char const*)>:
c00100e2:	c3                   	ret    

c00100e3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00100e3:	c3                   	ret    

c00100e4 <Krnl::newProcessEnv(Process*)>:
c00100e4:	83 ec 28             	sub    esp,0x28
c00100e7:	6a 0c                	push   0xc
c00100e9:	e8 cb 76 ff ff       	call   c00077b9 <malloc>
c00100ee:	5a                   	pop    edx
c00100ef:	59                   	pop    ecx
c00100f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100f4:	50                   	push   eax
c00100f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00100f9:	e8 e0 fe ff ff       	call   c000ffde <EnvVarContainer::EnvVarContainer(Process*)>
c00100fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010102:	83 c4 2c             	add    esp,0x2c
c0010105:	c3                   	ret    

c0010106 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010106:	57                   	push   edi
c0010107:	56                   	push   esi
c0010108:	53                   	push   ebx
c0010109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010d:	83 ec 0c             	sub    esp,0xc
c0010110:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010116:	6a 0c                	push   0xc
c0010118:	e8 9c 76 ff ff       	call   c00077b9 <malloc>
c001011d:	89 c3                	mov    ebx,eax
c001011f:	58                   	pop    eax
c0010120:	5a                   	pop    edx
c0010121:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010125:	53                   	push   ebx
c0010126:	e8 b3 fe ff ff       	call   c000ffde <EnvVarContainer::EnvVarContainer(Process*)>
c001012b:	8b 07                	mov    eax,DWORD PTR [edi]
c001012d:	89 03                	mov    DWORD PTR [ebx],eax
c001012f:	c1 e0 03             	shl    eax,0x3
c0010132:	89 04 24             	mov    DWORD PTR [esp],eax
c0010135:	e8 7f 76 ff ff       	call   c00077b9 <malloc>
c001013a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001013d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001013f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010142:	c1 e1 03             	shl    ecx,0x3
c0010145:	89 c7                	mov    edi,eax
c0010147:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010149:	83 c4 10             	add    esp,0x10
c001014c:	89 d8                	mov    eax,ebx
c001014e:	5b                   	pop    ebx
c001014f:	5e                   	pop    esi
c0010150:	5f                   	pop    edi
c0010151:	c3                   	ret    

c0010152 <Krnl::loadSystemEnv()>:
c0010152:	53                   	push   ebx
c0010153:	83 ec 14             	sub    esp,0x14
c0010156:	6a 0c                	push   0xc
c0010158:	e8 5c 76 ff ff       	call   c00077b9 <malloc>
c001015d:	89 c3                	mov    ebx,eax
c001015f:	58                   	pop    eax
c0010160:	5a                   	pop    edx
c0010161:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010167:	53                   	push   ebx
c0010168:	e8 71 fe ff ff       	call   c000ffde <EnvVarContainer::EnvVarContainer(Process*)>
c001016d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010170:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c0010176:	e8 47 fe ff ff       	call   c000ffc2 <EnvVarContainer::__loadSystem()>
c001017b:	83 c4 18             	add    esp,0x18
c001017e:	5b                   	pop    ebx
c001017f:	c3                   	ret    

c0010180 <Krnl::loadUserEnv()>:
c0010180:	53                   	push   ebx
c0010181:	83 ec 14             	sub    esp,0x14
c0010184:	6a 0c                	push   0xc
c0010186:	e8 2e 76 ff ff       	call   c00077b9 <malloc>
c001018b:	89 c3                	mov    ebx,eax
c001018d:	58                   	pop    eax
c001018e:	5a                   	pop    edx
c001018f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010195:	53                   	push   ebx
c0010196:	e8 43 fe ff ff       	call   c000ffde <EnvVarContainer::EnvVarContainer(Process*)>
c001019b:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c00101a1:	83 c4 18             	add    esp,0x18
c00101a4:	5b                   	pop    ebx
c00101a5:	c3                   	ret    

c00101a6 <Krnl::flushEnv()>:
c00101a6:	c3                   	ret    

c00101a7 <Krnl::getProcessTotalEnvCount(Process*)>:
c00101a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ab:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c00101b1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00101b7:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c00101bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00101be:	03 01                	add    eax,DWORD PTR [ecx]
c00101c0:	85 d2                	test   edx,edx
c00101c2:	74 02                	je     c00101c6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00101c4:	03 02                	add    eax,DWORD PTR [edx]
c00101c6:	c3                   	ret    

c00101c7 <Krnl::getProcessEnvPair(Process*, int)>:
c00101c7:	57                   	push   edi
c00101c8:	56                   	push   esi
c00101c9:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c00101cf:	53                   	push   ebx
c00101d0:	85 f6                	test   esi,esi
c00101d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101da:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00101e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00101e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00101e6:	75 16                	jne    c00101fe <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00101e8:	39 c2                	cmp    edx,eax
c00101ea:	7c 16                	jl     c0010202 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00101ec:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c00101f2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00101f4:	01 c6                	add    esi,eax
c00101f6:	39 d6                	cmp    esi,edx
c00101f8:	7e 3c                	jle    c0010236 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00101fa:	29 c2                	sub    edx,eax
c00101fc:	eb 04                	jmp    c0010202 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00101fe:	39 c2                	cmp    edx,eax
c0010200:	7d 05                	jge    c0010207 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010202:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010205:	eb 20                	jmp    c0010227 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010207:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010209:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001020c:	39 d1                	cmp    ecx,edx
c001020e:	7e 04                	jle    c0010214 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010210:	29 c2                	sub    edx,eax
c0010212:	eb 10                	jmp    c0010224 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010214:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c001021a:	03 0e                	add    ecx,DWORD PTR [esi]
c001021c:	39 d1                	cmp    ecx,edx
c001021e:	7e 16                	jle    c0010236 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010220:	29 c2                	sub    edx,eax
c0010222:	29 fa                	sub    edx,edi
c0010224:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010227:	8d 14 d0             	lea    edx,[eax+edx*8]
c001022a:	8b 02                	mov    eax,DWORD PTR [edx]
c001022c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001022f:	89 03                	mov    DWORD PTR [ebx],eax
c0010231:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010234:	eb 1d                	jmp    c0010253 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010236:	83 ec 0c             	sub    esp,0xc
c0010239:	68 76 e8 01 c0       	push   0xc001e876
c001023e:	e8 ac 00 00 00       	call   c00102ef <KePanic(char const*)>
c0010243:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010249:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010250:	83 c4 10             	add    esp,0x10
c0010253:	89 d8                	mov    eax,ebx
c0010255:	5b                   	pop    ebx
c0010256:	5e                   	pop    esi
c0010257:	5f                   	pop    edi
c0010258:	c2 04 00             	ret    0x4

c001025b <CPU::current()>:
c001025b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010260:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010266:	c3                   	ret    

c0010267 <operator new(unsigned long)>:
c0010267:	e9 4d 75 ff ff       	jmp    c00077b9 <malloc>

c001026c <operator delete(void*)>:
c001026c:	e9 68 75 ff ff       	jmp    c00077d9 <rfree>

c0010271 <disableIRQs()>:
c0010271:	fa                   	cli    
c0010272:	c3                   	ret    

c0010273 <enableIRQs()>:
c0010273:	fb                   	sti    
c0010274:	c3                   	ret    

c0010275 <lockScheduler()>:
c0010275:	fa                   	cli    
c0010276:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001027c:	c3                   	ret    

c001027d <unlockScheduler()>:
c001027d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010282:	48                   	dec    eax
c0010283:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010288:	75 01                	jne    c001028b <unlockScheduler()+0xe>
c001028a:	fb                   	sti    
c001028b:	c3                   	ret    

c001028c <lockStuff()>:
c001028c:	fa                   	cli    
c001028d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010293:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0010299:	c3                   	ret    

c001029a <unlockStuff()>:
c001029a:	83 ec 0c             	sub    esp,0xc
c001029d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00102a2:	48                   	dec    eax
c00102a3:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00102a8:	75 18                	jne    c00102c2 <unlockStuff()+0x28>
c00102aa:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c00102b1:	74 0f                	je     c00102c2 <unlockStuff()+0x28>
c00102b3:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00102bd:	e8 22 36 00 00       	call   c00138e4 <schedule()>
c00102c2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00102c7:	48                   	dec    eax
c00102c8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00102cd:	75 01                	jne    c00102d0 <unlockStuff()+0x36>
c00102cf:	fb                   	sti    
c00102d0:	83 c4 0c             	add    esp,0xc
c00102d3:	c3                   	ret    

c00102d4 <Virt::getAKernelVAS()>:
c00102d4:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c00102d9:	c3                   	ret    

c00102da <__not_memcpy>:
c00102da:	57                   	push   edi
c00102db:	56                   	push   esi
c00102dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00102e8:	89 c7                	mov    edi,eax
c00102ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102ec:	5e                   	pop    esi
c00102ed:	5f                   	pop    edi
c00102ee:	c3                   	ret    

c00102ef <KePanic(char const*)>:
c00102ef:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c00102f6:	e9 e1 53 00 00       	jmp    c00156dc <HalPanic(char const*)>

c00102fb <Krnl::powerThread(void*)>:
c00102fb:	83 ec 0c             	sub    esp,0xc
c00102fe:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010303:	48                   	dec    eax
c0010304:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010309:	75 01                	jne    c001030c <Krnl::powerThread(void*)+0x11>
c001030b:	fb                   	sti    
c001030c:	83 ec 0c             	sub    esp,0xc
c001030f:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c0010316:	6a 0a                	push   0xa
c0010318:	e8 d7 38 00 00       	call   c0013bf4 <sleep(unsigned int)>
c001031d:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c0010324:	83 c4 10             	add    esp,0x10
c0010327:	eb e3                	jmp    c001030c <Krnl::powerThread(void*)+0x11>

c0010329 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010329:	57                   	push   edi
c001032a:	b9 09 00 00 00       	mov    ecx,0x9
c001032f:	56                   	push   esi
c0010330:	bf 60 49 02 c0       	mov    edi,0xc0024960
c0010335:	fc                   	cld    
c0010336:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001033a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001033c:	5e                   	pop    esi
c001033d:	5f                   	pop    edi
c001033e:	c3                   	ret    

c001033f <Krnl::userIOReceived()>:
c001033f:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0010349:	c3                   	ret    

c001034a <Krnl::handlePowerButton()>:
c001034a:	83 ec 0c             	sub    esp,0xc
c001034d:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c0010352:	83 f8 02             	cmp    eax,0x2
c0010355:	75 10                	jne    c0010367 <Krnl::handlePowerButton()+0x1d>
c0010357:	83 ec 0c             	sub    esp,0xc
c001035a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010360:	e8 f1 6a ff ff       	call   c0006e56 <Computer::shutdown()>
c0010365:	eb 11                	jmp    c0010378 <Krnl::handlePowerButton()+0x2e>
c0010367:	48                   	dec    eax
c0010368:	75 11                	jne    c001037b <Krnl::handlePowerButton()+0x31>
c001036a:	83 ec 0c             	sub    esp,0xc
c001036d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010373:	e8 0e 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010378:	83 c4 10             	add    esp,0x10
c001037b:	83 c4 0c             	add    esp,0xc
c001037e:	c3                   	ret    

c001037f <Krnl::handleSleepButton()>:
c001037f:	83 ec 0c             	sub    esp,0xc
c0010382:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c0010387:	83 f8 02             	cmp    eax,0x2
c001038a:	75 10                	jne    c001039c <Krnl::handleSleepButton()+0x1d>
c001038c:	83 ec 0c             	sub    esp,0xc
c001038f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010395:	e8 bc 6a ff ff       	call   c0006e56 <Computer::shutdown()>
c001039a:	eb 11                	jmp    c00103ad <Krnl::handleSleepButton()+0x2e>
c001039c:	48                   	dec    eax
c001039d:	75 11                	jne    c00103b0 <Krnl::handleSleepButton()+0x31>
c001039f:	83 ec 0c             	sub    esp,0xc
c00103a2:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00103a8:	e8 d9 6a ff ff       	call   c0006e86 <Computer::sleep()>
c00103ad:	83 c4 10             	add    esp,0x10
c00103b0:	83 c4 0c             	add    esp,0xc
c00103b3:	c3                   	ret    

c00103b4 <Krnl::setupPowerManager()>:
c00103b4:	83 ec 0c             	sub    esp,0xc
c00103b7:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00103c1:	68 f0 00 00 00       	push   0xf0
c00103c6:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00103cd:	6a 00                	push   0x0
c00103cf:	68 fb 02 01 c0       	push   0xc00102fb
c00103d4:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00103da:	e8 e5 32 00 00       	call   c00136c4 <Process::createThread(void (*)(void*), void*, int)>
c00103df:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c00103e9:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c00103f3:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c00103fd:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c0010407:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c0010411:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c001041b:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c0010425:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c001042f:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c0010439:	83 c4 1c             	add    esp,0x1c
c001043c:	c3                   	ret    
c001043d:	66 90                	xchg   ax,ax
c001043f:	90                   	nop

c0010440 <KeResolveCompatibilitySymbol(char*)>:
c0010440:	83 ec 0c             	sub    esp,0xc
c0010443:	83 ec 08             	sub    esp,0x8
c0010446:	68 90 e8 01 c0       	push   0xc001e890
c001044b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001044f:	e8 8c 02 ff ff       	call   c00006e0 <strcmp>
c0010454:	83 c4 10             	add    esp,0x10
c0010457:	85 c0                	test   eax,eax
c0010459:	0f 94 c0             	sete   al
c001045c:	84 c0                	test   al,al
c001045e:	74 0c                	je     c001046c <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010460:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c0010465:	e9 62 01 00 00       	jmp    c00105cc <KeResolveCompatibilitySymbol(char*)+0x18c>
c001046a:	66 90                	xchg   ax,ax
c001046c:	83 ec 08             	sub    esp,0x8
c001046f:	68 99 e8 01 c0       	push   0xc001e899
c0010474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010478:	e8 63 02 ff ff       	call   c00006e0 <strcmp>
c001047d:	83 c4 10             	add    esp,0x10
c0010480:	85 c0                	test   eax,eax
c0010482:	0f 94 c0             	sete   al
c0010485:	84 c0                	test   al,al
c0010487:	74 0b                	je     c0010494 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010489:	b8 40 c2 01 c0       	mov    eax,0xc001c240
c001048e:	e9 39 01 00 00       	jmp    c00105cc <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010493:	90                   	nop
c0010494:	83 ec 08             	sub    esp,0x8
c0010497:	68 a3 e8 01 c0       	push   0xc001e8a3
c001049c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104a0:	e8 3b 02 ff ff       	call   c00006e0 <strcmp>
c00104a5:	83 c4 10             	add    esp,0x10
c00104a8:	85 c0                	test   eax,eax
c00104aa:	0f 94 c0             	sete   al
c00104ad:	84 c0                	test   al,al
c00104af:	74 0b                	je     c00104bc <KeResolveCompatibilitySymbol(char*)+0x7c>
c00104b1:	b8 74 bf 01 c0       	mov    eax,0xc001bf74
c00104b6:	e9 11 01 00 00       	jmp    c00105cc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104bb:	90                   	nop
c00104bc:	83 ec 08             	sub    esp,0x8
c00104bf:	68 ac e8 01 c0       	push   0xc001e8ac
c00104c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c8:	e8 13 02 ff ff       	call   c00006e0 <strcmp>
c00104cd:	83 c4 10             	add    esp,0x10
c00104d0:	85 c0                	test   eax,eax
c00104d2:	0f 94 c0             	sete   al
c00104d5:	84 c0                	test   al,al
c00104d7:	74 0b                	je     c00104e4 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00104d9:	b8 ef 02 01 c0       	mov    eax,0xc00102ef
c00104de:	e9 e9 00 00 00       	jmp    c00105cc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104e3:	90                   	nop
c00104e4:	83 ec 08             	sub    esp,0x8
c00104e7:	68 bf e8 01 c0       	push   0xc001e8bf
c00104ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f0:	e8 eb 01 ff ff       	call   c00006e0 <strcmp>
c00104f5:	83 c4 10             	add    esp,0x10
c00104f8:	85 c0                	test   eax,eax
c00104fa:	0f 94 c0             	sete   al
c00104fd:	84 c0                	test   al,al
c00104ff:	74 0b                	je     c001050c <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010501:	b8 77 fc 00 c0       	mov    eax,0xc000fc77
c0010506:	e9 c1 00 00 00       	jmp    c00105cc <KeResolveCompatibilitySymbol(char*)+0x18c>
c001050b:	90                   	nop
c001050c:	83 ec 08             	sub    esp,0x8
c001050f:	68 dc e8 01 c0       	push   0xc001e8dc
c0010514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010518:	e8 c3 01 ff ff       	call   c00006e0 <strcmp>
c001051d:	83 c4 10             	add    esp,0x10
c0010520:	85 c0                	test   eax,eax
c0010522:	0f 94 c0             	sete   al
c0010525:	84 c0                	test   al,al
c0010527:	74 0b                	je     c0010534 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010529:	b8 40 c3 01 c0       	mov    eax,0xc001c340
c001052e:	e9 99 00 00 00       	jmp    c00105cc <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010533:	90                   	nop
c0010534:	83 ec 08             	sub    esp,0x8
c0010537:	68 e6 e8 01 c0       	push   0xc001e8e6
c001053c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010540:	e8 9b 01 ff ff       	call   c00006e0 <strcmp>
c0010545:	83 c4 10             	add    esp,0x10
c0010548:	85 c0                	test   eax,eax
c001054a:	0f 94 c0             	sete   al
c001054d:	84 c0                	test   al,al
c001054f:	74 07                	je     c0010558 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010551:	b8 c0 c0 01 c0       	mov    eax,0xc001c0c0
c0010556:	eb 74                	jmp    c00105cc <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010558:	83 ec 08             	sub    esp,0x8
c001055b:	68 ef e8 01 c0       	push   0xc001e8ef
c0010560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010564:	e8 77 01 ff ff       	call   c00006e0 <strcmp>
c0010569:	83 c4 10             	add    esp,0x10
c001056c:	85 c0                	test   eax,eax
c001056e:	0f 94 c0             	sete   al
c0010571:	84 c0                	test   al,al
c0010573:	74 07                	je     c001057c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010575:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001057a:	eb 50                	jmp    c00105cc <KeResolveCompatibilitySymbol(char*)+0x18c>
c001057c:	83 ec 08             	sub    esp,0x8
c001057f:	68 07 e9 01 c0       	push   0xc001e907
c0010584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010588:	e8 53 01 ff ff       	call   c00006e0 <strcmp>
c001058d:	83 c4 10             	add    esp,0x10
c0010590:	85 c0                	test   eax,eax
c0010592:	0f 94 c0             	sete   al
c0010595:	84 c0                	test   al,al
c0010597:	74 07                	je     c00105a0 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010599:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001059e:	eb 2c                	jmp    c00105cc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105a0:	83 ec 08             	sub    esp,0x8
c00105a3:	68 14 e9 01 c0       	push   0xc001e914
c00105a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105ac:	e8 2f 01 ff ff       	call   c00006e0 <strcmp>
c00105b1:	83 c4 10             	add    esp,0x10
c00105b4:	85 c0                	test   eax,eax
c00105b6:	0f 94 c0             	sete   al
c00105b9:	84 c0                	test   al,al
c00105bb:	74 07                	je     c00105c4 <KeResolveCompatibilitySymbol(char*)+0x184>
c00105bd:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c00105c2:	eb 08                	jmp    c00105cc <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105c4:	b8 00 00 00 00       	mov    eax,0x0
c00105c9:	8d 76 00             	lea    esi,[esi+0x0]
c00105cc:	83 c4 0c             	add    esp,0xc
c00105cf:	c3                   	ret    

c00105d0 <KiSigKill(int)>:
c00105d0:	57                   	push   edi
c00105d1:	b9 0a 00 00 00       	mov    ecx,0xa
c00105d6:	56                   	push   esi
c00105d7:	be 5d e9 01 c0       	mov    esi,0xc001e95d
c00105dc:	83 ec 14             	sub    esp,0x14
c00105df:	8d 7c 24 06          	lea    edi,[esp+0x6]
c00105e3:	fc                   	cld    
c00105e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105e6:	8d 44 24 06          	lea    eax,[esp+0x6]
c00105ea:	50                   	push   eax
c00105eb:	6a 00                	push   0x0
c00105ed:	6a 00                	push   0x0
c00105ef:	6a 27                	push   0x27
c00105f1:	e8 5c fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105f6:	83 c4 24             	add    esp,0x24
c00105f9:	5e                   	pop    esi
c00105fa:	5f                   	pop    edi
c00105fb:	c3                   	ret    

c00105fc <KiDefaultSignalHandlerIgnore(int)>:
c00105fc:	c3                   	ret    

c00105fd <KiDefaultSignalHandlerPause(int)>:
c00105fd:	57                   	push   edi
c00105fe:	b9 07 00 00 00       	mov    ecx,0x7
c0010603:	56                   	push   esi
c0010604:	be 67 e9 01 c0       	mov    esi,0xc001e967
c0010609:	83 ec 24             	sub    esp,0x24
c001060c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010610:	fc                   	cld    
c0010611:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010613:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010617:	50                   	push   eax
c0010618:	6a 00                	push   0x0
c001061a:	6a 00                	push   0x0
c001061c:	6a 27                	push   0x27
c001061e:	e8 2f fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010623:	83 c4 34             	add    esp,0x34
c0010626:	5e                   	pop    esi
c0010627:	5f                   	pop    edi
c0010628:	c3                   	ret    

c0010629 <KiDefaultSignalHandlerResume(int)>:
c0010629:	57                   	push   edi
c001062a:	b9 1d 00 00 00       	mov    ecx,0x1d
c001062f:	56                   	push   esi
c0010630:	be 83 e9 01 c0       	mov    esi,0xc001e983
c0010635:	83 ec 24             	sub    esp,0x24
c0010638:	8d 7c 24 03          	lea    edi,[esp+0x3]
c001063c:	fc                   	cld    
c001063d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001063f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010643:	50                   	push   eax
c0010644:	6a 00                	push   0x0
c0010646:	6a 00                	push   0x0
c0010648:	6a 27                	push   0x27
c001064a:	e8 03 fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001064f:	83 c4 34             	add    esp,0x34
c0010652:	5e                   	pop    esi
c0010653:	5f                   	pop    edi
c0010654:	c3                   	ret    

c0010655 <KeDeinitSignals(SigHandlerBlock*)>:
c0010655:	e9 6f 71 ff ff       	jmp    c00077c9 <free>

c001065a <KeInitSignals()>:
c001065a:	53                   	push   ebx
c001065b:	83 ec 14             	sub    esp,0x14
c001065e:	68 c8 00 00 00       	push   0xc8
c0010663:	e8 51 71 ff ff       	call   c00077b9 <malloc>
c0010668:	83 c4 0c             	add    esp,0xc
c001066b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010675:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001067f:	89 c3                	mov    ebx,eax
c0010681:	6a 20                	push   0x20
c0010683:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010689:	6a 00                	push   0x0
c001068b:	50                   	push   eax
c001068c:	e8 3f fe fe ff       	call   c00004d0 <memset>
c0010691:	83 c4 0c             	add    esp,0xc
c0010694:	6a 44                	push   0x44
c0010696:	6a 00                	push   0x0
c0010698:	53                   	push   ebx
c0010699:	e8 32 fe fe ff       	call   c00004d0 <memset>
c001069e:	89 d8                	mov    eax,ebx
c00106a0:	83 c4 18             	add    esp,0x18
c00106a3:	5b                   	pop    ebx
c00106a4:	c3                   	ret    

c00106a5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00106a5:	53                   	push   ebx
c00106a6:	b8 01 00 00 00       	mov    eax,0x1
c00106ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00106af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106b3:	83 f9 10             	cmp    ecx,0x10
c00106b6:	7f 21                	jg     c00106d9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00106b8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00106bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106bf:	89 03                	mov    DWORD PTR [ebx],eax
c00106c1:	b8 01 00 00 00       	mov    eax,0x1
c00106c6:	d3 e0                	shl    eax,cl
c00106c8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00106cc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00106cf:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00106d7:	31 c0                	xor    eax,eax
c00106d9:	5b                   	pop    ebx
c00106da:	c3                   	ret    

c00106db <KeRaiseSignal(SigHandlerBlock*, int)>:
c00106db:	55                   	push   ebp
c00106dc:	57                   	push   edi
c00106dd:	bf 08 00 00 00       	mov    edi,0x8
c00106e2:	56                   	push   esi
c00106e3:	53                   	push   ebx
c00106e4:	83 ec 18             	sub    esp,0x18
c00106e7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00106eb:	68 a0 e9 01 c0       	push   0xc001e9a0
c00106f0:	e8 78 9f ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c00106f5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00106fc:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010702:	83 c4 10             	add    esp,0x10
c0010705:	31 c9                	xor    ecx,ecx
c0010707:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001070b:	99                   	cdq    
c001070c:	f7 ff                	idiv   edi
c001070e:	8d 42 24             	lea    eax,[edx+0x24]
c0010711:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010715:	85 f6                	test   esi,esi
c0010717:	75 1a                	jne    c0010733 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010719:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001071d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010721:	50                   	push   eax
c0010722:	50                   	push   eax
c0010723:	52                   	push   edx
c0010724:	68 b1 e9 01 c0       	push   0xc001e9b1
c0010729:	e8 3f 9f ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001072e:	83 c4 10             	add    esp,0x10
c0010731:	eb 1b                	jmp    c001074e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010733:	41                   	inc    ecx
c0010734:	83 f9 08             	cmp    ecx,0x8
c0010737:	75 ce                	jne    c0010707 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010739:	83 ec 0c             	sub    esp,0xc
c001073c:	be 01 00 00 00       	mov    esi,0x1
c0010741:	68 d2 e9 01 c0       	push   0xc001e9d2
c0010746:	e8 22 9f ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001074b:	83 c4 10             	add    esp,0x10
c001074e:	83 c4 0c             	add    esp,0xc
c0010751:	89 f0                	mov    eax,esi
c0010753:	5b                   	pop    ebx
c0010754:	5e                   	pop    esi
c0010755:	5f                   	pop    edi
c0010756:	5d                   	pop    ebp
c0010757:	c3                   	ret    

c0010758 <KeCheckSignal(SigHandlerBlock*)>:
c0010758:	55                   	push   ebp
c0010759:	57                   	push   edi
c001075a:	56                   	push   esi
c001075b:	53                   	push   ebx
c001075c:	51                   	push   ecx
c001075d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010761:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010768:	75 07                	jne    c0010771 <KeCheckSignal(SigHandlerBlock*)+0x19>
c001076a:	31 c0                	xor    eax,eax
c001076c:	e9 cc 00 00 00       	jmp    c001083d <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010771:	31 c9                	xor    ecx,ecx
c0010773:	bf 08 00 00 00       	mov    edi,0x8
c0010778:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001077e:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010781:	99                   	cdq    
c0010782:	f7 ff                	idiv   edi
c0010784:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c001078b:	85 d2                	test   edx,edx
c001078d:	0f 84 94 00 00 00    	je     c0010827 <KeCheckSignal(SigHandlerBlock*)+0xcf>
c0010793:	88 d1                	mov    cl,dl
c0010795:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001079b:	bf 01 00 00 00       	mov    edi,0x1
c00107a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00107a3:	d3 e7                	shl    edi,cl
c00107a5:	bd 01 00 00 00       	mov    ebp,0x1
c00107aa:	31 c9                	xor    ecx,ecx
c00107ac:	89 e8                	mov    eax,ebp
c00107ae:	d3 e0                	shl    eax,cl
c00107b0:	85 04 24             	test   DWORD PTR [esp],eax
c00107b3:	74 06                	je     c00107bb <KeCheckSignal(SigHandlerBlock*)+0x63>
c00107b5:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00107b9:	75 af                	jne    c001076a <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107bb:	41                   	inc    ecx
c00107bc:	83 f9 11             	cmp    ecx,0x11
c00107bf:	75 eb                	jne    c00107ac <KeCheckSignal(SigHandlerBlock*)+0x54>
c00107c1:	8d 4e 01             	lea    ecx,[esi+0x1]
c00107c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00107c7:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c00107cd:	09 f8                	or     eax,edi
c00107cf:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c00107da:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00107e0:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00107e7:	31 c0                	xor    eax,eax
c00107e9:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00107f1:	74 09                	je     c00107fc <KeCheckSignal(SigHandlerBlock*)+0xa4>
c00107f3:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00107fa:	eb 06                	jmp    c0010802 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c00107fc:	40                   	inc    eax
c00107fd:	83 f8 08             	cmp    eax,0x8
c0010800:	75 e7                	jne    c00107e9 <KeCheckSignal(SigHandlerBlock*)+0x91>
c0010802:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010805:	83 fa 09             	cmp    edx,0x9
c0010808:	75 07                	jne    c0010811 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c001080a:	b8 d0 05 01 c0       	mov    eax,0xc00105d0
c001080f:	eb 2c                	jmp    c001083d <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010811:	83 f8 01             	cmp    eax,0x1
c0010814:	0f 84 50 ff ff ff    	je     c001076a <KeCheckSignal(SigHandlerBlock*)+0x12>
c001081a:	85 c0                	test   eax,eax
c001081c:	75 1f                	jne    c001083d <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001081e:	8b 04 95 c0 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0440]
c0010825:	eb 16                	jmp    c001083d <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010827:	46                   	inc    esi
c0010828:	41                   	inc    ecx
c0010829:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001082f:	83 f9 08             	cmp    ecx,0x8
c0010832:	0f 85 40 ff ff ff    	jne    c0010778 <KeCheckSignal(SigHandlerBlock*)+0x20>
c0010838:	e9 2d ff ff ff       	jmp    c001076a <KeCheckSignal(SigHandlerBlock*)+0x12>
c001083d:	5a                   	pop    edx
c001083e:	5b                   	pop    ebx
c001083f:	5e                   	pop    esi
c0010840:	5f                   	pop    edi
c0010841:	5d                   	pop    ebp
c0010842:	c3                   	ret    

c0010843 <KiCheckSignalZ>:
c0010843:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010848:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001084b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010851:	e8 02 ff ff ff       	call   c0010758 <KeCheckSignal(SigHandlerBlock*)>
c0010856:	5a                   	pop    edx
c0010857:	c3                   	ret    

c0010858 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010858:	56                   	push   esi
c0010859:	53                   	push   ebx
c001085a:	bb 01 00 00 00       	mov    ebx,0x1
c001085f:	52                   	push   edx
c0010860:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010864:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010868:	d3 e3                	shl    ebx,cl
c001086a:	83 f9 10             	cmp    ecx,0x10
c001086d:	7f 08                	jg     c0010877 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001086f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010875:	75 10                	jne    c0010887 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010877:	83 ec 0c             	sub    esp,0xc
c001087a:	68 e3 e9 01 c0       	push   0xc001e9e3
c001087f:	e8 6b fa ff ff       	call   c00102ef <KePanic(char const*)>
c0010884:	83 c4 10             	add    esp,0x10
c0010887:	f7 d3                	not    ebx
c0010889:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001088f:	58                   	pop    eax
c0010890:	5b                   	pop    ebx
c0010891:	5e                   	pop    esi
c0010892:	c3                   	ret    

c0010893 <SysSeekDir(regs*)>:
c0010893:	31 c0                	xor    eax,eax
c0010895:	31 d2                	xor    edx,edx
c0010897:	c3                   	ret    

c0010898 <SysTellDir(regs*)>:
c0010898:	31 c0                	xor    eax,eax
c001089a:	31 d2                	xor    edx,edx
c001089c:	c3                   	ret    

c001089d <SysVerify(regs*)>:
c001089d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a1:	31 d2                	xor    edx,edx
c00108a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108a6:	c3                   	ret    

c00108a7 <SysGetArgc(regs*)>:
c00108a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108af:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00108b5:	99                   	cdq    
c00108b6:	c3                   	ret    

c00108b7 <SysTTYName(regs*)>:
c00108b7:	b8 01 00 00 00       	mov    eax,0x1
c00108bc:	31 d2                	xor    edx,edx
c00108be:	c3                   	ret    

c00108bf <SysFormatDisk(regs*)>:
c00108bf:	56                   	push   esi
c00108c0:	53                   	push   ebx
c00108c1:	50                   	push   eax
c00108c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108c6:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c00108cc:	eb 28                	jmp    c00108f6 <SysFormatDisk(regs*)+0x37>
c00108ce:	83 ec 0c             	sub    esp,0xc
c00108d1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00108d4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00108d7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108d9:	51                   	push   ecx
c00108da:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00108dd:	51                   	push   ecx
c00108de:	50                   	push   eax
c00108df:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00108e6:	50                   	push   eax
c00108e7:	53                   	push   ebx
c00108e8:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00108eb:	83 c4 20             	add    esp,0x20
c00108ee:	83 f8 08             	cmp    eax,0x8
c00108f1:	75 12                	jne    c0010905 <SysFormatDisk(regs*)+0x46>
c00108f3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00108f6:	85 db                	test   ebx,ebx
c00108f8:	75 d4                	jne    c00108ce <SysFormatDisk(regs*)+0xf>
c00108fa:	59                   	pop    ecx
c00108fb:	b8 03 00 00 00       	mov    eax,0x3
c0010900:	31 d2                	xor    edx,edx
c0010902:	5b                   	pop    ebx
c0010903:	5e                   	pop    esi
c0010904:	c3                   	ret    
c0010905:	85 c0                	test   eax,eax
c0010907:	74 1b                	je     c0010924 <SysFormatDisk(regs*)+0x65>
c0010909:	83 f8 09             	cmp    eax,0x9
c001090c:	74 0b                	je     c0010919 <SysFormatDisk(regs*)+0x5a>
c001090e:	59                   	pop    ecx
c001090f:	b8 02 00 00 00       	mov    eax,0x2
c0010914:	31 d2                	xor    edx,edx
c0010916:	5b                   	pop    ebx
c0010917:	5e                   	pop    esi
c0010918:	c3                   	ret    
c0010919:	59                   	pop    ecx
c001091a:	b8 01 00 00 00       	mov    eax,0x1
c001091f:	31 d2                	xor    edx,edx
c0010921:	5b                   	pop    ebx
c0010922:	5e                   	pop    esi
c0010923:	c3                   	ret    
c0010924:	59                   	pop    ecx
c0010925:	31 c0                	xor    eax,eax
c0010927:	31 d2                	xor    edx,edx
c0010929:	5b                   	pop    ebx
c001092a:	5e                   	pop    esi
c001092b:	c3                   	ret    

c001092c <SysSetDiskVolumeLabel(regs*)>:
c001092c:	56                   	push   esi
c001092d:	53                   	push   ebx
c001092e:	53                   	push   ebx
c001092f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010933:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010936:	83 f8 19             	cmp    eax,0x19
c0010939:	77 2d                	ja     c0010968 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001093b:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0010942:	85 c9                	test   ecx,ecx
c0010944:	74 22                	je     c0010968 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010946:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010949:	85 db                	test   ebx,ebx
c001094b:	74 1b                	je     c0010968 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001094d:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010953:	85 d2                	test   edx,edx
c0010955:	74 11                	je     c0010968 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010957:	8b 32                	mov    esi,DWORD PTR [edx]
c0010959:	53                   	push   ebx
c001095a:	50                   	push   eax
c001095b:	51                   	push   ecx
c001095c:	52                   	push   edx
c001095d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010960:	83 c4 10             	add    esp,0x10
c0010963:	99                   	cdq    
c0010964:	59                   	pop    ecx
c0010965:	5b                   	pop    ebx
c0010966:	5e                   	pop    esi
c0010967:	c3                   	ret    
c0010968:	59                   	pop    ecx
c0010969:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001096e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010973:	5b                   	pop    ebx
c0010974:	5e                   	pop    esi
c0010975:	c3                   	ret    

c0010976 <SysGetDiskVolumeLabel(regs*)>:
c0010976:	57                   	push   edi
c0010977:	56                   	push   esi
c0010978:	53                   	push   ebx
c0010979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010980:	83 fa 19             	cmp    edx,0x19
c0010983:	77 38                	ja     c00109bd <SysGetDiskVolumeLabel(regs*)+0x47>
c0010985:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c001098c:	85 c9                	test   ecx,ecx
c001098e:	74 2d                	je     c00109bd <SysGetDiskVolumeLabel(regs*)+0x47>
c0010990:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010993:	85 db                	test   ebx,ebx
c0010995:	74 26                	je     c00109bd <SysGetDiskVolumeLabel(regs*)+0x47>
c0010997:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001099a:	85 f6                	test   esi,esi
c001099c:	74 1f                	je     c00109bd <SysGetDiskVolumeLabel(regs*)+0x47>
c001099e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00109a4:	85 c0                	test   eax,eax
c00109a6:	74 15                	je     c00109bd <SysGetDiskVolumeLabel(regs*)+0x47>
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	8b 38                	mov    edi,DWORD PTR [eax]
c00109ad:	56                   	push   esi
c00109ae:	53                   	push   ebx
c00109af:	52                   	push   edx
c00109b0:	51                   	push   ecx
c00109b1:	50                   	push   eax
c00109b2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00109b5:	83 c4 20             	add    esp,0x20
c00109b8:	99                   	cdq    
c00109b9:	5b                   	pop    ebx
c00109ba:	5e                   	pop    esi
c00109bb:	5f                   	pop    edi
c00109bc:	c3                   	ret    
c00109bd:	5b                   	pop    ebx
c00109be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00109c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109c8:	5e                   	pop    esi
c00109c9:	5f                   	pop    edi
c00109ca:	c3                   	ret    

c00109cb <SysShutdown(regs*)>:
c00109cb:	83 ec 0c             	sub    esp,0xc
c00109ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109d5:	85 c0                	test   eax,eax
c00109d7:	74 18                	je     c00109f1 <SysShutdown(regs*)+0x26>
c00109d9:	83 f8 01             	cmp    eax,0x1
c00109dc:	74 38                	je     c0010a16 <SysShutdown(regs*)+0x4b>
c00109de:	83 f8 02             	cmp    eax,0x2
c00109e1:	74 24                	je     c0010a07 <SysShutdown(regs*)+0x3c>
c00109e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109ed:	83 c4 0c             	add    esp,0xc
c00109f0:	c3                   	ret    
c00109f1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00109f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00109f8:	6a 00                	push   0x0
c00109fa:	6a 00                	push   0x0
c00109fc:	6a 00                	push   0x0
c00109fe:	50                   	push   eax
c00109ff:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a02:	83 c4 10             	add    esp,0x10
c0010a05:	eb dc                	jmp    c00109e3 <SysShutdown(regs*)+0x18>
c0010a07:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010a0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a0e:	6a 00                	push   0x0
c0010a10:	6a 00                	push   0x0
c0010a12:	6a 01                	push   0x1
c0010a14:	eb e8                	jmp    c00109fe <SysShutdown(regs*)+0x33>
c0010a16:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c0010a1b:	85 c0                	test   eax,eax
c0010a1d:	74 02                	je     c0010a21 <SysShutdown(regs*)+0x56>
c0010a1f:	ff d0                	call   eax
c0010a21:	31 c0                	xor    eax,eax
c0010a23:	31 d2                	xor    edx,edx
c0010a25:	83 c4 0c             	add    esp,0xc
c0010a28:	c3                   	ret    

c0010a29 <SysRealpath(regs*)>:
c0010a29:	83 ec 0c             	sub    esp,0xc
c0010a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a30:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a33:	85 d2                	test   edx,edx
c0010a35:	74 07                	je     c0010a3e <SysRealpath(regs*)+0x15>
c0010a37:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a3a:	85 c0                	test   eax,eax
c0010a3c:	75 0b                	jne    c0010a49 <SysRealpath(regs*)+0x20>
c0010a3e:	b8 01 00 00 00       	mov    eax,0x1
c0010a43:	31 d2                	xor    edx,edx
c0010a45:	83 c4 0c             	add    esp,0xc
c0010a48:	c3                   	ret    
c0010a49:	51                   	push   ecx
c0010a4a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010a50:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010a53:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010a59:	51                   	push   ecx
c0010a5a:	52                   	push   edx
c0010a5b:	50                   	push   eax
c0010a5c:	e8 d7 9f ff ff       	call   c000aa38 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010a61:	83 c4 10             	add    esp,0x10
c0010a64:	31 c0                	xor    eax,eax
c0010a66:	31 d2                	xor    edx,edx
c0010a68:	83 c4 0c             	add    esp,0xc
c0010a6b:	c3                   	ret    

c0010a6c <SysReadDir(regs*)>:
c0010a6c:	53                   	push   ebx
c0010a6d:	83 ec 18             	sub    esp,0x18
c0010a70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010a74:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a77:	83 f8 02             	cmp    eax,0x2
c0010a7a:	76 61                	jbe    c0010add <SysReadDir(regs*)+0x71>
c0010a7c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a83:	77 49                	ja     c0010ace <SysReadDir(regs*)+0x62>
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	50                   	push   eax
c0010a89:	e8 a1 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a8e:	83 c4 10             	add    esp,0x10
c0010a91:	85 c0                	test   eax,eax
c0010a93:	74 39                	je     c0010ace <SysReadDir(regs*)+0x62>
c0010a95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a9d:	83 ec 0c             	sub    esp,0xc
c0010aa0:	8b 10                	mov    edx,DWORD PTR [eax]
c0010aa2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010aa6:	51                   	push   ecx
c0010aa7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010aaa:	51                   	push   ecx
c0010aab:	6a 00                	push   0x0
c0010aad:	68 10 01 00 00       	push   0x110
c0010ab2:	50                   	push   eax
c0010ab3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010ab6:	83 c4 20             	add    esp,0x20
c0010ab9:	85 c0                	test   eax,eax
c0010abb:	74 29                	je     c0010ae6 <SysReadDir(regs*)+0x7a>
c0010abd:	83 f8 07             	cmp    eax,0x7
c0010ac0:	74 1b                	je     c0010add <SysReadDir(regs*)+0x71>
c0010ac2:	b8 02 00 00 00       	mov    eax,0x2
c0010ac7:	31 d2                	xor    edx,edx
c0010ac9:	83 c4 18             	add    esp,0x18
c0010acc:	5b                   	pop    ebx
c0010acd:	c3                   	ret    
c0010ace:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ad3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ad8:	83 c4 18             	add    esp,0x18
c0010adb:	5b                   	pop    ebx
c0010adc:	c3                   	ret    
c0010add:	b8 01 00 00 00       	mov    eax,0x1
c0010ae2:	31 d2                	xor    edx,edx
c0010ae4:	eb e3                	jmp    c0010ac9 <SysReadDir(regs*)+0x5d>
c0010ae6:	31 c0                	xor    eax,eax
c0010ae8:	31 d2                	xor    edx,edx
c0010aea:	eb dd                	jmp    c0010ac9 <SysReadDir(regs*)+0x5d>

c0010aec <SysIsATTY(regs*)>:
c0010aec:	83 ec 0c             	sub    esp,0xc
c0010aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010af6:	83 f8 02             	cmp    eax,0x2
c0010af9:	76 07                	jbe    c0010b02 <SysIsATTY(regs*)+0x16>
c0010afb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010b00:	75 28                	jne    c0010b2a <SysIsATTY(regs*)+0x3e>
c0010b02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010b10:	85 c0                	test   eax,eax
c0010b12:	74 26                	je     c0010b3a <SysIsATTY(regs*)+0x4e>
c0010b14:	83 ec 0c             	sub    esp,0xc
c0010b17:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b19:	50                   	push   eax
c0010b1a:	ff 12                	call   DWORD PTR [edx]
c0010b1c:	31 d2                	xor    edx,edx
c0010b1e:	25 ff 00 00 00       	and    eax,0xff
c0010b23:	83 c4 10             	add    esp,0x10
c0010b26:	83 c4 0c             	add    esp,0xc
c0010b29:	c3                   	ret    
c0010b2a:	83 ec 0c             	sub    esp,0xc
c0010b2d:	50                   	push   eax
c0010b2e:	e8 fc 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b33:	83 c4 10             	add    esp,0x10
c0010b36:	85 c0                	test   eax,eax
c0010b38:	75 da                	jne    c0010b14 <SysIsATTY(regs*)+0x28>
c0010b3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b44:	83 c4 0c             	add    esp,0xc
c0010b47:	c3                   	ret    

c0010b48 <SysSeek(regs*)>:
c0010b48:	53                   	push   ebx
c0010b49:	83 ec 08             	sub    esp,0x8
c0010b4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b50:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b53:	8d 50 fd             	lea    edx,[eax-0x3]
c0010b56:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010b5c:	77 34                	ja     c0010b92 <SysSeek(regs*)+0x4a>
c0010b5e:	83 ec 0c             	sub    esp,0xc
c0010b61:	50                   	push   eax
c0010b62:	e8 c8 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b67:	83 c4 0c             	add    esp,0xc
c0010b6a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010b6d:	31 db                	xor    ebx,ebx
c0010b6f:	53                   	push   ebx
c0010b70:	51                   	push   ecx
c0010b71:	50                   	push   eax
c0010b72:	e8 e9 a1 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c0010b77:	83 c4 10             	add    esp,0x10
c0010b7a:	85 c0                	test   eax,eax
c0010b7c:	0f 95 c0             	setne  al
c0010b7f:	31 d2                	xor    edx,edx
c0010b81:	25 ff 00 00 00       	and    eax,0xff
c0010b86:	f7 d8                	neg    eax
c0010b88:	83 d2 00             	adc    edx,0x0
c0010b8b:	83 c4 08             	add    esp,0x8
c0010b8e:	f7 da                	neg    edx
c0010b90:	5b                   	pop    ebx
c0010b91:	c3                   	ret    
c0010b92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b9c:	83 c4 08             	add    esp,0x8
c0010b9f:	5b                   	pop    ebx
c0010ba0:	c3                   	ret    

c0010ba1 <SysTell(regs*)>:
c0010ba1:	53                   	push   ebx
c0010ba2:	83 ec 08             	sub    esp,0x8
c0010ba5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ba9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bac:	83 f8 02             	cmp    eax,0x2
c0010baf:	76 50                	jbe    c0010c01 <SysTell(regs*)+0x60>
c0010bb1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bb6:	76 19                	jbe    c0010bd1 <SysTell(regs*)+0x30>
c0010bb8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010bbb:	31 d2                	xor    edx,edx
c0010bbd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bc3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bca:	31 c0                	xor    eax,eax
c0010bcc:	83 c4 08             	add    esp,0x8
c0010bcf:	5b                   	pop    ebx
c0010bd0:	c3                   	ret    
c0010bd1:	83 ec 0c             	sub    esp,0xc
c0010bd4:	50                   	push   eax
c0010bd5:	e8 55 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010bda:	5a                   	pop    edx
c0010bdb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010bde:	59                   	pop    ecx
c0010bdf:	53                   	push   ebx
c0010be0:	50                   	push   eax
c0010be1:	e8 d0 a1 ff ff       	call   c000adb6 <File::tell(unsigned long long*)>
c0010be6:	83 c4 10             	add    esp,0x10
c0010be9:	85 c0                	test   eax,eax
c0010beb:	0f 95 c0             	setne  al
c0010bee:	31 d2                	xor    edx,edx
c0010bf0:	25 ff 00 00 00       	and    eax,0xff
c0010bf5:	f7 d8                	neg    eax
c0010bf7:	83 d2 00             	adc    edx,0x0
c0010bfa:	83 c4 08             	add    esp,0x8
c0010bfd:	f7 da                	neg    edx
c0010bff:	5b                   	pop    ebx
c0010c00:	c3                   	ret    
c0010c01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c0b:	83 c4 08             	add    esp,0x8
c0010c0e:	5b                   	pop    ebx
c0010c0f:	c3                   	ret    

c0010c10 <SysSize(regs*)>:
c0010c10:	53                   	push   ebx
c0010c11:	83 ec 18             	sub    esp,0x18
c0010c14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c18:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c1b:	83 f8 02             	cmp    eax,0x2
c0010c1e:	76 56                	jbe    c0010c76 <SysSize(regs*)+0x66>
c0010c20:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c25:	76 19                	jbe    c0010c40 <SysSize(regs*)+0x30>
c0010c27:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010c2a:	31 d2                	xor    edx,edx
c0010c2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c39:	31 c0                	xor    eax,eax
c0010c3b:	83 c4 18             	add    esp,0x18
c0010c3e:	5b                   	pop    ebx
c0010c3f:	c3                   	ret    
c0010c40:	83 ec 0c             	sub    esp,0xc
c0010c43:	50                   	push   eax
c0010c44:	e8 e6 84 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010c49:	83 c4 0c             	add    esp,0xc
c0010c4c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010c50:	52                   	push   edx
c0010c51:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c54:	52                   	push   edx
c0010c55:	50                   	push   eax
c0010c56:	e8 f3 a2 ff ff       	call   c000af4e <File::stat(unsigned long long*, bool*)>
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	85 c0                	test   eax,eax
c0010c60:	0f 95 c0             	setne  al
c0010c63:	31 d2                	xor    edx,edx
c0010c65:	25 ff 00 00 00       	and    eax,0xff
c0010c6a:	f7 d8                	neg    eax
c0010c6c:	83 d2 00             	adc    edx,0x0
c0010c6f:	83 c4 18             	add    esp,0x18
c0010c72:	f7 da                	neg    edx
c0010c74:	5b                   	pop    ebx
c0010c75:	c3                   	ret    
c0010c76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c80:	83 c4 18             	add    esp,0x18
c0010c83:	5b                   	pop    ebx
c0010c84:	c3                   	ret    

c0010c85 <SysSizeFromFilename(regs*)>:
c0010c85:	57                   	push   edi
c0010c86:	56                   	push   esi
c0010c87:	53                   	push   ebx
c0010c88:	83 ec 20             	sub    esp,0x20
c0010c8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c8f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010c92:	83 fb 02             	cmp    ebx,0x2
c0010c95:	0f 86 8c 00 00 00    	jbe    c0010d27 <SysSizeFromFilename(regs*)+0xa2>
c0010c9b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010ca1:	76 1b                	jbe    c0010cbe <SysSizeFromFilename(regs*)+0x39>
c0010ca3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010ca6:	31 d2                	xor    edx,edx
c0010ca8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010cae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cb5:	83 c4 20             	add    esp,0x20
c0010cb8:	31 c0                	xor    eax,eax
c0010cba:	5b                   	pop    ebx
c0010cbb:	5e                   	pop    esi
c0010cbc:	5f                   	pop    edi
c0010cbd:	c3                   	ret    
c0010cbe:	83 ec 0c             	sub    esp,0xc
c0010cc1:	68 14 01 00 00       	push   0x114
c0010cc6:	e8 ee 6a ff ff       	call   c00077b9 <malloc>
c0010ccb:	83 c4 0c             	add    esp,0xc
c0010cce:	89 c7                	mov    edi,eax
c0010cd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cd5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cd8:	50                   	push   eax
c0010cd9:	53                   	push   ebx
c0010cda:	57                   	push   edi
c0010cdb:	e8 02 9f ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0010ce0:	83 c4 0c             	add    esp,0xc
c0010ce3:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010ce7:	50                   	push   eax
c0010ce8:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010ceb:	52                   	push   edx
c0010cec:	57                   	push   edi
c0010ced:	e8 5c a2 ff ff       	call   c000af4e <File::stat(unsigned long long*, bool*)>
c0010cf2:	83 c4 10             	add    esp,0x10
c0010cf5:	85 ff                	test   edi,edi
c0010cf7:	74 14                	je     c0010d0d <SysSizeFromFilename(regs*)+0x88>
c0010cf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cfd:	8b 17                	mov    edx,DWORD PTR [edi]
c0010cff:	83 ec 0c             	sub    esp,0xc
c0010d02:	57                   	push   edi
c0010d03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d06:	83 c4 10             	add    esp,0x10
c0010d09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d0d:	85 c0                	test   eax,eax
c0010d0f:	0f 95 c0             	setne  al
c0010d12:	31 d2                	xor    edx,edx
c0010d14:	25 ff 00 00 00       	and    eax,0xff
c0010d19:	f7 d8                	neg    eax
c0010d1b:	83 d2 00             	adc    edx,0x0
c0010d1e:	83 c4 20             	add    esp,0x20
c0010d21:	f7 da                	neg    edx
c0010d23:	5b                   	pop    ebx
c0010d24:	5e                   	pop    esi
c0010d25:	5f                   	pop    edi
c0010d26:	c3                   	ret    
c0010d27:	83 c4 20             	add    esp,0x20
c0010d2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d2f:	5b                   	pop    ebx
c0010d30:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d35:	5e                   	pop    esi
c0010d36:	5f                   	pop    edi
c0010d37:	c3                   	ret    

c0010d38 <SysClose(regs*)>:
c0010d38:	53                   	push   ebx
c0010d39:	83 ec 08             	sub    esp,0x8
c0010d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d43:	83 f8 02             	cmp    eax,0x2
c0010d46:	76 41                	jbe    c0010d89 <SysClose(regs*)+0x51>
c0010d48:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010d4e:	83 fa 01             	cmp    edx,0x1
c0010d51:	76 2d                	jbe    c0010d80 <SysClose(regs*)+0x48>
c0010d53:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d58:	77 2f                	ja     c0010d89 <SysClose(regs*)+0x51>
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	50                   	push   eax
c0010d5e:	e8 cc 83 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010d63:	89 c3                	mov    ebx,eax
c0010d65:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d68:	e8 93 9f ff ff       	call   c000ad00 <File::close()>
c0010d6d:	83 c4 10             	add    esp,0x10
c0010d70:	85 db                	test   ebx,ebx
c0010d72:	74 0c                	je     c0010d80 <SysClose(regs*)+0x48>
c0010d74:	83 ec 0c             	sub    esp,0xc
c0010d77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d79:	53                   	push   ebx
c0010d7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d7d:	83 c4 10             	add    esp,0x10
c0010d80:	31 c0                	xor    eax,eax
c0010d82:	31 d2                	xor    edx,edx
c0010d84:	83 c4 08             	add    esp,0x8
c0010d87:	5b                   	pop    ebx
c0010d88:	c3                   	ret    
c0010d89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d93:	83 c4 08             	add    esp,0x8
c0010d96:	5b                   	pop    ebx
c0010d97:	c3                   	ret    

c0010d98 <SysOpenDir(regs*)>:
c0010d98:	57                   	push   edi
c0010d99:	56                   	push   esi
c0010d9a:	53                   	push   ebx
c0010d9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d9f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010da2:	85 c0                	test   eax,eax
c0010da4:	0f 84 e7 00 00 00    	je     c0010e91 <SysOpenDir(regs*)+0xf9>
c0010daa:	83 ec 0c             	sub    esp,0xc
c0010dad:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010db0:	56                   	push   esi
c0010db1:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010db4:	57                   	push   edi
c0010db5:	50                   	push   eax
c0010db6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010db9:	50                   	push   eax
c0010dba:	68 f4 e9 01 c0       	push   0xc001e9f4
c0010dbf:	e8 a9 98 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0010dc4:	83 c4 18             	add    esp,0x18
c0010dc7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010dca:	50                   	push   eax
c0010dcb:	68 1a ea 01 c0       	push   0xc001ea1a
c0010dd0:	e8 98 98 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0010dd5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010ddc:	e8 d8 69 ff ff       	call   c00077b9 <malloc>
c0010de1:	83 c4 0c             	add    esp,0xc
c0010de4:	89 c6                	mov    esi,eax
c0010de6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010deb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010dee:	50                   	push   eax
c0010def:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010df2:	50                   	push   eax
c0010df3:	56                   	push   esi
c0010df4:	e8 13 a3 ff ff       	call   c000b10c <Directory::Directory(char const*, Process*)>
c0010df9:	c7 04 24 0e f8 01 c0 	mov    DWORD PTR [esp],0xc001f80e
c0010e00:	e8 68 98 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0010e05:	83 c4 10             	add    esp,0x10
c0010e08:	85 f6                	test   esi,esi
c0010e0a:	0f 84 8f 00 00 00    	je     c0010e9f <SysOpenDir(regs*)+0x107>
c0010e10:	83 ec 0c             	sub    esp,0xc
c0010e13:	68 2f ea 01 c0       	push   0xc001ea2f
c0010e18:	e8 50 98 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0010e1d:	58                   	pop    eax
c0010e1e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010e21:	5a                   	pop    edx
c0010e22:	51                   	push   ecx
c0010e23:	68 33 ea 01 c0       	push   0xc001ea33
c0010e28:	e8 40 98 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0010e2d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e30:	e8 97 a3 ff ff       	call   c000b1cc <Directory::open()>
c0010e35:	c7 04 24 ab d7 01 c0 	mov    DWORD PTR [esp],0xc001d7ab
c0010e3c:	89 c7                	mov    edi,eax
c0010e3e:	e8 2a 98 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0010e43:	83 c4 10             	add    esp,0x10
c0010e46:	85 ff                	test   edi,edi
c0010e48:	75 37                	jne    c0010e81 <SysOpenDir(regs*)+0xe9>
c0010e4a:	83 ec 0c             	sub    esp,0xc
c0010e4d:	68 44 ea 01 c0       	push   0xc001ea44
c0010e52:	e8 16 98 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0010e57:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e5a:	e8 db 7f ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010e5f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010e62:	89 02                	mov    DWORD PTR [edx],eax
c0010e64:	c1 f8 1f             	sar    eax,0x1f
c0010e67:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e6a:	c7 04 24 48 ea 01 c0 	mov    DWORD PTR [esp],0xc001ea48
c0010e71:	e8 f7 97 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0010e76:	83 c4 10             	add    esp,0x10
c0010e79:	31 c0                	xor    eax,eax
c0010e7b:	5b                   	pop    ebx
c0010e7c:	31 d2                	xor    edx,edx
c0010e7e:	5e                   	pop    esi
c0010e7f:	5f                   	pop    edi
c0010e80:	c3                   	ret    
c0010e81:	83 ec 0c             	sub    esp,0xc
c0010e84:	68 40 ea 01 c0       	push   0xc001ea40
c0010e89:	e8 df 97 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	5b                   	pop    ebx
c0010e92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e9c:	5e                   	pop    esi
c0010e9d:	5f                   	pop    edi
c0010e9e:	c3                   	ret    
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	68 2b ea 01 c0       	push   0xc001ea2b
c0010ea7:	eb e0                	jmp    c0010e89 <SysOpenDir(regs*)+0xf1>

c0010ea9 <SysCloseDir(regs*)>:
c0010ea9:	53                   	push   ebx
c0010eaa:	83 ec 08             	sub    esp,0x8
c0010ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eb1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010eb4:	8d 50 fd             	lea    edx,[eax-0x3]
c0010eb7:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010ebd:	77 2f                	ja     c0010eee <SysCloseDir(regs*)+0x45>
c0010ebf:	83 ec 0c             	sub    esp,0xc
c0010ec2:	50                   	push   eax
c0010ec3:	e8 67 82 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010ec8:	89 c3                	mov    ebx,eax
c0010eca:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ecd:	e8 56 a3 ff ff       	call   c000b228 <Directory::close()>
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	85 db                	test   ebx,ebx
c0010ed7:	74 0c                	je     c0010ee5 <SysCloseDir(regs*)+0x3c>
c0010ed9:	83 ec 0c             	sub    esp,0xc
c0010edc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ede:	53                   	push   ebx
c0010edf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ee2:	83 c4 10             	add    esp,0x10
c0010ee5:	31 c0                	xor    eax,eax
c0010ee7:	31 d2                	xor    edx,edx
c0010ee9:	83 c4 08             	add    esp,0x8
c0010eec:	5b                   	pop    ebx
c0010eed:	c3                   	ret    
c0010eee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ef3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ef8:	83 c4 08             	add    esp,0x8
c0010efb:	5b                   	pop    ebx
c0010efc:	c3                   	ret    

c0010efd <SysMakeDir(regs*)>:
c0010efd:	56                   	push   esi
c0010efe:	53                   	push   ebx
c0010eff:	83 ec 10             	sub    esp,0x10
c0010f02:	68 14 01 00 00       	push   0x114
c0010f07:	e8 ad 68 ff ff       	call   c00077b9 <malloc>
c0010f0c:	83 c4 0c             	add    esp,0xc
c0010f0f:	89 c3                	mov    ebx,eax
c0010f11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f16:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010f19:	56                   	push   esi
c0010f1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010f1e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f21:	50                   	push   eax
c0010f22:	53                   	push   ebx
c0010f23:	e8 e4 a1 ff ff       	call   c000b10c <Directory::Directory(char const*, Process*)>
c0010f28:	83 c4 10             	add    esp,0x10
c0010f2b:	85 db                	test   ebx,ebx
c0010f2d:	74 32                	je     c0010f61 <SysMakeDir(regs*)+0x64>
c0010f2f:	83 ec 0c             	sub    esp,0xc
c0010f32:	53                   	push   ebx
c0010f33:	e8 74 a4 ff ff       	call   c000b3ac <Directory::create()>
c0010f38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f3b:	89 c6                	mov    esi,eax
c0010f3d:	e8 e6 a2 ff ff       	call   c000b228 <Directory::close()>
c0010f42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f4a:	83 c4 10             	add    esp,0x10
c0010f4d:	31 c0                	xor    eax,eax
c0010f4f:	59                   	pop    ecx
c0010f50:	85 f6                	test   esi,esi
c0010f52:	5b                   	pop    ebx
c0010f53:	0f 95 c0             	setne  al
c0010f56:	5e                   	pop    esi
c0010f57:	31 d2                	xor    edx,edx
c0010f59:	f7 d8                	neg    eax
c0010f5b:	83 d2 00             	adc    edx,0x0
c0010f5e:	f7 da                	neg    edx
c0010f60:	c3                   	ret    
c0010f61:	59                   	pop    ecx
c0010f62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f6c:	5b                   	pop    ebx
c0010f6d:	5e                   	pop    esi
c0010f6e:	c3                   	ret    

c0010f6f <SysWait(regs*)>:
c0010f6f:	83 ec 10             	sub    esp,0x10
c0010f72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f76:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010f79:	52                   	push   edx
c0010f7a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010f7d:	51                   	push   ecx
c0010f7e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f81:	50                   	push   eax
c0010f82:	e8 89 2b 00 00       	call   c0013b10 <waitTask(int, int*, int)>
c0010f87:	83 c4 1c             	add    esp,0x1c
c0010f8a:	99                   	cdq    
c0010f8b:	c3                   	ret    

c0010f8c <SysNotImpl(regs*)>:
c0010f8c:	83 ec 18             	sub    esp,0x18
c0010f8f:	68 4c ea 01 c0       	push   0xc001ea4c
c0010f94:	e8 56 f3 ff ff       	call   c00102ef <KePanic(char const*)>
c0010f99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f9e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fa3:	83 c4 1c             	add    esp,0x1c
c0010fa6:	c3                   	ret    

c0010fa7 <SysPanic(regs*)>:
c0010fa7:	83 ec 18             	sub    esp,0x18
c0010faa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fae:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010fb1:	50                   	push   eax
c0010fb2:	e8 38 f3 ff ff       	call   c00102ef <KePanic(char const*)>
c0010fb7:	b8 01 00 00 00       	mov    eax,0x1
c0010fbc:	31 d2                	xor    edx,edx
c0010fbe:	83 c4 1c             	add    esp,0x1c
c0010fc1:	c3                   	ret    

c0010fc2 <SysRmdir(regs*)>:
c0010fc2:	56                   	push   esi
c0010fc3:	53                   	push   ebx
c0010fc4:	83 ec 20             	sub    esp,0x20
c0010fc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010fcb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010fce:	68 14 01 00 00       	push   0x114
c0010fd3:	e8 e1 67 ff ff       	call   c00077b9 <malloc>
c0010fd8:	83 c4 0c             	add    esp,0xc
c0010fdb:	89 c3                	mov    ebx,eax
c0010fdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fe2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fe5:	50                   	push   eax
c0010fe6:	56                   	push   esi
c0010fe7:	53                   	push   ebx
c0010fe8:	e8 f5 9b ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0010fed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ff0:	e8 25 9e ff ff       	call   c000ae1a <File::unlink()>
c0010ff5:	83 c4 10             	add    esp,0x10
c0010ff8:	85 db                	test   ebx,ebx
c0010ffa:	74 14                	je     c0011010 <SysRmdir(regs*)+0x4e>
c0010ffc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011000:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011002:	83 ec 0c             	sub    esp,0xc
c0011005:	53                   	push   ebx
c0011006:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011009:	83 c4 10             	add    esp,0x10
c001100c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011010:	85 c0                	test   eax,eax
c0011012:	0f 95 c0             	setne  al
c0011015:	31 d2                	xor    edx,edx
c0011017:	25 ff 00 00 00       	and    eax,0xff
c001101c:	f7 d8                	neg    eax
c001101e:	83 d2 00             	adc    edx,0x0
c0011021:	83 c4 14             	add    esp,0x14
c0011024:	f7 da                	neg    edx
c0011026:	5b                   	pop    ebx
c0011027:	5e                   	pop    esi
c0011028:	c3                   	ret    

c0011029 <SysUnlink(regs*)>:
c0011029:	56                   	push   esi
c001102a:	53                   	push   ebx
c001102b:	83 ec 20             	sub    esp,0x20
c001102e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011032:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011035:	68 14 01 00 00       	push   0x114
c001103a:	e8 7a 67 ff ff       	call   c00077b9 <malloc>
c001103f:	83 c4 0c             	add    esp,0xc
c0011042:	89 c3                	mov    ebx,eax
c0011044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011049:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001104c:	50                   	push   eax
c001104d:	56                   	push   esi
c001104e:	53                   	push   ebx
c001104f:	e8 8e 9b ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0011054:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011057:	e8 be 9d ff ff       	call   c000ae1a <File::unlink()>
c001105c:	83 c4 10             	add    esp,0x10
c001105f:	85 db                	test   ebx,ebx
c0011061:	74 14                	je     c0011077 <SysUnlink(regs*)+0x4e>
c0011063:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011067:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011069:	83 ec 0c             	sub    esp,0xc
c001106c:	53                   	push   ebx
c001106d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011070:	83 c4 10             	add    esp,0x10
c0011073:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011077:	85 c0                	test   eax,eax
c0011079:	0f 95 c0             	setne  al
c001107c:	31 d2                	xor    edx,edx
c001107e:	25 ff 00 00 00       	and    eax,0xff
c0011083:	f7 d8                	neg    eax
c0011085:	83 d2 00             	adc    edx,0x0
c0011088:	83 c4 14             	add    esp,0x14
c001108b:	f7 da                	neg    edx
c001108d:	5b                   	pop    ebx
c001108e:	5e                   	pop    esi
c001108f:	c3                   	ret    

c0011090 <SysGetArgv(regs*)>:
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011097:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001109a:	85 c0                	test   eax,eax
c001109c:	78 2c                	js     c00110ca <SysGetArgv(regs*)+0x3a>
c001109e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00110a4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00110a7:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00110ad:	7d 1b                	jge    c00110ca <SysGetArgv(regs*)+0x3a>
c00110af:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00110b6:	85 c0                	test   eax,eax
c00110b8:	74 18                	je     c00110d2 <SysGetArgv(regs*)+0x42>
c00110ba:	83 ec 08             	sub    esp,0x8
c00110bd:	50                   	push   eax
c00110be:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00110c1:	50                   	push   eax
c00110c2:	e8 39 f5 fe ff       	call   c0000600 <strcpy>
c00110c7:	83 c4 10             	add    esp,0x10
c00110ca:	31 c0                	xor    eax,eax
c00110cc:	31 d2                	xor    edx,edx
c00110ce:	83 c4 0c             	add    esp,0xc
c00110d1:	c3                   	ret    
c00110d2:	b8 01 00 00 00       	mov    eax,0x1
c00110d7:	31 d2                	xor    edx,edx
c00110d9:	83 c4 0c             	add    esp,0xc
c00110dc:	c3                   	ret    

c00110dd <SysUSleep(regs*)>:
c00110dd:	83 ec 1c             	sub    esp,0x1c
c00110e0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00110e4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00110e7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00110ea:	6a 00                	push   0x0
c00110ec:	6a 64                	push   0x64
c00110ee:	52                   	push   edx
c00110ef:	50                   	push   eax
c00110f0:	e8 4b b1 00 00       	call   c001c240 <__udivdi3>
c00110f5:	83 c4 14             	add    esp,0x14
c00110f8:	50                   	push   eax
c00110f9:	e8 e6 2a 00 00       	call   c0013be4 <milliTenthSleep(unsigned int)>
c00110fe:	31 c0                	xor    eax,eax
c0011100:	31 d2                	xor    edx,edx
c0011102:	83 c4 1c             	add    esp,0x1c
c0011105:	c3                   	ret    

c0011106 <SysSpawn(regs*)>:
c0011106:	56                   	push   esi
c0011107:	53                   	push   ebx
c0011108:	50                   	push   eax
c0011109:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001110d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011110:	85 c0                	test   eax,eax
c0011112:	75 08                	jne    c001111c <SysSpawn(regs*)+0x16>
c0011114:	59                   	pop    ecx
c0011115:	31 c0                	xor    eax,eax
c0011117:	31 d2                	xor    edx,edx
c0011119:	5b                   	pop    ebx
c001111a:	5e                   	pop    esi
c001111b:	c3                   	ret    
c001111c:	83 ec 0c             	sub    esp,0xc
c001111f:	68 24 07 00 00       	push   0x724
c0011124:	e8 90 66 ff ff       	call   c00077b9 <malloc>
c0011129:	83 c4 10             	add    esp,0x10
c001112c:	89 c6                	mov    esi,eax
c001112e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011131:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011134:	85 c0                	test   eax,eax
c0011136:	75 33                	jne    c001116b <SysSpawn(regs*)+0x65>
c0011138:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001113d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011140:	52                   	push   edx
c0011141:	50                   	push   eax
c0011142:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011145:	53                   	push   ebx
c0011146:	56                   	push   esi
c0011147:	e8 44 21 00 00       	call   c0013290 <Process::Process(char const*, Process*, char**)>
c001114c:	83 c4 10             	add    esp,0x10
c001114f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011156:	75 bc                	jne    c0011114 <SysSpawn(regs*)+0xe>
c0011158:	83 ec 0c             	sub    esp,0xc
c001115b:	56                   	push   esi
c001115c:	e8 5b 26 00 00       	call   c00137bc <Process::createUserThread()>
c0011161:	8b 06                	mov    eax,DWORD PTR [esi]
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	99                   	cdq    
c0011167:	59                   	pop    ecx
c0011168:	5b                   	pop    ebx
c0011169:	5e                   	pop    esi
c001116a:	c3                   	ret    
c001116b:	31 c0                	xor    eax,eax
c001116d:	eb d1                	jmp    c0011140 <SysSpawn(regs*)+0x3a>

c001116f <SysGetEnv(regs*)>:
c001116f:	57                   	push   edi
c0011170:	56                   	push   esi
c0011171:	53                   	push   ebx
c0011172:	83 ec 1c             	sub    esp,0x1c
c0011175:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001117e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011181:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011184:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011187:	50                   	push   eax
c0011188:	e8 1a f0 ff ff       	call   c00101a7 <Krnl::getProcessTotalEnvCount(Process*)>
c001118d:	83 c4 10             	add    esp,0x10
c0011190:	39 c7                	cmp    edi,eax
c0011192:	7c 14                	jl     c00111a8 <SysGetEnv(regs*)+0x39>
c0011194:	85 f6                	test   esi,esi
c0011196:	75 0b                	jne    c00111a3 <SysGetEnv(regs*)+0x34>
c0011198:	83 c4 10             	add    esp,0x10
c001119b:	31 c0                	xor    eax,eax
c001119d:	5b                   	pop    ebx
c001119e:	31 d2                	xor    edx,edx
c00111a0:	5e                   	pop    esi
c00111a1:	5f                   	pop    edi
c00111a2:	c3                   	ret    
c00111a3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00111a6:	eb f0                	jmp    c0011198 <SysGetEnv(regs*)+0x29>
c00111a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00111ac:	52                   	push   edx
c00111ad:	57                   	push   edi
c00111ae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00111b4:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00111b7:	51                   	push   ecx
c00111b8:	50                   	push   eax
c00111b9:	e8 09 f0 ff ff       	call   c00101c7 <Krnl::getProcessEnvPair(Process*, int)>
c00111be:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00111c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111c5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00111c9:	83 c4 0c             	add    esp,0xc
c00111cc:	85 db                	test   ebx,ebx
c00111ce:	75 23                	jne    c00111f3 <SysGetEnv(regs*)+0x84>
c00111d0:	83 ec 0c             	sub    esp,0xc
c00111d3:	50                   	push   eax
c00111d4:	e8 67 f3 fe ff       	call   c0000540 <strlen>
c00111d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111dc:	89 c3                	mov    ebx,eax
c00111de:	e8 5d f3 fe ff       	call   c0000540 <strlen>
c00111e3:	31 d2                	xor    edx,edx
c00111e5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	5b                   	pop    ebx
c00111f0:	5e                   	pop    esi
c00111f1:	5f                   	pop    edi
c00111f2:	c3                   	ret    
c00111f3:	83 ec 08             	sub    esp,0x8
c00111f6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00111f9:	50                   	push   eax
c00111fa:	56                   	push   esi
c00111fb:	e8 00 f4 fe ff       	call   c0000600 <strcpy>
c0011200:	58                   	pop    eax
c0011201:	5a                   	pop    edx
c0011202:	68 66 ea 01 c0       	push   0xc001ea66
c0011207:	56                   	push   esi
c0011208:	e8 b3 f5 fe ff       	call   c00007c0 <strcat>
c001120d:	59                   	pop    ecx
c001120e:	5b                   	pop    ebx
c001120f:	57                   	push   edi
c0011210:	56                   	push   esi
c0011211:	e8 aa f5 fe ff       	call   c00007c0 <strcat>
c0011216:	83 c4 10             	add    esp,0x10
c0011219:	e9 7a ff ff ff       	jmp    c0011198 <SysGetEnv(regs*)+0x29>

c001121e <SysSetFatAttrib(regs*)>:
c001121e:	57                   	push   edi
c001121f:	56                   	push   esi
c0011220:	53                   	push   ebx
c0011221:	83 ec 1c             	sub    esp,0x1c
c0011224:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011228:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001122b:	68 14 01 00 00       	push   0x114
c0011230:	e8 84 65 ff ff       	call   c00077b9 <malloc>
c0011235:	83 c4 0c             	add    esp,0xc
c0011238:	89 c3                	mov    ebx,eax
c001123a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001123f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011242:	50                   	push   eax
c0011243:	57                   	push   edi
c0011244:	53                   	push   ebx
c0011245:	e8 98 99 ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c001124a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001124d:	83 c4 0c             	add    esp,0xc
c0011250:	0f b6 d4             	movzx  edx,ah
c0011253:	25 ff 00 00 00       	and    eax,0xff
c0011258:	52                   	push   edx
c0011259:	50                   	push   eax
c001125a:	53                   	push   ebx
c001125b:	e8 54 9c ff ff       	call   c000aeb4 <File::chfatattr(unsigned char, unsigned char)>
c0011260:	83 c4 10             	add    esp,0x10
c0011263:	85 db                	test   ebx,ebx
c0011265:	74 14                	je     c001127b <SysSetFatAttrib(regs*)+0x5d>
c0011267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001126b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001126d:	83 ec 0c             	sub    esp,0xc
c0011270:	53                   	push   ebx
c0011271:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011274:	83 c4 10             	add    esp,0x10
c0011277:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001127b:	85 c0                	test   eax,eax
c001127d:	0f 95 c0             	setne  al
c0011280:	31 d2                	xor    edx,edx
c0011282:	25 ff 00 00 00       	and    eax,0xff
c0011287:	f7 d8                	neg    eax
c0011289:	83 d2 00             	adc    edx,0x0
c001128c:	83 c4 10             	add    esp,0x10
c001128f:	f7 da                	neg    edx
c0011291:	5b                   	pop    ebx
c0011292:	5e                   	pop    esi
c0011293:	5f                   	pop    edi
c0011294:	c3                   	ret    

c0011295 <SysPipe(regs*)>:
c0011295:	57                   	push   edi
c0011296:	56                   	push   esi
c0011297:	53                   	push   ebx
c0011298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129c:	83 ec 0c             	sub    esp,0xc
c001129f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00112a2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00112a5:	6a 20                	push   0x20
c00112a7:	e8 0d 65 ff ff       	call   c00077b9 <malloc>
c00112ac:	89 c3                	mov    ebx,eax
c00112ae:	58                   	pop    eax
c00112af:	5a                   	pop    edx
c00112b0:	68 00 50 00 00       	push   0x5000
c00112b5:	53                   	push   ebx
c00112b6:	e8 03 6e ff ff       	call   c00080be <Pipe::Pipe(int)>
c00112bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112be:	e8 77 7b ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00112c3:	89 07                	mov    DWORD PTR [edi],eax
c00112c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112c8:	e8 6d 7b ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00112cd:	83 c4 10             	add    esp,0x10
c00112d0:	89 06                	mov    DWORD PTR [esi],eax
c00112d2:	31 d2                	xor    edx,edx
c00112d4:	5b                   	pop    ebx
c00112d5:	31 c0                	xor    eax,eax
c00112d7:	5e                   	pop    esi
c00112d8:	5f                   	pop    edi
c00112d9:	c3                   	ret    

c00112da <SysGetUnixTime(regs*)>:
c00112da:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00112df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00112e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112e9:	e9 04 a3 ff ff       	jmp    c000b5f2 <Clock::timeInSecondsLocal()>

c00112ee <string_ends_with(char const*, char const*)>:
c00112ee:	57                   	push   edi
c00112ef:	56                   	push   esi
c00112f0:	53                   	push   ebx
c00112f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112f5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00112f9:	83 ec 0c             	sub    esp,0xc
c00112fc:	53                   	push   ebx
c00112fd:	e8 3e f2 fe ff       	call   c0000540 <strlen>
c0011302:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011305:	89 c6                	mov    esi,eax
c0011307:	e8 34 f2 fe ff       	call   c0000540 <strlen>
c001130c:	83 c4 10             	add    esp,0x10
c001130f:	39 c6                	cmp    esi,eax
c0011311:	7d 06                	jge    c0011319 <string_ends_with(char const*, char const*)+0x2b>
c0011313:	5b                   	pop    ebx
c0011314:	31 c0                	xor    eax,eax
c0011316:	5e                   	pop    esi
c0011317:	5f                   	pop    edi
c0011318:	c3                   	ret    
c0011319:	83 ec 08             	sub    esp,0x8
c001131c:	29 c6                	sub    esi,eax
c001131e:	57                   	push   edi
c001131f:	01 f3                	add    ebx,esi
c0011321:	53                   	push   ebx
c0011322:	e8 b9 f3 fe ff       	call   c00006e0 <strcmp>
c0011327:	83 c4 10             	add    esp,0x10
c001132a:	85 c0                	test   eax,eax
c001132c:	5b                   	pop    ebx
c001132d:	0f 94 c0             	sete   al
c0011330:	5e                   	pop    esi
c0011331:	25 ff 00 00 00       	and    eax,0xff
c0011336:	5f                   	pop    edi
c0011337:	c3                   	ret    

c0011338 <SysOpen(regs*)>:
c0011338:	56                   	push   esi
c0011339:	53                   	push   ebx
c001133a:	81 ec 04 01 00 00    	sub    esp,0x104
c0011340:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011347:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001134a:	85 d2                	test   edx,edx
c001134c:	0f 84 cc 01 00 00    	je     c001151e <SysOpen(regs*)+0x1e6>
c0011352:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011355:	85 c0                	test   eax,eax
c0011357:	0f 84 c1 01 00 00    	je     c001151e <SysOpen(regs*)+0x1e6>
c001135d:	83 ec 08             	sub    esp,0x8
c0011360:	50                   	push   eax
c0011361:	68 68 ea 01 c0       	push   0xc001ea68
c0011366:	e8 02 93 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001136b:	83 c4 0c             	add    esp,0xc
c001136e:	68 75 ea 01 c0       	push   0xc001ea75
c0011373:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011376:	50                   	push   eax
c0011377:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001137b:	56                   	push   esi
c001137c:	e8 b7 96 ff ff       	call   c000aa38 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011381:	89 34 24             	mov    DWORD PTR [esp],esi
c0011384:	e8 b7 f1 fe ff       	call   c0000540 <strlen>
c0011389:	83 c4 10             	add    esp,0x10
c001138c:	48                   	dec    eax
c001138d:	74 1d                	je     c00113ac <SysOpen(regs*)+0x74>
c001138f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011392:	eb 0f                	jmp    c00113a3 <SysOpen(regs*)+0x6b>
c0011394:	80 fa 3a             	cmp    dl,0x3a
c0011397:	74 0f                	je     c00113a8 <SysOpen(regs*)+0x70>
c0011399:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001139d:	48                   	dec    eax
c001139e:	74 0c                	je     c00113ac <SysOpen(regs*)+0x74>
c00113a0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00113a3:	80 fa 2e             	cmp    dl,0x2e
c00113a6:	75 ec                	jne    c0011394 <SysOpen(regs*)+0x5c>
c00113a8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00113ac:	83 ec 08             	sub    esp,0x8
c00113af:	68 79 ea 01 c0       	push   0xc001ea79
c00113b4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113b7:	50                   	push   eax
c00113b8:	e8 31 ff ff ff       	call   c00112ee <string_ends_with(char const*, char const*)>
c00113bd:	83 c4 10             	add    esp,0x10
c00113c0:	85 c0                	test   eax,eax
c00113c2:	74 1d                	je     c00113e1 <SysOpen(regs*)+0xa9>
c00113c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113c7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00113cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113d4:	81 c4 04 01 00 00    	add    esp,0x104
c00113da:	31 c0                	xor    eax,eax
c00113dc:	31 d2                	xor    edx,edx
c00113de:	5b                   	pop    ebx
c00113df:	5e                   	pop    esi
c00113e0:	c3                   	ret    
c00113e1:	83 ec 08             	sub    esp,0x8
c00113e4:	68 7e ea 01 c0       	push   0xc001ea7e
c00113e9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113ec:	50                   	push   eax
c00113ed:	e8 fc fe ff ff       	call   c00112ee <string_ends_with(char const*, char const*)>
c00113f2:	83 c4 10             	add    esp,0x10
c00113f5:	85 c0                	test   eax,eax
c00113f7:	75 cb                	jne    c00113c4 <SysOpen(regs*)+0x8c>
c00113f9:	83 ec 08             	sub    esp,0x8
c00113fc:	68 7a ea 01 c0       	push   0xc001ea7a
c0011401:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011404:	50                   	push   eax
c0011405:	e8 d6 f2 fe ff       	call   c00006e0 <strcmp>
c001140a:	83 c4 10             	add    esp,0x10
c001140d:	85 c0                	test   eax,eax
c001140f:	74 b3                	je     c00113c4 <SysOpen(regs*)+0x8c>
c0011411:	83 ec 08             	sub    esp,0x8
c0011414:	68 79 ea 01 c0       	push   0xc001ea79
c0011419:	56                   	push   esi
c001141a:	e8 cf fe ff ff       	call   c00112ee <string_ends_with(char const*, char const*)>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	85 c0                	test   eax,eax
c0011424:	75 9e                	jne    c00113c4 <SysOpen(regs*)+0x8c>
c0011426:	83 ec 08             	sub    esp,0x8
c0011429:	68 83 ea 01 c0       	push   0xc001ea83
c001142e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011431:	50                   	push   eax
c0011432:	e8 b7 fe ff ff       	call   c00112ee <string_ends_with(char const*, char const*)>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	85 c0                	test   eax,eax
c001143c:	0f 85 ef 00 00 00    	jne    c0011531 <SysOpen(regs*)+0x1f9>
c0011442:	83 ec 08             	sub    esp,0x8
c0011445:	68 88 ea 01 c0       	push   0xc001ea88
c001144a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001144d:	50                   	push   eax
c001144e:	e8 9b fe ff ff       	call   c00112ee <string_ends_with(char const*, char const*)>
c0011453:	83 c4 10             	add    esp,0x10
c0011456:	85 c0                	test   eax,eax
c0011458:	0f 85 d3 00 00 00    	jne    c0011531 <SysOpen(regs*)+0x1f9>
c001145e:	83 ec 08             	sub    esp,0x8
c0011461:	68 84 ea 01 c0       	push   0xc001ea84
c0011466:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011469:	51                   	push   ecx
c001146a:	e8 71 f2 fe ff       	call   c00006e0 <strcmp>
c001146f:	83 c4 10             	add    esp,0x10
c0011472:	85 c0                	test   eax,eax
c0011474:	0f 84 b7 00 00 00    	je     c0011531 <SysOpen(regs*)+0x1f9>
c001147a:	83 ec 08             	sub    esp,0x8
c001147d:	68 83 ea 01 c0       	push   0xc001ea83
c0011482:	56                   	push   esi
c0011483:	e8 66 fe ff ff       	call   c00112ee <string_ends_with(char const*, char const*)>
c0011488:	83 c4 10             	add    esp,0x10
c001148b:	85 c0                	test   eax,eax
c001148d:	0f 85 9e 00 00 00    	jne    c0011531 <SysOpen(regs*)+0x1f9>
c0011493:	83 ec 0c             	sub    esp,0xc
c0011496:	68 14 01 00 00       	push   0x114
c001149b:	e8 19 63 ff ff       	call   c00077b9 <malloc>
c00114a0:	83 c4 0c             	add    esp,0xc
c00114a3:	89 c6                	mov    esi,eax
c00114a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114ad:	50                   	push   eax
c00114ae:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00114b1:	52                   	push   edx
c00114b2:	56                   	push   esi
c00114b3:	e8 2a 97 ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c00114b8:	83 c4 10             	add    esp,0x10
c00114bb:	85 f6                	test   esi,esi
c00114bd:	74 5f                	je     c001151e <SysOpen(regs*)+0x1e6>
c00114bf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00114c2:	89 d0                	mov    eax,edx
c00114c4:	25 ff 00 00 00       	and    eax,0xff
c00114c9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00114cc:	89 d0                	mov    eax,edx
c00114ce:	83 e0 01             	and    eax,0x1
c00114d1:	f6 c2 02             	test   dl,0x2
c00114d4:	74 03                	je     c00114d9 <SysOpen(regs*)+0x1a1>
c00114d6:	83 c8 02             	or     eax,0x2
c00114d9:	f6 c2 04             	test   dl,0x4
c00114dc:	74 03                	je     c00114e1 <SysOpen(regs*)+0x1a9>
c00114de:	83 c8 04             	or     eax,0x4
c00114e1:	f6 c2 08             	test   dl,0x8
c00114e4:	74 03                	je     c00114e9 <SysOpen(regs*)+0x1b1>
c00114e6:	83 c8 0a             	or     eax,0xa
c00114e9:	83 e2 10             	and    edx,0x10
c00114ec:	74 03                	je     c00114f1 <SysOpen(regs*)+0x1b9>
c00114ee:	83 c8 12             	or     eax,0x12
c00114f1:	83 ec 08             	sub    esp,0x8
c00114f4:	50                   	push   eax
c00114f5:	56                   	push   esi
c00114f6:	e8 a7 97 ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	85 c0                	test   eax,eax
c0011500:	75 1c                	jne    c001151e <SysOpen(regs*)+0x1e6>
c0011502:	83 ec 0c             	sub    esp,0xc
c0011505:	56                   	push   esi
c0011506:	e8 2f 79 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001150b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001150e:	83 c4 10             	add    esp,0x10
c0011511:	89 02                	mov    DWORD PTR [edx],eax
c0011513:	c1 f8 1f             	sar    eax,0x1f
c0011516:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011519:	e9 b6 fe ff ff       	jmp    c00113d4 <SysOpen(regs*)+0x9c>
c001151e:	81 c4 04 01 00 00    	add    esp,0x104
c0011524:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011529:	ba ff ff ff ff       	mov    edx,0xffffffff
c001152e:	5b                   	pop    ebx
c001152f:	5e                   	pop    esi
c0011530:	c3                   	ret    
c0011531:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011534:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001153a:	e9 8e fe ff ff       	jmp    c00113cd <SysOpen(regs*)+0x95>

c001153f <KeSystemCall(regs*, void*)>:
c001153f:	53                   	push   ebx
c0011540:	83 ec 10             	sub    esp,0x10
c0011543:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011547:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001154a:	68 8d ea 01 c0       	push   0xc001ea8d
c001154f:	e8 19 91 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0011554:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011557:	83 c4 10             	add    esp,0x10
c001155a:	83 f8 32             	cmp    eax,0x32
c001155d:	77 16                	ja     c0011575 <KeSystemCall(regs*, void*)+0x36>
c001155f:	8b 14 85 20 fc 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe03e0]
c0011566:	85 d2                	test   edx,edx
c0011568:	74 0b                	je     c0011575 <KeSystemCall(regs*, void*)+0x36>
c001156a:	83 ec 0c             	sub    esp,0xc
c001156d:	53                   	push   ebx
c001156e:	ff d2                	call   edx
c0011570:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011573:	eb 0d                	jmp    c0011582 <KeSystemCall(regs*, void*)+0x43>
c0011575:	52                   	push   edx
c0011576:	52                   	push   edx
c0011577:	50                   	push   eax
c0011578:	68 9d ea 01 c0       	push   0xc001ea9d
c001157d:	e8 eb 90 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0011582:	83 c4 10             	add    esp,0x10
c0011585:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001158a:	31 d2                	xor    edx,edx
c001158c:	83 c4 08             	add    esp,0x8
c001158f:	5b                   	pop    ebx
c0011590:	c3                   	ret    

c0011591 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011591:	55                   	push   ebp
c0011592:	57                   	push   edi
c0011593:	56                   	push   esi
c0011594:	53                   	push   ebx
c0011595:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001159b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00115a2:	8a 1e                	mov    bl,BYTE PTR [esi]
c00115a4:	8d 6e 01             	lea    ebp,[esi+0x1]
c00115a7:	80 fb 40             	cmp    bl,0x40
c00115aa:	75 1b                	jne    c00115c7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00115ac:	8a 16                	mov    dl,BYTE PTR [esi]
c00115ae:	84 d2                	test   dl,dl
c00115b0:	0f 84 f1 00 00 00    	je     c00116a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115b6:	8d 46 01             	lea    eax,[esi+0x1]
c00115b9:	80 fa 3a             	cmp    dl,0x3a
c00115bc:	74 04                	je     c00115c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00115be:	89 c6                	mov    esi,eax
c00115c0:	eb ea                	jmp    c00115ac <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00115c2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00115c5:	89 c6                	mov    esi,eax
c00115c7:	50                   	push   eax
c00115c8:	6a 40                	push   0x40
c00115ca:	6a 00                	push   0x0
c00115cc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00115d0:	50                   	push   eax
c00115d1:	e8 fa ee fe ff       	call   c00004d0 <memset>
c00115d6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00115dd:	31 c0                	xor    eax,eax
c00115df:	83 c4 10             	add    esp,0x10
c00115e2:	8a 0f                	mov    cl,BYTE PTR [edi]
c00115e4:	84 c9                	test   cl,cl
c00115e6:	0f 84 bb 00 00 00    	je     c00116a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115ec:	3d c7 00 00 00       	cmp    eax,0xc7
c00115f1:	0f 8f b0 00 00 00    	jg     c00116a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115f7:	80 f9 0a             	cmp    cl,0xa
c00115fa:	0f 85 98 00 00 00    	jne    c0011698 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011600:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011605:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011609:	a8 df                	test   al,0xdf
c001160b:	0f 94 c1             	sete   cl
c001160e:	3c 23                	cmp    al,0x23
c0011610:	0f 94 c2             	sete   dl
c0011613:	08 d1                	or     cl,dl
c0011615:	75 4a                	jne    c0011661 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011617:	8d 50 f7             	lea    edx,[eax-0x9]
c001161a:	80 fa 01             	cmp    dl,0x1
c001161d:	76 42                	jbe    c0011661 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001161f:	3c 5b                	cmp    al,0x5b
c0011621:	75 42                	jne    c0011665 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011623:	80 fb 40             	cmp    bl,0x40
c0011626:	75 39                	jne    c0011661 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011628:	83 ec 0c             	sub    esp,0xc
c001162b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001162f:	52                   	push   edx
c0011630:	e8 0b ef fe ff       	call   c0000540 <strlen>
c0011635:	83 c4 10             	add    esp,0x10
c0011638:	83 f8 3f             	cmp    eax,0x3f
c001163b:	77 6a                	ja     c00116a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001163d:	50                   	push   eax
c001163e:	50                   	push   eax
c001163f:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011643:	52                   	push   edx
c0011644:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011648:	52                   	push   edx
c0011649:	e8 b2 ef fe ff       	call   c0000600 <strcpy>
c001164e:	58                   	pop    eax
c001164f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011653:	52                   	push   edx
c0011654:	e8 e7 ee fe ff       	call   c0000540 <strlen>
c0011659:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001165e:	83 c4 10             	add    esp,0x10
c0011661:	31 d2                	xor    edx,edx
c0011663:	eb 3a                	jmp    c001169f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011665:	80 fb 40             	cmp    bl,0x40
c0011668:	74 06                	je     c0011670 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001166a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001166e:	eb 20                	jmp    c0011690 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011670:	50                   	push   eax
c0011671:	50                   	push   eax
c0011672:	55                   	push   ebp
c0011673:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011677:	50                   	push   eax
c0011678:	e8 63 f0 fe ff       	call   c00006e0 <strcmp>
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	85 c0                	test   eax,eax
c0011682:	75 dd                	jne    c0011661 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011684:	eb e4                	jmp    c001166a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011686:	8d 50 01             	lea    edx,[eax+0x1]
c0011689:	80 f9 3d             	cmp    cl,0x3d
c001168c:	74 1d                	je     c00116ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001168e:	89 d0                	mov    eax,edx
c0011690:	8a 08                	mov    cl,BYTE PTR [eax]
c0011692:	84 c9                	test   cl,cl
c0011694:	75 f0                	jne    c0011686 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011696:	eb 0f                	jmp    c00116a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011698:	8d 50 01             	lea    edx,[eax+0x1]
c001169b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001169f:	47                   	inc    edi
c00116a0:	89 d0                	mov    eax,edx
c00116a2:	e9 3b ff ff ff       	jmp    c00115e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00116a7:	31 c0                	xor    eax,eax
c00116a9:	eb 33                	jmp    c00116de <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00116ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00116af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00116b2:	50                   	push   eax
c00116b3:	50                   	push   eax
c00116b4:	8d 44 24 60          	lea    eax,[esp+0x60]
c00116b8:	50                   	push   eax
c00116b9:	56                   	push   esi
c00116ba:	e8 21 f0 fe ff       	call   c00006e0 <strcmp>
c00116bf:	83 c4 10             	add    esp,0x10
c00116c2:	85 c0                	test   eax,eax
c00116c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00116c8:	75 97                	jne    c0011661 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00116ca:	51                   	push   ecx
c00116cb:	51                   	push   ecx
c00116cc:	52                   	push   edx
c00116cd:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00116d4:	e8 27 ef fe ff       	call   c0000600 <strcpy>
c00116d9:	83 c4 10             	add    esp,0x10
c00116dc:	b0 01                	mov    al,0x1
c00116de:	81 c4 2c 01 00 00    	add    esp,0x12c
c00116e4:	5b                   	pop    ebx
c00116e5:	5e                   	pop    esi
c00116e6:	5f                   	pop    edi
c00116e7:	5d                   	pop    ebp
c00116e8:	c3                   	ret    

c00116e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00116e9:	57                   	push   edi
c00116ea:	56                   	push   esi
c00116eb:	53                   	push   ebx
c00116ec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00116f2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00116f9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011700:	53                   	push   ebx
c0011701:	e8 3a ee fe ff       	call   c0000540 <strlen>
c0011706:	89 34 24             	mov    DWORD PTR [esp],esi
c0011709:	89 c7                	mov    edi,eax
c001170b:	e8 30 ee fe ff       	call   c0000540 <strlen>
c0011710:	83 c4 10             	add    esp,0x10
c0011713:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0011717:	3d ff 00 00 00       	cmp    eax,0xff
c001171c:	0f 87 d3 00 00 00    	ja     c00117f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011722:	57                   	push   edi
c0011723:	57                   	push   edi
c0011724:	56                   	push   esi
c0011725:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011729:	56                   	push   esi
c001172a:	e8 d1 ee fe ff       	call   c0000600 <strcpy>
c001172f:	58                   	pop    eax
c0011730:	5a                   	pop    edx
c0011731:	68 5a ed 01 c0       	push   0xc001ed5a
c0011736:	56                   	push   esi
c0011737:	e8 84 f0 fe ff       	call   c00007c0 <strcat>
c001173c:	59                   	pop    ecx
c001173d:	5f                   	pop    edi
c001173e:	53                   	push   ebx
c001173f:	56                   	push   esi
c0011740:	e8 7b f0 fe ff       	call   c00007c0 <strcat>
c0011745:	58                   	pop    eax
c0011746:	5a                   	pop    edx
c0011747:	68 b1 ea 01 c0       	push   0xc001eab1
c001174c:	56                   	push   esi
c001174d:	e8 6e f0 fe ff       	call   c00007c0 <strcat>
c0011752:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011759:	e8 5b 60 ff ff       	call   c00077b9 <malloc>
c001175e:	83 c4 0c             	add    esp,0xc
c0011761:	89 c3                	mov    ebx,eax
c0011763:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0011769:	56                   	push   esi
c001176a:	50                   	push   eax
c001176b:	e8 72 94 ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0011770:	83 c4 10             	add    esp,0x10
c0011773:	85 db                	test   ebx,ebx
c0011775:	74 7e                	je     c00117f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011777:	51                   	push   ecx
c0011778:	51                   	push   ecx
c0011779:	6a 01                	push   0x1
c001177b:	53                   	push   ebx
c001177c:	e8 21 95 ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c0011781:	83 c4 10             	add    esp,0x10
c0011784:	85 c0                	test   eax,eax
c0011786:	74 08                	je     c0011790 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011788:	83 ec 0c             	sub    esp,0xc
c001178b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001178d:	53                   	push   ebx
c001178e:	eb 5f                	jmp    c00117ef <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011790:	52                   	push   edx
c0011791:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011795:	50                   	push   eax
c0011796:	8d 44 24 20          	lea    eax,[esp+0x20]
c001179a:	50                   	push   eax
c001179b:	53                   	push   ebx
c001179c:	e8 ad 97 ff ff       	call   c000af4e <File::stat(unsigned long long*, bool*)>
c00117a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00117a5:	83 c4 10             	add    esp,0x10
c00117a8:	89 c1                	mov    ecx,eax
c00117aa:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00117ae:	74 31                	je     c00117e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00117b0:	83 ec 0c             	sub    esp,0xc
c00117b3:	50                   	push   eax
c00117b4:	e8 00 60 ff ff       	call   c00077b9 <malloc>
c00117b9:	89 c6                	mov    esi,eax
c00117bb:	58                   	pop    eax
c00117bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117be:	8d 54 24 20          	lea    edx,[esp+0x20]
c00117c2:	52                   	push   edx
c00117c3:	56                   	push   esi
c00117c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00117c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00117cc:	53                   	push   ebx
c00117cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00117d0:	83 c4 20             	add    esp,0x20
c00117d3:	85 c0                	test   eax,eax
c00117d5:	75 0a                	jne    c00117e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00117d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117db:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00117df:	74 18                	je     c00117f9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00117e1:	83 ec 0c             	sub    esp,0xc
c00117e4:	53                   	push   ebx
c00117e5:	e8 16 95 ff ff       	call   c000ad00 <File::close()>
c00117ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	31 c0                	xor    eax,eax
c00117f7:	eb 3b                	jmp    c0011834 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00117f9:	83 ec 0c             	sub    esp,0xc
c00117fc:	53                   	push   ebx
c00117fd:	e8 fe 94 ff ff       	call   c000ad00 <File::close()>
c0011802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011804:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011807:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001180a:	83 c4 0c             	add    esp,0xc
c001180d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011814:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001181b:	56                   	push   esi
c001181c:	e8 70 fd ff ff       	call   c0011591 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011821:	89 34 24             	mov    DWORD PTR [esp],esi
c0011824:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011828:	e8 9c 5f ff ff       	call   c00077c9 <free>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011834:	81 c4 20 01 00 00    	add    esp,0x120
c001183a:	5b                   	pop    ebx
c001183b:	5e                   	pop    esi
c001183c:	5f                   	pop    edi
c001183d:	c3                   	ret    

c001183e <Reg::getLine(char*, char*, char*)>:
c001183e:	57                   	push   edi
c001183f:	56                   	push   esi
c0011840:	53                   	push   ebx
c0011841:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011845:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011849:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001184d:	57                   	push   edi
c001184e:	56                   	push   esi
c001184f:	53                   	push   ebx
c0011850:	68 b6 ea 01 c0       	push   0xc001eab6
c0011855:	e8 8f fe ff ff       	call   c00116e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001185a:	83 c4 10             	add    esp,0x10
c001185d:	84 c0                	test   al,al
c001185f:	75 10                	jne    c0011871 <Reg::getLine(char*, char*, char*)+0x33>
c0011861:	57                   	push   edi
c0011862:	56                   	push   esi
c0011863:	53                   	push   ebx
c0011864:	68 db ea 01 c0       	push   0xc001eadb
c0011869:	e8 7b fe ff ff       	call   c00116e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001186e:	83 c4 10             	add    esp,0x10
c0011871:	5b                   	pop    ebx
c0011872:	5e                   	pop    esi
c0011873:	5f                   	pop    edi
c0011874:	c3                   	ret    

c0011875 <Reg::readInt(char*, char*, int*)>:
c0011875:	55                   	push   ebp
c0011876:	57                   	push   edi
c0011877:	56                   	push   esi
c0011878:	53                   	push   ebx
c0011879:	81 ec f0 00 00 00    	sub    esp,0xf0
c001187f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011883:	57                   	push   edi
c0011884:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001188b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011892:	e8 a7 ff ff ff       	call   c001183e <Reg::getLine(char*, char*, char*)>
c0011897:	83 c4 10             	add    esp,0x10
c001189a:	84 c0                	test   al,al
c001189c:	0f 84 b3 00 00 00    	je     c0011955 <Reg::readInt(char*, char*, int*)+0xe0>
c00118a2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00118a6:	80 fa 2b             	cmp    dl,0x2b
c00118a9:	74 0c                	je     c00118b7 <Reg::readInt(char*, char*, int*)+0x42>
c00118ab:	80 fa 2d             	cmp    dl,0x2d
c00118ae:	75 0e                	jne    c00118be <Reg::readInt(char*, char*, int*)+0x49>
c00118b0:	ba 01 00 00 00       	mov    edx,0x1
c00118b5:	eb 0b                	jmp    c00118c2 <Reg::readInt(char*, char*, int*)+0x4d>
c00118b7:	ba 01 00 00 00       	mov    edx,0x1
c00118bc:	eb 02                	jmp    c00118c0 <Reg::readInt(char*, char*, int*)+0x4b>
c00118be:	31 d2                	xor    edx,edx
c00118c0:	31 c0                	xor    eax,eax
c00118c2:	be 0a 00 00 00       	mov    esi,0xa
c00118c7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00118cc:	75 20                	jne    c00118ee <Reg::readInt(char*, char*, int*)+0x79>
c00118ce:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00118d2:	80 f9 78             	cmp    cl,0x78
c00118d5:	75 0a                	jne    c00118e1 <Reg::readInt(char*, char*, int*)+0x6c>
c00118d7:	83 c2 02             	add    edx,0x2
c00118da:	be 10 00 00 00       	mov    esi,0x10
c00118df:	eb 0d                	jmp    c00118ee <Reg::readInt(char*, char*, int*)+0x79>
c00118e1:	80 f9 62             	cmp    cl,0x62
c00118e4:	75 08                	jne    c00118ee <Reg::readInt(char*, char*, int*)+0x79>
c00118e6:	83 c2 02             	add    edx,0x2
c00118e9:	be 02 00 00 00       	mov    esi,0x2
c00118ee:	01 d7                	add    edi,edx
c00118f0:	31 d2                	xor    edx,edx
c00118f2:	8a 1f                	mov    bl,BYTE PTR [edi]
c00118f4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00118f8:	80 fb 0d             	cmp    bl,0xd
c00118fb:	0f 94 c3             	sete   bl
c00118fe:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011903:	0f 94 c1             	sete   cl
c0011906:	08 cb                	or     bl,cl
c0011908:	75 3a                	jne    c0011944 <Reg::readInt(char*, char*, int*)+0xcf>
c001190a:	0f af d6             	imul   edx,esi
c001190d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011912:	83 fe 10             	cmp    esi,0x10
c0011915:	75 26                	jne    c001193d <Reg::readInt(char*, char*, int*)+0xc8>
c0011917:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001191b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001191e:	89 e9                	mov    ecx,ebp
c0011920:	80 f9 05             	cmp    cl,0x5
c0011923:	77 06                	ja     c001192b <Reg::readInt(char*, char*, int*)+0xb6>
c0011925:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011929:	eb 16                	jmp    c0011941 <Reg::readInt(char*, char*, int*)+0xcc>
c001192b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001192f:	83 e9 61             	sub    ecx,0x61
c0011932:	80 f9 05             	cmp    cl,0x5
c0011935:	77 06                	ja     c001193d <Reg::readInt(char*, char*, int*)+0xc8>
c0011937:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001193b:	eb 04                	jmp    c0011941 <Reg::readInt(char*, char*, int*)+0xcc>
c001193d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011941:	47                   	inc    edi
c0011942:	eb ae                	jmp    c00118f2 <Reg::readInt(char*, char*, int*)+0x7d>
c0011944:	84 c0                	test   al,al
c0011946:	74 02                	je     c001194a <Reg::readInt(char*, char*, int*)+0xd5>
c0011948:	f7 da                	neg    edx
c001194a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011951:	89 10                	mov    DWORD PTR [eax],edx
c0011953:	88 d8                	mov    al,bl
c0011955:	81 c4 ec 00 00 00    	add    esp,0xec
c001195b:	5b                   	pop    ebx
c001195c:	5e                   	pop    esi
c001195d:	5f                   	pop    edi
c001195e:	5d                   	pop    ebp
c001195f:	c3                   	ret    

c0011960 <Reg::readString(char*, char*, char*, int)>:
c0011960:	57                   	push   edi
c0011961:	56                   	push   esi
c0011962:	53                   	push   ebx
c0011963:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011969:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011970:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011974:	57                   	push   edi
c0011975:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001197c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011983:	e8 b6 fe ff ff       	call   c001183e <Reg::getLine(char*, char*, char*)>
c0011988:	83 c4 10             	add    esp,0x10
c001198b:	89 c6                	mov    esi,eax
c001198d:	84 c0                	test   al,al
c001198f:	74 44                	je     c00119d5 <Reg::readString(char*, char*, char*, int)+0x75>
c0011991:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011998:	31 c0                	xor    eax,eax
c001199a:	4a                   	dec    edx
c001199b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001199e:	84 c9                	test   cl,cl
c00119a0:	74 0f                	je     c00119b1 <Reg::readString(char*, char*, char*, int)+0x51>
c00119a2:	39 c2                	cmp    edx,eax
c00119a4:	7e 0b                	jle    c00119b1 <Reg::readString(char*, char*, char*, int)+0x51>
c00119a6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00119a9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00119ae:	40                   	inc    eax
c00119af:	eb ea                	jmp    c001199b <Reg::readString(char*, char*, char*, int)+0x3b>
c00119b1:	83 ec 0c             	sub    esp,0xc
c00119b4:	53                   	push   ebx
c00119b5:	e8 86 eb fe ff       	call   c0000540 <strlen>
c00119ba:	83 c4 10             	add    esp,0x10
c00119bd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00119c2:	75 11                	jne    c00119d5 <Reg::readString(char*, char*, char*, int)+0x75>
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	53                   	push   ebx
c00119c8:	e8 73 eb fe ff       	call   c0000540 <strlen>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00119d5:	81 c4 d0 00 00 00    	add    esp,0xd0
c00119db:	89 f0                	mov    eax,esi
c00119dd:	5b                   	pop    ebx
c00119de:	5e                   	pop    esi
c00119df:	5f                   	pop    edi
c00119e0:	c3                   	ret    

c00119e1 <Reg::readBool(char*, char*, bool*)>:
c00119e1:	83 ec 20             	sub    esp,0x20
c00119e4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00119e8:	50                   	push   eax
c00119e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119f1:	e8 7f fe ff ff       	call   c0011875 <Reg::readInt(char*, char*, int*)>
c00119f6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00119fb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00119ff:	0f 95 02             	setne  BYTE PTR [edx]
c0011a02:	83 c4 2c             	add    esp,0x2c
c0011a05:	c3                   	ret    

c0011a06 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011a06:	53                   	push   ebx
c0011a07:	83 ec 1c             	sub    esp,0x1c
c0011a0a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011a0e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011a12:	50                   	push   eax
c0011a13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011a17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011a1b:	e8 c1 ff ff ff       	call   c00119e1 <Reg::readBool(char*, char*, bool*)>
c0011a20:	83 c4 10             	add    esp,0x10
c0011a23:	84 c0                	test   al,al
c0011a25:	74 04                	je     c0011a2b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011a27:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011a2b:	88 d8                	mov    al,bl
c0011a2d:	83 c4 18             	add    esp,0x18
c0011a30:	5b                   	pop    ebx
c0011a31:	c3                   	ret    

c0011a32 <Reg::readIntWithDefault(char*, char*, int)>:
c0011a32:	53                   	push   ebx
c0011a33:	83 ec 1c             	sub    esp,0x1c
c0011a36:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a3a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011a3e:	50                   	push   eax
c0011a3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011a43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011a47:	e8 29 fe ff ff       	call   c0011875 <Reg::readInt(char*, char*, int*)>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	84 c0                	test   al,al
c0011a51:	74 04                	je     c0011a57 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011a53:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a57:	89 d8                	mov    eax,ebx
c0011a59:	83 c4 18             	add    esp,0x18
c0011a5c:	5b                   	pop    ebx
c0011a5d:	c3                   	ret    

c0011a5e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011a5e:	57                   	push   edi
c0011a5f:	56                   	push   esi
c0011a60:	56                   	push   esi
c0011a61:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011a65:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011a69:	56                   	push   esi
c0011a6a:	57                   	push   edi
c0011a6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a73:	e8 e8 fe ff ff       	call   c0011960 <Reg::readString(char*, char*, char*, int)>
c0011a78:	83 c4 10             	add    esp,0x10
c0011a7b:	84 c0                	test   al,al
c0011a7d:	75 1a                	jne    c0011a99 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011a7f:	51                   	push   ecx
c0011a80:	56                   	push   esi
c0011a81:	6a 00                	push   0x0
c0011a83:	57                   	push   edi
c0011a84:	e8 47 ea fe ff       	call   c00004d0 <memset>
c0011a89:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011a8c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a92:	83 c4 10             	add    esp,0x10
c0011a95:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011a99:	89 f8                	mov    eax,edi
c0011a9b:	5a                   	pop    edx
c0011a9c:	5e                   	pop    esi
c0011a9d:	5f                   	pop    edi
c0011a9e:	c3                   	ret    

c0011a9f <SysEject(regs*)>:
c0011a9f:	83 ec 0c             	sub    esp,0xc
c0011aa2:	83 ca ff             	or     edx,0xffffffff
c0011aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aa9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011aac:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ab1:	83 e9 41             	sub    ecx,0x41
c0011ab4:	83 f9 19             	cmp    ecx,0x19
c0011ab7:	77 18                	ja     c0011ad1 <SysEject(regs*)+0x32>
c0011ab9:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0011ac0:	85 c9                	test   ecx,ecx
c0011ac2:	74 0d                	je     c0011ad1 <SysEject(regs*)+0x32>
c0011ac4:	83 ec 0c             	sub    esp,0xc
c0011ac7:	51                   	push   ecx
c0011ac8:	e8 5d b2 ff ff       	call   c000cd2a <LogicalDisk::eject()>
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	99                   	cdq    
c0011ad1:	83 c4 0c             	add    esp,0xc
c0011ad4:	c3                   	ret    

c0011ad5 <SysExit(regs*)>:
c0011ad5:	83 ec 18             	sub    esp,0x18
c0011ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011adc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011adf:	e8 24 27 00 00       	call   c0014208 <terminateTask(int)>
c0011ae4:	83 c8 ff             	or     eax,0xffffffff
c0011ae7:	83 c4 1c             	add    esp,0x1c
c0011aea:	89 c2                	mov    edx,eax
c0011aec:	c3                   	ret    

c0011aed <SysGetCwd(regs*)>:
c0011aed:	83 ec 10             	sub    esp,0x10
c0011af0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011af4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011af7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011afa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aff:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011b02:	e8 dd 8e ff ff       	call   c000a9e4 <Fs::getcwd(Process*, char*, int)>
c0011b07:	83 c4 1c             	add    esp,0x1c
c0011b0a:	99                   	cdq    
c0011b0b:	c3                   	ret    

c0011b0c <SysGetPID(regs*)>:
c0011b0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b11:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b16:	99                   	cdq    
c0011b17:	c3                   	ret    

c0011b18 <SysGetRAMData(regs*)>:
c0011b18:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c0011b1e:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c0011b28:	99                   	cdq    
c0011b29:	f7 f9                	idiv   ecx
c0011b2b:	c1 e0 18             	shl    eax,0x18
c0011b2e:	09 c8                	or     eax,ecx
c0011b30:	99                   	cdq    
c0011b31:	c3                   	ret    

c0011b32 <SysGetVGAPtr(regs*)>:
c0011b32:	55                   	push   ebp
c0011b33:	57                   	push   edi
c0011b34:	56                   	push   esi
c0011b35:	53                   	push   ebx
c0011b36:	83 ec 18             	sub    esp,0x18
c0011b39:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b3d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011b40:	e8 c3 21 00 00       	call   c0013d08 <Thr::processFromPID(int)>
c0011b45:	83 c4 10             	add    esp,0x10
c0011b48:	89 c1                	mov    ecx,eax
c0011b4a:	b8 01 00 00 00       	mov    eax,0x1
c0011b4f:	85 c9                	test   ecx,ecx
c0011b51:	74 57                	je     c0011baa <SysGetVGAPtr(regs*)+0x78>
c0011b53:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011b59:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011b5d:	74 0c                	je     c0011b6b <SysGetVGAPtr(regs*)+0x39>
c0011b5f:	83 ec 0c             	sub    esp,0xc
c0011b62:	55                   	push   ebp
c0011b63:	e8 8f 68 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011b6e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b71:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011b76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b78:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011b7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b7e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011b84:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b87:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011b8a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011b90:	50                   	push   eax
c0011b91:	50                   	push   eax
c0011b92:	68 f6 ea 01 c0       	push   0xc001eaf6
c0011b97:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b9a:	05 a8 0f 00 00       	add    eax,0xfa8
c0011b9f:	50                   	push   eax
c0011ba0:	e8 5b ea fe ff       	call   c0000600 <strcpy>
c0011ba5:	83 c4 10             	add    esp,0x10
c0011ba8:	31 c0                	xor    eax,eax
c0011baa:	83 c4 0c             	add    esp,0xc
c0011bad:	31 d2                	xor    edx,edx
c0011baf:	5b                   	pop    ebx
c0011bb0:	5e                   	pop    esi
c0011bb1:	5f                   	pop    edi
c0011bb2:	5d                   	pop    ebp
c0011bb3:	c3                   	ret    

c0011bb4 <SysLoadDLL(regs*)>:
c0011bb4:	56                   	push   esi
c0011bb5:	53                   	push   ebx
c0011bb6:	31 d2                	xor    edx,edx
c0011bb8:	51                   	push   ecx
c0011bb9:	b8 01 00 00 00       	mov    eax,0x1
c0011bbe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011bc2:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011bc6:	0f 84 8c 00 00 00    	je     c0011c58 <SysLoadDLL(regs*)+0xa4>
c0011bcc:	83 ec 0c             	sub    esp,0xc
c0011bcf:	68 14 01 00 00       	push   0x114
c0011bd4:	e8 e0 5b ff ff       	call   c00077b9 <malloc>
c0011bd9:	83 c4 0c             	add    esp,0xc
c0011bdc:	89 c3                	mov    ebx,eax
c0011bde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011be6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011be9:	53                   	push   ebx
c0011bea:	e8 f3 8f ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0011bef:	83 c4 10             	add    esp,0x10
c0011bf2:	31 d2                	xor    edx,edx
c0011bf4:	b8 02 00 00 00       	mov    eax,0x2
c0011bf9:	85 db                	test   ebx,ebx
c0011bfb:	74 5b                	je     c0011c58 <SysLoadDLL(regs*)+0xa4>
c0011bfd:	83 ec 0c             	sub    esp,0xc
c0011c00:	53                   	push   ebx
c0011c01:	e8 0a 93 ff ff       	call   c000af10 <File::exists()>
c0011c06:	83 c4 10             	add    esp,0x10
c0011c09:	84 c0                	test   al,al
c0011c0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011c0d:	75 11                	jne    c0011c20 <SysLoadDLL(regs*)+0x6c>
c0011c0f:	83 ec 0c             	sub    esp,0xc
c0011c12:	53                   	push   ebx
c0011c13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c16:	83 c4 10             	add    esp,0x10
c0011c19:	b8 03 00 00 00       	mov    eax,0x3
c0011c1e:	eb 36                	jmp    c0011c56 <SysLoadDLL(regs*)+0xa2>
c0011c20:	83 ec 0c             	sub    esp,0xc
c0011c23:	53                   	push   ebx
c0011c24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c27:	58                   	pop    eax
c0011c28:	5a                   	pop    edx
c0011c29:	6a 00                	push   0x0
c0011c2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011c2e:	e8 86 12 00 00       	call   c0012eb9 <Thr::loadDLL(char const*, bool)>
c0011c33:	83 c4 10             	add    esp,0x10
c0011c36:	89 c1                	mov    ecx,eax
c0011c38:	31 d2                	xor    edx,edx
c0011c3a:	b8 04 00 00 00       	mov    eax,0x4
c0011c3f:	85 c9                	test   ecx,ecx
c0011c41:	74 15                	je     c0011c58 <SysLoadDLL(regs*)+0xa4>
c0011c43:	53                   	push   ebx
c0011c44:	53                   	push   ebx
c0011c45:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011c4b:	51                   	push   ecx
c0011c4c:	e8 99 14 00 00       	call   c00130ea <Thr::executeDLL(unsigned long, void*)>
c0011c51:	83 c4 10             	add    esp,0x10
c0011c54:	31 c0                	xor    eax,eax
c0011c56:	31 d2                	xor    edx,edx
c0011c58:	59                   	pop    ecx
c0011c59:	5b                   	pop    ebx
c0011c5a:	5e                   	pop    esi
c0011c5b:	c3                   	ret    

c0011c5c <SysRead(regs*)>:
c0011c5c:	57                   	push   edi
c0011c5d:	56                   	push   esi
c0011c5e:	53                   	push   ebx
c0011c5f:	83 ec 10             	sub    esp,0x10
c0011c62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c66:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c69:	83 f8 02             	cmp    eax,0x2
c0011c6c:	77 10                	ja     c0011c7e <SysRead(regs*)+0x22>
c0011c6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c76:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011c7c:	eb 0e                	jmp    c0011c8c <SysRead(regs*)+0x30>
c0011c7e:	83 ec 0c             	sub    esp,0xc
c0011c81:	50                   	push   eax
c0011c82:	e8 a8 74 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011c87:	83 c4 10             	add    esp,0x10
c0011c8a:	89 c1                	mov    ecx,eax
c0011c8c:	83 c8 ff             	or     eax,0xffffffff
c0011c8f:	85 c9                	test   ecx,ecx
c0011c91:	89 c2                	mov    edx,eax
c0011c93:	74 28                	je     c0011cbd <SysRead(regs*)+0x61>
c0011c95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c9d:	31 ff                	xor    edi,edi
c0011c9f:	83 ec 0c             	sub    esp,0xc
c0011ca2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011ca4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ca8:	52                   	push   edx
c0011ca9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011cac:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011caf:	57                   	push   edi
c0011cb0:	56                   	push   esi
c0011cb1:	51                   	push   ecx
c0011cb2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011cb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cb9:	83 c4 20             	add    esp,0x20
c0011cbc:	99                   	cdq    
c0011cbd:	83 c4 10             	add    esp,0x10
c0011cc0:	5b                   	pop    ebx
c0011cc1:	5e                   	pop    esi
c0011cc2:	5f                   	pop    edi
c0011cc3:	c3                   	ret    

c0011cc4 <SysRegisterSignal(regs*)>:
c0011cc4:	83 ec 18             	sub    esp,0x18
c0011cc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ccb:	6a 00                	push   0x0
c0011ccd:	6a 00                	push   0x0
c0011ccf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011cd2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011cd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cdd:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011ce3:	e8 bd e9 ff ff       	call   c00106a5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011ce8:	83 c4 2c             	add    esp,0x2c
c0011ceb:	99                   	cdq    
c0011cec:	c3                   	ret    

c0011ced <SysSbrk(regs*)>:
c0011ced:	56                   	push   esi
c0011cee:	53                   	push   ebx
c0011cef:	83 ec 0c             	sub    esp,0xc
c0011cf2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cf6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011cf9:	68 00 eb 01 c0       	push   0xc001eb00
c0011cfe:	e8 6a 89 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0011d03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d08:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011d0b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d0e:	83 c4 10             	add    esp,0x10
c0011d11:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011d17:	85 db                	test   ebx,ebx
c0011d19:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011d1c:	74 02                	je     c0011d20 <SysSbrk(regs*)+0x33>
c0011d1e:	79 06                	jns    c0011d26 <SysSbrk(regs*)+0x39>
c0011d20:	89 f0                	mov    eax,esi
c0011d22:	31 d2                	xor    edx,edx
c0011d24:	eb 2a                	jmp    c0011d50 <SysSbrk(regs*)+0x63>
c0011d26:	83 c8 ff             	or     eax,0xffffffff
c0011d29:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011d2f:	89 c2                	mov    edx,eax
c0011d31:	77 1d                	ja     c0011d50 <SysSbrk(regs*)+0x63>
c0011d33:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011d39:	50                   	push   eax
c0011d3a:	c1 ea 0c             	shr    edx,0xc
c0011d3d:	68 07 0c 00 00       	push   0xc07
c0011d42:	52                   	push   edx
c0011d43:	51                   	push   ecx
c0011d44:	e8 b3 7c ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0011d49:	89 f0                	mov    eax,esi
c0011d4b:	31 d2                	xor    edx,edx
c0011d4d:	83 c4 10             	add    esp,0x10
c0011d50:	59                   	pop    ecx
c0011d51:	5b                   	pop    ebx
c0011d52:	5e                   	pop    esi
c0011d53:	c3                   	ret    

c0011d54 <SysSetCwd(regs*)>:
c0011d54:	83 ec 14             	sub    esp,0x14
c0011d57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d5b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011d5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d63:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011d66:	e8 44 92 ff ff       	call   c000afaf <Fs::setcwd(Process*, char*)>
c0011d6b:	83 c4 1c             	add    esp,0x1c
c0011d6e:	99                   	cdq    
c0011d6f:	c3                   	ret    

c0011d70 <SysSetTime(regs*)>:
c0011d70:	55                   	push   ebp
c0011d71:	31 c9                	xor    ecx,ecx
c0011d73:	57                   	push   edi
c0011d74:	bd 0c 00 00 00       	mov    ebp,0xc
c0011d79:	56                   	push   esi
c0011d7a:	53                   	push   ebx
c0011d7b:	31 db                	xor    ebx,ebx
c0011d7d:	83 ec 10             	sub    esp,0x10
c0011d80:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011d84:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011d87:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011d8a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011d8d:	89 c2                	mov    edx,eax
c0011d8f:	66 81 ef 6c 07       	sub    di,0x76c
c0011d94:	83 e2 1f             	and    edx,0x1f
c0011d97:	c1 e7 10             	shl    edi,0x10
c0011d9a:	42                   	inc    edx
c0011d9b:	c1 e8 05             	shr    eax,0x5
c0011d9e:	88 d1                	mov    cl,dl
c0011da0:	31 d2                	xor    edx,edx
c0011da2:	f7 f5                	div    ebp
c0011da4:	89 dd                	mov    ebp,ebx
c0011da6:	88 d5                	mov    ch,dl
c0011da8:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011dae:	0f b7 c1             	movzx  eax,cx
c0011db1:	31 d2                	xor    edx,edx
c0011db3:	09 f8                	or     eax,edi
c0011db5:	bf 3c 00 00 00       	mov    edi,0x3c
c0011dba:	89 c1                	mov    ecx,eax
c0011dbc:	89 f0                	mov    eax,esi
c0011dbe:	f7 f7                	div    edi
c0011dc0:	c1 e2 10             	shl    edx,0x10
c0011dc3:	09 d5                	or     ebp,edx
c0011dc5:	31 d2                	xor    edx,edx
c0011dc7:	89 eb                	mov    ebx,ebp
c0011dc9:	f7 f7                	div    edi
c0011dcb:	bf 10 0e 00 00       	mov    edi,0xe10
c0011dd0:	88 d7                	mov    bh,dl
c0011dd2:	89 f0                	mov    eax,esi
c0011dd4:	31 d2                	xor    edx,edx
c0011dd6:	f7 f7                	div    edi
c0011dd8:	bf 18 00 00 00       	mov    edi,0x18
c0011ddd:	31 d2                	xor    edx,edx
c0011ddf:	f7 f7                	div    edi
c0011de1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011de6:	88 d3                	mov    bl,dl
c0011de8:	53                   	push   ebx
c0011de9:	51                   	push   ecx
c0011dea:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011df0:	e8 cb 99 ff ff       	call   c000b7c0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011df5:	83 c4 1c             	add    esp,0x1c
c0011df8:	83 f0 01             	xor    eax,0x1
c0011dfb:	5b                   	pop    ebx
c0011dfc:	0f b6 c0             	movzx  eax,al
c0011dff:	5e                   	pop    esi
c0011e00:	31 d2                	xor    edx,edx
c0011e02:	5f                   	pop    edi
c0011e03:	5d                   	pop    ebp
c0011e04:	c3                   	ret    

c0011e05 <SysTimezone(regs*)>:
c0011e05:	53                   	push   ebx
c0011e06:	83 ec 08             	sub    esp,0x8
c0011e09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e0d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011e11:	75 17                	jne    c0011e2a <SysTimezone(regs*)+0x25>
c0011e13:	83 ec 0c             	sub    esp,0xc
c0011e16:	68 0c eb 01 c0       	push   0xc001eb0c
c0011e1b:	e8 4d 88 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0011e20:	83 c8 ff             	or     eax,0xffffffff
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	89 c2                	mov    edx,eax
c0011e28:	eb 20                	jmp    c0011e4a <SysTimezone(regs*)+0x45>
c0011e2a:	83 ec 0c             	sub    esp,0xc
c0011e2d:	68 21 eb 01 c0       	push   0xc001eb21
c0011e32:	e8 36 88 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0011e37:	58                   	pop    eax
c0011e38:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011e3b:	e8 dc 96 ff ff       	call   c000b51c <User::loadClockSettings(int)>
c0011e40:	83 c4 10             	add    esp,0x10
c0011e43:	b8 01 00 00 00       	mov    eax,0x1
c0011e48:	31 d2                	xor    edx,edx
c0011e4a:	83 c4 08             	add    esp,0x8
c0011e4d:	5b                   	pop    ebx
c0011e4e:	c3                   	ret    

c0011e4f <SysWrite(regs*)>:
c0011e4f:	57                   	push   edi
c0011e50:	56                   	push   esi
c0011e51:	53                   	push   ebx
c0011e52:	83 ec 10             	sub    esp,0x10
c0011e55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e59:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e5c:	83 f8 02             	cmp    eax,0x2
c0011e5f:	77 10                	ja     c0011e71 <SysWrite(regs*)+0x22>
c0011e61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e69:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011e6f:	eb 0e                	jmp    c0011e7f <SysWrite(regs*)+0x30>
c0011e71:	83 ec 0c             	sub    esp,0xc
c0011e74:	50                   	push   eax
c0011e75:	e8 b5 72 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011e7a:	83 c4 10             	add    esp,0x10
c0011e7d:	89 c1                	mov    ecx,eax
c0011e7f:	83 c8 ff             	or     eax,0xffffffff
c0011e82:	85 c9                	test   ecx,ecx
c0011e84:	89 c2                	mov    edx,eax
c0011e86:	74 28                	je     c0011eb0 <SysWrite(regs*)+0x61>
c0011e88:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e90:	31 ff                	xor    edi,edi
c0011e92:	83 ec 0c             	sub    esp,0xc
c0011e95:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011e97:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e9b:	52                   	push   edx
c0011e9c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011e9f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011ea2:	57                   	push   edi
c0011ea3:	56                   	push   esi
c0011ea4:	51                   	push   ecx
c0011ea5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ea8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eac:	83 c4 20             	add    esp,0x20
c0011eaf:	99                   	cdq    
c0011eb0:	83 c4 10             	add    esp,0x10
c0011eb3:	5b                   	pop    ebx
c0011eb4:	5e                   	pop    esi
c0011eb5:	5f                   	pop    edi
c0011eb6:	c3                   	ret    

c0011eb7 <SysWsbe(regs*)>:
c0011eb7:	57                   	push   edi
c0011eb8:	b9 0b 00 00 00       	mov    ecx,0xb
c0011ebd:	56                   	push   esi
c0011ebe:	be 60 eb 01 c0       	mov    esi,0xc001eb60
c0011ec3:	53                   	push   ebx
c0011ec4:	83 ec 30             	sub    esp,0x30
c0011ec7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011ecb:	fc                   	cld    
c0011ecc:	83 ec 0c             	sub    esp,0xc
c0011ecf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011ed1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011ed5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011eda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011edd:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011ee3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ee5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011ee8:	57                   	push   edi
c0011ee9:	e8 52 e6 fe ff       	call   c0000540 <strlen>
c0011eee:	5a                   	pop    edx
c0011eef:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011ef3:	52                   	push   edx
c0011ef4:	31 d2                	xor    edx,edx
c0011ef6:	57                   	push   edi
c0011ef7:	52                   	push   edx
c0011ef8:	50                   	push   eax
c0011ef9:	56                   	push   esi
c0011efa:	ff d3                	call   ebx
c0011efc:	83 c4 14             	add    esp,0x14
c0011eff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011f03:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011f06:	e8 fd 22 00 00       	call   c0014208 <terminateTask(int)>
c0011f0b:	83 c4 40             	add    esp,0x40
c0011f0e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011f13:	5b                   	pop    ebx
c0011f14:	31 d2                	xor    edx,edx
c0011f16:	5e                   	pop    esi
c0011f17:	5f                   	pop    edi
c0011f18:	c3                   	ret    

c0011f19 <SysYield(regs*)>:
c0011f19:	83 ec 0c             	sub    esp,0xc
c0011f1c:	fa                   	cli    
c0011f1d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011f23:	e8 bc 19 00 00       	call   c00138e4 <schedule()>
c0011f28:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011f2d:	48                   	dec    eax
c0011f2e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011f33:	75 01                	jne    c0011f36 <SysYield(regs*)+0x1d>
c0011f35:	fb                   	sti    
c0011f36:	31 c0                	xor    eax,eax
c0011f38:	31 d2                	xor    edx,edx
c0011f3a:	83 c4 0c             	add    esp,0xc
c0011f3d:	c3                   	ret    

c0011f3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011f3e:	55                   	push   ebp
c0011f3f:	57                   	push   edi
c0011f40:	56                   	push   esi
c0011f41:	53                   	push   ebx
c0011f42:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011f48:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011f50:	0f 95 c2             	setne  dl
c0011f53:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011f5b:	0f 94 c0             	sete   al
c0011f5e:	84 c2                	test   dl,al
c0011f60:	74 34                	je     c0011f96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011f62:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011f6d:	74 27                	je     c0011f96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011f6f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011f76:	05 00 10 00 00       	add    eax,0x1000
c0011f7b:	89 c1                	mov    ecx,eax
c0011f7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f82:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011f88:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011f8f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011f96:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011f9d:	83 ec 0c             	sub    esp,0xc
c0011fa0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fa6:	6a 01                	push   0x1
c0011fa8:	e8 d8 72 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011fad:	83 c4 10             	add    esp,0x10
c0011fb0:	89 c3                	mov    ebx,eax
c0011fb2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fb8:	0f 86 25 01 00 00    	jbe    c00120e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011fbe:	c1 ee 0c             	shr    esi,0xc
c0011fc1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011fc8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011fcc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011fd4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011fdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fdf:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011fe6:	29 ef                	sub    edi,ebp
c0011fe8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011fec:	0f 83 f8 00 00 00    	jae    c00120ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ff2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ff8:	76 05                	jbe    c0011fff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011ffa:	bf 00 10 00 00       	mov    edi,0x1000
c0011fff:	83 ec 0c             	sub    esp,0xc
c0012002:	31 d2                	xor    edx,edx
c0012004:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001200b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001200d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012011:	50                   	push   eax
c0012012:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012016:	56                   	push   esi
c0012017:	52                   	push   edx
c0012018:	57                   	push   edi
c0012019:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012020:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012023:	83 c4 20             	add    esp,0x20
c0012026:	85 c0                	test   eax,eax
c0012028:	75 06                	jne    c0012030 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c001202a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001202e:	74 13                	je     c0012043 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012030:	83 ec 0c             	sub    esp,0xc
c0012033:	53                   	push   ebx
c0012034:	e8 40 75 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0012039:	83 c4 10             	add    esp,0x10
c001203c:	31 c0                	xor    eax,eax
c001203e:	e9 7c 01 00 00       	jmp    c00121bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0012043:	fa                   	cli    
c0012044:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001204a:	e8 46 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c001204f:	6a 07                	push   0x7
c0012051:	89 c7                	mov    edi,eax
c0012053:	53                   	push   ebx
c0012054:	50                   	push   eax
c0012055:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001205a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001205d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012063:	e8 90 78 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012068:	83 c4 0c             	add    esp,0xc
c001206b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012072:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012078:	6a 00                	push   0x0
c001207a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001207f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012082:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012088:	e8 dd 76 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c001208d:	58                   	pop    eax
c001208e:	5a                   	pop    edx
c001208f:	68 07 0c 00 00       	push   0xc07
c0012094:	55                   	push   ebp
c0012095:	57                   	push   edi
c0012096:	89 df                	mov    edi,ebx
c0012098:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001209f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120a5:	6a 00                	push   0x0
c00120a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120af:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120b5:	e8 76 7c ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00120ba:	b9 00 10 00 00       	mov    ecx,0x1000
c00120bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00120c1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00120c6:	83 c4 20             	add    esp,0x20
c00120c9:	48                   	dec    eax
c00120ca:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00120cf:	85 c0                	test   eax,eax
c00120d1:	75 01                	jne    c00120d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00120d3:	fb                   	sti    
c00120d4:	81 c5 00 10 00 00    	add    ebp,0x1000
c00120da:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00120de:	e9 f1 fe ff ff       	jmp    c0011fd4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00120e3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00120ea:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00120f1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00120f7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00120fd:	0f 86 ae 00 00 00    	jbe    c00121b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012103:	fa                   	cli    
c0012104:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001210a:	c1 ee 0c             	shr    esi,0xc
c001210d:	51                   	push   ecx
c001210e:	31 ff                	xor    edi,edi
c0012110:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012117:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001211d:	6a 00                	push   0x0
c001211f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012124:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012127:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001212d:	e8 38 76 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c0012132:	83 c4 10             	add    esp,0x10
c0012135:	e8 5b 59 ff ff       	call   c0007a95 <Phys::allocatePage()>
c001213a:	47                   	inc    edi
c001213b:	6a 07                	push   0x7
c001213d:	53                   	push   ebx
c001213e:	50                   	push   eax
c001213f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012143:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012149:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001214c:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012152:	e8 a1 77 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012157:	58                   	pop    eax
c0012158:	5a                   	pop    edx
c0012159:	68 07 0c 00 00       	push   0xc07
c001215e:	55                   	push   ebp
c001215f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012165:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012169:	50                   	push   eax
c001216a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012171:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012177:	6a 00                	push   0x0
c0012179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001217e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012181:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012187:	e8 a4 7b ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001218c:	83 c4 1c             	add    esp,0x1c
c001218f:	68 00 10 00 00       	push   0x1000
c0012194:	6a 00                	push   0x0
c0012196:	53                   	push   ebx
c0012197:	e8 34 e3 fe ff       	call   c00004d0 <memset>
c001219c:	83 c4 10             	add    esp,0x10
c001219f:	39 fe                	cmp    esi,edi
c00121a1:	77 92                	ja     c0012135 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c00121a3:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00121a8:	48                   	dec    eax
c00121a9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00121ae:	75 01                	jne    c00121b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00121b0:	fb                   	sti    
c00121b1:	83 ec 0c             	sub    esp,0xc
c00121b4:	53                   	push   ebx
c00121b5:	e8 bf 73 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00121ba:	83 c4 10             	add    esp,0x10
c00121bd:	b0 01                	mov    al,0x1
c00121bf:	81 c4 2c 10 00 00    	add    esp,0x102c
c00121c5:	5b                   	pop    ebx
c00121c6:	5e                   	pop    esi
c00121c7:	5f                   	pop    edi
c00121c8:	5d                   	pop    ebp
c00121c9:	c3                   	ret    

c00121ca <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00121ca:	55                   	push   ebp
c00121cb:	57                   	push   edi
c00121cc:	56                   	push   esi
c00121cd:	53                   	push   ebx
c00121ce:	83 ec 48             	sub    esp,0x48
c00121d1:	68 14 01 00 00       	push   0x114
c00121d6:	e8 de 55 ff ff       	call   c00077b9 <malloc>
c00121db:	83 c4 0c             	add    esp,0xc
c00121de:	89 c6                	mov    esi,eax
c00121e0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00121e4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00121e8:	50                   	push   eax
c00121e9:	e8 f4 89 ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c00121ee:	58                   	pop    eax
c00121ef:	5a                   	pop    edx
c00121f0:	6a 01                	push   0x1
c00121f2:	56                   	push   esi
c00121f3:	e8 aa 8a ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c00121f8:	83 c4 10             	add    esp,0x10
c00121fb:	85 c0                	test   eax,eax
c00121fd:	0f 85 47 01 00 00    	jne    c001234a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012203:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001220b:	83 ec 0c             	sub    esp,0xc
c001220e:	6a 34                	push   0x34
c0012210:	e8 a4 55 ff ff       	call   c00077b9 <malloc>
c0012215:	89 c3                	mov    ebx,eax
c0012217:	58                   	pop    eax
c0012218:	8b 06                	mov    eax,DWORD PTR [esi]
c001221a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001221e:	57                   	push   edi
c001221f:	53                   	push   ebx
c0012220:	6a 00                	push   0x0
c0012222:	6a 34                	push   0x34
c0012224:	56                   	push   esi
c0012225:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012228:	83 c4 20             	add    esp,0x20
c001222b:	85 c0                	test   eax,eax
c001222d:	0f 85 17 01 00 00    	jne    c001234a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012233:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012239:	0f 85 0b 01 00 00    	jne    c001234a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001223f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012242:	85 c0                	test   eax,eax
c0012244:	0f 84 00 01 00 00    	je     c001234a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001224a:	31 d2                	xor    edx,edx
c001224c:	55                   	push   ebp
c001224d:	52                   	push   edx
c001224e:	50                   	push   eax
c001224f:	56                   	push   esi
c0012250:	e8 0b 8b ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c0012255:	83 c4 10             	add    esp,0x10
c0012258:	85 c0                	test   eax,eax
c001225a:	0f 85 ea 00 00 00    	jne    c001234a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012260:	83 ec 0c             	sub    esp,0xc
c0012263:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012266:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001226a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001226e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012272:	0f af c2             	imul   eax,edx
c0012275:	50                   	push   eax
c0012276:	e8 3e 55 ff ff       	call   c00077b9 <malloc>
c001227b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001227d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012281:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012284:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012288:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001228c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012290:	0f af c2             	imul   eax,edx
c0012293:	99                   	cdq    
c0012294:	52                   	push   edx
c0012295:	50                   	push   eax
c0012296:	56                   	push   esi
c0012297:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001229a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001229d:	83 c4 20             	add    esp,0x20
c00122a0:	85 c0                	test   eax,eax
c00122a2:	0f 84 a2 00 00 00    	je     c001234a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122a8:	31 d2                	xor    edx,edx
c00122aa:	51                   	push   ecx
c00122ab:	52                   	push   edx
c00122ac:	50                   	push   eax
c00122ad:	56                   	push   esi
c00122ae:	e8 ad 8a ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c00122b3:	83 c4 10             	add    esp,0x10
c00122b6:	85 c0                	test   eax,eax
c00122b8:	0f 85 8c 00 00 00    	jne    c001234a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122be:	83 ec 0c             	sub    esp,0xc
c00122c1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00122c5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00122c9:	31 ed                	xor    ebp,ebp
c00122cb:	0f af c2             	imul   eax,edx
c00122ce:	50                   	push   eax
c00122cf:	e8 e5 54 ff ff       	call   c00077b9 <malloc>
c00122d4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00122d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00122da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00122dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122e1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00122e5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00122e9:	0f af c2             	imul   eax,edx
c00122ec:	99                   	cdq    
c00122ed:	52                   	push   edx
c00122ee:	50                   	push   eax
c00122ef:	56                   	push   esi
c00122f0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00122f3:	83 c4 20             	add    esp,0x20
c00122f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00122fe:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012302:	0f 86 80 00 00 00    	jbe    c0012388 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012308:	0f b7 fd             	movzx  edi,bp
c001230b:	c1 e7 05             	shl    edi,0x5
c001230e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012312:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012315:	75 6b                	jne    c0012382 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012317:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001231a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001231e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012321:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012325:	52                   	push   edx
c0012326:	31 d2                	xor    edx,edx
c0012328:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001232b:	52                   	push   edx
c001232c:	50                   	push   eax
c001232d:	56                   	push   esi
c001232e:	e8 2d 8a ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	85 c0                	test   eax,eax
c0012338:	74 17                	je     c0012351 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001233a:	83 ec 0c             	sub    esp,0xc
c001233d:	68 8c eb 01 c0       	push   0xc001eb8c
c0012342:	e8 26 83 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0012347:	83 c4 10             	add    esp,0x10
c001234a:	31 c0                	xor    eax,eax
c001234c:	e9 87 00 00 00       	jmp    c00123d8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012351:	83 ec 0c             	sub    esp,0xc
c0012354:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012357:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001235a:	50                   	push   eax
c001235b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001235f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012363:	56                   	push   esi
c0012364:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012368:	e8 d1 fb ff ff       	call   c0011f3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001236d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012371:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012375:	83 c4 20             	add    esp,0x20
c0012378:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001237c:	73 04                	jae    c0012382 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001237e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012382:	45                   	inc    ebp
c0012383:	e9 76 ff ff ff       	jmp    c00122fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012388:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001238c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012394:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001239a:	83 ec 0c             	sub    esp,0xc
c001239d:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00123a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123a8:	05 00 10 00 00       	add    eax,0x1000
c00123ad:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00123b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123b4:	e8 10 54 ff ff       	call   c00077c9 <free>
c00123b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123bc:	e8 08 54 ff ff       	call   c00077c9 <free>
c00123c1:	58                   	pop    eax
c00123c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123c6:	e8 fe 53 ff ff       	call   c00077c9 <free>
c00123cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00123ce:	e8 2d 89 ff ff       	call   c000ad00 <File::close()>
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	b0 01                	mov    al,0x1
c00123d8:	83 c4 3c             	add    esp,0x3c
c00123db:	5b                   	pop    ebx
c00123dc:	5e                   	pop    esi
c00123dd:	5f                   	pop    edi
c00123de:	5d                   	pop    ebp
c00123df:	c3                   	ret    

c00123e0 <Thr::runtimeReferenceHelper()>:
c00123e0:	83 ec 18             	sub    esp,0x18
c00123e3:	68 94 eb 01 c0       	push   0xc001eb94
c00123e8:	e8 80 82 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c00123ed:	fa                   	cli    
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	eb fe                	jmp    c00123f1 <Thr::runtimeReferenceHelper()+0x11>

c00123f3 <Thr::getAddressOfKernelSymbol(char const*)>:
c00123f3:	57                   	push   edi
c00123f4:	56                   	push   esi
c00123f5:	53                   	push   ebx
c00123f6:	31 db                	xor    ebx,ebx
c00123f8:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c00123fe:	7e 3c                	jle    c001243c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012400:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c0012407:	31 ff                	xor    edi,edi
c0012409:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c0012410:	7e 27                	jle    c0012439 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012412:	50                   	push   eax
c0012413:	50                   	push   eax
c0012414:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012418:	8b 06                	mov    eax,DWORD PTR [esi]
c001241a:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c0012421:	50                   	push   eax
c0012422:	e8 b9 e2 fe ff       	call   c00006e0 <strcmp>
c0012427:	83 c4 10             	add    esp,0x10
c001242a:	85 c0                	test   eax,eax
c001242c:	75 05                	jne    c0012433 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001242e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012431:	eb 0b                	jmp    c001243e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012433:	83 c6 10             	add    esi,0x10
c0012436:	47                   	inc    edi
c0012437:	eb d0                	jmp    c0012409 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012439:	43                   	inc    ebx
c001243a:	eb bc                	jmp    c00123f8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001243c:	31 c0                	xor    eax,eax
c001243e:	5b                   	pop    ebx
c001243f:	5e                   	pop    esi
c0012440:	5f                   	pop    edi
c0012441:	c3                   	ret    

c0012442 <Thr::loadKernelSymbolTable(char const*)>:
c0012442:	55                   	push   ebp
c0012443:	57                   	push   edi
c0012444:	56                   	push   esi
c0012445:	53                   	push   ebx
c0012446:	83 ec 68             	sub    esp,0x68
c0012449:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c001244f:	68 14 01 00 00       	push   0x114
c0012454:	e8 60 53 ff ff       	call   c00077b9 <malloc>
c0012459:	83 c4 0c             	add    esp,0xc
c001245c:	89 c3                	mov    ebx,eax
c001245e:	56                   	push   esi
c001245f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012463:	50                   	push   eax
c0012464:	e8 79 87 ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0012469:	5e                   	pop    esi
c001246a:	5f                   	pop    edi
c001246b:	6a 01                	push   0x1
c001246d:	53                   	push   ebx
c001246e:	e8 2f 88 ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c0012473:	83 c4 10             	add    esp,0x10
c0012476:	85 c0                	test   eax,eax
c0012478:	74 0a                	je     c0012484 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001247a:	83 ec 0c             	sub    esp,0xc
c001247d:	68 b6 eb 01 c0       	push   0xc001ebb6
c0012482:	eb 34                	jmp    c00124b8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012484:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001248c:	83 ec 0c             	sub    esp,0xc
c001248f:	6a 34                	push   0x34
c0012491:	e8 23 53 ff ff       	call   c00077b9 <malloc>
c0012496:	59                   	pop    ecx
c0012497:	89 c7                	mov    edi,eax
c0012499:	8d 74 24 34          	lea    esi,[esp+0x34]
c001249d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001249f:	56                   	push   esi
c00124a0:	57                   	push   edi
c00124a1:	6a 00                	push   0x0
c00124a3:	6a 34                	push   0x34
c00124a5:	53                   	push   ebx
c00124a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00124a9:	83 c4 20             	add    esp,0x20
c00124ac:	85 c0                	test   eax,eax
c00124ae:	74 17                	je     c00124c7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00124b0:	83 ec 0c             	sub    esp,0xc
c00124b3:	68 cd eb 01 c0       	push   0xc001ebcd
c00124b8:	e8 32 de ff ff       	call   c00102ef <KePanic(char const*)>
c00124bd:	83 c4 10             	add    esp,0x10
c00124c0:	31 c0                	xor    eax,eax
c00124c2:	e9 31 02 00 00       	jmp    c00126f8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00124c7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00124cd:	75 e1                	jne    c00124b0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00124cf:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00124d2:	85 c0                	test   eax,eax
c00124d4:	74 da                	je     c00124b0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00124d6:	52                   	push   edx
c00124d7:	31 d2                	xor    edx,edx
c00124d9:	52                   	push   edx
c00124da:	50                   	push   eax
c00124db:	53                   	push   ebx
c00124dc:	e8 7f 88 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c00124e1:	83 c4 10             	add    esp,0x10
c00124e4:	85 c0                	test   eax,eax
c00124e6:	75 c8                	jne    c00124b0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00124e8:	83 ec 0c             	sub    esp,0xc
c00124eb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00124ef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00124f3:	31 ed                	xor    ebp,ebp
c00124f5:	0f af c2             	imul   eax,edx
c00124f8:	50                   	push   eax
c00124f9:	e8 bb 52 ff ff       	call   c00077b9 <malloc>
c00124fe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012500:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012504:	89 34 24             	mov    DWORD PTR [esp],esi
c0012507:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001250b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001250f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012513:	0f af c2             	imul   eax,edx
c0012516:	99                   	cdq    
c0012517:	52                   	push   edx
c0012518:	50                   	push   eax
c0012519:	53                   	push   ebx
c001251a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001251d:	83 c4 20             	add    esp,0x20
c0012520:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012528:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012530:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012538:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012540:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012544:	0f 86 aa 00 00 00    	jbe    c00125f4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001254a:	0f b7 f5             	movzx  esi,bp
c001254d:	6b f6 28             	imul   esi,esi,0x28
c0012550:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012554:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012557:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001255b:	50                   	push   eax
c001255c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012560:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012564:	8b 16                	mov    edx,DWORD PTR [esi]
c0012566:	6b c0 28             	imul   eax,eax,0x28
c0012569:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001256d:	89 d0                	mov    eax,edx
c001256f:	31 d2                	xor    edx,edx
c0012571:	52                   	push   edx
c0012572:	50                   	push   eax
c0012573:	53                   	push   ebx
c0012574:	e8 e7 87 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c0012579:	83 c4 0c             	add    esp,0xc
c001257c:	6a 20                	push   0x20
c001257e:	6a 00                	push   0x0
c0012580:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012584:	52                   	push   edx
c0012585:	e8 46 df fe ff       	call   c00004d0 <memset>
c001258a:	58                   	pop    eax
c001258b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001258d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012591:	51                   	push   ecx
c0012592:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012596:	52                   	push   edx
c0012597:	6a 00                	push   0x0
c0012599:	6a 1f                	push   0x1f
c001259b:	53                   	push   ebx
c001259c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001259f:	83 c4 18             	add    esp,0x18
c00125a2:	68 e4 eb 01 c0       	push   0xc001ebe4
c00125a7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00125ab:	52                   	push   edx
c00125ac:	e8 2f e1 fe ff       	call   c00006e0 <strcmp>
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	85 c0                	test   eax,eax
c00125b6:	75 0f                	jne    c00125c7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00125b8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00125bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125c7:	50                   	push   eax
c00125c8:	50                   	push   eax
c00125c9:	68 ec eb 01 c0       	push   0xc001ebec
c00125ce:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00125d2:	50                   	push   eax
c00125d3:	e8 08 e1 fe ff       	call   c00006e0 <strcmp>
c00125d8:	83 c4 10             	add    esp,0x10
c00125db:	85 c0                	test   eax,eax
c00125dd:	75 0f                	jne    c00125ee <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00125df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00125e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00125e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00125ee:	45                   	inc    ebp
c00125ef:	e9 4c ff ff ff       	jmp    c0012540 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00125f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00125f9:	75 10                	jne    c001260b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00125fb:	83 ec 0c             	sub    esp,0xc
c00125fe:	68 f4 eb 01 c0       	push   0xc001ebf4
c0012603:	e8 e7 dc ff ff       	call   c00102ef <KePanic(char const*)>
c0012608:	83 c4 10             	add    esp,0x10
c001260b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012610:	75 10                	jne    c0012622 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012612:	83 ec 0c             	sub    esp,0xc
c0012615:	68 f4 eb 01 c0       	push   0xc001ebf4
c001261a:	e8 d0 dc ff ff       	call   c00102ef <KePanic(char const*)>
c001261f:	83 c4 10             	add    esp,0x10
c0012622:	31 d2                	xor    edx,edx
c0012624:	50                   	push   eax
c0012625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012629:	52                   	push   edx
c001262a:	50                   	push   eax
c001262b:	53                   	push   ebx
c001262c:	e8 2f 87 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c0012631:	5a                   	pop    edx
c0012632:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012636:	e8 7e 51 ff ff       	call   c00077b9 <malloc>
c001263b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001263f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012643:	31 c9                	xor    ecx,ecx
c0012645:	5e                   	pop    esi
c0012646:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012648:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001264c:	55                   	push   ebp
c001264d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012651:	51                   	push   ecx
c0012652:	52                   	push   edx
c0012653:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012657:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001265b:	53                   	push   ebx
c001265c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001265f:	83 c4 14             	add    esp,0x14
c0012662:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012666:	e8 4e 51 ff ff       	call   c00077b9 <malloc>
c001266b:	89 c6                	mov    esi,eax
c001266d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001266f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012672:	56                   	push   esi
c0012673:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012677:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001267b:	51                   	push   ecx
c001267c:	52                   	push   edx
c001267d:	53                   	push   ebx
c001267e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012681:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012685:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c001268b:	83 c4 1c             	add    esp,0x1c
c001268e:	c1 e8 04             	shr    eax,0x4
c0012691:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c0012698:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001269c:	31 d2                	xor    edx,edx
c001269e:	52                   	push   edx
c001269f:	50                   	push   eax
c00126a0:	53                   	push   ebx
c00126a1:	e8 ba 86 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c00126a6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00126a8:	31 d2                	xor    edx,edx
c00126aa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00126ad:	56                   	push   esi
c00126ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126b2:	52                   	push   edx
c00126b3:	50                   	push   eax
c00126b4:	53                   	push   ebx
c00126b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126b8:	83 c4 14             	add    esp,0x14
c00126bb:	53                   	push   ebx
c00126bc:	e8 3f 86 ff ff       	call   c000ad00 <File::close()>
c00126c1:	5d                   	pop    ebp
c00126c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126c6:	e8 fe 50 ff ff       	call   c00077c9 <free>
c00126cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00126ce:	e8 f6 50 ff ff       	call   c00077c9 <free>
c00126d3:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c00126d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00126dc:	8d 50 01             	lea    edx,[eax+0x1]
c00126df:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c00126e6:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c00126ed:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c00126f3:	83 c4 10             	add    esp,0x10
c00126f6:	b0 01                	mov    al,0x1
c00126f8:	83 c4 5c             	add    esp,0x5c
c00126fb:	5b                   	pop    ebx
c00126fc:	5e                   	pop    esi
c00126fd:	5f                   	pop    edi
c00126fe:	5d                   	pop    ebp
c00126ff:	c3                   	ret    

c0012700 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012700:	55                   	push   ebp
c0012701:	57                   	push   edi
c0012702:	56                   	push   esi
c0012703:	53                   	push   ebx
c0012704:	81 ec 68 03 00 00    	sub    esp,0x368
c001270a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012711:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c0012717:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001271b:	68 14 01 00 00       	push   0x114
c0012720:	e8 94 50 ff ff       	call   c00077b9 <malloc>
c0012725:	83 c4 0c             	add    esp,0xc
c0012728:	89 c5                	mov    ebp,eax
c001272a:	53                   	push   ebx
c001272b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012732:	50                   	push   eax
c0012733:	e8 aa 84 ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0012738:	5e                   	pop    esi
c0012739:	5f                   	pop    edi
c001273a:	6a 01                	push   0x1
c001273c:	55                   	push   ebp
c001273d:	e8 60 85 ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c0012742:	83 c4 10             	add    esp,0x10
c0012745:	85 c0                	test   eax,eax
c0012747:	0f 85 a7 06 00 00    	jne    c0012df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001274d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012755:	83 ec 0c             	sub    esp,0xc
c0012758:	6a 34                	push   0x34
c001275a:	e8 5a 50 ff ff       	call   c00077b9 <malloc>
c001275f:	5b                   	pop    ebx
c0012760:	89 c7                	mov    edi,eax
c0012762:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012766:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012769:	53                   	push   ebx
c001276a:	57                   	push   edi
c001276b:	6a 00                	push   0x0
c001276d:	6a 34                	push   0x34
c001276f:	55                   	push   ebp
c0012770:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012773:	83 c4 20             	add    esp,0x20
c0012776:	85 c0                	test   eax,eax
c0012778:	0f 85 76 06 00 00    	jne    c0012df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001277e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012784:	0f 85 6a 06 00 00    	jne    c0012df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001278a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001278d:	85 c0                	test   eax,eax
c001278f:	0f 84 5f 06 00 00    	je     c0012df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012795:	31 d2                	xor    edx,edx
c0012797:	51                   	push   ecx
c0012798:	52                   	push   edx
c0012799:	50                   	push   eax
c001279a:	55                   	push   ebp
c001279b:	e8 c0 85 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c00127a0:	83 c4 10             	add    esp,0x10
c00127a3:	85 c0                	test   eax,eax
c00127a5:	0f 85 49 06 00 00    	jne    c0012df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127ab:	83 ec 0c             	sub    esp,0xc
c00127ae:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00127b1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00127b5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00127b9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00127bd:	0f af c2             	imul   eax,edx
c00127c0:	50                   	push   eax
c00127c1:	e8 f3 4f ff ff       	call   c00077b9 <malloc>
c00127c6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00127d4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00127d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00127dc:	0f af c2             	imul   eax,edx
c00127df:	99                   	cdq    
c00127e0:	52                   	push   edx
c00127e1:	50                   	push   eax
c00127e2:	55                   	push   ebp
c00127e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127e6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00127e9:	83 c4 20             	add    esp,0x20
c00127ec:	85 c0                	test   eax,eax
c00127ee:	0f 84 00 06 00 00    	je     c0012df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127f4:	52                   	push   edx
c00127f5:	31 d2                	xor    edx,edx
c00127f7:	52                   	push   edx
c00127f8:	50                   	push   eax
c00127f9:	55                   	push   ebp
c00127fa:	e8 61 85 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c00127ff:	83 c4 10             	add    esp,0x10
c0012802:	85 c0                	test   eax,eax
c0012804:	0f 85 ea 05 00 00    	jne    c0012df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001280a:	83 ec 0c             	sub    esp,0xc
c001280d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012811:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012815:	31 f6                	xor    esi,esi
c0012817:	0f af c2             	imul   eax,edx
c001281a:	50                   	push   eax
c001281b:	e8 99 4f ff ff       	call   c00077b9 <malloc>
c0012820:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012823:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012827:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001282a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001282e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012832:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012836:	0f af c2             	imul   eax,edx
c0012839:	99                   	cdq    
c001283a:	52                   	push   edx
c001283b:	50                   	push   eax
c001283c:	55                   	push   ebp
c001283d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012840:	83 c4 20             	add    esp,0x20
c0012843:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012847:	0f 86 8a 00 00 00    	jbe    c00128d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001284d:	0f b7 de             	movzx  ebx,si
c0012850:	c1 e3 05             	shl    ebx,0x5
c0012853:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012857:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001285a:	75 75                	jne    c00128d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001285c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001285f:	31 d2                	xor    edx,edx
c0012861:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012865:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012868:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001286c:	50                   	push   eax
c001286d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012870:	52                   	push   edx
c0012871:	50                   	push   eax
c0012872:	55                   	push   ebp
c0012873:	e8 e8 84 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c0012878:	83 c4 10             	add    esp,0x10
c001287b:	85 c0                	test   eax,eax
c001287d:	0f 85 71 05 00 00    	jne    c0012df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012883:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001288a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001288d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012891:	31 d2                	xor    edx,edx
c0012893:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012897:	83 ec 0c             	sub    esp,0xc
c001289a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001289e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128a5:	50                   	push   eax
c00128a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128ae:	52                   	push   edx
c00128af:	50                   	push   eax
c00128b0:	55                   	push   ebp
c00128b1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00128b4:	83 c4 1c             	add    esp,0x1c
c00128b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00128ba:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00128bd:	50                   	push   eax
c00128be:	6a 00                	push   0x0
c00128c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00128c8:	50                   	push   eax
c00128c9:	e8 02 dc fe ff       	call   c00004d0 <memset>
c00128ce:	83 c4 10             	add    esp,0x10
c00128d1:	46                   	inc    esi
c00128d2:	e9 6c ff ff ff       	jmp    c0012843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00128d7:	53                   	push   ebx
c00128d8:	31 db                	xor    ebx,ebx
c00128da:	68 00 01 00 00       	push   0x100
c00128df:	6a 00                	push   0x0
c00128e1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00128e5:	50                   	push   eax
c00128e6:	e8 e5 db fe ff       	call   c00004d0 <memset>
c00128eb:	83 c4 0c             	add    esp,0xc
c00128ee:	68 00 01 00 00       	push   0x100
c00128f3:	6a 00                	push   0x0
c00128f5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00128fc:	50                   	push   eax
c00128fd:	e8 ce db fe ff       	call   c00004d0 <memset>
c0012902:	83 c4 10             	add    esp,0x10
c0012905:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001290d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012915:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001291d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012925:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001292d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012931:	0f 86 30 01 00 00    	jbe    c0012a67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012937:	0f b7 f3             	movzx  esi,bx
c001293a:	6b f6 28             	imul   esi,esi,0x28
c001293d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012941:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012944:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012948:	52                   	push   edx
c0012949:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001294d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012951:	8b 06                	mov    eax,DWORD PTR [esi]
c0012953:	6b d2 28             	imul   edx,edx,0x28
c0012956:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001295a:	31 d2                	xor    edx,edx
c001295c:	52                   	push   edx
c001295d:	50                   	push   eax
c001295e:	55                   	push   ebp
c001295f:	e8 fc 83 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c0012964:	83 c4 0c             	add    esp,0xc
c0012967:	6a 20                	push   0x20
c0012969:	6a 00                	push   0x0
c001296b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012972:	51                   	push   ecx
c0012973:	e8 58 db fe ff       	call   c00004d0 <memset>
c0012978:	59                   	pop    ecx
c0012979:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001297c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012980:	52                   	push   edx
c0012981:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012988:	51                   	push   ecx
c0012989:	6a 00                	push   0x0
c001298b:	6a 1f                	push   0x1f
c001298d:	55                   	push   ebp
c001298e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012991:	83 c4 1c             	add    esp,0x1c
c0012994:	6a 09                	push   0x9
c0012996:	68 0e ec 01 c0       	push   0xc001ec0e
c001299b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00129a2:	51                   	push   ecx
c00129a3:	e8 e8 d9 fe ff       	call   c0000390 <memcmp>
c00129a8:	83 c4 10             	add    esp,0x10
c00129ab:	85 c0                	test   eax,eax
c00129ad:	75 21                	jne    c00129d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00129af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00129b7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00129bb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00129c2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00129c9:	89 d0                	mov    eax,edx
c00129cb:	40                   	inc    eax
c00129cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129d0:	50                   	push   eax
c00129d1:	6a 09                	push   0x9
c00129d3:	68 18 ec 01 c0       	push   0xc001ec18
c00129d8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00129df:	50                   	push   eax
c00129e0:	e8 ab d9 fe ff       	call   c0000390 <memcmp>
c00129e5:	83 c4 10             	add    esp,0x10
c00129e8:	85 c0                	test   eax,eax
c00129ea:	75 21                	jne    c0012a0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00129ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00129f4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00129f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129fc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00129ff:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012a06:	89 d0                	mov    eax,edx
c0012a08:	40                   	inc    eax
c0012a09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a0d:	50                   	push   eax
c0012a0e:	50                   	push   eax
c0012a0f:	68 e4 eb 01 c0       	push   0xc001ebe4
c0012a14:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a1b:	50                   	push   eax
c0012a1c:	e8 bf dc fe ff       	call   c00006e0 <strcmp>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	85 c0                	test   eax,eax
c0012a26:	75 0f                	jne    c0012a37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012a28:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012a2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012a2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012a37:	50                   	push   eax
c0012a38:	50                   	push   eax
c0012a39:	68 ec eb 01 c0       	push   0xc001ebec
c0012a3e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a45:	50                   	push   eax
c0012a46:	e8 95 dc fe ff       	call   c00006e0 <strcmp>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	85 c0                	test   eax,eax
c0012a50:	75 0f                	jne    c0012a61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012a52:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012a55:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012a59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a5d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012a61:	43                   	inc    ebx
c0012a62:	e9 c6 fe ff ff       	jmp    c001292d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012a67:	31 d2                	xor    edx,edx
c0012a69:	50                   	push   eax
c0012a6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a6e:	52                   	push   edx
c0012a6f:	50                   	push   eax
c0012a70:	55                   	push   ebp
c0012a71:	e8 ea 82 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c0012a76:	58                   	pop    eax
c0012a77:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a7b:	e8 39 4d ff ff       	call   c00077b9 <malloc>
c0012a80:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a83:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a87:	31 d2                	xor    edx,edx
c0012a89:	58                   	pop    eax
c0012a8a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012a8e:	53                   	push   ebx
c0012a8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012a93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a97:	52                   	push   edx
c0012a98:	50                   	push   eax
c0012a99:	55                   	push   ebp
c0012a9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a9d:	83 c4 14             	add    esp,0x14
c0012aa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aa4:	e8 10 4d ff ff       	call   c00077b9 <malloc>
c0012aa9:	31 d2                	xor    edx,edx
c0012aab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012aaf:	83 c4 0c             	add    esp,0xc
c0012ab2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ab6:	52                   	push   edx
c0012ab7:	50                   	push   eax
c0012ab8:	55                   	push   ebp
c0012ab9:	e8 a2 82 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c0012abe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012ac1:	31 d2                	xor    edx,edx
c0012ac3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ac6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012aca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ace:	52                   	push   edx
c0012acf:	50                   	push   eax
c0012ad0:	55                   	push   ebp
c0012ad1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012ad4:	83 c4 20             	add    esp,0x20
c0012ad7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012adf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ae3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012ae7:	0f 84 0b 03 00 00    	je     c0012df8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012aed:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012af4:	31 d2                	xor    edx,edx
c0012af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012afa:	c1 e8 03             	shr    eax,0x3
c0012afd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012b01:	51                   	push   ecx
c0012b02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b06:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012b0a:	52                   	push   edx
c0012b0b:	50                   	push   eax
c0012b0c:	55                   	push   ebp
c0012b0d:	e8 4e 82 ff ff       	call   c000ad60 <File::seek(unsigned long long)>
c0012b12:	5b                   	pop    ebx
c0012b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b17:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012b1e:	e8 96 4c ff ff       	call   c00077b9 <malloc>
c0012b23:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012b26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b2a:	31 d2                	xor    edx,edx
c0012b2c:	5e                   	pop    esi
c0012b2d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012b31:	50                   	push   eax
c0012b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b3a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012b41:	52                   	push   edx
c0012b42:	50                   	push   eax
c0012b43:	55                   	push   ebp
c0012b44:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012b47:	83 c4 20             	add    esp,0x20
c0012b4a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012b52:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012b56:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012b5a:	0f 8d 7c 02 00 00    	jge    c0012ddc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012b60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b68:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012b6d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012b70:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012b74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b78:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012b7c:	89 d8                	mov    eax,ebx
c0012b7e:	c1 e8 08             	shr    eax,0x8
c0012b81:	89 c6                	mov    esi,eax
c0012b83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b87:	c1 e6 04             	shl    esi,0x4
c0012b8a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012b8e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012b91:	85 d2                	test   edx,edx
c0012b93:	0f 85 bf 00 00 00    	jne    c0012c58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b99:	83 ec 0c             	sub    esp,0xc
c0012b9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ba0:	03 06                	add    eax,DWORD PTR [esi]
c0012ba2:	50                   	push   eax
c0012ba3:	e8 4b f8 ff ff       	call   c00123f3 <Thr::getAddressOfKernelSymbol(char const*)>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	89 c2                	mov    edx,eax
c0012bad:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012bb2:	85 c0                	test   eax,eax
c0012bb4:	0f 85 9e 00 00 00    	jne    c0012c58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012bba:	83 ec 0c             	sub    esp,0xc
c0012bbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bc1:	03 06                	add    eax,DWORD PTR [esi]
c0012bc3:	50                   	push   eax
c0012bc4:	e8 77 d8 ff ff       	call   c0010440 <KeResolveCompatibilitySymbol(char*)>
c0012bc9:	83 c4 10             	add    esp,0x10
c0012bcc:	89 c2                	mov    edx,eax
c0012bce:	85 c0                	test   eax,eax
c0012bd0:	0f 85 82 00 00 00    	jne    c0012c58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012bd6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012bda:	50                   	push   eax
c0012bdb:	50                   	push   eax
c0012bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012be0:	03 06                	add    eax,DWORD PTR [esi]
c0012be2:	50                   	push   eax
c0012be3:	68 22 ec 01 c0       	push   0xc001ec22
c0012be8:	e8 80 7a ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0012bed:	58                   	pop    eax
c0012bee:	5a                   	pop    edx
c0012bef:	68 3c ec 01 c0       	push   0xc001ec3c
c0012bf4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bfb:	50                   	push   eax
c0012bfc:	e8 ff d9 fe ff       	call   c0000600 <strcpy>
c0012c01:	59                   	pop    ecx
c0012c02:	58                   	pop    eax
c0012c03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012c07:	03 06                	add    eax,DWORD PTR [esi]
c0012c09:	50                   	push   eax
c0012c0a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c11:	50                   	push   eax
c0012c12:	e8 a9 db fe ff       	call   c00007c0 <strcat>
c0012c17:	58                   	pop    eax
c0012c18:	5a                   	pop    edx
c0012c19:	68 d2 ec 01 c0       	push   0xc001ecd2
c0012c1e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c25:	50                   	push   eax
c0012c26:	e8 95 db fe ff       	call   c00007c0 <strcat>
c0012c2b:	83 c4 10             	add    esp,0x10
c0012c2e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c33:	0f 84 5d 01 00 00    	je     c0012d96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c39:	83 ec 0c             	sub    esp,0xc
c0012c3c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c43:	50                   	push   eax
c0012c44:	e8 a6 d6 ff ff       	call   c00102ef <KePanic(char const*)>
c0012c49:	83 c4 10             	add    esp,0x10
c0012c4c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012c50:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012c54:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012c58:	80 fb 01             	cmp    bl,0x1
c0012c5b:	0f 85 88 00 00 00    	jne    c0012ce9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012c61:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012c68:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012c6c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012c70:	01 ce                	add    esi,ecx
c0012c72:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c78:	0f 94 c0             	sete   al
c0012c7b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c81:	0f 94 c3             	sete   bl
c0012c84:	09 c3                	or     ebx,eax
c0012c86:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c88:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c8d:	74 41                	je     c0012cd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012c8f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c92:	84 db                	test   bl,bl
c0012c94:	75 15                	jne    c0012cab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012c96:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c9a:	66 83 f8 0c          	cmp    ax,0xc
c0012c9e:	76 05                	jbe    c0012ca5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012ca0:	b8 0c 00 00 00       	mov    eax,0xc
c0012ca5:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012ca9:	76 37                	jbe    c0012ce2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012cab:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012caf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012cb4:	0f 84 dc 00 00 00    	je     c0012d96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012cba:	83 ec 0c             	sub    esp,0xc
c0012cbd:	68 53 ec 01 c0       	push   0xc001ec53
c0012cc2:	e8 28 d6 ff ff       	call   c00102ef <KePanic(char const*)>
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012cce:	eb 12                	jmp    c0012ce2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012cd0:	01 c1                	add    ecx,eax
c0012cd2:	84 db                	test   bl,bl
c0012cd4:	75 0c                	jne    c0012ce2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012cd6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012cda:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012cde:	77 02                	ja     c0012ce2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ce0:	01 d1                	add    ecx,edx
c0012ce2:	89 0e                	mov    DWORD PTR [esi],ecx
c0012ce4:	e9 ea 00 00 00       	jmp    c0012dd3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ce9:	80 fb 02             	cmp    bl,0x2
c0012cec:	75 7c                	jne    c0012d6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012cee:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012cf5:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012cf9:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012cfd:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012d03:	74 20                	je     c0012d25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012d05:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012d0b:	74 18                	je     c0012d25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012d0d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012d11:	b9 0a 00 00 00       	mov    ecx,0xa
c0012d16:	66 83 f8 0e          	cmp    ax,0xe
c0012d1a:	77 03                	ja     c0012d1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012d1c:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012d1f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012d23:	76 1f                	jbe    c0012d44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012d25:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012d29:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012d2e:	74 66                	je     c0012d96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012d30:	83 ec 0c             	sub    esp,0xc
c0012d33:	68 6f ec 01 c0       	push   0xc001ec6f
c0012d38:	e8 b2 d5 ff ff       	call   c00102ef <KePanic(char const*)>
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012d44:	8b 06                	mov    eax,DWORD PTR [esi]
c0012d46:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012d4b:	74 13                	je     c0012d60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012d4d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012d51:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012d58:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012d5c:	01 c8                	add    eax,ecx
c0012d5e:	eb 04                	jmp    c0012d64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012d60:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012d64:	01 c2                	add    edx,eax
c0012d66:	89 16                	mov    DWORD PTR [esi],edx
c0012d68:	eb 69                	jmp    c0012dd3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012d6a:	0f b6 db             	movzx  ebx,bl
c0012d6d:	50                   	push   eax
c0012d6e:	50                   	push   eax
c0012d6f:	53                   	push   ebx
c0012d70:	68 8b ec 01 c0       	push   0xc001ec8b
c0012d75:	e8 f3 78 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0012d7a:	83 c4 10             	add    esp,0x10
c0012d7d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012d82:	74 12                	je     c0012d96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012d84:	83 ec 0c             	sub    esp,0xc
c0012d87:	68 96 ec 01 c0       	push   0xc001ec96
c0012d8c:	e8 5e d5 ff ff       	call   c00102ef <KePanic(char const*)>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	eb 3d                	jmp    c0012dd3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012d96:	83 ec 0c             	sub    esp,0xc
c0012d99:	55                   	push   ebp
c0012d9a:	e8 61 7f ff ff       	call   c000ad00 <File::close()>
c0012d9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012da2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012da5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012da8:	59                   	pop    ecx
c0012da9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dad:	e8 17 4a ff ff       	call   c00077c9 <free>
c0012db2:	5b                   	pop    ebx
c0012db3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012db7:	e8 0d 4a ff ff       	call   c00077c9 <free>
c0012dbc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012dbf:	e8 05 4a ff ff       	call   c00077c9 <free>
c0012dc4:	5e                   	pop    esi
c0012dc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dc9:	e8 fb 49 ff ff       	call   c00077c9 <free>
c0012dce:	83 c4 10             	add    esp,0x10
c0012dd1:	eb 21                	jmp    c0012df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012dd3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012dd7:	e9 76 fd ff ff       	jmp    c0012b52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012ddc:	83 ec 0c             	sub    esp,0xc
c0012ddf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012de3:	e8 e1 49 ff ff       	call   c00077c9 <free>
c0012de8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012dec:	83 c4 10             	add    esp,0x10
c0012def:	e9 eb fc ff ff       	jmp    c0012adf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012df4:	31 c0                	xor    eax,eax
c0012df6:	eb 33                	jmp    c0012e2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012df8:	83 ec 0c             	sub    esp,0xc
c0012dfb:	55                   	push   ebp
c0012dfc:	e8 ff 7e ff ff       	call   c000ad00 <File::close()>
c0012e01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e04:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e0a:	58                   	pop    eax
c0012e0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e0f:	e8 b5 49 ff ff       	call   c00077c9 <free>
c0012e14:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012e17:	e8 ad 49 ff ff       	call   c00077c9 <free>
c0012e1c:	5a                   	pop    edx
c0012e1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e21:	e8 a3 49 ff ff       	call   c00077c9 <free>
c0012e26:	83 c4 10             	add    esp,0x10
c0012e29:	b0 01                	mov    al,0x1
c0012e2b:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012e31:	5b                   	pop    ebx
c0012e32:	5e                   	pop    esi
c0012e33:	5f                   	pop    edi
c0012e34:	5d                   	pop    ebp
c0012e35:	c3                   	ret    

c0012e36 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012e36:	56                   	push   esi
c0012e37:	31 d2                	xor    edx,edx
c0012e39:	53                   	push   ebx
c0012e3a:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012e40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012e44:	39 d3                	cmp    ebx,edx
c0012e46:	7e 1b                	jle    c0012e63 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012e48:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012e4f:	39 c8                	cmp    eax,ecx
c0012e51:	77 0d                	ja     c0012e60 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012e53:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012e5a:	01 c6                	add    esi,eax
c0012e5c:	39 ce                	cmp    esi,ecx
c0012e5e:	77 05                	ja     c0012e65 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012e60:	42                   	inc    edx
c0012e61:	eb e1                	jmp    c0012e44 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012e63:	31 c0                	xor    eax,eax
c0012e65:	5b                   	pop    ebx
c0012e66:	5e                   	pop    esi
c0012e67:	c3                   	ret    

c0012e68 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012e68:	53                   	push   ebx
c0012e69:	31 c0                	xor    eax,eax
c0012e6b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012e6f:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012e75:	39 c3                	cmp    ebx,eax
c0012e77:	7e 22                	jle    c0012e9b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012e79:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012e80:	39 ca                	cmp    edx,ecx
c0012e82:	77 14                	ja     c0012e98 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012e84:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012e8b:	39 ca                	cmp    edx,ecx
c0012e8d:	76 09                	jbe    c0012e98 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012e8f:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012e96:	eb 05                	jmp    c0012e9d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012e98:	40                   	inc    eax
c0012e99:	eb da                	jmp    c0012e75 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012e9b:	31 c0                	xor    eax,eax
c0012e9d:	5b                   	pop    ebx
c0012e9e:	c3                   	ret    

c0012e9f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012e9f:	53                   	push   ebx
c0012ea0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ea4:	53                   	push   ebx
c0012ea5:	e8 8c ff ff ff       	call   c0012e36 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012eaa:	5a                   	pop    edx
c0012eab:	31 d2                	xor    edx,edx
c0012ead:	85 c0                	test   eax,eax
c0012eaf:	74 04                	je     c0012eb5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012eb1:	89 da                	mov    edx,ebx
c0012eb3:	29 c2                	sub    edx,eax
c0012eb5:	89 d0                	mov    eax,edx
c0012eb7:	5b                   	pop    ebx
c0012eb8:	c3                   	ret    

c0012eb9 <Thr::loadDLL(char const*, bool)>:
c0012eb9:	55                   	push   ebp
c0012eba:	57                   	push   edi
c0012ebb:	56                   	push   esi
c0012ebc:	53                   	push   ebx
c0012ebd:	81 ec 34 01 00 00    	sub    esp,0x134
c0012ec3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012eca:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012ed1:	56                   	push   esi
c0012ed2:	68 ae ec 01 c0       	push   0xc001ecae
c0012ed7:	e8 91 77 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0012edc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012ee3:	e8 d1 48 ff ff       	call   c00077b9 <malloc>
c0012ee8:	83 c4 0c             	add    esp,0xc
c0012eeb:	89 c3                	mov    ebx,eax
c0012eed:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012ef3:	56                   	push   esi
c0012ef4:	50                   	push   eax
c0012ef5:	e8 e8 7c ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0012efa:	83 c4 10             	add    esp,0x10
c0012efd:	85 db                	test   ebx,ebx
c0012eff:	75 3c                	jne    c0012f3d <Thr::loadDLL(char const*, bool)+0x84>
c0012f01:	89 f8                	mov    eax,edi
c0012f03:	84 c0                	test   al,al
c0012f05:	0f 84 d2 01 00 00    	je     c00130dd <Thr::loadDLL(char const*, bool)+0x224>
c0012f0b:	55                   	push   ebp
c0012f0c:	55                   	push   ebp
c0012f0d:	68 bf ec 01 c0       	push   0xc001ecbf
c0012f12:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012f16:	55                   	push   ebp
c0012f17:	e8 e4 d6 fe ff       	call   c0000600 <strcpy>
c0012f1c:	58                   	pop    eax
c0012f1d:	5a                   	pop    edx
c0012f1e:	56                   	push   esi
c0012f1f:	55                   	push   ebp
c0012f20:	e8 9b d8 fe ff       	call   c00007c0 <strcat>
c0012f25:	59                   	pop    ecx
c0012f26:	58                   	pop    eax
c0012f27:	68 d2 ec 01 c0       	push   0xc001ecd2
c0012f2c:	55                   	push   ebp
c0012f2d:	e8 8e d8 fe ff       	call   c00007c0 <strcat>
c0012f32:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f35:	e8 b5 d3 ff ff       	call   c00102ef <KePanic(char const*)>
c0012f3a:	83 c4 10             	add    esp,0x10
c0012f3d:	51                   	push   ecx
c0012f3e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012f42:	50                   	push   eax
c0012f43:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f47:	50                   	push   eax
c0012f48:	53                   	push   ebx
c0012f49:	e8 00 80 ff ff       	call   c000af4e <File::stat(unsigned long long*, bool*)>
c0012f4e:	83 c4 10             	add    esp,0x10
c0012f51:	85 db                	test   ebx,ebx
c0012f53:	74 0c                	je     c0012f61 <Thr::loadDLL(char const*, bool)+0xa8>
c0012f55:	83 ec 0c             	sub    esp,0xc
c0012f58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f5a:	53                   	push   ebx
c0012f5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f5e:	83 c4 10             	add    esp,0x10
c0012f61:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012f66:	75 0a                	jne    c0012f72 <Thr::loadDLL(char const*, bool)+0xb9>
c0012f68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f6c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012f70:	75 3c                	jne    c0012fae <Thr::loadDLL(char const*, bool)+0xf5>
c0012f72:	89 f8                	mov    eax,edi
c0012f74:	84 c0                	test   al,al
c0012f76:	0f 84 49 01 00 00    	je     c00130c5 <Thr::loadDLL(char const*, bool)+0x20c>
c0012f7c:	51                   	push   ecx
c0012f7d:	51                   	push   ecx
c0012f7e:	68 bf ec 01 c0       	push   0xc001ecbf
c0012f83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012f87:	53                   	push   ebx
c0012f88:	e8 73 d6 fe ff       	call   c0000600 <strcpy>
c0012f8d:	5d                   	pop    ebp
c0012f8e:	58                   	pop    eax
c0012f8f:	56                   	push   esi
c0012f90:	53                   	push   ebx
c0012f91:	e8 2a d8 fe ff       	call   c00007c0 <strcat>
c0012f96:	58                   	pop    eax
c0012f97:	5a                   	pop    edx
c0012f98:	68 d2 ec 01 c0       	push   0xc001ecd2
c0012f9d:	53                   	push   ebx
c0012f9e:	e8 1d d8 fe ff       	call   c00007c0 <strcat>
c0012fa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012fa6:	e8 44 d3 ff ff       	call   c00102ef <KePanic(char const*)>
c0012fab:	83 c4 10             	add    esp,0x10
c0012fae:	52                   	push   edx
c0012faf:	6a 03                	push   0x3
c0012fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fb5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012fb9:	05 ff 0f 00 00       	add    eax,0xfff
c0012fbe:	83 d2 00             	adc    edx,0x0
c0012fc1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012fc5:	50                   	push   eax
c0012fc6:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012fcc:	e8 2b 6a ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0012fd1:	59                   	pop    ecx
c0012fd2:	89 c3                	mov    ebx,eax
c0012fd4:	5d                   	pop    ebp
c0012fd5:	50                   	push   eax
c0012fd6:	68 76 d8 01 c0       	push   0xc001d876
c0012fdb:	e8 8d 76 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0012fe0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fe3:	e8 58 d5 fe ff       	call   c0000540 <strlen>
c0012fe8:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012fee:	40                   	inc    eax
c0012fef:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ff2:	e8 c2 47 ff ff       	call   c00077b9 <malloc>
c0012ff7:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012ffe:	58                   	pop    eax
c0012fff:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0013004:	5a                   	pop    edx
c0013005:	56                   	push   esi
c0013006:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c001300d:	e8 ee d5 fe ff       	call   c0000600 <strcpy>
c0013012:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0013017:	8d 50 01             	lea    edx,[eax+0x1]
c001301a:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0013021:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0013027:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001302b:	83 c4 0c             	add    esp,0xc
c001302e:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0013035:	6a 01                	push   0x1
c0013037:	53                   	push   ebx
c0013038:	56                   	push   esi
c0013039:	e8 c2 f6 ff ff       	call   c0012700 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001303e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013042:	83 c4 10             	add    esp,0x10
c0013045:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001304a:	0f 85 89 00 00 00    	jne    c00130d9 <Thr::loadDLL(char const*, bool)+0x220>
c0013050:	89 f8                	mov    eax,edi
c0013052:	84 c0                	test   al,al
c0013054:	74 73                	je     c00130c9 <Thr::loadDLL(char const*, bool)+0x210>
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	68 d4 ec 01 c0       	push   0xc001ecd4
c001305e:	e8 8c d2 ff ff       	call   c00102ef <KePanic(char const*)>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	eb 61                	jmp    c00130c9 <Thr::loadDLL(char const*, bool)+0x210>
c0013068:	50                   	push   eax
c0013069:	50                   	push   eax
c001306a:	89 e8                	mov    eax,ebp
c001306c:	c1 e0 0c             	shl    eax,0xc
c001306f:	01 d8                	add    eax,ebx
c0013071:	50                   	push   eax
c0013072:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0013078:	e8 dd 64 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c001307d:	83 c4 10             	add    esp,0x10
c0013080:	8b 00                	mov    eax,DWORD PTR [eax]
c0013082:	a8 60                	test   al,0x60
c0013084:	75 11                	jne    c0013097 <Thr::loadDLL(char const*, bool)+0x1de>
c0013086:	83 ec 0c             	sub    esp,0xc
c0013089:	25 00 f0 ff ff       	and    eax,0xfffff000
c001308e:	50                   	push   eax
c001308f:	e8 9f 49 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0013094:	83 c4 10             	add    esp,0x10
c0013097:	45                   	inc    ebp
c0013098:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001309c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00130a0:	05 ff 0f 00 00       	add    eax,0xfff
c00130a5:	bf 00 00 00 00       	mov    edi,0x0
c00130aa:	83 d2 00             	adc    edx,0x0
c00130ad:	0f ac d0 0c          	shrd   eax,edx,0xc
c00130b1:	c1 ea 0c             	shr    edx,0xc
c00130b4:	39 c5                	cmp    ebp,eax
c00130b6:	89 d1                	mov    ecx,edx
c00130b8:	89 f8                	mov    eax,edi
c00130ba:	19 c8                	sbb    eax,ecx
c00130bc:	72 aa                	jb     c0013068 <Thr::loadDLL(char const*, bool)+0x1af>
c00130be:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00130c3:	75 18                	jne    c00130dd <Thr::loadDLL(char const*, bool)+0x224>
c00130c5:	31 db                	xor    ebx,ebx
c00130c7:	eb 14                	jmp    c00130dd <Thr::loadDLL(char const*, bool)+0x224>
c00130c9:	83 ec 0c             	sub    esp,0xc
c00130cc:	68 f3 ec 01 c0       	push   0xc001ecf3
c00130d1:	e8 19 d2 ff ff       	call   c00102ef <KePanic(char const*)>
c00130d6:	83 c4 10             	add    esp,0x10
c00130d9:	31 ed                	xor    ebp,ebp
c00130db:	eb bb                	jmp    c0013098 <Thr::loadDLL(char const*, bool)+0x1df>
c00130dd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00130e3:	89 d8                	mov    eax,ebx
c00130e5:	5b                   	pop    ebx
c00130e6:	5e                   	pop    esi
c00130e7:	5f                   	pop    edi
c00130e8:	5d                   	pop    ebp
c00130e9:	c3                   	ret    

c00130ea <Thr::executeDLL(unsigned long, void*)>:
c00130ea:	56                   	push   esi
c00130eb:	53                   	push   ebx
c00130ec:	52                   	push   edx
c00130ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00130f5:	85 db                	test   ebx,ebx
c00130f7:	75 10                	jne    c0013109 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00130f9:	83 ec 0c             	sub    esp,0xc
c00130fc:	68 0f ed 01 c0       	push   0xc001ed0f
c0013101:	e8 e9 d1 ff ff       	call   c00102ef <KePanic(char const*)>
c0013106:	83 c4 10             	add    esp,0x10
c0013109:	50                   	push   eax
c001310a:	50                   	push   eax
c001310b:	53                   	push   ebx
c001310c:	68 39 ed 01 c0       	push   0xc001ed39
c0013111:	e8 57 75 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0013116:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001311a:	89 d8                	mov    eax,ebx
c001311c:	83 c4 14             	add    esp,0x14
c001311f:	5b                   	pop    ebx
c0013120:	5e                   	pop    esi
c0013121:	ff e0                	jmp    eax
c0013123:	90                   	nop

c0013124 <userModeEntryPoint(void*)>:
c0013124:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013129:	48                   	dec    eax
c001312a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001312f:	75 03                	jne    c0013134 <userModeEntryPoint(void*)+0x10>
c0013131:	fb                   	sti    
c0013132:	66 90                	xchg   ax,ax
c0013134:	fb                   	sti    
c0013135:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001313a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001313d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013143:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013147:	e9 f3 d0 fe ff       	jmp    c000023f <goToUsermode>

c001314c <changeTSS>:
c001314c:	83 ec 14             	sub    esp,0x14
c001314f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013154:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013157:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001315c:	c1 e2 15             	shl    edx,0x15
c001315f:	29 d0                	sub    eax,edx
c0013161:	50                   	push   eax
c0013162:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0013167:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001316d:	05 7c 11 00 00       	add    eax,0x117c
c0013172:	50                   	push   eax
c0013173:	e8 60 5a ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c0013178:	83 c4 1c             	add    esp,0x1c
c001317b:	c3                   	ret    

c001317c <switchToThread(ThreadControlBlock*)>:
c001317c:	57                   	push   edi
c001317d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013182:	56                   	push   esi
c0013183:	85 c0                	test   eax,eax
c0013185:	53                   	push   ebx
c0013186:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001318a:	0f 85 90 00 00 00    	jne    c0013220 <switchToThread(ThreadControlBlock*)+0xa4>
c0013190:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013193:	80 fa ff             	cmp    dl,0xff
c0013196:	0f 84 80 00 00 00    	je     c001321c <switchToThread(ThreadControlBlock*)+0xa0>
c001319c:	81 e2 ff 00 00 00    	and    edx,0xff
c00131a2:	b8 00 04 00 00       	mov    eax,0x400
c00131a7:	29 d0                	sub    eax,edx
c00131a9:	d1 f8                	sar    eax,1
c00131ab:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00131ae:	66 90                	xchg   ax,ax
c00131b0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00131b3:	e8 1d 26 00 00       	call   c00157d5 <HalQueryPerformanceCounter()>
c00131b8:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00131bd:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c00131c3:	89 c6                	mov    esi,eax
c00131c5:	89 d7                	mov    edi,edx
c00131c7:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c00131cd:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c00131d2:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c00131d8:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c00131de:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c00131e4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00131ea:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c00131f0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00131f3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00131f6:	01 c6                	add    esi,eax
c00131f8:	11 d7                	adc    edi,edx
c00131fa:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00131fd:	83 ec 0c             	sub    esp,0xc
c0013200:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013203:	53                   	push   ebx
c0013204:	e8 6e d0 fe ff       	call   c0000277 <switchToThreadASM>
c0013209:	0f 20 c0             	mov    eax,cr0
c001320c:	83 c8 08             	or     eax,0x8
c001320f:	0f 22 c0             	mov    cr0,eax
c0013212:	83 c4 10             	add    esp,0x10
c0013215:	5b                   	pop    ebx
c0013216:	5e                   	pop    esi
c0013217:	5f                   	pop    edi
c0013218:	c3                   	ret    
c0013219:	8d 76 00             	lea    esi,[esi+0x0]
c001321c:	31 c0                	xor    eax,eax
c001321e:	eb 90                	jmp    c00131b0 <switchToThread(ThreadControlBlock*)+0x34>
c0013220:	5b                   	pop    ebx
c0013221:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c001322b:	5e                   	pop    esi
c001322c:	5f                   	pop    edi
c001322d:	c3                   	ret    
c001322e:	66 90                	xchg   ax,ax

c0013230 <Process::addArgs(char**)>:
c0013230:	57                   	push   edi
c0013231:	56                   	push   esi
c0013232:	53                   	push   ebx
c0013233:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013237:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001323b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013245:	85 ff                	test   edi,edi
c0013247:	74 43                	je     c001328c <Process::addArgs(char**)+0x5c>
c0013249:	8b 07                	mov    eax,DWORD PTR [edi]
c001324b:	85 c0                	test   eax,eax
c001324d:	74 3d                	je     c001328c <Process::addArgs(char**)+0x5c>
c001324f:	31 db                	xor    ebx,ebx
c0013251:	8d 76 00             	lea    esi,[esi+0x0]
c0013254:	83 ec 0c             	sub    esp,0xc
c0013257:	50                   	push   eax
c0013258:	e8 e3 d2 fe ff       	call   c0000540 <strlen>
c001325d:	40                   	inc    eax
c001325e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013261:	e8 53 45 ff ff       	call   c00077b9 <malloc>
c0013266:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001326d:	5a                   	pop    edx
c001326e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013271:	59                   	pop    ecx
c0013272:	43                   	inc    ebx
c0013273:	52                   	push   edx
c0013274:	50                   	push   eax
c0013275:	e8 86 d3 fe ff       	call   c0000600 <strcpy>
c001327a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013280:	83 c4 10             	add    esp,0x10
c0013283:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013286:	85 c0                	test   eax,eax
c0013288:	75 ca                	jne    c0013254 <Process::addArgs(char**)+0x24>
c001328a:	66 90                	xchg   ax,ax
c001328c:	5b                   	pop    ebx
c001328d:	5e                   	pop    esi
c001328e:	5f                   	pop    edi
c001328f:	c3                   	ret    

c0013290 <Process::Process(char const*, Process*, char**)>:
c0013290:	56                   	push   esi
c0013291:	53                   	push   ebx
c0013292:	83 ec 14             	sub    esp,0x14
c0013295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013299:	05 0c 02 00 00       	add    eax,0x20c
c001329e:	bb 07 00 00 00       	mov    ebx,0x7
c00132a3:	89 c6                	mov    esi,eax
c00132a5:	8d 76 00             	lea    esi,[esi+0x0]
c00132a8:	85 db                	test   ebx,ebx
c00132aa:	78 14                	js     c00132c0 <Process::Process(char const*, Process*, char**)+0x30>
c00132ac:	83 ec 0c             	sub    esp,0xc
c00132af:	56                   	push   esi
c00132b0:	e8 97 98 00 00       	call   c001cb4c <ThreadControlBlock::ThreadControlBlock()>
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	83 c6 5f             	add    esi,0x5f
c00132bb:	4b                   	dec    ebx
c00132bc:	eb ea                	jmp    c00132a8 <Process::Process(char const*, Process*, char**)+0x18>
c00132be:	66 90                	xchg   ax,ax
c00132c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00132cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132cf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00132d6:	83 ec 0c             	sub    esp,0xc
c00132d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132dd:	e8 02 ce ff ff       	call   c00100e4 <Krnl::newProcessEnv(Process*)>
c00132e2:	83 c4 10             	add    esp,0x10
c00132e5:	89 c2                	mov    edx,eax
c00132e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132eb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00132f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132f5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00132fe:	a1 ec fc 01 c0       	mov    eax,ds:0xc001fcec
c0013303:	8d 50 01             	lea    edx,[eax+0x1]
c0013306:	89 15 ec fc 01 c0    	mov    DWORD PTR ds:0xc001fcec,edx
c001330c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013310:	89 02                	mov    DWORD PTR [edx],eax
c0013312:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001331a:	83 ec 0c             	sub    esp,0xc
c001331d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013321:	e8 93 44 ff ff       	call   c00077b9 <malloc>
c0013326:	83 c4 10             	add    esp,0x10
c0013329:	89 c3                	mov    ebx,eax
c001332b:	83 ec 08             	sub    esp,0x8
c001332e:	6a 00                	push   0x0
c0013330:	53                   	push   ebx
c0013331:	e8 e8 6a ff ff       	call   c0009e1e <VAS::VAS(bool)>
c0013336:	83 c4 10             	add    esp,0x10
c0013339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001333d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013343:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013347:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013355:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013359:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001335f:	e8 f6 d2 ff ff       	call   c001065a <KeInitSignals()>
c0013364:	89 c2                	mov    edx,eax
c0013366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001336a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013370:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013374:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001337a:	85 c0                	test   eax,eax
c001337c:	74 42                	je     c00133c0 <Process::Process(char const*, Process*, char**)+0x130>
c001337e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013382:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013388:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001338e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013392:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001339c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00133a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133ac:	05 0c 01 00 00       	add    eax,0x10c
c00133b1:	83 ec 08             	sub    esp,0x8
c00133b4:	52                   	push   edx
c00133b5:	50                   	push   eax
c00133b6:	e8 45 d2 fe ff       	call   c0000600 <strcpy>
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	eb 64                	jmp    c0013424 <Process::Process(char const*, Process*, char**)+0x194>
c00133c0:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00133c8:	83 ec 0c             	sub    esp,0xc
c00133cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00133cf:	e8 e5 43 ff ff       	call   c00077b9 <malloc>
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	89 c3                	mov    ebx,eax
c00133d9:	83 ec 08             	sub    esp,0x8
c00133dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133e0:	53                   	push   ebx
c00133e1:	e8 14 55 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00133e6:	83 c4 10             	add    esp,0x10
c00133e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133ed:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00133f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00133fd:	83 ec 0c             	sub    esp,0xc
c0013400:	50                   	push   eax
c0013401:	e8 94 4d ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013406:	83 c4 10             	add    esp,0x10
c0013409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001340d:	05 0c 01 00 00       	add    eax,0x10c
c0013412:	83 ec 08             	sub    esp,0x8
c0013415:	68 58 ed 01 c0       	push   0xc001ed58
c001341a:	50                   	push   eax
c001341b:	e8 e0 d1 fe ff       	call   c0000600 <strcpy>
c0013420:	83 c4 10             	add    esp,0x10
c0013423:	90                   	nop
c0013424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013428:	83 c0 0c             	add    eax,0xc
c001342b:	83 ec 08             	sub    esp,0x8
c001342e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013432:	50                   	push   eax
c0013433:	e8 c8 d1 fe ff       	call   c0000600 <strcpy>
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	83 ec 08             	sub    esp,0x8
c001343e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013442:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013446:	e8 e5 fd ff ff       	call   c0013230 <Process::addArgs(char**)>
c001344b:	83 c4 10             	add    esp,0x10
c001344e:	83 ec 08             	sub    esp,0x8
c0013451:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013455:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013459:	e8 6c ed ff ff       	call   c00121ca <Thr::loadProgramIntoMemory(Process*, char const*)>
c001345e:	83 c4 10             	add    esp,0x10
c0013461:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013465:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013469:	83 f0 01             	xor    eax,0x1
c001346c:	88 c2                	mov    dl,al
c001346e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013472:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013478:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001347c:	25 ff 00 00 00       	and    eax,0xff
c0013481:	83 ec 08             	sub    esp,0x8
c0013484:	50                   	push   eax
c0013485:	68 b0 ed 01 c0       	push   0xc001edb0
c001348a:	e8 de 71 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001348f:	83 c4 10             	add    esp,0x10
c0013492:	90                   	nop
c0013493:	83 c4 14             	add    esp,0x14
c0013496:	5b                   	pop    ebx
c0013497:	5e                   	pop    esi
c0013498:	c3                   	ret    
c0013499:	90                   	nop
c001349a:	66 90                	xchg   ax,ax

c001349c <Process::Process(bool, char const*, Process*, char**)>:
c001349c:	56                   	push   esi
c001349d:	53                   	push   ebx
c001349e:	83 ec 24             	sub    esp,0x24
c00134a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00134a5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00134a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ad:	05 0c 02 00 00       	add    eax,0x20c
c00134b2:	bb 07 00 00 00       	mov    ebx,0x7
c00134b7:	89 c6                	mov    esi,eax
c00134b9:	8d 76 00             	lea    esi,[esi+0x0]
c00134bc:	85 db                	test   ebx,ebx
c00134be:	78 14                	js     c00134d4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00134c0:	83 ec 0c             	sub    esp,0xc
c00134c3:	56                   	push   esi
c00134c4:	e8 83 96 00 00       	call   c001cb4c <ThreadControlBlock::ThreadControlBlock()>
c00134c9:	83 c4 10             	add    esp,0x10
c00134cc:	83 c6 5f             	add    esi,0x5f
c00134cf:	4b                   	dec    ebx
c00134d0:	eb ea                	jmp    c00134bc <Process::Process(bool, char const*, Process*, char**)+0x20>
c00134d2:	66 90                	xchg   ax,ax
c00134d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134d8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00134df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00134ea:	83 ec 0c             	sub    esp,0xc
c00134ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00134f1:	e8 ee cb ff ff       	call   c00100e4 <Krnl::newProcessEnv(Process*)>
c00134f6:	83 c4 10             	add    esp,0x10
c00134f9:	89 c2                	mov    edx,eax
c00134fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ff:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013509:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013512:	a1 ec fc 01 c0       	mov    eax,ds:0xc001fcec
c0013517:	8d 50 01             	lea    edx,[eax+0x1]
c001351a:	89 15 ec fc 01 c0    	mov    DWORD PTR ds:0xc001fcec,edx
c0013520:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013524:	89 02                	mov    DWORD PTR [edx],eax
c0013526:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001352e:	83 ec 0c             	sub    esp,0xc
c0013531:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013535:	e8 7f 42 ff ff       	call   c00077b9 <malloc>
c001353a:	83 c4 10             	add    esp,0x10
c001353d:	89 c3                	mov    ebx,eax
c001353f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013543:	25 ff 00 00 00       	and    eax,0xff
c0013548:	83 ec 08             	sub    esp,0x8
c001354b:	50                   	push   eax
c001354c:	53                   	push   ebx
c001354d:	e8 cc 68 ff ff       	call   c0009e1e <VAS::VAS(bool)>
c0013552:	83 c4 10             	add    esp,0x10
c0013555:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013559:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001355f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013563:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001356d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013571:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013575:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001357b:	e8 da d0 ff ff       	call   c001065a <KeInitSignals()>
c0013580:	89 c2                	mov    edx,eax
c0013582:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013586:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001358c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013590:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013596:	85 c0                	test   eax,eax
c0013598:	74 42                	je     c00135dc <Process::Process(bool, char const*, Process*, char**)+0x140>
c001359a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001359e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135a4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00135aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135ae:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00135b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135b8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135be:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135c8:	05 0c 01 00 00       	add    eax,0x10c
c00135cd:	83 ec 08             	sub    esp,0x8
c00135d0:	52                   	push   edx
c00135d1:	50                   	push   eax
c00135d2:	e8 29 d0 fe ff       	call   c0000600 <strcpy>
c00135d7:	83 c4 10             	add    esp,0x10
c00135da:	eb 64                	jmp    c0013640 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00135dc:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00135e4:	83 ec 0c             	sub    esp,0xc
c00135e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00135eb:	e8 c9 41 ff ff       	call   c00077b9 <malloc>
c00135f0:	83 c4 10             	add    esp,0x10
c00135f3:	89 c3                	mov    ebx,eax
c00135f5:	83 ec 08             	sub    esp,0x8
c00135f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00135fc:	53                   	push   ebx
c00135fd:	e8 f8 52 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013602:	83 c4 10             	add    esp,0x10
c0013605:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013609:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001360f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013613:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013619:	83 ec 0c             	sub    esp,0xc
c001361c:	50                   	push   eax
c001361d:	e8 78 4b ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013622:	83 c4 10             	add    esp,0x10
c0013625:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013629:	05 0c 01 00 00       	add    eax,0x10c
c001362e:	83 ec 08             	sub    esp,0x8
c0013631:	68 58 ed 01 c0       	push   0xc001ed58
c0013636:	50                   	push   eax
c0013637:	e8 c4 cf fe ff       	call   c0000600 <strcpy>
c001363c:	83 c4 10             	add    esp,0x10
c001363f:	90                   	nop
c0013640:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013644:	83 c0 0c             	add    eax,0xc
c0013647:	83 ec 08             	sub    esp,0x8
c001364a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001364e:	50                   	push   eax
c001364f:	e8 ac cf fe ff       	call   c0000600 <strcpy>
c0013654:	83 c4 10             	add    esp,0x10
c0013657:	83 ec 08             	sub    esp,0x8
c001365a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001365e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013662:	e8 c9 fb ff ff       	call   c0013230 <Process::addArgs(char**)>
c0013667:	83 c4 10             	add    esp,0x10
c001366a:	90                   	nop
c001366b:	83 c4 24             	add    esp,0x24
c001366e:	5b                   	pop    ebx
c001366f:	5e                   	pop    esi
c0013670:	c3                   	ret    
c0013671:	8d 76 00             	lea    esi,[esi+0x0]

c0013674 <taskStartupFunction>:
c0013674:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013679:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001367c:	c3                   	ret    
c001367d:	90                   	nop
c001367e:	66 90                	xchg   ax,ax

c0013680 <Semaphore::Semaphore(int)>:
c0013680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013688:	89 10                	mov    DWORD PTR [eax],edx
c001368a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001368e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013695:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013699:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00136ab:	90                   	nop
c00136ac:	c3                   	ret    
c00136ad:	90                   	nop
c00136ae:	66 90                	xchg   ax,ax

c00136b0 <Mutex::Mutex()>:
c00136b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136b4:	6a 01                	push   0x1
c00136b6:	50                   	push   eax
c00136b7:	e8 c4 ff ff ff       	call   c0013680 <Semaphore::Semaphore(int)>
c00136bc:	83 c4 08             	add    esp,0x8
c00136bf:	90                   	nop
c00136c0:	c3                   	ret    
c00136c1:	90                   	nop
c00136c2:	66 90                	xchg   ax,ax

c00136c4 <Process::createThread(void (*)(void*), void*, int)>:
c00136c4:	57                   	push   edi
c00136c5:	31 c9                	xor    ecx,ecx
c00136c7:	56                   	push   esi
c00136c8:	53                   	push   ebx
c00136c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136cd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00136d4:	89 f2                	mov    edx,esi
c00136d6:	66 90                	xchg   ax,ax
c00136d8:	31 c0                	xor    eax,eax
c00136da:	66 89 d0             	mov    ax,dx
c00136dd:	83 e2 01             	and    edx,0x1
c00136e0:	74 12                	je     c00136f4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00136e2:	d1 f8                	sar    eax,1
c00136e4:	41                   	inc    ecx
c00136e5:	89 c2                	mov    edx,eax
c00136e7:	83 f9 10             	cmp    ecx,0x10
c00136ea:	75 ec                	jne    c00136d8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00136ec:	31 db                	xor    ebx,ebx
c00136ee:	89 d8                	mov    eax,ebx
c00136f0:	5b                   	pop    ebx
c00136f1:	5e                   	pop    esi
c00136f2:	5f                   	pop    edi
c00136f3:	c3                   	ret    
c00136f4:	b8 01 00 00 00       	mov    eax,0x1
c00136f9:	d3 e0                	shl    eax,cl
c00136fb:	09 c6                	or     esi,eax
c00136fd:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013700:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013707:	01 c0                	add    eax,eax
c0013709:	01 c8                	add    eax,ecx
c001370b:	8d 04 80             	lea    eax,[eax+eax*4]
c001370e:	01 d8                	add    eax,ebx
c0013710:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013717:	75 0b                	jne    c0013724 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013719:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013723:	90                   	nop
c0013724:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001372a:	83 ec 08             	sub    esp,0x8
c001372d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013730:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013733:	01 c0                	add    eax,eax
c0013735:	01 c8                	add    eax,ecx
c0013737:	8d 3c 80             	lea    edi,[eax+eax*4]
c001373a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001373d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013743:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013749:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001374d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013753:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013759:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013760:	89 ca                	mov    edx,ecx
c0013762:	f7 da                	neg    edx
c0013764:	c1 e2 15             	shl    edx,0x15
c0013767:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001376d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013773:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013777:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013781:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013787:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001378b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013791:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001379b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00137a5:	53                   	push   ebx
c00137a6:	68 84 51 02 c0       	push   0xc0025184
c00137ab:	e8 3c 91 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	89 d8                	mov    eax,ebx
c00137b5:	5b                   	pop    ebx
c00137b6:	5e                   	pop    esi
c00137b7:	5f                   	pop    edi
c00137b8:	c3                   	ret    
c00137b9:	90                   	nop
c00137ba:	66 90                	xchg   ax,ax

c00137bc <Process::createUserThread()>:
c00137bc:	83 ec 0c             	sub    esp,0xc
c00137bf:	68 80 00 00 00       	push   0x80
c00137c4:	6a 00                	push   0x0
c00137c6:	68 24 31 01 c0       	push   0xc0013124
c00137cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137cf:	50                   	push   eax
c00137d0:	e8 ef fe ff ff       	call   c00136c4 <Process::createThread(void (*)(void*), void*, int)>
c00137d5:	83 c4 1c             	add    esp,0x1c
c00137d8:	c3                   	ret    
c00137d9:	8d 76 00             	lea    esi,[esi+0x0]

c00137dc <setupMultitasking(void (*)())>:
c00137dc:	56                   	push   esi
c00137dd:	53                   	push   ebx
c00137de:	53                   	push   ebx
c00137df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137e3:	eb 13                	jmp    c00137f8 <setupMultitasking(void (*)())+0x1c>
c00137e5:	8d 76 00             	lea    esi,[esi+0x0]
c00137e8:	83 ec 0c             	sub    esp,0xc
c00137eb:	68 84 51 02 c0       	push   0xc0025184
c00137f0:	e8 3f 90 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137f5:	83 c4 10             	add    esp,0x10
c00137f8:	83 ec 0c             	sub    esp,0xc
c00137fb:	68 84 51 02 c0       	push   0xc0025184
c0013800:	e8 0b 90 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013805:	83 c4 10             	add    esp,0x10
c0013808:	84 c0                	test   al,al
c001380a:	74 dc                	je     c00137e8 <setupMultitasking(void (*)())+0xc>
c001380c:	83 ec 0c             	sub    esp,0xc
c001380f:	68 24 07 00 00       	push   0x724
c0013814:	e8 a0 3f ff ff       	call   c00077b9 <malloc>
c0013819:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013820:	89 c3                	mov    ebx,eax
c0013822:	6a 00                	push   0x0
c0013824:	68 5c ed 01 c0       	push   0xc001ed5c
c0013829:	6a 01                	push   0x1
c001382b:	50                   	push   eax
c001382c:	e8 6b fc ff ff       	call   c001349c <Process::Process(bool, char const*, Process*, char**)>
c0013831:	83 c4 14             	add    esp,0x14
c0013834:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001383a:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c0013840:	50                   	push   eax
c0013841:	e8 b1 4b ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0013846:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001384e:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013858:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001385e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013861:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001386b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013871:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013877:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013881:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001388b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013895:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001389b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00138a1:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00138ab:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00138b1:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00138bb:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00138c1:	5a                   	pop    edx
c00138c2:	59                   	pop    ecx
c00138c3:	68 58 ed 01 c0       	push   0xc001ed58
c00138c8:	50                   	push   eax
c00138c9:	e8 32 cd fe ff       	call   c0000600 <strcpy>
c00138ce:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00138d5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00138d9:	83 c4 14             	add    esp,0x14
c00138dc:	5b                   	pop    ebx
c00138dd:	5e                   	pop    esi
c00138de:	e9 86 c9 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00138e3:	90                   	nop

c00138e4 <schedule()>:
c00138e4:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c00138ea:	85 d2                	test   edx,edx
c00138ec:	74 0e                	je     c00138fc <schedule()+0x18>
c00138ee:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00138f8:	c3                   	ret    
c00138f9:	8d 76 00             	lea    esi,[esi+0x0]
c00138fc:	53                   	push   ebx
c00138fd:	83 ec 14             	sub    esp,0x14
c0013900:	68 84 51 02 c0       	push   0xc0025184
c0013905:	e8 06 8f 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001390a:	83 c4 10             	add    esp,0x10
c001390d:	84 c0                	test   al,al
c001390f:	75 3b                	jne    c001394c <schedule()+0x68>
c0013911:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013916:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013919:	4a                   	dec    edx
c001391a:	74 38                	je     c0013954 <schedule()+0x70>
c001391c:	83 ec 0c             	sub    esp,0xc
c001391f:	68 84 51 02 c0       	push   0xc0025184
c0013924:	e8 03 8f 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013929:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013930:	89 c3                	mov    ebx,eax
c0013932:	e8 fd 8e 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013937:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001393e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013941:	e8 36 f8 ff ff       	call   c001317c <switchToThread(ThreadControlBlock*)>
c0013946:	83 c4 10             	add    esp,0x10
c0013949:	8d 76 00             	lea    esi,[esi+0x0]
c001394c:	83 c4 08             	add    esp,0x8
c001394f:	5b                   	pop    ebx
c0013950:	c3                   	ret    
c0013951:	8d 76 00             	lea    esi,[esi+0x0]
c0013954:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001395b:	83 ec 08             	sub    esp,0x8
c001395e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013963:	50                   	push   eax
c0013964:	68 84 51 02 c0       	push   0xc0025184
c0013969:	e8 7e 8f 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001396e:	83 c4 10             	add    esp,0x10
c0013971:	eb a9                	jmp    c001391c <schedule()+0x38>
c0013973:	90                   	nop

c0013974 <Semaphore::tryAcquire()>:
c0013974:	53                   	push   ebx
c0013975:	83 ec 08             	sub    esp,0x8
c0013978:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001397c:	fa                   	cli    
c001397d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013982:	8d 50 01             	lea    edx,[eax+0x1]
c0013985:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001398b:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c0013991:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013994:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c001399a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001399d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001399f:	7c 33                	jl     c00139d4 <Semaphore::tryAcquire()+0x60>
c00139a1:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c00139a7:	85 d2                	test   edx,edx
c00139a9:	75 0d                	jne    c00139b8 <Semaphore::tryAcquire()+0x44>
c00139ab:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c00139b1:	85 d2                	test   edx,edx
c00139b3:	75 6b                	jne    c0013a20 <Semaphore::tryAcquire()+0xac>
c00139b5:	8d 76 00             	lea    esi,[esi+0x0]
c00139b8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139bd:	85 c0                	test   eax,eax
c00139bf:	74 0b                	je     c00139cc <Semaphore::tryAcquire()+0x58>
c00139c1:	8d 76 00             	lea    esi,[esi+0x0]
c00139c4:	31 c0                	xor    eax,eax
c00139c6:	83 c4 08             	add    esp,0x8
c00139c9:	5b                   	pop    ebx
c00139ca:	c3                   	ret    
c00139cb:	90                   	nop
c00139cc:	fb                   	sti    
c00139cd:	83 c4 08             	add    esp,0x8
c00139d0:	5b                   	pop    ebx
c00139d1:	c3                   	ret    
c00139d2:	66 90                	xchg   ax,ax
c00139d4:	43                   	inc    ebx
c00139d5:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c00139db:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00139de:	85 d2                	test   edx,edx
c00139e0:	75 22                	jne    c0013a04 <Semaphore::tryAcquire()+0x90>
c00139e2:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c00139e8:	85 c9                	test   ecx,ecx
c00139ea:	74 18                	je     c0013a04 <Semaphore::tryAcquire()+0x90>
c00139ec:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00139f6:	e8 e9 fe ff ff       	call   c00138e4 <schedule()>
c00139fb:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a00:	48                   	dec    eax
c0013a01:	8d 76 00             	lea    esi,[esi+0x0]
c0013a04:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a09:	85 c0                	test   eax,eax
c0013a0b:	75 0b                	jne    c0013a18 <Semaphore::tryAcquire()+0xa4>
c0013a0d:	fb                   	sti    
c0013a0e:	b0 01                	mov    al,0x1
c0013a10:	83 c4 08             	add    esp,0x8
c0013a13:	5b                   	pop    ebx
c0013a14:	c3                   	ret    
c0013a15:	8d 76 00             	lea    esi,[esi+0x0]
c0013a18:	b0 01                	mov    al,0x1
c0013a1a:	83 c4 08             	add    esp,0x8
c0013a1d:	5b                   	pop    ebx
c0013a1e:	c3                   	ret    
c0013a1f:	90                   	nop
c0013a20:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013a2a:	e8 b5 fe ff ff       	call   c00138e4 <schedule()>
c0013a2f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a34:	48                   	dec    eax
c0013a35:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a3a:	85 c0                	test   eax,eax
c0013a3c:	75 86                	jne    c00139c4 <Semaphore::tryAcquire()+0x50>
c0013a3e:	eb 8c                	jmp    c00139cc <Semaphore::tryAcquire()+0x58>

c0013a40 <Semaphore::assertLocked(char const*)>:
c0013a40:	83 ec 0c             	sub    esp,0xc
c0013a43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a47:	fa                   	cli    
c0013a48:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a4e:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013a53:	8d 48 01             	lea    ecx,[eax+0x1]
c0013a56:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013a5c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013a5e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013a61:	7c 29                	jl     c0013a8c <Semaphore::assertLocked(char const*)+0x4c>
c0013a63:	90                   	nop
c0013a64:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013a69:	85 c0                	test   eax,eax
c0013a6b:	75 0b                	jne    c0013a78 <Semaphore::assertLocked(char const*)+0x38>
c0013a6d:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013a72:	85 c0                	test   eax,eax
c0013a74:	75 2e                	jne    c0013aa4 <Semaphore::assertLocked(char const*)+0x64>
c0013a76:	66 90                	xchg   ax,ax
c0013a78:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a7d:	48                   	dec    eax
c0013a7e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a83:	75 03                	jne    c0013a88 <Semaphore::assertLocked(char const*)+0x48>
c0013a85:	fb                   	sti    
c0013a86:	66 90                	xchg   ax,ax
c0013a88:	83 c4 0c             	add    esp,0xc
c0013a8b:	c3                   	ret    
c0013a8c:	83 ec 0c             	sub    esp,0xc
c0013a8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a93:	52                   	push   edx
c0013a94:	e8 56 c8 ff ff       	call   c00102ef <KePanic(char const*)>
c0013a99:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013a9e:	83 c4 10             	add    esp,0x10
c0013aa1:	48                   	dec    eax
c0013aa2:	eb c0                	jmp    c0013a64 <Semaphore::assertLocked(char const*)+0x24>
c0013aa4:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013aae:	e8 31 fe ff ff       	call   c00138e4 <schedule()>
c0013ab3:	eb c3                	jmp    c0013a78 <Semaphore::assertLocked(char const*)+0x38>
c0013ab5:	8d 76 00             	lea    esi,[esi+0x0]

c0013ab8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013ab8:	83 ec 0c             	sub    esp,0xc
c0013abb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ac0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ac4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013ac7:	e8 18 fe ff ff       	call   c00138e4 <schedule()>
c0013acc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ad1:	48                   	dec    eax
c0013ad2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013ad7:	75 03                	jne    c0013adc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013ad9:	fb                   	sti    
c0013ada:	66 90                	xchg   ax,ax
c0013adc:	83 c4 0c             	add    esp,0xc
c0013adf:	c3                   	ret    

c0013ae0 <blockTask(TaskState)>:
c0013ae0:	83 ec 0c             	sub    esp,0xc
c0013ae3:	fa                   	cli    
c0013ae4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013aea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013af3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013af6:	e8 e9 fd ff ff       	call   c00138e4 <schedule()>
c0013afb:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b00:	48                   	dec    eax
c0013b01:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b06:	75 04                	jne    c0013b0c <blockTask(TaskState)+0x2c>
c0013b08:	fb                   	sti    
c0013b09:	8d 76 00             	lea    esi,[esi+0x0]
c0013b0c:	83 c4 0c             	add    esp,0xc
c0013b0f:	c3                   	ret    

c0013b10 <waitTask(int, int*, int)>:
c0013b10:	83 ec 18             	sub    esp,0x18
c0013b13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b1c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013b1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013b23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b28:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013b2b:	6a 07                	push   0x7
c0013b2d:	e8 ae ff ff ff       	call   c0013ae0 <blockTask(TaskState)>
c0013b32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b37:	83 c4 10             	add    esp,0x10
c0013b3a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013b3d:	85 d2                	test   edx,edx
c0013b3f:	74 0b                	je     c0013b4c <waitTask(int, int*, int)+0x3c>
c0013b41:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013b44:	89 02                	mov    DWORD PTR [edx],eax
c0013b46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b4b:	90                   	nop
c0013b4c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013b4f:	83 c4 0c             	add    esp,0xc
c0013b52:	c3                   	ret    
c0013b53:	90                   	nop

c0013b54 <milliTenthSleepUntil(unsigned int)>:
c0013b54:	83 ec 0c             	sub    esp,0xc
c0013b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5b:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013b61:	76 05                	jbe    c0013b68 <milliTenthSleepUntil(unsigned int)+0x14>
c0013b63:	90                   	nop
c0013b64:	83 c4 0c             	add    esp,0xc
c0013b67:	c3                   	ret    
c0013b68:	fa                   	cli    
c0013b69:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013b6f:	83 ec 08             	sub    esp,0x8
c0013b72:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013b78:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b7e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013b81:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b87:	52                   	push   edx
c0013b88:	68 78 51 02 c0       	push   0xc0025178
c0013b8d:	e8 5a 8d 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b92:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013b99:	e8 42 ff ff ff       	call   c0013ae0 <blockTask(TaskState)>
c0013b9e:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	48                   	dec    eax
c0013ba7:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013bac:	85 c0                	test   eax,eax
c0013bae:	75 0c                	jne    c0013bbc <milliTenthSleepUntil(unsigned int)+0x68>
c0013bb0:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013bb5:	85 c0                	test   eax,eax
c0013bb7:	75 17                	jne    c0013bd0 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bbc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013bc1:	48                   	dec    eax
c0013bc2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013bc7:	75 9b                	jne    c0013b64 <milliTenthSleepUntil(unsigned int)+0x10>
c0013bc9:	fb                   	sti    
c0013bca:	83 c4 0c             	add    esp,0xc
c0013bcd:	c3                   	ret    
c0013bce:	66 90                	xchg   ax,ax
c0013bd0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013bda:	e8 05 fd ff ff       	call   c00138e4 <schedule()>
c0013bdf:	eb db                	jmp    c0013bbc <milliTenthSleepUntil(unsigned int)+0x68>
c0013be1:	8d 76 00             	lea    esi,[esi+0x0]

c0013be4 <milliTenthSleep(unsigned int)>:
c0013be4:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013be9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013bed:	e9 62 ff ff ff       	jmp    c0013b54 <milliTenthSleepUntil(unsigned int)>
c0013bf2:	66 90                	xchg   ax,ax

c0013bf4 <sleep(unsigned int)>:
c0013bf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bf8:	8d 04 80             	lea    eax,[eax+eax*4]
c0013bfb:	8d 04 80             	lea    eax,[eax+eax*4]
c0013bfe:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c01:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c04:	c1 e0 04             	shl    eax,0x4
c0013c07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c0b:	eb d7                	jmp    c0013be4 <milliTenthSleep(unsigned int)>
c0013c0d:	90                   	nop
c0013c0e:	66 90                	xchg   ax,ax

c0013c10 <Semaphore::acquire()>:
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c17:	fa                   	cli    
c0013c18:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013c1d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c23:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c26:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013c2c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013c2f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013c31:	7d 2d                	jge    c0013c60 <Semaphore::acquire()+0x50>
c0013c33:	41                   	inc    ecx
c0013c34:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013c37:	90                   	nop
c0013c38:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013c3d:	85 c0                	test   eax,eax
c0013c3f:	75 0b                	jne    c0013c4c <Semaphore::acquire()+0x3c>
c0013c41:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013c46:	85 c0                	test   eax,eax
c0013c48:	75 62                	jne    c0013cac <Semaphore::acquire()+0x9c>
c0013c4a:	66 90                	xchg   ax,ax
c0013c4c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c51:	48                   	dec    eax
c0013c52:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c57:	75 03                	jne    c0013c5c <Semaphore::acquire()+0x4c>
c0013c59:	fb                   	sti    
c0013c5a:	66 90                	xchg   ax,ax
c0013c5c:	83 c4 0c             	add    esp,0xc
c0013c5f:	c3                   	ret    
c0013c60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c65:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013c6c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013c6f:	85 c9                	test   ecx,ecx
c0013c71:	74 4d                	je     c0013cc0 <Semaphore::acquire()+0xb0>
c0013c73:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013c76:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013c7c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013c7f:	90                   	nop
c0013c80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c85:	83 ec 0c             	sub    esp,0xc
c0013c88:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013c8b:	68 d8 ed 01 c0       	push   0xc001edd8
c0013c90:	e8 d8 69 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0013c95:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013c9c:	e8 3f fe ff ff       	call   c0013ae0 <blockTask(TaskState)>
c0013ca1:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013ca6:	83 c4 10             	add    esp,0x10
c0013ca9:	48                   	dec    eax
c0013caa:	eb 8c                	jmp    c0013c38 <Semaphore::acquire()+0x28>
c0013cac:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013cb6:	e8 29 fc ff ff       	call   c00138e4 <schedule()>
c0013cbb:	eb 8f                	jmp    c0013c4c <Semaphore::acquire()+0x3c>
c0013cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013cc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cc5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013cc8:	eb b6                	jmp    c0013c80 <Semaphore::acquire()+0x70>
c0013cca:	66 90                	xchg   ax,ax

c0013ccc <taskReturned>:
c0013ccc:	83 ec 18             	sub    esp,0x18
c0013ccf:	68 f8 ed 01 c0       	push   0xc001edf8
c0013cd4:	e8 16 c6 ff ff       	call   c00102ef <KePanic(char const*)>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	83 ec 0c             	sub    esp,0xc
c0013cdf:	6a 02                	push   0x2
c0013ce1:	e8 fa fd ff ff       	call   c0013ae0 <blockTask(TaskState)>
c0013ce6:	fa                   	cli    
c0013ce7:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013ced:	e8 f2 fb ff ff       	call   c00138e4 <schedule()>
c0013cf2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013cf7:	83 c4 10             	add    esp,0x10
c0013cfa:	48                   	dec    eax
c0013cfb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d00:	85 c0                	test   eax,eax
c0013d02:	75 d8                	jne    c0013cdc <taskReturned+0x10>
c0013d04:	fb                   	sti    
c0013d05:	eb d5                	jmp    c0013cdc <taskReturned+0x10>
c0013d07:	90                   	nop

c0013d08 <Thr::processFromPID(int)>:
c0013d08:	57                   	push   edi
c0013d09:	56                   	push   esi
c0013d0a:	53                   	push   ebx
c0013d0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d0f:	fa                   	cli    
c0013d10:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013d16:	83 ec 0c             	sub    esp,0xc
c0013d19:	68 84 51 02 c0       	push   0xc0025184
c0013d1e:	e8 09 8b 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d23:	83 c4 10             	add    esp,0x10
c0013d26:	89 c7                	mov    edi,eax
c0013d28:	eb 16                	jmp    c0013d40 <Thr::processFromPID(int)+0x38>
c0013d2a:	66 90                	xchg   ax,ax
c0013d2c:	83 ec 0c             	sub    esp,0xc
c0013d2f:	68 84 51 02 c0       	push   0xc0025184
c0013d34:	e8 f3 8a 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d39:	83 c4 10             	add    esp,0x10
c0013d3c:	39 f8                	cmp    eax,edi
c0013d3e:	74 4c                	je     c0013d8c <Thr::processFromPID(int)+0x84>
c0013d40:	83 ec 0c             	sub    esp,0xc
c0013d43:	68 84 51 02 c0       	push   0xc0025184
c0013d48:	e8 df 8a 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d4d:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013d54:	89 c3                	mov    ebx,eax
c0013d56:	e8 d9 8a 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013d5b:	58                   	pop    eax
c0013d5c:	5a                   	pop    edx
c0013d5d:	53                   	push   ebx
c0013d5e:	68 84 51 02 c0       	push   0xc0025184
c0013d63:	e8 84 8b 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d68:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d6b:	83 c4 10             	add    esp,0x10
c0013d6e:	39 30                	cmp    DWORD PTR [eax],esi
c0013d70:	75 ba                	jne    c0013d2c <Thr::processFromPID(int)+0x24>
c0013d72:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d77:	48                   	dec    eax
c0013d78:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d7d:	74 09                	je     c0013d88 <Thr::processFromPID(int)+0x80>
c0013d7f:	90                   	nop
c0013d80:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d83:	5b                   	pop    ebx
c0013d84:	5e                   	pop    esi
c0013d85:	5f                   	pop    edi
c0013d86:	c3                   	ret    
c0013d87:	90                   	nop
c0013d88:	fb                   	sti    
c0013d89:	eb f5                	jmp    c0013d80 <Thr::processFromPID(int)+0x78>
c0013d8b:	90                   	nop
c0013d8c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d91:	48                   	dec    eax
c0013d92:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d97:	75 07                	jne    c0013da0 <Thr::processFromPID(int)+0x98>
c0013d99:	fb                   	sti    
c0013d9a:	5b                   	pop    ebx
c0013d9b:	5e                   	pop    esi
c0013d9c:	5f                   	pop    edi
c0013d9d:	c3                   	ret    
c0013d9e:	66 90                	xchg   ax,ax
c0013da0:	5b                   	pop    ebx
c0013da1:	31 c0                	xor    eax,eax
c0013da3:	5e                   	pop    esi
c0013da4:	5f                   	pop    edi
c0013da5:	c3                   	ret    
c0013da6:	66 90                	xchg   ax,ax

c0013da8 <unblockTask(ThreadControlBlock*)>:
c0013da8:	53                   	push   ebx
c0013da9:	83 ec 08             	sub    esp,0x8
c0013dac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013db0:	fa                   	cli    
c0013db1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013db7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013dba:	85 c0                	test   eax,eax
c0013dbc:	74 66                	je     c0013e24 <unblockTask(ThreadControlBlock*)+0x7c>
c0013dbe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013dc1:	48                   	dec    eax
c0013dc2:	74 38                	je     c0013dfc <unblockTask(ThreadControlBlock*)+0x54>
c0013dc4:	83 ec 0c             	sub    esp,0xc
c0013dc7:	68 84 51 02 c0       	push   0xc0025184
c0013dcc:	e8 5b 8a 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	85 c0                	test   eax,eax
c0013dd6:	75 1c                	jne    c0013df4 <unblockTask(ThreadControlBlock*)+0x4c>
c0013dd8:	eb 5e                	jmp    c0013e38 <unblockTask(ThreadControlBlock*)+0x90>
c0013dda:	66 90                	xchg   ax,ax
c0013ddc:	83 ec 08             	sub    esp,0x8
c0013ddf:	50                   	push   eax
c0013de0:	68 84 51 02 c0       	push   0xc0025184
c0013de5:	e8 f2 8d 00 00       	call   c001cbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013dea:	83 c4 10             	add    esp,0x10
c0013ded:	85 c0                	test   eax,eax
c0013def:	74 47                	je     c0013e38 <unblockTask(ThreadControlBlock*)+0x90>
c0013df1:	8d 76 00             	lea    esi,[esi+0x0]
c0013df4:	39 c3                	cmp    ebx,eax
c0013df6:	75 e4                	jne    c0013ddc <unblockTask(ThreadControlBlock*)+0x34>
c0013df8:	eb 12                	jmp    c0013e0c <unblockTask(ThreadControlBlock*)+0x64>
c0013dfa:	66 90                	xchg   ax,ax
c0013dfc:	83 ec 0c             	sub    esp,0xc
c0013dff:	68 7a ed 01 c0       	push   0xc001ed7a
c0013e04:	e8 64 68 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013e11:	48                   	dec    eax
c0013e12:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013e17:	75 03                	jne    c0013e1c <unblockTask(ThreadControlBlock*)+0x74>
c0013e19:	fb                   	sti    
c0013e1a:	66 90                	xchg   ax,ax
c0013e1c:	83 c4 08             	add    esp,0x8
c0013e1f:	5b                   	pop    ebx
c0013e20:	c3                   	ret    
c0013e21:	8d 76 00             	lea    esi,[esi+0x0]
c0013e24:	83 ec 0c             	sub    esp,0xc
c0013e27:	68 63 ed 01 c0       	push   0xc001ed63
c0013e2c:	e8 3c 68 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0013e31:	83 c4 10             	add    esp,0x10
c0013e34:	eb d6                	jmp    c0013e0c <unblockTask(ThreadControlBlock*)+0x64>
c0013e36:	66 90                	xchg   ax,ax
c0013e38:	83 ec 08             	sub    esp,0x8
c0013e3b:	53                   	push   ebx
c0013e3c:	68 84 51 02 c0       	push   0xc0025184
c0013e41:	e8 a6 8a 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	eb c1                	jmp    c0013e0c <unblockTask(ThreadControlBlock*)+0x64>
c0013e4b:	90                   	nop

c0013e4c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013e4c:	55                   	push   ebp
c0013e4d:	57                   	push   edi
c0013e4e:	56                   	push   esi
c0013e4f:	53                   	push   ebx
c0013e50:	83 ec 1c             	sub    esp,0x1c
c0013e53:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013e57:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e5a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013e60:	85 ed                	test   ebp,ebp
c0013e62:	7e 24                	jle    c0013e88 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013e64:	31 f6                	xor    esi,esi
c0013e66:	66 90                	xchg   ax,ax
c0013e68:	83 ec 0c             	sub    esp,0xc
c0013e6b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013e72:	46                   	inc    esi
c0013e73:	57                   	push   edi
c0013e74:	e8 50 39 ff ff       	call   c00077c9 <free>
c0013e79:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e7c:	83 c4 10             	add    esp,0x10
c0013e7f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013e85:	7f e1                	jg     c0013e68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013e87:	90                   	nop
c0013e88:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013e92:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e97:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013e9a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013e9d:	d3 c0                	rol    eax,cl
c0013e9f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013ea6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ea9:	89 f7                	mov    edi,esi
c0013eab:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013eb3:	0f 85 77 01 00 00    	jne    c0014030 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013eb9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013ebf:	85 ed                	test   ebp,ebp
c0013ec1:	74 1d                	je     c0013ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013ec3:	83 ec 0c             	sub    esp,0xc
c0013ec6:	55                   	push   ebp
c0013ec7:	e8 34 c1 ff ff       	call   c0010000 <EnvVarContainer::~EnvVarContainer()>
c0013ecc:	59                   	pop    ecx
c0013ecd:	5e                   	pop    esi
c0013ece:	6a 0c                	push   0xc
c0013ed0:	55                   	push   ebp
c0013ed1:	e8 a1 66 ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c0013ed6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ed9:	83 c4 10             	add    esp,0x10
c0013edc:	89 f7                	mov    edi,esi
c0013ede:	66 90                	xchg   ax,ax
c0013ee0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013ee6:	85 c0                	test   eax,eax
c0013ee8:	0f 84 b6 00 00 00    	je     c0013fa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013eee:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013ef1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ef5:	31 c9                	xor    ecx,ecx
c0013ef7:	eb 17                	jmp    c0013f10 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0013efc:	41                   	inc    ecx
c0013efd:	83 f9 10             	cmp    ecx,0x10
c0013f00:	0f 84 9e 00 00 00    	je     c0013fa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f06:	66 90                	xchg   ax,ax
c0013f08:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f0e:	66 90                	xchg   ax,ax
c0013f10:	31 d2                	xor    edx,edx
c0013f12:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013f19:	d3 fa                	sar    edx,cl
c0013f1b:	83 e2 01             	and    edx,0x1
c0013f1e:	74 dc                	je     c0013efc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f20:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013f23:	01 d2                	add    edx,edx
c0013f25:	01 ca                	add    edx,ecx
c0013f27:	8d 14 92             	lea    edx,[edx+edx*4]
c0013f2a:	01 d0                	add    eax,edx
c0013f2c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013f32:	83 fd 07             	cmp    ebp,0x7
c0013f35:	75 c5                	jne    c0013efc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f37:	05 40 02 00 00       	add    eax,0x240
c0013f3c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013f3f:	83 fd ff             	cmp    ebp,0xffffffff
c0013f42:	0f 8c f0 00 00 00    	jl     c0014038 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013f48:	0f 84 ae 01 00 00    	je     c00140fc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013f4e:	85 ed                	test   ebp,ebp
c0013f50:	0f 84 92 01 00 00    	je     c00140e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013f56:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013f58:	75 a2                	jne    c0013efc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f5a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f64:	01 d0                	add    eax,edx
c0013f66:	66 90                	xchg   ax,ax
c0013f68:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013f6c:	83 ec 0c             	sub    esp,0xc
c0013f6f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013f75:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f78:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013f7e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013f85:	50                   	push   eax
c0013f86:	e8 1d fe ff ff       	call   c0013da8 <unblockTask(ThreadControlBlock*)>
c0013f8b:	83 c4 10             	add    esp,0x10
c0013f8e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f95:	89 f7                	mov    edi,esi
c0013f97:	41                   	inc    ecx
c0013f98:	83 f9 10             	cmp    ecx,0x10
c0013f9b:	0f 85 67 ff ff ff    	jne    c0013f08 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fa4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013faa:	85 c0                	test   eax,eax
c0013fac:	74 62                	je     c0014010 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013fae:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013fb4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013fba:	74 54                	je     c0014010 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013fbc:	83 ec 0c             	sub    esp,0xc
c0013fbf:	68 84 51 02 c0       	push   0xc0025184
c0013fc4:	e8 63 88 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fc9:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013fd0:	89 c7                	mov    edi,eax
c0013fd2:	e8 39 88 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013fd7:	83 c4 10             	add    esp,0x10
c0013fda:	84 c0                	test   al,al
c0013fdc:	0f 84 ce 00 00 00    	je     c00140b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013fe2:	66 90                	xchg   ax,ax
c0013fe4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fe7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013fed:	85 d2                	test   edx,edx
c0013fef:	74 0f                	je     c0014000 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013ff1:	83 ec 0c             	sub    esp,0xc
c0013ff4:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ff6:	52                   	push   edx
c0013ff7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ffa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ffd:	83 c4 10             	add    esp,0x10
c0014000:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001400a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001400d:	8d 76 00             	lea    esi,[esi+0x0]
c0014010:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0014016:	85 db                	test   ebx,ebx
c0014018:	74 16                	je     c0014030 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c001401a:	83 ec 0c             	sub    esp,0xc
c001401d:	53                   	push   ebx
c001401e:	e8 71 57 ff ff       	call   c0009794 <VAS::~VAS()>
c0014023:	58                   	pop    eax
c0014024:	5a                   	pop    edx
c0014025:	6a 14                	push   0x14
c0014027:	53                   	push   ebx
c0014028:	e8 4a 65 ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001402d:	83 c4 10             	add    esp,0x10
c0014030:	83 c4 1c             	add    esp,0x1c
c0014033:	5b                   	pop    ebx
c0014034:	5e                   	pop    esi
c0014035:	5f                   	pop    edi
c0014036:	5d                   	pop    ebp
c0014037:	c3                   	ret    
c0014038:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001403c:	83 ec 0c             	sub    esp,0xc
c001403f:	68 2c ee 01 c0       	push   0xc001ee2c
c0014044:	e8 a6 c2 ff ff       	call   c00102ef <KePanic(char const*)>
c0014049:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001404c:	83 c4 10             	add    esp,0x10
c001404f:	89 f7                	mov    edi,esi
c0014051:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014055:	e9 a2 fe ff ff       	jmp    c0013efc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001405a:	66 90                	xchg   ax,ax
c001405c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014062:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014068:	75 1e                	jne    c0014088 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001406a:	83 ec 0c             	sub    esp,0xc
c001406d:	68 94 ee 01 c0       	push   0xc001ee94
c0014072:	e8 f6 65 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0014077:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001407e:	e8 5d fa ff ff       	call   c0013ae0 <blockTask(TaskState)>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	66 90                	xchg   ax,ax
c0014088:	83 ec 08             	sub    esp,0x8
c001408b:	56                   	push   esi
c001408c:	68 84 51 02 c0       	push   0xc0025184
c0014091:	e8 56 88 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014096:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c001409d:	e8 8a 87 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140a2:	83 c4 10             	add    esp,0x10
c00140a5:	39 f8                	cmp    eax,edi
c00140a7:	0f 84 37 ff ff ff    	je     c0013fe4 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00140ad:	8d 76 00             	lea    esi,[esi+0x0]
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	68 84 51 02 c0       	push   0xc0025184
c00140b8:	e8 6f 87 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140bd:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c00140c4:	89 c6                	mov    esi,eax
c00140c6:	e8 69 87 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00140cb:	83 c4 10             	add    esp,0x10
c00140ce:	39 f3                	cmp    ebx,esi
c00140d0:	74 b6                	je     c0014088 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00140d2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00140d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00140d8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00140de:	75 a8                	jne    c0014088 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00140e0:	e9 77 ff ff ff       	jmp    c001405c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c00140e5:	8d 76 00             	lea    esi,[esi+0x0]
c00140e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00140ec:	83 ec 0c             	sub    esp,0xc
c00140ef:	68 60 ee 01 c0       	push   0xc001ee60
c00140f4:	e9 4b ff ff ff       	jmp    c0014044 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00140f9:	8d 76 00             	lea    esi,[esi+0x0]
c00140fc:	8b 36                	mov    esi,DWORD PTR [esi]
c00140fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014102:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014105:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014108:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001410e:	01 d7                	add    edi,edx
c0014110:	89 f8                	mov    eax,edi
c0014112:	e9 51 fe ff ff       	jmp    c0013f68 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014117:	90                   	nop

c0014118 <cleanerTaskFunction(void*)>:
c0014118:	53                   	push   ebx
c0014119:	83 ec 08             	sub    esp,0x8
c001411c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014121:	48                   	dec    eax
c0014122:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014127:	75 03                	jne    c001412c <cleanerTaskFunction(void*)+0x14>
c0014129:	fb                   	sti    
c001412a:	66 90                	xchg   ax,ax
c001412c:	fa                   	cli    
c001412d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014132:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c0014139:	8d 50 01             	lea    edx,[eax+0x1]
c001413c:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0014142:	0f 84 ac 00 00 00    	je     c00141f4 <cleanerTaskFunction(void*)+0xdc>
c0014148:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001414d:	85 c0                	test   eax,eax
c001414f:	75 03                	jne    c0014154 <cleanerTaskFunction(void*)+0x3c>
c0014151:	fb                   	sti    
c0014152:	66 90                	xchg   ax,ax
c0014154:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c001415b:	fa                   	cli    
c001415c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014162:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0014168:	fa                   	cli    
c0014169:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001416f:	eb 2b                	jmp    c001419c <cleanerTaskFunction(void*)+0x84>
c0014171:	8d 76 00             	lea    esi,[esi+0x0]
c0014174:	83 ec 0c             	sub    esp,0xc
c0014177:	68 6c 51 02 c0       	push   0xc002516c
c001417c:	e8 ab 86 00 00       	call   c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014181:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c0014188:	89 c3                	mov    ebx,eax
c001418a:	e8 a5 86 00 00       	call   c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001418f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014192:	e8 b5 fc ff ff       	call   c0013e4c <cleanupTerminatedTask(ThreadControlBlock*)>
c0014197:	83 c4 10             	add    esp,0x10
c001419a:	66 90                	xchg   ax,ax
c001419c:	83 ec 0c             	sub    esp,0xc
c001419f:	68 6c 51 02 c0       	push   0xc002516c
c00141a4:	e8 67 86 00 00       	call   c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00141a9:	83 c4 10             	add    esp,0x10
c00141ac:	84 c0                	test   al,al
c00141ae:	74 c4                	je     c0014174 <cleanerTaskFunction(void*)+0x5c>
c00141b0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00141b5:	48                   	dec    eax
c00141b6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00141bb:	75 03                	jne    c00141c0 <cleanerTaskFunction(void*)+0xa8>
c00141bd:	fb                   	sti    
c00141be:	66 90                	xchg   ax,ax
c00141c0:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00141c5:	48                   	dec    eax
c00141c6:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00141cb:	0f 85 4b ff ff ff    	jne    c001411c <cleanerTaskFunction(void*)+0x4>
c00141d1:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00141d6:	85 c0                	test   eax,eax
c00141d8:	0f 84 3e ff ff ff    	je     c001411c <cleanerTaskFunction(void*)+0x4>
c00141de:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00141e8:	e8 f7 f6 ff ff       	call   c00138e4 <schedule()>
c00141ed:	e9 2a ff ff ff       	jmp    c001411c <cleanerTaskFunction(void*)+0x4>
c00141f2:	66 90                	xchg   ax,ax
c00141f4:	83 ec 0c             	sub    esp,0xc
c00141f7:	6a 02                	push   0x2
c00141f9:	e8 ba f8 ff ff       	call   c0013ab8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	e9 4e ff ff ff       	jmp    c0014154 <cleanerTaskFunction(void*)+0x3c>
c0014206:	66 90                	xchg   ax,ax

c0014208 <terminateTask(int)>:
c0014208:	83 ec 14             	sub    esp,0x14
c001420b:	fa                   	cli    
c001420c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014212:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0014218:	fa                   	cli    
c0014219:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001421f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014223:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014228:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001422b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014230:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014233:	50                   	push   eax
c0014234:	68 6c 51 02 c0       	push   0xc002516c
c0014239:	e8 ae 86 00 00       	call   c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001423e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014243:	83 c4 10             	add    esp,0x10
c0014246:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001424d:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c0014252:	85 c0                	test   eax,eax
c0014254:	74 5e                	je     c00142b4 <terminateTask(int)+0xac>
c0014256:	83 ec 0c             	sub    esp,0xc
c0014259:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c0014260:	50                   	push   eax
c0014261:	e8 42 fb ff ff       	call   c0013da8 <unblockTask(ThreadControlBlock*)>
c0014266:	83 c4 10             	add    esp,0x10
c0014269:	8d 76 00             	lea    esi,[esi+0x0]
c001426c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014271:	48                   	dec    eax
c0014272:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014277:	75 03                	jne    c001427c <terminateTask(int)+0x74>
c0014279:	fb                   	sti    
c001427a:	66 90                	xchg   ax,ax
c001427c:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014281:	48                   	dec    eax
c0014282:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014287:	75 0b                	jne    c0014294 <terminateTask(int)+0x8c>
c0014289:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0014290:	75 36                	jne    c00142c8 <terminateTask(int)+0xc0>
c0014292:	66 90                	xchg   ax,ax
c0014294:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014299:	48                   	dec    eax
c001429a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001429f:	75 03                	jne    c00142a4 <terminateTask(int)+0x9c>
c00142a1:	fb                   	sti    
c00142a2:	66 90                	xchg   ax,ax
c00142a4:	fa                   	cli    
c00142a5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00142ab:	90                   	nop
c00142ac:	e8 33 f6 ff ff       	call   c00138e4 <schedule()>
c00142b1:	eb e1                	jmp    c0014294 <terminateTask(int)+0x8c>
c00142b3:	90                   	nop
c00142b4:	83 ec 0c             	sub    esp,0xc
c00142b7:	68 91 ed 01 c0       	push   0xc001ed91
c00142bc:	e8 ac 63 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c00142c1:	83 c4 10             	add    esp,0x10
c00142c4:	eb a6                	jmp    c001426c <terminateTask(int)+0x64>
c00142c6:	66 90                	xchg   ax,ax
c00142c8:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00142d2:	eb d8                	jmp    c00142ac <terminateTask(int)+0xa4>

c00142d4 <Thr::terminateFromIRQ(int)>:
c00142d4:	83 ec 18             	sub    esp,0x18
c00142d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142db:	50                   	push   eax
c00142dc:	e8 27 ff ff ff       	call   c0014208 <terminateTask(int)>
c00142e1:	90                   	nop
c00142e2:	66 90                	xchg   ax,ax

c00142e4 <Semaphore::release()>:
c00142e4:	83 ec 0c             	sub    esp,0xc
c00142e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142eb:	fa                   	cli    
c00142ec:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00142f1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00142f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00142fa:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0014300:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014303:	85 c9                	test   ecx,ecx
c0014305:	74 41                	je     c0014348 <Semaphore::release()+0x64>
c0014307:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001430a:	83 ec 0c             	sub    esp,0xc
c001430d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014310:	51                   	push   ecx
c0014311:	e8 92 fa ff ff       	call   c0013da8 <unblockTask(ThreadControlBlock*)>
c0014316:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001431b:	83 c4 10             	add    esp,0x10
c001431e:	48                   	dec    eax
c001431f:	90                   	nop
c0014320:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014325:	85 c0                	test   eax,eax
c0014327:	75 0b                	jne    c0014334 <Semaphore::release()+0x50>
c0014329:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c001432e:	85 c0                	test   eax,eax
c0014330:	75 1e                	jne    c0014350 <Semaphore::release()+0x6c>
c0014332:	66 90                	xchg   ax,ax
c0014334:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014339:	48                   	dec    eax
c001433a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001433f:	75 03                	jne    c0014344 <Semaphore::release()+0x60>
c0014341:	fb                   	sti    
c0014342:	66 90                	xchg   ax,ax
c0014344:	83 c4 0c             	add    esp,0xc
c0014347:	c3                   	ret    
c0014348:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001434b:	eb d3                	jmp    c0014320 <Semaphore::release()+0x3c>
c001434d:	8d 76 00             	lea    esi,[esi+0x0]
c0014350:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001435a:	e8 85 f5 ff ff       	call   c00138e4 <schedule()>
c001435f:	eb d3                	jmp    c0014334 <Semaphore::release()+0x50>
c0014361:	8d 76 00             	lea    esi,[esi+0x0]

c0014364 <__static_initialization_and_destruction_0(int, int)>:
c0014364:	83 ec 0c             	sub    esp,0xc
c0014367:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001436c:	0f 85 8e 00 00 00    	jne    c0014400 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014372:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001437a:	0f 85 80 00 00 00    	jne    c0014400 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014380:	83 ec 0c             	sub    esp,0xc
c0014383:	68 84 51 02 c0       	push   0xc0025184
c0014388:	e8 0b 88 00 00       	call   c001cb98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001438d:	83 c4 10             	add    esp,0x10
c0014390:	83 ec 04             	sub    esp,0x4
c0014393:	68 44 f9 01 c0       	push   0xc001f944
c0014398:	68 84 51 02 c0       	push   0xc0025184
c001439d:	68 48 cb 01 c0       	push   0xc001cb48
c00143a2:	e8 80 61 ff ff       	call   c000a527 <__cxa_atexit>
c00143a7:	83 c4 10             	add    esp,0x10
c00143aa:	83 ec 0c             	sub    esp,0xc
c00143ad:	68 78 51 02 c0       	push   0xc0025178
c00143b2:	e8 e1 87 00 00       	call   c001cb98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143b7:	83 c4 10             	add    esp,0x10
c00143ba:	83 ec 04             	sub    esp,0x4
c00143bd:	68 44 f9 01 c0       	push   0xc001f944
c00143c2:	68 78 51 02 c0       	push   0xc0025178
c00143c7:	68 48 cb 01 c0       	push   0xc001cb48
c00143cc:	e8 56 61 ff ff       	call   c000a527 <__cxa_atexit>
c00143d1:	83 c4 10             	add    esp,0x10
c00143d4:	83 ec 0c             	sub    esp,0xc
c00143d7:	68 6c 51 02 c0       	push   0xc002516c
c00143dc:	e8 b7 87 00 00       	call   c001cb98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143e1:	83 c4 10             	add    esp,0x10
c00143e4:	83 ec 04             	sub    esp,0x4
c00143e7:	68 44 f9 01 c0       	push   0xc001f944
c00143ec:	68 6c 51 02 c0       	push   0xc002516c
c00143f1:	68 48 cb 01 c0       	push   0xc001cb48
c00143f6:	e8 2c 61 ff ff       	call   c000a527 <__cxa_atexit>
c00143fb:	83 c4 10             	add    esp,0x10
c00143fe:	66 90                	xchg   ax,ax
c0014400:	90                   	nop
c0014401:	83 c4 0c             	add    esp,0xc
c0014404:	c3                   	ret    
c0014405:	8d 76 00             	lea    esi,[esi+0x0]

c0014408 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014408:	83 ec 0c             	sub    esp,0xc
c001440b:	83 ec 08             	sub    esp,0x8
c001440e:	68 ff ff 00 00       	push   0xffff
c0014413:	6a 01                	push   0x1
c0014415:	e8 4a ff ff ff       	call   c0014364 <__static_initialization_and_destruction_0(int, int)>
c001441a:	83 c4 10             	add    esp,0x10
c001441d:	83 c4 0c             	add    esp,0xc
c0014420:	c3                   	ret    

c0014421 <Vm::inbv(unsigned short)>:
c0014421:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014425:	66 81 fa fe fe       	cmp    dx,0xfefe
c001442a:	75 06                	jne    c0014432 <Vm::inbv(unsigned short)+0x11>
c001442c:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c0014431:	c3                   	ret    
c0014432:	ec                   	in     al,dx
c0014433:	c3                   	ret    

c0014434 <Vm::outbv(unsigned short, unsigned char)>:
c0014434:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001443c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014441:	75 25                	jne    c0014468 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0014443:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c0014449:	8d 51 01             	lea    edx,[ecx+0x1]
c001444c:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c0014452:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c0014458:	83 fa 20             	cmp    edx,0x20
c001445b:	75 0c                	jne    c0014469 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001445d:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c0014467:	c3                   	ret    
c0014468:	ee                   	out    dx,al
c0014469:	c3                   	ret    

c001446a <Vm::realToLinear(unsigned short, unsigned short)>:
c001446a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001446f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014474:	c1 e0 04             	shl    eax,0x4
c0014477:	01 d0                	add    eax,edx
c0014479:	c3                   	ret    

c001447a <Vm::getSegment(unsigned int)>:
c001447a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001447e:	c1 e8 10             	shr    eax,0x10
c0014481:	c3                   	ret    

c0014482 <Vm::getOffset(unsigned int)>:
c0014482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014486:	c3                   	ret    

c0014487 <Vm::mainloop2()>:
c0014487:	83 ec 18             	sub    esp,0x18
c001448a:	fa                   	cli    
c001448b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014491:	6a 02                	push   0x2
c0014493:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c001449a:	e8 19 f6 ff ff       	call   c0013ab8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001449f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144a4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00144a8:	52                   	push   edx
c00144a9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00144ad:	52                   	push   edx
c00144ae:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00144b2:	52                   	push   edx
c00144b3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00144b7:	50                   	push   eax
c00144b8:	e8 52 bd fe ff       	call   c000020f <goToVM86>
c00144bd:	83 c4 2c             	add    esp,0x2c
c00144c0:	c3                   	ret    

c00144c1 <Vm::mainVm8086Loop(void*)>:
c00144c1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00144c6:	48                   	dec    eax
c00144c7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00144cc:	75 01                	jne    c00144cf <Vm::mainVm8086Loop(void*)+0xe>
c00144ce:	fb                   	sti    
c00144cf:	eb b6                	jmp    c0014487 <Vm::mainloop2()>

c00144d1 <Vm::mainloop3(unsigned long)>:
c00144d1:	83 ec 18             	sub    esp,0x18
c00144d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00144d8:	fa                   	cli    
c00144d9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00144df:	6a 02                	push   0x2
c00144e1:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c00144e8:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c00144ed:	e8 c6 f5 ff ff       	call   c0013ab8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00144f2:	83 c4 1c             	add    esp,0x1c
c00144f5:	eb 90                	jmp    c0014487 <Vm::mainloop2()>

c00144f7 <Vm::initialise8086()>:
c00144f7:	83 ec 0c             	sub    esp,0xc
c00144fa:	68 80 00 00 00       	push   0x80
c00144ff:	6a 00                	push   0x0
c0014501:	68 c1 44 01 c0       	push   0xc00144c1
c0014506:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001450c:	e8 b3 f1 ff ff       	call   c00136c4 <Process::createThread(void (*)(void*), void*, int)>
c0014511:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014518:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c001451d:	68 00 01 00 00       	push   0x100
c0014522:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014527:	6a 00                	push   0x0
c0014529:	6a 00                	push   0x0
c001452b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014531:	e8 bc 56 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014536:	83 c4 2c             	add    esp,0x2c
c0014539:	c3                   	ret    

c001453a <Vm::finish8086()>:
c001453a:	53                   	push   ebx
c001453b:	83 ec 08             	sub    esp,0x8
c001453e:	fa                   	cli    
c001453f:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014545:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c001454c:	75 15                	jne    c0014563 <Vm::finish8086()+0x29>
c001454e:	e8 91 f3 ff ff       	call   c00138e4 <schedule()>
c0014553:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014558:	48                   	dec    eax
c0014559:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001455e:	75 de                	jne    c001453e <Vm::finish8086()+0x4>
c0014560:	fb                   	sti    
c0014561:	eb db                	jmp    c001453e <Vm::finish8086()+0x4>
c0014563:	83 ec 0c             	sub    esp,0xc
c0014566:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c001456c:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014572:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c0014579:	e8 2a f8 ff ff       	call   c0013da8 <unblockTask(ThreadControlBlock*)>
c001457e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014583:	83 c4 10             	add    esp,0x10
c0014586:	8d 50 ff             	lea    edx,[eax-0x1]
c0014589:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001458f:	85 d2                	test   edx,edx
c0014591:	75 01                	jne    c0014594 <Vm::finish8086()+0x5a>
c0014593:	fb                   	sti    
c0014594:	89 d8                	mov    eax,ebx
c0014596:	83 c4 08             	add    esp,0x8
c0014599:	5b                   	pop    ebx
c001459a:	c3                   	ret    

c001459b <Vm::getOutput8086(unsigned char*)>:
c001459b:	57                   	push   edi
c001459c:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c00145a2:	56                   	push   esi
c00145a3:	be e0 51 02 c0       	mov    esi,0xc00251e0
c00145a8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00145ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145ae:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c00145b3:	5e                   	pop    esi
c00145b4:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00145be:	5f                   	pop    edi
c00145bf:	c3                   	ret    

c00145c0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00145c0:	55                   	push   ebp
c00145c1:	57                   	push   edi
c00145c2:	56                   	push   esi
c00145c3:	53                   	push   ebx
c00145c4:	83 ec 0c             	sub    esp,0xc
c00145c7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00145cb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00145cf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00145d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00145d7:	fa                   	cli    
c00145d8:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00145de:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c00145e5:	75 15                	jne    c00145fc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00145e7:	e8 f8 f2 ff ff       	call   c00138e4 <schedule()>
c00145ec:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00145f1:	48                   	dec    eax
c00145f2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00145f7:	75 de                	jne    c00145d7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145f9:	fb                   	sti    
c00145fa:	eb db                	jmp    c00145d7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145fc:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c0014601:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c001460b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001460f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0014613:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014617:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001461b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001461f:	0f b7 ff             	movzx  edi,di
c0014622:	0f b7 f6             	movzx  esi,si
c0014625:	50                   	push   eax
c0014626:	6a 20                	push   0x20
c0014628:	6a 00                	push   0x0
c001462a:	68 e0 51 02 c0       	push   0xc00251e0
c001462f:	e8 9c be fe ff       	call   c00004d0 <memset>
c0014634:	5a                   	pop    edx
c0014635:	59                   	pop    ecx
c0014636:	57                   	push   edi
c0014637:	56                   	push   esi
c0014638:	e8 2d fe ff ff       	call   c001446a <Vm::realToLinear(unsigned short, unsigned short)>
c001463d:	83 c4 10             	add    esp,0x10
c0014640:	89 c7                	mov    edi,eax
c0014642:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014646:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001464a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001464c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014651:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014658:	48                   	dec    eax
c0014659:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001465e:	75 01                	jne    c0014661 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014660:	fb                   	sti    
c0014661:	83 ec 0c             	sub    esp,0xc
c0014664:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001466a:	e8 39 f7 ff ff       	call   c0013da8 <unblockTask(ThreadControlBlock*)>
c001466f:	83 c4 1c             	add    esp,0x1c
c0014672:	b0 01                	mov    al,0x1
c0014674:	5b                   	pop    ebx
c0014675:	5e                   	pop    esi
c0014676:	5f                   	pop    edi
c0014677:	5d                   	pop    ebp
c0014678:	c3                   	ret    

c0014679 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014679:	55                   	push   ebp
c001467a:	57                   	push   edi
c001467b:	56                   	push   esi
c001467c:	53                   	push   ebx
c001467d:	83 ec 2c             	sub    esp,0x2c
c0014680:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014684:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014688:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001468c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014690:	fa                   	cli    
c0014691:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014697:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c001469e:	89 f0                	mov    eax,esi
c00146a0:	84 c0                	test   al,al
c00146a2:	75 1d                	jne    c00146c1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00146a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00146a8:	e8 37 f2 ff ff       	call   c00138e4 <schedule()>
c00146ad:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00146b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146b6:	48                   	dec    eax
c00146b7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00146bc:	75 d2                	jne    c0014690 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00146be:	fb                   	sti    
c00146bf:	eb cf                	jmp    c0014690 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00146c1:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00146c6:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00146d0:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00146d4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00146d8:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00146dc:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00146e0:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00146e4:	50                   	push   eax
c00146e5:	6a 20                	push   0x20
c00146e7:	6a 00                	push   0x0
c00146e9:	68 e0 51 02 c0       	push   0xc00251e0
c00146ee:	e8 dd bd fe ff       	call   c00004d0 <memset>
c00146f3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00146fa:	e8 ba 30 ff ff       	call   c00077b9 <malloc>
c00146ff:	83 c4 0c             	add    esp,0xc
c0014702:	89 c3                	mov    ebx,eax
c0014704:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001470a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001470e:	50                   	push   eax
c001470f:	e8 ce 64 ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0014714:	83 c4 10             	add    esp,0x10
c0014717:	85 db                	test   ebx,ebx
c0014719:	75 0a                	jne    c0014725 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001471b:	83 ec 0c             	sub    esp,0xc
c001471e:	68 bc ee 01 c0       	push   0xc001eebc
c0014723:	eb 3e                	jmp    c0014763 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014725:	50                   	push   eax
c0014726:	8d 44 24 17          	lea    eax,[esp+0x17]
c001472a:	50                   	push   eax
c001472b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001472f:	50                   	push   eax
c0014730:	53                   	push   ebx
c0014731:	e8 18 68 ff ff       	call   c000af4e <File::stat(unsigned long long*, bool*)>
c0014736:	83 c4 10             	add    esp,0x10
c0014739:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001473e:	74 0a                	je     c001474a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014740:	83 ec 0c             	sub    esp,0xc
c0014743:	68 d0 ee 01 c0       	push   0xc001eed0
c0014748:	eb 19                	jmp    c0014763 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001474a:	51                   	push   ecx
c001474b:	51                   	push   ecx
c001474c:	6a 01                	push   0x1
c001474e:	53                   	push   ebx
c001474f:	e8 4e 65 ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c0014754:	83 c4 10             	add    esp,0x10
c0014757:	85 c0                	test   eax,eax
c0014759:	74 24                	je     c001477f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001475b:	83 ec 0c             	sub    esp,0xc
c001475e:	68 e9 ee 01 c0       	push   0xc001eee9
c0014763:	e8 87 bb ff ff       	call   c00102ef <KePanic(char const*)>
c0014768:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001476d:	83 c4 10             	add    esp,0x10
c0014770:	48                   	dec    eax
c0014771:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014776:	85 c0                	test   eax,eax
c0014778:	75 01                	jne    c001477b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001477a:	fb                   	sti    
c001477b:	31 f6                	xor    esi,esi
c001477d:	eb 58                	jmp    c00147d7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001477f:	0f b7 ed             	movzx  ebp,bp
c0014782:	50                   	push   eax
c0014783:	0f b7 ff             	movzx  edi,di
c0014786:	50                   	push   eax
c0014787:	55                   	push   ebp
c0014788:	57                   	push   edi
c0014789:	e8 dc fc ff ff       	call   c001446a <Vm::realToLinear(unsigned short, unsigned short)>
c001478e:	5a                   	pop    edx
c001478f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014791:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014795:	51                   	push   ecx
c0014796:	50                   	push   eax
c0014797:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001479b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001479f:	53                   	push   ebx
c00147a0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00147a3:	83 c4 14             	add    esp,0x14
c00147a6:	53                   	push   ebx
c00147a7:	e8 54 65 ff ff       	call   c000ad00 <File::close()>
c00147ac:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00147b1:	83 c4 10             	add    esp,0x10
c00147b4:	48                   	dec    eax
c00147b5:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c00147bc:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00147c1:	85 c0                	test   eax,eax
c00147c3:	75 01                	jne    c00147c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00147c5:	fb                   	sti    
c00147c6:	83 ec 0c             	sub    esp,0xc
c00147c9:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c00147cf:	e8 d4 f5 ff ff       	call   c0013da8 <unblockTask(ThreadControlBlock*)>
c00147d4:	83 c4 10             	add    esp,0x10
c00147d7:	83 c4 2c             	add    esp,0x2c
c00147da:	89 f0                	mov    eax,esi
c00147dc:	5b                   	pop    ebx
c00147dd:	5e                   	pop    esi
c00147de:	5f                   	pop    edi
c00147df:	5d                   	pop    ebp
c00147e0:	c3                   	ret    

c00147e1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00147e1:	57                   	push   edi
c00147e2:	56                   	push   esi
c00147e3:	53                   	push   ebx
c00147e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00147e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00147f0:	83 e8 06             	sub    eax,0x6
c00147f3:	0f b7 c0             	movzx  eax,ax
c00147f6:	50                   	push   eax
c00147f7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00147fc:	50                   	push   eax
c00147fd:	e8 68 fc ff ff       	call   c001446a <Vm::realToLinear(unsigned short, unsigned short)>
c0014802:	5a                   	pop    edx
c0014803:	5e                   	pop    esi
c0014804:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014807:	8d 56 fa             	lea    edx,[esi-0x6]
c001480a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014810:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0014813:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014816:	83 c2 02             	add    edx,0x2
c0014819:	66 89 10             	mov    WORD PTR [eax],dx
c001481c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001481f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014823:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014826:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001482a:	89 d6                	mov    esi,edx
c001482c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014832:	66 81 e6 ff fd       	and    si,0xfdff
c0014837:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001483b:	74 07                	je     c0014844 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001483d:	89 d6                	mov    esi,edx
c001483f:	66 81 ce 00 02       	or     si,0x200
c0014844:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014848:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001484d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014851:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014859:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001485c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014864:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014867:	5b                   	pop    ebx
c0014868:	5e                   	pop    esi
c0014869:	5f                   	pop    edi
c001486a:	c3                   	ret    

c001486b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001486b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014870:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014875:	c1 e0 04             	shl    eax,0x4
c0014878:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001487b:	c3                   	ret    

c001487c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001487c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014881:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014886:	c1 e0 04             	shl    eax,0x4
c0014889:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001488d:	c3                   	ret    

c001488e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001488e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014893:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014898:	c1 e0 04             	shl    eax,0x4
c001489b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001489e:	c3                   	ret    

c001489f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001489f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148a4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148a9:	c1 e0 04             	shl    eax,0x4
c00148ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148b0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00148b3:	c3                   	ret    

c00148b4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00148b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148be:	c1 e0 04             	shl    eax,0x4
c00148c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148c5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00148c9:	c3                   	ret    

c00148ca <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00148ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148cf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148d4:	c1 e0 04             	shl    eax,0x4
c00148d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148db:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00148de:	c3                   	ret    

c00148df <Vm::faultHandler(regs*)>:
c00148df:	55                   	push   ebp
c00148e0:	57                   	push   edi
c00148e1:	56                   	push   esi
c00148e2:	53                   	push   ebx
c00148e3:	83 ec 1c             	sub    esp,0x1c
c00148e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00148ea:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00148ed:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00148f1:	0f b7 f8             	movzx  edi,ax
c00148f4:	52                   	push   edx
c00148f5:	0f b7 c0             	movzx  eax,ax
c00148f8:	50                   	push   eax
c00148f9:	e8 6c fb ff ff       	call   c001446a <Vm::realToLinear(unsigned short, unsigned short)>
c00148fe:	5a                   	pop    edx
c00148ff:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014902:	59                   	pop    ecx
c0014903:	89 c1                	mov    ecx,eax
c0014905:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014908:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001490c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014911:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014915:	0f b7 c5             	movzx  eax,bp
c0014918:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001491c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014920:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014924:	e8 41 fb ff ff       	call   c001446a <Vm::realToLinear(unsigned short, unsigned short)>
c0014929:	5e                   	pop    esi
c001492a:	be 06 00 00 00       	mov    esi,0x6
c001492f:	5a                   	pop    edx
c0014930:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014935:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001493a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001493d:	80 fa 9d             	cmp    dl,0x9d
c0014940:	0f 84 2c 02 00 00    	je     c0014b72 <Vm::faultHandler(regs*)+0x293>
c0014946:	0f 87 91 00 00 00    	ja     c00149dd <Vm::faultHandler(regs*)+0xfe>
c001494c:	80 fa 66             	cmp    dl,0x66
c001494f:	0f 84 98 01 00 00    	je     c0014aed <Vm::faultHandler(regs*)+0x20e>
c0014955:	77 47                	ja     c001499e <Vm::faultHandler(regs*)+0xbf>
c0014957:	80 fa 36             	cmp    dl,0x36
c001495a:	0f 84 80 01 00 00    	je     c0014ae0 <Vm::faultHandler(regs*)+0x201>
c0014960:	77 1a                	ja     c001497c <Vm::faultHandler(regs*)+0x9d>
c0014962:	80 fa 26             	cmp    dl,0x26
c0014965:	0f 84 4e 01 00 00    	je     c0014ab9 <Vm::faultHandler(regs*)+0x1da>
c001496b:	80 fa 2e             	cmp    dl,0x2e
c001496e:	0f 85 e2 05 00 00    	jne    c0014f56 <Vm::faultHandler(regs*)+0x677>
c0014974:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014977:	31 f6                	xor    esi,esi
c0014979:	41                   	inc    ecx
c001497a:	eb be                	jmp    c001493a <Vm::faultHandler(regs*)+0x5b>
c001497c:	80 fa 64             	cmp    dl,0x64
c001497f:	0f 84 41 01 00 00    	je     c0014ac6 <Vm::faultHandler(regs*)+0x1e7>
c0014985:	0f 87 48 01 00 00    	ja     c0014ad3 <Vm::faultHandler(regs*)+0x1f4>
c001498b:	80 fa 3e             	cmp    dl,0x3e
c001498e:	0f 85 c2 05 00 00    	jne    c0014f56 <Vm::faultHandler(regs*)+0x677>
c0014994:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014997:	be 01 00 00 00       	mov    esi,0x1
c001499c:	eb db                	jmp    c0014979 <Vm::faultHandler(regs*)+0x9a>
c001499e:	80 fa 6d             	cmp    dl,0x6d
c00149a1:	0f 84 ec 02 00 00    	je     c0014c93 <Vm::faultHandler(regs*)+0x3b4>
c00149a7:	77 17                	ja     c00149c0 <Vm::faultHandler(regs*)+0xe1>
c00149a9:	80 fa 67             	cmp    dl,0x67
c00149ac:	0f 84 48 01 00 00    	je     c0014afa <Vm::faultHandler(regs*)+0x21b>
c00149b2:	80 fa 6c             	cmp    dl,0x6c
c00149b5:	0f 84 69 02 00 00    	je     c0014c24 <Vm::faultHandler(regs*)+0x345>
c00149bb:	e9 96 05 00 00       	jmp    c0014f56 <Vm::faultHandler(regs*)+0x677>
c00149c0:	80 fa 6f             	cmp    dl,0x6f
c00149c3:	0f 84 f4 03 00 00    	je     c0014dbd <Vm::faultHandler(regs*)+0x4de>
c00149c9:	0f 82 59 03 00 00    	jb     c0014d28 <Vm::faultHandler(regs*)+0x449>
c00149cf:	80 fa 9c             	cmp    dl,0x9c
c00149d2:	0f 84 2f 01 00 00    	je     c0014b07 <Vm::faultHandler(regs*)+0x228>
c00149d8:	e9 79 05 00 00       	jmp    c0014f56 <Vm::faultHandler(regs*)+0x677>
c00149dd:	80 fa ec             	cmp    dl,0xec
c00149e0:	0f 84 14 05 00 00    	je     c0014efa <Vm::faultHandler(regs*)+0x61b>
c00149e6:	77 7b                	ja     c0014a63 <Vm::faultHandler(regs*)+0x184>
c00149e8:	80 fa e4             	cmp    dl,0xe4
c00149eb:	0f 84 93 04 00 00    	je     c0014e84 <Vm::faultHandler(regs*)+0x5a5>
c00149f1:	77 53                	ja     c0014a46 <Vm::faultHandler(regs*)+0x167>
c00149f3:	80 fa cd             	cmp    dl,0xcd
c00149f6:	0f 84 d9 01 00 00    	je     c0014bd5 <Vm::faultHandler(regs*)+0x2f6>
c00149fc:	80 fa cf             	cmp    dl,0xcf
c00149ff:	0f 85 51 05 00 00    	jne    c0014f56 <Vm::faultHandler(regs*)+0x677>
c0014a05:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a08:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014a0b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014a0f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014a12:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014a16:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a1c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a1f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a23:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a29:	66 c1 e8 09          	shr    ax,0x9
c0014a2d:	83 e0 01             	and    eax,0x1
c0014a30:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a33:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a36:	83 c0 06             	add    eax,0x6
c0014a39:	25 ff ff 00 00       	and    eax,0xffff
c0014a3e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a41:	e9 0c 05 00 00       	jmp    c0014f52 <Vm::faultHandler(regs*)+0x673>
c0014a46:	80 fa e6             	cmp    dl,0xe6
c0014a49:	0f 84 7f 04 00 00    	je     c0014ece <Vm::faultHandler(regs*)+0x5ef>
c0014a4f:	0f 82 4b 04 00 00    	jb     c0014ea0 <Vm::faultHandler(regs*)+0x5c1>
c0014a55:	80 fa e7             	cmp    dl,0xe7
c0014a58:	0f 84 87 04 00 00    	je     c0014ee5 <Vm::faultHandler(regs*)+0x606>
c0014a5e:	e9 f3 04 00 00       	jmp    c0014f56 <Vm::faultHandler(regs*)+0x677>
c0014a63:	80 fa ef             	cmp    dl,0xef
c0014a66:	0f 84 d1 04 00 00    	je     c0014f3d <Vm::faultHandler(regs*)+0x65e>
c0014a6c:	77 28                	ja     c0014a96 <Vm::faultHandler(regs*)+0x1b7>
c0014a6e:	80 fa ed             	cmp    dl,0xed
c0014a71:	0f 84 9f 04 00 00    	je     c0014f16 <Vm::faultHandler(regs*)+0x637>
c0014a77:	80 fa ee             	cmp    dl,0xee
c0014a7a:	0f 85 d6 04 00 00    	jne    c0014f56 <Vm::faultHandler(regs*)+0x677>
c0014a80:	50                   	push   eax
c0014a81:	50                   	push   eax
c0014a82:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014a86:	50                   	push   eax
c0014a87:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014a8b:	50                   	push   eax
c0014a8c:	e8 a3 f9 ff ff       	call   c0014434 <Vm::outbv(unsigned short, unsigned char)>
c0014a91:	e9 9f 04 00 00       	jmp    c0014f35 <Vm::faultHandler(regs*)+0x656>
c0014a96:	80 fa fa             	cmp    dl,0xfa
c0014a99:	0f 84 69 01 00 00    	je     c0014c08 <Vm::faultHandler(regs*)+0x329>
c0014a9f:	80 fa fb             	cmp    dl,0xfb
c0014aa2:	0f 84 6e 01 00 00    	je     c0014c16 <Vm::faultHandler(regs*)+0x337>
c0014aa8:	80 fa f3             	cmp    dl,0xf3
c0014aab:	0f 85 a5 04 00 00    	jne    c0014f56 <Vm::faultHandler(regs*)+0x677>
c0014ab1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ab4:	e9 c0 fe ff ff       	jmp    c0014979 <Vm::faultHandler(regs*)+0x9a>
c0014ab9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014abc:	be 02 00 00 00       	mov    esi,0x2
c0014ac1:	e9 b3 fe ff ff       	jmp    c0014979 <Vm::faultHandler(regs*)+0x9a>
c0014ac6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ac9:	be 03 00 00 00       	mov    esi,0x3
c0014ace:	e9 a6 fe ff ff       	jmp    c0014979 <Vm::faultHandler(regs*)+0x9a>
c0014ad3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ad6:	be 04 00 00 00       	mov    esi,0x4
c0014adb:	e9 99 fe ff ff       	jmp    c0014979 <Vm::faultHandler(regs*)+0x9a>
c0014ae0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ae3:	be 05 00 00 00       	mov    esi,0x5
c0014ae8:	e9 8c fe ff ff       	jmp    c0014979 <Vm::faultHandler(regs*)+0x9a>
c0014aed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014af0:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014af5:	e9 7f fe ff ff       	jmp    c0014979 <Vm::faultHandler(regs*)+0x9a>
c0014afa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014afd:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014b02:	e9 72 fe ff ff       	jmp    c0014979 <Vm::faultHandler(regs*)+0x9a>
c0014b07:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014b0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014b0e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b13:	74 30                	je     c0014b45 <Vm::faultHandler(regs*)+0x266>
c0014b15:	83 e9 04             	sub    ecx,0x4
c0014b18:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b1e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b24:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b27:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b2a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b30:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b34:	0f 84 15 04 00 00    	je     c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014b3a:	80 ce 02             	or     dh,0x2
c0014b3d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b40:	e9 0a 04 00 00       	jmp    c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014b45:	83 e9 02             	sub    ecx,0x2
c0014b48:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b4e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b51:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b55:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b5b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b5f:	74 05                	je     c0014b66 <Vm::faultHandler(regs*)+0x287>
c0014b61:	80 ce 02             	or     dh,0x2
c0014b64:	eb 03                	jmp    c0014b69 <Vm::faultHandler(regs*)+0x28a>
c0014b66:	80 e6 fd             	and    dh,0xfd
c0014b69:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b6d:	e9 dd 03 00 00       	jmp    c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014b72:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b77:	74 2a                	je     c0014ba3 <Vm::faultHandler(regs*)+0x2c4>
c0014b79:	8b 10                	mov    edx,DWORD PTR [eax]
c0014b7b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b81:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b87:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b8c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b92:	c1 e8 09             	shr    eax,0x9
c0014b95:	83 e0 01             	and    eax,0x1
c0014b98:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b9b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b9e:	83 c0 04             	add    eax,0x4
c0014ba1:	eb 25                	jmp    c0014bc8 <Vm::faultHandler(regs*)+0x2e9>
c0014ba3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014ba6:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bac:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014baf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014bb2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bb8:	66 c1 e8 09          	shr    ax,0x9
c0014bbc:	83 e0 01             	and    eax,0x1
c0014bbf:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bc2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bc5:	83 c0 02             	add    eax,0x2
c0014bc8:	25 ff ff 00 00       	and    eax,0xffff
c0014bcd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014bd0:	e9 7a 03 00 00       	jmp    c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014bd5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bd9:	3c ee                	cmp    al,0xee
c0014bdb:	75 10                	jne    c0014bed <Vm::faultHandler(regs*)+0x30e>
c0014bdd:	83 ec 0c             	sub    esp,0xc
c0014be0:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014be3:	e8 e9 f8 ff ff       	call   c00144d1 <Vm::mainloop3(unsigned long)>
c0014be8:	e9 4b 03 00 00       	jmp    c0014f38 <Vm::faultHandler(regs*)+0x659>
c0014bed:	83 ec 0c             	sub    esp,0xc
c0014bf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014bf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bf8:	51                   	push   ecx
c0014bf9:	50                   	push   eax
c0014bfa:	53                   	push   ebx
c0014bfb:	e8 e1 fb ff ff       	call   c00147e1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014c00:	83 c4 20             	add    esp,0x20
c0014c03:	e9 4a 03 00 00       	jmp    c0014f52 <Vm::faultHandler(regs*)+0x673>
c0014c08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c0d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014c11:	e9 39 03 00 00       	jmp    c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014c16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c1b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014c1f:	e9 2b 03 00 00       	jmp    c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014c24:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c27:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c2c:	74 2b                	je     c0014c59 <Vm::faultHandler(regs*)+0x37a>
c0014c2e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014c35:	76 22                	jbe    c0014c59 <Vm::faultHandler(regs*)+0x37a>
c0014c37:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c3b:	50                   	push   eax
c0014c3c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c40:	50                   	push   eax
c0014c41:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c45:	50                   	push   eax
c0014c46:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c4a:	50                   	push   eax
c0014c4b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c4f:	50                   	push   eax
c0014c50:	6a 6c                	push   0x6c
c0014c52:	6a 6c                	push   0x6c
c0014c54:	e9 b9 01 00 00       	jmp    c0014e12 <Vm::faultHandler(regs*)+0x533>
c0014c59:	83 ec 0c             	sub    esp,0xc
c0014c5c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c60:	0f b7 f6             	movzx  esi,si
c0014c63:	50                   	push   eax
c0014c64:	e8 b8 f7 ff ff       	call   c0014421 <Vm::inbv(unsigned short)>
c0014c69:	83 c4 0c             	add    esp,0xc
c0014c6c:	0f b6 c0             	movzx  eax,al
c0014c6f:	50                   	push   eax
c0014c70:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014c74:	50                   	push   eax
c0014c75:	56                   	push   esi
c0014c76:	e8 24 fc ff ff       	call   c001489f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014c7b:	83 c4 10             	add    esp,0x10
c0014c7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c81:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c85:	74 03                	je     c0014c8a <Vm::faultHandler(regs*)+0x3ab>
c0014c87:	48                   	dec    eax
c0014c88:	eb 01                	jmp    c0014c8b <Vm::faultHandler(regs*)+0x3ac>
c0014c8a:	40                   	inc    eax
c0014c8b:	0f b7 c0             	movzx  eax,ax
c0014c8e:	e9 8d 00 00 00       	jmp    c0014d20 <Vm::faultHandler(regs*)+0x441>
c0014c93:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c99:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c9e:	74 29                	je     c0014cc9 <Vm::faultHandler(regs*)+0x3ea>
c0014ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0014ca5:	76 22                	jbe    c0014cc9 <Vm::faultHandler(regs*)+0x3ea>
c0014ca7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cab:	50                   	push   eax
c0014cac:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cb0:	50                   	push   eax
c0014cb1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cb5:	50                   	push   eax
c0014cb6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cba:	50                   	push   eax
c0014cbb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cbf:	50                   	push   eax
c0014cc0:	6a 6d                	push   0x6d
c0014cc2:	6a 6d                	push   0x6d
c0014cc4:	e9 49 01 00 00       	jmp    c0014e12 <Vm::faultHandler(regs*)+0x533>
c0014cc9:	0f b7 c8             	movzx  ecx,ax
c0014ccc:	0f b7 f6             	movzx  esi,si
c0014ccf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014cd2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cd7:	74 20                	je     c0014cf9 <Vm::faultHandler(regs*)+0x41a>
c0014cd9:	ed                   	in     eax,dx
c0014cda:	55                   	push   ebp
c0014cdb:	50                   	push   eax
c0014cdc:	51                   	push   ecx
c0014cdd:	56                   	push   esi
c0014cde:	e8 e7 fb ff ff       	call   c00148ca <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014ce3:	83 c4 10             	add    esp,0x10
c0014ce6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ce9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ced:	74 05                	je     c0014cf4 <Vm::faultHandler(regs*)+0x415>
c0014cef:	83 e8 04             	sub    eax,0x4
c0014cf2:	eb 27                	jmp    c0014d1b <Vm::faultHandler(regs*)+0x43c>
c0014cf4:	83 c0 04             	add    eax,0x4
c0014cf7:	eb 22                	jmp    c0014d1b <Vm::faultHandler(regs*)+0x43c>
c0014cf9:	66 ed                	in     ax,dx
c0014cfb:	0f b7 c0             	movzx  eax,ax
c0014cfe:	57                   	push   edi
c0014cff:	50                   	push   eax
c0014d00:	51                   	push   ecx
c0014d01:	56                   	push   esi
c0014d02:	e8 ad fb ff ff       	call   c00148b4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014d07:	83 c4 10             	add    esp,0x10
c0014d0a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d0d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d11:	74 05                	je     c0014d18 <Vm::faultHandler(regs*)+0x439>
c0014d13:	83 e8 02             	sub    eax,0x2
c0014d16:	eb 03                	jmp    c0014d1b <Vm::faultHandler(regs*)+0x43c>
c0014d18:	83 c0 02             	add    eax,0x2
c0014d1b:	25 ff ff 00 00       	and    eax,0xffff
c0014d20:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014d23:	e9 27 02 00 00       	jmp    c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014d28:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d2b:	3c 05                	cmp    al,0x5
c0014d2d:	77 24                	ja     c0014d53 <Vm::faultHandler(regs*)+0x474>
c0014d2f:	0f b6 c0             	movzx  eax,al
c0014d32:	ff 24 85 5c ef 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe10a4]
c0014d39:	0f b7 fd             	movzx  edi,bp
c0014d3c:	eb 15                	jmp    c0014d53 <Vm::faultHandler(regs*)+0x474>
c0014d3e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014d42:	eb 0f                	jmp    c0014d53 <Vm::faultHandler(regs*)+0x474>
c0014d44:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014d48:	eb 09                	jmp    c0014d53 <Vm::faultHandler(regs*)+0x474>
c0014d4a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014d4e:	eb 03                	jmp    c0014d53 <Vm::faultHandler(regs*)+0x474>
c0014d50:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014d53:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d56:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d5b:	74 29                	je     c0014d86 <Vm::faultHandler(regs*)+0x4a7>
c0014d5d:	3d ff ff 00 00       	cmp    eax,0xffff
c0014d62:	76 22                	jbe    c0014d86 <Vm::faultHandler(regs*)+0x4a7>
c0014d64:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d68:	50                   	push   eax
c0014d69:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d6d:	50                   	push   eax
c0014d6e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d72:	50                   	push   eax
c0014d73:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d77:	50                   	push   eax
c0014d78:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d7c:	50                   	push   eax
c0014d7d:	6a 6e                	push   0x6e
c0014d7f:	6a 6e                	push   0x6e
c0014d81:	e9 8c 00 00 00       	jmp    c0014e12 <Vm::faultHandler(regs*)+0x533>
c0014d86:	0f b7 c0             	movzx  eax,ax
c0014d89:	52                   	push   edx
c0014d8a:	52                   	push   edx
c0014d8b:	50                   	push   eax
c0014d8c:	57                   	push   edi
c0014d8d:	e8 d9 fa ff ff       	call   c001486b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014d92:	59                   	pop    ecx
c0014d93:	0f b6 c0             	movzx  eax,al
c0014d96:	5e                   	pop    esi
c0014d97:	50                   	push   eax
c0014d98:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014d9c:	50                   	push   eax
c0014d9d:	e8 92 f6 ff ff       	call   c0014434 <Vm::outbv(unsigned short, unsigned char)>
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014da8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014dac:	74 03                	je     c0014db1 <Vm::faultHandler(regs*)+0x4d2>
c0014dae:	48                   	dec    eax
c0014daf:	eb 01                	jmp    c0014db2 <Vm::faultHandler(regs*)+0x4d3>
c0014db1:	40                   	inc    eax
c0014db2:	0f b7 c0             	movzx  eax,ax
c0014db5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014db8:	e9 92 01 00 00       	jmp    c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014dbd:	8d 46 ff             	lea    eax,[esi-0x1]
c0014dc0:	3c 05                	cmp    al,0x5
c0014dc2:	77 1f                	ja     c0014de3 <Vm::faultHandler(regs*)+0x504>
c0014dc4:	0f b6 c0             	movzx  eax,al
c0014dc7:	ff 24 85 74 ef 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe108c]
c0014dce:	89 ef                	mov    edi,ebp
c0014dd0:	eb 11                	jmp    c0014de3 <Vm::faultHandler(regs*)+0x504>
c0014dd2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014dd5:	eb 0c                	jmp    c0014de3 <Vm::faultHandler(regs*)+0x504>
c0014dd7:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014dda:	eb 07                	jmp    c0014de3 <Vm::faultHandler(regs*)+0x504>
c0014ddc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014ddf:	eb 02                	jmp    c0014de3 <Vm::faultHandler(regs*)+0x504>
c0014de1:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014de3:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014de6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014deb:	74 37                	je     c0014e24 <Vm::faultHandler(regs*)+0x545>
c0014ded:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014df3:	76 2f                	jbe    c0014e24 <Vm::faultHandler(regs*)+0x545>
c0014df5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014df9:	50                   	push   eax
c0014dfa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014dfe:	50                   	push   eax
c0014dff:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e03:	50                   	push   eax
c0014e04:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e08:	50                   	push   eax
c0014e09:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e0d:	50                   	push   eax
c0014e0e:	6a 6f                	push   0x6f
c0014e10:	6a 6f                	push   0x6f
c0014e12:	68 02 ef 01 c0       	push   0xc001ef02
c0014e17:	e8 51 58 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0014e1c:	83 c4 20             	add    esp,0x20
c0014e1f:	e9 86 01 00 00       	jmp    c0014faa <Vm::faultHandler(regs*)+0x6cb>
c0014e24:	0f b7 d7             	movzx  edx,di
c0014e27:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014e2a:	0f b7 c6             	movzx  eax,si
c0014e2d:	81 e1 00 04 00 00    	and    ecx,0x400
c0014e33:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014e36:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e3b:	74 1d                	je     c0014e5a <Vm::faultHandler(regs*)+0x57b>
c0014e3d:	55                   	push   ebp
c0014e3e:	55                   	push   ebp
c0014e3f:	50                   	push   eax
c0014e40:	52                   	push   edx
c0014e41:	e8 48 fa ff ff       	call   c001488e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014e46:	83 c4 10             	add    esp,0x10
c0014e49:	89 fa                	mov    edx,edi
c0014e4b:	ef                   	out    dx,eax
c0014e4c:	85 c9                	test   ecx,ecx
c0014e4e:	74 05                	je     c0014e55 <Vm::faultHandler(regs*)+0x576>
c0014e50:	83 ee 04             	sub    esi,0x4
c0014e53:	eb 21                	jmp    c0014e76 <Vm::faultHandler(regs*)+0x597>
c0014e55:	83 c6 04             	add    esi,0x4
c0014e58:	eb 1c                	jmp    c0014e76 <Vm::faultHandler(regs*)+0x597>
c0014e5a:	55                   	push   ebp
c0014e5b:	55                   	push   ebp
c0014e5c:	50                   	push   eax
c0014e5d:	52                   	push   edx
c0014e5e:	e8 19 fa ff ff       	call   c001487c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	89 fa                	mov    edx,edi
c0014e68:	66 ef                	out    dx,ax
c0014e6a:	85 c9                	test   ecx,ecx
c0014e6c:	74 05                	je     c0014e73 <Vm::faultHandler(regs*)+0x594>
c0014e6e:	83 ee 02             	sub    esi,0x2
c0014e71:	eb 03                	jmp    c0014e76 <Vm::faultHandler(regs*)+0x597>
c0014e73:	83 c6 02             	add    esi,0x2
c0014e76:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014e7c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014e7f:	e9 cb 00 00 00       	jmp    c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014e84:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e8b:	83 ec 0c             	sub    esp,0xc
c0014e8e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e92:	50                   	push   eax
c0014e93:	e8 89 f5 ff ff       	call   c0014421 <Vm::inbv(unsigned short)>
c0014e98:	0f b6 c0             	movzx  eax,al
c0014e9b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e9e:	eb 3f                	jmp    c0014edf <Vm::faultHandler(regs*)+0x600>
c0014ea0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ea5:	74 07                	je     c0014eae <Vm::faultHandler(regs*)+0x5cf>
c0014ea7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014eab:	ed                   	in     eax,dx
c0014eac:	eb 14                	jmp    c0014ec2 <Vm::faultHandler(regs*)+0x5e3>
c0014eae:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014eb1:	66 31 f6             	xor    si,si
c0014eb4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014eb7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ebb:	66 ed                	in     ax,dx
c0014ebd:	0f b7 c0             	movzx  eax,ax
c0014ec0:	09 f0                	or     eax,esi
c0014ec2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014ec5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014ec9:	e9 84 00 00 00       	jmp    c0014f52 <Vm::faultHandler(regs*)+0x673>
c0014ece:	52                   	push   edx
c0014ecf:	52                   	push   edx
c0014ed0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014ed4:	50                   	push   eax
c0014ed5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ed9:	50                   	push   eax
c0014eda:	e8 55 f5 ff ff       	call   c0014434 <Vm::outbv(unsigned short, unsigned char)>
c0014edf:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014ee3:	eb 53                	jmp    c0014f38 <Vm::faultHandler(regs*)+0x659>
c0014ee5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014ee8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014eec:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ef1:	74 03                	je     c0014ef6 <Vm::faultHandler(regs*)+0x617>
c0014ef3:	ef                   	out    dx,eax
c0014ef4:	eb cf                	jmp    c0014ec5 <Vm::faultHandler(regs*)+0x5e6>
c0014ef6:	66 ef                	out    dx,ax
c0014ef8:	eb cb                	jmp    c0014ec5 <Vm::faultHandler(regs*)+0x5e6>
c0014efa:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014f01:	83 ec 0c             	sub    esp,0xc
c0014f04:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f08:	50                   	push   eax
c0014f09:	e8 13 f5 ff ff       	call   c0014421 <Vm::inbv(unsigned short)>
c0014f0e:	0f b6 c0             	movzx  eax,al
c0014f11:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014f14:	eb 1f                	jmp    c0014f35 <Vm::faultHandler(regs*)+0x656>
c0014f16:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f19:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f1e:	74 03                	je     c0014f23 <Vm::faultHandler(regs*)+0x644>
c0014f20:	ed                   	in     eax,dx
c0014f21:	eb 0d                	jmp    c0014f30 <Vm::faultHandler(regs*)+0x651>
c0014f23:	66 ed                	in     ax,dx
c0014f25:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014f28:	0f b7 c0             	movzx  eax,ax
c0014f2b:	66 31 d2             	xor    dx,dx
c0014f2e:	09 d0                	or     eax,edx
c0014f30:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014f33:	eb 1a                	jmp    c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014f35:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f38:	83 c4 10             	add    esp,0x10
c0014f3b:	eb 15                	jmp    c0014f52 <Vm::faultHandler(regs*)+0x673>
c0014f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f40:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f43:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f48:	74 03                	je     c0014f4d <Vm::faultHandler(regs*)+0x66e>
c0014f4a:	ef                   	out    dx,eax
c0014f4b:	eb 02                	jmp    c0014f4f <Vm::faultHandler(regs*)+0x670>
c0014f4d:	66 ef                	out    dx,ax
c0014f4f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f52:	b0 01                	mov    al,0x1
c0014f54:	eb 56                	jmp    c0014fac <Vm::faultHandler(regs*)+0x6cd>
c0014f56:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f5a:	50                   	push   eax
c0014f5b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f5f:	50                   	push   eax
c0014f60:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f64:	50                   	push   eax
c0014f65:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f69:	50                   	push   eax
c0014f6a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f6e:	50                   	push   eax
c0014f6f:	52                   	push   edx
c0014f70:	52                   	push   edx
c0014f71:	68 2f ef 01 c0       	push   0xc001ef2f
c0014f76:	e8 f2 56 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0014f7b:	83 c4 20             	add    esp,0x20
c0014f7e:	83 ec 0c             	sub    esp,0xc
c0014f81:	6a 60                	push   0x60
c0014f83:	e8 99 f4 ff ff       	call   c0014421 <Vm::inbv(unsigned short)>
c0014f88:	83 c4 10             	add    esp,0x10
c0014f8b:	3c 1c                	cmp    al,0x1c
c0014f8d:	74 04                	je     c0014f93 <Vm::faultHandler(regs*)+0x6b4>
c0014f8f:	3c 5a                	cmp    al,0x5a
c0014f91:	75 eb                	jne    c0014f7e <Vm::faultHandler(regs*)+0x69f>
c0014f93:	3c 5a                	cmp    al,0x5a
c0014f95:	74 04                	je     c0014f9b <Vm::faultHandler(regs*)+0x6bc>
c0014f97:	3c 1c                	cmp    al,0x1c
c0014f99:	75 0f                	jne    c0014faa <Vm::faultHandler(regs*)+0x6cb>
c0014f9b:	83 ec 0c             	sub    esp,0xc
c0014f9e:	6a 60                	push   0x60
c0014fa0:	e8 7c f4 ff ff       	call   c0014421 <Vm::inbv(unsigned short)>
c0014fa5:	83 c4 10             	add    esp,0x10
c0014fa8:	eb e9                	jmp    c0014f93 <Vm::faultHandler(regs*)+0x6b4>
c0014faa:	31 c0                	xor    eax,eax
c0014fac:	83 c4 1c             	add    esp,0x1c
c0014faf:	5b                   	pop    ebx
c0014fb0:	5e                   	pop    esi
c0014fb1:	5f                   	pop    edi
c0014fb2:	5d                   	pop    ebp
c0014fb3:	c3                   	ret    

c0014fb4 <noCopro(unsigned long)>:
c0014fb4:	c3                   	ret    

c0014fb5 <nmiHandler(regs*, void*)>:
c0014fb5:	83 ec 0c             	sub    esp,0xc
c0014fb8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014fbd:	83 ec 0c             	sub    esp,0xc
c0014fc0:	50                   	push   eax
c0014fc1:	e8 14 20 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	90                   	nop
c0014fca:	83 c4 0c             	add    esp,0xc
c0014fcd:	c3                   	ret    

c0014fce <doubleFault(regs*, void*)>:
c0014fce:	55                   	push   ebp
c0014fcf:	89 e5                	mov    ebp,esp
c0014fd1:	83 ec 08             	sub    esp,0x8
c0014fd4:	83 ec 0c             	sub    esp,0xc
c0014fd7:	68 8c ef 01 c0       	push   0xc001ef8c
c0014fdc:	e8 0e b3 ff ff       	call   c00102ef <KePanic(char const*)>
c0014fe1:	83 c4 10             	add    esp,0x10
c0014fe4:	90                   	nop
c0014fe5:	c9                   	leave  
c0014fe6:	c3                   	ret    

c0014fe7 <displayDebugInfo(regs*)>:
c0014fe7:	83 ec 1c             	sub    esp,0x1c
c0014fea:	0f 20 c0             	mov    eax,cr0
c0014fed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ff1:	0f 20 d0             	mov    eax,cr2
c0014ff4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ff8:	0f 20 d8             	mov    eax,cr3
c0014ffb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fff:	0f 20 e0             	mov    eax,cr4
c0015002:	89 04 24             	mov    DWORD PTR [esp],eax
c0015005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015009:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001500c:	83 ec 08             	sub    esp,0x8
c001500f:	50                   	push   eax
c0015010:	68 a8 ef 01 c0       	push   0xc001efa8
c0015015:	e8 53 56 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001501a:	83 c4 10             	add    esp,0x10
c001501d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015021:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015024:	83 ec 08             	sub    esp,0x8
c0015027:	50                   	push   eax
c0015028:	68 99 ef 01 c0       	push   0xc001ef99
c001502d:	e8 3b 56 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0015032:	83 c4 10             	add    esp,0x10
c0015035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015039:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001503c:	83 ec 08             	sub    esp,0x8
c001503f:	50                   	push   eax
c0015040:	68 a4 ef 01 c0       	push   0xc001efa4
c0015045:	e8 23 56 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001504a:	83 c4 10             	add    esp,0x10
c001504d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015051:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015054:	83 ec 08             	sub    esp,0x8
c0015057:	50                   	push   eax
c0015058:	68 b3 ef 01 c0       	push   0xc001efb3
c001505d:	e8 0b 56 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0015062:	83 c4 10             	add    esp,0x10
c0015065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015069:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001506c:	83 ec 08             	sub    esp,0x8
c001506f:	50                   	push   eax
c0015070:	68 be ef 01 c0       	push   0xc001efbe
c0015075:	e8 f3 55 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001507a:	83 c4 10             	add    esp,0x10
c001507d:	83 ec 08             	sub    esp,0x8
c0015080:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015084:	68 c9 ef 01 c0       	push   0xc001efc9
c0015089:	e8 df 55 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001508e:	83 c4 10             	add    esp,0x10
c0015091:	83 ec 08             	sub    esp,0x8
c0015094:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015098:	68 d4 ef 01 c0       	push   0xc001efd4
c001509d:	e8 cb 55 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c00150a2:	83 c4 10             	add    esp,0x10
c00150a5:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b0:	83 ec 0c             	sub    esp,0xc
c00150b3:	50                   	push   eax
c00150b4:	e8 3e 33 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00150b9:	83 c4 10             	add    esp,0x10
c00150bc:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150c1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150c7:	83 ec 08             	sub    esp,0x8
c00150ca:	68 df ef 01 c0       	push   0xc001efdf
c00150cf:	50                   	push   eax
c00150d0:	e8 61 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150d5:	83 c4 10             	add    esp,0x10
c00150d8:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e3:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00150e8:	8b 12                	mov    edx,DWORD PTR [edx]
c00150ea:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00150ed:	83 c2 0c             	add    edx,0xc
c00150f0:	83 ec 08             	sub    esp,0x8
c00150f3:	52                   	push   edx
c00150f4:	50                   	push   eax
c00150f5:	e8 3c 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150fa:	83 c4 10             	add    esp,0x10
c00150fd:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015102:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015108:	83 ec 08             	sub    esp,0x8
c001510b:	68 e8 ef 01 c0       	push   0xc001efe8
c0015110:	50                   	push   eax
c0015111:	e8 20 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015116:	83 c4 10             	add    esp,0x10
c0015119:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001511e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015124:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015128:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001512b:	83 ec 08             	sub    esp,0x8
c001512e:	52                   	push   edx
c001512f:	50                   	push   eax
c0015130:	e8 bb 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015135:	83 c4 10             	add    esp,0x10
c0015138:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001513d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015143:	83 ec 08             	sub    esp,0x8
c0015146:	68 f0 ef 01 c0       	push   0xc001eff0
c001514b:	50                   	push   eax
c001514c:	e8 e5 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015151:	83 c4 10             	add    esp,0x10
c0015154:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015159:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015163:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015166:	83 ec 08             	sub    esp,0x8
c0015169:	52                   	push   edx
c001516a:	50                   	push   eax
c001516b:	e8 80 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015170:	83 c4 10             	add    esp,0x10
c0015173:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015178:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001517e:	83 ec 08             	sub    esp,0x8
c0015181:	68 f8 ef 01 c0       	push   0xc001eff8
c0015186:	50                   	push   eax
c0015187:	e8 aa 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015194:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001519a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001519e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00151a1:	83 ec 08             	sub    esp,0x8
c00151a4:	52                   	push   edx
c00151a5:	50                   	push   eax
c00151a6:	e8 45 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151ab:	83 c4 10             	add    esp,0x10
c00151ae:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b9:	83 ec 08             	sub    esp,0x8
c00151bc:	68 00 f0 01 c0       	push   0xc001f000
c00151c1:	50                   	push   eax
c00151c2:	e8 6f 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151c7:	83 c4 10             	add    esp,0x10
c00151ca:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151d9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00151dc:	83 ec 08             	sub    esp,0x8
c00151df:	52                   	push   edx
c00151e0:	50                   	push   eax
c00151e1:	e8 0a 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151e6:	83 c4 10             	add    esp,0x10
c00151e9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151f4:	83 ec 08             	sub    esp,0x8
c00151f7:	68 08 f0 01 c0       	push   0xc001f008
c00151fc:	50                   	push   eax
c00151fd:	e8 34 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015202:	83 c4 10             	add    esp,0x10
c0015205:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001520a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015210:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015214:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015217:	83 ec 08             	sub    esp,0x8
c001521a:	52                   	push   edx
c001521b:	50                   	push   eax
c001521c:	e8 cf 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015221:	83 c4 10             	add    esp,0x10
c0015224:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015229:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001522f:	83 ec 08             	sub    esp,0x8
c0015232:	68 10 f0 01 c0       	push   0xc001f010
c0015237:	50                   	push   eax
c0015238:	e8 f9 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001523d:	83 c4 10             	add    esp,0x10
c0015240:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015245:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001524b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001524f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015252:	83 ec 08             	sub    esp,0x8
c0015255:	52                   	push   edx
c0015256:	50                   	push   eax
c0015257:	e8 94 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001525c:	83 c4 10             	add    esp,0x10
c001525f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015264:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001526a:	83 ec 08             	sub    esp,0x8
c001526d:	68 18 f0 01 c0       	push   0xc001f018
c0015272:	50                   	push   eax
c0015273:	e8 be 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015280:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015286:	83 ec 08             	sub    esp,0x8
c0015289:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001528d:	50                   	push   eax
c001528e:	e8 5d 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015293:	83 c4 10             	add    esp,0x10
c0015296:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001529b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152a1:	83 ec 08             	sub    esp,0x8
c00152a4:	68 21 f0 01 c0       	push   0xc001f021
c00152a9:	50                   	push   eax
c00152aa:	e8 87 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00152af:	83 c4 10             	add    esp,0x10
c00152b2:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00152b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152bd:	83 ec 08             	sub    esp,0x8
c00152c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00152c4:	50                   	push   eax
c00152c5:	e8 26 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00152ca:	83 c4 10             	add    esp,0x10
c00152cd:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00152d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152d8:	83 ec 08             	sub    esp,0x8
c00152db:	68 29 f0 01 c0       	push   0xc001f029
c00152e0:	50                   	push   eax
c00152e1:	e8 50 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00152e6:	83 c4 10             	add    esp,0x10
c00152e9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00152ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f4:	83 ec 08             	sub    esp,0x8
c00152f7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00152fb:	50                   	push   eax
c00152fc:	e8 ef 33 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	fa                   	cli    
c0015305:	f4                   	hlt    
c0015306:	eb fe                	jmp    c0015306 <displayDebugInfo(regs*)+0x31f>

c0015308 <HalSystemIdle()>:
c0015308:	56                   	push   esi
c0015309:	53                   	push   ebx
c001530a:	83 ec 14             	sub    esp,0x14
c001530d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015312:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015318:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001531e:	83 e0 04             	and    eax,0x4
c0015321:	84 c0                	test   al,al
c0015323:	0f 95 c0             	setne  al
c0015326:	84 c0                	test   al,al
c0015328:	74 4c                	je     c0015376 <HalSystemIdle()+0x6e>
c001532a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001532f:	83 ec 08             	sub    esp,0x8
c0015332:	68 e1 00 00 00       	push   0xe1
c0015337:	50                   	push   eax
c0015338:	e8 b5 1a ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001533d:	83 c4 10             	add    esp,0x10
c0015340:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015344:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015348:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001534d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015351:	83 e2 02             	and    edx,0x2
c0015354:	89 d3                	mov    ebx,edx
c0015356:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001535a:	83 e2 00             	and    edx,0x0
c001535d:	89 d6                	mov    esi,edx
c001535f:	56                   	push   esi
c0015360:	53                   	push   ebx
c0015361:	68 e1 00 00 00       	push   0xe1
c0015366:	50                   	push   eax
c0015367:	e8 b2 1a ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c001536c:	83 c4 10             	add    esp,0x10
c001536f:	e8 20 ae fe ff       	call   c0000194 <doTPAUSE>
c0015374:	eb 01                	jmp    c0015377 <HalSystemIdle()+0x6f>
c0015376:	f4                   	hlt    
c0015377:	90                   	nop
c0015378:	83 c4 14             	add    esp,0x14
c001537b:	5b                   	pop    ebx
c001537c:	5e                   	pop    esi
c001537d:	c3                   	ret    

c001537e <displayProgramFault(char const*)>:
c001537e:	83 ec 0c             	sub    esp,0xc
c0015381:	83 ec 0c             	sub    esp,0xc
c0015384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015388:	e8 e0 52 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001538d:	83 c4 10             	add    esp,0x10
c0015390:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015395:	8b 00                	mov    eax,DWORD PTR [eax]
c0015397:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001539a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153a0:	85 c0                	test   eax,eax
c00153a2:	74 21                	je     c00153c5 <displayProgramFault(char const*)+0x47>
c00153a4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153b4:	6a 04                	push   0x4
c00153b6:	6a 0f                	push   0xf
c00153b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153bc:	50                   	push   eax
c00153bd:	e8 e6 33 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00153c2:	83 c4 10             	add    esp,0x10
c00153c5:	90                   	nop
c00153c6:	83 c4 0c             	add    esp,0xc
c00153c9:	c3                   	ret    

c00153ca <gpFault(regs*, void*)>:
c00153ca:	83 ec 1c             	sub    esp,0x1c
c00153cd:	c7 05 10 52 02 c0 df 48 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc00148df
c00153d7:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00153dc:	85 c0                	test   eax,eax
c00153de:	74 1c                	je     c00153fc <gpFault(regs*, void*)+0x32>
c00153e0:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00153e5:	83 ec 0c             	sub    esp,0xc
c00153e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153ec:	ff d0                	call   eax
c00153ee:	83 c4 10             	add    esp,0x10
c00153f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00153f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00153fa:	75 2e                	jne    c001542a <gpFault(regs*, void*)+0x60>
c00153fc:	83 ec 0c             	sub    esp,0xc
c00153ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015403:	e8 df fb ff ff       	call   c0014fe7 <displayDebugInfo(regs*)>
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	83 ec 0c             	sub    esp,0xc
c001540e:	68 31 f0 01 c0       	push   0xc001f031
c0015413:	e8 66 ff ff ff       	call   c001537e <displayProgramFault(char const*)>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	83 ec 0c             	sub    esp,0xc
c001541e:	6a 00                	push   0x0
c0015420:	e8 af ee ff ff       	call   c00142d4 <Thr::terminateFromIRQ(int)>
c0015425:	83 c4 10             	add    esp,0x10
c0015428:	eb 01                	jmp    c001542b <gpFault(regs*, void*)+0x61>
c001542a:	90                   	nop
c001542b:	83 c4 1c             	add    esp,0x1c
c001542e:	c3                   	ret    

c001542f <pgFault(regs*, void*)>:
c001542f:	83 ec 1c             	sub    esp,0x1c
c0015432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015436:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015439:	0f 20 d0             	mov    eax,cr2
c001543c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015440:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015444:	83 ec 04             	sub    esp,0x4
c0015447:	52                   	push   edx
c0015448:	50                   	push   eax
c0015449:	68 10 f1 01 c0       	push   0xc001f110
c001544e:	e8 1a 52 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0015453:	83 c4 10             	add    esp,0x10
c0015456:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001545b:	8b 00                	mov    eax,DWORD PTR [eax]
c001545d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015460:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015466:	0f 20 d2             	mov    edx,cr2
c0015469:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001546d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015471:	83 ec 08             	sub    esp,0x8
c0015474:	52                   	push   edx
c0015475:	50                   	push   eax
c0015476:	e8 ff 4d ff ff       	call   c000a27a <VAS::tryLoadBackOffDisk(unsigned long)>
c001547b:	83 c4 10             	add    esp,0x10
c001547e:	84 c0                	test   al,al
c0015480:	75 2e                	jne    c00154b0 <pgFault(regs*, void*)+0x81>
c0015482:	83 ec 0c             	sub    esp,0xc
c0015485:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015489:	e8 59 fb ff ff       	call   c0014fe7 <displayDebugInfo(regs*)>
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	83 ec 0c             	sub    esp,0xc
c0015494:	68 4a f0 01 c0       	push   0xc001f04a
c0015499:	e8 e0 fe ff ff       	call   c001537e <displayProgramFault(char const*)>
c001549e:	83 c4 10             	add    esp,0x10
c00154a1:	83 ec 0c             	sub    esp,0xc
c00154a4:	6a 00                	push   0x0
c00154a6:	e8 29 ee ff ff       	call   c00142d4 <Thr::terminateFromIRQ(int)>
c00154ab:	83 c4 10             	add    esp,0x10
c00154ae:	eb 01                	jmp    c00154b1 <pgFault(regs*, void*)+0x82>
c00154b0:	90                   	nop
c00154b1:	83 c4 1c             	add    esp,0x1c
c00154b4:	c3                   	ret    

c00154b5 <otherISRHandler(regs*, void*)>:
c00154b5:	83 ec 0c             	sub    esp,0xc
c00154b8:	83 ec 0c             	sub    esp,0xc
c00154bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154bf:	e8 23 fb ff ff       	call   c0014fe7 <displayDebugInfo(regs*)>
c00154c4:	83 c4 10             	add    esp,0x10
c00154c7:	83 ec 0c             	sub    esp,0xc
c00154ca:	68 38 f1 01 c0       	push   0xc001f138
c00154cf:	e8 aa fe ff ff       	call   c001537e <displayProgramFault(char const*)>
c00154d4:	83 c4 10             	add    esp,0x10
c00154d7:	83 ec 0c             	sub    esp,0xc
c00154da:	6a 00                	push   0x0
c00154dc:	e8 f3 ed ff ff       	call   c00142d4 <Thr::terminateFromIRQ(int)>
c00154e1:	83 c4 10             	add    esp,0x10
c00154e4:	90                   	nop
c00154e5:	83 c4 0c             	add    esp,0xc
c00154e8:	c3                   	ret    

c00154e9 <opcodeFault(regs*, void*)>:
c00154e9:	55                   	push   ebp
c00154ea:	89 e5                	mov    ebp,esp
c00154ec:	83 ec 08             	sub    esp,0x8
c00154ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f5:	83 ec 08             	sub    esp,0x8
c00154f8:	50                   	push   eax
c00154f9:	68 55 f0 01 c0       	push   0xc001f055
c00154fe:	e8 6a 51 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0015503:	83 c4 10             	add    esp,0x10
c0015506:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001550b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015511:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015517:	84 c0                	test   al,al
c0015519:	74 21                	je     c001553c <opcodeFault(regs*, void*)+0x53>
c001551b:	83 ec 0c             	sub    esp,0xc
c001551e:	68 60 f1 01 c0       	push   0xc001f160
c0015523:	e8 45 51 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0015528:	83 c4 10             	add    esp,0x10
c001552b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015531:	8d 50 19             	lea    edx,[eax+0x19]
c0015534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015537:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001553a:	eb 2b                	jmp    c0015567 <opcodeFault(regs*, void*)+0x7e>
c001553c:	83 ec 0c             	sub    esp,0xc
c001553f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015542:	e8 a0 fa ff ff       	call   c0014fe7 <displayDebugInfo(regs*)>
c0015547:	83 c4 10             	add    esp,0x10
c001554a:	83 ec 0c             	sub    esp,0xc
c001554d:	68 63 f0 01 c0       	push   0xc001f063
c0015552:	e8 27 fe ff ff       	call   c001537e <displayProgramFault(char const*)>
c0015557:	83 c4 10             	add    esp,0x10
c001555a:	83 ec 0c             	sub    esp,0xc
c001555d:	6a 00                	push   0x0
c001555f:	e8 70 ed ff ff       	call   c00142d4 <Thr::terminateFromIRQ(int)>
c0015564:	83 c4 10             	add    esp,0x10
c0015567:	c9                   	leave  
c0015568:	c3                   	ret    

c0015569 <i386SaveCoprocessor(void*)>:
c0015569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001556d:	83 c0 3f             	add    eax,0x3f
c0015570:	83 e0 c0             	and    eax,0xffffffc0
c0015573:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015577:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c001557d <i386LoadCoprocessor(void*)>:
c001557d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015581:	83 c0 3f             	add    eax,0x3f
c0015584:	83 e0 c0             	and    eax,0xffffffc0
c0015587:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001558b:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c0015591 <x87EmulHandler(regs*, void*)>:
c0015591:	53                   	push   ebx
c0015592:	83 ec 08             	sub    esp,0x8
c0015595:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001559a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001559e:	74 10                	je     c00155b0 <x87EmulHandler(regs*, void*)+0x1f>
c00155a0:	83 ec 0c             	sub    esp,0xc
c00155a3:	68 70 f0 01 c0       	push   0xc001f070
c00155a8:	e8 42 ad ff ff       	call   c00102ef <KePanic(char const*)>
c00155ad:	83 c4 10             	add    esp,0x10
c00155b0:	0f 20 c0             	mov    eax,cr0
c00155b3:	a8 08                	test   al,0x8
c00155b5:	74 59                	je     c0015610 <x87EmulHandler(regs*, void*)+0x7f>
c00155b7:	0f 06                	clts   
c00155b9:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c00155be:	85 c0                	test   eax,eax
c00155c0:	74 0e                	je     c00155d0 <x87EmulHandler(regs*, void*)+0x3f>
c00155c2:	83 ec 0c             	sub    esp,0xc
c00155c5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00155c8:	e8 9c ff ff ff       	call   c0015569 <i386SaveCoprocessor(void*)>
c00155cd:	83 c4 10             	add    esp,0x10
c00155d0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00155d6:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00155da:	75 12                	jne    c00155ee <x87EmulHandler(regs*, void*)+0x5d>
c00155dc:	83 ec 0c             	sub    esp,0xc
c00155df:	68 40 02 00 00       	push   0x240
c00155e4:	e8 d0 21 ff ff       	call   c00077b9 <malloc>
c00155e9:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00155ec:	eb 10                	jmp    c00155fe <x87EmulHandler(regs*, void*)+0x6d>
c00155ee:	83 ec 0c             	sub    esp,0xc
c00155f1:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c00155f6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00155f9:	e8 7f ff ff ff       	call   c001557d <i386LoadCoprocessor(void*)>
c00155fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015603:	83 c4 10             	add    esp,0x10
c0015606:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c001560b:	83 c4 08             	add    esp,0x8
c001560e:	5b                   	pop    ebx
c001560f:	c3                   	ret    
c0015610:	83 ec 0c             	sub    esp,0xc
c0015613:	68 84 f0 01 c0       	push   0xc001f084
c0015618:	e8 50 50 ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001561d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015625:	83 c4 18             	add    esp,0x18
c0015628:	5b                   	pop    ebx
c0015629:	e9 a6 ec ff ff       	jmp    c00142d4 <Thr::terminateFromIRQ(int)>

c001562e <HalInitialiseCoprocessor()>:
c001562e:	83 ec 10             	sub    esp,0x10
c0015631:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c001563b:	6a 00                	push   0x0
c001563d:	68 91 55 01 c0       	push   0xc0015591
c0015642:	6a 07                	push   0x7
c0015644:	e8 97 69 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015649:	e8 92 65 00 00       	call   c001bbe0 <avxDetect>
c001564e:	83 c4 10             	add    esp,0x10
c0015651:	85 c0                	test   eax,eax
c0015653:	74 1c                	je     c0015671 <HalInitialiseCoprocessor()+0x43>
c0015655:	c7 05 0c 52 02 c0 0a bc 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bc0a
c001565f:	c7 05 08 52 02 c0 1b bc 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bc1b
c0015669:	83 c4 0c             	add    esp,0xc
c001566c:	e9 bb 65 00 00       	jmp    c001bc2c <avxInit>
c0015671:	e8 4a 68 00 00       	call   c001bec0 <absolutelyNoChanceInHell>
c0015676:	85 c0                	test   eax,eax
c0015678:	74 1c                	je     c0015696 <HalInitialiseCoprocessor()+0x68>
c001567a:	c7 05 0c 52 02 c0 d8 be 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bed8
c0015684:	c7 05 08 52 02 c0 e0 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bee0
c001568e:	83 c4 0c             	add    esp,0xc
c0015691:	e9 52 68 00 00       	jmp    c001bee8 <sseInit>
c0015696:	e8 6b 68 00 00       	call   c001bf06 <x87Detect>
c001569b:	85 c0                	test   eax,eax
c001569d:	74 1c                	je     c00156bb <HalInitialiseCoprocessor()+0x8d>
c001569f:	c7 05 0c 52 02 c0 21 bf 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bf21
c00156a9:	c7 05 08 52 02 c0 28 bf 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bf28
c00156b3:	83 c4 0c             	add    esp,0xc
c00156b6:	e9 74 68 00 00       	jmp    c001bf2f <x87Init>
c00156bb:	c7 05 0c 52 02 c0 b4 4f 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014fb4
c00156c5:	c7 05 08 52 02 c0 b4 4f 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014fb4
c00156cf:	0f 20 c0             	mov    eax,cr0
c00156d2:	83 c8 04             	or     eax,0x4
c00156d5:	0f 22 c0             	mov    cr0,eax
c00156d8:	83 c4 0c             	add    esp,0xc
c00156db:	c3                   	ret    

c00156dc <HalPanic(char const*)>:
c00156dc:	53                   	push   ebx
c00156dd:	83 ec 10             	sub    esp,0x10
c00156e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00156e4:	fa                   	cli    
c00156e5:	53                   	push   ebx
c00156e6:	68 9a f0 01 c0       	push   0xc001f09a
c00156eb:	e8 7d 4f ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c00156f0:	83 c4 0c             	add    esp,0xc
c00156f3:	6a 01                	push   0x1
c00156f5:	6a 0f                	push   0xf
c00156f7:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156fd:	e8 48 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015702:	58                   	pop    eax
c0015703:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015709:	e8 34 2d ff ff       	call   c0008442 <VgaText::clearScreen()>
c001570e:	5a                   	pop    edx
c001570f:	59                   	pop    ecx
c0015710:	68 28 d9 01 c0       	push   0xc001d928
c0015715:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001571b:	e8 62 2b ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015720:	83 c4 0c             	add    esp,0xc
c0015723:	6a 01                	push   0x1
c0015725:	6a 0f                	push   0xf
c0015727:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001572d:	e8 18 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015732:	58                   	pop    eax
c0015733:	5a                   	pop    edx
c0015734:	68 b3 f0 01 c0       	push   0xc001f0b3
c0015739:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001573f:	e8 f2 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015744:	83 c4 0c             	add    esp,0xc
c0015747:	6a 0f                	push   0xf
c0015749:	6a 01                	push   0x1
c001574b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015751:	e8 f4 2a ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015756:	59                   	pop    ecx
c0015757:	58                   	pop    eax
c0015758:	68 bc f0 01 c0       	push   0xc001f0bc
c001575d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015763:	e8 ce 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015768:	83 c4 0c             	add    esp,0xc
c001576b:	6a 01                	push   0x1
c001576d:	6a 0f                	push   0xf
c001576f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015775:	e8 d0 2a ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001577a:	58                   	pop    eax
c001577b:	5a                   	pop    edx
c001577c:	68 00 f1 01 c0       	push   0xc001f100
c0015781:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015787:	e8 aa 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001578c:	59                   	pop    ecx
c001578d:	58                   	pop    eax
c001578e:	68 c9 f0 01 c0       	push   0xc001f0c9
c0015793:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015799:	e8 98 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001579e:	58                   	pop    eax
c001579f:	5a                   	pop    edx
c00157a0:	68 03 f1 01 c0       	push   0xc001f103
c00157a5:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00157ab:	e8 86 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00157b0:	59                   	pop    ecx
c00157b1:	58                   	pop    eax
c00157b2:	53                   	push   ebx
c00157b3:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00157b9:	e8 78 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00157be:	58                   	pop    eax
c00157bf:	5a                   	pop    edx
c00157c0:	68 00 f1 01 c0       	push   0xc001f100
c00157c5:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00157cb:	e8 66 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00157d0:	83 c4 10             	add    esp,0x10
c00157d3:	eb fe                	jmp    c00157d3 <HalPanic(char const*)+0xf7>

c00157d5 <HalQueryPerformanceCounter()>:
c00157d5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00157da:	31 d2                	xor    edx,edx
c00157dc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00157e2:	31 c0                	xor    eax,eax
c00157e4:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00157eb:	74 02                	je     c00157ef <HalQueryPerformanceCounter()+0x1a>
c00157ed:	0f 31                	rdtsc  
c00157ef:	c3                   	ret    

c00157f0 <HalInitialise()>:
c00157f0:	53                   	push   ebx
c00157f1:	83 ec 08             	sub    esp,0x8
c00157f4:	e8 1a 6a ff ff       	call   c000c213 <setupINTS()>
c00157f9:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c0015800:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015805:	75 07                	jne    c001580e <HalInitialise()+0x1e>
c0015807:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001580e:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015814:	83 e0 01             	and    eax,0x1
c0015817:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c001581c:	e8 a7 02 00 00       	call   c0015ac8 <picOpen()>
c0015821:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c0015828:	74 0a                	je     c0015834 <HalInitialise()+0x44>
c001582a:	e8 e1 01 00 00       	call   c0015a10 <picDisable()>
c001582f:	e8 26 5d 00 00       	call   c001b55a <apicOpen()>
c0015834:	bb 0f 00 00 00       	mov    ebx,0xf
c0015839:	50                   	push   eax
c001583a:	6a 00                	push   0x0
c001583c:	68 b5 54 01 c0       	push   0xc00154b5
c0015841:	6a 00                	push   0x0
c0015843:	e8 98 67 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015848:	83 c4 0c             	add    esp,0xc
c001584b:	6a 00                	push   0x0
c001584d:	68 b5 54 01 c0       	push   0xc00154b5
c0015852:	6a 01                	push   0x1
c0015854:	e8 87 67 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015859:	83 c4 0c             	add    esp,0xc
c001585c:	6a 00                	push   0x0
c001585e:	68 b5 4f 01 c0       	push   0xc0014fb5
c0015863:	6a 02                	push   0x2
c0015865:	e8 76 67 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001586a:	83 c4 0c             	add    esp,0xc
c001586d:	6a 00                	push   0x0
c001586f:	68 b5 54 01 c0       	push   0xc00154b5
c0015874:	6a 03                	push   0x3
c0015876:	e8 65 67 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001587b:	83 c4 0c             	add    esp,0xc
c001587e:	6a 00                	push   0x0
c0015880:	68 b5 54 01 c0       	push   0xc00154b5
c0015885:	6a 04                	push   0x4
c0015887:	e8 54 67 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001588c:	83 c4 0c             	add    esp,0xc
c001588f:	6a 00                	push   0x0
c0015891:	68 b5 54 01 c0       	push   0xc00154b5
c0015896:	6a 05                	push   0x5
c0015898:	e8 43 67 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001589d:	83 c4 0c             	add    esp,0xc
c00158a0:	6a 00                	push   0x0
c00158a2:	68 e9 54 01 c0       	push   0xc00154e9
c00158a7:	6a 06                	push   0x6
c00158a9:	e8 32 67 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ae:	83 c4 0c             	add    esp,0xc
c00158b1:	6a 00                	push   0x0
c00158b3:	68 ce 4f 01 c0       	push   0xc0014fce
c00158b8:	6a 08                	push   0x8
c00158ba:	e8 21 67 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158bf:	83 c4 0c             	add    esp,0xc
c00158c2:	6a 00                	push   0x0
c00158c4:	68 b5 54 01 c0       	push   0xc00154b5
c00158c9:	6a 09                	push   0x9
c00158cb:	e8 10 67 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d0:	83 c4 0c             	add    esp,0xc
c00158d3:	6a 00                	push   0x0
c00158d5:	68 b5 54 01 c0       	push   0xc00154b5
c00158da:	6a 0a                	push   0xa
c00158dc:	e8 ff 66 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e1:	83 c4 0c             	add    esp,0xc
c00158e4:	6a 00                	push   0x0
c00158e6:	68 b5 54 01 c0       	push   0xc00154b5
c00158eb:	6a 0b                	push   0xb
c00158ed:	e8 ee 66 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f2:	83 c4 0c             	add    esp,0xc
c00158f5:	6a 00                	push   0x0
c00158f7:	68 ca 53 01 c0       	push   0xc00153ca
c00158fc:	6a 0d                	push   0xd
c00158fe:	e8 dd 66 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015903:	83 c4 0c             	add    esp,0xc
c0015906:	6a 00                	push   0x0
c0015908:	68 2f 54 01 c0       	push   0xc001542f
c001590d:	6a 0e                	push   0xe
c001590f:	e8 cc 66 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015914:	83 c4 10             	add    esp,0x10
c0015917:	50                   	push   eax
c0015918:	6a 00                	push   0x0
c001591a:	68 b5 54 01 c0       	push   0xc00154b5
c001591f:	53                   	push   ebx
c0015920:	43                   	inc    ebx
c0015921:	e8 ba 66 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015926:	83 c4 10             	add    esp,0x10
c0015929:	83 fb 1e             	cmp    ebx,0x1e
c001592c:	75 e9                	jne    c0015917 <HalInitialise()+0x127>
c001592e:	50                   	push   eax
c001592f:	6a 00                	push   0x0
c0015931:	68 3f 15 01 c0       	push   0xc001153f
c0015936:	6a 60                	push   0x60
c0015938:	e8 a3 66 ff ff       	call   c000bfe0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001593d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015942:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001594c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015953:	e8 61 1e ff ff       	call   c00077b9 <malloc>
c0015958:	89 04 24             	mov    DWORD PTR [esp],eax
c001595b:	89 c3                	mov    ebx,eax
c001595d:	e8 2e 09 00 00       	call   c0016290 <RTC::RTC()>
c0015962:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001596c:	5a                   	pop    edx
c001596d:	59                   	pop    ecx
c001596e:	53                   	push   ebx
c001596f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015975:	e8 32 61 ff ff       	call   c000baac <Device::addChild(Device*)>
c001597a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001597c:	6a 00                	push   0x0
c001597e:	6a 00                	push   0x0
c0015980:	6a 00                	push   0x0
c0015982:	53                   	push   ebx
c0015983:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015986:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001598b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015991:	83 c4 28             	add    esp,0x28
c0015994:	5b                   	pop    ebx
c0015995:	c3                   	ret    

c0015996 <HalMakeBeep(int)>:
c0015996:	53                   	push   ebx
c0015997:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001599b:	85 db                	test   ebx,ebx
c001599d:	75 07                	jne    c00159a6 <HalMakeBeep(int)+0x10>
c001599f:	e4 61                	in     al,0x61
c00159a1:	83 e0 fc             	and    eax,0xfffffffc
c00159a4:	eb 26                	jmp    c00159cc <HalMakeBeep(int)+0x36>
c00159a6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159ab:	99                   	cdq    
c00159ac:	f7 fb                	idiv   ebx
c00159ae:	89 c1                	mov    ecx,eax
c00159b0:	b0 b6                	mov    al,0xb6
c00159b2:	e6 43                	out    0x43,al
c00159b4:	88 c8                	mov    al,cl
c00159b6:	e6 42                	out    0x42,al
c00159b8:	89 c8                	mov    eax,ecx
c00159ba:	c1 e8 08             	shr    eax,0x8
c00159bd:	e6 42                	out    0x42,al
c00159bf:	e4 61                	in     al,0x61
c00159c1:	88 c2                	mov    dl,al
c00159c3:	83 ca 03             	or     edx,0x3
c00159c6:	38 c2                	cmp    dl,al
c00159c8:	74 04                	je     c00159ce <HalMakeBeep(int)+0x38>
c00159ca:	88 d0                	mov    al,dl
c00159cc:	e6 61                	out    0x61,al
c00159ce:	5b                   	pop    ebx
c00159cf:	c3                   	ret    

c00159d0 <HalGetRand()>:
c00159d0:	31 c0                	xor    eax,eax
c00159d2:	c3                   	ret    

c00159d3 <HalEndOfInterrupt(int)>:
c00159d3:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00159da:	74 23                	je     c00159ff <HalEndOfInterrupt(int)+0x2c>
c00159dc:	83 ec 14             	sub    esp,0x14
c00159df:	6a 1b                	push   0x1b
c00159e1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00159e7:	e8 06 14 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00159ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c00159f1:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00159fb:	83 c4 1c             	add    esp,0x1c
c00159fe:	c3                   	ret    
c00159ff:	e9 54 02 00 00       	jmp    c0015c58 <picEOI(int)>

c0015a04 <HalRestart()>:
c0015a04:	c3                   	ret    

c0015a05 <HalShutdown()>:
c0015a05:	c3                   	ret    

c0015a06 <HalSleep()>:
c0015a06:	c3                   	ret    
c0015a07:	90                   	nop

c0015a08 <picIoWait()>:
c0015a08:	eb 00                	jmp    c0015a0a <picIoWait()+0x2>
c0015a0a:	eb 00                	jmp    c0015a0c <picIoWait()+0x4>
c0015a0c:	90                   	nop
c0015a0d:	c3                   	ret    
c0015a0e:	66 90                	xchg   ax,ax

c0015a10 <picDisable()>:
c0015a10:	83 ec 10             	sub    esp,0x10
c0015a13:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a1a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a1f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a23:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a28:	ee                   	out    dx,al
c0015a29:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a30:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a35:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a39:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a3e:	ee                   	out    dx,al
c0015a3f:	90                   	nop
c0015a40:	83 c4 10             	add    esp,0x10
c0015a43:	c3                   	ret    

c0015a44 <picGetIRQReg(int)>:
c0015a44:	83 ec 10             	sub    esp,0x10
c0015a47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a4b:	25 ff 00 00 00       	and    eax,0xff
c0015a50:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a57:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a5b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a5f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a64:	ee                   	out    dx,al
c0015a65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a69:	25 ff 00 00 00       	and    eax,0xff
c0015a6e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015a75:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015a79:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015a7d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015a82:	ee                   	out    dx,al
c0015a83:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015a8a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015a8f:	89 c2                	mov    edx,eax
c0015a91:	ec                   	in     al,dx
c0015a92:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015a96:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a9a:	25 ff 00 00 00       	and    eax,0xff
c0015a9f:	c1 e0 08             	shl    eax,0x8
c0015aa2:	89 c1                	mov    ecx,eax
c0015aa4:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015aab:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015ab0:	89 c2                	mov    edx,eax
c0015ab2:	ec                   	in     al,dx
c0015ab3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015ab7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015abb:	25 ff 00 00 00       	and    eax,0xff
c0015ac0:	09 c8                	or     eax,ecx
c0015ac2:	83 c4 10             	add    esp,0x10
c0015ac5:	c3                   	ret    
c0015ac6:	66 90                	xchg   ax,ax

c0015ac8 <picOpen()>:
c0015ac8:	83 ec 50             	sub    esp,0x50
c0015acb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015ad2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015ad7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015adb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015adf:	ee                   	out    dx,al
c0015ae0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015ae7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015aec:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015af0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015af4:	ee                   	out    dx,al
c0015af5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015afd:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b05:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b10:	89 c2                	mov    edx,eax
c0015b12:	ec                   	in     al,dx
c0015b13:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b17:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b1b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b1f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b2a:	89 c2                	mov    edx,eax
c0015b2c:	ec                   	in     al,dx
c0015b2d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b31:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b35:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b39:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b40:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b45:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b4d:	ee                   	out    dx,al
c0015b4e:	e8 b5 fe ff ff       	call   c0015a08 <picIoWait()>
c0015b53:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b5a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015b5f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015b63:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b67:	ee                   	out    dx,al
c0015b68:	e8 9b fe ff ff       	call   c0015a08 <picIoWait()>
c0015b6d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b71:	25 ff 00 00 00       	and    eax,0xff
c0015b76:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015b7d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015b81:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015b85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b89:	ee                   	out    dx,al
c0015b8a:	e8 79 fe ff ff       	call   c0015a08 <picIoWait()>
c0015b8f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015b93:	25 ff 00 00 00       	and    eax,0xff
c0015b98:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015b9f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015ba3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015ba7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015bab:	ee                   	out    dx,al
c0015bac:	e8 57 fe ff ff       	call   c0015a08 <picIoWait()>
c0015bb1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015bb8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015bbd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015bc1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015bc5:	ee                   	out    dx,al
c0015bc6:	e8 3d fe ff ff       	call   c0015a08 <picIoWait()>
c0015bcb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015bd2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015bd7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015bdb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015bdf:	ee                   	out    dx,al
c0015be0:	e8 23 fe ff ff       	call   c0015a08 <picIoWait()>
c0015be5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015bec:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015bf1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015bf5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015bf9:	ee                   	out    dx,al
c0015bfa:	e8 09 fe ff ff       	call   c0015a08 <picIoWait()>
c0015bff:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c06:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c0b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c0f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c13:	ee                   	out    dx,al
c0015c14:	e8 ef fd ff ff       	call   c0015a08 <picIoWait()>
c0015c19:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c1d:	25 ff 00 00 00       	and    eax,0xff
c0015c22:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c29:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c2d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c31:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c35:	ee                   	out    dx,al
c0015c36:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c3a:	25 ff 00 00 00       	and    eax,0xff
c0015c3f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c46:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c4a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c4e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c52:	ee                   	out    dx,al
c0015c53:	90                   	nop
c0015c54:	83 c4 50             	add    esp,0x50
c0015c57:	c3                   	ret    

c0015c58 <picEOI(int)>:
c0015c58:	83 ec 10             	sub    esp,0x10
c0015c5b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c60:	75 22                	jne    c0015c84 <picEOI(int)+0x2c>
c0015c62:	6a 0b                	push   0xb
c0015c64:	e8 db fd ff ff       	call   c0015a44 <picGetIRQReg(int)>
c0015c69:	83 c4 04             	add    esp,0x4
c0015c6c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015c71:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015c76:	25 ff ff 00 00       	and    eax,0xffff
c0015c7b:	25 80 00 00 00       	and    eax,0x80
c0015c80:	74 72                	je     c0015cf4 <picEOI(int)+0x9c>
c0015c82:	66 90                	xchg   ax,ax
c0015c84:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015c89:	75 31                	jne    c0015cbc <picEOI(int)+0x64>
c0015c8b:	6a 0b                	push   0xb
c0015c8d:	e8 b2 fd ff ff       	call   c0015a44 <picGetIRQReg(int)>
c0015c92:	83 c4 04             	add    esp,0x4
c0015c95:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015c9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c9e:	66 85 c0             	test   ax,ax
c0015ca1:	78 19                	js     c0015cbc <picEOI(int)+0x64>
c0015ca3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015caa:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015caf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015cb3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015cb8:	ee                   	out    dx,al
c0015cb9:	eb 3d                	jmp    c0015cf8 <picEOI(int)+0xa0>
c0015cbb:	90                   	nop
c0015cbc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015cc1:	7e 19                	jle    c0015cdc <picEOI(int)+0x84>
c0015cc3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015cca:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015ccf:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015cd3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015cd8:	ee                   	out    dx,al
c0015cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cdc:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015ce3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015ce8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015cec:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015cf1:	ee                   	out    dx,al
c0015cf2:	eb 04                	jmp    c0015cf8 <picEOI(int)+0xa0>
c0015cf4:	90                   	nop
c0015cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0015cf8:	83 c4 10             	add    esp,0x10
c0015cfb:	c3                   	ret    

c0015cfc <RTC::open(int, int, void*)>:
c0015cfc:	31 c0                	xor    eax,eax
c0015cfe:	c3                   	ret    
c0015cff:	90                   	nop

c0015d00 <RTC::close(int, int, void*)>:
c0015d00:	31 c0                	xor    eax,eax
c0015d02:	c3                   	ret    
c0015d03:	90                   	nop

c0015d04 <RTC::timeInSecondsUTC()>:
c0015d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d08:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d0e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d14:	c3                   	ret    
c0015d15:	90                   	nop

c0015d16 <RTC::timeInDatetimeUTC()>:
c0015d16:	53                   	push   ebx
c0015d17:	83 ec 14             	sub    esp,0x14
c0015d1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d22:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d24:	50                   	push   eax
c0015d25:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d28:	83 c4 0c             	add    esp,0xc
c0015d2b:	52                   	push   edx
c0015d2c:	50                   	push   eax
c0015d2d:	53                   	push   ebx
c0015d2e:	e8 ed 5a ff ff       	call   c000b820 <secondsToDatetime(unsigned long long)>
c0015d33:	89 d8                	mov    eax,ebx
c0015d35:	83 c4 14             	add    esp,0x14
c0015d38:	5b                   	pop    ebx
c0015d39:	c2 04 00             	ret    0x4

c0015d3c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d3c:	56                   	push   esi
c0015d3d:	53                   	push   ebx
c0015d3e:	83 ec 14             	sub    esp,0x14
c0015d41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d47:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d4a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d4e:	52                   	push   edx
c0015d4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d57:	50                   	push   eax
c0015d58:	e8 c3 5a ff ff       	call   c000b820 <secondsToDatetime(unsigned long long)>
c0015d5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015d69:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015d6d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015d71:	89 f0                	mov    eax,esi
c0015d73:	83 c4 20             	add    esp,0x20
c0015d76:	5b                   	pop    ebx
c0015d77:	5e                   	pop    esi
c0015d78:	ff e0                	jmp    eax

c0015d7a <RTC::~RTC()>:
c0015d7a:	83 ec 0c             	sub    esp,0xc
c0015d7d:	ba a0 f1 01 c0       	mov    edx,0xc001f1a0
c0015d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d86:	89 10                	mov    DWORD PTR [eax],edx
c0015d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	50                   	push   eax
c0015d90:	e8 0f 58 ff ff       	call   c000b5a4 <Clock::~Clock()>
c0015d95:	83 c4 10             	add    esp,0x10
c0015d98:	90                   	nop
c0015d99:	83 c4 0c             	add    esp,0xc
c0015d9c:	c3                   	ret    
c0015d9d:	90                   	nop

c0015d9e <RTC::~RTC()>:
c0015d9e:	83 ec 0c             	sub    esp,0xc
c0015da1:	83 ec 0c             	sub    esp,0xc
c0015da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015da8:	e8 cd ff ff ff       	call   c0015d7a <RTC::~RTC()>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	83 ec 08             	sub    esp,0x8
c0015db3:	68 60 01 00 00       	push   0x160
c0015db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dbc:	e8 b6 47 ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c0015dc1:	83 c4 10             	add    esp,0x10
c0015dc4:	83 c4 0c             	add    esp,0xc
c0015dc7:	c3                   	ret    

c0015dc8 <RTC::get_update_in_progress_flag()>:
c0015dc8:	83 ec 14             	sub    esp,0x14
c0015dcb:	6a 0a                	push   0xa
c0015dcd:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dd3:	e8 ce 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dd8:	83 c4 1c             	add    esp,0x1c
c0015ddb:	c0 e8 07             	shr    al,0x7
c0015dde:	c3                   	ret    
c0015ddf:	90                   	nop

c0015de0 <RTC::completeRTCRefresh()>:
c0015de0:	55                   	push   ebp
c0015de1:	57                   	push   edi
c0015de2:	56                   	push   esi
c0015de3:	53                   	push   ebx
c0015de4:	83 ec 2c             	sub    esp,0x2c
c0015de7:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015ded:	83 ec 0c             	sub    esp,0xc
c0015df0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015df4:	e8 cf ff ff ff       	call   c0015dc8 <RTC::get_update_in_progress_flag()>
c0015df9:	83 c4 10             	add    esp,0x10
c0015dfc:	84 c0                	test   al,al
c0015dfe:	74 0e                	je     c0015e0e <RTC::completeRTCRefresh()+0x2e>
c0015e00:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e06:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015e0c:	73 df                	jae    c0015ded <RTC::completeRTCRefresh()+0xd>
c0015e0e:	55                   	push   ebp
c0015e0f:	55                   	push   ebp
c0015e10:	6a 00                	push   0x0
c0015e12:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e18:	e8 89 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e1d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e21:	58                   	pop    eax
c0015e22:	5a                   	pop    edx
c0015e23:	6a 02                	push   0x2
c0015e25:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e2b:	e8 76 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e30:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e34:	59                   	pop    ecx
c0015e35:	5b                   	pop    ebx
c0015e36:	6a 04                	push   0x4
c0015e38:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e3e:	e8 63 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e43:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e47:	5e                   	pop    esi
c0015e48:	5f                   	pop    edi
c0015e49:	6a 07                	push   0x7
c0015e4b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e51:	e8 50 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e56:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e5a:	5d                   	pop    ebp
c0015e5b:	58                   	pop    eax
c0015e5c:	6a 08                	push   0x8
c0015e5e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e64:	e8 3d 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e69:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015e6d:	58                   	pop    eax
c0015e6e:	5a                   	pop    edx
c0015e6f:	6a 09                	push   0x9
c0015e71:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e77:	e8 2a 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e7c:	83 c4 10             	add    esp,0x10
c0015e7f:	0f b6 e8             	movzx  ebp,al
c0015e82:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015e88:	83 ec 0c             	sub    esp,0xc
c0015e8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e8f:	e8 34 ff ff ff       	call   c0015dc8 <RTC::get_update_in_progress_flag()>
c0015e94:	83 c4 10             	add    esp,0x10
c0015e97:	84 c0                	test   al,al
c0015e99:	74 0e                	je     c0015ea9 <RTC::completeRTCRefresh()+0xc9>
c0015e9b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ea1:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015ea7:	73 df                	jae    c0015e88 <RTC::completeRTCRefresh()+0xa8>
c0015ea9:	50                   	push   eax
c0015eaa:	50                   	push   eax
c0015eab:	6a 00                	push   0x0
c0015ead:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015eb3:	e8 ee 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015eb8:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015ebc:	58                   	pop    eax
c0015ebd:	5a                   	pop    edx
c0015ebe:	6a 02                	push   0x2
c0015ec0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ec6:	e8 db 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ecb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015ecf:	59                   	pop    ecx
c0015ed0:	5b                   	pop    ebx
c0015ed1:	6a 04                	push   0x4
c0015ed3:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ed9:	e8 c8 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ede:	5e                   	pop    esi
c0015edf:	88 c3                	mov    bl,al
c0015ee1:	5f                   	pop    edi
c0015ee2:	6a 07                	push   0x7
c0015ee4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015eea:	e8 b7 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015eef:	89 c6                	mov    esi,eax
c0015ef1:	58                   	pop    eax
c0015ef2:	5a                   	pop    edx
c0015ef3:	6a 08                	push   0x8
c0015ef5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015efb:	e8 a6 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f00:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f04:	59                   	pop    ecx
c0015f05:	5f                   	pop    edi
c0015f06:	6a 09                	push   0x9
c0015f08:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f0e:	e8 93 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f13:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f17:	0f b6 f8             	movzx  edi,al
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f21:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f25:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f29:	89 f1                	mov    ecx,esi
c0015f2b:	0f 94 c0             	sete   al
c0015f2e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f32:	0f 94 c2             	sete   dl
c0015f35:	21 d0                	and    eax,edx
c0015f37:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f3b:	0f 94 c2             	sete   dl
c0015f3e:	21 c2                	and    edx,eax
c0015f40:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f44:	0f 94 c0             	sete   al
c0015f47:	21 d0                	and    eax,edx
c0015f49:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f4d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f51:	0f 94 c1             	sete   cl
c0015f54:	84 c8                	test   al,cl
c0015f56:	75 29                	jne    c0015f81 <RTC::completeRTCRefresh()+0x1a1>
c0015f58:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f5c:	89 fd                	mov    ebp,edi
c0015f5e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f62:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015f66:	89 f0                	mov    eax,esi
c0015f68:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015f6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f70:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f74:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f78:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f7c:	e9 01 ff ff ff       	jmp    c0015e82 <RTC::completeRTCRefresh()+0xa2>
c0015f81:	39 fd                	cmp    ebp,edi
c0015f83:	75 d3                	jne    c0015f58 <RTC::completeRTCRefresh()+0x178>
c0015f85:	55                   	push   ebp
c0015f86:	55                   	push   ebp
c0015f87:	6a 0b                	push   0xb
c0015f89:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f8f:	e8 12 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f94:	83 c4 10             	add    esp,0x10
c0015f97:	89 c5                	mov    ebp,eax
c0015f99:	a8 04                	test   al,0x4
c0015f9b:	75 78                	jne    c0016015 <RTC::completeRTCRefresh()+0x235>
c0015f9d:	b1 0a                	mov    cl,0xa
c0015f9f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015fa3:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fa7:	83 e2 0f             	and    edx,0xf
c0015faa:	c0 e8 04             	shr    al,0x4
c0015fad:	c1 ef 04             	shr    edi,0x4
c0015fb0:	f6 e1                	mul    cl
c0015fb2:	6b ff 0a             	imul   edi,edi,0xa
c0015fb5:	01 d0                	add    eax,edx
c0015fb7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015fbb:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015fbf:	83 e2 0f             	and    edx,0xf
c0015fc2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fc6:	c0 e8 04             	shr    al,0x4
c0015fc9:	f6 e1                	mul    cl
c0015fcb:	01 d0                	add    eax,edx
c0015fcd:	88 da                	mov    dl,bl
c0015fcf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015fd3:	83 e2 0f             	and    edx,0xf
c0015fd6:	88 d8                	mov    al,bl
c0015fd8:	83 e3 80             	and    ebx,0xffffff80
c0015fdb:	c0 e8 04             	shr    al,0x4
c0015fde:	83 e0 07             	and    eax,0x7
c0015fe1:	f6 e1                	mul    cl
c0015fe3:	01 d0                	add    eax,edx
c0015fe5:	89 f2                	mov    edx,esi
c0015fe7:	09 c3                	or     ebx,eax
c0015fe9:	83 e2 0f             	and    edx,0xf
c0015fec:	89 f0                	mov    eax,esi
c0015fee:	c0 e8 04             	shr    al,0x4
c0015ff1:	f6 e1                	mul    cl
c0015ff3:	8d 34 02             	lea    esi,[edx+eax*1]
c0015ff6:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ffa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015ffe:	83 e2 0f             	and    edx,0xf
c0016001:	c0 e8 04             	shr    al,0x4
c0016004:	f6 e1                	mul    cl
c0016006:	01 d0                	add    eax,edx
c0016008:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001600c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016010:	83 e0 0f             	and    eax,0xf
c0016013:	01 c7                	add    edi,eax
c0016015:	83 e5 02             	and    ebp,0x2
c0016018:	75 14                	jne    c001602e <RTC::completeRTCRefresh()+0x24e>
c001601a:	84 db                	test   bl,bl
c001601c:	79 10                	jns    c001602e <RTC::completeRTCRefresh()+0x24e>
c001601e:	83 e3 7f             	and    ebx,0x7f
c0016021:	b9 18 00 00 00       	mov    ecx,0x18
c0016026:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016029:	99                   	cdq    
c001602a:	f7 f9                	idiv   ecx
c001602c:	88 d3                	mov    bl,dl
c001602e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016034:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001603a:	77 06                	ja     c0016042 <RTC::completeRTCRefresh()+0x262>
c001603c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0016042:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0016047:	31 d2                	xor    edx,edx
c0016049:	c1 e1 10             	shl    ecx,0x10
c001604c:	89 d7                	mov    edi,edx
c001604e:	c1 e5 10             	shl    ebp,0x10
c0016051:	31 c0                	xor    eax,eax
c0016053:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016059:	09 cf                	or     edi,ecx
c001605b:	89 fa                	mov    edx,edi
c001605d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016061:	88 da                	mov    dl,bl
c0016063:	89 f3                	mov    ebx,esi
c0016065:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016069:	88 d8                	mov    al,bl
c001606b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001606f:	0f b7 c8             	movzx  ecx,ax
c0016072:	09 e9                	or     ecx,ebp
c0016074:	89 c8                	mov    eax,ecx
c0016076:	51                   	push   ecx
c0016077:	51                   	push   ecx
c0016078:	52                   	push   edx
c0016079:	50                   	push   eax
c001607a:	e8 14 56 ff ff       	call   c000b693 <datetimeToSeconds(datetime_t)>
c001607f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016083:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016089:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001608f:	83 c4 3c             	add    esp,0x3c
c0016092:	5b                   	pop    ebx
c0016093:	5e                   	pop    esi
c0016094:	5f                   	pop    edi
c0016095:	5d                   	pop    ebp
c0016096:	c3                   	ret    
c0016097:	90                   	nop

c0016098 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016098:	55                   	push   ebp
c0016099:	57                   	push   edi
c001609a:	56                   	push   esi
c001609b:	53                   	push   ebx
c001609c:	83 ec 30             	sub    esp,0x30
c001609f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160a3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160a7:	6a 00                	push   0x0
c00160a9:	6a 00                	push   0x0
c00160ab:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160b1:	e8 06 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160b6:	83 c4 0c             	add    esp,0xc
c00160b9:	6a 00                	push   0x0
c00160bb:	6a 02                	push   0x2
c00160bd:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160c3:	e8 f4 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160c8:	31 d2                	xor    edx,edx
c00160ca:	89 f9                	mov    ecx,edi
c00160cc:	89 f8                	mov    eax,edi
c00160ce:	c1 e9 10             	shr    ecx,0x10
c00160d1:	0f b6 c4             	movzx  eax,ah
c00160d4:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c00160d8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00160dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160e0:	b9 64 00 00 00       	mov    ecx,0x64
c00160e5:	89 f0                	mov    eax,esi
c00160e7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00160eb:	89 f0                	mov    eax,esi
c00160ed:	0f b6 c4             	movzx  eax,ah
c00160f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00160f4:	89 f0                	mov    eax,esi
c00160f6:	c1 e8 10             	shr    eax,0x10
c00160f9:	66 f7 f1             	div    cx
c00160fc:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016101:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016106:	59                   	pop    ecx
c0016107:	5b                   	pop    ebx
c0016108:	89 fb                	mov    ebx,edi
c001610a:	6a 0b                	push   0xb
c001610c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016112:	e8 8f 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016117:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001611b:	83 c4 10             	add    esp,0x10
c001611e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016123:	75 74                	jne    c0016199 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016125:	b2 0a                	mov    dl,0xa
c0016127:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001612b:	0f b6 c1             	movzx  eax,cl
c001612e:	f6 f2                	div    dl
c0016130:	88 c3                	mov    bl,al
c0016132:	88 e0                	mov    al,ah
c0016134:	c1 e3 04             	shl    ebx,0x4
c0016137:	09 c3                	or     ebx,eax
c0016139:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001613e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016142:	f6 f2                	div    dl
c0016144:	88 c1                	mov    cl,al
c0016146:	88 e0                	mov    al,ah
c0016148:	c1 e1 04             	shl    ecx,0x4
c001614b:	09 c1                	or     ecx,eax
c001614d:	89 f8                	mov    eax,edi
c001614f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016153:	0f b6 c0             	movzx  eax,al
c0016156:	f6 f2                	div    dl
c0016158:	88 c3                	mov    bl,al
c001615a:	88 e0                	mov    al,ah
c001615c:	c1 e3 04             	shl    ebx,0x4
c001615f:	09 c3                	or     ebx,eax
c0016161:	89 f0                	mov    eax,esi
c0016163:	0f b6 c0             	movzx  eax,al
c0016166:	f6 f2                	div    dl
c0016168:	88 c1                	mov    cl,al
c001616a:	88 e0                	mov    al,ah
c001616c:	c1 e1 04             	shl    ecx,0x4
c001616f:	09 c1                	or     ecx,eax
c0016171:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016176:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001617a:	f6 f2                	div    dl
c001617c:	88 c1                	mov    cl,al
c001617e:	88 e0                	mov    al,ah
c0016180:	c1 e1 04             	shl    ecx,0x4
c0016183:	09 c1                	or     ecx,eax
c0016185:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001618a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001618e:	f6 f2                	div    dl
c0016190:	89 c5                	mov    ebp,eax
c0016192:	88 e0                	mov    al,ah
c0016194:	c1 e5 04             	shl    ebp,0x4
c0016197:	09 c5                	or     ebp,eax
c0016199:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001619e:	75 17                	jne    c00161b7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161a0:	80 fb 0b             	cmp    bl,0xb
c00161a3:	76 0c                	jbe    c00161b1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161a5:	80 eb 0c             	sub    bl,0xc
c00161a8:	75 02                	jne    c00161ac <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161aa:	b3 0c                	mov    bl,0xc
c00161ac:	83 cb 80             	or     ebx,0xffffff80
c00161af:	eb 06                	jmp    c00161b7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161b1:	84 db                	test   bl,bl
c00161b3:	75 02                	jne    c00161b7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161b5:	b3 0c                	mov    bl,0xc
c00161b7:	0f b6 db             	movzx  ebx,bl
c00161ba:	50                   	push   eax
c00161bb:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00161c0:	50                   	push   eax
c00161c1:	6a 00                	push   0x0
c00161c3:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161c9:	e8 ee 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161ce:	83 c4 0c             	add    esp,0xc
c00161d1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161d6:	50                   	push   eax
c00161d7:	6a 02                	push   0x2
c00161d9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161df:	e8 d8 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161e4:	83 c4 0c             	add    esp,0xc
c00161e7:	53                   	push   ebx
c00161e8:	6a 04                	push   0x4
c00161ea:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161f0:	e8 c7 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161f5:	83 c4 0c             	add    esp,0xc
c00161f8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00161fd:	50                   	push   eax
c00161fe:	6a 07                	push   0x7
c0016200:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016206:	e8 b1 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001620b:	83 c4 0c             	add    esp,0xc
c001620e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016213:	50                   	push   eax
c0016214:	6a 08                	push   0x8
c0016216:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001621c:	e8 9b 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016221:	83 c4 0c             	add    esp,0xc
c0016224:	89 e8                	mov    eax,ebp
c0016226:	0f b6 e8             	movzx  ebp,al
c0016229:	55                   	push   ebp
c001622a:	6a 09                	push   0x9
c001622c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016232:	e8 85 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016237:	5a                   	pop    edx
c0016238:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001623c:	e8 9f fb ff ff       	call   c0015de0 <RTC::completeRTCRefresh()>
c0016241:	83 c4 3c             	add    esp,0x3c
c0016244:	b0 01                	mov    al,0x1
c0016246:	5b                   	pop    ebx
c0016247:	5e                   	pop    esi
c0016248:	5f                   	pop    edi
c0016249:	5d                   	pop    ebp
c001624a:	c3                   	ret    

c001624b <rtcIRQHandler(regs*, void*)>:
c001624b:	53                   	push   ebx
c001624c:	83 ec 10             	sub    esp,0x10
c001624f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016253:	6a 0c                	push   0xc
c0016255:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001625b:	e8 46 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016260:	83 c4 10             	add    esp,0x10
c0016263:	84 c0                	test   al,al
c0016265:	79 24                	jns    c001628b <rtcIRQHandler(regs*, void*)+0x40>
c0016267:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001626e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016275:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c001627c:	75 0d                	jne    c001628b <rtcIRQHandler(regs*, void*)+0x40>
c001627e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016282:	83 c4 08             	add    esp,0x8
c0016285:	5b                   	pop    ebx
c0016286:	e9 55 fb ff ff       	jmp    c0015de0 <RTC::completeRTCRefresh()>
c001628b:	83 c4 08             	add    esp,0x8
c001628e:	5b                   	pop    ebx
c001628f:	c3                   	ret    

c0016290 <RTC::RTC()>:
c0016290:	83 ec 1c             	sub    esp,0x1c
c0016293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016297:	83 ec 08             	sub    esp,0x8
c001629a:	68 83 f1 01 c0       	push   0xc001f183
c001629f:	50                   	push   eax
c00162a0:	e8 c9 52 ff ff       	call   c000b56e <Clock::Clock(char const*)>
c00162a5:	83 c4 10             	add    esp,0x10
c00162a8:	ba a0 f1 01 c0       	mov    edx,0xc001f1a0
c00162ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162b1:	89 10                	mov    DWORD PTR [eax],edx
c00162b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162b7:	83 ec 0c             	sub    esp,0xc
c00162ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162be:	6a 01                	push   0x1
c00162c0:	68 4b 62 01 c0       	push   0xc001624b
c00162c5:	6a 08                	push   0x8
c00162c7:	50                   	push   eax
c00162c8:	e8 8b 57 ff ff       	call   c000ba58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00162cd:	83 c4 20             	add    esp,0x20
c00162d0:	89 c2                	mov    edx,eax
c00162d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162d6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00162dc:	fa                   	cli    
c00162dd:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00162e2:	40                   	inc    eax
c00162e3:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00162e8:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00162ed:	83 ec 08             	sub    esp,0x8
c00162f0:	6a 0b                	push   0xb
c00162f2:	50                   	push   eax
c00162f3:	e8 ae 0b ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00162f8:	83 c4 10             	add    esp,0x10
c00162fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00162ff:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0016304:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016308:	83 ca 10             	or     edx,0x10
c001630b:	81 e2 ff 00 00 00    	and    edx,0xff
c0016311:	83 ec 04             	sub    esp,0x4
c0016314:	52                   	push   edx
c0016315:	6a 0b                	push   0xb
c0016317:	50                   	push   eax
c0016318:	e8 9f 0c ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001631d:	83 c4 10             	add    esp,0x10
c0016320:	83 ec 0c             	sub    esp,0xc
c0016323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016327:	e8 b4 fa ff ff       	call   c0015de0 <RTC::completeRTCRefresh()>
c001632c:	83 c4 10             	add    esp,0x10
c001632f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0016334:	48                   	dec    eax
c0016335:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001633a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001633f:	85 c0                	test   eax,eax
c0016341:	75 01                	jne    c0016344 <RTC::RTC()+0xb4>
c0016343:	fb                   	sti    
c0016344:	90                   	nop
c0016345:	83 c4 1c             	add    esp,0x1c
c0016348:	c3                   	ret    
c0016349:	66 90                	xchg   ax,ax
c001634b:	90                   	nop

c001634c <HalConsoleScroll(int, int)>:
c001634c:	83 ec 10             	sub    esp,0x10
c001634f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016357:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001635f:	90                   	nop
c0016360:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016365:	0f 8f e1 00 00 00    	jg     c001644c <HalConsoleScroll(int, int)+0x100>
c001636b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016373:	90                   	nop
c0016374:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001637c:	0f 8f be 00 00 00    	jg     c0016440 <HalConsoleScroll(int, int)+0xf4>
c0016382:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016386:	89 d0                	mov    eax,edx
c0016388:	c1 e0 02             	shl    eax,0x2
c001638b:	01 d0                	add    eax,edx
c001638d:	c1 e0 05             	shl    eax,0x5
c0016390:	89 c2                	mov    edx,eax
c0016392:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016396:	01 d0                	add    eax,edx
c0016398:	89 c2                	mov    edx,eax
c001639a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001639e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163a5:	89 d0                	mov    eax,edx
c00163a7:	c1 e0 02             	shl    eax,0x2
c00163aa:	01 d0                	add    eax,edx
c00163ac:	c1 e0 05             	shl    eax,0x5
c00163af:	89 c2                	mov    edx,eax
c00163b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163b5:	01 d0                	add    eax,edx
c00163b7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00163bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163c1:	01 c2                	add    edx,eax
c00163c3:	8a 01                	mov    al,BYTE PTR [ecx]
c00163c5:	88 02                	mov    BYTE PTR [edx],al
c00163c7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163cc:	75 66                	jne    c0016434 <HalConsoleScroll(int, int)+0xe8>
c00163ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163d2:	83 e0 01             	and    eax,0x1
c00163d5:	74 39                	je     c0016410 <HalConsoleScroll(int, int)+0xc4>
c00163d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163db:	83 e0 0f             	and    eax,0xf
c00163de:	88 c2                	mov    dl,al
c00163e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163e4:	c1 e0 04             	shl    eax,0x4
c00163e7:	88 d1                	mov    cl,dl
c00163e9:	09 c1                	or     ecx,eax
c00163eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ef:	89 d0                	mov    eax,edx
c00163f1:	c1 e0 02             	shl    eax,0x2
c00163f4:	01 d0                	add    eax,edx
c00163f6:	c1 e0 05             	shl    eax,0x5
c00163f9:	89 c2                	mov    edx,eax
c00163fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ff:	01 d0                	add    eax,edx
c0016401:	89 c2                	mov    edx,eax
c0016403:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016407:	01 d0                	add    eax,edx
c0016409:	88 ca                	mov    dl,cl
c001640b:	88 10                	mov    BYTE PTR [eax],dl
c001640d:	eb 25                	jmp    c0016434 <HalConsoleScroll(int, int)+0xe8>
c001640f:	90                   	nop
c0016410:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016414:	89 d0                	mov    eax,edx
c0016416:	c1 e0 02             	shl    eax,0x2
c0016419:	01 d0                	add    eax,edx
c001641b:	c1 e0 05             	shl    eax,0x5
c001641e:	89 c2                	mov    edx,eax
c0016420:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016424:	01 d0                	add    eax,edx
c0016426:	89 c2                	mov    edx,eax
c0016428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001642c:	01 d0                	add    eax,edx
c001642e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016431:	8d 76 00             	lea    esi,[esi+0x0]
c0016434:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016438:	e9 37 ff ff ff       	jmp    c0016374 <HalConsoleScroll(int, int)+0x28>
c001643d:	8d 76 00             	lea    esi,[esi+0x0]
c0016440:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016444:	e9 17 ff ff ff       	jmp    c0016360 <HalConsoleScroll(int, int)+0x14>
c0016449:	8d 76 00             	lea    esi,[esi+0x0]
c001644c:	90                   	nop
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	c3                   	ret    
c0016451:	8d 76 00             	lea    esi,[esi+0x0]

c0016454 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016454:	83 ec 14             	sub    esp,0x14
c0016457:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001645b:	88 04 24             	mov    BYTE PTR [esp],al
c001645e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016461:	25 ff 00 00 00       	and    eax,0xff
c0016466:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001646a:	89 d1                	mov    ecx,edx
c001646c:	83 e1 0f             	and    ecx,0xf
c001646f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016473:	c1 e2 04             	shl    edx,0x4
c0016476:	81 e2 ff 00 00 00    	and    edx,0xff
c001647c:	09 ca                	or     edx,ecx
c001647e:	c1 e2 08             	shl    edx,0x8
c0016481:	09 d0                	or     eax,edx
c0016483:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016488:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016490:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016494:	89 d0                	mov    eax,edx
c0016496:	c1 e0 02             	shl    eax,0x2
c0016499:	01 d0                	add    eax,edx
c001649b:	c1 e0 04             	shl    eax,0x4
c001649e:	89 c2                	mov    edx,eax
c00164a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164a4:	01 d0                	add    eax,edx
c00164a6:	01 c0                	add    eax,eax
c00164a8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00164ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164b0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164b5:	66 89 02             	mov    WORD PTR [edx],ax
c00164b8:	90                   	nop
c00164b9:	83 c4 14             	add    esp,0x14
c00164bc:	c3                   	ret    
c00164bd:	8d 76 00             	lea    esi,[esi+0x0]

c00164c0 <HalConsoleCursorUpdate(int, int)>:
c00164c0:	83 ec 20             	sub    esp,0x20
c00164c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164c7:	89 c2                	mov    edx,eax
c00164c9:	89 d0                	mov    eax,edx
c00164cb:	c1 e0 02             	shl    eax,0x2
c00164ce:	01 d0                	add    eax,edx
c00164d0:	c1 e0 04             	shl    eax,0x4
c00164d3:	89 c2                	mov    edx,eax
c00164d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164d9:	01 d0                	add    eax,edx
c00164db:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00164e0:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00164e7:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00164ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00164f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164f4:	ee                   	out    dx,al
c00164f5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00164fa:	25 ff 00 00 00       	and    eax,0xff
c00164ff:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016506:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001650a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001650e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016512:	ee                   	out    dx,al
c0016513:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001651a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001651f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016523:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016527:	ee                   	out    dx,al
c0016528:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001652d:	66 c1 e8 08          	shr    ax,0x8
c0016531:	25 ff 00 00 00       	and    eax,0xff
c0016536:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001653d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016541:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016545:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016549:	ee                   	out    dx,al
c001654a:	90                   	nop
c001654b:	83 c4 20             	add    esp,0x20
c001654e:	c3                   	ret    
c001654f:	90                   	nop

c0016550 <FAT::getName()>:
c0016550:	b8 d4 f1 01 c0       	mov    eax,0xc001f1d4
c0016555:	c3                   	ret    
c0016556:	66 90                	xchg   ax,ax

c0016558 <FAT::tell(void*, unsigned long long*)>:
c0016558:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001655d:	75 09                	jne    c0016568 <FAT::tell(void*, unsigned long long*)+0x10>
c001655f:	b8 04 00 00 00       	mov    eax,0x4
c0016564:	c3                   	ret    
c0016565:	8d 76 00             	lea    esi,[esi+0x0]
c0016568:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001656d:	75 09                	jne    c0016578 <FAT::tell(void*, unsigned long long*)+0x20>
c001656f:	b8 04 00 00 00       	mov    eax,0x4
c0016574:	c3                   	ret    
c0016575:	8d 76 00             	lea    esi,[esi+0x0]
c0016578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001657c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001657f:	ba 00 00 00 00       	mov    edx,0x0
c0016584:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016588:	89 01                	mov    DWORD PTR [ecx],eax
c001658a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001658d:	b8 00 00 00 00       	mov    eax,0x0
c0016592:	c3                   	ret    
c0016593:	90                   	nop

c0016594 <FAT::stat(void*, unsigned long long*)>:
c0016594:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016599:	75 09                	jne    c00165a4 <FAT::stat(void*, unsigned long long*)+0x10>
c001659b:	b8 04 00 00 00       	mov    eax,0x4
c00165a0:	c3                   	ret    
c00165a1:	8d 76 00             	lea    esi,[esi+0x0]
c00165a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165a9:	75 09                	jne    c00165b4 <FAT::stat(void*, unsigned long long*)+0x20>
c00165ab:	b8 04 00 00 00       	mov    eax,0x4
c00165b0:	c3                   	ret    
c00165b1:	8d 76 00             	lea    esi,[esi+0x0]
c00165b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00165bb:	ba 00 00 00 00       	mov    edx,0x0
c00165c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165c4:	89 01                	mov    DWORD PTR [ecx],eax
c00165c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165c9:	b8 00 00 00 00       	mov    eax,0x0
c00165ce:	c3                   	ret    
c00165cf:	90                   	nop

c00165d0 <FAT::~FAT()>:
c00165d0:	83 ec 0c             	sub    esp,0xc
c00165d3:	ba 20 f2 01 c0       	mov    edx,0xc001f220
c00165d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165dc:	89 10                	mov    DWORD PTR [eax],edx
c00165de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165e2:	83 ec 0c             	sub    esp,0xc
c00165e5:	50                   	push   eax
c00165e6:	e8 c7 43 ff ff       	call   c000a9b2 <Filesystem::~Filesystem()>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	90                   	nop
c00165ef:	83 c4 0c             	add    esp,0xc
c00165f2:	c3                   	ret    
c00165f3:	90                   	nop

c00165f4 <FAT::~FAT()>:
c00165f4:	83 ec 0c             	sub    esp,0xc
c00165f7:	83 ec 0c             	sub    esp,0xc
c00165fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165fe:	e8 cd ff ff ff       	call   c00165d0 <FAT::~FAT()>
c0016603:	83 c4 10             	add    esp,0x10
c0016606:	83 ec 08             	sub    esp,0x8
c0016609:	6a 08                	push   0x8
c001660b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001660f:	e8 63 3f ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c0016614:	83 c4 10             	add    esp,0x10
c0016617:	83 c4 0c             	add    esp,0xc
c001661a:	c3                   	ret    
c001661b:	90                   	nop

c001661c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001661c:	83 ec 1c             	sub    esp,0x1c
c001661f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016626:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001662b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001662f:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016636:	83 f8 ff             	cmp    eax,0xffffffff
c0016639:	75 35                	jne    c0016670 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001663b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001663f:	88 c2                	mov    dl,al
c0016641:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016646:	01 d0                	add    eax,edx
c0016648:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001664c:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016656:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c001665d:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016662:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016666:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c001666d:	eb 19                	jmp    c0016688 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001666f:	90                   	nop
c0016670:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016674:	88 c2                	mov    dl,al
c0016676:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001667a:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016681:	01 d0                	add    eax,edx
c0016683:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016687:	90                   	nop
c0016688:	83 ec 04             	sub    esp,0x4
c001668b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001668f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016693:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016697:	50                   	push   eax
c0016698:	e8 b7 e7 fe ff       	call   c0004e54 <f_getlabel>
c001669d:	83 c4 10             	add    esp,0x10
c00166a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166a9:	75 09                	jne    c00166b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166ab:	b8 00 00 00 00       	mov    eax,0x0
c00166b0:	eb 0a                	jmp    c00166bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166b2:	66 90                	xchg   ax,ax
c00166b4:	b8 01 00 00 00       	mov    eax,0x1
c00166b9:	8d 76 00             	lea    esi,[esi+0x0]
c00166bc:	83 c4 1c             	add    esp,0x1c
c00166bf:	c3                   	ret    

c00166c0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00166c0:	57                   	push   edi
c00166c1:	83 ec 58             	sub    esp,0x58
c00166c4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00166cc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00166d0:	b8 00 00 00 00       	mov    eax,0x0
c00166d5:	b9 0f 00 00 00       	mov    ecx,0xf
c00166da:	fc                   	cld    
c00166db:	89 d7                	mov    edi,edx
c00166dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00166df:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166e3:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00166ea:	83 f8 ff             	cmp    eax,0xffffffff
c00166ed:	75 35                	jne    c0016724 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00166ef:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166f3:	88 c2                	mov    dl,al
c00166f5:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00166fa:	01 d0                	add    eax,edx
c00166fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016700:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016706:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001670a:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016711:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016716:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001671a:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016721:	eb 19                	jmp    c001673c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016723:	90                   	nop
c0016724:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016728:	88 c2                	mov    dl,al
c001672a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001672e:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016735:	01 d0                	add    eax,edx
c0016737:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001673b:	90                   	nop
c001673c:	83 ec 08             	sub    esp,0x8
c001673f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016743:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016747:	50                   	push   eax
c0016748:	e8 73 a0 fe ff       	call   c00007c0 <strcat>
c001674d:	83 c4 10             	add    esp,0x10
c0016750:	83 ec 0c             	sub    esp,0xc
c0016753:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016757:	50                   	push   eax
c0016758:	e8 48 e8 fe ff       	call   c0004fa5 <f_setlabel>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016764:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016769:	75 09                	jne    c0016774 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001676b:	b8 00 00 00 00       	mov    eax,0x0
c0016770:	eb 0a                	jmp    c001677c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016772:	66 90                	xchg   ax,ax
c0016774:	b8 01 00 00 00       	mov    eax,0x1
c0016779:	8d 76 00             	lea    esi,[esi+0x0]
c001677c:	83 c4 58             	add    esp,0x58
c001677f:	5f                   	pop    edi
c0016780:	c3                   	ret    
c0016781:	90                   	nop
c0016782:	66 90                	xchg   ax,ax

c0016784 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016784:	83 ec 2c             	sub    esp,0x2c
c0016787:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001678f:	83 ec 08             	sub    esp,0x8
c0016792:	68 f8 f1 01 c0       	push   0xc001f1f8
c0016797:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001679b:	e8 40 9f fe ff       	call   c00006e0 <strcmp>
c00167a0:	83 c4 10             	add    esp,0x10
c00167a3:	85 c0                	test   eax,eax
c00167a5:	0f 94 c0             	sete   al
c00167a8:	84 c0                	test   al,al
c00167aa:	74 10                	je     c00167bc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00167ac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167b4:	e9 b3 00 00 00       	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167b9:	8d 76 00             	lea    esi,[esi+0x0]
c00167bc:	83 ec 08             	sub    esp,0x8
c00167bf:	68 ea f1 01 c0       	push   0xc001f1ea
c00167c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167c8:	e8 13 9f fe ff       	call   c00006e0 <strcmp>
c00167cd:	83 c4 10             	add    esp,0x10
c00167d0:	85 c0                	test   eax,eax
c00167d2:	0f 94 c0             	sete   al
c00167d5:	84 c0                	test   al,al
c00167d7:	74 0f                	je     c00167e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00167d9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167e1:	e9 86 00 00 00       	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167e6:	66 90                	xchg   ax,ax
c00167e8:	83 ec 08             	sub    esp,0x8
c00167eb:	68 f0 f1 01 c0       	push   0xc001f1f0
c00167f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167f4:	e8 e7 9e fe ff       	call   c00006e0 <strcmp>
c00167f9:	83 c4 10             	add    esp,0x10
c00167fc:	85 c0                	test   eax,eax
c00167fe:	0f 94 c0             	sete   al
c0016801:	84 c0                	test   al,al
c0016803:	74 0b                	je     c0016810 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016805:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001680d:	eb 5d                	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001680f:	90                   	nop
c0016810:	83 ec 08             	sub    esp,0x8
c0016813:	68 3c d0 01 c0       	push   0xc001d03c
c0016818:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001681c:	e8 bf 9e fe ff       	call   c00006e0 <strcmp>
c0016821:	83 c4 10             	add    esp,0x10
c0016824:	85 c0                	test   eax,eax
c0016826:	0f 94 c0             	sete   al
c0016829:	84 c0                	test   al,al
c001682b:	74 0b                	je     c0016838 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001682d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016835:	eb 35                	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016837:	90                   	nop
c0016838:	83 ec 08             	sub    esp,0x8
c001683b:	68 f6 f1 01 c0       	push   0xc001f1f6
c0016840:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016844:	e8 97 9e fe ff       	call   c00006e0 <strcmp>
c0016849:	83 c4 10             	add    esp,0x10
c001684c:	85 c0                	test   eax,eax
c001684e:	0f 94 c0             	sete   al
c0016851:	84 c0                	test   al,al
c0016853:	74 0b                	je     c0016860 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016855:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001685d:	eb 0d                	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001685f:	90                   	nop
c0016860:	b8 08 00 00 00       	mov    eax,0x8
c0016865:	e9 ea 00 00 00       	jmp    c0016954 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001686a:	66 90                	xchg   ax,ax
c001686c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016873:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016878:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001687c:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016883:	83 f8 ff             	cmp    eax,0xffffffff
c0016886:	75 34                	jne    c00168bc <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016888:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001688c:	88 c2                	mov    dl,al
c001688e:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016893:	01 d0                	add    eax,edx
c0016895:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016899:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001689f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168a3:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00168aa:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168af:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168b3:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00168ba:	eb 18                	jmp    c00168d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00168bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168c0:	88 c2                	mov    dl,al
c00168c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168c6:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00168cd:	01 d0                	add    eax,edx
c00168cf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168d3:	90                   	nop
c00168d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168d8:	88 04 24             	mov    BYTE PTR [esp],al
c00168db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00168df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168e3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00168eb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00168f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00168f8:	83 ec 0c             	sub    esp,0xc
c00168fb:	68 00 20 00 00       	push   0x2000
c0016900:	e8 b4 0e ff ff       	call   c00077b9 <malloc>
c0016905:	83 c4 10             	add    esp,0x10
c0016908:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001690c:	68 00 20 00 00       	push   0x2000
c0016911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016915:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016919:	50                   	push   eax
c001691a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001691e:	50                   	push   eax
c001691f:	e8 71 e9 fe ff       	call   c0005295 <f_mkfs>
c0016924:	83 c4 10             	add    esp,0x10
c0016927:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001692b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016930:	75 0a                	jne    c001693c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016932:	b8 00 00 00 00       	mov    eax,0x0
c0016937:	eb 1b                	jmp    c0016954 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016939:	8d 76 00             	lea    esi,[esi+0x0]
c001693c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016941:	75 09                	jne    c001694c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016943:	b8 09 00 00 00       	mov    eax,0x9
c0016948:	eb 0a                	jmp    c0016954 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001694a:	66 90                	xchg   ax,ax
c001694c:	b8 01 00 00 00       	mov    eax,0x1
c0016951:	8d 76 00             	lea    esi,[esi+0x0]
c0016954:	83 c4 2c             	add    esp,0x2c
c0016957:	c3                   	ret    

c0016958 <FAT::tryMount(LogicalDisk*, int)>:
c0016958:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001695e:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016963:	83 f8 14             	cmp    eax,0x14
c0016966:	75 18                	jne    c0016980 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016968:	83 ec 0c             	sub    esp,0xc
c001696b:	68 fc f1 01 c0       	push   0xc001f1fc
c0016970:	e8 7a 99 ff ff       	call   c00102ef <KePanic(char const*)>
c0016975:	83 c4 10             	add    esp,0x10
c0016978:	b0 00                	mov    al,0x0
c001697a:	e9 e9 01 00 00       	jmp    c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001697f:	90                   	nop
c0016980:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016987:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001698d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016993:	3d 00 02 00 00       	cmp    eax,0x200
c0016998:	74 0a                	je     c00169a4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001699a:	b0 00                	mov    al,0x0
c001699c:	e9 c7 01 00 00       	jmp    c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169a1:	8d 76 00             	lea    esi,[esi+0x0]
c00169a4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00169ac:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169b3:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00169ba:	83 f8 ff             	cmp    eax,0xffffffff
c00169bd:	74 09                	je     c00169c8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00169bf:	b0 01                	mov    al,0x1
c00169c1:	e9 a2 01 00 00       	jmp    c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169c6:	66 90                	xchg   ax,ax
c00169c8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00169d2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00169da:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00169e1:	88 c2                	mov    dl,al
c00169e3:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00169e8:	01 d0                	add    eax,edx
c00169ea:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00169f1:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00169f7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169fe:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016a05:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016a0a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a11:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016a18:	83 ec 0c             	sub    esp,0xc
c0016a1b:	68 34 02 00 00       	push   0x234
c0016a20:	e8 94 0d ff ff       	call   c00077b9 <malloc>
c0016a25:	83 c4 10             	add    esp,0x10
c0016a28:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a2f:	83 ec 04             	sub    esp,0x4
c0016a32:	6a 00                	push   0x0
c0016a34:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a3b:	50                   	push   eax
c0016a3c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a43:	e8 73 d0 fe ff       	call   c0003abb <f_mount>
c0016a48:	83 c4 10             	add    esp,0x10
c0016a4b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a52:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a5a:	74 1c                	je     c0016a78 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a66:	e8 6e 0d ff ff       	call   c00077d9 <rfree>
c0016a6b:	83 c4 10             	add    esp,0x10
c0016a6e:	b0 00                	mov    al,0x0
c0016a70:	e9 f3 00 00 00       	jmp    c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a75:	8d 76 00             	lea    esi,[esi+0x0]
c0016a78:	83 ec 04             	sub    esp,0x4
c0016a7b:	68 00 01 00 00       	push   0x100
c0016a80:	6a 00                	push   0x0
c0016a82:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a89:	50                   	push   eax
c0016a8a:	e8 41 9a fe ff       	call   c00004d0 <memset>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	83 ec 08             	sub    esp,0x8
c0016a95:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a9c:	50                   	push   eax
c0016a9d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016aa4:	50                   	push   eax
c0016aa5:	e8 16 9d fe ff       	call   c00007c0 <strcat>
c0016aaa:	83 c4 10             	add    esp,0x10
c0016aad:	83 ec 08             	sub    esp,0x8
c0016ab0:	68 0a f2 01 c0       	push   0xc001f20a
c0016ab5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016abc:	50                   	push   eax
c0016abd:	e8 fe 9c fe ff       	call   c00007c0 <strcat>
c0016ac2:	83 c4 10             	add    esp,0x10
c0016ac5:	83 ec 04             	sub    esp,0x4
c0016ac8:	6a 01                	push   0x1
c0016aca:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016ad1:	50                   	push   eax
c0016ad2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ad6:	50                   	push   eax
c0016ad7:	e8 41 d0 fe ff       	call   c0003b1d <f_open>
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016ae6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016aed:	85 c0                	test   eax,eax
c0016aef:	74 0b                	je     c0016afc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016af1:	78 31                	js     c0016b24 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016af3:	83 e8 04             	sub    eax,0x4
c0016af6:	83 f8 01             	cmp    eax,0x1
c0016af9:	77 29                	ja     c0016b24 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016afb:	90                   	nop
c0016afc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b04:	83 ec 0c             	sub    esp,0xc
c0016b07:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b0b:	50                   	push   eax
c0016b0c:	e8 bf d7 fe ff       	call   c00042d0 <f_close>
c0016b11:	83 c4 10             	add    esp,0x10
c0016b14:	90                   	nop
c0016b15:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b1d:	74 41                	je     c0016b60 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b1f:	eb 33                	jmp    c0016b54 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b21:	8d 76 00             	lea    esi,[esi+0x0]
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b2e:	e8 a6 0c ff ff       	call   c00077d9 <rfree>
c0016b33:	83 c4 10             	add    esp,0x10
c0016b36:	83 ec 04             	sub    esp,0x4
c0016b39:	6a 00                	push   0x0
c0016b3b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b42:	50                   	push   eax
c0016b43:	6a 00                	push   0x0
c0016b45:	e8 71 cf fe ff       	call   c0003abb <f_mount>
c0016b4a:	83 c4 10             	add    esp,0x10
c0016b4d:	b0 00                	mov    al,0x0
c0016b4f:	eb 17                	jmp    c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b51:	8d 76 00             	lea    esi,[esi+0x0]
c0016b54:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016b59:	40                   	inc    eax
c0016b5a:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016b5f:	90                   	nop
c0016b60:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016b67:	90                   	nop
c0016b68:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016b6e:	c3                   	ret    
c0016b6f:	90                   	nop

c0016b70 <FAT::allocateSwapfile(char const*, int)>:
c0016b70:	55                   	push   ebp
c0016b71:	57                   	push   edi
c0016b72:	56                   	push   esi
c0016b73:	53                   	push   ebx
c0016b74:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016b7a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016b85:	83 ec 0c             	sub    esp,0xc
c0016b88:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016b8f:	e8 25 0c ff ff       	call   c00077b9 <malloc>
c0016b94:	83 c4 10             	add    esp,0x10
c0016b97:	89 c7                	mov    edi,eax
c0016b99:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016b9e:	83 ec 04             	sub    esp,0x4
c0016ba1:	50                   	push   eax
c0016ba2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016ba9:	57                   	push   edi
c0016baa:	e8 33 40 ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0016baf:	83 c4 10             	add    esp,0x10
c0016bb2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016bb9:	83 ec 04             	sub    esp,0x4
c0016bbc:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016bc0:	50                   	push   eax
c0016bc1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bc5:	50                   	push   eax
c0016bc6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bcd:	e8 7c 43 ff ff       	call   c000af4e <File::stat(unsigned long long*, bool*)>
c0016bd2:	83 c4 10             	add    esp,0x10
c0016bd5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016bdc:	c1 e0 14             	shl    eax,0x14
c0016bdf:	89 c7                	mov    edi,eax
c0016be1:	89 c5                	mov    ebp,eax
c0016be3:	c1 fd 1f             	sar    ebp,0x1f
c0016be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bee:	89 f9                	mov    ecx,edi
c0016bf0:	31 c1                	xor    ecx,eax
c0016bf2:	89 cb                	mov    ebx,ecx
c0016bf4:	89 e9                	mov    ecx,ebp
c0016bf6:	31 d1                	xor    ecx,edx
c0016bf8:	89 ce                	mov    esi,ecx
c0016bfa:	89 f0                	mov    eax,esi
c0016bfc:	09 d8                	or     eax,ebx
c0016bfe:	0f 84 9c 00 00 00    	je     c0016ca0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c0e:	e8 07 42 ff ff       	call   c000ae1a <File::unlink()>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	83 ec 08             	sub    esp,0x8
c0016c19:	6a 12                	push   0x12
c0016c1b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c22:	e8 7b 40 ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c0016c27:	83 c4 10             	add    esp,0x10
c0016c2a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c31:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c37:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c3e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c45:	c1 e0 14             	shl    eax,0x14
c0016c48:	83 ec 04             	sub    esp,0x4
c0016c4b:	6a 01                	push   0x1
c0016c4d:	50                   	push   eax
c0016c4e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c55:	e8 db e4 fe ff       	call   c0005135 <f_expand>
c0016c5a:	83 c4 10             	add    esp,0x10
c0016c5d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c66:	83 c0 10             	add    eax,0x10
c0016c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c72:	52                   	push   edx
c0016c73:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016c77:	52                   	push   edx
c0016c78:	6a 00                	push   0x0
c0016c7a:	68 00 04 00 00       	push   0x400
c0016c7f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c86:	ff d0                	call   eax
c0016c88:	83 c4 20             	add    esp,0x20
c0016c8b:	83 ec 0c             	sub    esp,0xc
c0016c8e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c95:	e8 66 40 ff ff       	call   c000ad00 <File::close()>
c0016c9a:	83 c4 10             	add    esp,0x10
c0016c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016ca0:	83 ec 08             	sub    esp,0x8
c0016ca3:	6a 01                	push   0x1
c0016ca5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cac:	e8 f1 3f ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cbd:	83 c0 0c             	add    eax,0xc
c0016cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cc2:	83 ec 0c             	sub    esp,0xc
c0016cc5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cc9:	52                   	push   edx
c0016cca:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016cce:	52                   	push   edx
c0016ccf:	6a 00                	push   0x0
c0016cd1:	6a 04                	push   0x4
c0016cd3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cda:	ff d0                	call   eax
c0016cdc:	83 c4 20             	add    esp,0x20
c0016cdf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ce6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016cec:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016cf3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016cfa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016cfd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d04:	83 ec 0c             	sub    esp,0xc
c0016d07:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d0e:	e8 ed 3f ff ff       	call   c000ad00 <File::close()>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d1d:	ba 00 00 00 00       	mov    edx,0x0
c0016d22:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d28:	5b                   	pop    ebx
c0016d29:	5e                   	pop    esi
c0016d2a:	5f                   	pop    edi
c0016d2b:	5d                   	pop    ebp
c0016d2c:	c3                   	ret    
c0016d2d:	90                   	nop
c0016d2e:	66 90                	xchg   ax,ax

c0016d30 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d30:	57                   	push   edi
c0016d31:	56                   	push   esi
c0016d32:	53                   	push   ebx
c0016d33:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d39:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d41:	74 0d                	je     c0016d50 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d43:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d4b:	75 0f                	jne    c0016d5c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d50:	b8 04 00 00 00       	mov    eax,0x4
c0016d55:	e9 36 01 00 00       	jmp    c0016e90 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d5a:	66 90                	xchg   ax,ax
c0016d5c:	83 ec 08             	sub    esp,0x8
c0016d5f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d66:	50                   	push   eax
c0016d67:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016d6e:	e8 20 d8 fe ff       	call   c0004593 <f_readdir>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016d7d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016d8e:	83 c0 16             	add    eax,0x16
c0016d91:	50                   	push   eax
c0016d92:	e8 a9 97 fe ff       	call   c0000540 <strlen>
c0016d97:	83 c4 10             	add    esp,0x10
c0016d9a:	ba 00 00 00 00       	mov    edx,0x0
c0016d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016da7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016dae:	25 ff 00 00 00       	and    eax,0xff
c0016db3:	83 e0 10             	and    eax,0x10
c0016db6:	74 08                	je     c0016dc0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016db8:	b8 02 00 00 00       	mov    eax,0x2
c0016dbd:	eb 09                	jmp    c0016dc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016dbf:	90                   	nop
c0016dc0:	b8 01 00 00 00       	mov    eax,0x1
c0016dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0016dc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dcc:	83 ec 08             	sub    esp,0x8
c0016dcf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016dd6:	83 c0 16             	add    eax,0x16
c0016dd9:	50                   	push   eax
c0016dda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016dde:	83 c0 10             	add    eax,0x10
c0016de1:	50                   	push   eax
c0016de2:	e8 19 98 fe ff       	call   c0000600 <strcpy>
c0016de7:	83 c4 10             	add    esp,0x10
c0016dea:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016df1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016df8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dfc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e03:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e0a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e11:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e18:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e1f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e26:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e2d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e34:	89 c6                	mov    esi,eax
c0016e36:	89 d7                	mov    edi,edx
c0016e38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e3a:	89 c8                	mov    eax,ecx
c0016e3c:	89 fa                	mov    edx,edi
c0016e3e:	89 f3                	mov    ebx,esi
c0016e40:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e47:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e4e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e55:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016e5c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e62:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016e69:	84 c0                	test   al,al
c0016e6b:	75 07                	jne    c0016e74 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016e6d:	b8 07 00 00 00       	mov    eax,0x7
c0016e72:	eb 1c                	jmp    c0016e90 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e74:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016e7b:	85 c0                	test   eax,eax
c0016e7d:	75 09                	jne    c0016e88 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016e7f:	b8 00 00 00 00       	mov    eax,0x0
c0016e84:	eb 0a                	jmp    c0016e90 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e86:	66 90                	xchg   ax,ax
c0016e88:	b8 01 00 00 00       	mov    eax,0x1
c0016e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e90:	81 c4 50 02 00 00    	add    esp,0x250
c0016e96:	5b                   	pop    ebx
c0016e97:	5e                   	pop    esi
c0016e98:	5f                   	pop    edi
c0016e99:	c3                   	ret    
c0016e9a:	66 90                	xchg   ax,ax

c0016e9c <FAT::read(void*, unsigned long, void*, int*)>:
c0016e9c:	83 ec 1c             	sub    esp,0x1c
c0016e9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ea4:	74 0a                	je     c0016eb0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016ea6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016eab:	75 0b                	jne    c0016eb8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ead:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb0:	b8 04 00 00 00       	mov    eax,0x4
c0016eb5:	eb 41                	jmp    c0016ef8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016eb7:	90                   	nop
c0016eb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ebc:	50                   	push   eax
c0016ebd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ec1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ec5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ec9:	e8 1a cf fe ff       	call   c0003de8 <f_read>
c0016ece:	83 c4 10             	add    esp,0x10
c0016ed1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ed5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ed9:	89 c2                	mov    edx,eax
c0016edb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016edf:	89 10                	mov    DWORD PTR [eax],edx
c0016ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ee5:	85 c0                	test   eax,eax
c0016ee7:	75 07                	jne    c0016ef0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016ee9:	b8 00 00 00 00       	mov    eax,0x0
c0016eee:	eb 08                	jmp    c0016ef8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016ef0:	b8 01 00 00 00       	mov    eax,0x1
c0016ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef8:	83 c4 1c             	add    esp,0x1c
c0016efb:	c3                   	ret    

c0016efc <FAT::write(void*, unsigned long, void*, int*)>:
c0016efc:	83 ec 1c             	sub    esp,0x1c
c0016eff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f04:	74 0a                	je     c0016f10 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f06:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f0b:	75 0b                	jne    c0016f18 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f10:	b8 04 00 00 00       	mov    eax,0x4
c0016f15:	eb 41                	jmp    c0016f58 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f17:	90                   	nop
c0016f18:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f1c:	50                   	push   eax
c0016f1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f29:	e8 b9 d0 fe ff       	call   c0003fe7 <f_write>
c0016f2e:	83 c4 10             	add    esp,0x10
c0016f31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f39:	89 c2                	mov    edx,eax
c0016f3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f3f:	89 10                	mov    DWORD PTR [eax],edx
c0016f41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f45:	85 c0                	test   eax,eax
c0016f47:	75 07                	jne    c0016f50 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f49:	b8 00 00 00 00       	mov    eax,0x0
c0016f4e:	eb 08                	jmp    c0016f58 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f50:	b8 01 00 00 00       	mov    eax,0x1
c0016f55:	8d 76 00             	lea    esi,[esi+0x0]
c0016f58:	83 c4 1c             	add    esp,0x1c
c0016f5b:	c3                   	ret    

c0016f5c <FAT::close(void*)>:
c0016f5c:	83 ec 1c             	sub    esp,0x1c
c0016f5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f64:	75 0a                	jne    c0016f70 <FAT::close(void*)+0x14>
c0016f66:	b8 04 00 00 00       	mov    eax,0x4
c0016f6b:	eb 3f                	jmp    c0016fac <FAT::close(void*)+0x50>
c0016f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f70:	83 ec 0c             	sub    esp,0xc
c0016f73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f77:	e8 54 d3 fe ff       	call   c00042d0 <f_close>
c0016f7c:	83 c4 10             	add    esp,0x10
c0016f7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f83:	83 ec 0c             	sub    esp,0xc
c0016f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f8a:	e8 3a 08 ff ff       	call   c00077c9 <free>
c0016f8f:	83 c4 10             	add    esp,0x10
c0016f92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f96:	85 c0                	test   eax,eax
c0016f98:	75 0a                	jne    c0016fa4 <FAT::close(void*)+0x48>
c0016f9a:	b8 00 00 00 00       	mov    eax,0x0
c0016f9f:	eb 0b                	jmp    c0016fac <FAT::close(void*)+0x50>
c0016fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa4:	b8 01 00 00 00       	mov    eax,0x1
c0016fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fac:	83 c4 1c             	add    esp,0x1c
c0016faf:	c3                   	ret    

c0016fb0 <FAT::closeDir(void*)>:
c0016fb0:	83 ec 1c             	sub    esp,0x1c
c0016fb3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fb8:	75 0a                	jne    c0016fc4 <FAT::closeDir(void*)+0x14>
c0016fba:	b8 04 00 00 00       	mov    eax,0x4
c0016fbf:	eb 3f                	jmp    c0017000 <FAT::closeDir(void*)+0x50>
c0016fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fc4:	83 ec 0c             	sub    esp,0xc
c0016fc7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fcb:	e8 a1 d5 fe ff       	call   c0004571 <f_closedir>
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fd7:	83 ec 0c             	sub    esp,0xc
c0016fda:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fde:	e8 e6 07 ff ff       	call   c00077c9 <free>
c0016fe3:	83 c4 10             	add    esp,0x10
c0016fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fea:	85 c0                	test   eax,eax
c0016fec:	75 0a                	jne    c0016ff8 <FAT::closeDir(void*)+0x48>
c0016fee:	b8 00 00 00 00       	mov    eax,0x0
c0016ff3:	eb 0b                	jmp    c0017000 <FAT::closeDir(void*)+0x50>
c0016ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff8:	b8 01 00 00 00       	mov    eax,0x1
c0016ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0017000:	83 c4 1c             	add    esp,0x1c
c0017003:	c3                   	ret    

c0017004 <FAT::seek(void*, unsigned long long)>:
c0017004:	83 ec 2c             	sub    esp,0x2c
c0017007:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001700b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001700f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017013:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017017:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001701c:	75 0a                	jne    c0017028 <FAT::seek(void*, unsigned long long)+0x24>
c001701e:	b8 04 00 00 00       	mov    eax,0x4
c0017023:	eb 33                	jmp    c0017058 <FAT::seek(void*, unsigned long long)+0x54>
c0017025:	8d 76 00             	lea    esi,[esi+0x0]
c0017028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001702c:	83 ec 08             	sub    esp,0x8
c001702f:	50                   	push   eax
c0017030:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017034:	e8 c6 d2 fe ff       	call   c00042ff <f_lseek>
c0017039:	83 c4 10             	add    esp,0x10
c001703c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017044:	85 c0                	test   eax,eax
c0017046:	75 08                	jne    c0017050 <FAT::seek(void*, unsigned long long)+0x4c>
c0017048:	b8 00 00 00 00       	mov    eax,0x0
c001704d:	eb 09                	jmp    c0017058 <FAT::seek(void*, unsigned long long)+0x54>
c001704f:	90                   	nop
c0017050:	b8 01 00 00 00       	mov    eax,0x1
c0017055:	8d 76 00             	lea    esi,[esi+0x0]
c0017058:	83 c4 2c             	add    esp,0x2c
c001705b:	c3                   	ret    

c001705c <fatWrapperReadDisk>:
c001705c:	53                   	push   ebx
c001705d:	83 ec 18             	sub    esp,0x18
c0017060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017064:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017068:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001706c:	25 ff 00 00 00       	and    eax,0xff
c0017071:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017078:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001707c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017080:	ba 00 00 00 00       	mov    edx,0x0
c0017085:	83 ec 0c             	sub    esp,0xc
c0017088:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001708c:	53                   	push   ebx
c001708d:	52                   	push   edx
c001708e:	50                   	push   eax
c001708f:	51                   	push   ecx
c0017090:	e8 ff 5c ff ff       	call   c000cd94 <LogicalDisk::read(unsigned long long, int, void*)>
c0017095:	83 c4 20             	add    esp,0x20
c0017098:	83 c4 18             	add    esp,0x18
c001709b:	5b                   	pop    ebx
c001709c:	c3                   	ret    
c001709d:	8d 76 00             	lea    esi,[esi+0x0]

c00170a0 <fatWrapperWriteDisk>:
c00170a0:	53                   	push   ebx
c00170a1:	83 ec 18             	sub    esp,0x18
c00170a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170b0:	25 ff 00 00 00       	and    eax,0xff
c00170b5:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c00170bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170c4:	ba 00 00 00 00       	mov    edx,0x0
c00170c9:	83 ec 0c             	sub    esp,0xc
c00170cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170d0:	53                   	push   ebx
c00170d1:	52                   	push   edx
c00170d2:	50                   	push   eax
c00170d3:	51                   	push   ecx
c00170d4:	e8 27 5d ff ff       	call   c000ce00 <LogicalDisk::write(unsigned long long, int, void*)>
c00170d9:	83 c4 20             	add    esp,0x20
c00170dc:	83 c4 18             	add    esp,0x18
c00170df:	5b                   	pop    ebx
c00170e0:	c3                   	ret    
c00170e1:	8d 76 00             	lea    esi,[esi+0x0]

c00170e4 <fatWrapperIoctl>:
c00170e4:	53                   	push   ebx
c00170e5:	83 ec 28             	sub    esp,0x28
c00170e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170f0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00170f4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00170f8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00170fd:	75 35                	jne    c0017134 <fatWrapperIoctl+0x50>
c00170ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017103:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017107:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001710b:	25 ff 00 00 00       	and    eax,0xff
c0017110:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0017117:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001711d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017123:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017127:	66 89 02             	mov    WORD PTR [edx],ax
c001712a:	b8 00 00 00 00       	mov    eax,0x0
c001712f:	e9 c4 00 00 00       	jmp    c00171f8 <fatWrapperIoctl+0x114>
c0017134:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017139:	75 75                	jne    c00171b0 <fatWrapperIoctl+0xcc>
c001713b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001713f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017143:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017147:	25 ff 00 00 00       	and    eax,0xff
c001714c:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0017153:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017159:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001715f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017165:	89 c8                	mov    eax,ecx
c0017167:	89 da                	mov    edx,ebx
c0017169:	0f a4 c2 0a          	shld   edx,eax,0xa
c001716d:	c1 e0 0a             	shl    eax,0xa
c0017170:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017174:	81 e1 ff 00 00 00    	and    ecx,0xff
c001717a:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0017181:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017187:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001718d:	89 cb                	mov    ebx,ecx
c001718f:	c1 fb 1f             	sar    ebx,0x1f
c0017192:	53                   	push   ebx
c0017193:	51                   	push   ecx
c0017194:	52                   	push   edx
c0017195:	50                   	push   eax
c0017196:	e8 a5 50 00 00       	call   c001c240 <__udivdi3>
c001719b:	83 c4 10             	add    esp,0x10
c001719e:	89 c2                	mov    edx,eax
c00171a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171a4:	89 10                	mov    DWORD PTR [eax],edx
c00171a6:	b8 00 00 00 00       	mov    eax,0x0
c00171ab:	eb 4b                	jmp    c00171f8 <fatWrapperIoctl+0x114>
c00171ad:	8d 76 00             	lea    esi,[esi+0x0]
c00171b0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171b5:	75 09                	jne    c00171c0 <fatWrapperIoctl+0xdc>
c00171b7:	b8 00 00 00 00       	mov    eax,0x0
c00171bc:	eb 3a                	jmp    c00171f8 <fatWrapperIoctl+0x114>
c00171be:	66 90                	xchg   ax,ax
c00171c0:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00171c5:	75 19                	jne    c00171e0 <fatWrapperIoctl+0xfc>
c00171c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171d3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00171d9:	b8 00 00 00 00       	mov    eax,0x0
c00171de:	eb 18                	jmp    c00171f8 <fatWrapperIoctl+0x114>
c00171e0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00171e5:	75 09                	jne    c00171f0 <fatWrapperIoctl+0x10c>
c00171e7:	b8 00 00 00 00       	mov    eax,0x0
c00171ec:	eb 0a                	jmp    c00171f8 <fatWrapperIoctl+0x114>
c00171ee:	66 90                	xchg   ax,ax
c00171f0:	b8 04 00 00 00       	mov    eax,0x4
c00171f5:	8d 76 00             	lea    esi,[esi+0x0]
c00171f8:	83 c4 28             	add    esp,0x28
c00171fb:	5b                   	pop    ebx
c00171fc:	c3                   	ret    
c00171fd:	90                   	nop
c00171fe:	66 90                	xchg   ax,ax

c0017200 <FAT::FAT()>:
c0017200:	83 ec 1c             	sub    esp,0x1c
c0017203:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017207:	83 ec 0c             	sub    esp,0xc
c001720a:	50                   	push   eax
c001720b:	e8 7e 37 ff ff       	call   c000a98e <Filesystem::Filesystem()>
c0017210:	83 c4 10             	add    esp,0x10
c0017213:	ba 20 f2 01 c0       	mov    edx,0xc001f220
c0017218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001721c:	89 10                	mov    DWORD PTR [eax],edx
c001721e:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c0017228:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017230:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017235:	7f 15                	jg     c001724c <FAT::FAT()+0x4c>
c0017237:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001723b:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c0017246:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001724a:	eb e4                	jmp    c0017230 <FAT::FAT()+0x30>
c001724c:	90                   	nop
c001724d:	83 c4 1c             	add    esp,0x1c
c0017250:	c3                   	ret    
c0017251:	90                   	nop
c0017252:	66 90                	xchg   ax,ax

c0017254 <FAT::fixFilepath(char*)>:
c0017254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017258:	8a 00                	mov    al,BYTE PTR [eax]
c001725a:	3c 40                	cmp    al,0x40
c001725c:	7e 2e                	jle    c001728c <FAT::fixFilepath(char*)+0x38>
c001725e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017262:	8a 00                	mov    al,BYTE PTR [eax]
c0017264:	83 e8 41             	sub    eax,0x41
c0017267:	88 c2                	mov    dl,al
c0017269:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001726d:	88 10                	mov    BYTE PTR [eax],dl
c001726f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017273:	8a 00                	mov    al,BYTE PTR [eax]
c0017275:	0f be c0             	movsx  eax,al
c0017278:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001727f:	83 c0 30             	add    eax,0x30
c0017282:	88 c2                	mov    dl,al
c0017284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017288:	88 10                	mov    BYTE PTR [eax],dl
c001728a:	66 90                	xchg   ax,ax
c001728c:	90                   	nop
c001728d:	c3                   	ret    
c001728e:	66 90                	xchg   ax,ax

c0017290 <FAT::open(char const*, void**, FileOpenMode)>:
c0017290:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017296:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001729e:	74 0c                	je     c00172ac <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172a0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172a8:	75 0e                	jne    c00172b8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172aa:	66 90                	xchg   ax,ax
c00172ac:	b8 04 00 00 00       	mov    eax,0x4
c00172b1:	e9 0a 01 00 00       	jmp    c00173c0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172b6:	66 90                	xchg   ax,ax
c00172b8:	83 ec 08             	sub    esp,0x8
c00172bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172c6:	50                   	push   eax
c00172c7:	e8 34 93 fe ff       	call   c0000600 <strcpy>
c00172cc:	83 c4 10             	add    esp,0x10
c00172cf:	83 ec 08             	sub    esp,0x8
c00172d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172d6:	50                   	push   eax
c00172d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172de:	e8 71 ff ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c00172e3:	83 c4 10             	add    esp,0x10
c00172e6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00172ee:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172f5:	83 e0 01             	and    eax,0x1
c00172f8:	74 0a                	je     c0017304 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00172fa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017302:	66 90                	xchg   ax,ax
c0017304:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001730b:	83 e0 04             	and    eax,0x4
c001730e:	74 10                	je     c0017320 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017310:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017318:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017320:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017327:	83 e0 02             	and    eax,0x2
c001732a:	74 08                	je     c0017334 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001732c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017334:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001733b:	83 e0 08             	and    eax,0x8
c001733e:	74 08                	je     c0017348 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017340:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017348:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001734f:	83 e0 10             	and    eax,0x10
c0017352:	74 08                	je     c001735c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017354:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001735c:	83 ec 0c             	sub    esp,0xc
c001735f:	68 28 02 00 00       	push   0x228
c0017364:	e8 50 04 ff ff       	call   c00077b9 <malloc>
c0017369:	83 c4 10             	add    esp,0x10
c001736c:	89 c2                	mov    edx,eax
c001736e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017375:	89 10                	mov    DWORD PTR [eax],edx
c0017377:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001737e:	31 d2                	xor    edx,edx
c0017380:	88 c2                	mov    dl,al
c0017382:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017389:	8b 00                	mov    eax,DWORD PTR [eax]
c001738b:	83 ec 04             	sub    esp,0x4
c001738e:	52                   	push   edx
c001738f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017393:	52                   	push   edx
c0017394:	50                   	push   eax
c0017395:	e8 83 c7 fe ff       	call   c0003b1d <f_open>
c001739a:	83 c4 10             	add    esp,0x10
c001739d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173a4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00173ac:	74 0a                	je     c00173b8 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00173ae:	b8 01 00 00 00       	mov    eax,0x1
c00173b3:	eb 0b                	jmp    c00173c0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173b5:	8d 76 00             	lea    esi,[esi+0x0]
c00173b8:	b8 00 00 00 00       	mov    eax,0x0
c00173bd:	8d 76 00             	lea    esi,[esi+0x0]
c00173c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173c6:	c3                   	ret    
c00173c7:	90                   	nop

c00173c8 <FAT::openDir(char const*, void**)>:
c00173c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00173ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00173d6:	74 0c                	je     c00173e4 <FAT::openDir(char const*, void**)+0x1c>
c00173d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00173e0:	75 0e                	jne    c00173f0 <FAT::openDir(char const*, void**)+0x28>
c00173e2:	66 90                	xchg   ax,ax
c00173e4:	b8 04 00 00 00       	mov    eax,0x4
c00173e9:	e9 82 00 00 00       	jmp    c0017470 <FAT::openDir(char const*, void**)+0xa8>
c00173ee:	66 90                	xchg   ax,ax
c00173f0:	83 ec 08             	sub    esp,0x8
c00173f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00173fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173fe:	50                   	push   eax
c00173ff:	e8 fc 91 fe ff       	call   c0000600 <strcpy>
c0017404:	83 c4 10             	add    esp,0x10
c0017407:	83 ec 08             	sub    esp,0x8
c001740a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001740e:	50                   	push   eax
c001740f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017416:	e8 39 fe ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c001741b:	83 c4 10             	add    esp,0x10
c001741e:	83 ec 0c             	sub    esp,0xc
c0017421:	6a 30                	push   0x30
c0017423:	e8 91 03 ff ff       	call   c00077b9 <malloc>
c0017428:	83 c4 10             	add    esp,0x10
c001742b:	89 c2                	mov    edx,eax
c001742d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017434:	89 10                	mov    DWORD PTR [eax],edx
c0017436:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001743d:	8b 00                	mov    eax,DWORD PTR [eax]
c001743f:	83 ec 08             	sub    esp,0x8
c0017442:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017446:	52                   	push   edx
c0017447:	50                   	push   eax
c0017448:	e8 59 d0 fe ff       	call   c00044a6 <f_opendir>
c001744d:	83 c4 10             	add    esp,0x10
c0017450:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017457:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001745f:	74 07                	je     c0017468 <FAT::openDir(char const*, void**)+0xa0>
c0017461:	b8 01 00 00 00       	mov    eax,0x1
c0017466:	eb 08                	jmp    c0017470 <FAT::openDir(char const*, void**)+0xa8>
c0017468:	b8 00 00 00 00       	mov    eax,0x0
c001746d:	8d 76 00             	lea    esi,[esi+0x0]
c0017470:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017476:	c3                   	ret    
c0017477:	90                   	nop

c0017478 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017478:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001747e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017486:	75 0c                	jne    c0017494 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017488:	b8 04 00 00 00       	mov    eax,0x4
c001748d:	e9 d6 00 00 00       	jmp    c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017492:	66 90                	xchg   ax,ax
c0017494:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001749c:	75 0a                	jne    c00174a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001749e:	b8 04 00 00 00       	mov    eax,0x4
c00174a3:	e9 c0 00 00 00       	jmp    c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174a8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174b0:	75 0a                	jne    c00174bc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174b2:	b8 04 00 00 00       	mov    eax,0x4
c00174b7:	e9 ac 00 00 00       	jmp    c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174bc:	83 ec 08             	sub    esp,0x8
c00174bf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174c6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174cd:	50                   	push   eax
c00174ce:	e8 2d 91 fe ff       	call   c0000600 <strcpy>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	83 ec 08             	sub    esp,0x8
c00174d9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00174e0:	50                   	push   eax
c00174e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174e8:	e8 67 fd ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c00174ed:	83 c4 10             	add    esp,0x10
c00174f0:	83 ec 08             	sub    esp,0x8
c00174f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00174f7:	50                   	push   eax
c00174f8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174ff:	50                   	push   eax
c0017500:	e8 20 d1 fe ff       	call   c0004625 <f_stat>
c0017505:	83 c4 10             	add    esp,0x10
c0017508:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001750f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017516:	85 c0                	test   eax,eax
c0017518:	74 0a                	je     c0017524 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001751a:	83 f8 04             	cmp    eax,0x4
c001751d:	74 39                	je     c0017558 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001751f:	eb 3f                	jmp    c0017560 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017521:	8d 76 00             	lea    esi,[esi+0x0]
c0017524:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017528:	25 ff 00 00 00       	and    eax,0xff
c001752d:	83 e0 10             	and    eax,0x10
c0017530:	0f 95 c2             	setne  dl
c0017533:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001753a:	88 10                	mov    BYTE PTR [eax],dl
c001753c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017540:	ba 00 00 00 00       	mov    edx,0x0
c0017545:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001754c:	89 01                	mov    DWORD PTR [ecx],eax
c001754e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017551:	b8 00 00 00 00       	mov    eax,0x0
c0017556:	eb 10                	jmp    c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017558:	b8 02 00 00 00       	mov    eax,0x2
c001755d:	eb 09                	jmp    c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001755f:	90                   	nop
c0017560:	b8 01 00 00 00       	mov    eax,0x1
c0017565:	8d 76 00             	lea    esi,[esi+0x0]
c0017568:	81 c4 2c 02 00 00    	add    esp,0x22c
c001756e:	c3                   	ret    
c001756f:	90                   	nop

c0017570 <FAT::unlink(char const*)>:
c0017570:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017576:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001757e:	75 08                	jne    c0017588 <FAT::unlink(char const*)+0x18>
c0017580:	b8 04 00 00 00       	mov    eax,0x4
c0017585:	eb 61                	jmp    c00175e8 <FAT::unlink(char const*)+0x78>
c0017587:	90                   	nop
c0017588:	83 ec 08             	sub    esp,0x8
c001758b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017592:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017596:	50                   	push   eax
c0017597:	e8 64 90 fe ff       	call   c0000600 <strcpy>
c001759c:	83 c4 10             	add    esp,0x10
c001759f:	83 ec 08             	sub    esp,0x8
c00175a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175a6:	50                   	push   eax
c00175a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175ae:	e8 a1 fc ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c00175b3:	83 c4 10             	add    esp,0x10
c00175b6:	83 ec 0c             	sub    esp,0xc
c00175b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175bd:	50                   	push   eax
c00175be:	e8 c7 d2 fe ff       	call   c000488a <f_unlink>
c00175c3:	83 c4 10             	add    esp,0x10
c00175c6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00175cd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00175d4:	85 c0                	test   eax,eax
c00175d6:	75 08                	jne    c00175e0 <FAT::unlink(char const*)+0x70>
c00175d8:	b8 00 00 00 00       	mov    eax,0x0
c00175dd:	eb 09                	jmp    c00175e8 <FAT::unlink(char const*)+0x78>
c00175df:	90                   	nop
c00175e0:	b8 01 00 00 00       	mov    eax,0x1
c00175e5:	8d 76 00             	lea    esi,[esi+0x0]
c00175e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00175ee:	c3                   	ret    
c00175ef:	90                   	nop

c00175f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00175f0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00175f6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00175fd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017604:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017608:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001760c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017614:	75 0a                	jne    c0017620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017616:	b8 04 00 00 00       	mov    eax,0x4
c001761b:	e9 54 01 00 00       	jmp    c0017774 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017620:	83 ec 08             	sub    esp,0x8
c0017623:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001762a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001762e:	50                   	push   eax
c001762f:	e8 cc 8f fe ff       	call   c0000600 <strcpy>
c0017634:	83 c4 10             	add    esp,0x10
c0017637:	83 ec 08             	sub    esp,0x8
c001763a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001763e:	50                   	push   eax
c001763f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017646:	e8 09 fc ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c001764b:	83 c4 10             	add    esp,0x10
c001764e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017656:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001765e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017662:	25 ff 00 00 00       	and    eax,0xff
c0017667:	83 e0 01             	and    eax,0x1
c001766a:	74 08                	je     c0017674 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001766c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017674:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017678:	25 ff 00 00 00       	and    eax,0xff
c001767d:	83 e0 02             	and    eax,0x2
c0017680:	74 0a                	je     c001768c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017682:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001768a:	66 90                	xchg   ax,ax
c001768c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017690:	25 ff 00 00 00       	and    eax,0xff
c0017695:	83 e0 04             	and    eax,0x4
c0017698:	74 0a                	je     c00176a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001769a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176a2:	66 90                	xchg   ax,ax
c00176a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176a8:	25 ff 00 00 00       	and    eax,0xff
c00176ad:	83 e0 08             	and    eax,0x8
c00176b0:	74 0a                	je     c00176bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176b2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00176ba:	66 90                	xchg   ax,ax
c00176bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176c0:	25 ff 00 00 00       	and    eax,0xff
c00176c5:	83 e0 01             	and    eax,0x1
c00176c8:	74 0a                	je     c00176d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00176ca:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00176d2:	66 90                	xchg   ax,ax
c00176d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176d8:	25 ff 00 00 00       	and    eax,0xff
c00176dd:	83 e0 02             	and    eax,0x2
c00176e0:	74 0a                	je     c00176ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00176e2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00176ea:	66 90                	xchg   ax,ax
c00176ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176f0:	25 ff 00 00 00       	and    eax,0xff
c00176f5:	83 e0 04             	and    eax,0x4
c00176f8:	74 0a                	je     c0017704 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00176fa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017702:	66 90                	xchg   ax,ax
c0017704:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017708:	25 ff 00 00 00       	and    eax,0xff
c001770d:	83 e0 08             	and    eax,0x8
c0017710:	74 0a                	je     c001771c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017712:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001771a:	66 90                	xchg   ax,ax
c001771c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017723:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001772a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017731:	31 d2                	xor    edx,edx
c0017733:	88 c2                	mov    dl,al
c0017735:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001773c:	25 ff 00 00 00       	and    eax,0xff
c0017741:	83 ec 04             	sub    esp,0x4
c0017744:	52                   	push   edx
c0017745:	50                   	push   eax
c0017746:	8d 44 24 24          	lea    eax,[esp+0x24]
c001774a:	50                   	push   eax
c001774b:	e8 ad d5 fe ff       	call   c0004cfd <f_chmod>
c0017750:	83 c4 10             	add    esp,0x10
c0017753:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001775a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017761:	85 c0                	test   eax,eax
c0017763:	75 07                	jne    c001776c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017765:	b8 00 00 00 00       	mov    eax,0x0
c001776a:	eb 08                	jmp    c0017774 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001776c:	b8 01 00 00 00       	mov    eax,0x1
c0017771:	8d 76 00             	lea    esi,[esi+0x0]
c0017774:	81 c4 2c 01 00 00    	add    esp,0x12c
c001777a:	c3                   	ret    
c001777b:	90                   	nop

c001777c <FAT::rename(char const*, char const*)>:
c001777c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017782:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001778a:	74 0c                	je     c0017798 <FAT::rename(char const*, char const*)+0x1c>
c001778c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017794:	75 0e                	jne    c00177a4 <FAT::rename(char const*, char const*)+0x28>
c0017796:	66 90                	xchg   ax,ax
c0017798:	b8 04 00 00 00       	mov    eax,0x4
c001779d:	e9 9e 00 00 00       	jmp    c0017840 <FAT::rename(char const*, char const*)+0xc4>
c00177a2:	66 90                	xchg   ax,ax
c00177a4:	83 ec 08             	sub    esp,0x8
c00177a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177ae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177b5:	50                   	push   eax
c00177b6:	e8 45 8e fe ff       	call   c0000600 <strcpy>
c00177bb:	83 c4 10             	add    esp,0x10
c00177be:	83 ec 08             	sub    esp,0x8
c00177c1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00177c8:	50                   	push   eax
c00177c9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177d0:	e8 7f fa ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c00177d5:	83 c4 10             	add    esp,0x10
c00177d8:	83 ec 08             	sub    esp,0x8
c00177db:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00177e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177e6:	50                   	push   eax
c00177e7:	e8 14 8e fe ff       	call   c0000600 <strcpy>
c00177ec:	83 c4 10             	add    esp,0x10
c00177ef:	83 ec 08             	sub    esp,0x8
c00177f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177f6:	50                   	push   eax
c00177f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177fe:	e8 51 fa ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c0017803:	83 c4 10             	add    esp,0x10
c0017806:	83 ec 08             	sub    esp,0x8
c0017809:	8d 44 24 14          	lea    eax,[esp+0x14]
c001780d:	50                   	push   eax
c001780e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017815:	50                   	push   eax
c0017816:	e8 2c d3 fe ff       	call   c0004b47 <f_rename>
c001781b:	83 c4 10             	add    esp,0x10
c001781e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017825:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001782c:	85 c0                	test   eax,eax
c001782e:	75 08                	jne    c0017838 <FAT::rename(char const*, char const*)+0xbc>
c0017830:	b8 00 00 00 00       	mov    eax,0x0
c0017835:	eb 09                	jmp    c0017840 <FAT::rename(char const*, char const*)+0xc4>
c0017837:	90                   	nop
c0017838:	b8 01 00 00 00       	mov    eax,0x1
c001783d:	8d 76 00             	lea    esi,[esi+0x0]
c0017840:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017846:	c3                   	ret    
c0017847:	90                   	nop

c0017848 <FAT::mkdir(char const*)>:
c0017848:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001784e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017856:	75 08                	jne    c0017860 <FAT::mkdir(char const*)+0x18>
c0017858:	b8 04 00 00 00       	mov    eax,0x4
c001785d:	eb 61                	jmp    c00178c0 <FAT::mkdir(char const*)+0x78>
c001785f:	90                   	nop
c0017860:	83 ec 08             	sub    esp,0x8
c0017863:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001786a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001786e:	50                   	push   eax
c001786f:	e8 8c 8d fe ff       	call   c0000600 <strcpy>
c0017874:	83 c4 10             	add    esp,0x10
c0017877:	83 ec 08             	sub    esp,0x8
c001787a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001787e:	50                   	push   eax
c001787f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017886:	e8 c9 f9 ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c001788b:	83 c4 10             	add    esp,0x10
c001788e:	83 ec 0c             	sub    esp,0xc
c0017891:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017895:	50                   	push   eax
c0017896:	e8 11 d1 fe ff       	call   c00049ac <f_mkdir>
c001789b:	83 c4 10             	add    esp,0x10
c001789e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178a5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00178ac:	85 c0                	test   eax,eax
c00178ae:	75 08                	jne    c00178b8 <FAT::mkdir(char const*)+0x70>
c00178b0:	b8 00 00 00 00       	mov    eax,0x0
c00178b5:	eb 09                	jmp    c00178c0 <FAT::mkdir(char const*)+0x78>
c00178b7:	90                   	nop
c00178b8:	b8 01 00 00 00       	mov    eax,0x1
c00178bd:	8d 76 00             	lea    esi,[esi+0x0]
c00178c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178c6:	c3                   	ret    
c00178c7:	90                   	nop

c00178c8 <FAT::exists(char const*)>:
c00178c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00178ce:	83 ec 08             	sub    esp,0x8
c00178d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00178d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00178dc:	50                   	push   eax
c00178dd:	e8 1e 8d fe ff       	call   c0000600 <strcpy>
c00178e2:	83 c4 10             	add    esp,0x10
c00178e5:	83 ec 08             	sub    esp,0x8
c00178e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178ec:	50                   	push   eax
c00178ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00178f4:	e8 5b f9 ff ff       	call   c0017254 <FAT::fixFilepath(char*)>
c00178f9:	83 c4 10             	add    esp,0x10
c00178fc:	83 ec 08             	sub    esp,0x8
c00178ff:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017906:	50                   	push   eax
c0017907:	8d 44 24 10          	lea    eax,[esp+0x10]
c001790b:	50                   	push   eax
c001790c:	e8 14 cd fe ff       	call   c0004625 <f_stat>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001791b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017922:	85 c0                	test   eax,eax
c0017924:	75 06                	jne    c001792c <FAT::exists(char const*)+0x64>
c0017926:	b0 01                	mov    al,0x1
c0017928:	eb 06                	jmp    c0017930 <FAT::exists(char const*)+0x68>
c001792a:	66 90                	xchg   ax,ax
c001792c:	b0 00                	mov    al,0x0
c001792e:	66 90                	xchg   ax,ax
c0017930:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017936:	c3                   	ret    
c0017937:	90                   	nop

c0017938 <isoReadDiscSectorHelper>:
c0017938:	83 ec 2c             	sub    esp,0x2c
c001793b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001793f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017943:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017948:	83 e8 41             	sub    eax,0x41
c001794b:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017952:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017956:	ba 00 00 00 00       	mov    edx,0x0
c001795b:	83 ec 0c             	sub    esp,0xc
c001795e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017962:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017966:	52                   	push   edx
c0017967:	50                   	push   eax
c0017968:	51                   	push   ecx
c0017969:	e8 26 54 ff ff       	call   c000cd94 <LogicalDisk::read(unsigned long long, int, void*)>
c001796e:	83 c4 20             	add    esp,0x20
c0017971:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017975:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001797a:	74 0c                	je     c0017988 <isoReadDiscSectorHelper+0x50>
c001797c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017980:	c1 e0 0b             	shl    eax,0xb
c0017983:	eb 0b                	jmp    c0017990 <isoReadDiscSectorHelper+0x58>
c0017985:	8d 76 00             	lea    esi,[esi+0x0]
c0017988:	b8 00 00 00 00       	mov    eax,0x0
c001798d:	8d 76 00             	lea    esi,[esi+0x0]
c0017990:	83 c4 2c             	add    esp,0x2c
c0017993:	c3                   	ret    

c0017994 <iso_kprintf>:
c0017994:	83 ec 0c             	sub    esp,0xc
c0017997:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c001799c:	83 ec 08             	sub    esp,0x8
c001799f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179a3:	50                   	push   eax
c00179a4:	e8 8d 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00179a9:	83 c4 10             	add    esp,0x10
c00179ac:	90                   	nop
c00179ad:	83 c4 0c             	add    esp,0xc
c00179b0:	c3                   	ret    
c00179b1:	8d 76 00             	lea    esi,[esi+0x0]

c00179b4 <iso_kprintfd>:
c00179b4:	83 ec 0c             	sub    esp,0xc
c00179b7:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00179bc:	83 ec 08             	sub    esp,0x8
c00179bf:	68 80 f2 01 c0       	push   0xc001f280
c00179c4:	50                   	push   eax
c00179c5:	e8 6c 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00179ca:	83 c4 10             	add    esp,0x10
c00179cd:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00179d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00179d6:	83 ec 08             	sub    esp,0x8
c00179d9:	52                   	push   edx
c00179da:	50                   	push   eax
c00179db:	e8 10 0d ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00179e8:	83 ec 08             	sub    esp,0x8
c00179eb:	68 01 f1 01 c0       	push   0xc001f101
c00179f0:	50                   	push   eax
c00179f1:	e8 40 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00179f6:	83 c4 10             	add    esp,0x10
c00179f9:	90                   	nop
c00179fa:	83 c4 0c             	add    esp,0xc
c00179fd:	c3                   	ret    

c00179fe <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00179fe:	b8 08 00 00 00       	mov    eax,0x8
c0017a03:	c3                   	ret    

c0017a04 <ISO9660::getName()>:
c0017a04:	b8 83 f2 01 c0       	mov    eax,0xc001f283
c0017a09:	c3                   	ret    

c0017a0a <ISO9660::closeDir(void*)>:
c0017a0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a10:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017a13:	90                   	nop

c0017a14 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017a14:	b8 01 00 00 00       	mov    eax,0x1
c0017a19:	c3                   	ret    

c0017a1a <ISO9660::unlink(char const*)>:
c0017a1a:	b8 01 00 00 00       	mov    eax,0x1
c0017a1f:	c3                   	ret    

c0017a20 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017a20:	b8 03 00 00 00       	mov    eax,0x3
c0017a25:	c3                   	ret    

c0017a26 <ISO9660::rename(char const*, char const*)>:
c0017a26:	b8 01 00 00 00       	mov    eax,0x1
c0017a2b:	c3                   	ret    

c0017a2c <ISO9660::mkdir(char const*)>:
c0017a2c:	b8 01 00 00 00       	mov    eax,0x1
c0017a31:	c3                   	ret    

c0017a32 <ISO9660::~ISO9660()>:
c0017a32:	83 ec 0c             	sub    esp,0xc
c0017a35:	ba d4 f2 01 c0       	mov    edx,0xc001f2d4
c0017a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a3e:	89 10                	mov    DWORD PTR [eax],edx
c0017a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a44:	83 ec 0c             	sub    esp,0xc
c0017a47:	50                   	push   eax
c0017a48:	e8 65 2f ff ff       	call   c000a9b2 <Filesystem::~Filesystem()>
c0017a4d:	83 c4 10             	add    esp,0x10
c0017a50:	90                   	nop
c0017a51:	83 c4 0c             	add    esp,0xc
c0017a54:	c3                   	ret    
c0017a55:	90                   	nop

c0017a56 <ISO9660::~ISO9660()>:
c0017a56:	83 ec 0c             	sub    esp,0xc
c0017a59:	83 ec 0c             	sub    esp,0xc
c0017a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a60:	e8 cd ff ff ff       	call   c0017a32 <ISO9660::~ISO9660()>
c0017a65:	83 c4 10             	add    esp,0x10
c0017a68:	83 ec 08             	sub    esp,0x8
c0017a6b:	6a 08                	push   0x8
c0017a6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a71:	e8 01 2b ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c0017a76:	83 c4 10             	add    esp,0x10
c0017a79:	83 c4 0c             	add    esp,0xc
c0017a7c:	c3                   	ret    
c0017a7d:	90                   	nop

c0017a7e <ISO9660::exists(char const*)>:
c0017a7e:	83 ec 18             	sub    esp,0x18
c0017a81:	68 9e f2 01 c0       	push   0xc001f29e
c0017a86:	e8 64 88 ff ff       	call   c00102ef <KePanic(char const*)>
c0017a8b:	31 c0                	xor    eax,eax
c0017a8d:	83 c4 1c             	add    esp,0x1c
c0017a90:	c3                   	ret    
c0017a91:	90                   	nop

c0017a92 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a92:	56                   	push   esi
c0017a93:	53                   	push   ebx
c0017a94:	50                   	push   eax
c0017a95:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a99:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a9d:	85 db                	test   ebx,ebx
c0017a9f:	0f 84 82 00 00 00    	je     c0017b27 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017aa5:	85 f6                	test   esi,esi
c0017aa7:	74 7e                	je     c0017b27 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017aa9:	ba 03 00 00 00       	mov    edx,0x3
c0017aae:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017ab3:	75 77                	jne    c0017b2c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017ab5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017ab8:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017abe:	74 34                	je     c0017af4 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017ac0:	83 ec 0c             	sub    esp,0xc
c0017ac3:	50                   	push   eax
c0017ac4:	e8 f6 ec fe ff       	call   c00067bf <init_percd>
c0017ac9:	83 c4 10             	add    esp,0x10
c0017acc:	ba 0b 00 00 00       	mov    edx,0xb
c0017ad1:	40                   	inc    eax
c0017ad2:	74 58                	je     c0017b2c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017ad4:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017adb:	74 10                	je     c0017aed <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017add:	83 ec 0c             	sub    esp,0xc
c0017ae0:	68 bc f2 01 c0       	push   0xc001f2bc
c0017ae5:	e8 05 88 ff ff       	call   c00102ef <KePanic(char const*)>
c0017aea:	83 c4 10             	add    esp,0x10
c0017aed:	8a 03                	mov    al,BYTE PTR [ebx]
c0017aef:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017af4:	83 ec 0c             	sub    esp,0xc
c0017af7:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017afe:	83 c3 03             	add    ebx,0x3
c0017b01:	50                   	push   eax
c0017b02:	e8 b8 ec fe ff       	call   c00067bf <init_percd>
c0017b07:	59                   	pop    ecx
c0017b08:	58                   	pop    eax
c0017b09:	6a 00                	push   0x0
c0017b0b:	53                   	push   ebx
c0017b0c:	e8 ec e7 fe ff       	call   c00062fd <iso_open>
c0017b11:	83 c4 10             	add    esp,0x10
c0017b14:	ba 01 00 00 00       	mov    edx,0x1
c0017b19:	83 f8 ff             	cmp    eax,0xffffffff
c0017b1c:	74 0e                	je     c0017b2c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017b1e:	83 c0 64             	add    eax,0x64
c0017b21:	31 d2                	xor    edx,edx
c0017b23:	89 06                	mov    DWORD PTR [esi],eax
c0017b25:	eb 05                	jmp    c0017b2c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017b27:	ba 04 00 00 00       	mov    edx,0x4
c0017b2c:	89 d0                	mov    eax,edx
c0017b2e:	5a                   	pop    edx
c0017b2f:	5b                   	pop    ebx
c0017b30:	5e                   	pop    esi
c0017b31:	c3                   	ret    

c0017b32 <ISO9660::openDir(char const*, void**)>:
c0017b32:	56                   	push   esi
c0017b33:	53                   	push   ebx
c0017b34:	50                   	push   eax
c0017b35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b39:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b3d:	85 db                	test   ebx,ebx
c0017b3f:	74 76                	je     c0017bb7 <ISO9660::openDir(char const*, void**)+0x85>
c0017b41:	85 f6                	test   esi,esi
c0017b43:	74 72                	je     c0017bb7 <ISO9660::openDir(char const*, void**)+0x85>
c0017b45:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b48:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017b4e:	74 34                	je     c0017b84 <ISO9660::openDir(char const*, void**)+0x52>
c0017b50:	83 ec 0c             	sub    esp,0xc
c0017b53:	50                   	push   eax
c0017b54:	e8 66 ec fe ff       	call   c00067bf <init_percd>
c0017b59:	83 c4 10             	add    esp,0x10
c0017b5c:	ba 0b 00 00 00       	mov    edx,0xb
c0017b61:	40                   	inc    eax
c0017b62:	74 58                	je     c0017bbc <ISO9660::openDir(char const*, void**)+0x8a>
c0017b64:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017b6b:	74 10                	je     c0017b7d <ISO9660::openDir(char const*, void**)+0x4b>
c0017b6d:	83 ec 0c             	sub    esp,0xc
c0017b70:	68 bc f2 01 c0       	push   0xc001f2bc
c0017b75:	e8 75 87 ff ff       	call   c00102ef <KePanic(char const*)>
c0017b7a:	83 c4 10             	add    esp,0x10
c0017b7d:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b7f:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017b84:	83 ec 0c             	sub    esp,0xc
c0017b87:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017b8e:	83 c3 03             	add    ebx,0x3
c0017b91:	50                   	push   eax
c0017b92:	e8 28 ec fe ff       	call   c00067bf <init_percd>
c0017b97:	59                   	pop    ecx
c0017b98:	58                   	pop    eax
c0017b99:	6a 01                	push   0x1
c0017b9b:	53                   	push   ebx
c0017b9c:	e8 5c e7 fe ff       	call   c00062fd <iso_open>
c0017ba1:	83 c4 10             	add    esp,0x10
c0017ba4:	ba 01 00 00 00       	mov    edx,0x1
c0017ba9:	83 f8 ff             	cmp    eax,0xffffffff
c0017bac:	74 0e                	je     c0017bbc <ISO9660::openDir(char const*, void**)+0x8a>
c0017bae:	83 c0 64             	add    eax,0x64
c0017bb1:	31 d2                	xor    edx,edx
c0017bb3:	89 06                	mov    DWORD PTR [esi],eax
c0017bb5:	eb 05                	jmp    c0017bbc <ISO9660::openDir(char const*, void**)+0x8a>
c0017bb7:	ba 04 00 00 00       	mov    edx,0x4
c0017bbc:	89 d0                	mov    eax,edx
c0017bbe:	5a                   	pop    edx
c0017bbf:	5b                   	pop    ebx
c0017bc0:	5e                   	pop    esi
c0017bc1:	c3                   	ret    

c0017bc2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017bc2:	53                   	push   ebx
c0017bc3:	83 ec 08             	sub    esp,0x8
c0017bc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017bce:	85 c0                	test   eax,eax
c0017bd0:	74 25                	je     c0017bf7 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bd2:	85 db                	test   ebx,ebx
c0017bd4:	74 21                	je     c0017bf7 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bd6:	83 e8 64             	sub    eax,0x64
c0017bd9:	52                   	push   edx
c0017bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017be2:	50                   	push   eax
c0017be3:	e8 bd e7 fe ff       	call   c00063a5 <iso_read>
c0017be8:	83 c4 10             	add    esp,0x10
c0017beb:	89 03                	mov    DWORD PTR [ebx],eax
c0017bed:	09 d0                	or     eax,edx
c0017bef:	0f 94 c0             	sete   al
c0017bf2:	0f b6 c0             	movzx  eax,al
c0017bf5:	eb 05                	jmp    c0017bfc <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017bf7:	b8 04 00 00 00       	mov    eax,0x4
c0017bfc:	83 c4 08             	add    esp,0x8
c0017bff:	5b                   	pop    ebx
c0017c00:	c3                   	ret    
c0017c01:	90                   	nop

c0017c02 <ISO9660::seek(void*, unsigned long long)>:
c0017c02:	57                   	push   edi
c0017c03:	56                   	push   esi
c0017c04:	b8 04 00 00 00       	mov    eax,0x4
c0017c09:	51                   	push   ecx
c0017c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c0e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017c12:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017c16:	85 d2                	test   edx,edx
c0017c18:	74 1c                	je     c0017c36 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017c1a:	6a 00                	push   0x0
c0017c1c:	83 ea 64             	sub    edx,0x64
c0017c1f:	57                   	push   edi
c0017c20:	56                   	push   esi
c0017c21:	52                   	push   edx
c0017c22:	e8 94 e8 fe ff       	call   c00064bb <iso_seek>
c0017c27:	83 c4 10             	add    esp,0x10
c0017c2a:	31 f0                	xor    eax,esi
c0017c2c:	31 fa                	xor    edx,edi
c0017c2e:	09 d0                	or     eax,edx
c0017c30:	0f 95 c0             	setne  al
c0017c33:	0f b6 c0             	movzx  eax,al
c0017c36:	5a                   	pop    edx
c0017c37:	5e                   	pop    esi
c0017c38:	5f                   	pop    edi
c0017c39:	c3                   	ret    

c0017c3a <ISO9660::tell(void*, unsigned long long*)>:
c0017c3a:	53                   	push   ebx
c0017c3b:	83 ec 08             	sub    esp,0x8
c0017c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c42:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c46:	85 c0                	test   eax,eax
c0017c48:	74 1c                	je     c0017c66 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c4a:	85 db                	test   ebx,ebx
c0017c4c:	74 18                	je     c0017c66 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c4e:	83 ec 0c             	sub    esp,0xc
c0017c51:	83 e8 64             	sub    eax,0x64
c0017c54:	50                   	push   eax
c0017c55:	e8 e5 e8 fe ff       	call   c000653f <iso_tell>
c0017c5a:	83 c4 10             	add    esp,0x10
c0017c5d:	89 03                	mov    DWORD PTR [ebx],eax
c0017c5f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c62:	31 c0                	xor    eax,eax
c0017c64:	eb 05                	jmp    c0017c6b <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c66:	b8 04 00 00 00       	mov    eax,0x4
c0017c6b:	83 c4 08             	add    esp,0x8
c0017c6e:	5b                   	pop    ebx
c0017c6f:	c3                   	ret    

c0017c70 <ISO9660::stat(void*, unsigned long long*)>:
c0017c70:	53                   	push   ebx
c0017c71:	83 ec 08             	sub    esp,0x8
c0017c74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c78:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c7c:	85 c0                	test   eax,eax
c0017c7e:	74 20                	je     c0017ca0 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c80:	85 db                	test   ebx,ebx
c0017c82:	74 1c                	je     c0017ca0 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c84:	83 ec 0c             	sub    esp,0xc
c0017c87:	83 e8 64             	sub    eax,0x64
c0017c8a:	50                   	push   eax
c0017c8b:	e8 e0 e8 fe ff       	call   c0006570 <iso_total>
c0017c90:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c97:	89 03                	mov    DWORD PTR [ebx],eax
c0017c99:	83 c4 10             	add    esp,0x10
c0017c9c:	31 c0                	xor    eax,eax
c0017c9e:	eb 05                	jmp    c0017ca5 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017ca0:	b8 04 00 00 00       	mov    eax,0x4
c0017ca5:	83 c4 08             	add    esp,0x8
c0017ca8:	5b                   	pop    ebx
c0017ca9:	c3                   	ret    

c0017caa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017caa:	55                   	push   ebp
c0017cab:	57                   	push   edi
c0017cac:	56                   	push   esi
c0017cad:	53                   	push   ebx
c0017cae:	83 ec 0c             	sub    esp,0xc
c0017cb1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017cb5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017cb9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017cbd:	85 ff                	test   edi,edi
c0017cbf:	0f 94 c2             	sete   dl
c0017cc2:	85 f6                	test   esi,esi
c0017cc4:	0f 94 c0             	sete   al
c0017cc7:	08 c2                	or     dl,al
c0017cc9:	0f 85 9e 00 00 00    	jne    c0017d6d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017ccf:	85 db                	test   ebx,ebx
c0017cd1:	0f 84 96 00 00 00    	je     c0017d6d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017cd7:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017cda:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017ce0:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017ce7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017cea:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017cf0:	74 34                	je     c0017d26 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017cf2:	83 ec 0c             	sub    esp,0xc
c0017cf5:	50                   	push   eax
c0017cf6:	e8 c4 ea fe ff       	call   c00067bf <init_percd>
c0017cfb:	83 c4 10             	add    esp,0x10
c0017cfe:	ba 0b 00 00 00       	mov    edx,0xb
c0017d03:	40                   	inc    eax
c0017d04:	74 6c                	je     c0017d72 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017d06:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017d0d:	74 10                	je     c0017d1f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017d0f:	83 ec 0c             	sub    esp,0xc
c0017d12:	68 bc f2 01 c0       	push   0xc001f2bc
c0017d17:	e8 d3 85 ff ff       	call   c00102ef <KePanic(char const*)>
c0017d1c:	83 c4 10             	add    esp,0x10
c0017d1f:	8a 03                	mov    al,BYTE PTR [ebx]
c0017d21:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017d26:	83 c3 03             	add    ebx,0x3
c0017d29:	52                   	push   edx
c0017d2a:	52                   	push   edx
c0017d2b:	6a 00                	push   0x0
c0017d2d:	53                   	push   ebx
c0017d2e:	e8 ca e5 fe ff       	call   c00062fd <iso_open>
c0017d33:	83 c4 10             	add    esp,0x10
c0017d36:	89 c5                	mov    ebp,eax
c0017d38:	83 f8 ff             	cmp    eax,0xffffffff
c0017d3b:	75 0f                	jne    c0017d4c <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017d3d:	50                   	push   eax
c0017d3e:	50                   	push   eax
c0017d3f:	6a 01                	push   0x1
c0017d41:	53                   	push   ebx
c0017d42:	e8 b6 e5 fe ff       	call   c00062fd <iso_open>
c0017d47:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017d4a:	eb 1a                	jmp    c0017d66 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017d4c:	83 ec 0c             	sub    esp,0xc
c0017d4f:	50                   	push   eax
c0017d50:	e8 1b e8 fe ff       	call   c0006570 <iso_total>
c0017d55:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d5c:	89 06                	mov    DWORD PTR [esi],eax
c0017d5e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d61:	e8 21 e6 fe ff       	call   c0006387 <iso_close>
c0017d66:	83 c4 10             	add    esp,0x10
c0017d69:	31 d2                	xor    edx,edx
c0017d6b:	eb 05                	jmp    c0017d72 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017d6d:	ba 04 00 00 00       	mov    edx,0x4
c0017d72:	83 c4 0c             	add    esp,0xc
c0017d75:	89 d0                	mov    eax,edx
c0017d77:	5b                   	pop    ebx
c0017d78:	5e                   	pop    esi
c0017d79:	5f                   	pop    edi
c0017d7a:	5d                   	pop    ebp
c0017d7b:	c3                   	ret    

c0017d7c <ISO9660::close(void*)>:
c0017d7c:	83 ec 0c             	sub    esp,0xc
c0017d7f:	b8 04 00 00 00       	mov    eax,0x4
c0017d84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d88:	85 d2                	test   edx,edx
c0017d8a:	74 11                	je     c0017d9d <ISO9660::close(void*)+0x21>
c0017d8c:	83 ec 0c             	sub    esp,0xc
c0017d8f:	83 ea 64             	sub    edx,0x64
c0017d92:	52                   	push   edx
c0017d93:	e8 ef e5 fe ff       	call   c0006387 <iso_close>
c0017d98:	83 c4 10             	add    esp,0x10
c0017d9b:	31 c0                	xor    eax,eax
c0017d9d:	83 c4 0c             	add    esp,0xc
c0017da0:	c3                   	ret    
c0017da1:	90                   	nop

c0017da2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017da2:	55                   	push   ebp
c0017da3:	57                   	push   edi
c0017da4:	56                   	push   esi
c0017da5:	53                   	push   ebx
c0017da6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017dac:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017db3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017dba:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017dc1:	85 c0                	test   eax,eax
c0017dc3:	0f 84 96 00 00 00    	je     c0017e5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017dc9:	85 db                	test   ebx,ebx
c0017dcb:	0f 84 8e 00 00 00    	je     c0017e5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017dd1:	83 ec 0c             	sub    esp,0xc
c0017dd4:	83 e8 64             	sub    eax,0x64
c0017dd7:	50                   	push   eax
c0017dd8:	e8 e4 e7 fe ff       	call   c00065c1 <iso_readdir>
c0017ddd:	83 c4 10             	add    esp,0x10
c0017de0:	89 c6                	mov    esi,eax
c0017de2:	85 c0                	test   eax,eax
c0017de4:	75 18                	jne    c0017dfe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017de6:	52                   	push   edx
c0017de7:	68 10 01 00 00       	push   0x110
c0017dec:	6a 00                	push   0x0
c0017dee:	57                   	push   edi
c0017def:	e8 dc 86 fe ff       	call   c00004d0 <memset>
c0017df4:	83 c4 10             	add    esp,0x10
c0017df7:	b8 01 00 00 00       	mov    eax,0x1
c0017dfc:	eb 66                	jmp    c0017e64 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017dfe:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017e04:	8d 68 08             	lea    ebp,[eax+0x8]
c0017e07:	83 ec 0c             	sub    esp,0xc
c0017e0a:	55                   	push   ebp
c0017e0b:	e8 30 87 fe ff       	call   c0000540 <strlen>
c0017e10:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e1c:	83 c4 10             	add    esp,0x10
c0017e1f:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017e23:	75 0a                	jne    c0017e2f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017e25:	b8 02 00 00 00       	mov    eax,0x2
c0017e2a:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017e2d:	74 05                	je     c0017e34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017e2f:	b8 01 00 00 00       	mov    eax,0x1
c0017e34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e38:	50                   	push   eax
c0017e39:	50                   	push   eax
c0017e3a:	55                   	push   ebp
c0017e3b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e3f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017e43:	50                   	push   eax
c0017e44:	e8 b7 87 fe ff       	call   c0000600 <strcpy>
c0017e49:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e52:	31 c0                	xor    eax,eax
c0017e54:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	eb 05                	jmp    c0017e64 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e5f:	b8 04 00 00 00       	mov    eax,0x4
c0017e64:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e6a:	5b                   	pop    ebx
c0017e6b:	5e                   	pop    esi
c0017e6c:	5f                   	pop    edi
c0017e6d:	5d                   	pop    ebp
c0017e6e:	c3                   	ret    

c0017e6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e6f:	57                   	push   edi
c0017e70:	56                   	push   esi
c0017e71:	53                   	push   ebx
c0017e72:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e76:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e7e:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017e84:	75 08                	jne    c0017e8e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e86:	38 1d f0 fc 01 c0    	cmp    BYTE PTR ds:0xc001fcf0,bl
c0017e8c:	74 4a                	je     c0017ed8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e8e:	83 ec 0c             	sub    esp,0xc
c0017e91:	31 d2                	xor    edx,edx
c0017e93:	68 40 53 02 c0       	push   0xc0025340
c0017e98:	0f be c3             	movsx  eax,bl
c0017e9b:	6a 01                	push   0x1
c0017e9d:	52                   	push   edx
c0017e9e:	56                   	push   esi
c0017e9f:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017ea6:	e8 e9 4e ff ff       	call   c000cd94 <LogicalDisk::read(unsigned long long, int, void*)>
c0017eab:	83 c4 20             	add    esp,0x20
c0017eae:	85 c0                	test   eax,eax
c0017eb0:	75 0e                	jne    c0017ec0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017eb2:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017eb8:	88 1d f0 fc 01 c0    	mov    BYTE PTR ds:0xc001fcf0,bl
c0017ebe:	eb 18                	jmp    c0017ed8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017ec0:	50                   	push   eax
c0017ec1:	68 00 08 00 00       	push   0x800
c0017ec6:	6a 00                	push   0x0
c0017ec8:	57                   	push   edi
c0017ec9:	e8 02 86 fe ff       	call   c00004d0 <memset>
c0017ece:	83 c4 10             	add    esp,0x10
c0017ed1:	b8 01 00 00 00       	mov    eax,0x1
c0017ed6:	eb 0e                	jmp    c0017ee6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017ed8:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017edd:	b9 00 08 00 00       	mov    ecx,0x800
c0017ee2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ee4:	31 c0                	xor    eax,eax
c0017ee6:	5b                   	pop    ebx
c0017ee7:	5e                   	pop    esi
c0017ee8:	5f                   	pop    edi
c0017ee9:	c3                   	ret    

c0017eea <ISO9660::tryMount(LogicalDisk*, int)>:
c0017eea:	53                   	push   ebx
c0017eeb:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017ef1:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017efb:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017f02:	8d 58 41             	lea    ebx,[eax+0x41]
c0017f05:	0f be db             	movsx  ebx,bl
c0017f08:	53                   	push   ebx
c0017f09:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017f0d:	50                   	push   eax
c0017f0e:	6a 10                	push   0x10
c0017f10:	e8 5a ff ff ff       	call   c0017e6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017f15:	83 c4 10             	add    esp,0x10
c0017f18:	31 d2                	xor    edx,edx
c0017f1a:	85 c0                	test   eax,eax
c0017f1c:	75 33                	jne    c0017f51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f1e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017f23:	75 2c                	jne    c0017f51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f25:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017f2a:	75 25                	jne    c0017f51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f2c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017f31:	75 1e                	jne    c0017f51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f33:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f38:	75 17                	jne    c0017f51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f3a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f3f:	75 10                	jne    c0017f51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f41:	83 ec 0c             	sub    esp,0xc
c0017f44:	53                   	push   ebx
c0017f45:	e8 75 e8 fe ff       	call   c00067bf <init_percd>
c0017f4a:	83 c4 10             	add    esp,0x10
c0017f4d:	40                   	inc    eax
c0017f4e:	0f 95 c2             	setne  dl
c0017f51:	88 d0                	mov    al,dl
c0017f53:	81 c4 08 08 00 00    	add    esp,0x808
c0017f59:	5b                   	pop    ebx
c0017f5a:	c3                   	ret    
c0017f5b:	90                   	nop

c0017f5c <ISO9660::ISO9660()>:
c0017f5c:	83 ec 0c             	sub    esp,0xc
c0017f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f63:	83 ec 0c             	sub    esp,0xc
c0017f66:	50                   	push   eax
c0017f67:	e8 22 2a ff ff       	call   c000a98e <Filesystem::Filesystem()>
c0017f6c:	83 c4 10             	add    esp,0x10
c0017f6f:	ba d4 f2 01 c0       	mov    edx,0xc001f2d4
c0017f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f78:	89 10                	mov    DWORD PTR [eax],edx
c0017f7a:	e8 42 e9 fe ff       	call   c00068c1 <fs_iso9660_init>
c0017f7f:	90                   	nop
c0017f80:	83 c4 0c             	add    esp,0xc
c0017f83:	c3                   	ret    

c0017f84 <SoundCard::beginPlayback()>:
c0017f84:	c7 44 24 04 34 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f334
c0017f8c:	e9 5e 83 ff ff       	jmp    c00102ef <KePanic(char const*)>
c0017f91:	90                   	nop

c0017f92 <SoundCard::stopPlayback()>:
c0017f92:	c7 44 24 04 34 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f334
c0017f9a:	e9 50 83 ff ff       	jmp    c00102ef <KePanic(char const*)>
c0017f9f:	90                   	nop

c0017fa0 <SoundCard::SoundCard(char const*)>:
c0017fa0:	83 ec 1c             	sub    esp,0x1c
c0017fa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa7:	83 ec 08             	sub    esp,0x8
c0017faa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fae:	50                   	push   eax
c0017faf:	e8 90 3c ff ff       	call   c000bc44 <Device::Device(char const*)>
c0017fb4:	83 c4 10             	add    esp,0x10
c0017fb7:	ba 80 f3 01 c0       	mov    edx,0xc001f380
c0017fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc0:	89 10                	mov    DWORD PTR [eax],edx
c0017fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd1:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fdf:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fed:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ffb:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0018005:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001800d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0018012:	7f 19                	jg     c001802d <SoundCard::SoundCard(char const*)+0x8d>
c0018014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018018:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001801c:	83 c2 54             	add    edx,0x54
c001801f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0018027:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001802b:	eb e0                	jmp    c001800d <SoundCard::SoundCard(char const*)+0x6d>
c001802d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018031:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018038:	90                   	nop
c0018039:	83 c4 1c             	add    esp,0x1c
c001803c:	c3                   	ret    
c001803d:	90                   	nop

c001803e <SoundCard::~SoundCard()>:
c001803e:	83 ec 0c             	sub    esp,0xc
c0018041:	ba 80 f3 01 c0       	mov    edx,0xc001f380
c0018046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001804a:	89 10                	mov    DWORD PTR [eax],edx
c001804c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018050:	83 ec 0c             	sub    esp,0xc
c0018053:	50                   	push   eax
c0018054:	e8 55 39 ff ff       	call   c000b9ae <Device::~Device()>
c0018059:	83 c4 10             	add    esp,0x10
c001805c:	90                   	nop
c001805d:	83 c4 0c             	add    esp,0xc
c0018060:	c3                   	ret    
c0018061:	90                   	nop

c0018062 <SoundCard::~SoundCard()>:
c0018062:	83 ec 0c             	sub    esp,0xc
c0018065:	83 ec 0c             	sub    esp,0xc
c0018068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001806c:	e8 cd ff ff ff       	call   c001803e <SoundCard::~SoundCard()>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	83 ec 08             	sub    esp,0x8
c0018077:	68 e8 01 00 00       	push   0x1e8
c001807c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018080:	e8 f2 24 ff ff       	call   c000a577 <operator delete(void*, unsigned long)>
c0018085:	83 c4 10             	add    esp,0x10
c0018088:	83 c4 0c             	add    esp,0xc
c001808b:	c3                   	ret    

c001808c <SoundCard::configureRates(int, int, int)>:
c001808c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018090:	31 c0                	xor    eax,eax
c0018092:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018099:	75 20                	jne    c00180bb <SoundCard::configureRates(int, int, int)+0x2f>
c001809b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001809f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00180a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180a9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00180af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00180b9:	b0 01                	mov    al,0x1
c00180bb:	c3                   	ret    

c00180bc <SoundCard::getSamples16(int, short*)>:
c00180bc:	55                   	push   ebp
c00180bd:	57                   	push   edi
c00180be:	31 ff                	xor    edi,edi
c00180c0:	56                   	push   esi
c00180c1:	53                   	push   ebx
c00180c2:	31 db                	xor    ebx,ebx
c00180c4:	83 ec 10             	sub    esp,0x10
c00180c7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00180cb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180cf:	8d 04 36             	lea    eax,[esi+esi*1]
c00180d2:	50                   	push   eax
c00180d3:	6a 00                	push   0x0
c00180d5:	55                   	push   ebp
c00180d6:	e8 f5 83 fe ff       	call   c00004d0 <memset>
c00180db:	83 c4 10             	add    esp,0x10
c00180de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e2:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00180e9:	85 c0                	test   eax,eax
c00180eb:	74 1b                	je     c0018108 <SoundCard::getSamples16(int, short*)+0x4c>
c00180ed:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180f1:	75 15                	jne    c0018108 <SoundCard::getSamples16(int, short*)+0x4c>
c00180f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180f7:	55                   	push   ebp
c00180f8:	56                   	push   esi
c00180f9:	50                   	push   eax
c00180fa:	e8 ed 02 00 00       	call   c00183ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00180ff:	83 c4 10             	add    esp,0x10
c0018102:	39 c7                	cmp    edi,eax
c0018104:	7d 02                	jge    c0018108 <SoundCard::getSamples16(int, short*)+0x4c>
c0018106:	89 c7                	mov    edi,eax
c0018108:	43                   	inc    ebx
c0018109:	83 fb 20             	cmp    ebx,0x20
c001810c:	75 d0                	jne    c00180de <SoundCard::getSamples16(int, short*)+0x22>
c001810e:	83 c4 0c             	add    esp,0xc
c0018111:	89 f8                	mov    eax,edi
c0018113:	5b                   	pop    ebx
c0018114:	5e                   	pop    esi
c0018115:	5f                   	pop    edi
c0018116:	5d                   	pop    ebp
c0018117:	c3                   	ret    

c0018118 <SoundCard::getSamples32(int, int*)>:
c0018118:	55                   	push   ebp
c0018119:	57                   	push   edi
c001811a:	31 ff                	xor    edi,edi
c001811c:	56                   	push   esi
c001811d:	31 f6                	xor    esi,esi
c001811f:	53                   	push   ebx
c0018120:	83 ec 10             	sub    esp,0x10
c0018123:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018127:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001812b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001812f:	c1 e0 02             	shl    eax,0x2
c0018132:	50                   	push   eax
c0018133:	6a 00                	push   0x0
c0018135:	55                   	push   ebp
c0018136:	e8 95 83 fe ff       	call   c00004d0 <memset>
c001813b:	83 c4 10             	add    esp,0x10
c001813e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018145:	85 c0                	test   eax,eax
c0018147:	74 1b                	je     c0018164 <SoundCard::getSamples32(int, int*)+0x4c>
c0018149:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001814d:	75 15                	jne    c0018164 <SoundCard::getSamples32(int, int*)+0x4c>
c001814f:	53                   	push   ebx
c0018150:	55                   	push   ebp
c0018151:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018155:	50                   	push   eax
c0018156:	e8 55 03 00 00       	call   c00184b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001815b:	83 c4 10             	add    esp,0x10
c001815e:	39 c6                	cmp    esi,eax
c0018160:	7d 02                	jge    c0018164 <SoundCard::getSamples32(int, int*)+0x4c>
c0018162:	89 c6                	mov    esi,eax
c0018164:	47                   	inc    edi
c0018165:	83 ff 20             	cmp    edi,0x20
c0018168:	75 d4                	jne    c001813e <SoundCard::getSamples32(int, int*)+0x26>
c001816a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018170:	85 f6                	test   esi,esi
c0018172:	75 0f                	jne    c0018183 <SoundCard::getSamples32(int, int*)+0x6b>
c0018174:	84 c0                	test   al,al
c0018176:	74 1b                	je     c0018193 <SoundCard::getSamples32(int, int*)+0x7b>
c0018178:	83 ec 0c             	sub    esp,0xc
c001817b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001817d:	53                   	push   ebx
c001817e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018181:	eb 0d                	jmp    c0018190 <SoundCard::getSamples32(int, int*)+0x78>
c0018183:	84 c0                	test   al,al
c0018185:	75 0c                	jne    c0018193 <SoundCard::getSamples32(int, int*)+0x7b>
c0018187:	83 ec 0c             	sub    esp,0xc
c001818a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001818c:	53                   	push   ebx
c001818d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018190:	83 c4 10             	add    esp,0x10
c0018193:	83 c4 0c             	add    esp,0xc
c0018196:	89 f0                	mov    eax,esi
c0018198:	5b                   	pop    ebx
c0018199:	5e                   	pop    esi
c001819a:	5f                   	pop    edi
c001819b:	5d                   	pop    ebp
c001819c:	c3                   	ret    
c001819d:	90                   	nop

c001819e <SoundCard::addChannel(SoundPort*)>:
c001819e:	83 ec 0c             	sub    esp,0xc
c00181a1:	31 c0                	xor    eax,eax
c00181a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181a7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00181af:	74 1b                	je     c00181cc <SoundCard::addChannel(SoundPort*)+0x2e>
c00181b1:	40                   	inc    eax
c00181b2:	83 f8 20             	cmp    eax,0x20
c00181b5:	75 f0                	jne    c00181a7 <SoundCard::addChannel(SoundPort*)+0x9>
c00181b7:	83 ec 0c             	sub    esp,0xc
c00181ba:	68 59 f3 01 c0       	push   0xc001f359
c00181bf:	e8 2b 81 ff ff       	call   c00102ef <KePanic(char const*)>
c00181c4:	83 c4 10             	add    esp,0x10
c00181c7:	83 c8 ff             	or     eax,0xffffffff
c00181ca:	eb 0b                	jmp    c00181d7 <SoundCard::addChannel(SoundPort*)+0x39>
c00181cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181d0:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00181d7:	83 c4 0c             	add    esp,0xc
c00181da:	c3                   	ret    
c00181db:	90                   	nop

c00181dc <SoundCard::removeChannel(int)>:
c00181dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00181e4:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00181ef:	c3                   	ret    

c00181f0 <SoundPort::SoundPort(int, int, int, int)>:
c00181f0:	83 ec 0c             	sub    esp,0xc
c00181f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018202:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001820e:	89 10                	mov    DWORD PTR [eax],edx
c0018210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018214:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018218:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001821b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018223:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018226:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001822b:	75 13                	jne    c0018240 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001822d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018231:	8b 00                	mov    eax,DWORD PTR [eax]
c0018233:	05 a0 0f 00 00       	add    eax,0xfa0
c0018238:	01 c0                	add    eax,eax
c001823a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001823e:	66 90                	xchg   ax,ax
c0018240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018244:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018248:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001824b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001825d:	c1 e0 02             	shl    eax,0x2
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	50                   	push   eax
c0018264:	e8 50 f5 fe ff       	call   c00077b9 <malloc>
c0018269:	83 c4 10             	add    esp,0x10
c001826c:	89 c2                	mov    edx,eax
c001826e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018272:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018275:	90                   	nop
c0018276:	83 c4 0c             	add    esp,0xc
c0018279:	c3                   	ret    
c001827a:	66 90                	xchg   ax,ax

c001827c <SoundPort::~SoundPort()>:
c001827c:	83 ec 0c             	sub    esp,0xc
c001827f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018283:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018286:	85 c0                	test   eax,eax
c0018288:	74 1e                	je     c00182a8 <SoundPort::~SoundPort()+0x2c>
c001828a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001828e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018291:	83 ec 0c             	sub    esp,0xc
c0018294:	50                   	push   eax
c0018295:	e8 2f f5 fe ff       	call   c00077c9 <free>
c001829a:	83 c4 10             	add    esp,0x10
c001829d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00182a8:	90                   	nop
c00182a9:	83 c4 0c             	add    esp,0xc
c00182ac:	c3                   	ret    
c00182ad:	90                   	nop
c00182ae:	66 90                	xchg   ax,ax

c00182b0 <SoundPort::unpause()>:
c00182b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182b4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00182b8:	c3                   	ret    
c00182b9:	90                   	nop
c00182ba:	66 90                	xchg   ax,ax

c00182bc <SoundPort::pause()>:
c00182bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182c0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00182c4:	c3                   	ret    
c00182c5:	90                   	nop
c00182c6:	66 90                	xchg   ax,ax

c00182c8 <SoundPort::getBufferUsed()>:
c00182c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182cf:	c3                   	ret    

c00182d0 <SoundPort::getBufferSize()>:
c00182d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182d7:	c3                   	ret    

c00182d8 <SoundPort::buffer16(short*, int)>:
c00182d8:	55                   	push   ebp
c00182d9:	57                   	push   edi
c00182da:	56                   	push   esi
c00182db:	53                   	push   ebx
c00182dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182e0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00182e4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00182e7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00182ea:	74 68                	je     c0018354 <SoundPort::buffer16(short*, int)+0x7c>
c00182ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00182f0:	85 c9                	test   ecx,ecx
c00182f2:	7e 60                	jle    c0018354 <SoundPort::buffer16(short*, int)+0x7c>
c00182f4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00182f8:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182fb:	c1 e1 0f             	shl    ecx,0xf
c00182fe:	8d 70 01             	lea    esi,[eax+0x1]
c0018301:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018304:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0018307:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001830a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001830d:	74 4d                	je     c001835c <SoundPort::buffer16(short*, int)+0x84>
c001830f:	31 f6                	xor    esi,esi
c0018311:	eb 21                	jmp    c0018334 <SoundPort::buffer16(short*, int)+0x5c>
c0018313:	90                   	nop
c0018314:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018319:	8d 79 01             	lea    edi,[ecx+0x1]
c001831c:	c1 e3 0f             	shl    ebx,0xf
c001831f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0018322:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018325:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018328:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001832b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001832e:	74 1c                	je     c001834c <SoundPort::buffer16(short*, int)+0x74>
c0018330:	89 c6                	mov    esi,eax
c0018332:	66 90                	xchg   ax,ax
c0018334:	8d 46 01             	lea    eax,[esi+0x1]
c0018337:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001833b:	75 d7                	jne    c0018314 <SoundPort::buffer16(short*, int)+0x3c>
c001833d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018341:	8d 76 00             	lea    esi,[esi+0x0]
c0018344:	5b                   	pop    ebx
c0018345:	5e                   	pop    esi
c0018346:	5f                   	pop    edi
c0018347:	5d                   	pop    ebp
c0018348:	c3                   	ret    
c0018349:	8d 76 00             	lea    esi,[esi+0x0]
c001834c:	5b                   	pop    ebx
c001834d:	8d 46 02             	lea    eax,[esi+0x2]
c0018350:	5e                   	pop    esi
c0018351:	5f                   	pop    edi
c0018352:	5d                   	pop    ebp
c0018353:	c3                   	ret    
c0018354:	5b                   	pop    ebx
c0018355:	31 c0                	xor    eax,eax
c0018357:	5e                   	pop    esi
c0018358:	5f                   	pop    edi
c0018359:	5d                   	pop    ebp
c001835a:	c3                   	ret    
c001835b:	90                   	nop
c001835c:	b8 01 00 00 00       	mov    eax,0x1
c0018361:	eb e1                	jmp    c0018344 <SoundPort::buffer16(short*, int)+0x6c>
c0018363:	90                   	nop

c0018364 <SoundPort::buffer32(int*, int)>:
c0018364:	55                   	push   ebp
c0018365:	57                   	push   edi
c0018366:	56                   	push   esi
c0018367:	53                   	push   ebx
c0018368:	51                   	push   ecx
c0018369:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001836d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018371:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018374:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018378:	89 04 24             	mov    DWORD PTR [esp],eax
c001837b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001837e:	74 5c                	je     c00183dc <SoundPort::buffer32(int*, int)+0x78>
c0018380:	85 c0                	test   eax,eax
c0018382:	7e 58                	jle    c00183dc <SoundPort::buffer32(int*, int)+0x78>
c0018384:	8d 71 01             	lea    esi,[ecx+0x1]
c0018387:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001838a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001838d:	8b 37                	mov    esi,DWORD PTR [edi]
c001838f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018392:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018395:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018398:	74 4a                	je     c00183e4 <SoundPort::buffer32(int*, int)+0x80>
c001839a:	31 f6                	xor    esi,esi
c001839c:	eb 1e                	jmp    c00183bc <SoundPort::buffer32(int*, int)+0x58>
c001839e:	66 90                	xchg   ax,ax
c00183a0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00183a3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00183a6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00183a9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00183ac:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00183b0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183b3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183b6:	74 18                	je     c00183d0 <SoundPort::buffer32(int*, int)+0x6c>
c00183b8:	89 de                	mov    esi,ebx
c00183ba:	66 90                	xchg   ax,ax
c00183bc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00183bf:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00183c2:	75 dc                	jne    c00183a0 <SoundPort::buffer32(int*, int)+0x3c>
c00183c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00183c7:	90                   	nop
c00183c8:	5a                   	pop    edx
c00183c9:	5b                   	pop    ebx
c00183ca:	5e                   	pop    esi
c00183cb:	5f                   	pop    edi
c00183cc:	5d                   	pop    ebp
c00183cd:	c3                   	ret    
c00183ce:	66 90                	xchg   ax,ax
c00183d0:	5a                   	pop    edx
c00183d1:	8d 46 02             	lea    eax,[esi+0x2]
c00183d4:	5b                   	pop    ebx
c00183d5:	5e                   	pop    esi
c00183d6:	5f                   	pop    edi
c00183d7:	5d                   	pop    ebp
c00183d8:	c3                   	ret    
c00183d9:	8d 76 00             	lea    esi,[esi+0x0]
c00183dc:	5a                   	pop    edx
c00183dd:	31 c0                	xor    eax,eax
c00183df:	5b                   	pop    ebx
c00183e0:	5e                   	pop    esi
c00183e1:	5f                   	pop    edi
c00183e2:	5d                   	pop    ebp
c00183e3:	c3                   	ret    
c00183e4:	b8 01 00 00 00       	mov    eax,0x1
c00183e9:	eb dd                	jmp    c00183c8 <SoundPort::buffer32(int*, int)+0x64>
c00183eb:	90                   	nop

c00183ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00183ec:	57                   	push   edi
c00183ed:	56                   	push   esi
c00183ee:	53                   	push   ebx
c00183ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183f3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00183f7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00183fd:	39 03                	cmp    DWORD PTR [ebx],eax
c00183ff:	74 13                	je     c0018414 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018401:	83 ec 0c             	sub    esp,0xc
c0018404:	68 ac f3 01 c0       	push   0xc001f3ac
c0018409:	e8 e1 7e ff ff       	call   c00102ef <KePanic(char const*)>
c001840e:	83 c4 10             	add    esp,0x10
c0018411:	8d 76 00             	lea    esi,[esi+0x0]
c0018414:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001841a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001841d:	74 11                	je     c0018430 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001841f:	83 ec 0c             	sub    esp,0xc
c0018422:	68 eb f3 01 c0       	push   0xc001f3eb
c0018427:	e8 c3 7e ff ff       	call   c00102ef <KePanic(char const*)>
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	90                   	nop
c0018430:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0018436:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018439:	74 11                	je     c001844c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001843b:	83 ec 0c             	sub    esp,0xc
c001843e:	68 eb f3 01 c0       	push   0xc001f3eb
c0018443:	e8 a7 7e ff ff       	call   c00102ef <KePanic(char const*)>
c0018448:	83 c4 10             	add    esp,0x10
c001844b:	90                   	nop
c001844c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001844f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018453:	7e 07                	jle    c001845c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018455:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018459:	8d 76 00             	lea    esi,[esi+0x0]
c001845c:	85 f6                	test   esi,esi
c001845e:	7e 2c                	jle    c001848c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018460:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018464:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018467:	31 c9                	xor    ecx,ecx
c0018469:	01 d7                	add    edi,edx
c001846b:	90                   	nop
c001846c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001846f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018472:	85 c0                	test   eax,eax
c0018474:	79 06                	jns    c001847c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018476:	05 ff 7f 00 00       	add    eax,0x7fff
c001847b:	90                   	nop
c001847c:	c1 f8 0f             	sar    eax,0xf
c001847f:	83 c1 04             	add    ecx,0x4
c0018482:	66 01 02             	add    WORD PTR [edx],ax
c0018485:	83 c2 02             	add    edx,0x2
c0018488:	39 d7                	cmp    edi,edx
c001848a:	75 e0                	jne    c001846c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001848c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001848f:	50                   	push   eax
c0018490:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018493:	29 f0                	sub    eax,esi
c0018495:	c1 e0 02             	shl    eax,0x2
c0018498:	50                   	push   eax
c0018499:	8d 04 b2             	lea    eax,[edx+esi*4]
c001849c:	50                   	push   eax
c001849d:	52                   	push   edx
c001849e:	e8 3d 7f fe ff       	call   c00003e0 <memmove>
c00184a3:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00184a6:	83 c4 10             	add    esp,0x10
c00184a9:	89 f0                	mov    eax,esi
c00184ab:	5b                   	pop    ebx
c00184ac:	5e                   	pop    esi
c00184ad:	5f                   	pop    edi
c00184ae:	c3                   	ret    
c00184af:	90                   	nop

c00184b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00184b0:	57                   	push   edi
c00184b1:	56                   	push   esi
c00184b2:	53                   	push   ebx
c00184b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00184bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00184bf:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00184c5:	39 06                	cmp    DWORD PTR [esi],eax
c00184c7:	74 13                	je     c00184dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00184c9:	83 ec 0c             	sub    esp,0xc
c00184cc:	68 cc f3 01 c0       	push   0xc001f3cc
c00184d1:	e8 19 7e ff ff       	call   c00102ef <KePanic(char const*)>
c00184d6:	83 c4 10             	add    esp,0x10
c00184d9:	8d 76 00             	lea    esi,[esi+0x0]
c00184dc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00184e2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00184e5:	74 11                	je     c00184f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00184e7:	83 ec 0c             	sub    esp,0xc
c00184ea:	68 07 f4 01 c0       	push   0xc001f407
c00184ef:	e8 fb 7d ff ff       	call   c00102ef <KePanic(char const*)>
c00184f4:	83 c4 10             	add    esp,0x10
c00184f7:	90                   	nop
c00184f8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00184fe:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018501:	74 11                	je     c0018514 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018503:	83 ec 0c             	sub    esp,0xc
c0018506:	68 07 f4 01 c0       	push   0xc001f407
c001850b:	e8 df 7d ff ff       	call   c00102ef <KePanic(char const*)>
c0018510:	83 c4 10             	add    esp,0x10
c0018513:	90                   	nop
c0018514:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018517:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001851b:	7e 07                	jle    c0018524 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001851d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018521:	8d 76 00             	lea    esi,[esi+0x0]
c0018524:	85 ff                	test   edi,edi
c0018526:	7e 1c                	jle    c0018544 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018528:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001852f:	31 c0                	xor    eax,eax
c0018531:	8d 76 00             	lea    esi,[esi+0x0]
c0018534:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018537:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001853a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001853d:	83 c0 04             	add    eax,0x4
c0018540:	39 c1                	cmp    ecx,eax
c0018542:	75 f0                	jne    c0018534 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018544:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018547:	50                   	push   eax
c0018548:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001854b:	29 f8                	sub    eax,edi
c001854d:	c1 e0 02             	shl    eax,0x2
c0018550:	50                   	push   eax
c0018551:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018554:	50                   	push   eax
c0018555:	52                   	push   edx
c0018556:	e8 85 7e fe ff       	call   c00003e0 <memmove>
c001855b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001855e:	83 c4 10             	add    esp,0x10
c0018561:	89 f8                	mov    eax,edi
c0018563:	5b                   	pop    ebx
c0018564:	5e                   	pop    esi
c0018565:	5f                   	pop    edi
c0018566:	c3                   	ret    
c0018567:	90                   	nop

c0018568 <PCI::open(int, int, void*)>:
c0018568:	83 ec 18             	sub    esp,0x18
c001856b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001856f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018573:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018579:	8b 10                	mov    edx,DWORD PTR [eax]
c001857b:	50                   	push   eax
c001857c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001857f:	31 c0                	xor    eax,eax
c0018581:	83 c4 1c             	add    esp,0x1c
c0018584:	c3                   	ret    
c0018585:	90                   	nop

c0018586 <PCI::close(int, int, void*)>:
c0018586:	31 c0                	xor    eax,eax
c0018588:	c3                   	ret    
c0018589:	90                   	nop

c001858a <PCI::PCI()>:
c001858a:	83 ec 0c             	sub    esp,0xc
c001858d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018591:	83 ec 08             	sub    esp,0x8
c0018594:	68 23 f4 01 c0       	push   0xc001f423
c0018599:	50                   	push   eax
c001859a:	e8 61 2e ff ff       	call   c000b400 <Bus::Bus(char const*)>
c001859f:	83 c4 10             	add    esp,0x10
c00185a2:	ba cc f4 01 c0       	mov    edx,0xc001f4cc
c00185a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ab:	89 10                	mov    DWORD PTR [eax],edx
c00185ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00185bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185bf:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c00185c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185ce:	31 d2                	xor    edx,edx
c00185d0:	88 c2                	mov    dl,al
c00185d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d6:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00185dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185e7:	31 d2                	xor    edx,edx
c00185e9:	88 c2                	mov    dl,al
c00185eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ef:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00185f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185fe:	8d 50 01             	lea    edx,[eax+0x1]
c0018601:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018605:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001860b:	31 d2                	xor    edx,edx
c001860d:	88 c2                	mov    dl,al
c001860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018613:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0018617:	83 c9 c0             	or     ecx,0xffffffc0
c001861a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001861e:	90                   	nop
c001861f:	83 c4 0c             	add    esp,0xc
c0018622:	c3                   	ret    
c0018623:	90                   	nop

c0018624 <PCI::readBAR8(unsigned int, int)>:
c0018624:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018628:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001862c:	f6 c2 01             	test   dl,0x1
c001862f:	74 07                	je     c0018638 <PCI::readBAR8(unsigned int, int)+0x14>
c0018631:	83 e2 fc             	and    edx,0xfffffffc
c0018634:	01 c2                	add    edx,eax
c0018636:	ec                   	in     al,dx
c0018637:	c3                   	ret    
c0018638:	83 e2 f0             	and    edx,0xfffffff0
c001863b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001863e:	c3                   	ret    
c001863f:	90                   	nop

c0018640 <PCI::readBAR16(unsigned int, int)>:
c0018640:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018644:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018648:	f6 c2 01             	test   dl,0x1
c001864b:	74 08                	je     c0018655 <PCI::readBAR16(unsigned int, int)+0x15>
c001864d:	83 e2 fc             	and    edx,0xfffffffc
c0018650:	01 c2                	add    edx,eax
c0018652:	66 ed                	in     ax,dx
c0018654:	c3                   	ret    
c0018655:	83 e2 f0             	and    edx,0xfffffff0
c0018658:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001865c:	c3                   	ret    
c001865d:	90                   	nop

c001865e <PCI::readBAR32(unsigned int, int)>:
c001865e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018662:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018666:	f6 c2 01             	test   dl,0x1
c0018669:	74 07                	je     c0018672 <PCI::readBAR32(unsigned int, int)+0x14>
c001866b:	83 e2 fc             	and    edx,0xfffffffc
c001866e:	01 c2                	add    edx,eax
c0018670:	ed                   	in     eax,dx
c0018671:	c3                   	ret    
c0018672:	83 e2 f0             	and    edx,0xfffffff0
c0018675:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018678:	c3                   	ret    
c0018679:	90                   	nop

c001867a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001867a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001867e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018682:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018686:	f6 c2 01             	test   dl,0x1
c0018689:	74 07                	je     c0018692 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001868b:	83 e2 fc             	and    edx,0xfffffffc
c001868e:	01 ca                	add    edx,ecx
c0018690:	ee                   	out    dx,al
c0018691:	c3                   	ret    
c0018692:	83 e2 f0             	and    edx,0xfffffff0
c0018695:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018698:	c3                   	ret    
c0018699:	90                   	nop

c001869a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001869a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001869e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186a6:	f6 c2 01             	test   dl,0x1
c00186a9:	74 08                	je     c00186b3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00186ab:	83 e2 fc             	and    edx,0xfffffffc
c00186ae:	01 ca                	add    edx,ecx
c00186b0:	66 ef                	out    dx,ax
c00186b2:	c3                   	ret    
c00186b3:	83 e2 f0             	and    edx,0xfffffff0
c00186b6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00186ba:	c3                   	ret    
c00186bb:	90                   	nop

c00186bc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00186bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186c8:	f6 c2 01             	test   dl,0x1
c00186cb:	74 07                	je     c00186d4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00186cd:	83 e2 fc             	and    edx,0xfffffffc
c00186d0:	01 ca                	add    edx,ecx
c00186d2:	ef                   	out    dx,eax
c00186d3:	c3                   	ret    
c00186d4:	83 e2 f0             	and    edx,0xfffffff0
c00186d7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00186da:	c3                   	ret    
c00186db:	90                   	nop

c00186dc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186dc:	55                   	push   ebp
c00186dd:	57                   	push   edi
c00186de:	56                   	push   esi
c00186df:	53                   	push   ebx
c00186e0:	83 ec 0c             	sub    esp,0xc
c00186e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00186e7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00186eb:	89 f0                	mov    eax,esi
c00186ed:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00186f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00186f5:	3c 07                	cmp    al,0x7
c00186f7:	76 10                	jbe    c0018709 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00186f9:	83 ec 0c             	sub    esp,0xc
c00186fc:	68 2b f4 01 c0       	push   0xc001f42b
c0018701:	e8 e9 7b ff ff       	call   c00102ef <KePanic(char const*)>
c0018706:	83 c4 10             	add    esp,0x10
c0018709:	80 fb 0f             	cmp    bl,0xf
c001870c:	76 10                	jbe    c001871e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001870e:	83 ec 0c             	sub    esp,0xc
c0018711:	68 5b f4 01 c0       	push   0xc001f45b
c0018716:	e8 d4 7b ff ff       	call   c00102ef <KePanic(char const*)>
c001871b:	83 c4 10             	add    esp,0x10
c001871e:	8d 04 36             	lea    eax,[esi+esi*1]
c0018721:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018726:	83 c8 f0             	or     eax,0xfffffff0
c0018729:	ee                   	out    dx,al
c001872a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001872f:	89 e8                	mov    eax,ebp
c0018731:	ee                   	out    dx,al
c0018732:	83 c4 0c             	add    esp,0xc
c0018735:	89 d8                	mov    eax,ebx
c0018737:	66 81 e7 fc 00       	and    di,0xfc
c001873c:	5b                   	pop    ebx
c001873d:	c1 e0 08             	shl    eax,0x8
c0018740:	5e                   	pop    esi
c0018741:	09 f8                	or     eax,edi
c0018743:	5f                   	pop    edi
c0018744:	66 0d 00 c0          	or     ax,0xc000
c0018748:	5d                   	pop    ebp
c0018749:	c3                   	ret    

c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001874a:	57                   	push   edi
c001874b:	56                   	push   esi
c001874c:	53                   	push   ebx
c001874d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018751:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018755:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001875b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001875f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018763:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018767:	83 ff 01             	cmp    edi,0x1
c001876a:	75 3e                	jne    c00187aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001876c:	89 de                	mov    esi,ebx
c001876e:	0f b6 c0             	movzx  eax,al
c0018771:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018777:	c1 e0 10             	shl    eax,0x10
c001877a:	0f b6 c9             	movzx  ecx,cl
c001877d:	09 f0                	or     eax,esi
c001877f:	c1 e1 08             	shl    ecx,0x8
c0018782:	0f b6 d2             	movzx  edx,dl
c0018785:	09 c8                	or     eax,ecx
c0018787:	c1 e2 0b             	shl    edx,0xb
c001878a:	09 d0                	or     eax,edx
c001878c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018791:	0d 00 00 00 80       	or     eax,0x80000000
c0018796:	ef                   	out    dx,eax
c0018797:	ba fc 0c 00 00       	mov    edx,0xcfc
c001879c:	ed                   	in     eax,dx
c001879d:	83 e3 02             	and    ebx,0x2
c00187a0:	0f b6 cb             	movzx  ecx,bl
c00187a3:	c1 e1 03             	shl    ecx,0x3
c00187a6:	d3 e8                	shr    eax,cl
c00187a8:	eb 43                	jmp    c00187ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187aa:	83 ff 02             	cmp    edi,0x2
c00187ad:	75 2c                	jne    c00187db <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00187af:	83 ec 0c             	sub    esp,0xc
c00187b2:	0f b6 c9             	movzx  ecx,cl
c00187b5:	0f b6 d2             	movzx  edx,dl
c00187b8:	0f b6 fb             	movzx  edi,bl
c00187bb:	0f b6 c0             	movzx  eax,al
c00187be:	57                   	push   edi
c00187bf:	51                   	push   ecx
c00187c0:	52                   	push   edx
c00187c1:	50                   	push   eax
c00187c2:	56                   	push   esi
c00187c3:	e8 14 ff ff ff       	call   c00186dc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187c8:	89 c2                	mov    edx,eax
c00187ca:	ed                   	in     eax,dx
c00187cb:	83 e3 02             	and    ebx,0x2
c00187ce:	83 c4 20             	add    esp,0x20
c00187d1:	0f b6 cb             	movzx  ecx,bl
c00187d4:	c1 e1 03             	shl    ecx,0x3
c00187d7:	d3 e8                	shr    eax,cl
c00187d9:	eb 12                	jmp    c00187ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187db:	83 ec 0c             	sub    esp,0xc
c00187de:	68 8b f4 01 c0       	push   0xc001f48b
c00187e3:	e8 07 7b ff ff       	call   c00102ef <KePanic(char const*)>
c00187e8:	83 c4 10             	add    esp,0x10
c00187eb:	31 c0                	xor    eax,eax
c00187ed:	5b                   	pop    ebx
c00187ee:	5e                   	pop    esi
c00187ef:	5f                   	pop    edi
c00187f0:	c3                   	ret    
c00187f1:	90                   	nop

c00187f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00187f2:	83 ec 18             	sub    esp,0x18
c00187f5:	6a 00                	push   0x0
c00187f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187fc:	50                   	push   eax
c00187fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018802:	50                   	push   eax
c0018803:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018808:	50                   	push   eax
c0018809:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001880d:	e8 38 ff ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018812:	83 c4 2c             	add    esp,0x2c
c0018815:	c3                   	ret    

c0018816 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018816:	83 ec 18             	sub    esp,0x18
c0018819:	6a 0e                	push   0xe
c001881b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018820:	50                   	push   eax
c0018821:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018826:	50                   	push   eax
c0018827:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001882c:	50                   	push   eax
c001882d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018831:	e8 14 ff ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018836:	83 c4 2c             	add    esp,0x2c
c0018839:	0f b6 c0             	movzx  eax,al
c001883c:	c3                   	ret    
c001883d:	90                   	nop

c001883e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001883e:	55                   	push   ebp
c001883f:	57                   	push   edi
c0018840:	56                   	push   esi
c0018841:	53                   	push   ebx
c0018842:	83 ec 18             	sub    esp,0x18
c0018845:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001884a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001884f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018854:	6a 0a                	push   0xa
c0018856:	56                   	push   esi
c0018857:	55                   	push   ebp
c0018858:	57                   	push   edi
c0018859:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001885d:	e8 e8 fe ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018862:	83 c4 14             	add    esp,0x14
c0018865:	89 c3                	mov    ebx,eax
c0018867:	6a 0a                	push   0xa
c0018869:	0f b6 db             	movzx  ebx,bl
c001886c:	56                   	push   esi
c001886d:	55                   	push   ebp
c001886e:	57                   	push   edi
c001886f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018873:	e8 d2 fe ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018878:	83 c4 2c             	add    esp,0x2c
c001887b:	25 00 ff 00 00       	and    eax,0xff00
c0018880:	09 d8                	or     eax,ebx
c0018882:	5b                   	pop    ebx
c0018883:	5e                   	pop    esi
c0018884:	5f                   	pop    edi
c0018885:	5d                   	pop    ebp
c0018886:	c3                   	ret    
c0018887:	90                   	nop

c0018888 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018888:	83 ec 18             	sub    esp,0x18
c001888b:	6a 08                	push   0x8
c001888d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018892:	50                   	push   eax
c0018893:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018898:	50                   	push   eax
c0018899:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001889e:	50                   	push   eax
c001889f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188a3:	e8 a2 fe ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188a8:	83 c4 2c             	add    esp,0x2c
c00188ab:	0f b6 c4             	movzx  eax,ah
c00188ae:	c3                   	ret    
c00188af:	90                   	nop

c00188b0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00188b0:	83 ec 18             	sub    esp,0x18
c00188b3:	6a 08                	push   0x8
c00188b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ba:	50                   	push   eax
c00188bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188c0:	50                   	push   eax
c00188c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188c6:	50                   	push   eax
c00188c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188cb:	e8 7a fe ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188d0:	83 c4 2c             	add    esp,0x2c
c00188d3:	c3                   	ret    

c00188d4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00188d4:	83 ec 18             	sub    esp,0x18
c00188d7:	6a 3c                	push   0x3c
c00188d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188de:	50                   	push   eax
c00188df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e4:	50                   	push   eax
c00188e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ea:	50                   	push   eax
c00188eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188ef:	e8 56 fe ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188f4:	83 c4 2c             	add    esp,0x2c
c00188f7:	c3                   	ret    

c00188f8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00188f8:	83 ec 18             	sub    esp,0x18
c00188fb:	6a 18                	push   0x18
c00188fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018902:	50                   	push   eax
c0018903:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018908:	50                   	push   eax
c0018909:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001890e:	50                   	push   eax
c001890f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018913:	e8 32 fe ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018918:	83 c4 2c             	add    esp,0x2c
c001891b:	0f b6 c4             	movzx  eax,ah
c001891e:	c3                   	ret    
c001891f:	90                   	nop

c0018920 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018920:	55                   	push   ebp
c0018921:	57                   	push   edi
c0018922:	56                   	push   esi
c0018923:	53                   	push   ebx
c0018924:	83 ec 28             	sub    esp,0x28
c0018927:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001892b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018930:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018935:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001893a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018941:	8d 43 12             	lea    eax,[ebx+0x12]
c0018944:	83 c3 10             	add    ebx,0x10
c0018947:	0f b6 c0             	movzx  eax,al
c001894a:	0f b6 db             	movzx  ebx,bl
c001894d:	50                   	push   eax
c001894e:	51                   	push   ecx
c001894f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018953:	57                   	push   edi
c0018954:	55                   	push   ebp
c0018955:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018959:	e8 ec fd ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001895e:	83 c4 14             	add    esp,0x14
c0018961:	89 c6                	mov    esi,eax
c0018963:	53                   	push   ebx
c0018964:	c1 e6 10             	shl    esi,0x10
c0018967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001896b:	51                   	push   ecx
c001896c:	57                   	push   edi
c001896d:	55                   	push   ebp
c001896e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018972:	e8 d3 fd ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018977:	83 c4 3c             	add    esp,0x3c
c001897a:	0f b7 c0             	movzx  eax,ax
c001897d:	5b                   	pop    ebx
c001897e:	09 f0                	or     eax,esi
c0018980:	5e                   	pop    esi
c0018981:	5f                   	pop    edi
c0018982:	5d                   	pop    ebp
c0018983:	c3                   	ret    

c0018984 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018984:	55                   	push   ebp
c0018985:	57                   	push   edi
c0018986:	56                   	push   esi
c0018987:	53                   	push   ebx
c0018988:	83 ec 0c             	sub    esp,0xc
c001898b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001898f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018993:	89 f5                	mov    ebp,esi
c0018995:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001899b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001899f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00189ab:	83 f9 01             	cmp    ecx,0x1
c00189ae:	75 5d                	jne    c0018a0d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00189b0:	0f b6 c8             	movzx  ecx,al
c00189b3:	0f b6 d2             	movzx  edx,dl
c00189b6:	c1 e1 10             	shl    ecx,0x10
c00189b9:	c1 e2 0b             	shl    edx,0xb
c00189bc:	89 f0                	mov    eax,esi
c00189be:	25 fc 00 00 00       	and    eax,0xfc
c00189c3:	09 c1                	or     ecx,eax
c00189c5:	89 e8                	mov    eax,ebp
c00189c7:	0f b6 c0             	movzx  eax,al
c00189ca:	c1 e0 08             	shl    eax,0x8
c00189cd:	09 c1                	or     ecx,eax
c00189cf:	09 d1                	or     ecx,edx
c00189d1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189d6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00189dc:	89 c8                	mov    eax,ecx
c00189de:	ef                   	out    dx,eax
c00189df:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189e4:	ed                   	in     eax,dx
c00189e5:	0f b7 db             	movzx  ebx,bx
c00189e8:	83 e6 02             	and    esi,0x2
c00189eb:	74 0a                	je     c00189f7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00189ed:	0f b7 d0             	movzx  edx,ax
c00189f0:	c1 e3 10             	shl    ebx,0x10
c00189f3:	09 d3                	or     ebx,edx
c00189f5:	eb 05                	jmp    c00189fc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00189f7:	66 31 c0             	xor    ax,ax
c00189fa:	09 c3                	or     ebx,eax
c00189fc:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018a01:	89 c8                	mov    eax,ecx
c0018a03:	ef                   	out    dx,eax
c0018a04:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a09:	89 d8                	mov    eax,ebx
c0018a0b:	eb 41                	jmp    c0018a4e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a0d:	83 f9 02             	cmp    ecx,0x2
c0018a10:	75 45                	jne    c0018a57 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018a12:	83 ec 0c             	sub    esp,0xc
c0018a15:	0f b6 d2             	movzx  edx,dl
c0018a18:	89 f1                	mov    ecx,esi
c0018a1a:	0f b6 c0             	movzx  eax,al
c0018a1d:	0f b6 f1             	movzx  esi,cl
c0018a20:	89 e9                	mov    ecx,ebp
c0018a22:	56                   	push   esi
c0018a23:	0f b6 c9             	movzx  ecx,cl
c0018a26:	51                   	push   ecx
c0018a27:	52                   	push   edx
c0018a28:	50                   	push   eax
c0018a29:	57                   	push   edi
c0018a2a:	e8 ad fc ff ff       	call   c00186dc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a2f:	89 c2                	mov    edx,eax
c0018a31:	ed                   	in     eax,dx
c0018a32:	83 c4 20             	add    esp,0x20
c0018a35:	0f b7 db             	movzx  ebx,bx
c0018a38:	f6 c2 02             	test   dl,0x2
c0018a3b:	74 0c                	je     c0018a49 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a3d:	0f b7 c8             	movzx  ecx,ax
c0018a40:	89 d8                	mov    eax,ebx
c0018a42:	c1 e0 10             	shl    eax,0x10
c0018a45:	09 c8                	or     eax,ecx
c0018a47:	eb 05                	jmp    c0018a4e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a49:	66 31 c0             	xor    ax,ax
c0018a4c:	09 d8                	or     eax,ebx
c0018a4e:	ef                   	out    dx,eax
c0018a4f:	83 c4 0c             	add    esp,0xc
c0018a52:	5b                   	pop    ebx
c0018a53:	5e                   	pop    esi
c0018a54:	5f                   	pop    edi
c0018a55:	5d                   	pop    ebp
c0018a56:	c3                   	ret    
c0018a57:	c7 44 24 20 8b f4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f48b
c0018a5f:	83 c4 0c             	add    esp,0xc
c0018a62:	5b                   	pop    ebx
c0018a63:	5e                   	pop    esi
c0018a64:	5f                   	pop    edi
c0018a65:	5d                   	pop    ebp
c0018a66:	e9 84 78 ff ff       	jmp    c00102ef <KePanic(char const*)>
c0018a6b:	90                   	nop

c0018a6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a6c:	55                   	push   ebp
c0018a6d:	57                   	push   edi
c0018a6e:	56                   	push   esi
c0018a6f:	53                   	push   ebx
c0018a70:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a76:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c0018a7d:	0f 85 84 00 00 00    	jne    c0018b07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a83:	83 ec 0c             	sub    esp,0xc
c0018a86:	68 14 01 00 00       	push   0x114
c0018a8b:	e8 29 ed fe ff       	call   c00077b9 <malloc>
c0018a90:	83 c4 0c             	add    esp,0xc
c0018a93:	89 c3                	mov    ebx,eax
c0018a95:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0018a9b:	68 91 f4 01 c0       	push   0xc001f491
c0018aa0:	50                   	push   eax
c0018aa1:	e8 3c 21 ff ff       	call   c000abe2 <File::File(char const*, Process*)>
c0018aa6:	5a                   	pop    edx
c0018aa7:	59                   	pop    ecx
c0018aa8:	6a 01                	push   0x1
c0018aaa:	53                   	push   ebx
c0018aab:	e8 f2 21 ff ff       	call   c000aca2 <File::open(FileOpenMode)>
c0018ab0:	83 c4 0c             	add    esp,0xc
c0018ab3:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018ab7:	50                   	push   eax
c0018ab8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018abc:	50                   	push   eax
c0018abd:	53                   	push   ebx
c0018abe:	e8 8b 24 ff ff       	call   c000af4e <File::stat(unsigned long long*, bool*)>
c0018ac3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ac7:	40                   	inc    eax
c0018ac8:	89 04 24             	mov    DWORD PTR [esp],eax
c0018acb:	e8 e9 ec fe ff       	call   c00077b9 <malloc>
c0018ad0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018ad4:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c0018ad9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018add:	5e                   	pop    esi
c0018ade:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018ae0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018ae4:	51                   	push   ecx
c0018ae5:	50                   	push   eax
c0018ae6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018aea:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018aee:	53                   	push   ebx
c0018aef:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018af2:	83 c4 14             	add    esp,0x14
c0018af5:	53                   	push   ebx
c0018af6:	e8 05 22 ff ff       	call   c000ad00 <File::close()>
c0018afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018aff:	83 c4 10             	add    esp,0x10
c0018b02:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c0018b07:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c0018b0c:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c0018b12:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b15:	31 ff                	xor    edi,edi
c0018b17:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018b1f:	31 f6                	xor    esi,esi
c0018b21:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018b26:	31 db                	xor    ebx,ebx
c0018b28:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018b30:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b35:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b3c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b40:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b47:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b4b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b4e:	0f 8e 6b 01 00 00    	jle    c0018cbf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b54:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b57:	d4 40                	aam    0x40
c0018b59:	d5 39                	aad    0x39
c0018b5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b5f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b63:	d4 40                	aam    0x40
c0018b65:	d5 39                	aad    0x39
c0018b67:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b6b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b6f:	d4 40                	aam    0x40
c0018b71:	d5 39                	aad    0x39
c0018b73:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b77:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b7b:	d4 40                	aam    0x40
c0018b7d:	d5 39                	aad    0x39
c0018b7f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b83:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b87:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b8b:	3c 56                	cmp    al,0x56
c0018b8d:	74 45                	je     c0018bd4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b8f:	d4 40                	aam    0x40
c0018b91:	d5 39                	aad    0x39
c0018b93:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b96:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b9a:	0f b6 c9             	movzx  ecx,cl
c0018b9d:	c1 e1 04             	shl    ecx,0x4
c0018ba0:	d4 40                	aam    0x40
c0018ba2:	d5 39                	aad    0x39
c0018ba4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018ba7:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018bab:	0f b6 db             	movzx  ebx,bl
c0018bae:	09 cb                	or     ebx,ecx
c0018bb0:	c1 e3 04             	shl    ebx,0x4
c0018bb3:	d4 40                	aam    0x40
c0018bb5:	d5 39                	aad    0x39
c0018bb7:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bba:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018bbe:	0f b6 c9             	movzx  ecx,cl
c0018bc1:	09 cb                	or     ebx,ecx
c0018bc3:	c1 e3 04             	shl    ebx,0x4
c0018bc6:	89 d9                	mov    ecx,ebx
c0018bc8:	d4 40                	aam    0x40
c0018bca:	d5 39                	aad    0x39
c0018bcc:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bcf:	0f b6 db             	movzx  ebx,bl
c0018bd2:	09 cb                	or     ebx,ecx
c0018bd4:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018bd8:	80 f9 44             	cmp    cl,0x44
c0018bdb:	74 47                	je     c0018c24 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018bdd:	88 c8                	mov    al,cl
c0018bdf:	d4 40                	aam    0x40
c0018be1:	d5 39                	aad    0x39
c0018be3:	83 e8 30             	sub    eax,0x30
c0018be6:	0f b6 e8             	movzx  ebp,al
c0018be9:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018bed:	c1 e5 04             	shl    ebp,0x4
c0018bf0:	d4 40                	aam    0x40
c0018bf2:	d5 39                	aad    0x39
c0018bf4:	83 e8 30             	sub    eax,0x30
c0018bf7:	0f b6 f0             	movzx  esi,al
c0018bfa:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018bfe:	09 ee                	or     esi,ebp
c0018c00:	c1 e6 04             	shl    esi,0x4
c0018c03:	d4 40                	aam    0x40
c0018c05:	d5 39                	aad    0x39
c0018c07:	83 e8 30             	sub    eax,0x30
c0018c0a:	0f b6 e8             	movzx  ebp,al
c0018c0d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018c11:	09 ee                	or     esi,ebp
c0018c13:	c1 e6 04             	shl    esi,0x4
c0018c16:	89 f5                	mov    ebp,esi
c0018c18:	d4 40                	aam    0x40
c0018c1a:	d5 39                	aad    0x39
c0018c1c:	83 e8 30             	sub    eax,0x30
c0018c1f:	0f b6 f0             	movzx  esi,al
c0018c22:	09 ee                	or     esi,ebp
c0018c24:	83 c7 10             	add    edi,0x10
c0018c27:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018c2b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018c2e:	3c 0a                	cmp    al,0xa
c0018c30:	74 09                	je     c0018c3b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018c32:	45                   	inc    ebp
c0018c33:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c36:	75 16                	jne    c0018c4e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c38:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c3b:	3c 0a                	cmp    al,0xa
c0018c3d:	0f 94 c0             	sete   al
c0018c40:	0f b6 c0             	movzx  eax,al
c0018c43:	01 c7                	add    edi,eax
c0018c45:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c4a:	75 0c                	jne    c0018c58 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c4c:	eb 15                	jmp    c0018c63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c4e:	47                   	inc    edi
c0018c4f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c52:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c56:	eb d3                	jmp    c0018c2b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c58:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c5d:	0f 85 e8 fe ff ff    	jne    c0018b4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c63:	80 f9 44             	cmp    cl,0x44
c0018c66:	74 0b                	je     c0018c73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c68:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c6d:	0f 85 d8 fe ff ff    	jne    c0018b4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c73:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c77:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c7b:	c1 e1 04             	shl    ecx,0x4
c0018c7e:	83 e8 30             	sub    eax,0x30
c0018c81:	09 c8                	or     eax,ecx
c0018c83:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c87:	0f 85 be fe ff ff    	jne    c0018b4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c8d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c91:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c95:	c1 e1 04             	shl    ecx,0x4
c0018c98:	83 e8 30             	sub    eax,0x30
c0018c9b:	09 c8                	or     eax,ecx
c0018c9d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018ca1:	0f 85 a4 fe ff ff    	jne    c0018b4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ca7:	50                   	push   eax
c0018ca8:	50                   	push   eax
c0018ca9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cad:	50                   	push   eax
c0018cae:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018cb5:	e8 46 79 fe ff       	call   c0000600 <strcpy>
c0018cba:	83 c4 10             	add    esp,0x10
c0018cbd:	eb 15                	jmp    c0018cd4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018cbf:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cc6:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018cd1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018cd4:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cdb:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018ce1:	5b                   	pop    ebx
c0018ce2:	5e                   	pop    esi
c0018ce3:	5f                   	pop    edi
c0018ce4:	5d                   	pop    ebp
c0018ce5:	c3                   	ret    

c0018ce6 <PCI::checkBus(unsigned char)>:
c0018ce6:	56                   	push   esi
c0018ce7:	53                   	push   ebx
c0018ce8:	31 f6                	xor    esi,esi
c0018cea:	51                   	push   ecx
c0018ceb:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018cef:	0f b6 c3             	movzx  eax,bl
c0018cf2:	52                   	push   edx
c0018cf3:	56                   	push   esi
c0018cf4:	46                   	inc    esi
c0018cf5:	50                   	push   eax
c0018cf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cfa:	e8 f3 02 00 00       	call   c0018ff2 <PCI::checkDevice(unsigned char, unsigned char)>
c0018cff:	83 c4 10             	add    esp,0x10
c0018d02:	83 fe 20             	cmp    esi,0x20
c0018d05:	75 e8                	jne    c0018cef <PCI::checkBus(unsigned char)+0x9>
c0018d07:	58                   	pop    eax
c0018d08:	5b                   	pop    ebx
c0018d09:	5e                   	pop    esi
c0018d0a:	c3                   	ret    
c0018d0b:	90                   	nop

c0018d0c <PCI::foundDevice(PCIDeviceInfo)>:
c0018d0c:	55                   	push   ebp
c0018d0d:	57                   	push   edi
c0018d0e:	56                   	push   esi
c0018d0f:	53                   	push   ebx
c0018d10:	83 ec 1c             	sub    esp,0x1c
c0018d13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018d17:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018d1d:	0f 84 52 01 00 00    	je     c0018e75 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d23:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018d27:	66 81 f9 06 04       	cmp    cx,0x406
c0018d2c:	75 2c                	jne    c0018d5a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018d2e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018d33:	50                   	push   eax
c0018d34:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d39:	50                   	push   eax
c0018d3a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d3f:	50                   	push   eax
c0018d40:	56                   	push   esi
c0018d41:	e8 b2 fb ff ff       	call   c00188f8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d46:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d4a:	0f b6 c0             	movzx  eax,al
c0018d4d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d51:	83 c4 2c             	add    esp,0x2c
c0018d54:	5b                   	pop    ebx
c0018d55:	5e                   	pop    esi
c0018d56:	5f                   	pop    edi
c0018d57:	5d                   	pop    ebp
c0018d58:	eb 8c                	jmp    c0018ce6 <PCI::checkBus(unsigned char)>
c0018d5a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d5e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d68:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d6c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d70:	88 d3                	mov    bl,dl
c0018d72:	85 c0                	test   eax,eax
c0018d74:	74 33                	je     c0018da9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d76:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d79:	85 d2                	test   edx,edx
c0018d7b:	74 28                	je     c0018da5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d7d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d83:	31 ef                	xor    edi,ebp
c0018d85:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d8b:	75 18                	jne    c0018da5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d8d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d91:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d97:	75 0c                	jne    c0018da5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d99:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d9f:	0f 84 d0 00 00 00    	je     c0018e75 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018da5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018da7:	eb c9                	jmp    c0018d72 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018da9:	66 81 f9 01 06       	cmp    cx,0x601
c0018dae:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018db2:	75 19                	jne    c0018dcd <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018db4:	83 ec 0c             	sub    esp,0xc
c0018db7:	68 64 01 00 00       	push   0x164
c0018dbc:	e8 f8 e9 fe ff       	call   c00077b9 <malloc>
c0018dc1:	89 c5                	mov    ebp,eax
c0018dc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dc6:	e8 47 0e 00 00       	call   c0019c12 <SATABus::SATABus()>
c0018dcb:	eb 1e                	jmp    c0018deb <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018dcd:	66 81 f9 01 01       	cmp    cx,0x101
c0018dd2:	75 60                	jne    c0018e34 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018dd4:	83 ec 0c             	sub    esp,0xc
c0018dd7:	68 70 02 00 00       	push   0x270
c0018ddc:	e8 d8 e9 fe ff       	call   c00077b9 <malloc>
c0018de1:	89 c5                	mov    ebp,eax
c0018de3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018de6:	e8 cb 02 00 00       	call   c00190b6 <IDE::IDE()>
c0018deb:	58                   	pop    eax
c0018dec:	5a                   	pop    edx
c0018ded:	55                   	push   ebp
c0018dee:	56                   	push   esi
c0018def:	e8 b8 2c ff ff       	call   c000baac <Device::addChild(Device*)>
c0018df4:	83 ec 1c             	sub    esp,0x1c
c0018df7:	b9 09 00 00 00       	mov    ecx,0x9
c0018dfc:	fc                   	cld    
c0018dfd:	89 e7                	mov    edi,esp
c0018dff:	89 de                	mov    esi,ebx
c0018e01:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e03:	55                   	push   ebp
c0018e04:	e8 e9 2b ff ff       	call   c000b9f2 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018e0c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018e10:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018e18:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018e20:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018e28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018e2b:	83 c4 4c             	add    esp,0x4c
c0018e2e:	5b                   	pop    ebx
c0018e2f:	5e                   	pop    esi
c0018e30:	5f                   	pop    edi
c0018e31:	5d                   	pop    ebp
c0018e32:	ff e0                	jmp    eax
c0018e34:	83 ec 0c             	sub    esp,0xc
c0018e37:	68 58 01 00 00       	push   0x158
c0018e3c:	e8 78 e9 fe ff       	call   c00077b9 <malloc>
c0018e41:	89 c5                	mov    ebp,eax
c0018e43:	58                   	pop    eax
c0018e44:	5a                   	pop    edx
c0018e45:	68 aa f4 01 c0       	push   0xc001f4aa
c0018e4a:	55                   	push   ebp
c0018e4b:	e8 fa 2e ff ff       	call   c000bd4a <DriverlessDevice::DriverlessDevice(char const*)>
c0018e50:	59                   	pop    ecx
c0018e51:	5f                   	pop    edi
c0018e52:	55                   	push   ebp
c0018e53:	56                   	push   esi
c0018e54:	e8 53 2c ff ff       	call   c000baac <Device::addChild(Device*)>
c0018e59:	b9 09 00 00 00       	mov    ecx,0x9
c0018e5e:	fc                   	cld    
c0018e5f:	89 df                	mov    edi,ebx
c0018e61:	89 de                	mov    esi,ebx
c0018e63:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e65:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e69:	83 c4 2c             	add    esp,0x2c
c0018e6c:	5b                   	pop    ebx
c0018e6d:	5e                   	pop    esi
c0018e6e:	5f                   	pop    edi
c0018e6f:	5d                   	pop    ebp
c0018e70:	e9 7d 2b ff ff       	jmp    c000b9f2 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e75:	83 c4 1c             	add    esp,0x1c
c0018e78:	5b                   	pop    ebx
c0018e79:	5e                   	pop    esi
c0018e7a:	5f                   	pop    edi
c0018e7b:	5d                   	pop    ebp
c0018e7c:	c3                   	ret    
c0018e7d:	90                   	nop

c0018e7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e7e:	55                   	push   ebp
c0018e7f:	57                   	push   edi
c0018e80:	56                   	push   esi
c0018e81:	53                   	push   ebx
c0018e82:	83 ec 68             	sub    esp,0x68
c0018e85:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e89:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e94:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e9b:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018ea4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018eab:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018eb0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018eb4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018eb9:	6a 0c                	push   0xc
c0018ebb:	57                   	push   edi
c0018ebc:	53                   	push   ebx
c0018ebd:	56                   	push   esi
c0018ebe:	55                   	push   ebp
c0018ebf:	e8 86 f8 ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ec4:	83 c4 20             	add    esp,0x20
c0018ec7:	57                   	push   edi
c0018ec8:	53                   	push   ebx
c0018ec9:	56                   	push   esi
c0018eca:	55                   	push   ebp
c0018ecb:	e8 6e f9 ff ff       	call   c001883e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018ed0:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018ed5:	57                   	push   edi
c0018ed6:	53                   	push   ebx
c0018ed7:	56                   	push   esi
c0018ed8:	55                   	push   ebp
c0018ed9:	e8 f6 f9 ff ff       	call   c00188d4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018ede:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018ee2:	83 c4 14             	add    esp,0x14
c0018ee5:	6a 3c                	push   0x3c
c0018ee7:	57                   	push   edi
c0018ee8:	53                   	push   ebx
c0018ee9:	56                   	push   esi
c0018eea:	55                   	push   ebp
c0018eeb:	e8 5a f8 ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ef0:	0f b6 c4             	movzx  eax,ah
c0018ef3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018ef7:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018efb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018eff:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018f04:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018f0a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018f10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018f14:	83 c4 20             	add    esp,0x20
c0018f17:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f1c:	74 30                	je     c0018f4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f1e:	31 c0                	xor    eax,eax
c0018f20:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f24:	7e 28                	jle    c0018f4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f26:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018f2e:	39 cb                	cmp    ebx,ecx
c0018f30:	75 19                	jne    c0018f4b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f32:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f3a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f3e:	75 0b                	jne    c0018f4b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f40:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f47:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f4b:	40                   	inc    eax
c0018f4c:	eb d2                	jmp    c0018f20 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f4e:	31 d2                	xor    edx,edx
c0018f50:	83 ec 0c             	sub    esp,0xc
c0018f53:	57                   	push   edi
c0018f54:	53                   	push   ebx
c0018f55:	56                   	push   esi
c0018f56:	52                   	push   edx
c0018f57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f5b:	55                   	push   ebp
c0018f5c:	e8 bf f9 ff ff       	call   c0018920 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f65:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f69:	42                   	inc    edx
c0018f6a:	83 c4 20             	add    esp,0x20
c0018f6d:	83 fa 06             	cmp    edx,0x6
c0018f70:	75 de                	jne    c0018f50 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f72:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f77:	83 ec 0c             	sub    esp,0xc
c0018f7a:	86 e0                	xchg   al,ah
c0018f7c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f81:	6a 02                	push   0x2
c0018f83:	57                   	push   edi
c0018f84:	53                   	push   ebx
c0018f85:	56                   	push   esi
c0018f86:	55                   	push   ebp
c0018f87:	e8 be f7 ff ff       	call   c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f8c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f91:	83 c4 20             	add    esp,0x20
c0018f94:	57                   	push   edi
c0018f95:	53                   	push   ebx
c0018f96:	56                   	push   esi
c0018f97:	55                   	push   ebp
c0018f98:	e8 eb f8 ff ff       	call   c0018888 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f9d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018fa1:	57                   	push   edi
c0018fa2:	53                   	push   ebx
c0018fa3:	56                   	push   esi
c0018fa4:	55                   	push   ebp
c0018fa5:	e8 48 f8 ff ff       	call   c00187f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018faa:	b9 09 00 00 00       	mov    ecx,0x9
c0018faf:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018fb4:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018fb8:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018fbc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018fc0:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018fc4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018fc8:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018fcc:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018fd0:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018fd4:	83 ec 0c             	sub    esp,0xc
c0018fd7:	fc                   	cld    
c0018fd8:	89 e7                	mov    edi,esp
c0018fda:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018fde:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018fe0:	55                   	push   ebp
c0018fe1:	e8 26 fd ff ff       	call   c0018d0c <PCI::foundDevice(PCIDeviceInfo)>
c0018fe6:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018fec:	5b                   	pop    ebx
c0018fed:	5e                   	pop    esi
c0018fee:	5f                   	pop    edi
c0018fef:	5d                   	pop    ebp
c0018ff0:	c3                   	ret    
c0018ff1:	90                   	nop

c0018ff2 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018ff2:	55                   	push   ebp
c0018ff3:	57                   	push   edi
c0018ff4:	56                   	push   esi
c0018ff5:	53                   	push   ebx
c0018ff6:	83 ec 0c             	sub    esp,0xc
c0018ff9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ffd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0019002:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019007:	6a 00                	push   0x0
c0019009:	56                   	push   esi
c001900a:	57                   	push   edi
c001900b:	55                   	push   ebp
c001900c:	e8 e1 f7 ff ff       	call   c00187f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019011:	6a 00                	push   0x0
c0019013:	56                   	push   esi
c0019014:	57                   	push   edi
c0019015:	55                   	push   ebp
c0019016:	e8 63 fe ff ff       	call   c0018e7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001901b:	83 c4 20             	add    esp,0x20
c001901e:	6a 00                	push   0x0
c0019020:	56                   	push   esi
c0019021:	57                   	push   edi
c0019022:	55                   	push   ebp
c0019023:	e8 ee f7 ff ff       	call   c0018816 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019028:	83 c4 10             	add    esp,0x10
c001902b:	84 c0                	test   al,al
c001902d:	79 27                	jns    c0019056 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001902f:	bb 01 00 00 00       	mov    ebx,0x1
c0019034:	53                   	push   ebx
c0019035:	56                   	push   esi
c0019036:	57                   	push   edi
c0019037:	55                   	push   ebp
c0019038:	e8 b5 f7 ff ff       	call   c00187f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001903d:	83 c4 10             	add    esp,0x10
c0019040:	66 40                	inc    ax
c0019042:	74 0c                	je     c0019050 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019044:	53                   	push   ebx
c0019045:	56                   	push   esi
c0019046:	57                   	push   edi
c0019047:	55                   	push   ebp
c0019048:	e8 31 fe ff ff       	call   c0018e7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001904d:	83 c4 10             	add    esp,0x10
c0019050:	43                   	inc    ebx
c0019051:	83 fb 08             	cmp    ebx,0x8
c0019054:	75 de                	jne    c0019034 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019056:	83 c4 0c             	add    esp,0xc
c0019059:	5b                   	pop    ebx
c001905a:	5e                   	pop    esi
c001905b:	5f                   	pop    edi
c001905c:	5d                   	pop    ebp
c001905d:	c3                   	ret    

c001905e <PCI::detect()>:
c001905e:	56                   	push   esi
c001905f:	53                   	push   ebx
c0019060:	53                   	push   ebx
c0019061:	31 db                	xor    ebx,ebx
c0019063:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019067:	6a 00                	push   0x0
c0019069:	6a 00                	push   0x0
c001906b:	6a 00                	push   0x0
c001906d:	56                   	push   esi
c001906e:	e8 a3 f7 ff ff       	call   c0018816 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019073:	83 c4 10             	add    esp,0x10
c0019076:	a8 80                	test   al,0x80
c0019078:	75 21                	jne    c001909b <PCI::detect()+0x3d>
c001907a:	51                   	push   ecx
c001907b:	51                   	push   ecx
c001907c:	6a 00                	push   0x0
c001907e:	56                   	push   esi
c001907f:	e8 62 fc ff ff       	call   c0018ce6 <PCI::checkBus(unsigned char)>
c0019084:	83 c4 10             	add    esp,0x10
c0019087:	eb 24                	jmp    c00190ad <PCI::detect()+0x4f>
c0019089:	52                   	push   edx
c001908a:	52                   	push   edx
c001908b:	53                   	push   ebx
c001908c:	43                   	inc    ebx
c001908d:	56                   	push   esi
c001908e:	e8 53 fc ff ff       	call   c0018ce6 <PCI::checkBus(unsigned char)>
c0019093:	83 c4 10             	add    esp,0x10
c0019096:	83 fb 08             	cmp    ebx,0x8
c0019099:	74 12                	je     c00190ad <PCI::detect()+0x4f>
c001909b:	53                   	push   ebx
c001909c:	6a 00                	push   0x0
c001909e:	6a 00                	push   0x0
c00190a0:	56                   	push   esi
c00190a1:	e8 4c f7 ff ff       	call   c00187f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00190a6:	83 c4 10             	add    esp,0x10
c00190a9:	66 40                	inc    ax
c00190ab:	74 dc                	je     c0019089 <PCI::detect()+0x2b>
c00190ad:	58                   	pop    eax
c00190ae:	5b                   	pop    ebx
c00190af:	5e                   	pop    esi
c00190b0:	c3                   	ret    
c00190b1:	90                   	nop

c00190b2 <IDE::close(int, int, void*)>:
c00190b2:	83 c8 ff             	or     eax,0xffffffff
c00190b5:	c3                   	ret    

c00190b6 <IDE::IDE()>:
c00190b6:	83 ec 0c             	sub    esp,0xc
c00190b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190bd:	83 ec 08             	sub    esp,0x8
c00190c0:	68 f0 f4 01 c0       	push   0xc001f4f0
c00190c5:	50                   	push   eax
c00190c6:	e8 25 2d ff ff       	call   c000bdf0 <HardDiskController::HardDiskController(char const*)>
c00190cb:	83 c4 10             	add    esp,0x10
c00190ce:	ba 80 f5 01 c0       	mov    edx,0xc001f580
c00190d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d7:	89 10                	mov    DWORD PTR [eax],edx
c00190d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190dd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00190e4:	90                   	nop
c00190e5:	83 c4 0c             	add    esp,0xc
c00190e8:	c3                   	ret    
c00190e9:	90                   	nop

c00190ea <IDE::prepareInterrupt(unsigned char)>:
c00190ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00190ef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190f3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00190fb:	c3                   	ret    

c00190fc <selectDrive(unsigned char, unsigned char)>:
c00190fc:	c3                   	ret    
c00190fd:	90                   	nop

c00190fe <IDE::getBase(unsigned char)>:
c00190fe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019107:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001910f:	c3                   	ret    

c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019110:	55                   	push   ebp
c0019111:	57                   	push   edi
c0019112:	56                   	push   esi
c0019113:	53                   	push   ebx
c0019114:	83 ec 1c             	sub    esp,0x1c
c0019117:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001911b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001911f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0019122:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019126:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001912a:	80 f9 03             	cmp    cl,0x3
c001912d:	77 51                	ja     c0019180 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001912f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019133:	0f b6 f2             	movzx  esi,dl
c0019136:	0f b6 db             	movzx  ebx,bl
c0019139:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001913c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019140:	83 ca 80             	or     edx,0xffffff80
c0019143:	0f b6 d2             	movzx  edx,dl
c0019146:	52                   	push   edx
c0019147:	6a 0c                	push   0xc
c0019149:	56                   	push   esi
c001914a:	57                   	push   edi
c001914b:	e8 c0 ff ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019150:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019155:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019159:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001915d:	ee                   	out    dx,al
c001915e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019163:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019167:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001916b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001916f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019177:	83 c4 2c             	add    esp,0x2c
c001917a:	5b                   	pop    ebx
c001917b:	5e                   	pop    esi
c001917c:	5f                   	pop    edi
c001917d:	5d                   	pop    ebp
c001917e:	eb 90                	jmp    c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019180:	80 fb 07             	cmp    bl,0x7
c0019183:	77 12                	ja     c0019197 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019185:	0f b6 d2             	movzx  edx,dl
c0019188:	0f b6 db             	movzx  ebx,bl
c001918b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019193:	89 da                	mov    edx,ebx
c0019195:	eb 2f                	jmp    c00191c6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019197:	80 fb 0d             	cmp    bl,0xd
c001919a:	77 13                	ja     c00191af <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001919c:	0f b6 d2             	movzx  edx,dl
c001919f:	0f b6 db             	movzx  ebx,bl
c00191a2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00191a9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00191ad:	eb 17                	jmp    c00191c6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191af:	80 fb 15             	cmp    bl,0x15
c00191b2:	77 13                	ja     c00191c7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00191b4:	0f b6 d2             	movzx  edx,dl
c00191b7:	0f b6 db             	movzx  ebx,bl
c00191ba:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00191c2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00191c6:	ee                   	out    dx,al
c00191c7:	83 c4 1c             	add    esp,0x1c
c00191ca:	5b                   	pop    ebx
c00191cb:	5e                   	pop    esi
c00191cc:	5f                   	pop    edi
c00191cd:	5d                   	pop    ebp
c00191ce:	c3                   	ret    
c00191cf:	90                   	nop

c00191d0 <IDE::read(unsigned char, unsigned char)>:
c00191d0:	55                   	push   ebp
c00191d1:	57                   	push   edi
c00191d2:	56                   	push   esi
c00191d3:	53                   	push   ebx
c00191d4:	83 ec 1c             	sub    esp,0x1c
c00191d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00191db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00191df:	8d 43 f8             	lea    eax,[ebx-0x8]
c00191e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00191e6:	3c 03                	cmp    al,0x3
c00191e8:	77 43                	ja     c001922d <IDE::read(unsigned char, unsigned char)+0x5d>
c00191ea:	0f b6 f2             	movzx  esi,dl
c00191ed:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00191f0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00191f4:	83 c8 80             	or     eax,0xffffff80
c00191f7:	0f b6 c0             	movzx  eax,al
c00191fa:	50                   	push   eax
c00191fb:	6a 0c                	push   0xc
c00191fd:	56                   	push   esi
c00191fe:	57                   	push   edi
c00191ff:	e8 0c ff ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019204:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019209:	0f b6 c3             	movzx  eax,bl
c001920c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019210:	ec                   	in     al,dx
c0019211:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019215:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001921a:	52                   	push   edx
c001921b:	6a 0c                	push   0xc
c001921d:	56                   	push   esi
c001921e:	57                   	push   edi
c001921f:	e8 ec fe ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019224:	83 c4 20             	add    esp,0x20
c0019227:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001922b:	eb 49                	jmp    c0019276 <IDE::read(unsigned char, unsigned char)+0xa6>
c001922d:	80 fb 07             	cmp    bl,0x7
c0019230:	77 12                	ja     c0019244 <IDE::read(unsigned char, unsigned char)+0x74>
c0019232:	0f b6 d2             	movzx  edx,dl
c0019235:	0f b6 c3             	movzx  eax,bl
c0019238:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019240:	89 c2                	mov    edx,eax
c0019242:	eb 31                	jmp    c0019275 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019244:	80 fb 0d             	cmp    bl,0xd
c0019247:	77 13                	ja     c001925c <IDE::read(unsigned char, unsigned char)+0x8c>
c0019249:	0f b6 d2             	movzx  edx,dl
c001924c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019253:	0f b6 d3             	movzx  edx,bl
c0019256:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001925a:	eb 19                	jmp    c0019275 <IDE::read(unsigned char, unsigned char)+0xa5>
c001925c:	31 c0                	xor    eax,eax
c001925e:	80 fb 15             	cmp    bl,0x15
c0019261:	77 13                	ja     c0019276 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019263:	0f b6 d2             	movzx  edx,dl
c0019266:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001926e:	0f b6 d3             	movzx  edx,bl
c0019271:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019275:	ec                   	in     al,dx
c0019276:	83 c4 1c             	add    esp,0x1c
c0019279:	5b                   	pop    ebx
c001927a:	5e                   	pop    esi
c001927b:	5f                   	pop    edi
c001927c:	5d                   	pop    ebp
c001927d:	c3                   	ret    

c001927e <IDE::waitInterrupt(unsigned char)>:
c001927e:	57                   	push   edi
c001927f:	56                   	push   esi
c0019280:	31 f6                	xor    esi,esi
c0019282:	53                   	push   ebx
c0019283:	83 ec 10             	sub    esp,0x10
c0019286:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001928a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001928e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019292:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019297:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001929e:	84 db                	test   bl,bl
c00192a0:	75 33                	jne    c00192d5 <IDE::waitInterrupt(unsigned char)+0x57>
c00192a2:	52                   	push   edx
c00192a3:	6a 0c                	push   0xc
c00192a5:	50                   	push   eax
c00192a6:	57                   	push   edi
c00192a7:	e8 24 ff ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c00192ac:	83 c4 10             	add    esp,0x10
c00192af:	a8 01                	test   al,0x1
c00192b1:	75 2a                	jne    c00192dd <IDE::waitInterrupt(unsigned char)+0x5f>
c00192b3:	f7 c6 04 00 00 00    	test   esi,0x4
c00192b9:	75 12                	jne    c00192cd <IDE::waitInterrupt(unsigned char)+0x4f>
c00192bb:	83 fe 32             	cmp    esi,0x32
c00192be:	7e 0d                	jle    c00192cd <IDE::waitInterrupt(unsigned char)+0x4f>
c00192c0:	83 ec 0c             	sub    esp,0xc
c00192c3:	6a 64                	push   0x64
c00192c5:	e8 1a a9 ff ff       	call   c0013be4 <milliTenthSleep(unsigned int)>
c00192ca:	83 c4 10             	add    esp,0x10
c00192cd:	83 fe 3c             	cmp    esi,0x3c
c00192d0:	74 0b                	je     c00192dd <IDE::waitInterrupt(unsigned char)+0x5f>
c00192d2:	46                   	inc    esi
c00192d3:	eb bd                	jmp    c0019292 <IDE::waitInterrupt(unsigned char)+0x14>
c00192d5:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00192dd:	83 c4 10             	add    esp,0x10
c00192e0:	88 d8                	mov    al,bl
c00192e2:	5b                   	pop    ebx
c00192e3:	5e                   	pop    esi
c00192e4:	5f                   	pop    edi
c00192e5:	c3                   	ret    

c00192e6 <ideChannel0IRQHandler(regs*, void*)>:
c00192e6:	83 ec 10             	sub    esp,0x10
c00192e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192ed:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00192f4:	6a 07                	push   0x7
c00192f6:	6a 00                	push   0x0
c00192f8:	50                   	push   eax
c00192f9:	e8 d2 fe ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c00192fe:	83 c4 1c             	add    esp,0x1c
c0019301:	c3                   	ret    

c0019302 <ideChannel1IRQHandler(regs*, void*)>:
c0019302:	83 ec 10             	sub    esp,0x10
c0019305:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019309:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019310:	6a 07                	push   0x7
c0019312:	6a 01                	push   0x1
c0019314:	50                   	push   eax
c0019315:	e8 b6 fe ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c001931a:	83 c4 1c             	add    esp,0x1c
c001931d:	c3                   	ret    

c001931e <IDE::enableIRQs(unsigned char, bool)>:
c001931e:	57                   	push   edi
c001931f:	56                   	push   esi
c0019320:	be 04 00 00 00       	mov    esi,0x4
c0019325:	53                   	push   ebx
c0019326:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001932b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001932f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019334:	0f 94 c0             	sete   al
c0019337:	01 c0                	add    eax,eax
c0019339:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019340:	0f b6 c0             	movzx  eax,al
c0019343:	50                   	push   eax
c0019344:	6a 0c                	push   0xc
c0019346:	57                   	push   edi
c0019347:	53                   	push   ebx
c0019348:	e8 c3 fd ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	50                   	push   eax
c0019351:	6a 0c                	push   0xc
c0019353:	57                   	push   edi
c0019354:	53                   	push   ebx
c0019355:	e8 76 fe ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c001935a:	83 c4 10             	add    esp,0x10
c001935d:	4e                   	dec    esi
c001935e:	75 f0                	jne    c0019350 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019360:	5b                   	pop    ebx
c0019361:	5e                   	pop    esi
c0019362:	5f                   	pop    edi
c0019363:	c3                   	ret    

c0019364 <IDE::open(int, int, void*)>:
c0019364:	55                   	push   ebp
c0019365:	57                   	push   edi
c0019366:	56                   	push   esi
c0019367:	53                   	push   ebx
c0019368:	83 ec 1c             	sub    esp,0x1c
c001936b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001936f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019378:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019381:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019388:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001938f:	0f 85 b0 02 00 00    	jne    c0019645 <IDE::open(int, int, void*)+0x2e1>
c0019395:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001939b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001939f:	83 e0 7f             	and    eax,0x7f
c00193a2:	3c 05                	cmp    al,0x5
c00193a4:	74 04                	je     c00193aa <IDE::open(int, int, void*)+0x46>
c00193a6:	3c 0f                	cmp    al,0xf
c00193a8:	75 32                	jne    c00193dc <IDE::open(int, int, void*)+0x78>
c00193aa:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00193b0:	83 e0 fc             	and    eax,0xfffffffc
c00193b3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00193ba:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00193c0:	83 e0 fc             	and    eax,0xfffffffc
c00193c3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00193ca:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00193d0:	83 e0 fc             	and    eax,0xfffffffc
c00193d3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193da:	eb 14                	jmp    c00193f0 <IDE::open(int, int, void*)+0x8c>
c00193dc:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00193e6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00193f0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00193f7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00193fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019402:	89 c6                	mov    esi,eax
c0019404:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019409:	c1 e6 10             	shl    esi,0x10
c001940c:	89 e8                	mov    eax,ebp
c001940e:	89 fa                	mov    edx,edi
c0019410:	c1 e0 0b             	shl    eax,0xb
c0019413:	09 f0                	or     eax,esi
c0019415:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001941c:	c1 e6 08             	shl    esi,0x8
c001941f:	09 c6                	or     esi,eax
c0019421:	89 f0                	mov    eax,esi
c0019423:	0d 08 00 00 80       	or     eax,0x80000008
c0019428:	ef                   	out    dx,eax
c0019429:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001942e:	89 ca                	mov    edx,ecx
c0019430:	ed                   	in     eax,dx
c0019431:	c1 e8 10             	shr    eax,0x10
c0019434:	3d ff ff 00 00       	cmp    eax,0xffff
c0019439:	0f 84 f5 00 00 00    	je     c0019534 <IDE::open(int, int, void*)+0x1d0>
c001943f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019445:	89 fa                	mov    edx,edi
c0019447:	89 f0                	mov    eax,esi
c0019449:	ef                   	out    dx,eax
c001944a:	b0 fe                	mov    al,0xfe
c001944c:	89 ca                	mov    edx,ecx
c001944e:	ee                   	out    dx,al
c001944f:	89 f0                	mov    eax,esi
c0019451:	89 fa                	mov    edx,edi
c0019453:	ef                   	out    dx,eax
c0019454:	89 ca                	mov    edx,ecx
c0019456:	ed                   	in     eax,dx
c0019457:	3c fe                	cmp    al,0xfe
c0019459:	0f 85 a9 00 00 00    	jne    c0019508 <IDE::open(int, int, void*)+0x1a4>
c001945f:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c0019465:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001946c:	74 33                	je     c00194a1 <IDE::open(int, int, void*)+0x13d>
c001946e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019474:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019478:	40                   	inc    eax
c0019479:	83 ec 0c             	sub    esp,0xc
c001947c:	0f b6 c0             	movzx  eax,al
c001947f:	50                   	push   eax
c0019480:	55                   	push   ebp
c0019481:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019485:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001948b:	51                   	push   ecx
c001948c:	e8 77 53 ff ff       	call   c000e808 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019491:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019496:	83 c4 1c             	add    esp,0x1c
c0019499:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001949f:	eb 0a                	jmp    c00194ab <IDE::open(int, int, void*)+0x147>
c00194a1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00194ab:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00194b2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00194b9:	c1 e1 10             	shl    ecx,0x10
c00194bc:	c1 e0 08             	shl    eax,0x8
c00194bf:	bf f8 0c 00 00       	mov    edi,0xcf8
c00194c4:	09 c1                	or     ecx,eax
c00194c6:	89 fa                	mov    edx,edi
c00194c8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00194cf:	c1 e0 0b             	shl    eax,0xb
c00194d2:	09 c1                	or     ecx,eax
c00194d4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00194da:	89 c8                	mov    eax,ecx
c00194dc:	ef                   	out    dx,eax
c00194dd:	be fc 0c 00 00       	mov    esi,0xcfc
c00194e2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00194e8:	89 f2                	mov    edx,esi
c00194ea:	ee                   	out    dx,al
c00194eb:	89 c8                	mov    eax,ecx
c00194ed:	89 fa                	mov    edx,edi
c00194ef:	ef                   	out    dx,eax
c00194f0:	89 f2                	mov    edx,esi
c00194f2:	ed                   	in     eax,dx
c00194f3:	0f b6 c0             	movzx  eax,al
c00194f6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00194fc:	74 46                	je     c0019544 <IDE::open(int, int, void*)+0x1e0>
c00194fe:	83 ec 0c             	sub    esp,0xc
c0019501:	68 08 f5 01 c0       	push   0xc001f508
c0019506:	eb 34                	jmp    c001953c <IDE::open(int, int, void*)+0x1d8>
c0019508:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019511:	75 17                	jne    c001952a <IDE::open(int, int, void*)+0x1c6>
c0019513:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019518:	74 07                	je     c0019521 <IDE::open(int, int, void*)+0x1bd>
c001951a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001951f:	75 09                	jne    c001952a <IDE::open(int, int, void*)+0x1c6>
c0019521:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019528:	eb 1a                	jmp    c0019544 <IDE::open(int, int, void*)+0x1e0>
c001952a:	83 ec 0c             	sub    esp,0xc
c001952d:	68 10 f5 01 c0       	push   0xc001f510
c0019532:	eb 08                	jmp    c001953c <IDE::open(int, int, void*)+0x1d8>
c0019534:	83 ec 0c             	sub    esp,0xc
c0019537:	68 41 f5 01 c0       	push   0xc001f541
c001953c:	e8 ae 6d ff ff       	call   c00102ef <KePanic(char const*)>
c0019541:	83 c4 10             	add    esp,0x10
c0019544:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001954b:	79 1a                	jns    c0019567 <IDE::open(int, int, void*)+0x203>
c001954d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019553:	83 e0 fc             	and    eax,0xfffffffc
c0019556:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001955d:	83 c0 08             	add    eax,0x8
c0019560:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019567:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001956d:	89 c2                	mov    edx,eax
c001956f:	83 e2 0f             	and    edx,0xf
c0019572:	66 83 fa 08          	cmp    dx,0x8
c0019576:	75 0a                	jne    c0019582 <IDE::open(int, int, void*)+0x21e>
c0019578:	83 e8 02             	sub    eax,0x2
c001957b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019582:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019588:	89 c2                	mov    edx,eax
c001958a:	83 e2 0f             	and    edx,0xf
c001958d:	66 83 fa 08          	cmp    dx,0x8
c0019591:	75 0a                	jne    c001959d <IDE::open(int, int, void*)+0x239>
c0019593:	83 e8 02             	sub    eax,0x2
c0019596:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001959d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00195a4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00195ab:	89 d0                	mov    eax,edx
c00195ad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195b0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195b4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00195b8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00195bb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195c0:	0f b6 c9             	movzx  ecx,cl
c00195c3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00195ca:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195cd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195d1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00195d5:	8d 50 02             	lea    edx,[eax+0x2]
c00195d8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195dd:	0f b6 d2             	movzx  edx,dl
c00195e0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00195e6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195e9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195ed:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00195f1:	8d 48 03             	lea    ecx,[eax+0x3]
c00195f4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195f9:	0f b6 c9             	movzx  ecx,cl
c00195fc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019602:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019605:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019609:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001960d:	8d 50 04             	lea    edx,[eax+0x4]
c0019610:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0019616:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001961b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019622:	66 85 f6             	test   si,si
c0019625:	74 5b                	je     c0019682 <IDE::open(int, int, void*)+0x31e>
c0019627:	0f b6 d2             	movzx  edx,dl
c001962a:	83 c0 05             	add    eax,0x5
c001962d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019630:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019634:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019638:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001963e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019643:	eb 3d                	jmp    c0019682 <IDE::open(int, int, void*)+0x31e>
c0019645:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001964b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019652:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019659:	66 05 06 02          	add    ax,0x206
c001965d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019664:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001966b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019672:	66 05 06 02          	add    ax,0x206
c0019676:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001967d:	e9 e5 fe ff ff       	jmp    c0019567 <IDE::open(int, int, void*)+0x203>
c0019682:	50                   	push   eax
c0019683:	50                   	push   eax
c0019684:	6a 00                	push   0x0
c0019686:	53                   	push   ebx
c0019687:	e8 5e fa ff ff       	call   c00190ea <IDE::prepareInterrupt(unsigned char)>
c001968c:	5a                   	pop    edx
c001968d:	59                   	pop    ecx
c001968e:	6a 01                	push   0x1
c0019690:	53                   	push   ebx
c0019691:	e8 54 fa ff ff       	call   c00190ea <IDE::prepareInterrupt(unsigned char)>
c0019696:	83 c4 0c             	add    esp,0xc
c0019699:	6a 00                	push   0x0
c001969b:	6a 00                	push   0x0
c001969d:	53                   	push   ebx
c001969e:	e8 7b fc ff ff       	call   c001931e <IDE::enableIRQs(unsigned char, bool)>
c00196a3:	83 c4 0c             	add    esp,0xc
c00196a6:	6a 00                	push   0x0
c00196a8:	6a 01                	push   0x1
c00196aa:	53                   	push   ebx
c00196ab:	e8 6e fc ff ff       	call   c001931e <IDE::enableIRQs(unsigned char, bool)>
c00196b0:	83 c4 10             	add    esp,0x10
c00196b3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00196ba:	74 34                	je     c00196f0 <IDE::open(int, int, void*)+0x38c>
c00196bc:	83 ec 0c             	sub    esp,0xc
c00196bf:	53                   	push   ebx
c00196c0:	6a 01                	push   0x1
c00196c2:	68 e6 92 01 c0       	push   0xc00192e6
c00196c7:	6a 0e                	push   0xe
c00196c9:	53                   	push   ebx
c00196ca:	e8 89 23 ff ff       	call   c000ba58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196cf:	83 c4 14             	add    esp,0x14
c00196d2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00196d8:	53                   	push   ebx
c00196d9:	6a 01                	push   0x1
c00196db:	68 02 93 01 c0       	push   0xc0019302
c00196e0:	6a 0f                	push   0xf
c00196e2:	53                   	push   ebx
c00196e3:	e8 70 23 ff ff       	call   c000ba58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196e8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00196ee:	eb 38                	jmp    c0019728 <IDE::open(int, int, void*)+0x3c4>
c00196f0:	83 ec 0c             	sub    esp,0xc
c00196f3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00196fd:	53                   	push   ebx
c00196fe:	6a 00                	push   0x0
c0019700:	68 e6 92 01 c0       	push   0xc00192e6
c0019705:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001970b:	53                   	push   ebx
c001970c:	e8 47 23 ff ff       	call   c000ba58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019711:	83 c4 14             	add    esp,0x14
c0019714:	53                   	push   ebx
c0019715:	6a 00                	push   0x0
c0019717:	68 02 93 01 c0       	push   0xc0019302
c001971c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019722:	53                   	push   ebx
c0019723:	e8 30 23 ff ff       	call   c000ba58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019728:	8b 03                	mov    eax,DWORD PTR [ebx]
c001972a:	83 c4 20             	add    esp,0x20
c001972d:	83 ec 0c             	sub    esp,0xc
c0019730:	53                   	push   ebx
c0019731:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019734:	83 c4 0c             	add    esp,0xc
c0019737:	6a 07                	push   0x7
c0019739:	6a 00                	push   0x0
c001973b:	53                   	push   ebx
c001973c:	e8 8f fa ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c0019741:	83 c4 0c             	add    esp,0xc
c0019744:	6a 07                	push   0x7
c0019746:	6a 01                	push   0x1
c0019748:	53                   	push   ebx
c0019749:	e8 82 fa ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c001974e:	83 c4 0c             	add    esp,0xc
c0019751:	6a 01                	push   0x1
c0019753:	6a 00                	push   0x0
c0019755:	53                   	push   ebx
c0019756:	e8 c3 fb ff ff       	call   c001931e <IDE::enableIRQs(unsigned char, bool)>
c001975b:	83 c4 0c             	add    esp,0xc
c001975e:	6a 01                	push   0x1
c0019760:	6a 01                	push   0x1
c0019762:	53                   	push   ebx
c0019763:	e8 b6 fb ff ff       	call   c001931e <IDE::enableIRQs(unsigned char, bool)>
c0019768:	83 c4 2c             	add    esp,0x2c
c001976b:	31 c0                	xor    eax,eax
c001976d:	5b                   	pop    ebx
c001976e:	5e                   	pop    esi
c001976f:	5f                   	pop    edi
c0019770:	5d                   	pop    ebp
c0019771:	c3                   	ret    

c0019772 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019772:	55                   	push   ebp
c0019773:	57                   	push   edi
c0019774:	56                   	push   esi
c0019775:	53                   	push   ebx
c0019776:	83 ec 1c             	sub    esp,0x1c
c0019779:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001977d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019781:	8d 50 f8             	lea    edx,[eax-0x8]
c0019784:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019788:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001978c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019790:	80 fa 03             	cmp    dl,0x3
c0019793:	77 5d                	ja     c00197f2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019795:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019799:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001979d:	0f b6 db             	movzx  ebx,bl
c00197a0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00197a3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00197a7:	83 ca 80             	or     edx,0xffffff80
c00197aa:	0f b6 d2             	movzx  edx,dl
c00197ad:	52                   	push   edx
c00197ae:	6a 0c                	push   0xc
c00197b0:	53                   	push   ebx
c00197b1:	56                   	push   esi
c00197b2:	e8 59 f9 ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197b7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00197bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197c4:	0f b6 c0             	movzx  eax,al
c00197c7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00197cb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197cd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00197d2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00197d6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00197da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00197de:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00197e6:	83 c4 2c             	add    esp,0x2c
c00197e9:	5b                   	pop    ebx
c00197ea:	5e                   	pop    esi
c00197eb:	5f                   	pop    edi
c00197ec:	5d                   	pop    ebp
c00197ed:	e9 1e f9 ff ff       	jmp    c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197f2:	3c 07                	cmp    al,0x7
c00197f4:	77 10                	ja     c0019806 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00197f6:	0f b6 db             	movzx  ebx,bl
c00197f9:	0f b6 d0             	movzx  edx,al
c00197fc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019804:	eb 2d                	jmp    c0019833 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019806:	3c 0d                	cmp    al,0xd
c0019808:	77 13                	ja     c001981d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001980a:	0f b6 db             	movzx  ebx,bl
c001980d:	0f b6 c0             	movzx  eax,al
c0019810:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019817:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001981b:	eb 16                	jmp    c0019833 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001981d:	3c 15                	cmp    al,0x15
c001981f:	77 14                	ja     c0019835 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019821:	0f b6 db             	movzx  ebx,bl
c0019824:	0f b6 c0             	movzx  eax,al
c0019827:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001982f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019833:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019835:	83 c4 1c             	add    esp,0x1c
c0019838:	5b                   	pop    ebx
c0019839:	5e                   	pop    esi
c001983a:	5f                   	pop    edi
c001983b:	5d                   	pop    ebp
c001983c:	c3                   	ret    
c001983d:	90                   	nop

c001983e <IDE::detect()>:
c001983e:	55                   	push   ebp
c001983f:	57                   	push   edi
c0019840:	56                   	push   esi
c0019841:	53                   	push   ebx
c0019842:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019848:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001984f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019856:	0f 85 97 02 00 00    	jne    c0019af3 <IDE::detect()+0x2b5>
c001985c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019863:	31 f6                	xor    esi,esi
c0019865:	31 ed                	xor    ebp,ebp
c0019867:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001986f:	89 e8                	mov    eax,ebp
c0019871:	c1 e0 06             	shl    eax,0x6
c0019874:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001987c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019880:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019884:	c1 e0 04             	shl    eax,0x4
c0019887:	83 c8 a0             	or     eax,0xffffffa0
c001988a:	0f b6 c0             	movzx  eax,al
c001988d:	50                   	push   eax
c001988e:	6a 06                	push   0x6
c0019890:	56                   	push   esi
c0019891:	53                   	push   ebx
c0019892:	e8 79 f8 ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019897:	83 c4 0c             	add    esp,0xc
c001989a:	6a 0c                	push   0xc
c001989c:	56                   	push   esi
c001989d:	53                   	push   ebx
c001989e:	e8 2d f9 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c00198a3:	83 c4 0c             	add    esp,0xc
c00198a6:	6a 0c                	push   0xc
c00198a8:	56                   	push   esi
c00198a9:	53                   	push   ebx
c00198aa:	e8 21 f9 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c00198af:	83 c4 0c             	add    esp,0xc
c00198b2:	6a 0c                	push   0xc
c00198b4:	56                   	push   esi
c00198b5:	53                   	push   ebx
c00198b6:	e8 15 f9 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c00198bb:	83 c4 0c             	add    esp,0xc
c00198be:	6a 0c                	push   0xc
c00198c0:	56                   	push   esi
c00198c1:	53                   	push   ebx
c00198c2:	e8 09 f9 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c00198c7:	68 ec 00 00 00       	push   0xec
c00198cc:	6a 07                	push   0x7
c00198ce:	56                   	push   esi
c00198cf:	53                   	push   ebx
c00198d0:	e8 3b f8 ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198d5:	83 c4 1c             	add    esp,0x1c
c00198d8:	6a 0c                	push   0xc
c00198da:	56                   	push   esi
c00198db:	53                   	push   ebx
c00198dc:	e8 ef f8 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c00198e1:	83 c4 0c             	add    esp,0xc
c00198e4:	6a 0c                	push   0xc
c00198e6:	56                   	push   esi
c00198e7:	53                   	push   ebx
c00198e8:	e8 e3 f8 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c00198ed:	83 c4 0c             	add    esp,0xc
c00198f0:	6a 0c                	push   0xc
c00198f2:	56                   	push   esi
c00198f3:	53                   	push   ebx
c00198f4:	e8 d7 f8 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c00198f9:	83 c4 0c             	add    esp,0xc
c00198fc:	6a 0c                	push   0xc
c00198fe:	56                   	push   esi
c00198ff:	53                   	push   ebx
c0019900:	e8 cb f8 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c0019905:	83 c4 0c             	add    esp,0xc
c0019908:	6a 0c                	push   0xc
c001990a:	56                   	push   esi
c001990b:	53                   	push   ebx
c001990c:	e8 bf f8 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c0019911:	83 c4 10             	add    esp,0x10
c0019914:	84 c0                	test   al,al
c0019916:	0f 84 5f 01 00 00    	je     c0019a7b <IDE::detect()+0x23d>
c001991c:	31 ff                	xor    edi,edi
c001991e:	50                   	push   eax
c001991f:	6a 0c                	push   0xc
c0019921:	56                   	push   esi
c0019922:	53                   	push   ebx
c0019923:	e8 a8 f8 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c0019928:	83 c4 10             	add    esp,0x10
c001992b:	a8 01                	test   al,0x1
c001992d:	0f 85 69 01 00 00    	jne    c0019a9c <IDE::detect()+0x25e>
c0019933:	84 c0                	test   al,al
c0019935:	78 04                	js     c001993b <IDE::detect()+0xfd>
c0019937:	a8 08                	test   al,0x8
c0019939:	75 23                	jne    c001995e <IDE::detect()+0x120>
c001993b:	47                   	inc    edi
c001993c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019942:	7e da                	jle    c001991e <IDE::detect()+0xe0>
c0019944:	83 ec 0c             	sub    esp,0xc
c0019947:	6a 32                	push   0x32
c0019949:	e8 96 a2 ff ff       	call   c0013be4 <milliTenthSleep(unsigned int)>
c001994e:	83 c4 10             	add    esp,0x10
c0019951:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019957:	75 c5                	jne    c001991e <IDE::detect()+0xe0>
c0019959:	e9 3e 01 00 00       	jmp    c0019a9c <IDE::detect()+0x25e>
c001995e:	31 c9                	xor    ecx,ecx
c0019960:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019964:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019968:	83 ec 0c             	sub    esp,0xc
c001996b:	68 80 00 00 00       	push   0x80
c0019970:	57                   	push   edi
c0019971:	6a 00                	push   0x0
c0019973:	56                   	push   esi
c0019974:	53                   	push   ebx
c0019975:	e8 f8 fd ff ff       	call   c0019772 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001997a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001997f:	89 e8                	mov    eax,ebp
c0019981:	89 d1                	mov    ecx,edx
c0019983:	c1 e0 06             	shl    eax,0x6
c0019986:	01 d8                	add    eax,ebx
c0019988:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001998f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019996:	89 f2                	mov    edx,esi
c0019998:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001999e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00199a2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00199a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199ac:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00199b3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00199bb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00199c2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00199ca:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00199d0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00199d7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00199dd:	8d 54 24 58          	lea    edx,[esp+0x58]
c00199e1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00199e5:	83 c4 20             	add    esp,0x20
c00199e8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00199eb:	83 c0 02             	add    eax,0x2
c00199ee:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00199f4:	83 c7 02             	add    edi,0x2
c00199f7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00199fa:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019a00:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019a04:	75 e2                	jne    c00199e8 <IDE::detect()+0x1aa>
c0019a06:	89 e8                	mov    eax,ebp
c0019a08:	c1 e0 06             	shl    eax,0x6
c0019a0b:	01 d8                	add    eax,ebx
c0019a0d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019a13:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019a1a:	66 c1 ea 09          	shr    dx,0x9
c0019a1e:	83 e2 01             	and    edx,0x1
c0019a21:	84 c9                	test   cl,cl
c0019a23:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019a29:	75 22                	jne    c0019a4d <IDE::detect()+0x20f>
c0019a2b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019a32:	74 46                	je     c0019a7a <IDE::detect()+0x23c>
c0019a34:	83 ec 0c             	sub    esp,0xc
c0019a37:	68 7c 01 00 00       	push   0x17c
c0019a3c:	e8 78 dd fe ff       	call   c00077b9 <malloc>
c0019a41:	89 c7                	mov    edi,eax
c0019a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a46:	e8 11 05 00 00       	call   c0019f5c <ATA::ATA()>
c0019a4b:	eb 17                	jmp    c0019a64 <IDE::detect()+0x226>
c0019a4d:	83 ec 0c             	sub    esp,0xc
c0019a50:	68 84 01 00 00       	push   0x184
c0019a55:	e8 5f dd fe ff       	call   c00077b9 <malloc>
c0019a5a:	89 c7                	mov    edi,eax
c0019a5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a5f:	e8 f0 0a 00 00       	call   c001a554 <ATAPI::ATAPI()>
c0019a64:	5a                   	pop    edx
c0019a65:	59                   	pop    ecx
c0019a66:	57                   	push   edi
c0019a67:	53                   	push   ebx
c0019a68:	e8 3f 20 ff ff       	call   c000baac <Device::addChild(Device*)>
c0019a6d:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a6f:	53                   	push   ebx
c0019a70:	55                   	push   ebp
c0019a71:	6a 00                	push   0x0
c0019a73:	57                   	push   edi
c0019a74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a77:	83 c4 20             	add    esp,0x20
c0019a7a:	45                   	inc    ebp
c0019a7b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a80:	74 0d                	je     c0019a8f <IDE::detect()+0x251>
c0019a82:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a8a:	e9 e0 fd ff ff       	jmp    c001986f <IDE::detect()+0x31>
c0019a8f:	4e                   	dec    esi
c0019a90:	74 61                	je     c0019af3 <IDE::detect()+0x2b5>
c0019a92:	be 01 00 00 00       	mov    esi,0x1
c0019a97:	e9 cb fd ff ff       	jmp    c0019867 <IDE::detect()+0x29>
c0019a9c:	50                   	push   eax
c0019a9d:	6a 04                	push   0x4
c0019a9f:	56                   	push   esi
c0019aa0:	53                   	push   ebx
c0019aa1:	e8 2a f7 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c0019aa6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019aaa:	83 c4 0c             	add    esp,0xc
c0019aad:	6a 05                	push   0x5
c0019aaf:	56                   	push   esi
c0019ab0:	53                   	push   ebx
c0019ab1:	e8 1a f7 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c0019ab6:	83 c4 10             	add    esp,0x10
c0019ab9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019abd:	80 fa 14             	cmp    dl,0x14
c0019ac0:	75 04                	jne    c0019ac6 <IDE::detect()+0x288>
c0019ac2:	3c eb                	cmp    al,0xeb
c0019ac4:	eb 07                	jmp    c0019acd <IDE::detect()+0x28f>
c0019ac6:	3c 96                	cmp    al,0x96
c0019ac8:	75 b1                	jne    c0019a7b <IDE::detect()+0x23d>
c0019aca:	80 fa 69             	cmp    dl,0x69
c0019acd:	75 ac                	jne    c0019a7b <IDE::detect()+0x23d>
c0019acf:	68 a1 00 00 00       	push   0xa1
c0019ad4:	6a 07                	push   0x7
c0019ad6:	56                   	push   esi
c0019ad7:	53                   	push   ebx
c0019ad8:	e8 33 f6 ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019add:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019ae4:	e8 fb a0 ff ff       	call   c0013be4 <milliTenthSleep(unsigned int)>
c0019ae9:	83 c4 10             	add    esp,0x10
c0019aec:	b1 01                	mov    cl,0x1
c0019aee:	e9 6d fe ff ff       	jmp    c0019960 <IDE::detect()+0x122>
c0019af3:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019af9:	5b                   	pop    ebx
c0019afa:	5e                   	pop    esi
c0019afb:	5f                   	pop    edi
c0019afc:	5d                   	pop    ebp
c0019afd:	c3                   	ret    

c0019afe <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019afe:	55                   	push   ebp
c0019aff:	57                   	push   edi
c0019b00:	56                   	push   esi
c0019b01:	53                   	push   ebx
c0019b02:	83 ec 1c             	sub    esp,0x1c
c0019b05:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b09:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019b0d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019b11:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019b15:	88 c3                	mov    bl,al
c0019b17:	84 c0                	test   al,al
c0019b19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b1d:	0f 84 81 00 00 00    	je     c0019ba4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b23:	83 ec 0c             	sub    esp,0xc
c0019b26:	68 6b f5 01 c0       	push   0xc001f56b
c0019b2b:	e8 3d 0b ff ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c0019b30:	83 c4 10             	add    esp,0x10
c0019b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b37:	3c 01                	cmp    al,0x1
c0019b39:	74 63                	je     c0019b9e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b3b:	3c 02                	cmp    al,0x2
c0019b3d:	75 53                	jne    c0019b92 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b3f:	01 f6                	add    esi,esi
c0019b41:	09 ee                	or     esi,ebp
c0019b43:	50                   	push   eax
c0019b44:	89 f0                	mov    eax,esi
c0019b46:	6a 01                	push   0x1
c0019b48:	0f b6 f0             	movzx  esi,al
c0019b4b:	c1 e6 06             	shl    esi,0x6
c0019b4e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b56:	50                   	push   eax
c0019b57:	57                   	push   edi
c0019b58:	e8 73 f6 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c0019b5d:	83 c4 10             	add    esp,0x10
c0019b60:	a8 01                	test   al,0x1
c0019b62:	74 02                	je     c0019b66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b64:	b3 07                	mov    bl,0x7
c0019b66:	a8 02                	test   al,0x2
c0019b68:	74 02                	je     c0019b6c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b6a:	b3 03                	mov    bl,0x3
c0019b6c:	a8 04                	test   al,0x4
c0019b6e:	74 02                	je     c0019b72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b70:	b3 14                	mov    bl,0x14
c0019b72:	a8 08                	test   al,0x8
c0019b74:	74 02                	je     c0019b78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b76:	b3 03                	mov    bl,0x3
c0019b78:	a8 10                	test   al,0x10
c0019b7a:	74 02                	je     c0019b7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b7c:	b3 15                	mov    bl,0x15
c0019b7e:	a8 20                	test   al,0x20
c0019b80:	74 02                	je     c0019b84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b82:	b3 03                	mov    bl,0x3
c0019b84:	a8 40                	test   al,0x40
c0019b86:	74 02                	je     c0019b8a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b88:	b3 16                	mov    bl,0x16
c0019b8a:	84 c0                	test   al,al
c0019b8c:	79 16                	jns    c0019ba4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b8e:	b3 0d                	mov    bl,0xd
c0019b90:	eb 12                	jmp    c0019ba4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b92:	3c 03                	cmp    al,0x3
c0019b94:	74 0c                	je     c0019ba2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b96:	3c 04                	cmp    al,0x4
c0019b98:	75 0a                	jne    c0019ba4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b9a:	b3 08                	mov    bl,0x8
c0019b9c:	eb 06                	jmp    c0019ba4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b9e:	b3 13                	mov    bl,0x13
c0019ba0:	eb 02                	jmp    c0019ba4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ba2:	b3 17                	mov    bl,0x17
c0019ba4:	83 c4 1c             	add    esp,0x1c
c0019ba7:	88 d8                	mov    al,bl
c0019ba9:	5b                   	pop    ebx
c0019baa:	5e                   	pop    esi
c0019bab:	5f                   	pop    edi
c0019bac:	5d                   	pop    ebp
c0019bad:	c3                   	ret    

c0019bae <IDE::polling(unsigned char, unsigned int)>:
c0019bae:	55                   	push   ebp
c0019baf:	bd 04 00 00 00       	mov    ebp,0x4
c0019bb4:	57                   	push   edi
c0019bb5:	56                   	push   esi
c0019bb6:	53                   	push   ebx
c0019bb7:	83 ec 0c             	sub    esp,0xc
c0019bba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019bbe:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019bc2:	0f b6 f3             	movzx  esi,bl
c0019bc5:	52                   	push   edx
c0019bc6:	6a 0c                	push   0xc
c0019bc8:	56                   	push   esi
c0019bc9:	57                   	push   edi
c0019bca:	e8 01 f6 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c0019bcf:	83 c4 10             	add    esp,0x10
c0019bd2:	4d                   	dec    ebp
c0019bd3:	75 ed                	jne    c0019bc2 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019bd5:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019bda:	50                   	push   eax
c0019bdb:	6a 0c                	push   0xc
c0019bdd:	56                   	push   esi
c0019bde:	57                   	push   edi
c0019bdf:	e8 ec f5 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c0019be4:	83 c4 10             	add    esp,0x10
c0019be7:	a8 01                	test   al,0x1
c0019be9:	75 17                	jne    c0019c02 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019beb:	a8 20                	test   al,0x20
c0019bed:	75 0f                	jne    c0019bfe <IDE::polling(unsigned char, unsigned int)+0x50>
c0019bef:	4b                   	dec    ebx
c0019bf0:	74 10                	je     c0019c02 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bf2:	84 c0                	test   al,al
c0019bf4:	78 e4                	js     c0019bda <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bf6:	a8 08                	test   al,0x8
c0019bf8:	74 e0                	je     c0019bda <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bfa:	31 c0                	xor    eax,eax
c0019bfc:	eb 06                	jmp    c0019c04 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019bfe:	b0 01                	mov    al,0x1
c0019c00:	eb 02                	jmp    c0019c04 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c02:	b0 02                	mov    al,0x2
c0019c04:	83 c4 0c             	add    esp,0xc
c0019c07:	5b                   	pop    ebx
c0019c08:	5e                   	pop    esi
c0019c09:	5f                   	pop    edi
c0019c0a:	5d                   	pop    ebp
c0019c0b:	c3                   	ret    

c0019c0c <SATABus::close(int, int, void*)>:
c0019c0c:	31 c0                	xor    eax,eax
c0019c0e:	c3                   	ret    
c0019c0f:	90                   	nop

c0019c10 <SATABus::detect()>:
c0019c10:	c3                   	ret    
c0019c11:	90                   	nop

c0019c12 <SATABus::SATABus()>:
c0019c12:	83 ec 0c             	sub    esp,0xc
c0019c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c19:	83 ec 08             	sub    esp,0x8
c0019c1c:	68 a4 f5 01 c0       	push   0xc001f5a4
c0019c21:	50                   	push   eax
c0019c22:	e8 c9 21 ff ff       	call   c000bdf0 <HardDiskController::HardDiskController(char const*)>
c0019c27:	83 c4 10             	add    esp,0x10
c0019c2a:	ba d0 f5 01 c0       	mov    edx,0xc001f5d0
c0019c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c33:	89 10                	mov    DWORD PTR [eax],edx
c0019c35:	83 ec 0c             	sub    esp,0xc
c0019c38:	6a 50                	push   0x50
c0019c3a:	e8 14 df fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019c3f:	83 c4 10             	add    esp,0x10
c0019c42:	89 c2                	mov    edx,eax
c0019c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c48:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c4e:	83 ec 0c             	sub    esp,0xc
c0019c51:	6a 50                	push   0x50
c0019c53:	e8 2d f6 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019c58:	83 c4 10             	add    esp,0x10
c0019c5b:	89 c2                	mov    edx,eax
c0019c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c61:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c67:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019c6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c70:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c7a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c80:	83 ec 0c             	sub    esp,0xc
c0019c83:	6a 03                	push   0x3
c0019c85:	6a 50                	push   0x50
c0019c87:	51                   	push   ecx
c0019c88:	52                   	push   edx
c0019c89:	50                   	push   eax
c0019c8a:	e8 63 ff fe ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c8f:	83 c4 20             	add    esp,0x20
c0019c92:	90                   	nop
c0019c93:	83 c4 0c             	add    esp,0xc
c0019c96:	c3                   	ret    
c0019c97:	90                   	nop

c0019c98 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c9c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019ca2:	09 c2                	or     edx,eax
c0019ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019cae:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019cb0:	31 c0                	xor    eax,eax
c0019cb2:	c1 e9 08             	shr    ecx,0x8
c0019cb5:	83 e1 0f             	and    ecx,0xf
c0019cb8:	39 c8                	cmp    eax,ecx
c0019cba:	74 0a                	je     c0019cc6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019cbc:	f6 c2 01             	test   dl,0x1
c0019cbf:	74 08                	je     c0019cc9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019cc1:	d1 ea                	shr    edx,1
c0019cc3:	40                   	inc    eax
c0019cc4:	eb f2                	jmp    c0019cb8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019cc6:	83 c8 ff             	or     eax,0xffffffff
c0019cc9:	c3                   	ret    

c0019cca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019cca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019cce:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019cd1:	89 c2                	mov    edx,eax
c0019cd3:	c1 ea 08             	shr    edx,0x8
c0019cd6:	83 e2 0f             	and    edx,0xf
c0019cd9:	fe ca                	dec    dl
c0019cdb:	75 31                	jne    c0019d0e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cdd:	83 e0 0f             	and    eax,0xf
c0019ce0:	3c 03                	cmp    al,0x3
c0019ce2:	75 2a                	jne    c0019d0e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ce4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019ce7:	b8 02 00 00 00       	mov    eax,0x2
c0019cec:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019cf2:	74 1c                	je     c0019d10 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cf4:	b8 04 00 00 00       	mov    eax,0x4
c0019cf9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019cff:	74 0f                	je     c0019d10 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d01:	31 c0                	xor    eax,eax
c0019d03:	83 fa 03             	cmp    edx,0x3
c0019d06:	0f 94 c0             	sete   al
c0019d09:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019d0d:	c3                   	ret    
c0019d0e:	31 c0                	xor    eax,eax
c0019d10:	c3                   	ret    
c0019d11:	90                   	nop

c0019d12 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d16:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d19:	0f ba e2 0f          	bt     edx,0xf
c0019d1d:	72 f7                	jb     c0019d16 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019d1f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d22:	83 ca 10             	or     edx,0x10
c0019d25:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d28:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d2b:	83 ca 01             	or     edx,0x1
c0019d2e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d31:	c3                   	ret    

c0019d32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d36:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d39:	83 e2 fe             	and    edx,0xfffffffe
c0019d3c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d3f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d42:	83 e2 ef             	and    edx,0xffffffef
c0019d45:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d48:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d4b:	0f ba e2 0e          	bt     edx,0xe
c0019d4f:	72 f7                	jb     c0019d48 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d51:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d54:	0f ba e2 0f          	bt     edx,0xf
c0019d58:	72 ee                	jb     c0019d48 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d5a:	c3                   	ret    
c0019d5b:	90                   	nop

c0019d5c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d5c:	55                   	push   ebp
c0019d5d:	57                   	push   edi
c0019d5e:	56                   	push   esi
c0019d5f:	53                   	push   ebx
c0019d60:	83 ec 1c             	sub    esp,0x1c
c0019d63:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d6b:	53                   	push   ebx
c0019d6c:	56                   	push   esi
c0019d6d:	e8 c0 ff ff ff       	call   c0019d32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d72:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d76:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d7c:	83 ec 0c             	sub    esp,0xc
c0019d7f:	c1 e5 0a             	shl    ebp,0xa
c0019d82:	01 e8                	add    eax,ebp
c0019d84:	89 03                	mov    DWORD PTR [ebx],eax
c0019d86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d88:	68 00 04 00 00       	push   0x400
c0019d8d:	6a 00                	push   0x0
c0019d8f:	50                   	push   eax
c0019d90:	e8 3b 67 fe ff       	call   c00004d0 <memset>
c0019d95:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d9b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d9f:	01 e8                	add    eax,ebp
c0019da1:	83 c4 1c             	add    esp,0x1c
c0019da4:	89 03                	mov    DWORD PTR [ebx],eax
c0019da6:	c1 e2 08             	shl    edx,0x8
c0019da9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019db0:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019db6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019dbc:	01 f8                	add    eax,edi
c0019dbe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019dc1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019dc4:	68 00 01 00 00       	push   0x100
c0019dc9:	6a 00                	push   0x0
c0019dcb:	50                   	push   eax
c0019dcc:	e8 ff 66 fe ff       	call   c00004d0 <memset>
c0019dd1:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019dd7:	01 fa                	add    edx,edi
c0019dd9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019ddd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019de0:	c1 e7 0d             	shl    edi,0xd
c0019de3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019dea:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019df0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019df6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dfa:	31 ff                	xor    edi,edi
c0019dfc:	83 c4 10             	add    esp,0x10
c0019dff:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019e05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e09:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019e0f:	83 c5 20             	add    ebp,0x20
c0019e12:	01 f8                	add    eax,edi
c0019e14:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e17:	52                   	push   edx
c0019e18:	68 00 01 00 00       	push   0x100
c0019e1d:	6a 00                	push   0x0
c0019e1f:	50                   	push   eax
c0019e20:	e8 ab 66 fe ff       	call   c00004d0 <memset>
c0019e25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e29:	83 c4 10             	add    esp,0x10
c0019e2c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019e32:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e39:	01 f8                	add    eax,edi
c0019e3b:	81 c7 00 01 00 00    	add    edi,0x100
c0019e41:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e44:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e4a:	75 b3                	jne    c0019dff <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e4c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e53:	50                   	push   eax
c0019e54:	50                   	push   eax
c0019e55:	53                   	push   ebx
c0019e56:	56                   	push   esi
c0019e57:	e8 b6 fe ff ff       	call   c0019d12 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e5c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e63:	83 c4 2c             	add    esp,0x2c
c0019e66:	5b                   	pop    ebx
c0019e67:	5e                   	pop    esi
c0019e68:	5f                   	pop    edi
c0019e69:	5d                   	pop    ebp
c0019e6a:	c3                   	ret    
c0019e6b:	90                   	nop

c0019e6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e6c:	55                   	push   ebp
c0019e6d:	57                   	push   edi
c0019e6e:	56                   	push   esi
c0019e6f:	53                   	push   ebx
c0019e70:	31 db                	xor    ebx,ebx
c0019e72:	83 ec 0c             	sub    esp,0xc
c0019e75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e79:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e7d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e80:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e86:	74 7a                	je     c0019f02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e88:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e8c:	89 d8                	mov    eax,ebx
c0019e8e:	c1 e0 07             	shl    eax,0x7
c0019e91:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e98:	55                   	push   ebp
c0019e99:	56                   	push   esi
c0019e9a:	e8 2b fe ff ff       	call   c0019cca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e9f:	5a                   	pop    edx
c0019ea0:	83 f8 01             	cmp    eax,0x1
c0019ea3:	59                   	pop    ecx
c0019ea4:	75 21                	jne    c0019ec7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019ea6:	50                   	push   eax
c0019ea7:	53                   	push   ebx
c0019ea8:	55                   	push   ebp
c0019ea9:	56                   	push   esi
c0019eaa:	e8 ad fe ff ff       	call   c0019d5c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019eaf:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019eb6:	e8 fe d8 fe ff       	call   c00077b9 <malloc>
c0019ebb:	89 c5                	mov    ebp,eax
c0019ebd:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ec0:	e8 43 0d 00 00       	call   c001ac08 <SATA::SATA()>
c0019ec5:	eb 24                	jmp    c0019eeb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019ec7:	83 f8 04             	cmp    eax,0x4
c0019eca:	75 36                	jne    c0019f02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ecc:	51                   	push   ecx
c0019ecd:	53                   	push   ebx
c0019ece:	55                   	push   ebp
c0019ecf:	56                   	push   esi
c0019ed0:	e8 87 fe ff ff       	call   c0019d5c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ed5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019edc:	e8 d8 d8 fe ff       	call   c00077b9 <malloc>
c0019ee1:	89 c5                	mov    ebp,eax
c0019ee3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ee6:	e8 79 10 00 00       	call   c001af64 <SATAPI::SATAPI()>
c0019eeb:	58                   	pop    eax
c0019eec:	5a                   	pop    edx
c0019eed:	55                   	push   ebp
c0019eee:	56                   	push   esi
c0019eef:	e8 b8 1b ff ff       	call   c000baac <Device::addChild(Device*)>
c0019ef4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ef7:	56                   	push   esi
c0019ef8:	6a 00                	push   0x0
c0019efa:	53                   	push   ebx
c0019efb:	55                   	push   ebp
c0019efc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019eff:	83 c4 20             	add    esp,0x20
c0019f02:	d1 ef                	shr    edi,1
c0019f04:	43                   	inc    ebx
c0019f05:	83 fb 20             	cmp    ebx,0x20
c0019f08:	0f 85 72 ff ff ff    	jne    c0019e80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019f0e:	83 c4 0c             	add    esp,0xc
c0019f11:	5b                   	pop    ebx
c0019f12:	5e                   	pop    esi
c0019f13:	5f                   	pop    edi
c0019f14:	5d                   	pop    ebp
c0019f15:	c3                   	ret    

c0019f16 <SATABus::open(int, int, void*)>:
c0019f16:	83 ec 14             	sub    esp,0x14
c0019f19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f1d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019f23:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019f29:	52                   	push   edx
c0019f2a:	50                   	push   eax
c0019f2b:	e8 3c ff ff ff       	call   c0019e6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019f30:	31 c0                	xor    eax,eax
c0019f32:	83 c4 1c             	add    esp,0x1c
c0019f35:	c3                   	ret    

c0019f36 <ATA::close(int, int, void*)>:
c0019f36:	83 ec 0c             	sub    esp,0xc
c0019f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f3d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f43:	85 c0                	test   eax,eax
c0019f45:	74 0c                	je     c0019f53 <ATA::close(int, int, void*)+0x1d>
c0019f47:	83 ec 0c             	sub    esp,0xc
c0019f4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f4c:	50                   	push   eax
c0019f4d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f50:	83 c4 10             	add    esp,0x10
c0019f53:	31 c0                	xor    eax,eax
c0019f55:	83 c4 0c             	add    esp,0xc
c0019f58:	c3                   	ret    
c0019f59:	90                   	nop

c0019f5a <ATA::powerSaving(PowerSavingLevel)>:
c0019f5a:	c3                   	ret    
c0019f5b:	90                   	nop

c0019f5c <ATA::ATA()>:
c0019f5c:	83 ec 0c             	sub    esp,0xc
c0019f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f63:	83 ec 04             	sub    esp,0x4
c0019f66:	68 00 02 00 00       	push   0x200
c0019f6b:	68 9d f6 01 c0       	push   0xc001f69d
c0019f70:	50                   	push   eax
c0019f71:	e8 04 1f ff ff       	call   c000be7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f76:	83 c4 10             	add    esp,0x10
c0019f79:	ba 10 f6 01 c0       	mov    edx,0xc001f610
c0019f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f82:	89 10                	mov    DWORD PTR [eax],edx
c0019f84:	90                   	nop
c0019f85:	83 c4 0c             	add    esp,0xc
c0019f88:	c3                   	ret    
c0019f89:	90                   	nop

c0019f8a <ATA::flush(bool)>:
c0019f8a:	53                   	push   ebx
c0019f8b:	83 ec 08             	sub    esp,0x8
c0019f8e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f97:	19 c0                	sbb    eax,eax
c0019f99:	83 e0 fd             	and    eax,0xfffffffd
c0019f9c:	05 ea 00 00 00       	add    eax,0xea
c0019fa1:	50                   	push   eax
c0019fa2:	6a 07                	push   0x7
c0019fa4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fab:	50                   	push   eax
c0019fac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fb2:	e8 59 f1 ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fb7:	83 c4 0c             	add    esp,0xc
c0019fba:	6a 00                	push   0x0
c0019fbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fc3:	50                   	push   eax
c0019fc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fca:	e8 df fb ff ff       	call   c0019bae <IDE::polling(unsigned char, unsigned int)>
c0019fcf:	83 c4 18             	add    esp,0x18
c0019fd2:	5b                   	pop    ebx
c0019fd3:	c3                   	ret    

c0019fd4 <ATA::readyForCommand()>:
c0019fd4:	56                   	push   esi
c0019fd5:	53                   	push   ebx
c0019fd6:	53                   	push   ebx
c0019fd7:	31 db                	xor    ebx,ebx
c0019fd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fdd:	51                   	push   ecx
c0019fde:	6a 0c                	push   0xc
c0019fe0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019fe7:	50                   	push   eax
c0019fe8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019fee:	e8 dd f1 ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	a8 88                	test   al,0x88
c0019ff8:	74 1f                	je     c001a019 <ATA::readyForCommand()+0x45>
c0019ffa:	43                   	inc    ebx
c0019ffb:	83 fb 63             	cmp    ebx,0x63
c0019ffe:	7e dd                	jle    c0019fdd <ATA::readyForCommand()+0x9>
c001a000:	83 ec 0c             	sub    esp,0xc
c001a003:	6a 0a                	push   0xa
c001a005:	e8 da 9b ff ff       	call   c0013be4 <milliTenthSleep(unsigned int)>
c001a00a:	83 c4 10             	add    esp,0x10
c001a00d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a013:	75 c8                	jne    c0019fdd <ATA::readyForCommand()+0x9>
c001a015:	31 c0                	xor    eax,eax
c001a017:	eb 02                	jmp    c001a01b <ATA::readyForCommand()+0x47>
c001a019:	b0 01                	mov    al,0x1
c001a01b:	5a                   	pop    edx
c001a01c:	5b                   	pop    ebx
c001a01d:	5e                   	pop    esi
c001a01e:	c3                   	ret    
c001a01f:	90                   	nop

c001a020 <ATA::access(unsigned long long, int, void*, bool)>:
c001a020:	55                   	push   ebp
c001a021:	57                   	push   edi
c001a022:	56                   	push   esi
c001a023:	53                   	push   ebx
c001a024:	83 ec 2c             	sub    esp,0x2c
c001a027:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a02b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a02f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a033:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a037:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a03b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a03f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a043:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a049:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a04d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a053:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a057:	c1 e0 06             	shl    eax,0x6
c001a05a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a062:	74 5d                	je     c001a0c1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a064:	89 fa                	mov    edx,edi
c001a066:	89 f0                	mov    eax,esi
c001a068:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a06c:	c1 ea 1c             	shr    edx,0x1c
c001a06f:	89 d1                	mov    ecx,edx
c001a071:	09 c1                	or     ecx,eax
c001a073:	74 25                	je     c001a09a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a075:	31 ed                	xor    ebp,ebp
c001a077:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a07e:	89 fa                	mov    edx,edi
c001a080:	89 f0                	mov    eax,esi
c001a082:	0f ad d0             	shrd   eax,edx,cl
c001a085:	d3 ea                	shr    edx,cl
c001a087:	f6 c1 20             	test   cl,0x20
c001a08a:	74 02                	je     c001a08e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a08c:	89 d0                	mov    eax,edx
c001a08e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a092:	45                   	inc    ebp
c001a093:	83 fd 06             	cmp    ebp,0x6
c001a096:	75 df                	jne    c001a077 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a098:	eb 76                	jmp    c001a110 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a09a:	89 f0                	mov    eax,esi
c001a09c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a0a1:	89 fa                	mov    edx,edi
c001a0a3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0aa:	0f ac d0 10          	shrd   eax,edx,0x10
c001a0ae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0b3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a0b7:	c1 ee 18             	shr    esi,0x18
c001a0ba:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a0bf:	eb 56                	jmp    c001a117 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0c1:	6a 00                	push   0x0
c001a0c3:	6a 3f                	push   0x3f
c001a0c5:	57                   	push   edi
c001a0c6:	56                   	push   esi
c001a0c7:	e8 74 22 00 00       	call   c001c340 <__umoddi3>
c001a0cc:	83 c4 10             	add    esp,0x10
c001a0cf:	40                   	inc    eax
c001a0d0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a0d4:	6a 00                	push   0x0
c001a0d6:	68 f0 03 00 00       	push   0x3f0
c001a0db:	57                   	push   edi
c001a0dc:	56                   	push   esi
c001a0dd:	e8 5e 21 00 00       	call   c001c240 <__udivdi3>
c001a0e2:	83 c4 10             	add    esp,0x10
c001a0e5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a0ea:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0f1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0f6:	6a 00                	push   0x0
c001a0f8:	6a 3f                	push   0x3f
c001a0fa:	57                   	push   edi
c001a0fb:	56                   	push   esi
c001a0fc:	e8 3f 21 00 00       	call   c001c240 <__udivdi3>
c001a101:	83 c4 10             	add    esp,0x10
c001a104:	89 c6                	mov    esi,eax
c001a106:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a10b:	83 e6 0f             	and    esi,0xf
c001a10e:	eb 07                	jmp    c001a117 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a110:	31 f6                	xor    esi,esi
c001a112:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a117:	bf 01 00 00 00       	mov    edi,0x1
c001a11c:	50                   	push   eax
c001a11d:	6a 00                	push   0x0
c001a11f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a126:	50                   	push   eax
c001a127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a12b:	e8 ee f1 ff ff       	call   c001931e <IDE::enableIRQs(unsigned char, bool)>
c001a130:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a133:	e8 9c fe ff ff       	call   c0019fd4 <ATA::readyForCommand()>
c001a138:	83 c4 10             	add    esp,0x10
c001a13b:	84 c0                	test   al,al
c001a13d:	0f 84 4e 02 00 00    	je     c001a391 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a143:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a149:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a14f:	c1 e0 04             	shl    eax,0x4
c001a152:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a159:	09 c6                	or     esi,eax
c001a15b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a160:	75 05                	jne    c001a167 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a162:	83 ce a0             	or     esi,0xffffffa0
c001a165:	eb 03                	jmp    c001a16a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a167:	83 ce e0             	or     esi,0xffffffe0
c001a16a:	89 f0                	mov    eax,esi
c001a16c:	0f b6 f0             	movzx  esi,al
c001a16f:	56                   	push   esi
c001a170:	6a 06                	push   0x6
c001a172:	51                   	push   ecx
c001a173:	52                   	push   edx
c001a174:	e8 97 ef ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a179:	83 c4 10             	add    esp,0x10
c001a17c:	6a 00                	push   0x0
c001a17e:	6a 01                	push   0x1
c001a180:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a187:	50                   	push   eax
c001a188:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a18e:	e8 7d ef ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a193:	83 c4 10             	add    esp,0x10
c001a196:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a19b:	75 6e                	jne    c001a20b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a19d:	6a 00                	push   0x0
c001a19f:	6a 08                	push   0x8
c001a1a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a8:	50                   	push   eax
c001a1a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1af:	e8 5c ef ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a1b9:	50                   	push   eax
c001a1ba:	6a 09                	push   0x9
c001a1bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c3:	50                   	push   eax
c001a1c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ca:	e8 41 ef ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1cf:	83 c4 20             	add    esp,0x20
c001a1d2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a1d7:	50                   	push   eax
c001a1d8:	6a 0a                	push   0xa
c001a1da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e1:	50                   	push   eax
c001a1e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e8:	e8 23 ef ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ed:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a1f2:	50                   	push   eax
c001a1f3:	6a 0b                	push   0xb
c001a1f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1fc:	50                   	push   eax
c001a1fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a203:	e8 08 ef ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a208:	83 c4 20             	add    esp,0x20
c001a20b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a210:	50                   	push   eax
c001a211:	6a 02                	push   0x2
c001a213:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a21a:	50                   	push   eax
c001a21b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a221:	e8 ea ee ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a226:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a22b:	50                   	push   eax
c001a22c:	6a 03                	push   0x3
c001a22e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a235:	50                   	push   eax
c001a236:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a23c:	e8 cf ee ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a241:	83 c4 20             	add    esp,0x20
c001a244:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a249:	50                   	push   eax
c001a24a:	6a 04                	push   0x4
c001a24c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a253:	50                   	push   eax
c001a254:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a25a:	e8 b1 ee ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a25f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a264:	50                   	push   eax
c001a265:	6a 05                	push   0x5
c001a267:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a26e:	50                   	push   eax
c001a26f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a275:	e8 96 ee ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a27a:	83 c4 20             	add    esp,0x20
c001a27d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a282:	0f 94 c0             	sete   al
c001a285:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a28a:	74 09                	je     c001a295 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a28c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a293:	eb 07                	jmp    c001a29c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a295:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a29c:	0f b6 c0             	movzx  eax,al
c001a29f:	50                   	push   eax
c001a2a0:	6a 07                	push   0x7
c001a2a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2a9:	50                   	push   eax
c001a2aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2b0:	e8 5b ee ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2b5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a2b9:	83 c4 10             	add    esp,0x10
c001a2bc:	85 f6                	test   esi,esi
c001a2be:	0f 84 ae 00 00 00    	je     c001a372 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a2c4:	50                   	push   eax
c001a2c5:	6a 01                	push   0x1
c001a2c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2ce:	50                   	push   eax
c001a2cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2d5:	e8 d4 f8 ff ff       	call   c0019bae <IDE::polling(unsigned char, unsigned int)>
c001a2da:	83 c4 10             	add    esp,0x10
c001a2dd:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a2e3:	84 c0                	test   al,al
c001a2e5:	74 20                	je     c001a307 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a2e7:	0f b6 f8             	movzx  edi,al
c001a2ea:	0f b6 d2             	movzx  edx,dl
c001a2ed:	57                   	push   edi
c001a2ee:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a2f5:	50                   	push   eax
c001a2f6:	52                   	push   edx
c001a2f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2fd:	e8 fc f7 ff ff       	call   c0019afe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a302:	e9 87 00 00 00       	jmp    c001a38e <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a307:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a30c:	74 33                	je     c001a341 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a30e:	31 ed                	xor    ebp,ebp
c001a310:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a314:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a318:	50                   	push   eax
c001a319:	50                   	push   eax
c001a31a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a321:	50                   	push   eax
c001a322:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a328:	e8 d1 ed ff ff       	call   c00190fe <IDE::getBase(unsigned char)>
c001a32d:	89 c2                	mov    edx,eax
c001a32f:	89 f8                	mov    eax,edi
c001a331:	66 ef                	out    dx,ax
c001a333:	45                   	inc    ebp
c001a334:	83 c4 10             	add    esp,0x10
c001a337:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a33d:	75 d1                	jne    c001a310 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a33f:	eb 23                	jmp    c001a364 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a341:	0f b6 d2             	movzx  edx,dl
c001a344:	51                   	push   ecx
c001a345:	51                   	push   ecx
c001a346:	52                   	push   edx
c001a347:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a34d:	e8 ac ed ff ff       	call   c00190fe <IDE::getBase(unsigned char)>
c001a352:	b9 00 01 00 00       	mov    ecx,0x100
c001a357:	89 c2                	mov    edx,eax
c001a359:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a35d:	fc                   	cld    
c001a35e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a361:	83 c4 10             	add    esp,0x10
c001a364:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a36c:	4e                   	dec    esi
c001a36d:	e9 4a ff ff ff       	jmp    c001a2bc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a372:	31 ff                	xor    edi,edi
c001a374:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a379:	74 16                	je     c001a391 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a37b:	50                   	push   eax
c001a37c:	50                   	push   eax
c001a37d:	31 c0                	xor    eax,eax
c001a37f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a384:	0f 94 c0             	sete   al
c001a387:	50                   	push   eax
c001a388:	53                   	push   ebx
c001a389:	e8 fc fb ff ff       	call   c0019f8a <ATA::flush(bool)>
c001a38e:	83 c4 10             	add    esp,0x10
c001a391:	83 c4 2c             	add    esp,0x2c
c001a394:	89 f8                	mov    eax,edi
c001a396:	5b                   	pop    ebx
c001a397:	5e                   	pop    esi
c001a398:	5f                   	pop    edi
c001a399:	5d                   	pop    ebp
c001a39a:	c3                   	ret    
c001a39b:	90                   	nop

c001a39c <ATA::read(unsigned long long, int, void*)>:
c001a39c:	57                   	push   edi
c001a39d:	b8 04 00 00 00       	mov    eax,0x4
c001a3a2:	56                   	push   esi
c001a3a3:	53                   	push   ebx
c001a3a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3a8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3ac:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3b3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3b7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3bd:	77 25                	ja     c001a3e4 <ATA::read(unsigned long long, int, void*)+0x48>
c001a3bf:	b8 06 00 00 00       	mov    eax,0x6
c001a3c4:	85 f6                	test   esi,esi
c001a3c6:	74 1c                	je     c001a3e4 <ATA::read(unsigned long long, int, void*)+0x48>
c001a3c8:	50                   	push   eax
c001a3c9:	50                   	push   eax
c001a3ca:	6a 00                	push   0x0
c001a3cc:	56                   	push   esi
c001a3cd:	52                   	push   edx
c001a3ce:	53                   	push   ebx
c001a3cf:	51                   	push   ecx
c001a3d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3d4:	e8 47 fc ff ff       	call   c001a020 <ATA::access(unsigned long long, int, void*, bool)>
c001a3d9:	83 c4 20             	add    esp,0x20
c001a3dc:	85 c0                	test   eax,eax
c001a3de:	0f 95 c0             	setne  al
c001a3e1:	0f b6 c0             	movzx  eax,al
c001a3e4:	5b                   	pop    ebx
c001a3e5:	5e                   	pop    esi
c001a3e6:	5f                   	pop    edi
c001a3e7:	c3                   	ret    

c001a3e8 <ATA::write(unsigned long long, int, void*)>:
c001a3e8:	57                   	push   edi
c001a3e9:	b8 04 00 00 00       	mov    eax,0x4
c001a3ee:	56                   	push   esi
c001a3ef:	53                   	push   ebx
c001a3f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3f8:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3ff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a403:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a409:	77 25                	ja     c001a430 <ATA::write(unsigned long long, int, void*)+0x48>
c001a40b:	b8 06 00 00 00       	mov    eax,0x6
c001a410:	85 f6                	test   esi,esi
c001a412:	74 1c                	je     c001a430 <ATA::write(unsigned long long, int, void*)+0x48>
c001a414:	50                   	push   eax
c001a415:	50                   	push   eax
c001a416:	6a 01                	push   0x1
c001a418:	56                   	push   esi
c001a419:	52                   	push   edx
c001a41a:	53                   	push   ebx
c001a41b:	51                   	push   ecx
c001a41c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a420:	e8 fb fb ff ff       	call   c001a020 <ATA::access(unsigned long long, int, void*, bool)>
c001a425:	83 c4 20             	add    esp,0x20
c001a428:	85 c0                	test   eax,eax
c001a42a:	0f 95 c0             	setne  al
c001a42d:	0f b6 c0             	movzx  eax,al
c001a430:	5b                   	pop    ebx
c001a431:	5e                   	pop    esi
c001a432:	5f                   	pop    edi
c001a433:	c3                   	ret    

c001a434 <ATA::detectCHS()>:
c001a434:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a438:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a43e:	c1 e0 06             	shl    eax,0x6
c001a441:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a447:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a451:	c7 44 24 04 f4 f5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f5f4
c001a459:	e9 91 5e ff ff       	jmp    c00102ef <KePanic(char const*)>

c001a45e <ATA::open(int, int, void*)>:
c001a45e:	53                   	push   ebx
c001a45f:	83 ec 08             	sub    esp,0x8
c001a462:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a466:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a46a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a46e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a474:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a47a:	c1 e0 06             	shl    eax,0x6
c001a47d:	01 d0                	add    eax,edx
c001a47f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a486:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a48c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a493:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a49d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a4a3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a4aa:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a4b1:	75 0c                	jne    c001a4bf <ATA::open(int, int, void*)+0x61>
c001a4b3:	83 ec 0c             	sub    esp,0xc
c001a4b6:	53                   	push   ebx
c001a4b7:	e8 78 ff ff ff       	call   c001a434 <ATA::detectCHS()>
c001a4bc:	83 c4 10             	add    esp,0x10
c001a4bf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a4c5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a4cb:	c1 e0 06             	shl    eax,0x6
c001a4ce:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a4d5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a4df:	d1 e8                	shr    eax,1
c001a4e1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a4e7:	6a 04                	push   0x4
c001a4e9:	6a 0c                	push   0xc
c001a4eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4f2:	50                   	push   eax
c001a4f3:	52                   	push   edx
c001a4f4:	e8 17 ec ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4f9:	90                   	nop
c001a4fa:	90                   	nop
c001a4fb:	6a 00                	push   0x0
c001a4fd:	6a 0c                	push   0xc
c001a4ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a506:	50                   	push   eax
c001a507:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a50d:	e8 fe eb ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a512:	83 c4 14             	add    esp,0x14
c001a515:	53                   	push   ebx
c001a516:	e8 c7 19 ff ff       	call   c000bee2 <PhysicalDisk::startCache()>
c001a51b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a51e:	e8 77 2a ff ff       	call   c000cf9a <createPartitionsForDisk(PhysicalDisk*)>
c001a523:	31 c0                	xor    eax,eax
c001a525:	83 c4 18             	add    esp,0x18
c001a528:	5b                   	pop    ebx
c001a529:	c3                   	ret    

c001a52a <ATAPI::write(unsigned long long, int, void*)>:
c001a52a:	b8 03 00 00 00       	mov    eax,0x3
c001a52f:	c3                   	ret    

c001a530 <ATAPI::close(int, int, void*)>:
c001a530:	83 ec 0c             	sub    esp,0xc
c001a533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a537:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a53d:	85 c0                	test   eax,eax
c001a53f:	74 0c                	je     c001a54d <ATAPI::close(int, int, void*)+0x1d>
c001a541:	83 ec 0c             	sub    esp,0xc
c001a544:	8b 10                	mov    edx,DWORD PTR [eax]
c001a546:	50                   	push   eax
c001a547:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	31 c0                	xor    eax,eax
c001a54f:	83 c4 0c             	add    esp,0xc
c001a552:	c3                   	ret    
c001a553:	90                   	nop

c001a554 <ATAPI::ATAPI()>:
c001a554:	83 ec 0c             	sub    esp,0xc
c001a557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a55b:	83 ec 04             	sub    esp,0x4
c001a55e:	68 00 08 00 00       	push   0x800
c001a563:	68 3d f7 01 c0       	push   0xc001f73d
c001a568:	50                   	push   eax
c001a569:	e8 0c 19 ff ff       	call   c000be7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a56e:	83 c4 10             	add    esp,0x10
c001a571:	ba 58 f6 01 c0       	mov    edx,0xc001f658
c001a576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a57a:	89 10                	mov    DWORD PTR [eax],edx
c001a57c:	90                   	nop
c001a57d:	83 c4 0c             	add    esp,0xc
c001a580:	c3                   	ret    
c001a581:	90                   	nop

c001a582 <ATAPI::readyForCommand()>:
c001a582:	56                   	push   esi
c001a583:	53                   	push   ebx
c001a584:	53                   	push   ebx
c001a585:	31 db                	xor    ebx,ebx
c001a587:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a58b:	51                   	push   ecx
c001a58c:	6a 0c                	push   0xc
c001a58e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a595:	50                   	push   eax
c001a596:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a59c:	e8 2f ec ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c001a5a1:	83 c4 10             	add    esp,0x10
c001a5a4:	a8 88                	test   al,0x88
c001a5a6:	74 25                	je     c001a5cd <ATAPI::readyForCommand()+0x4b>
c001a5a8:	43                   	inc    ebx
c001a5a9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a5af:	7e da                	jle    c001a58b <ATAPI::readyForCommand()+0x9>
c001a5b1:	83 ec 0c             	sub    esp,0xc
c001a5b4:	68 5e 01 00 00       	push   0x15e
c001a5b9:	e8 26 96 ff ff       	call   c0013be4 <milliTenthSleep(unsigned int)>
c001a5be:	83 c4 10             	add    esp,0x10
c001a5c1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a5c7:	75 c2                	jne    c001a58b <ATAPI::readyForCommand()+0x9>
c001a5c9:	31 c0                	xor    eax,eax
c001a5cb:	eb 02                	jmp    c001a5cf <ATAPI::readyForCommand()+0x4d>
c001a5cd:	b0 01                	mov    al,0x1
c001a5cf:	5a                   	pop    edx
c001a5d0:	5b                   	pop    ebx
c001a5d1:	5e                   	pop    esi
c001a5d2:	c3                   	ret    
c001a5d3:	90                   	nop

c001a5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a5d4:	55                   	push   ebp
c001a5d5:	57                   	push   edi
c001a5d6:	56                   	push   esi
c001a5d7:	53                   	push   ebx
c001a5d8:	83 ec 20             	sub    esp,0x20
c001a5db:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a5df:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a5e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a5e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a5eb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a5ef:	6a 01                	push   0x1
c001a5f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5f8:	50                   	push   eax
c001a5f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5ff:	e8 1a ed ff ff       	call   c001931e <IDE::enableIRQs(unsigned char, bool)>
c001a604:	5e                   	pop    esi
c001a605:	58                   	pop    eax
c001a606:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a60d:	50                   	push   eax
c001a60e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a614:	e8 d1 ea ff ff       	call   c00190ea <IDE::prepareInterrupt(unsigned char)>
c001a619:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a61c:	e8 61 ff ff ff       	call   c001a582 <ATAPI::readyForCommand()>
c001a621:	83 c4 10             	add    esp,0x10
c001a624:	84 c0                	test   al,al
c001a626:	75 0a                	jne    c001a632 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a628:	bb 01 00 00 00       	mov    ebx,0x1
c001a62d:	e9 57 02 00 00       	jmp    c001a889 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a632:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a638:	c1 e0 04             	shl    eax,0x4
c001a63b:	0f b6 c0             	movzx  eax,al
c001a63e:	50                   	push   eax
c001a63f:	6a 06                	push   0x6
c001a641:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a648:	50                   	push   eax
c001a649:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a64f:	e8 bc ea ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a654:	6a 00                	push   0x0
c001a656:	6a 01                	push   0x1
c001a658:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a65f:	50                   	push   eax
c001a660:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a666:	e8 a5 ea ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a66b:	83 c4 20             	add    esp,0x20
c001a66e:	0f b6 c3             	movzx  eax,bl
c001a671:	0f b6 df             	movzx  ebx,bh
c001a674:	50                   	push   eax
c001a675:	6a 04                	push   0x4
c001a677:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a67e:	50                   	push   eax
c001a67f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a685:	e8 86 ea ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a68a:	53                   	push   ebx
c001a68b:	6a 05                	push   0x5
c001a68d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a694:	50                   	push   eax
c001a695:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a69b:	e8 70 ea ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6a0:	83 c4 20             	add    esp,0x20
c001a6a3:	68 a0 00 00 00       	push   0xa0
c001a6a8:	6a 07                	push   0x7
c001a6aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6b1:	50                   	push   eax
c001a6b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6b8:	e8 53 ea ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6bd:	83 c4 0c             	add    esp,0xc
c001a6c0:	6a 01                	push   0x1
c001a6c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6c9:	50                   	push   eax
c001a6ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6d0:	e8 d9 f4 ff ff       	call   c0019bae <IDE::polling(unsigned char, unsigned int)>
c001a6d5:	83 c4 10             	add    esp,0x10
c001a6d8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a6de:	84 c0                	test   al,al
c001a6e0:	74 23                	je     c001a705 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a6e2:	0f b6 d8             	movzx  ebx,al
c001a6e5:	0f b6 d2             	movzx  edx,dl
c001a6e8:	53                   	push   ebx
c001a6e9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a6f0:	50                   	push   eax
c001a6f1:	52                   	push   edx
c001a6f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6f8:	e8 01 f4 ff ff       	call   c0019afe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a6fd:	83 c4 10             	add    esp,0x10
c001a700:	e9 84 01 00 00       	jmp    c001a889 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a705:	0f b6 d2             	movzx  edx,dl
c001a708:	53                   	push   ebx
c001a709:	53                   	push   ebx
c001a70a:	52                   	push   edx
c001a70b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a711:	e8 e8 e9 ff ff       	call   c00190fe <IDE::getBase(unsigned char)>
c001a716:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a71a:	b9 06 00 00 00       	mov    ecx,0x6
c001a71f:	89 c2                	mov    edx,eax
c001a721:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a724:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a728:	83 c4 10             	add    esp,0x10
c001a72b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a731:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a738:	85 db                	test   ebx,ebx
c001a73a:	0f 84 ec 00 00 00    	je     c001a82c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a740:	51                   	push   ecx
c001a741:	51                   	push   ecx
c001a742:	52                   	push   edx
c001a743:	50                   	push   eax
c001a744:	e8 35 eb ff ff       	call   c001927e <IDE::waitInterrupt(unsigned char)>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	84 c0                	test   al,al
c001a74e:	0f 84 d4 fe ff ff    	je     c001a628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a754:	56                   	push   esi
c001a755:	56                   	push   esi
c001a756:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a75d:	50                   	push   eax
c001a75e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a764:	e8 81 e9 ff ff       	call   c00190ea <IDE::prepareInterrupt(unsigned char)>
c001a769:	83 c4 0c             	add    esp,0xc
c001a76c:	6a 04                	push   0x4
c001a76e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a775:	50                   	push   eax
c001a776:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a77c:	e8 4f ea ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c001a781:	83 c4 0c             	add    esp,0xc
c001a784:	89 c6                	mov    esi,eax
c001a786:	6a 05                	push   0x5
c001a788:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a78f:	50                   	push   eax
c001a790:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a796:	e8 35 ea ff ff       	call   c00191d0 <IDE::read(unsigned char, unsigned char)>
c001a79b:	89 f1                	mov    ecx,esi
c001a79d:	0f b6 c0             	movzx  eax,al
c001a7a0:	0f b6 f1             	movzx  esi,cl
c001a7a3:	c1 e0 08             	shl    eax,0x8
c001a7a6:	09 c6                	or     esi,eax
c001a7a8:	d1 fe                	sar    esi,1
c001a7aa:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a7ae:	83 c4 10             	add    esp,0x10
c001a7b1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a7b6:	74 41                	je     c001a7f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a7b8:	31 c9                	xor    ecx,ecx
c001a7ba:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7c0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7c7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a7cb:	75 0a                	jne    c001a7d7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a7cd:	01 c9                	add    ecx,ecx
c001a7cf:	01 cd                	add    ebp,ecx
c001a7d1:	4b                   	dec    ebx
c001a7d2:	e9 54 ff ff ff       	jmp    c001a72b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a7d7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a7dc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a7e0:	51                   	push   ecx
c001a7e1:	51                   	push   ecx
c001a7e2:	52                   	push   edx
c001a7e3:	50                   	push   eax
c001a7e4:	e8 15 e9 ff ff       	call   c00190fe <IDE::getBase(unsigned char)>
c001a7e9:	89 c2                	mov    edx,eax
c001a7eb:	89 f0                	mov    eax,esi
c001a7ed:	66 ef                	out    dx,ax
c001a7ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a7f3:	83 c4 10             	add    esp,0x10
c001a7f6:	41                   	inc    ecx
c001a7f7:	eb c1                	jmp    c001a7ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a7f9:	31 f6                	xor    esi,esi
c001a7fb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a801:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a808:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a80c:	75 06                	jne    c001a814 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a80e:	01 f6                	add    esi,esi
c001a810:	01 f5                	add    ebp,esi
c001a812:	eb bd                	jmp    c001a7d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a814:	51                   	push   ecx
c001a815:	51                   	push   ecx
c001a816:	52                   	push   edx
c001a817:	50                   	push   eax
c001a818:	e8 e1 e8 ff ff       	call   c00190fe <IDE::getBase(unsigned char)>
c001a81d:	89 c2                	mov    edx,eax
c001a81f:	66 ed                	in     ax,dx
c001a821:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a826:	83 c4 10             	add    esp,0x10
c001a829:	46                   	inc    esi
c001a82a:	eb cf                	jmp    c001a7fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a82c:	51                   	push   ecx
c001a82d:	51                   	push   ecx
c001a82e:	52                   	push   edx
c001a82f:	50                   	push   eax
c001a830:	e8 49 ea ff ff       	call   c001927e <IDE::waitInterrupt(unsigned char)>
c001a835:	83 c4 10             	add    esp,0x10
c001a838:	84 c0                	test   al,al
c001a83a:	0f 84 e8 fd ff ff    	je     c001a628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a840:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a845:	52                   	push   edx
c001a846:	52                   	push   edx
c001a847:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a84e:	50                   	push   eax
c001a84f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a855:	e8 90 e8 ff ff       	call   c00190ea <IDE::prepareInterrupt(unsigned char)>
c001a85a:	83 c4 10             	add    esp,0x10
c001a85d:	50                   	push   eax
c001a85e:	50                   	push   eax
c001a85f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a866:	50                   	push   eax
c001a867:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a86d:	e8 8c e8 ff ff       	call   c00190fe <IDE::getBase(unsigned char)>
c001a872:	8d 50 07             	lea    edx,[eax+0x7]
c001a875:	ec                   	in     al,dx
c001a876:	83 c4 10             	add    esp,0x10
c001a879:	a8 88                	test   al,0x88
c001a87b:	74 0a                	je     c001a887 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a87d:	4b                   	dec    ebx
c001a87e:	75 dd                	jne    c001a85d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a880:	bb 02 00 00 00       	mov    ebx,0x2
c001a885:	eb 02                	jmp    c001a889 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a887:	31 db                	xor    ebx,ebx
c001a889:	83 c4 1c             	add    esp,0x1c
c001a88c:	89 d8                	mov    eax,ebx
c001a88e:	5b                   	pop    ebx
c001a88f:	5e                   	pop    esi
c001a890:	5f                   	pop    edi
c001a891:	5d                   	pop    ebp
c001a892:	c3                   	ret    
c001a893:	90                   	nop

c001a894 <ATAPI::diskRemoved()>:
c001a894:	53                   	push   ebx
c001a895:	83 ec 14             	sub    esp,0x14
c001a898:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a89c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a8a3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a8a9:	e8 6c 24 ff ff       	call   c000cd1a <LogicalDisk::unmount()>
c001a8ae:	58                   	pop    eax
c001a8af:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a8b5:	e8 a6 2d ff ff       	call   c000d660 <VCache::writeWriteBuffer()>
c001a8ba:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a8c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8c4:	83 c4 18             	add    esp,0x18
c001a8c7:	5b                   	pop    ebx
c001a8c8:	e9 83 2d ff ff       	jmp    c000d650 <VCache::invalidateReadBuffer()>
c001a8cd:	90                   	nop

c001a8ce <ATAPI::eject()>:
c001a8ce:	57                   	push   edi
c001a8cf:	b9 03 00 00 00       	mov    ecx,0x3
c001a8d4:	53                   	push   ebx
c001a8d5:	83 ec 14             	sub    esp,0x14
c001a8d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8dc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a8e0:	fc                   	cld    
c001a8e1:	31 c0                	xor    eax,eax
c001a8e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a8e5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a8ea:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a8ef:	50                   	push   eax
c001a8f0:	50                   	push   eax
c001a8f1:	6a 00                	push   0x0
c001a8f3:	6a 00                	push   0x0
c001a8f5:	6a 00                	push   0x0
c001a8f7:	6a 02                	push   0x2
c001a8f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8fd:	50                   	push   eax
c001a8fe:	53                   	push   ebx
c001a8ff:	e8 d0 fc ff ff       	call   c001a5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a904:	83 c4 14             	add    esp,0x14
c001a907:	53                   	push   ebx
c001a908:	e8 87 ff ff ff       	call   c001a894 <ATAPI::diskRemoved()>
c001a90d:	83 c4 24             	add    esp,0x24
c001a910:	31 c0                	xor    eax,eax
c001a912:	5b                   	pop    ebx
c001a913:	5f                   	pop    edi
c001a914:	c3                   	ret    
c001a915:	90                   	nop

c001a916 <ATAPI::diskInserted()>:
c001a916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a91a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a921:	c3                   	ret    

c001a922 <ATAPI::detectMedia()>:
c001a922:	56                   	push   esi
c001a923:	53                   	push   ebx
c001a924:	83 ec 28             	sub    esp,0x28
c001a927:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a92b:	6a 0c                	push   0xc
c001a92d:	6a 00                	push   0x0
c001a92f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a933:	56                   	push   esi
c001a934:	e8 97 5b fe ff       	call   c00004d0 <memset>
c001a939:	58                   	pop    eax
c001a93a:	5a                   	pop    edx
c001a93b:	6a 00                	push   0x0
c001a93d:	6a 00                	push   0x0
c001a93f:	6a 00                	push   0x0
c001a941:	6a 00                	push   0x0
c001a943:	56                   	push   esi
c001a944:	53                   	push   ebx
c001a945:	e8 8a fc ff ff       	call   c001a5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a94a:	83 c4 1c             	add    esp,0x1c
c001a94d:	6a 0c                	push   0xc
c001a94f:	6a 00                	push   0x0
c001a951:	56                   	push   esi
c001a952:	e8 79 5b fe ff       	call   c00004d0 <memset>
c001a957:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a95c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a961:	59                   	pop    ecx
c001a962:	58                   	pop    eax
c001a963:	6a 01                	push   0x1
c001a965:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a969:	50                   	push   eax
c001a96a:	6a 00                	push   0x0
c001a96c:	6a 12                	push   0x12
c001a96e:	56                   	push   esi
c001a96f:	53                   	push   ebx
c001a970:	e8 5f fc ff ff       	call   c001a5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a975:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a979:	83 c4 20             	add    esp,0x20
c001a97c:	83 e0 7f             	and    eax,0x7f
c001a97f:	3c 70                	cmp    al,0x70
c001a981:	74 15                	je     c001a998 <ATAPI::detectMedia()+0x76>
c001a983:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a98a:	75 0c                	jne    c001a998 <ATAPI::detectMedia()+0x76>
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	53                   	push   ebx
c001a990:	e8 81 ff ff ff       	call   c001a916 <ATAPI::diskInserted()>
c001a995:	83 c4 10             	add    esp,0x10
c001a998:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a99c:	83 e0 0f             	and    eax,0xf
c001a99f:	3c 02                	cmp    al,0x2
c001a9a1:	75 1b                	jne    c001a9be <ATAPI::detectMedia()+0x9c>
c001a9a3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a9a8:	75 2d                	jne    c001a9d7 <ATAPI::detectMedia()+0xb5>
c001a9aa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9b1:	74 24                	je     c001a9d7 <ATAPI::detectMedia()+0xb5>
c001a9b3:	83 ec 0c             	sub    esp,0xc
c001a9b6:	53                   	push   ebx
c001a9b7:	e8 d8 fe ff ff       	call   c001a894 <ATAPI::diskRemoved()>
c001a9bc:	eb 16                	jmp    c001a9d4 <ATAPI::detectMedia()+0xb2>
c001a9be:	84 c0                	test   al,al
c001a9c0:	75 15                	jne    c001a9d7 <ATAPI::detectMedia()+0xb5>
c001a9c2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9c9:	75 0c                	jne    c001a9d7 <ATAPI::detectMedia()+0xb5>
c001a9cb:	83 ec 0c             	sub    esp,0xc
c001a9ce:	53                   	push   ebx
c001a9cf:	e8 42 ff ff ff       	call   c001a916 <ATAPI::diskInserted()>
c001a9d4:	83 c4 10             	add    esp,0x10
c001a9d7:	83 c4 24             	add    esp,0x24
c001a9da:	5b                   	pop    ebx
c001a9db:	5e                   	pop    esi
c001a9dc:	c3                   	ret    
c001a9dd:	90                   	nop

c001a9de <ATAPI::open(int, int, void*)>:
c001a9de:	56                   	push   esi
c001a9df:	53                   	push   ebx
c001a9e0:	50                   	push   eax
c001a9e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a9e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9ed:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a9f3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a9f9:	c1 e0 06             	shl    eax,0x6
c001a9fc:	01 d0                	add    eax,edx
c001a9fe:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001aa05:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001aa0b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001aa12:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001aa1c:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa22:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001aa29:	6a 04                	push   0x4
c001aa2b:	6a 0c                	push   0xc
c001aa2d:	51                   	push   ecx
c001aa2e:	52                   	push   edx
c001aa2f:	e8 dc e6 ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa34:	90                   	nop
c001aa35:	90                   	nop
c001aa36:	6a 00                	push   0x0
c001aa38:	6a 0c                	push   0xc
c001aa3a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aa41:	50                   	push   eax
c001aa42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001aa48:	e8 c3 e6 ff ff       	call   c0019110 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa4d:	83 c4 14             	add    esp,0x14
c001aa50:	68 74 01 00 00       	push   0x174
c001aa55:	e8 5f cd fe ff       	call   c00077b9 <malloc>
c001aa5a:	83 c4 0c             	add    esp,0xc
c001aa5d:	89 c6                	mov    esi,eax
c001aa5f:	6a 00                	push   0x0
c001aa61:	68 ff ff ff 7f       	push   0x7fffffff
c001aa66:	6a 00                	push   0x0
c001aa68:	6a 00                	push   0x0
c001aa6a:	53                   	push   ebx
c001aa6b:	68 f4 f7 01 c0       	push   0xc001f7f4
c001aa70:	50                   	push   eax
c001aa71:	e8 f0 20 ff ff       	call   c000cb66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa76:	83 c4 14             	add    esp,0x14
c001aa79:	56                   	push   esi
c001aa7a:	e8 9d 21 ff ff       	call   c000cc1c <LogicalDisk::assignDriveLetter()>
c001aa7f:	5a                   	pop    edx
c001aa80:	0f be c0             	movsx  eax,al
c001aa83:	59                   	pop    ecx
c001aa84:	50                   	push   eax
c001aa85:	68 40 f6 01 c0       	push   0xc001f640
c001aa8a:	e8 de fb fe ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001aa8f:	58                   	pop    eax
c001aa90:	5a                   	pop    edx
c001aa91:	56                   	push   esi
c001aa92:	53                   	push   ebx
c001aa93:	e8 14 10 ff ff       	call   c000baac <Device::addChild(Device*)>
c001aa98:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaa1:	e8 3c 14 ff ff       	call   c000bee2 <PhysicalDisk::startCache()>
c001aaa6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aaad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aab0:	e8 6d fe ff ff       	call   c001a922 <ATAPI::detectMedia()>
c001aab5:	83 c4 14             	add    esp,0x14
c001aab8:	31 c0                	xor    eax,eax
c001aaba:	5b                   	pop    ebx
c001aabb:	5e                   	pop    esi
c001aabc:	c3                   	ret    
c001aabd:	90                   	nop

c001aabe <ATAPI::read(unsigned long long, int, void*)>:
c001aabe:	55                   	push   ebp
c001aabf:	57                   	push   edi
c001aac0:	56                   	push   esi
c001aac1:	53                   	push   ebx
c001aac2:	83 ec 1c             	sub    esp,0x1c
c001aac5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aac9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aacd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aad1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aad8:	74 3c                	je     c001ab16 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aada:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aade:	b9 03 00 00 00       	mov    ecx,0x3
c001aae3:	fc                   	cld    
c001aae4:	31 c0                	xor    eax,eax
c001aae6:	0f ce                	bswap  esi
c001aae8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aaea:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aaef:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aaf3:	89 e8                	mov    eax,ebp
c001aaf5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aaf9:	50                   	push   eax
c001aafa:	50                   	push   eax
c001aafb:	55                   	push   ebp
c001aafc:	c1 e5 0b             	shl    ebp,0xb
c001aaff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ab03:	6a 00                	push   0x0
c001ab05:	55                   	push   ebp
c001ab06:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab0a:	50                   	push   eax
c001ab0b:	53                   	push   ebx
c001ab0c:	e8 c3 fa ff ff       	call   c001a5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab11:	83 c4 20             	add    esp,0x20
c001ab14:	eb 1a                	jmp    c001ab30 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ab16:	83 ec 0c             	sub    esp,0xc
c001ab19:	53                   	push   ebx
c001ab1a:	e8 03 fe ff ff       	call   c001a922 <ATAPI::detectMedia()>
c001ab1f:	83 c4 10             	add    esp,0x10
c001ab22:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab29:	75 af                	jne    c001aada <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ab2b:	b8 02 00 00 00       	mov    eax,0x2
c001ab30:	83 c4 1c             	add    esp,0x1c
c001ab33:	5b                   	pop    ebx
c001ab34:	5e                   	pop    esi
c001ab35:	5f                   	pop    edi
c001ab36:	5d                   	pop    ebp
c001ab37:	c3                   	ret    

c001ab38 <SATA::close(int, int, void*)>:
c001ab38:	83 ec 0c             	sub    esp,0xc
c001ab3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab3f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab45:	85 c0                	test   eax,eax
c001ab47:	74 0c                	je     c001ab55 <SATA::close(int, int, void*)+0x1d>
c001ab49:	83 ec 0c             	sub    esp,0xc
c001ab4c:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab4e:	50                   	push   eax
c001ab4f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab52:	83 c4 10             	add    esp,0x10
c001ab55:	31 c0                	xor    eax,eax
c001ab57:	83 c4 0c             	add    esp,0xc
c001ab5a:	c3                   	ret    
c001ab5b:	90                   	nop

c001ab5c <SATA::powerSaving(PowerSavingLevel)>:
c001ab5c:	c3                   	ret    
c001ab5d:	90                   	nop

c001ab5e <SATA::open(int, int, void*)>:
c001ab5e:	56                   	push   esi
c001ab5f:	53                   	push   ebx
c001ab60:	50                   	push   eax
c001ab61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab69:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab73:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab79:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab87:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab91:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab97:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab9e:	e8 f2 ce fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aba3:	89 c6                	mov    esi,eax
c001aba5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001abab:	81 c6 00 10 00 00    	add    esi,0x1000
c001abb1:	e8 df ce fe ff       	call   c0007a95 <Phys::allocatePage()>
c001abb6:	39 c6                	cmp    esi,eax
c001abb8:	74 10                	je     c001abca <SATA::open(int, int, void*)+0x6c>
c001abba:	83 ec 0c             	sub    esp,0xc
c001abbd:	68 88 f6 01 c0       	push   0xc001f688
c001abc2:	e8 28 57 ff ff       	call   c00102ef <KePanic(char const*)>
c001abc7:	83 c4 10             	add    esp,0x10
c001abca:	83 ec 0c             	sub    esp,0xc
c001abcd:	6a 02                	push   0x2
c001abcf:	e8 b1 e6 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001abd4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001abda:	6a 03                	push   0x3
c001abdc:	50                   	push   eax
c001abdd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001abe3:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001abe9:	e8 0a ed fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001abee:	83 c4 14             	add    esp,0x14
c001abf1:	53                   	push   ebx
c001abf2:	e8 eb 12 ff ff       	call   c000bee2 <PhysicalDisk::startCache()>
c001abf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abfa:	e8 9b 23 ff ff       	call   c000cf9a <createPartitionsForDisk(PhysicalDisk*)>
c001abff:	83 c4 14             	add    esp,0x14
c001ac02:	31 c0                	xor    eax,eax
c001ac04:	5b                   	pop    ebx
c001ac05:	5e                   	pop    esi
c001ac06:	c3                   	ret    
c001ac07:	90                   	nop

c001ac08 <SATA::SATA()>:
c001ac08:	83 ec 0c             	sub    esp,0xc
c001ac0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0f:	83 ec 04             	sub    esp,0x4
c001ac12:	68 00 02 00 00       	push   0x200
c001ac17:	68 9c f6 01 c0       	push   0xc001f69c
c001ac1c:	50                   	push   eax
c001ac1d:	e8 58 12 ff ff       	call   c000be7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ac22:	83 c4 10             	add    esp,0x10
c001ac25:	ba 0c f7 01 c0       	mov    edx,0xc001f70c
c001ac2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2e:	89 10                	mov    DWORD PTR [eax],edx
c001ac30:	90                   	nop
c001ac31:	83 c4 0c             	add    esp,0xc
c001ac34:	c3                   	ret    
c001ac35:	90                   	nop

c001ac36 <SATA::access(unsigned long long, int, void*, bool)>:
c001ac36:	55                   	push   ebp
c001ac37:	57                   	push   edi
c001ac38:	56                   	push   esi
c001ac39:	53                   	push   ebx
c001ac3a:	83 ec 2c             	sub    esp,0x2c
c001ac3d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ac41:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ac45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac49:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac4d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac51:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac5a:	7e 10                	jle    c001ac6c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac5c:	83 ec 0c             	sub    esp,0xc
c001ac5f:	68 ac f6 01 c0       	push   0xc001f6ac
c001ac64:	e8 86 56 ff ff       	call   c00102ef <KePanic(char const*)>
c001ac69:	83 c4 10             	add    esp,0x10
c001ac6c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac72:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac82:	89 d0                	mov    eax,edx
c001ac84:	c1 e0 07             	shl    eax,0x7
c001ac87:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac8b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac95:	51                   	push   ecx
c001ac96:	8d 42 02             	lea    eax,[edx+0x2]
c001ac99:	51                   	push   ecx
c001ac9a:	c1 e0 07             	shl    eax,0x7
c001ac9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001aca1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001aca5:	50                   	push   eax
c001aca6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001acac:	e8 e7 ef ff ff       	call   c0019c98 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001acb1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001acb5:	83 c4 10             	add    esp,0x10
c001acb8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001acbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001acc1:	0f 84 4f 01 00 00    	je     c001ae16 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001acc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001accb:	c1 e0 09             	shl    eax,0x9
c001acce:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001acd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acd7:	74 0e                	je     c001ace7 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001acd9:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001acdf:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ace3:	89 c1                	mov    ecx,eax
c001ace5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ace7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001aceb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acf1:	8d 42 02             	lea    eax,[edx+0x2]
c001acf4:	c1 e0 07             	shl    eax,0x7
c001acf7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001acfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001acfd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ad03:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ad09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad0d:	c1 e1 05             	shl    ecx,0x5
c001ad10:	01 c8                	add    eax,ecx
c001ad12:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ad16:	83 e1 01             	and    ecx,0x1
c001ad19:	89 ce                	mov    esi,ecx
c001ad1b:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad1d:	c1 e6 06             	shl    esi,0x6
c001ad20:	83 e1 bf             	and    ecx,0xffffffbf
c001ad23:	09 f1                	or     ecx,esi
c001ad25:	88 08                	mov    BYTE PTR [eax],cl
c001ad27:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad29:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ad2f:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ad35:	89 08                	mov    DWORD PTR [eax],ecx
c001ad37:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad3d:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ad43:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ad49:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ad4c:	50                   	push   eax
c001ad4d:	68 90 00 00 00       	push   0x90
c001ad52:	6a 00                	push   0x0
c001ad54:	56                   	push   esi
c001ad55:	e8 76 57 fe ff       	call   c00004d0 <memset>
c001ad5a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad60:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad64:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ad6a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad6e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad72:	83 c4 10             	add    esp,0x10
c001ad75:	48                   	dec    eax
c001ad76:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad7b:	89 c1                	mov    ecx,eax
c001ad7d:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad83:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad88:	09 c8                	or     eax,ecx
c001ad8a:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad90:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad93:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad9a:	66 25 00 7f          	and    ax,0x7f00
c001ad9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ada2:	66 0d 27 80          	or     ax,0x8027
c001ada6:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001adab:	66 89 06             	mov    WORD PTR [esi],ax
c001adae:	19 c0                	sbb    eax,eax
c001adb0:	83 e0 f0             	and    eax,0xfffffff0
c001adb3:	83 c0 35             	add    eax,0x35
c001adb6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001adb9:	89 e8                	mov    eax,ebp
c001adbb:	c1 e8 10             	shr    eax,0x10
c001adbe:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001adc1:	89 e8                	mov    eax,ebp
c001adc3:	c1 e8 18             	shr    eax,0x18
c001adc6:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001adc9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001adcd:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001add0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001add4:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001add7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001addb:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001addf:	89 d6                	mov    esi,edx
c001ade1:	31 c0                	xor    eax,eax
c001ade3:	c1 e6 07             	shl    esi,0x7
c001ade6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001adea:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001adf0:	80 e1 88             	and    cl,0x88
c001adf3:	74 0a                	je     c001adff <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001adf5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001adfa:	74 0a                	je     c001ae06 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001adfc:	40                   	inc    eax
c001adfd:	eb eb                	jmp    c001adea <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001adff:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae04:	75 17                	jne    c001ae1d <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ae06:	83 ec 0c             	sub    esp,0xc
c001ae09:	68 e5 f6 01 c0       	push   0xc001f6e5
c001ae0e:	e8 5a f8 fe ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001ae13:	83 c4 10             	add    esp,0x10
c001ae16:	b8 01 00 00 00       	mov    eax,0x1
c001ae1b:	eb 5d                	jmp    c001ae7a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae1d:	b8 01 00 00 00       	mov    eax,0x1
c001ae22:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ae26:	c1 e2 07             	shl    edx,0x7
c001ae29:	d3 e0                	shl    eax,cl
c001ae2b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ae2f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ae35:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ae3b:	85 c8                	test   eax,ecx
c001ae3d:	74 16                	je     c001ae55 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ae3f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ae45:	0f ba e1 1e          	bt     ecx,0x1e
c001ae49:	73 ea                	jae    c001ae35 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ae4b:	83 ec 0c             	sub    esp,0xc
c001ae4e:	68 f3 f6 01 c0       	push   0xc001f6f3
c001ae53:	eb b9                	jmp    c001ae0e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae55:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae5b:	0f ba e0 1e          	bt     eax,0x1e
c001ae5f:	72 b5                	jb     c001ae16 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae61:	31 c0                	xor    eax,eax
c001ae63:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ae68:	75 10                	jne    c001ae7a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae6a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae70:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae74:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae7a:	83 c4 2c             	add    esp,0x2c
c001ae7d:	5b                   	pop    ebx
c001ae7e:	5e                   	pop    esi
c001ae7f:	5f                   	pop    edi
c001ae80:	5d                   	pop    ebp
c001ae81:	c3                   	ret    

c001ae82 <SATA::read(unsigned long long, int, void*)>:
c001ae82:	57                   	push   edi
c001ae83:	b8 04 00 00 00       	mov    eax,0x4
c001ae88:	56                   	push   esi
c001ae89:	53                   	push   ebx
c001ae8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae92:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae99:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae9d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001aea3:	77 25                	ja     c001aeca <SATA::read(unsigned long long, int, void*)+0x48>
c001aea5:	b8 06 00 00 00       	mov    eax,0x6
c001aeaa:	85 f6                	test   esi,esi
c001aeac:	74 1c                	je     c001aeca <SATA::read(unsigned long long, int, void*)+0x48>
c001aeae:	50                   	push   eax
c001aeaf:	50                   	push   eax
c001aeb0:	6a 00                	push   0x0
c001aeb2:	56                   	push   esi
c001aeb3:	52                   	push   edx
c001aeb4:	53                   	push   ebx
c001aeb5:	51                   	push   ecx
c001aeb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeba:	e8 77 fd ff ff       	call   c001ac36 <SATA::access(unsigned long long, int, void*, bool)>
c001aebf:	83 c4 20             	add    esp,0x20
c001aec2:	85 c0                	test   eax,eax
c001aec4:	0f 95 c0             	setne  al
c001aec7:	0f b6 c0             	movzx  eax,al
c001aeca:	5b                   	pop    ebx
c001aecb:	5e                   	pop    esi
c001aecc:	5f                   	pop    edi
c001aecd:	c3                   	ret    

c001aece <SATA::write(unsigned long long, int, void*)>:
c001aece:	55                   	push   ebp
c001aecf:	b8 04 00 00 00       	mov    eax,0x4
c001aed4:	57                   	push   edi
c001aed5:	56                   	push   esi
c001aed6:	53                   	push   ebx
c001aed7:	83 ec 0c             	sub    esp,0xc
c001aeda:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aede:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aee2:	8d 73 ff             	lea    esi,[ebx-0x1]
c001aee5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001aee9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001aeed:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001aef3:	77 3d                	ja     c001af32 <SATA::write(unsigned long long, int, void*)+0x64>
c001aef5:	b8 06 00 00 00       	mov    eax,0x6
c001aefa:	85 ed                	test   ebp,ebp
c001aefc:	74 34                	je     c001af32 <SATA::write(unsigned long long, int, void*)+0x64>
c001aefe:	c1 e3 09             	shl    ebx,0x9
c001af01:	01 eb                	add    ebx,ebp
c001af03:	89 d6                	mov    esi,edx
c001af05:	89 cf                	mov    edi,ecx
c001af07:	83 c6 01             	add    esi,0x1
c001af0a:	83 d7 00             	adc    edi,0x0
c001af0d:	50                   	push   eax
c001af0e:	50                   	push   eax
c001af0f:	6a 01                	push   0x1
c001af11:	55                   	push   ebp
c001af12:	81 c5 00 02 00 00    	add    ebp,0x200
c001af18:	6a 01                	push   0x1
c001af1a:	51                   	push   ecx
c001af1b:	52                   	push   edx
c001af1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af20:	e8 11 fd ff ff       	call   c001ac36 <SATA::access(unsigned long long, int, void*, bool)>
c001af25:	83 c4 20             	add    esp,0x20
c001af28:	89 f2                	mov    edx,esi
c001af2a:	89 f9                	mov    ecx,edi
c001af2c:	39 dd                	cmp    ebp,ebx
c001af2e:	75 d3                	jne    c001af03 <SATA::write(unsigned long long, int, void*)+0x35>
c001af30:	31 c0                	xor    eax,eax
c001af32:	83 c4 0c             	add    esp,0xc
c001af35:	5b                   	pop    ebx
c001af36:	5e                   	pop    esi
c001af37:	5f                   	pop    edi
c001af38:	5d                   	pop    ebp
c001af39:	c3                   	ret    

c001af3a <SATAPI::write(unsigned long long, int, void*)>:
c001af3a:	b8 03 00 00 00       	mov    eax,0x3
c001af3f:	c3                   	ret    

c001af40 <SATAPI::close(int, int, void*)>:
c001af40:	83 ec 0c             	sub    esp,0xc
c001af43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af47:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af4d:	85 c0                	test   eax,eax
c001af4f:	74 0c                	je     c001af5d <SATAPI::close(int, int, void*)+0x1d>
c001af51:	83 ec 0c             	sub    esp,0xc
c001af54:	8b 10                	mov    edx,DWORD PTR [eax]
c001af56:	50                   	push   eax
c001af57:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af5a:	83 c4 10             	add    esp,0x10
c001af5d:	31 c0                	xor    eax,eax
c001af5f:	83 c4 0c             	add    esp,0xc
c001af62:	c3                   	ret    
c001af63:	90                   	nop

c001af64 <SATAPI::SATAPI()>:
c001af64:	83 ec 0c             	sub    esp,0xc
c001af67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af6b:	83 ec 04             	sub    esp,0x4
c001af6e:	68 00 08 00 00       	push   0x800
c001af73:	68 3c f7 01 c0       	push   0xc001f73c
c001af78:	50                   	push   eax
c001af79:	e8 fc 0e ff ff       	call   c000be7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af7e:	83 c4 10             	add    esp,0x10
c001af81:	ba 44 f8 01 c0       	mov    edx,0xc001f844
c001af86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af8a:	89 10                	mov    DWORD PTR [eax],edx
c001af8c:	90                   	nop
c001af8d:	83 c4 0c             	add    esp,0xc
c001af90:	c3                   	ret    
c001af91:	90                   	nop

c001af92 <SATAPI::diskRemoved()>:
c001af92:	c3                   	ret    
c001af93:	90                   	nop

c001af94 <SATAPI::diskInserted()>:
c001af94:	83 ec 18             	sub    esp,0x18
c001af97:	68 48 f7 01 c0       	push   0xc001f748
c001af9c:	e8 cc f6 fe ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001afa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afa5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001afac:	83 c4 1c             	add    esp,0x1c
c001afaf:	c3                   	ret    

c001afb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001afb0:	55                   	push   ebp
c001afb1:	57                   	push   edi
c001afb2:	56                   	push   esi
c001afb3:	53                   	push   ebx
c001afb4:	83 ec 38             	sub    esp,0x38
c001afb7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001afbb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001afbf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001afc3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afc7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001afcb:	68 60 f7 01 c0       	push   0xc001f760
c001afd0:	e8 98 f6 fe ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001afd5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001afdb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001afe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afe5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001afeb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afef:	83 c0 02             	add    eax,0x2
c001aff2:	c1 e0 07             	shl    eax,0x7
c001aff5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aff9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001affd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b001:	c1 e0 07             	shl    eax,0x7
c001b004:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b008:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b00c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b016:	58                   	pop    eax
c001b017:	5a                   	pop    edx
c001b018:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b01c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b022:	e8 71 ec ff ff       	call   c0019c98 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b027:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b02b:	83 c4 10             	add    esp,0x10
c001b02e:	b8 01 00 00 00       	mov    eax,0x1
c001b033:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b038:	0f 84 49 02 00 00    	je     c001b287 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b03e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b048:	8b 00                	mov    eax,DWORD PTR [eax]
c001b04a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b050:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b056:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b05a:	c1 e1 05             	shl    ecx,0x5
c001b05d:	01 c8                	add    eax,ecx
c001b05f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b061:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b067:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b06d:	89 08                	mov    DWORD PTR [eax],ecx
c001b06f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b075:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b07b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b081:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b084:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b087:	50                   	push   eax
c001b088:	68 90 00 00 00       	push   0x90
c001b08d:	6a 00                	push   0x0
c001b08f:	53                   	push   ebx
c001b090:	e8 3b 54 fe ff       	call   c00004d0 <memset>
c001b095:	b9 0c 00 00 00       	mov    ecx,0xc
c001b09a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b09e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0a0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b0a6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b0aa:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b0b0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b0b4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b0b8:	48                   	dec    eax
c001b0b9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b0be:	89 c1                	mov    ecx,eax
c001b0c0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b0c6:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b0cb:	09 c8                	or     eax,ecx
c001b0cd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b0d3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b0d6:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b0dd:	66 25 00 7f          	and    ax,0x7f00
c001b0e1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b0e5:	66 0d 27 80          	or     ax,0x8027
c001b0e9:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b0ed:	66 89 03             	mov    WORD PTR [ebx],ax
c001b0f0:	89 d0                	mov    eax,edx
c001b0f2:	c1 ea 18             	shr    edx,0x18
c001b0f5:	c1 e8 10             	shr    eax,0x10
c001b0f8:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b0fb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b0fe:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b102:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b105:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b109:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b10c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b110:	83 c4 10             	add    esp,0x10
c001b113:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b117:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b11b:	31 c0                	xor    eax,eax
c001b11d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b123:	80 e1 88             	and    cl,0x88
c001b126:	74 0a                	je     c001b132 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b128:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b12d:	74 0a                	je     c001b139 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b12f:	40                   	inc    eax
c001b130:	eb eb                	jmp    c001b11d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b132:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b137:	75 43                	jne    c001b17c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b139:	83 ec 0c             	sub    esp,0xc
c001b13c:	68 7a f7 01 c0       	push   0xc001f77a
c001b141:	e8 27 f5 fe ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001b146:	58                   	pop    eax
c001b147:	5a                   	pop    edx
c001b148:	68 8f f7 01 c0       	push   0xc001f78f
c001b14d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b153:	e8 de d5 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b158:	59                   	pop    ecx
c001b159:	5b                   	pop    ebx
c001b15a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b15e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b164:	e8 c9 eb ff ff       	call   c0019d32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b169:	5e                   	pop    esi
c001b16a:	5f                   	pop    edi
c001b16b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b16f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b175:	e8 98 eb ff ff       	call   c0019d12 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b17a:	eb 48                	jmp    c001b1c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b17c:	be 01 00 00 00       	mov    esi,0x1
c001b181:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b185:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b189:	d3 e6                	shl    esi,cl
c001b18b:	c1 e7 07             	shl    edi,0x7
c001b18e:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b194:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b199:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b19d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b1a3:	85 c6                	test   esi,eax
c001b1a5:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b1ab:	0f 84 a3 00 00 00    	je     c001b254 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b1b1:	0f ba e0 1e          	bt     eax,0x1e
c001b1b5:	73 1a                	jae    c001b1d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b1b7:	83 ec 0c             	sub    esp,0xc
c001b1ba:	68 a1 f7 01 c0       	push   0xc001f7a1
c001b1bf:	e8 a9 f4 fe ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001b1c4:	83 c4 10             	add    esp,0x10
c001b1c7:	b8 01 00 00 00       	mov    eax,0x1
c001b1cc:	e9 b6 00 00 00       	jmp    c001b287 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b1d1:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b1d7:	83 f8 0d             	cmp    eax,0xd
c001b1da:	77 0a                	ja     c001b1e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b1dc:	83 ec 0c             	sub    esp,0xc
c001b1df:	68 c8 00 00 00       	push   0xc8
c001b1e4:	eb 28                	jmp    c001b20e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b1e6:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b1ec:	83 f8 0d             	cmp    eax,0xd
c001b1ef:	77 0a                	ja     c001b1fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b1f1:	83 ec 0c             	sub    esp,0xc
c001b1f4:	68 58 02 00 00       	push   0x258
c001b1f9:	eb 13                	jmp    c001b20e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b1fb:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b201:	83 f8 06             	cmp    eax,0x6
c001b204:	77 10                	ja     c001b216 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b206:	83 ec 0c             	sub    esp,0xc
c001b209:	68 dc 05 00 00       	push   0x5dc
c001b20e:	e8 d1 89 ff ff       	call   c0013be4 <milliTenthSleep(unsigned int)>
c001b213:	83 c4 10             	add    esp,0x10
c001b216:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b21a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b21d:	75 06                	jne    c001b225 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b21f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b223:	74 15                	je     c001b23a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b225:	83 fb 06             	cmp    ebx,0x6
c001b228:	77 10                	ja     c001b23a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b22a:	83 ec 0c             	sub    esp,0xc
c001b22d:	68 c4 09 00 00       	push   0x9c4
c001b232:	e8 ad 89 ff ff       	call   c0013be4 <milliTenthSleep(unsigned int)>
c001b237:	83 c4 10             	add    esp,0x10
c001b23a:	43                   	inc    ebx
c001b23b:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b241:	0f 85 56 ff ff ff    	jne    c001b19d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b247:	83 ec 0c             	sub    esp,0xc
c001b24a:	68 b4 f7 01 c0       	push   0xc001f7b4
c001b24f:	e9 6b ff ff ff       	jmp    c001b1bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b254:	0f ba e0 1e          	bt     eax,0x1e
c001b258:	73 0d                	jae    c001b267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b25a:	83 ec 0c             	sub    esp,0xc
c001b25d:	68 c8 f7 01 c0       	push   0xc001f7c8
c001b262:	e9 58 ff ff ff       	jmp    c001b1bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b267:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b26c:	74 17                	je     c001b285 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b26e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b273:	74 10                	je     c001b285 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b275:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b27b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b27f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b283:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b285:	31 c0                	xor    eax,eax
c001b287:	83 c4 2c             	add    esp,0x2c
c001b28a:	5b                   	pop    ebx
c001b28b:	5e                   	pop    esi
c001b28c:	5f                   	pop    edi
c001b28d:	5d                   	pop    ebp
c001b28e:	c3                   	ret    
c001b28f:	90                   	nop

c001b290 <SATAPI::eject()>:
c001b290:	57                   	push   edi
c001b291:	b9 03 00 00 00       	mov    ecx,0x3
c001b296:	83 ec 18             	sub    esp,0x18
c001b299:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b29d:	fc                   	cld    
c001b29e:	31 c0                	xor    eax,eax
c001b2a0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b2a2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b2a7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b2ac:	50                   	push   eax
c001b2ad:	6a 00                	push   0x0
c001b2af:	6a 00                	push   0x0
c001b2b1:	6a 00                	push   0x0
c001b2b3:	6a 00                	push   0x0
c001b2b5:	6a 02                	push   0x2
c001b2b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b2bb:	50                   	push   eax
c001b2bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b2c0:	e8 eb fc ff ff       	call   c001afb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b2c5:	31 c0                	xor    eax,eax
c001b2c7:	83 c4 38             	add    esp,0x38
c001b2ca:	5f                   	pop    edi
c001b2cb:	c3                   	ret    

c001b2cc <SATAPI::detectMedia()>:
c001b2cc:	53                   	push   ebx
c001b2cd:	83 ec 14             	sub    esp,0x14
c001b2d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2d4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b2da:	e8 81 23 ff ff       	call   c000d660 <VCache::writeWriteBuffer()>
c001b2df:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b2e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b2e9:	83 c4 18             	add    esp,0x18
c001b2ec:	5b                   	pop    ebx
c001b2ed:	e9 5e 23 ff ff       	jmp    c000d650 <VCache::invalidateReadBuffer()>

c001b2f2 <SATAPI::open(int, int, void*)>:
c001b2f2:	56                   	push   esi
c001b2f3:	53                   	push   ebx
c001b2f4:	51                   	push   ecx
c001b2f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2fd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b307:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b30d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b31b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b325:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b32b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b332:	e8 5e c7 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b337:	89 c6                	mov    esi,eax
c001b339:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b33f:	81 c6 00 10 00 00    	add    esi,0x1000
c001b345:	e8 4b c7 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b34a:	39 c6                	cmp    esi,eax
c001b34c:	74 10                	je     c001b35e <SATAPI::open(int, int, void*)+0x6c>
c001b34e:	83 ec 0c             	sub    esp,0xc
c001b351:	68 dd f7 01 c0       	push   0xc001f7dd
c001b356:	e8 94 4f ff ff       	call   c00102ef <KePanic(char const*)>
c001b35b:	83 c4 10             	add    esp,0x10
c001b35e:	83 ec 0c             	sub    esp,0xc
c001b361:	6a 02                	push   0x2
c001b363:	e8 1d df fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b368:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b36e:	6a 03                	push   0x3
c001b370:	50                   	push   eax
c001b371:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b377:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b37d:	e8 76 e5 fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b382:	83 c4 14             	add    esp,0x14
c001b385:	68 74 01 00 00       	push   0x174
c001b38a:	e8 2a c4 fe ff       	call   c00077b9 <malloc>
c001b38f:	83 c4 0c             	add    esp,0xc
c001b392:	89 c6                	mov    esi,eax
c001b394:	6a 00                	push   0x0
c001b396:	68 ff ff ff 7f       	push   0x7fffffff
c001b39b:	6a 00                	push   0x0
c001b39d:	6a 00                	push   0x0
c001b39f:	53                   	push   ebx
c001b3a0:	68 f3 f7 01 c0       	push   0xc001f7f3
c001b3a5:	50                   	push   eax
c001b3a6:	e8 bb 17 ff ff       	call   c000cb66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b3ab:	83 c4 14             	add    esp,0x14
c001b3ae:	56                   	push   esi
c001b3af:	e8 68 18 ff ff       	call   c000cc1c <LogicalDisk::assignDriveLetter()>
c001b3b4:	5a                   	pop    edx
c001b3b5:	0f be c0             	movsx  eax,al
c001b3b8:	59                   	pop    ecx
c001b3b9:	50                   	push   eax
c001b3ba:	68 40 f6 01 c0       	push   0xc001f640
c001b3bf:	e8 a9 f2 fe ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001b3c4:	58                   	pop    eax
c001b3c5:	5a                   	pop    edx
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	e8 df 06 ff ff       	call   c000baac <Device::addChild(Device*)>
c001b3cd:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b3d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3d6:	e8 07 0b ff ff       	call   c000bee2 <PhysicalDisk::startCache()>
c001b3db:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b3e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3e5:	e8 e2 fe ff ff       	call   c001b2cc <SATAPI::detectMedia()>
c001b3ea:	83 c4 14             	add    esp,0x14
c001b3ed:	31 c0                	xor    eax,eax
c001b3ef:	5b                   	pop    ebx
c001b3f0:	5e                   	pop    esi
c001b3f1:	c3                   	ret    

c001b3f2 <SATAPI::read(unsigned long long, int, void*)>:
c001b3f2:	57                   	push   edi
c001b3f3:	56                   	push   esi
c001b3f4:	53                   	push   ebx
c001b3f5:	83 ec 3c             	sub    esp,0x3c
c001b3f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b3fc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b400:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b404:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b408:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b40c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b410:	68 01 f8 01 c0       	push   0xc001f801
c001b415:	e8 53 f2 fe ff       	call   c000a66d <Dbg::kprintf(char const*, ...)>
c001b41a:	83 c4 10             	add    esp,0x10
c001b41d:	83 fe 04             	cmp    esi,0x4
c001b420:	7e 10                	jle    c001b432 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b422:	83 ec 0c             	sub    esp,0xc
c001b425:	68 12 f8 01 c0       	push   0xc001f812
c001b42a:	e8 c0 4e ff ff       	call   c00102ef <KePanic(char const*)>
c001b42f:	83 c4 10             	add    esp,0x10
c001b432:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b438:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b43e:	51                   	push   ecx
c001b43f:	50                   	push   eax
c001b440:	83 c0 02             	add    eax,0x2
c001b443:	c1 e0 07             	shl    eax,0x7
c001b446:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b44c:	50                   	push   eax
c001b44d:	52                   	push   edx
c001b44e:	e8 09 e9 ff ff       	call   c0019d5c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b453:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b457:	b9 03 00 00 00       	mov    ecx,0x3
c001b45c:	fc                   	cld    
c001b45d:	31 c0                	xor    eax,eax
c001b45f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b461:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b466:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b46b:	83 c4 0c             	add    esp,0xc
c001b46e:	6a 00                	push   0x0
c001b470:	6a 00                	push   0x0
c001b472:	6a 00                	push   0x0
c001b474:	6a 00                	push   0x0
c001b476:	6a 02                	push   0x2
c001b478:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b47c:	50                   	push   eax
c001b47d:	53                   	push   ebx
c001b47e:	e8 2d fb ff ff       	call   c001afb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b483:	83 c4 20             	add    esp,0x20
c001b486:	85 c0                	test   eax,eax
c001b488:	75 44                	jne    c001b4ce <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b48a:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b48e:	b9 03 00 00 00       	mov    ecx,0x3
c001b493:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b495:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b499:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b49e:	0f c8                	bswap  eax
c001b4a0:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b4a4:	89 f0                	mov    eax,esi
c001b4a6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4aa:	50                   	push   eax
c001b4ab:	56                   	push   esi
c001b4ac:	c1 e6 0b             	shl    esi,0xb
c001b4af:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b4b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4bb:	56                   	push   esi
c001b4bc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b4c0:	50                   	push   eax
c001b4c1:	53                   	push   ebx
c001b4c2:	e8 e9 fa ff ff       	call   c001afb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4c7:	83 c4 20             	add    esp,0x20
c001b4ca:	85 c0                	test   eax,eax
c001b4cc:	74 14                	je     c001b4e2 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b4ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4d2:	83 ec 0c             	sub    esp,0xc
c001b4d5:	53                   	push   ebx
c001b4d6:	e8 f1 fd ff ff       	call   c001b2cc <SATAPI::detectMedia()>
c001b4db:	83 c4 10             	add    esp,0x10
c001b4de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4e2:	83 c4 30             	add    esp,0x30
c001b4e5:	5b                   	pop    ebx
c001b4e6:	5e                   	pop    esi
c001b4e7:	5f                   	pop    edi
c001b4e8:	c3                   	ret    
c001b4e9:	90                   	nop

c001b4ea <IOAPIC::close(int, int, void*)>:
c001b4ea:	b8 00 00 00 00       	mov    eax,0x0
c001b4ef:	c3                   	ret    

c001b4f0 <apicGetBase()>:
c001b4f0:	55                   	push   ebp
c001b4f1:	89 e5                	mov    ebp,esp
c001b4f3:	83 ec 18             	sub    esp,0x18
c001b4f6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b4fb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b501:	83 e0 08             	and    eax,0x8
c001b504:	84 c0                	test   al,al
c001b506:	75 07                	jne    c001b50f <apicGetBase()+0x1f>
c001b508:	b8 00 00 00 00       	mov    eax,0x0
c001b50d:	eb 21                	jmp    c001b530 <apicGetBase()+0x40>
c001b50f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b514:	83 ec 08             	sub    esp,0x8
c001b517:	6a 1b                	push   0x1b
c001b519:	50                   	push   eax
c001b51a:	e8 d3 b8 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b51f:	83 c4 10             	add    esp,0x10
c001b522:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b525:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b528:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b52b:	25 00 00 ff ff       	and    eax,0xffff0000
c001b530:	c9                   	leave  
c001b531:	c3                   	ret    

c001b532 <IOAPIC::IOAPIC()>:
c001b532:	83 ec 0c             	sub    esp,0xc
c001b535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b539:	83 ec 08             	sub    esp,0x8
c001b53c:	68 74 f8 01 c0       	push   0xc001f874
c001b541:	50                   	push   eax
c001b542:	e8 fd 06 ff ff       	call   c000bc44 <Device::Device(char const*)>
c001b547:	83 c4 10             	add    esp,0x10
c001b54a:	ba 84 f8 01 c0       	mov    edx,0xc001f884
c001b54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b553:	89 10                	mov    DWORD PTR [eax],edx
c001b555:	90                   	nop
c001b556:	83 c4 0c             	add    esp,0xc
c001b559:	c3                   	ret    

c001b55a <apicOpen()>:
c001b55a:	55                   	push   ebp
c001b55b:	89 e5                	mov    ebp,esp
c001b55d:	53                   	push   ebx
c001b55e:	83 ec 34             	sub    esp,0x34
c001b561:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b566:	83 f0 01             	xor    eax,0x1
c001b569:	84 c0                	test   al,al
c001b56b:	0f 84 9d 00 00 00    	je     c001b60e <apicOpen()+0xb4>
c001b571:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b575:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b57a:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b57d:	0f 83 84 00 00 00    	jae    c001b607 <apicOpen()+0xad>
c001b583:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b58a:	83 ec 0c             	sub    esp,0xc
c001b58d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b590:	e8 24 c2 fe ff       	call   c00077b9 <malloc>
c001b595:	83 c4 10             	add    esp,0x10
c001b598:	89 c3                	mov    ebx,eax
c001b59a:	83 ec 0c             	sub    esp,0xc
c001b59d:	53                   	push   ebx
c001b59e:	e8 8f ff ff ff       	call   c001b532 <IOAPIC::IOAPIC()>
c001b5a3:	83 c4 10             	add    esp,0x10
c001b5a6:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b5a9:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5ac:	25 ff 00 00 00       	and    eax,0xff
c001b5b1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b5b4:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b5bb:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b5c0:	40                   	inc    eax
c001b5c1:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b5c6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b5cb:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b5d1:	83 ec 08             	sub    esp,0x8
c001b5d4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5d7:	50                   	push   eax
c001b5d8:	e8 cf 04 ff ff       	call   c000baac <Device::addChild(Device*)>
c001b5dd:	83 c4 10             	add    esp,0x10
c001b5e0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b5e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5e5:	83 c0 08             	add    eax,0x8
c001b5e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5ea:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5ed:	25 ff 00 00 00       	and    eax,0xff
c001b5f2:	6a 00                	push   0x0
c001b5f4:	6a 00                	push   0x0
c001b5f6:	50                   	push   eax
c001b5f7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5fa:	ff d2                	call   edx
c001b5fc:	83 c4 10             	add    esp,0x10
c001b5ff:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b602:	e9 6e ff ff ff       	jmp    c001b575 <apicOpen()+0x1b>
c001b607:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b60e:	e8 dd fe ff ff       	call   c001b4f0 <apicGetBase()>
c001b613:	05 f0 00 00 00       	add    eax,0xf0
c001b618:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b61b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b61e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b620:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b623:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b62a:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b631:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b634:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b637:	89 10                	mov    DWORD PTR [eax],edx
c001b639:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b640:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b645:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b648:	7d 70                	jge    c001b6ba <apicOpen()+0x160>
c001b64a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b64d:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b654:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b657:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b65a:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b661:	c1 e8 08             	shr    eax,0x8
c001b664:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b668:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b66b:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b672:	c1 e8 18             	shr    eax,0x18
c001b675:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b678:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b67c:	75 37                	jne    c001b6b5 <apicOpen()+0x15b>
c001b67e:	e8 6d fe ff ff       	call   c001b4f0 <apicGetBase()>
c001b683:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b687:	75 07                	jne    c001b690 <apicOpen()+0x136>
c001b689:	ba 60 03 00 00       	mov    edx,0x360
c001b68e:	eb 05                	jmp    c001b695 <apicOpen()+0x13b>
c001b690:	ba 50 03 00 00       	mov    edx,0x350
c001b695:	01 d0                	add    eax,edx
c001b697:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b69a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b69d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b69f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b6a2:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b6a9:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b6ad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6b0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b6b3:	89 10                	mov    DWORD PTR [eax],edx
c001b6b5:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b6b8:	eb 86                	jmp    c001b640 <apicOpen()+0xe6>
c001b6ba:	90                   	nop
c001b6bb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b6be:	c9                   	leave  
c001b6bf:	c3                   	ret    

c001b6c0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b6c0:	55                   	push   ebp
c001b6c1:	89 e5                	mov    ebp,esp
c001b6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b6cc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b6cf:	72 1d                	jb     c001b6ee <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b6da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6dd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b6e3:	01 d0                	add    eax,edx
c001b6e5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b6e8:	73 04                	jae    c001b6ee <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b6ea:	b0 01                	mov    al,0x1
c001b6ec:	eb 02                	jmp    c001b6f0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b6ee:	b0 00                	mov    al,0x0
c001b6f0:	5d                   	pop    ebp
c001b6f1:	c3                   	ret    

c001b6f2 <IOAPIC::read(int)>:
c001b6f2:	55                   	push   ebp
c001b6f3:	89 e5                	mov    ebp,esp
c001b6f5:	83 ec 10             	sub    esp,0x10
c001b6f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6fb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b701:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b704:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b707:	31 d2                	xor    edx,edx
c001b709:	88 c2                	mov    dl,al
c001b70b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b70e:	89 10                	mov    DWORD PTR [eax],edx
c001b710:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b713:	83 c0 10             	add    eax,0x10
c001b716:	8b 00                	mov    eax,DWORD PTR [eax]
c001b718:	c9                   	leave  
c001b719:	c3                   	ret    

c001b71a <IOAPIC::open(int, int, void*)>:
c001b71a:	55                   	push   ebp
c001b71b:	89 e5                	mov    ebp,esp
c001b71d:	57                   	push   edi
c001b71e:	56                   	push   esi
c001b71f:	53                   	push   ebx
c001b720:	83 ec 04             	sub    esp,0x4
c001b723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b726:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b729:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b72f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b732:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b738:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b73f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b742:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b74b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b751:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b75b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b764:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b76a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b76d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b773:	89 c6                	mov    esi,eax
c001b775:	81 e6 ff 00 00 00    	and    esi,0xff
c001b77b:	89 d0                	mov    eax,edx
c001b77d:	ba 00 00 00 00       	mov    edx,0x0
c001b782:	89 c7                	mov    edi,eax
c001b784:	83 e7 ff             	and    edi,0xffffffff
c001b787:	89 f9                	mov    ecx,edi
c001b789:	89 d0                	mov    eax,edx
c001b78b:	25 ff 00 00 00       	and    eax,0xff
c001b790:	89 c3                	mov    ebx,eax
c001b792:	89 c8                	mov    eax,ecx
c001b794:	89 da                	mov    edx,ebx
c001b796:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b799:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b79c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b7a0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b7a4:	83 e0 00             	and    eax,0x0
c001b7a7:	09 d0                	or     eax,edx
c001b7a9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7b0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7b6:	8d 50 01             	lea    edx,[eax+0x1]
c001b7b9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7bc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b7c2:	31 d2                	xor    edx,edx
c001b7c4:	88 c2                	mov    dl,al
c001b7c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7c9:	83 c2 08             	add    edx,0x8
c001b7cc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b7d0:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b7d6:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b7dc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b7e0:	6a 01                	push   0x1
c001b7e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7e5:	e8 08 ff ff ff       	call   c001b6f2 <IOAPIC::read(int)>
c001b7ea:	83 c4 08             	add    esp,0x8
c001b7ed:	c1 f8 10             	sar    eax,0x10
c001b7f0:	25 ff 00 00 00       	and    eax,0xff
c001b7f5:	8d 50 01             	lea    edx,[eax+0x1]
c001b7f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7fb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b801:	b8 00 00 00 00       	mov    eax,0x0
c001b806:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b809:	5b                   	pop    ebx
c001b80a:	5e                   	pop    esi
c001b80b:	5f                   	pop    edi
c001b80c:	5d                   	pop    ebp
c001b80d:	c3                   	ret    

c001b80e <IOAPIC::write(int, int)>:
c001b80e:	55                   	push   ebp
c001b80f:	89 e5                	mov    ebp,esp
c001b811:	83 ec 10             	sub    esp,0x10
c001b814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b817:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b81d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b820:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b823:	31 d2                	xor    edx,edx
c001b825:	88 c2                	mov    dl,al
c001b827:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b82a:	89 10                	mov    DWORD PTR [eax],edx
c001b82c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b82f:	8d 50 10             	lea    edx,[eax+0x10]
c001b832:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b835:	89 02                	mov    DWORD PTR [edx],eax
c001b837:	90                   	nop
c001b838:	c9                   	leave  
c001b839:	c3                   	ret    

c001b83a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b83a:	55                   	push   ebp
c001b83b:	89 e5                	mov    ebp,esp
c001b83d:	53                   	push   ebx
c001b83e:	83 ec 2c             	sub    esp,0x2c
c001b841:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b844:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b847:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b84a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b84d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b850:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b853:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b856:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b859:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b85c:	88 d8                	mov    al,bl
c001b85e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b861:	88 c8                	mov    al,cl
c001b863:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b866:	88 d0                	mov    al,dl
c001b868:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b86b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b86e:	25 ff 00 00 00       	and    eax,0xff
c001b873:	83 c0 08             	add    eax,0x8
c001b876:	01 c0                	add    eax,eax
c001b878:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b87b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b87e:	25 ff 00 00 00       	and    eax,0xff
c001b883:	83 c0 08             	add    eax,0x8
c001b886:	01 c0                	add    eax,eax
c001b888:	40                   	inc    eax
c001b889:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b88c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b88f:	50                   	push   eax
c001b890:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b893:	e8 5a fe ff ff       	call   c001b6f2 <IOAPIC::read(int)>
c001b898:	83 c4 08             	add    esp,0x8
c001b89b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b89e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b8a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b8a8:	c1 e0 18             	shl    eax,0x18
c001b8ab:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b8ae:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b8b1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8b4:	52                   	push   edx
c001b8b5:	50                   	push   eax
c001b8b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8b9:	e8 50 ff ff ff       	call   c001b80e <IOAPIC::write(int, int)>
c001b8be:	83 c4 0c             	add    esp,0xc
c001b8c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8c4:	50                   	push   eax
c001b8c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8c8:	e8 25 fe ff ff       	call   c001b6f2 <IOAPIC::read(int)>
c001b8cd:	83 c4 08             	add    esp,0x8
c001b8d0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b8d3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b8da:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b8e1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b8e8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b8ec:	74 09                	je     c001b8f7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b8ee:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b8f5:	eb 07                	jmp    c001b8fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b8f7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b8fe:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b902:	74 09                	je     c001b90d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b904:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b90b:	eb 07                	jmp    c001b914 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b90d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b914:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b91b:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b91e:	25 ff 00 00 00       	and    eax,0xff
c001b923:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b926:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b929:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b92c:	52                   	push   edx
c001b92d:	50                   	push   eax
c001b92e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b931:	e8 d8 fe ff ff       	call   c001b80e <IOAPIC::write(int, int)>
c001b936:	83 c4 0c             	add    esp,0xc
c001b939:	90                   	nop
c001b93a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b93d:	c9                   	leave  
c001b93e:	c3                   	ret    
c001b93f:	90                   	nop

c001b940 <APICTimer::close(int, int, void*)>:
c001b940:	b8 00 00 00 00       	mov    eax,0x0
c001b945:	c3                   	ret    
c001b946:	66 90                	xchg   ax,ax

c001b948 <apicTimerHandler(regs*, void*)>:
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b94f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b951:	b8 10 27 00 00       	mov    eax,0x2710
c001b956:	ba 00 00 00 00       	mov    edx,0x0
c001b95b:	f7 f1                	div    ecx
c001b95d:	83 ec 0c             	sub    esp,0xc
c001b960:	50                   	push   eax
c001b961:	e8 1a 1a ff ff       	call   c000d380 <timerHandler(unsigned int)>
c001b966:	83 c4 10             	add    esp,0x10
c001b969:	90                   	nop
c001b96a:	83 c4 0c             	add    esp,0xc
c001b96d:	c3                   	ret    
c001b96e:	66 90                	xchg   ax,ax

c001b970 <APICTimer::open(int, int, void*)>:
c001b970:	83 ec 0c             	sub    esp,0xc
c001b973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b977:	8b 00                	mov    eax,DWORD PTR [eax]
c001b979:	83 c0 24             	add    eax,0x24
c001b97c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b97e:	83 ec 08             	sub    esp,0x8
c001b981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b989:	ff d0                	call   eax
c001b98b:	83 c4 10             	add    esp,0x10
c001b98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b992:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b996:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9a4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b9aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9ae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b9b4:	83 ec 0c             	sub    esp,0xc
c001b9b7:	51                   	push   ecx
c001b9b8:	6a 01                	push   0x1
c001b9ba:	68 48 b9 01 c0       	push   0xc001b948
c001b9bf:	52                   	push   edx
c001b9c0:	50                   	push   eax
c001b9c1:	e8 92 00 ff ff       	call   c000ba58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9c6:	83 c4 20             	add    esp,0x20
c001b9c9:	89 c2                	mov    edx,eax
c001b9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9cf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9d5:	b8 00 00 00 00       	mov    eax,0x0
c001b9da:	83 c4 0c             	add    esp,0xc
c001b9dd:	c3                   	ret    
c001b9de:	66 90                	xchg   ax,ax

c001b9e0 <APICTimer::write(int)>:
c001b9e0:	83 ec 0c             	sub    esp,0xc
c001b9e3:	83 ec 0c             	sub    esp,0xc
c001b9e6:	68 a8 f8 01 c0       	push   0xc001f8a8
c001b9eb:	e8 ff 48 ff ff       	call   c00102ef <KePanic(char const*)>
c001b9f0:	83 c4 10             	add    esp,0x10
c001b9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba01:	90                   	nop
c001ba02:	83 c4 0c             	add    esp,0xc
c001ba05:	c3                   	ret    
c001ba06:	66 90                	xchg   ax,ax

c001ba08 <APICTimer::APICTimer()>:
c001ba08:	83 ec 0c             	sub    esp,0xc
c001ba0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0f:	83 ec 08             	sub    esp,0x8
c001ba12:	68 b8 f8 01 c0       	push   0xc001f8b8
c001ba17:	50                   	push   eax
c001ba18:	e8 97 18 ff ff       	call   c000d2b4 <Timer::Timer(char const*)>
c001ba1d:	83 c4 10             	add    esp,0x10
c001ba20:	ba cc f8 01 c0       	mov    edx,0xc001f8cc
c001ba25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba29:	89 10                	mov    DWORD PTR [eax],edx
c001ba2b:	90                   	nop
c001ba2c:	83 c4 0c             	add    esp,0xc
c001ba2f:	c3                   	ret    

c001ba30 <PIT::write(int)>:
c001ba30:	83 ec 10             	sub    esp,0x10
c001ba33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba45:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001ba4a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba4f:	99                   	cdq    
c001ba50:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba58:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ba5f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ba64:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ba68:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba6d:	ee                   	out    dx,al
c001ba6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba72:	25 ff 00 00 00       	and    eax,0xff
c001ba77:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ba7e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba82:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ba86:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ba8b:	ee                   	out    dx,al
c001ba8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba90:	c1 f8 08             	sar    eax,0x8
c001ba93:	25 ff 00 00 00       	and    eax,0xff
c001ba98:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ba9f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001baa3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001baa7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001baac:	ee                   	out    dx,al
c001baad:	90                   	nop
c001baae:	83 c4 10             	add    esp,0x10
c001bab1:	c3                   	ret    
c001bab2:	66 90                	xchg   ax,ax

c001bab4 <pitHandler(regs*, void*)>:
c001bab4:	83 ec 0c             	sub    esp,0xc
c001bab7:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001babd:	b8 10 27 00 00       	mov    eax,0x2710
c001bac2:	99                   	cdq    
c001bac3:	f7 f9                	idiv   ecx
c001bac5:	83 ec 0c             	sub    esp,0xc
c001bac8:	50                   	push   eax
c001bac9:	e8 b2 18 ff ff       	call   c000d380 <timerHandler(unsigned int)>
c001bace:	83 c4 10             	add    esp,0x10
c001bad1:	90                   	nop
c001bad2:	83 c4 0c             	add    esp,0xc
c001bad5:	c3                   	ret    
c001bad6:	66 90                	xchg   ax,ax

c001bad8 <PIT::open(int, int, void*)>:
c001bad8:	83 ec 0c             	sub    esp,0xc
c001badb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001badf:	8b 00                	mov    eax,DWORD PTR [eax]
c001bae1:	83 c0 24             	add    eax,0x24
c001bae4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bae6:	83 ec 08             	sub    esp,0x8
c001bae9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001baed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001baf1:	ff d0                	call   eax
c001baf3:	83 c4 10             	add    esp,0x10
c001baf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bafa:	83 ec 0c             	sub    esp,0xc
c001bafd:	6a 00                	push   0x0
c001baff:	6a 01                	push   0x1
c001bb01:	68 b4 ba 01 c0       	push   0xc001bab4
c001bb06:	6a 00                	push   0x0
c001bb08:	50                   	push   eax
c001bb09:	e8 4a ff fe ff       	call   c000ba58 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb0e:	83 c4 20             	add    esp,0x20
c001bb11:	89 c2                	mov    edx,eax
c001bb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb17:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb1d:	b8 00 00 00 00       	mov    eax,0x0
c001bb22:	83 c4 0c             	add    esp,0xc
c001bb25:	c3                   	ret    
c001bb26:	66 90                	xchg   ax,ax

c001bb28 <PIT::close(int, int, void*)>:
c001bb28:	83 ec 0c             	sub    esp,0xc
c001bb2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3d:	6a 01                	push   0x1
c001bb3f:	68 b4 ba 01 c0       	push   0xc001bab4
c001bb44:	6a 00                	push   0x0
c001bb46:	50                   	push   eax
c001bb47:	e8 42 ff fe ff       	call   c000ba8e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb4c:	83 c4 10             	add    esp,0x10
c001bb4f:	b8 00 00 00 00       	mov    eax,0x0
c001bb54:	83 c4 0c             	add    esp,0xc
c001bb57:	c3                   	ret    

c001bb58 <PIT::PIT()>:
c001bb58:	83 ec 0c             	sub    esp,0xc
c001bb5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5f:	83 ec 08             	sub    esp,0x8
c001bb62:	68 f4 f8 01 c0       	push   0xc001f8f4
c001bb67:	50                   	push   eax
c001bb68:	e8 47 17 ff ff       	call   c000d2b4 <Timer::Timer(char const*)>
c001bb6d:	83 c4 10             	add    esp,0x10
c001bb70:	ba 1c f9 01 c0       	mov    edx,0xc001f91c
c001bb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb79:	89 10                	mov    DWORD PTR [eax],edx
c001bb7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb85:	31 d2                	xor    edx,edx
c001bb87:	88 c2                	mov    dl,al
c001bb89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb8d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb98:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb9e:	31 d2                	xor    edx,edx
c001bba0:	88 c2                	mov    dl,al
c001bba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbaf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbb5:	8d 50 01             	lea    edx,[eax+0x1]
c001bbb8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bbbc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bbc2:	31 d2                	xor    edx,edx
c001bbc4:	88 c2                	mov    dl,al
c001bbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbca:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bbce:	83 e1 3f             	and    ecx,0x3f
c001bbd1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bbd5:	90                   	nop
c001bbd6:	83 c4 0c             	add    esp,0xc
c001bbd9:	c3                   	ret    
c001bbda:	66 90                	xchg   ax,ax
c001bbdc:	66 90                	xchg   ax,ax
c001bbde:	66 90                	xchg   ax,ax

c001bbe0 <avxDetect>:
c001bbe0:	b8 01 00 00 00       	mov    eax,0x1
c001bbe5:	0f a2                	cpuid  
c001bbe7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bbed:	74 15                	je     c001bc04 <avxDetect.noAVX>
c001bbef:	b8 01 00 00 00       	mov    eax,0x1
c001bbf4:	0f a2                	cpuid  
c001bbf6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bbfc:	74 06                	je     c001bc04 <avxDetect.noAVX>
c001bbfe:	b8 01 00 00 00       	mov    eax,0x1
c001bc03:	c3                   	ret    

c001bc04 <avxDetect.noAVX>:
c001bc04:	b8 00 00 00 00       	mov    eax,0x0
c001bc09:	c3                   	ret    

c001bc0a <avxSave>:
c001bc0a:	53                   	push   ebx
c001bc0b:	52                   	push   edx
c001bc0c:	31 c0                	xor    eax,eax
c001bc0e:	48                   	dec    eax
c001bc0f:	89 c2                	mov    edx,eax
c001bc11:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc15:	0f ae 23             	xsave  [ebx]
c001bc18:	5a                   	pop    edx
c001bc19:	5b                   	pop    ebx
c001bc1a:	c3                   	ret    

c001bc1b <avxLoad>:
c001bc1b:	53                   	push   ebx
c001bc1c:	52                   	push   edx
c001bc1d:	31 c0                	xor    eax,eax
c001bc1f:	48                   	dec    eax
c001bc20:	89 c2                	mov    edx,eax
c001bc22:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc26:	0f ae 2b             	xrstor [ebx]
c001bc29:	5a                   	pop    edx
c001bc2a:	5b                   	pop    ebx
c001bc2b:	c3                   	ret    

c001bc2c <avxInit>:
c001bc2c:	e8 b7 02 00 00       	call   c001bee8 <sseInit>
c001bc31:	50                   	push   eax
c001bc32:	51                   	push   ecx
c001bc33:	0f 20 e0             	mov    eax,cr4
c001bc36:	0d 00 00 04 00       	or     eax,0x40000
c001bc3b:	0f 22 e0             	mov    cr4,eax
c001bc3e:	31 c9                	xor    ecx,ecx
c001bc40:	0f 01 d0             	xgetbv 
c001bc43:	0d 07 00 00 00       	or     eax,0x7
c001bc48:	0f 01 d1             	xsetbv 
c001bc4b:	59                   	pop    ecx
c001bc4c:	58                   	pop    eax
c001bc4d:	c3                   	ret    

c001bc4e <avxClose>:
c001bc4e:	c3                   	ret    

c001bc4f <wouldSheSayYes>:
c001bc4f:	c3                   	ret    
c001bc50:	49                   	dec    ecx
c001bc51:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc55:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc59:	75 20                	jne    c001bc7b <isr0+0xb>
c001bc5b:	4e                   	dec    esi
c001bc5c:	79 61                	jns    c001bcbf <isr7+0x3>
c001bc5e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bc63:	66 90                	xchg   ax,ax
c001bc65:	66 90                	xchg   ax,ax
c001bc67:	66 90                	xchg   ax,ax
c001bc69:	66 90                	xchg   ax,ax
c001bc6b:	66 90                	xchg   ax,ax
c001bc6d:	66 90                	xchg   ax,ax
c001bc6f:	90                   	nop

c001bc70 <isr0>:
c001bc70:	fa                   	cli    
c001bc71:	68 00 00 00 00       	push   0x0
c001bc76:	68 00 00 00 00       	push   0x0
c001bc7b:	e9 44 01 00 00       	jmp    c001bdc4 <int_common_stub>

c001bc80 <isr1>:
c001bc80:	fa                   	cli    
c001bc81:	6a 00                	push   0x0
c001bc83:	6a 01                	push   0x1
c001bc85:	e9 3a 01 00 00       	jmp    c001bdc4 <int_common_stub>

c001bc8a <isr2>:
c001bc8a:	fa                   	cli    
c001bc8b:	6a 00                	push   0x0
c001bc8d:	6a 02                	push   0x2
c001bc8f:	e9 30 01 00 00       	jmp    c001bdc4 <int_common_stub>

c001bc94 <isr3>:
c001bc94:	fa                   	cli    
c001bc95:	6a 00                	push   0x0
c001bc97:	6a 03                	push   0x3
c001bc99:	e9 26 01 00 00       	jmp    c001bdc4 <int_common_stub>

c001bc9e <isr4>:
c001bc9e:	fa                   	cli    
c001bc9f:	6a 00                	push   0x0
c001bca1:	6a 04                	push   0x4
c001bca3:	e9 1c 01 00 00       	jmp    c001bdc4 <int_common_stub>

c001bca8 <isr5>:
c001bca8:	fa                   	cli    
c001bca9:	6a 00                	push   0x0
c001bcab:	6a 05                	push   0x5
c001bcad:	e9 12 01 00 00       	jmp    c001bdc4 <int_common_stub>

c001bcb2 <isr6>:
c001bcb2:	fa                   	cli    
c001bcb3:	6a 00                	push   0x0
c001bcb5:	6a 06                	push   0x6
c001bcb7:	e9 08 01 00 00       	jmp    c001bdc4 <int_common_stub>

c001bcbc <isr7>:
c001bcbc:	fa                   	cli    
c001bcbd:	6a 00                	push   0x0
c001bcbf:	6a 07                	push   0x7
c001bcc1:	e9 fe 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bcc6 <isr8>:
c001bcc6:	fa                   	cli    
c001bcc7:	6a 08                	push   0x8
c001bcc9:	e9 f6 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bcce <isr9>:
c001bcce:	fa                   	cli    
c001bccf:	6a 00                	push   0x0
c001bcd1:	6a 09                	push   0x9
c001bcd3:	e9 ec 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bcd8 <isr10>:
c001bcd8:	fa                   	cli    
c001bcd9:	6a 0a                	push   0xa
c001bcdb:	e9 e4 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bce0 <isr11>:
c001bce0:	fa                   	cli    
c001bce1:	6a 0b                	push   0xb
c001bce3:	e9 dc 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bce8 <isr12>:
c001bce8:	fa                   	cli    
c001bce9:	6a 0c                	push   0xc
c001bceb:	e9 d4 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bcf0 <isr13>:
c001bcf0:	fa                   	cli    
c001bcf1:	6a 0d                	push   0xd
c001bcf3:	e9 cc 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bcf8 <isr14>:
c001bcf8:	fa                   	cli    
c001bcf9:	6a 0e                	push   0xe
c001bcfb:	e9 c4 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd00 <isr15>:
c001bd00:	fa                   	cli    
c001bd01:	6a 00                	push   0x0
c001bd03:	6a 0f                	push   0xf
c001bd05:	e9 ba 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd0a <isr16>:
c001bd0a:	fa                   	cli    
c001bd0b:	6a 00                	push   0x0
c001bd0d:	6a 10                	push   0x10
c001bd0f:	e9 b0 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd14 <isr17>:
c001bd14:	fa                   	cli    
c001bd15:	6a 00                	push   0x0
c001bd17:	6a 11                	push   0x11
c001bd19:	e9 a6 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd1e <isr18>:
c001bd1e:	fa                   	cli    
c001bd1f:	6a 00                	push   0x0
c001bd21:	6a 12                	push   0x12
c001bd23:	e9 9c 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd28 <irq3>:
c001bd28:	fa                   	cli    
c001bd29:	6a 00                	push   0x0
c001bd2b:	6a 23                	push   0x23
c001bd2d:	e9 92 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd32 <irq4>:
c001bd32:	fa                   	cli    
c001bd33:	6a 00                	push   0x0
c001bd35:	6a 24                	push   0x24
c001bd37:	e9 88 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd3c <irq5>:
c001bd3c:	fa                   	cli    
c001bd3d:	6a 00                	push   0x0
c001bd3f:	6a 25                	push   0x25
c001bd41:	e9 7e 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd46 <irq6>:
c001bd46:	fa                   	cli    
c001bd47:	6a 00                	push   0x0
c001bd49:	6a 26                	push   0x26
c001bd4b:	e9 74 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd50 <irq7>:
c001bd50:	fa                   	cli    
c001bd51:	6a 00                	push   0x0
c001bd53:	6a 27                	push   0x27
c001bd55:	e9 6a 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd5a <irq8>:
c001bd5a:	fa                   	cli    
c001bd5b:	6a 00                	push   0x0
c001bd5d:	6a 28                	push   0x28
c001bd5f:	e9 60 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd64 <irq9>:
c001bd64:	fa                   	cli    
c001bd65:	6a 00                	push   0x0
c001bd67:	6a 29                	push   0x29
c001bd69:	e9 56 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd6e <irq10>:
c001bd6e:	fa                   	cli    
c001bd6f:	6a 00                	push   0x0
c001bd71:	6a 2a                	push   0x2a
c001bd73:	e9 4c 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd78 <irq11>:
c001bd78:	fa                   	cli    
c001bd79:	6a 00                	push   0x0
c001bd7b:	6a 2b                	push   0x2b
c001bd7d:	e9 42 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd82 <irq12>:
c001bd82:	fa                   	cli    
c001bd83:	6a 00                	push   0x0
c001bd85:	6a 2c                	push   0x2c
c001bd87:	e9 38 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd8c <irq13>:
c001bd8c:	fa                   	cli    
c001bd8d:	6a 00                	push   0x0
c001bd8f:	6a 2d                	push   0x2d
c001bd91:	e9 2e 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bd96 <irq14>:
c001bd96:	fa                   	cli    
c001bd97:	6a 00                	push   0x0
c001bd99:	6a 2e                	push   0x2e
c001bd9b:	e9 24 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bda0 <irq15>:
c001bda0:	fa                   	cli    
c001bda1:	6a 00                	push   0x0
c001bda3:	6a 2f                	push   0x2f
c001bda5:	e9 1a 00 00 00       	jmp    c001bdc4 <int_common_stub>

c001bdaa <irq1>:
c001bdaa:	fa                   	cli    
c001bdab:	6a 00                	push   0x0
c001bdad:	6a 21                	push   0x21
c001bdaf:	eb 13                	jmp    c001bdc4 <int_common_stub>

c001bdb1 <irq2>:
c001bdb1:	fa                   	cli    
c001bdb2:	6a 00                	push   0x0
c001bdb4:	6a 22                	push   0x22
c001bdb6:	eb 0c                	jmp    c001bdc4 <int_common_stub>

c001bdb8 <isr96>:
c001bdb8:	6a 00                	push   0x0
c001bdba:	6a 60                	push   0x60
c001bdbc:	fb                   	sti    
c001bdbd:	eb 37                	jmp    c001bdf6 <syscall_common_stub>

c001bdbf <irq0>:
c001bdbf:	fa                   	cli    
c001bdc0:	6a 00                	push   0x0
c001bdc2:	6a 20                	push   0x20

c001bdc4 <int_common_stub>:
c001bdc4:	60                   	pusha  
c001bdc5:	1e                   	push   ds
c001bdc6:	06                   	push   es
c001bdc7:	0f a0                	push   fs
c001bdc9:	0f a8                	push   gs
c001bdcb:	66 b8 10 00          	mov    ax,0x10
c001bdcf:	66 8e d8             	mov    ds,ax
c001bdd2:	66 8e c0             	mov    es,ax
c001bdd5:	66 8e e0             	mov    fs,ax
c001bdd8:	66 8e e8             	mov    gs,ax
c001bddb:	54                   	push   esp
c001bddc:	fc                   	cld    
c001bddd:	e8 76 01 ff ff       	call   c000bf58 <int_handler>
c001bde2:	81 c4 04 00 00 00    	add    esp,0x4
c001bde8:	0f a9                	pop    gs
c001bdea:	0f a1                	pop    fs
c001bdec:	07                   	pop    es
c001bded:	1f                   	pop    ds
c001bdee:	61                   	popa   
c001bdef:	81 c4 08 00 00 00    	add    esp,0x8
c001bdf5:	cf                   	iret   

c001bdf6 <syscall_common_stub>:
c001bdf6:	60                   	pusha  
c001bdf7:	1e                   	push   ds
c001bdf8:	06                   	push   es
c001bdf9:	0f a0                	push   fs
c001bdfb:	0f a8                	push   gs
c001bdfd:	66 b8 10 00          	mov    ax,0x10
c001be01:	66 8e d8             	mov    ds,ax
c001be04:	66 8e c0             	mov    es,ax
c001be07:	66 8e e0             	mov    fs,ax
c001be0a:	66 8e e8             	mov    gs,ax
c001be0d:	54                   	push   esp
c001be0e:	fc                   	cld    
c001be0f:	e8 44 01 ff ff       	call   c000bf58 <int_handler>
c001be14:	81 c4 04 00 00 00    	add    esp,0x4
c001be1a:	0f a9                	pop    gs
c001be1c:	0f a1                	pop    fs
c001be1e:	07                   	pop    es
c001be1f:	1f                   	pop    ds
c001be20:	e8 1e 4a ff ff       	call   c0010843 <KiCheckSignalZ>
c001be25:	3d 00 00 00 00       	cmp    eax,0x0
c001be2a:	74 1d                	je     c001be49 <syscall_common_stub.skipSignals>
c001be2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001be30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001be34:	89 e3                	mov    ebx,esp
c001be36:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001be39:	51                   	push   ecx
c001be3a:	68 51 be 01 c0       	push   0xc001be51
c001be3f:	89 dc                	mov    esp,ebx
c001be41:	61                   	popa   
c001be42:	81 c4 08 00 00 00    	add    esp,0x8
c001be48:	cf                   	iret   

c001be49 <syscall_common_stub.skipSignals>:
c001be49:	61                   	popa   
c001be4a:	81 c4 08 00 00 00    	add    esp,0x8
c001be50:	cf                   	iret   

c001be51 <irq16>:
c001be51:	fa                   	cli    
c001be52:	6a 00                	push   0x0
c001be54:	6a 30                	push   0x30
c001be56:	e9 69 ff ff ff       	jmp    c001bdc4 <int_common_stub>

c001be5b <irq17>:
c001be5b:	fa                   	cli    
c001be5c:	6a 00                	push   0x0
c001be5e:	6a 31                	push   0x31
c001be60:	e9 5f ff ff ff       	jmp    c001bdc4 <int_common_stub>

c001be65 <irq18>:
c001be65:	fa                   	cli    
c001be66:	6a 00                	push   0x0
c001be68:	6a 32                	push   0x32
c001be6a:	e9 55 ff ff ff       	jmp    c001bdc4 <int_common_stub>

c001be6f <irq19>:
c001be6f:	fa                   	cli    
c001be70:	6a 00                	push   0x0
c001be72:	6a 33                	push   0x33
c001be74:	e9 4b ff ff ff       	jmp    c001bdc4 <int_common_stub>

c001be79 <irq20>:
c001be79:	fa                   	cli    
c001be7a:	6a 00                	push   0x0
c001be7c:	6a 34                	push   0x34
c001be7e:	e9 41 ff ff ff       	jmp    c001bdc4 <int_common_stub>

c001be83 <irq21>:
c001be83:	fa                   	cli    
c001be84:	6a 00                	push   0x0
c001be86:	6a 35                	push   0x35
c001be88:	e9 37 ff ff ff       	jmp    c001bdc4 <int_common_stub>

c001be8d <irq22>:
c001be8d:	fa                   	cli    
c001be8e:	6a 00                	push   0x0
c001be90:	6a 36                	push   0x36
c001be92:	e9 2d ff ff ff       	jmp    c001bdc4 <int_common_stub>

c001be97 <irq23>:
c001be97:	fa                   	cli    
c001be98:	6a 00                	push   0x0
c001be9a:	6a 37                	push   0x37
c001be9c:	e9 23 ff ff ff       	jmp    c001bdc4 <int_common_stub>
c001bea1:	66 90                	xchg   ax,ax
c001bea3:	66 90                	xchg   ax,ax
c001bea5:	66 90                	xchg   ax,ax
c001bea7:	66 90                	xchg   ax,ax
c001bea9:	66 90                	xchg   ax,ax
c001beab:	66 90                	xchg   ax,ax
c001bead:	66 90                	xchg   ax,ax
c001beaf:	90                   	nop

c001beb0 <i386GetRDRAND>:
c001beb0:	b9 64 00 00 00       	mov    ecx,0x64

c001beb5 <retry>:
c001beb5:	0f c7 f0             	rdrand eax
c001beb8:	72 05                	jb     c001bebf <retry.done>
c001beba:	e2 f9                	loop   c001beb5 <retry>

c001bebc <retry.fail>:
c001bebc:	31 c0                	xor    eax,eax
c001bebe:	c3                   	ret    

c001bebf <retry.done>:
c001bebf:	c3                   	ret    

c001bec0 <absolutelyNoChanceInHell>:
c001bec0:	b8 01 00 00 00       	mov    eax,0x1
c001bec5:	0f a2                	cpuid  
c001bec7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001becd:	74 06                	je     c001bed5 <sseDetect.noSSE>
c001becf:	b8 01 00 00 00       	mov    eax,0x1
c001bed4:	c3                   	ret    

c001bed5 <sseDetect.noSSE>:
c001bed5:	31 c0                	xor    eax,eax
c001bed7:	c3                   	ret    

c001bed8 <sseSave>:
c001bed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bedc:	0f ae 00             	fxsave [eax]
c001bedf:	c3                   	ret    

c001bee0 <sseLoad>:
c001bee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bee4:	0f ae 08             	fxrstor [eax]
c001bee7:	c3                   	ret    

c001bee8 <sseInit>:
c001bee8:	e8 42 00 00 00       	call   c001bf2f <x87Init>
c001beed:	0f 20 e0             	mov    eax,cr4
c001bef0:	66 0d 00 06          	or     ax,0x600
c001bef4:	0f 22 e0             	mov    cr4,eax
c001bef7:	c3                   	ret    

c001bef8 <sseClose>:
c001bef8:	c3                   	ret    
c001bef9:	66 90                	xchg   ax,ax
c001befb:	66 90                	xchg   ax,ax
c001befd:	66 90                	xchg   ax,ax
c001beff:	90                   	nop

c001bf00 <value_37F>:
c001bf00:	7f 03                	jg     c001bf05 <value_37A+0x1>

c001bf02 <value_37E>:
c001bf02:	7e 03                	jle    c001bf07 <x87Detect+0x1>

c001bf04 <value_37A>:
c001bf04:	7a 03                	jp     c001bf09 <x87Detect+0x3>

c001bf06 <x87Detect>:
c001bf06:	b8 01 00 00 00       	mov    eax,0x1
c001bf0b:	0f a2                	cpuid  
c001bf0d:	f7 c2 01 00 00 00    	test   edx,0x1
c001bf13:	74 06                	je     c001bf1b <x87Detect.nox87>
c001bf15:	b8 01 00 00 00       	mov    eax,0x1
c001bf1a:	c3                   	ret    

c001bf1b <x87Detect.nox87>:
c001bf1b:	b8 00 00 00 00       	mov    eax,0x0
c001bf20:	c3                   	ret    

c001bf21 <x87Save>:
c001bf21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf25:	dd 30                	fnsave [eax]
c001bf27:	c3                   	ret    

c001bf28 <x87Load>:
c001bf28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf2c:	dd 20                	frstor [eax]
c001bf2e:	c3                   	ret    

c001bf2f <x87Init>:
c001bf2f:	0f 20 c0             	mov    eax,cr0
c001bf32:	66 25 fb ff          	and    ax,0xfffb
c001bf36:	66 0d 22 00          	or     ax,0x22
c001bf3a:	0f 22 c0             	mov    cr0,eax
c001bf3d:	db e3                	fninit 
c001bf3f:	0f 06                	clts   
c001bf41:	d9 2d 04 bf 01 c0    	fldcw  WORD PTR ds:0xc001bf04
c001bf47:	c3                   	ret    

c001bf48 <x87Close>:
c001bf48:	c3                   	ret    
c001bf49:	66 90                	xchg   ax,ax
c001bf4b:	90                   	nop

c001bf4c <__do_global_ctors_aux>:
c001bf4c:	a1 fc ce 01 c0       	mov    eax,ds:0xc001cefc
c001bf51:	83 f8 ff             	cmp    eax,0xffffffff
c001bf54:	74 1a                	je     c001bf70 <__do_global_ctors_aux+0x24>
c001bf56:	55                   	push   ebp
c001bf57:	89 e5                	mov    ebp,esp
c001bf59:	53                   	push   ebx
c001bf5a:	52                   	push   edx
c001bf5b:	bb fc ce 01 c0       	mov    ebx,0xc001cefc
c001bf60:	ff d0                	call   eax
c001bf62:	83 eb 04             	sub    ebx,0x4
c001bf65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf67:	83 f8 ff             	cmp    eax,0xffffffff
c001bf6a:	75 f4                	jne    c001bf60 <__do_global_ctors_aux+0x14>
c001bf6c:	58                   	pop    eax
c001bf6d:	5b                   	pop    ebx
c001bf6e:	5d                   	pop    ebp
c001bf6f:	c3                   	ret    
c001bf70:	c3                   	ret    
c001bf71:	66 90                	xchg   ax,ax
c001bf73:	90                   	nop

c001bf74 <__divdi3>:
c001bf74:	55                   	push   ebp
c001bf75:	57                   	push   edi
c001bf76:	56                   	push   esi
c001bf77:	53                   	push   ebx
c001bf78:	83 ec 1c             	sub    esp,0x1c
c001bf7b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf83:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf86:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf92:	85 db                	test   ebx,ebx
c001bf94:	0f 88 8e 00 00 00    	js     c001c028 <__divdi3+0xb4>
c001bf9a:	89 dd                	mov    ebp,ebx
c001bf9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bfa4:	89 d3                	mov    ebx,edx
c001bfa6:	85 d2                	test   edx,edx
c001bfa8:	79 0d                	jns    c001bfb7 <__divdi3+0x43>
c001bfaa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bfae:	f7 d8                	neg    eax
c001bfb0:	83 d2 00             	adc    edx,0x0
c001bfb3:	f7 da                	neg    edx
c001bfb5:	89 d3                	mov    ebx,edx
c001bfb7:	89 c7                	mov    edi,eax
c001bfb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfbc:	85 db                	test   ebx,ebx
c001bfbe:	75 48                	jne    c001c008 <__divdi3+0x94>
c001bfc0:	39 ef                	cmp    edi,ebp
c001bfc2:	76 24                	jbe    c001bfe8 <__divdi3+0x74>
c001bfc4:	89 ea                	mov    edx,ebp
c001bfc6:	f7 f7                	div    edi
c001bfc8:	89 c1                	mov    ecx,eax
c001bfca:	31 f6                	xor    esi,esi
c001bfcc:	89 c8                	mov    eax,ecx
c001bfce:	89 f2                	mov    edx,esi
c001bfd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfd4:	85 c9                	test   ecx,ecx
c001bfd6:	74 07                	je     c001bfdf <__divdi3+0x6b>
c001bfd8:	f7 d8                	neg    eax
c001bfda:	83 d2 00             	adc    edx,0x0
c001bfdd:	f7 da                	neg    edx
c001bfdf:	83 c4 1c             	add    esp,0x1c
c001bfe2:	5b                   	pop    ebx
c001bfe3:	5e                   	pop    esi
c001bfe4:	5f                   	pop    edi
c001bfe5:	5d                   	pop    ebp
c001bfe6:	c3                   	ret    
c001bfe7:	90                   	nop
c001bfe8:	85 ff                	test   edi,edi
c001bfea:	75 0b                	jne    c001bff7 <__divdi3+0x83>
c001bfec:	b8 01 00 00 00       	mov    eax,0x1
c001bff1:	31 d2                	xor    edx,edx
c001bff3:	f7 f3                	div    ebx
c001bff5:	89 c7                	mov    edi,eax
c001bff7:	31 d2                	xor    edx,edx
c001bff9:	89 e8                	mov    eax,ebp
c001bffb:	f7 f7                	div    edi
c001bffd:	89 c6                	mov    esi,eax
c001bfff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c002:	f7 f7                	div    edi
c001c004:	89 c1                	mov    ecx,eax
c001c006:	eb c4                	jmp    c001bfcc <__divdi3+0x58>
c001c008:	39 eb                	cmp    ebx,ebp
c001c00a:	77 3c                	ja     c001c048 <__divdi3+0xd4>
c001c00c:	0f bd f3             	bsr    esi,ebx
c001c00f:	83 f6 1f             	xor    esi,0x1f
c001c012:	75 40                	jne    c001c054 <__divdi3+0xe0>
c001c014:	39 eb                	cmp    ebx,ebp
c001c016:	72 09                	jb     c001c021 <__divdi3+0xad>
c001c018:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c01b:	0f 87 97 00 00 00    	ja     c001c0b8 <__divdi3+0x144>
c001c021:	b9 01 00 00 00       	mov    ecx,0x1
c001c026:	eb a4                	jmp    c001bfcc <__divdi3+0x58>
c001c028:	f7 d9                	neg    ecx
c001c02a:	83 d3 00             	adc    ebx,0x0
c001c02d:	f7 db                	neg    ebx
c001c02f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c032:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c036:	89 dd                	mov    ebp,ebx
c001c038:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c040:	e9 5f ff ff ff       	jmp    c001bfa4 <__divdi3+0x30>
c001c045:	8d 76 00             	lea    esi,[esi+0x0]
c001c048:	31 f6                	xor    esi,esi
c001c04a:	31 c9                	xor    ecx,ecx
c001c04c:	e9 7b ff ff ff       	jmp    c001bfcc <__divdi3+0x58>
c001c051:	8d 76 00             	lea    esi,[esi+0x0]
c001c054:	b8 20 00 00 00       	mov    eax,0x20
c001c059:	29 f0                	sub    eax,esi
c001c05b:	89 f1                	mov    ecx,esi
c001c05d:	d3 e3                	shl    ebx,cl
c001c05f:	89 fa                	mov    edx,edi
c001c061:	88 c1                	mov    cl,al
c001c063:	d3 ea                	shr    edx,cl
c001c065:	09 da                	or     edx,ebx
c001c067:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c06b:	89 f1                	mov    ecx,esi
c001c06d:	d3 e7                	shl    edi,cl
c001c06f:	89 eb                	mov    ebx,ebp
c001c071:	88 c1                	mov    cl,al
c001c073:	d3 eb                	shr    ebx,cl
c001c075:	89 f1                	mov    ecx,esi
c001c077:	d3 e5                	shl    ebp,cl
c001c079:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c07c:	88 c1                	mov    cl,al
c001c07e:	d3 ea                	shr    edx,cl
c001c080:	09 d5                	or     ebp,edx
c001c082:	89 e8                	mov    eax,ebp
c001c084:	89 da                	mov    edx,ebx
c001c086:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c08a:	89 d3                	mov    ebx,edx
c001c08c:	89 c5                	mov    ebp,eax
c001c08e:	f7 e7                	mul    edi
c001c090:	39 d3                	cmp    ebx,edx
c001c092:	72 18                	jb     c001c0ac <__divdi3+0x138>
c001c094:	74 0a                	je     c001c0a0 <__divdi3+0x12c>
c001c096:	89 e9                	mov    ecx,ebp
c001c098:	31 f6                	xor    esi,esi
c001c09a:	e9 2d ff ff ff       	jmp    c001bfcc <__divdi3+0x58>
c001c09f:	90                   	nop
c001c0a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c0a3:	89 f1                	mov    ecx,esi
c001c0a5:	d3 e7                	shl    edi,cl
c001c0a7:	39 c7                	cmp    edi,eax
c001c0a9:	73 eb                	jae    c001c096 <__divdi3+0x122>
c001c0ab:	90                   	nop
c001c0ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c0af:	31 f6                	xor    esi,esi
c001c0b1:	e9 16 ff ff ff       	jmp    c001bfcc <__divdi3+0x58>
c001c0b6:	66 90                	xchg   ax,ax
c001c0b8:	31 c9                	xor    ecx,ecx
c001c0ba:	e9 0d ff ff ff       	jmp    c001bfcc <__divdi3+0x58>
c001c0bf:	90                   	nop

c001c0c0 <__moddi3>:
c001c0c0:	55                   	push   ebp
c001c0c1:	57                   	push   edi
c001c0c2:	56                   	push   esi
c001c0c3:	53                   	push   ebx
c001c0c4:	83 ec 2c             	sub    esp,0x2c
c001c0c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c0cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c0cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c0d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c0d7:	85 db                	test   ebx,ebx
c001c0d9:	0f 88 85 00 00 00    	js     c001c164 <__moddi3+0xa4>
c001c0df:	89 de                	mov    esi,ebx
c001c0e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0e9:	89 d7                	mov    edi,edx
c001c0eb:	85 d2                	test   edx,edx
c001c0ed:	79 09                	jns    c001c0f8 <__moddi3+0x38>
c001c0ef:	f7 d8                	neg    eax
c001c0f1:	83 d2 00             	adc    edx,0x0
c001c0f4:	f7 da                	neg    edx
c001c0f6:	89 d7                	mov    edi,edx
c001c0f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0fc:	89 cd                	mov    ebp,ecx
c001c0fe:	85 ff                	test   edi,edi
c001c100:	75 52                	jne    c001c154 <__moddi3+0x94>
c001c102:	89 c3                	mov    ebx,eax
c001c104:	39 f0                	cmp    eax,esi
c001c106:	76 24                	jbe    c001c12c <__moddi3+0x6c>
c001c108:	89 c8                	mov    eax,ecx
c001c10a:	89 f2                	mov    edx,esi
c001c10c:	f7 f3                	div    ebx
c001c10e:	89 d6                	mov    esi,edx
c001c110:	89 f0                	mov    eax,esi
c001c112:	31 d2                	xor    edx,edx
c001c114:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c118:	85 c9                	test   ecx,ecx
c001c11a:	74 07                	je     c001c123 <__moddi3+0x63>
c001c11c:	f7 d8                	neg    eax
c001c11e:	83 d2 00             	adc    edx,0x0
c001c121:	f7 da                	neg    edx
c001c123:	83 c4 2c             	add    esp,0x2c
c001c126:	5b                   	pop    ebx
c001c127:	5e                   	pop    esi
c001c128:	5f                   	pop    edi
c001c129:	5d                   	pop    ebp
c001c12a:	c3                   	ret    
c001c12b:	90                   	nop
c001c12c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c130:	85 db                	test   ebx,ebx
c001c132:	75 0d                	jne    c001c141 <__moddi3+0x81>
c001c134:	b8 01 00 00 00       	mov    eax,0x1
c001c139:	31 d2                	xor    edx,edx
c001c13b:	f7 f7                	div    edi
c001c13d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c141:	89 f0                	mov    eax,esi
c001c143:	31 d2                	xor    edx,edx
c001c145:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c149:	f7 f7                	div    edi
c001c14b:	89 e8                	mov    eax,ebp
c001c14d:	f7 f7                	div    edi
c001c14f:	89 d6                	mov    esi,edx
c001c151:	eb bd                	jmp    c001c110 <__moddi3+0x50>
c001c153:	90                   	nop
c001c154:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c158:	39 f7                	cmp    edi,esi
c001c15a:	76 20                	jbe    c001c17c <__moddi3+0xbc>
c001c15c:	89 c8                	mov    eax,ecx
c001c15e:	89 f2                	mov    edx,esi
c001c160:	eb b2                	jmp    c001c114 <__moddi3+0x54>
c001c162:	66 90                	xchg   ax,ax
c001c164:	f7 d9                	neg    ecx
c001c166:	83 d3 00             	adc    ebx,0x0
c001c169:	f7 db                	neg    ebx
c001c16b:	89 de                	mov    esi,ebx
c001c16d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c175:	e9 6f ff ff ff       	jmp    c001c0e9 <__moddi3+0x29>
c001c17a:	66 90                	xchg   ax,ax
c001c17c:	0f bd c7             	bsr    eax,edi
c001c17f:	83 f0 1f             	xor    eax,0x1f
c001c182:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c186:	75 24                	jne    c001c1ac <__moddi3+0xec>
c001c188:	39 f7                	cmp    edi,esi
c001c18a:	72 06                	jb     c001c192 <__moddi3+0xd2>
c001c18c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c190:	77 0c                	ja     c001c19e <__moddi3+0xde>
c001c192:	89 e9                	mov    ecx,ebp
c001c194:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c198:	19 fe                	sbb    esi,edi
c001c19a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c19e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c1a2:	89 f2                	mov    edx,esi
c001c1a4:	e9 6b ff ff ff       	jmp    c001c114 <__moddi3+0x54>
c001c1a9:	8d 76 00             	lea    esi,[esi+0x0]
c001c1ac:	b8 20 00 00 00       	mov    eax,0x20
c001c1b1:	89 c2                	mov    edx,eax
c001c1b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c1b7:	29 da                	sub    edx,ebx
c001c1b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c1bd:	88 d9                	mov    cl,bl
c001c1bf:	d3 e7                	shl    edi,cl
c001c1c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1c5:	88 d1                	mov    cl,dl
c001c1c7:	d3 e8                	shr    eax,cl
c001c1c9:	09 c7                	or     edi,eax
c001c1cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c1cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c1d3:	89 d8                	mov    eax,ebx
c001c1d5:	88 d9                	mov    cl,bl
c001c1d7:	d3 e7                	shl    edi,cl
c001c1d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1dd:	89 f3                	mov    ebx,esi
c001c1df:	88 d1                	mov    cl,dl
c001c1e1:	d3 eb                	shr    ebx,cl
c001c1e3:	89 c7                	mov    edi,eax
c001c1e5:	88 c1                	mov    cl,al
c001c1e7:	d3 e6                	shl    esi,cl
c001c1e9:	89 e8                	mov    eax,ebp
c001c1eb:	88 d1                	mov    cl,dl
c001c1ed:	d3 e8                	shr    eax,cl
c001c1ef:	09 f0                	or     eax,esi
c001c1f1:	89 f9                	mov    ecx,edi
c001c1f3:	d3 e5                	shl    ebp,cl
c001c1f5:	89 da                	mov    edx,ebx
c001c1f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c1fb:	89 d3                	mov    ebx,edx
c001c1fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c201:	89 c6                	mov    esi,eax
c001c203:	89 d1                	mov    ecx,edx
c001c205:	39 d3                	cmp    ebx,edx
c001c207:	72 27                	jb     c001c230 <__moddi3+0x170>
c001c209:	74 21                	je     c001c22c <__moddi3+0x16c>
c001c20b:	29 f5                	sub    ebp,esi
c001c20d:	19 cb                	sbb    ebx,ecx
c001c20f:	89 de                	mov    esi,ebx
c001c211:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c215:	d3 e6                	shl    esi,cl
c001c217:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c21b:	89 f9                	mov    ecx,edi
c001c21d:	d3 ed                	shr    ebp,cl
c001c21f:	09 ee                	or     esi,ebp
c001c221:	89 f0                	mov    eax,esi
c001c223:	d3 eb                	shr    ebx,cl
c001c225:	89 da                	mov    edx,ebx
c001c227:	e9 e8 fe ff ff       	jmp    c001c114 <__moddi3+0x54>
c001c22c:	39 c5                	cmp    ebp,eax
c001c22e:	73 db                	jae    c001c20b <__moddi3+0x14b>
c001c230:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c234:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c238:	89 d1                	mov    ecx,edx
c001c23a:	89 c6                	mov    esi,eax
c001c23c:	eb cd                	jmp    c001c20b <__moddi3+0x14b>
c001c23e:	66 90                	xchg   ax,ax

c001c240 <__udivdi3>:
c001c240:	55                   	push   ebp
c001c241:	57                   	push   edi
c001c242:	56                   	push   esi
c001c243:	53                   	push   ebx
c001c244:	83 ec 1c             	sub    esp,0x1c
c001c247:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c24b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c24f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c253:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c257:	85 d2                	test   edx,edx
c001c259:	75 41                	jne    c001c29c <__udivdi3+0x5c>
c001c25b:	39 f7                	cmp    edi,esi
c001c25d:	76 15                	jbe    c001c274 <__udivdi3+0x34>
c001c25f:	89 e8                	mov    eax,ebp
c001c261:	89 f2                	mov    edx,esi
c001c263:	f7 f7                	div    edi
c001c265:	31 db                	xor    ebx,ebx
c001c267:	89 da                	mov    edx,ebx
c001c269:	83 c4 1c             	add    esp,0x1c
c001c26c:	5b                   	pop    ebx
c001c26d:	5e                   	pop    esi
c001c26e:	5f                   	pop    edi
c001c26f:	5d                   	pop    ebp
c001c270:	c3                   	ret    
c001c271:	8d 76 00             	lea    esi,[esi+0x0]
c001c274:	89 f9                	mov    ecx,edi
c001c276:	85 ff                	test   edi,edi
c001c278:	75 0b                	jne    c001c285 <__udivdi3+0x45>
c001c27a:	b8 01 00 00 00       	mov    eax,0x1
c001c27f:	31 d2                	xor    edx,edx
c001c281:	f7 f7                	div    edi
c001c283:	89 c1                	mov    ecx,eax
c001c285:	31 d2                	xor    edx,edx
c001c287:	89 f0                	mov    eax,esi
c001c289:	f7 f1                	div    ecx
c001c28b:	89 c3                	mov    ebx,eax
c001c28d:	89 e8                	mov    eax,ebp
c001c28f:	f7 f1                	div    ecx
c001c291:	89 da                	mov    edx,ebx
c001c293:	83 c4 1c             	add    esp,0x1c
c001c296:	5b                   	pop    ebx
c001c297:	5e                   	pop    esi
c001c298:	5f                   	pop    edi
c001c299:	5d                   	pop    ebp
c001c29a:	c3                   	ret    
c001c29b:	90                   	nop
c001c29c:	39 f2                	cmp    edx,esi
c001c29e:	77 1c                	ja     c001c2bc <__udivdi3+0x7c>
c001c2a0:	0f bd da             	bsr    ebx,edx
c001c2a3:	83 f3 1f             	xor    ebx,0x1f
c001c2a6:	75 24                	jne    c001c2cc <__udivdi3+0x8c>
c001c2a8:	39 f2                	cmp    edx,esi
c001c2aa:	72 08                	jb     c001c2b4 <__udivdi3+0x74>
c001c2ac:	39 ef                	cmp    edi,ebp
c001c2ae:	0f 87 84 00 00 00    	ja     c001c338 <__udivdi3+0xf8>
c001c2b4:	b8 01 00 00 00       	mov    eax,0x1
c001c2b9:	eb ac                	jmp    c001c267 <__udivdi3+0x27>
c001c2bb:	90                   	nop
c001c2bc:	31 db                	xor    ebx,ebx
c001c2be:	31 c0                	xor    eax,eax
c001c2c0:	89 da                	mov    edx,ebx
c001c2c2:	83 c4 1c             	add    esp,0x1c
c001c2c5:	5b                   	pop    ebx
c001c2c6:	5e                   	pop    esi
c001c2c7:	5f                   	pop    edi
c001c2c8:	5d                   	pop    ebp
c001c2c9:	c3                   	ret    
c001c2ca:	66 90                	xchg   ax,ax
c001c2cc:	b8 20 00 00 00       	mov    eax,0x20
c001c2d1:	29 d8                	sub    eax,ebx
c001c2d3:	88 d9                	mov    cl,bl
c001c2d5:	d3 e2                	shl    edx,cl
c001c2d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c2db:	89 fa                	mov    edx,edi
c001c2dd:	88 c1                	mov    cl,al
c001c2df:	d3 ea                	shr    edx,cl
c001c2e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2e5:	09 d1                	or     ecx,edx
c001c2e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2eb:	88 d9                	mov    cl,bl
c001c2ed:	d3 e7                	shl    edi,cl
c001c2ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2f3:	89 f7                	mov    edi,esi
c001c2f5:	88 c1                	mov    cl,al
c001c2f7:	d3 ef                	shr    edi,cl
c001c2f9:	88 d9                	mov    cl,bl
c001c2fb:	d3 e6                	shl    esi,cl
c001c2fd:	89 ea                	mov    edx,ebp
c001c2ff:	88 c1                	mov    cl,al
c001c301:	d3 ea                	shr    edx,cl
c001c303:	09 d6                	or     esi,edx
c001c305:	89 f0                	mov    eax,esi
c001c307:	89 fa                	mov    edx,edi
c001c309:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c30d:	89 d7                	mov    edi,edx
c001c30f:	89 c6                	mov    esi,eax
c001c311:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c315:	39 d7                	cmp    edi,edx
c001c317:	72 13                	jb     c001c32c <__udivdi3+0xec>
c001c319:	74 09                	je     c001c324 <__udivdi3+0xe4>
c001c31b:	89 f0                	mov    eax,esi
c001c31d:	31 db                	xor    ebx,ebx
c001c31f:	e9 43 ff ff ff       	jmp    c001c267 <__udivdi3+0x27>
c001c324:	88 d9                	mov    cl,bl
c001c326:	d3 e5                	shl    ebp,cl
c001c328:	39 c5                	cmp    ebp,eax
c001c32a:	73 ef                	jae    c001c31b <__udivdi3+0xdb>
c001c32c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c32f:	31 db                	xor    ebx,ebx
c001c331:	e9 31 ff ff ff       	jmp    c001c267 <__udivdi3+0x27>
c001c336:	66 90                	xchg   ax,ax
c001c338:	31 c0                	xor    eax,eax
c001c33a:	e9 28 ff ff ff       	jmp    c001c267 <__udivdi3+0x27>
c001c33f:	90                   	nop

c001c340 <__umoddi3>:
c001c340:	55                   	push   ebp
c001c341:	57                   	push   edi
c001c342:	56                   	push   esi
c001c343:	53                   	push   ebx
c001c344:	83 ec 1c             	sub    esp,0x1c
c001c347:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c34b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c34f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c353:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c357:	89 da                	mov    edx,ebx
c001c359:	85 c0                	test   eax,eax
c001c35b:	75 37                	jne    c001c394 <__umoddi3+0x54>
c001c35d:	39 df                	cmp    edi,ebx
c001c35f:	76 13                	jbe    c001c374 <__umoddi3+0x34>
c001c361:	89 f0                	mov    eax,esi
c001c363:	f7 f7                	div    edi
c001c365:	89 d0                	mov    eax,edx
c001c367:	31 d2                	xor    edx,edx
c001c369:	83 c4 1c             	add    esp,0x1c
c001c36c:	5b                   	pop    ebx
c001c36d:	5e                   	pop    esi
c001c36e:	5f                   	pop    edi
c001c36f:	5d                   	pop    ebp
c001c370:	c3                   	ret    
c001c371:	8d 76 00             	lea    esi,[esi+0x0]
c001c374:	89 fd                	mov    ebp,edi
c001c376:	85 ff                	test   edi,edi
c001c378:	75 0b                	jne    c001c385 <__umoddi3+0x45>
c001c37a:	b8 01 00 00 00       	mov    eax,0x1
c001c37f:	31 d2                	xor    edx,edx
c001c381:	f7 f7                	div    edi
c001c383:	89 c5                	mov    ebp,eax
c001c385:	89 d8                	mov    eax,ebx
c001c387:	31 d2                	xor    edx,edx
c001c389:	f7 f5                	div    ebp
c001c38b:	89 f0                	mov    eax,esi
c001c38d:	f7 f5                	div    ebp
c001c38f:	89 d0                	mov    eax,edx
c001c391:	eb d4                	jmp    c001c367 <__umoddi3+0x27>
c001c393:	90                   	nop
c001c394:	89 f1                	mov    ecx,esi
c001c396:	39 d8                	cmp    eax,ebx
c001c398:	76 0a                	jbe    c001c3a4 <__umoddi3+0x64>
c001c39a:	89 f0                	mov    eax,esi
c001c39c:	83 c4 1c             	add    esp,0x1c
c001c39f:	5b                   	pop    ebx
c001c3a0:	5e                   	pop    esi
c001c3a1:	5f                   	pop    edi
c001c3a2:	5d                   	pop    ebp
c001c3a3:	c3                   	ret    
c001c3a4:	0f bd e8             	bsr    ebp,eax
c001c3a7:	83 f5 1f             	xor    ebp,0x1f
c001c3aa:	75 1c                	jne    c001c3c8 <__umoddi3+0x88>
c001c3ac:	39 d8                	cmp    eax,ebx
c001c3ae:	72 04                	jb     c001c3b4 <__umoddi3+0x74>
c001c3b0:	39 f7                	cmp    edi,esi
c001c3b2:	77 08                	ja     c001c3bc <__umoddi3+0x7c>
c001c3b4:	89 da                	mov    edx,ebx
c001c3b6:	29 fe                	sub    esi,edi
c001c3b8:	19 c2                	sbb    edx,eax
c001c3ba:	89 f1                	mov    ecx,esi
c001c3bc:	89 c8                	mov    eax,ecx
c001c3be:	83 c4 1c             	add    esp,0x1c
c001c3c1:	5b                   	pop    ebx
c001c3c2:	5e                   	pop    esi
c001c3c3:	5f                   	pop    edi
c001c3c4:	5d                   	pop    ebp
c001c3c5:	c3                   	ret    
c001c3c6:	66 90                	xchg   ax,ax
c001c3c8:	ba 20 00 00 00       	mov    edx,0x20
c001c3cd:	29 ea                	sub    edx,ebp
c001c3cf:	89 e9                	mov    ecx,ebp
c001c3d1:	d3 e0                	shl    eax,cl
c001c3d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3d7:	89 f8                	mov    eax,edi
c001c3d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c3dd:	88 d1                	mov    cl,dl
c001c3df:	d3 e8                	shr    eax,cl
c001c3e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3e5:	09 c1                	or     ecx,eax
c001c3e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3eb:	89 e9                	mov    ecx,ebp
c001c3ed:	d3 e7                	shl    edi,cl
c001c3ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3f3:	89 d8                	mov    eax,ebx
c001c3f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3f9:	88 d1                	mov    cl,dl
c001c3fb:	d3 e8                	shr    eax,cl
c001c3fd:	89 c7                	mov    edi,eax
c001c3ff:	89 e9                	mov    ecx,ebp
c001c401:	d3 e3                	shl    ebx,cl
c001c403:	89 f0                	mov    eax,esi
c001c405:	88 d1                	mov    cl,dl
c001c407:	d3 e8                	shr    eax,cl
c001c409:	09 d8                	or     eax,ebx
c001c40b:	89 e9                	mov    ecx,ebp
c001c40d:	d3 e6                	shl    esi,cl
c001c40f:	89 f3                	mov    ebx,esi
c001c411:	89 fa                	mov    edx,edi
c001c413:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c417:	89 d1                	mov    ecx,edx
c001c419:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c41d:	89 c6                	mov    esi,eax
c001c41f:	89 d7                	mov    edi,edx
c001c421:	39 d1                	cmp    ecx,edx
c001c423:	72 27                	jb     c001c44c <__umoddi3+0x10c>
c001c425:	74 21                	je     c001c448 <__umoddi3+0x108>
c001c427:	89 ca                	mov    edx,ecx
c001c429:	29 f3                	sub    ebx,esi
c001c42b:	19 fa                	sbb    edx,edi
c001c42d:	89 d0                	mov    eax,edx
c001c42f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c433:	d3 e0                	shl    eax,cl
c001c435:	89 e9                	mov    ecx,ebp
c001c437:	d3 eb                	shr    ebx,cl
c001c439:	09 d8                	or     eax,ebx
c001c43b:	d3 ea                	shr    edx,cl
c001c43d:	83 c4 1c             	add    esp,0x1c
c001c440:	5b                   	pop    ebx
c001c441:	5e                   	pop    esi
c001c442:	5f                   	pop    edi
c001c443:	5d                   	pop    ebp
c001c444:	c3                   	ret    
c001c445:	8d 76 00             	lea    esi,[esi+0x0]
c001c448:	39 c3                	cmp    ebx,eax
c001c44a:	73 db                	jae    c001c427 <__umoddi3+0xe7>
c001c44c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c450:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c454:	89 d7                	mov    edi,edx
c001c456:	89 c6                	mov    esi,eax
c001c458:	eb cd                	jmp    c001c427 <__umoddi3+0xe7>

Disassembly of section .init:

c001c45a <_init>:
c001c45a:	55                   	push   ebp
c001c45b:	89 e5                	mov    ebp,esp
c001c45d:	e8 92 3c fe ff       	call   c00000f4 <frame_dummy>
c001c462:	e8 e5 fa ff ff       	call   c001bf4c <__do_global_ctors_aux>
c001c467:	5d                   	pop    ebp
c001c468:	c3                   	ret    

Disassembly of section .fini:

c001c469 <_fini>:
c001c469:	55                   	push   ebp
c001c46a:	89 e5                	mov    ebp,esp
c001c46c:	e8 13 3c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c471:	5d                   	pop    ebp
c001c472:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c474 <Computer::~Computer()>:
c001c474:	83 ec 0c             	sub    esp,0xc
c001c477:	ba 38 d7 01 c0       	mov    edx,0xc001d738
c001c47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c480:	89 10                	mov    DWORD PTR [eax],edx
c001c482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c486:	83 ec 0c             	sub    esp,0xc
c001c489:	50                   	push   eax
c001c48a:	e8 1f f5 fe ff       	call   c000b9ae <Device::~Device()>
c001c48f:	83 c4 10             	add    esp,0x10
c001c492:	90                   	nop
c001c493:	83 c4 0c             	add    esp,0xc
c001c496:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c498 <Computer::~Computer()>:
c001c498:	83 ec 0c             	sub    esp,0xc
c001c49b:	83 ec 0c             	sub    esp,0xc
c001c49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4a2:	e8 cd ff ff ff       	call   c001c474 <Computer::~Computer()>
c001c4a7:	83 c4 10             	add    esp,0x10
c001c4aa:	83 ec 08             	sub    esp,0x8
c001c4ad:	68 70 01 00 00       	push   0x170
c001c4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4b6:	e8 bc e0 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001c4bb:	83 c4 10             	add    esp,0x10
c001c4be:	83 c4 0c             	add    esp,0xc
c001c4c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c4c2 <idleCommon()>:
c001c4c2:	83 ec 0c             	sub    esp,0xc
c001c4c5:	fa                   	cli    
c001c4c6:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c4cc:	e8 13 74 ff ff       	call   c00138e4 <schedule()>
c001c4d1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c4d6:	48                   	dec    eax
c001c4d7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c4dc:	75 01                	jne    c001c4df <idleCommon()+0x1d>
c001c4de:	fb                   	sti    
c001c4df:	83 c4 0c             	add    esp,0xc
c001c4e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c4e4 <LinkedList<UnixFile>::~LinkedList()>:
c001c4e4:	90                   	nop
c001c4e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c4e6 <LinkedList<UnixFile>::LinkedList()>:
c001c4e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c50a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c514:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c51b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c51f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c526:	90                   	nop
c001c527:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c528 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c528:	83 ec 0c             	sub    esp,0xc
c001c52b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c530:	75 10                	jne    c001c542 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c532:	83 ec 0c             	sub    esp,0xc
c001c535:	68 98 d9 01 c0       	push   0xc001d998
c001c53a:	e8 b0 3d ff ff       	call   c00102ef <KePanic(char const*)>
c001c53f:	83 c4 10             	add    esp,0x10
c001c542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c546:	8b 00                	mov    eax,DWORD PTR [eax]
c001c548:	85 c0                	test   eax,eax
c001c54a:	74 34                	je     c001c580 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c553:	85 c0                	test   eax,eax
c001c555:	74 29                	je     c001c580 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c55e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c562:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c569:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c56d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c577:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c57e:	eb 65                	jmp    c001c5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c584:	8b 00                	mov    eax,DWORD PTR [eax]
c001c586:	85 c0                	test   eax,eax
c001c588:	75 4b                	jne    c001c5d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c591:	85 c0                	test   eax,eax
c001c593:	75 40                	jne    c001c5d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c599:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c59d:	89 10                	mov    DWORD PTR [eax],edx
c001c59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5bf:	85 c0                	test   eax,eax
c001c5c1:	74 22                	je     c001c5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5c3:	83 ec 0c             	sub    esp,0xc
c001c5c6:	68 ba d9 01 c0       	push   0xc001d9ba
c001c5cb:	e8 1f 3d ff ff       	call   c00102ef <KePanic(char const*)>
c001c5d0:	83 c4 10             	add    esp,0x10
c001c5d3:	eb 10                	jmp    c001c5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5d5:	83 ec 0c             	sub    esp,0xc
c001c5d8:	68 c4 d9 01 c0       	push   0xc001d9c4
c001c5dd:	e8 0d 3d ff ff       	call   c00102ef <KePanic(char const*)>
c001c5e2:	83 c4 10             	add    esp,0x10
c001c5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5ec:	8d 50 01             	lea    edx,[eax+0x1]
c001c5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5f6:	90                   	nop
c001c5f7:	83 c4 0c             	add    esp,0xc
c001c5fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c5fc <LinkedList<UnixFile>::getFirstElement()>:
c001c5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c600:	8b 00                	mov    eax,DWORD PTR [eax]
c001c602:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c604 <LinkedList<UnixFile>::removeFirst()>:
c001c604:	83 ec 0c             	sub    esp,0xc
c001c607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c60d:	85 c0                	test   eax,eax
c001c60f:	75 12                	jne    c001c623 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c611:	83 ec 0c             	sub    esp,0xc
c001c614:	68 d0 d9 01 c0       	push   0xc001d9d0
c001c619:	e8 d1 3c ff ff       	call   c00102ef <KePanic(char const*)>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	eb 7e                	jmp    c001c6a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c627:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c62a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c62d:	85 c0                	test   eax,eax
c001c62f:	74 10                	je     c001c641 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c631:	83 ec 0c             	sub    esp,0xc
c001c634:	68 1b da 01 c0       	push   0xc001da1b
c001c639:	e8 b1 3c ff ff       	call   c00102ef <KePanic(char const*)>
c001c63e:	83 c4 10             	add    esp,0x10
c001c641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c645:	8b 00                	mov    eax,DWORD PTR [eax]
c001c647:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c64a:	85 c0                	test   eax,eax
c001c64c:	75 33                	jne    c001c681 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c652:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c667:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c66a:	83 f8 01             	cmp    eax,0x1
c001c66d:	74 21                	je     c001c690 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c66f:	83 ec 0c             	sub    esp,0xc
c001c672:	68 f4 d9 01 c0       	push   0xc001d9f4
c001c677:	e8 73 3c ff ff       	call   c00102ef <KePanic(char const*)>
c001c67c:	83 c4 10             	add    esp,0x10
c001c67f:	eb 0f                	jmp    c001c690 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c685:	8b 00                	mov    eax,DWORD PTR [eax]
c001c687:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68e:	89 10                	mov    DWORD PTR [eax],edx
c001c690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c694:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c697:	8d 50 ff             	lea    edx,[eax-0x1]
c001c69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6a1:	83 c4 0c             	add    esp,0xc
c001c6a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c6a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c6a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c6ae <DriverlessDevice::~DriverlessDevice()>:
c001c6ae:	ba 1c e1 01 c0       	mov    edx,0xc001e11c
c001c6b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6b7:	89 10                	mov    DWORD PTR [eax],edx
c001c6b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6bd:	50                   	push   eax
c001c6be:	e8 eb f2 fe ff       	call   c000b9ae <Device::~Device()>
c001c6c3:	83 c4 04             	add    esp,0x4
c001c6c6:	90                   	nop
c001c6c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c6c8 <DriverlessDevice::~DriverlessDevice()>:
c001c6c8:	83 ec 0c             	sub    esp,0xc
c001c6cb:	83 ec 0c             	sub    esp,0xc
c001c6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6d2:	e8 d7 ff ff ff       	call   c001c6ae <DriverlessDevice::~DriverlessDevice()>
c001c6d7:	83 c4 10             	add    esp,0x10
c001c6da:	83 ec 08             	sub    esp,0x8
c001c6dd:	68 58 01 00 00       	push   0x158
c001c6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6e6:	e8 8c de fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001c6eb:	83 c4 10             	add    esp,0x10
c001c6ee:	83 c4 0c             	add    esp,0xc
c001c6f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c6f2 <LinkedList<Device>::addElement(Device*)>:
c001c6f2:	83 ec 0c             	sub    esp,0xc
c001c6f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6fa:	75 10                	jne    c001c70c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c6fc:	83 ec 0c             	sub    esp,0xc
c001c6ff:	68 98 d9 01 c0       	push   0xc001d998
c001c704:	e8 e6 3b ff ff       	call   c00102ef <KePanic(char const*)>
c001c709:	83 c4 10             	add    esp,0x10
c001c70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c710:	8b 00                	mov    eax,DWORD PTR [eax]
c001c712:	85 c0                	test   eax,eax
c001c714:	74 3a                	je     c001c750 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c71d:	85 c0                	test   eax,eax
c001c71f:	74 2f                	je     c001c750 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c725:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c728:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c72c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c736:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c73a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c741:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c744:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c74e:	eb 68                	jmp    c001c7b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c754:	8b 00                	mov    eax,DWORD PTR [eax]
c001c756:	85 c0                	test   eax,eax
c001c758:	75 4e                	jne    c001c7a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c761:	85 c0                	test   eax,eax
c001c763:	75 43                	jne    c001c7a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c769:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c76d:	89 10                	mov    DWORD PTR [eax],edx
c001c76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c773:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c777:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c781:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c792:	85 c0                	test   eax,eax
c001c794:	74 22                	je     c001c7b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c796:	83 ec 0c             	sub    esp,0xc
c001c799:	68 ba d9 01 c0       	push   0xc001d9ba
c001c79e:	e8 4c 3b ff ff       	call   c00102ef <KePanic(char const*)>
c001c7a3:	83 c4 10             	add    esp,0x10
c001c7a6:	eb 10                	jmp    c001c7b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	68 c4 d9 01 c0       	push   0xc001d9c4
c001c7b0:	e8 3a 3b ff ff       	call   c00102ef <KePanic(char const*)>
c001c7b5:	83 c4 10             	add    esp,0x10
c001c7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7bf:	8d 50 01             	lea    edx,[eax+0x1]
c001c7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7c9:	90                   	nop
c001c7ca:	83 c4 0c             	add    esp,0xc
c001c7cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c7ce <LinkedList<Device>::LinkedList()>:
c001c7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c807:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c80e:	90                   	nop
c001c80f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c814:	8b 00                	mov    eax,DWORD PTR [eax]
c001c816:	85 c0                	test   eax,eax
c001c818:	75 0e                	jne    c001c828 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c81a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c81e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c821:	85 c0                	test   eax,eax
c001c823:	75 03                	jne    c001c828 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c825:	b0 01                	mov    al,0x1
c001c827:	c3                   	ret    
c001c828:	b0 00                	mov    al,0x0
c001c82a:	90                   	nop
c001c82b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c82c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c830:	8b 00                	mov    eax,DWORD PTR [eax]
c001c832:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c834:	83 ec 0c             	sub    esp,0xc
c001c837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c83d:	85 c0                	test   eax,eax
c001c83f:	75 17                	jne    c001c858 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c841:	83 ec 0c             	sub    esp,0xc
c001c844:	68 d0 d9 01 c0       	push   0xc001d9d0
c001c849:	e8 a1 3a ff ff       	call   c00102ef <KePanic(char const*)>
c001c84e:	83 c4 10             	add    esp,0x10
c001c851:	e9 92 00 00 00       	jmp    c001c8e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c856:	66 90                	xchg   ax,ax
c001c858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c85f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c862:	85 c0                	test   eax,eax
c001c864:	0f 95 c0             	setne  al
c001c867:	84 c0                	test   al,al
c001c869:	74 11                	je     c001c87c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c86b:	83 ec 0c             	sub    esp,0xc
c001c86e:	68 1b da 01 c0       	push   0xc001da1b
c001c873:	e8 77 3a ff ff       	call   c00102ef <KePanic(char const*)>
c001c878:	83 c4 10             	add    esp,0x10
c001c87b:	90                   	nop
c001c87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c880:	8b 00                	mov    eax,DWORD PTR [eax]
c001c882:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c885:	85 c0                	test   eax,eax
c001c887:	0f 94 c0             	sete   al
c001c88a:	84 c0                	test   al,al
c001c88c:	74 36                	je     c001c8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c892:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8aa:	83 f8 01             	cmp    eax,0x1
c001c8ad:	74 25                	je     c001c8d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c8af:	83 ec 0c             	sub    esp,0xc
c001c8b2:	68 f4 d9 01 c0       	push   0xc001d9f4
c001c8b7:	e8 33 3a ff ff       	call   c00102ef <KePanic(char const*)>
c001c8bc:	83 c4 10             	add    esp,0x10
c001c8bf:	eb 13                	jmp    c001c8d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d1:	89 10                	mov    DWORD PTR [eax],edx
c001c8d3:	90                   	nop
c001c8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8db:	8d 50 ff             	lea    edx,[eax-0x1]
c001c8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8e8:	83 c4 0c             	add    esp,0xc
c001c8eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c8ec:	83 ec 0c             	sub    esp,0xc
c001c8ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8f4:	75 12                	jne    c001c908 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c8f6:	83 ec 0c             	sub    esp,0xc
c001c8f9:	68 98 d9 01 c0       	push   0xc001d998
c001c8fe:	e8 ec 39 ff ff       	call   c00102ef <KePanic(char const*)>
c001c903:	83 c4 10             	add    esp,0x10
c001c906:	66 90                	xchg   ax,ax
c001c908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c90e:	85 c0                	test   eax,eax
c001c910:	74 36                	je     c001c948 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c919:	85 c0                	test   eax,eax
c001c91b:	74 2b                	je     c001c948 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c921:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c924:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c928:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c933:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c93d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c944:	eb 6a                	jmp    c001c9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c946:	66 90                	xchg   ax,ax
c001c948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c94e:	85 c0                	test   eax,eax
c001c950:	75 4e                	jne    c001c9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c959:	85 c0                	test   eax,eax
c001c95b:	75 43                	jne    c001c9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c961:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c965:	89 10                	mov    DWORD PTR [eax],edx
c001c967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c96b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c96f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c976:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c979:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c987:	85 c0                	test   eax,eax
c001c989:	74 25                	je     c001c9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c98b:	83 ec 0c             	sub    esp,0xc
c001c98e:	68 ba d9 01 c0       	push   0xc001d9ba
c001c993:	e8 57 39 ff ff       	call   c00102ef <KePanic(char const*)>
c001c998:	83 c4 10             	add    esp,0x10
c001c99b:	eb 13                	jmp    c001c9b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c99d:	8d 76 00             	lea    esi,[esi+0x0]
c001c9a0:	83 ec 0c             	sub    esp,0xc
c001c9a3:	68 c4 d9 01 c0       	push   0xc001d9c4
c001c9a8:	e8 42 39 ff ff       	call   c00102ef <KePanic(char const*)>
c001c9ad:	83 c4 10             	add    esp,0x10
c001c9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9b7:	8d 50 01             	lea    edx,[eax+0x1]
c001c9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9c1:	90                   	nop
c001c9c2:	83 c4 0c             	add    esp,0xc
c001c9c5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c9c8 <ACPI::~ACPI()>:
c001c9c8:	83 ec 0c             	sub    esp,0xc
c001c9cb:	ba 94 e6 01 c0       	mov    edx,0xc001e694
c001c9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d4:	89 10                	mov    DWORD PTR [eax],edx
c001c9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9da:	83 ec 0c             	sub    esp,0xc
c001c9dd:	50                   	push   eax
c001c9de:	e8 cb ef fe ff       	call   c000b9ae <Device::~Device()>
c001c9e3:	83 c4 10             	add    esp,0x10
c001c9e6:	90                   	nop
c001c9e7:	83 c4 0c             	add    esp,0xc
c001c9ea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c9ec <ACPI::~ACPI()>:
c001c9ec:	83 ec 0c             	sub    esp,0xc
c001c9ef:	83 ec 0c             	sub    esp,0xc
c001c9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9f6:	e8 cd ff ff ff       	call   c001c9c8 <ACPI::~ACPI()>
c001c9fb:	83 c4 10             	add    esp,0x10
c001c9fe:	83 ec 08             	sub    esp,0x8
c001ca01:	68 64 12 00 00       	push   0x1264
c001ca06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca0a:	e8 68 db fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001ca0f:	83 c4 10             	add    esp,0x10
c001ca12:	83 c4 0c             	add    esp,0xc
c001ca15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ca18 <LinkedList<Device>::~LinkedList()>:
c001ca18:	90                   	nop
c001ca19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ca1c <LinkedList<Device>::isEmpty()>:
c001ca1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca22:	85 c0                	test   eax,eax
c001ca24:	75 0e                	jne    c001ca34 <LinkedList<Device>::isEmpty()+0x18>
c001ca26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca2d:	85 c0                	test   eax,eax
c001ca2f:	75 03                	jne    c001ca34 <LinkedList<Device>::isEmpty()+0x18>
c001ca31:	b0 01                	mov    al,0x1
c001ca33:	c3                   	ret    
c001ca34:	b0 00                	mov    al,0x0
c001ca36:	90                   	nop
c001ca37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ca38 <LinkedList<Device>::getFirstElement()>:
c001ca38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca3e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ca40 <LinkedList<Device>::removeFirst()>:
c001ca40:	83 ec 0c             	sub    esp,0xc
c001ca43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca47:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca49:	85 c0                	test   eax,eax
c001ca4b:	75 17                	jne    c001ca64 <LinkedList<Device>::removeFirst()+0x24>
c001ca4d:	83 ec 0c             	sub    esp,0xc
c001ca50:	68 d0 d9 01 c0       	push   0xc001d9d0
c001ca55:	e8 95 38 ff ff       	call   c00102ef <KePanic(char const*)>
c001ca5a:	83 c4 10             	add    esp,0x10
c001ca5d:	e9 92 00 00 00       	jmp    c001caf4 <LinkedList<Device>::removeFirst()+0xb4>
c001ca62:	66 90                	xchg   ax,ax
c001ca64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca6b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca71:	85 c0                	test   eax,eax
c001ca73:	74 13                	je     c001ca88 <LinkedList<Device>::removeFirst()+0x48>
c001ca75:	83 ec 0c             	sub    esp,0xc
c001ca78:	68 1b da 01 c0       	push   0xc001da1b
c001ca7d:	e8 6d 38 ff ff       	call   c00102ef <KePanic(char const*)>
c001ca82:	83 c4 10             	add    esp,0x10
c001ca85:	8d 76 00             	lea    esi,[esi+0x0]
c001ca88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca8e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca94:	85 c0                	test   eax,eax
c001ca96:	75 34                	jne    c001cacc <LinkedList<Device>::removeFirst()+0x8c>
c001ca98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001caa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001caad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cab4:	83 f8 01             	cmp    eax,0x1
c001cab7:	74 27                	je     c001cae0 <LinkedList<Device>::removeFirst()+0xa0>
c001cab9:	83 ec 0c             	sub    esp,0xc
c001cabc:	68 f4 d9 01 c0       	push   0xc001d9f4
c001cac1:	e8 29 38 ff ff       	call   c00102ef <KePanic(char const*)>
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	eb 15                	jmp    c001cae0 <LinkedList<Device>::removeFirst()+0xa0>
c001cacb:	90                   	nop
c001cacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cad2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001cad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cadc:	89 10                	mov    DWORD PTR [eax],edx
c001cade:	66 90                	xchg   ax,ax
c001cae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cae7:	8d 50 ff             	lea    edx,[eax-0x1]
c001caea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001caf1:	8d 76 00             	lea    esi,[esi+0x0]
c001caf4:	83 c4 0c             	add    esp,0xc
c001caf7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001caf8 <CPU::~CPU()>:
c001caf8:	83 ec 0c             	sub    esp,0xc
c001cafb:	ba 30 e8 01 c0       	mov    edx,0xc001e830
c001cb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb04:	89 10                	mov    DWORD PTR [eax],edx
c001cb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb0a:	83 ec 0c             	sub    esp,0xc
c001cb0d:	50                   	push   eax
c001cb0e:	e8 9b ee fe ff       	call   c000b9ae <Device::~Device()>
c001cb13:	83 c4 10             	add    esp,0x10
c001cb16:	90                   	nop
c001cb17:	83 c4 0c             	add    esp,0xc
c001cb1a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001cb1c <CPU::~CPU()>:
c001cb1c:	83 ec 0c             	sub    esp,0xc
c001cb1f:	83 ec 0c             	sub    esp,0xc
c001cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb26:	e8 cd ff ff ff       	call   c001caf8 <CPU::~CPU()>
c001cb2b:	83 c4 10             	add    esp,0x10
c001cb2e:	83 ec 08             	sub    esp,0x8
c001cb31:	68 94 11 00 00       	push   0x1194
c001cb36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb3a:	e8 38 da fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001cb3f:	83 c4 10             	add    esp,0x10
c001cb42:	83 c4 0c             	add    esp,0xc
c001cb45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cb48 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cb48:	90                   	nop
c001cb49:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cb4c <ThreadControlBlock::ThreadControlBlock()>:
c001cb4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb50:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb5b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cb62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb66:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cb6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb71:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb87:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb8f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb93:	90                   	nop
c001cb94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cba6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cbc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbd8:	90                   	nop
c001cbd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cbdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbe0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cbe3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cbe4 <PCI::~PCI()>:
c001cbe4:	83 ec 0c             	sub    esp,0xc
c001cbe7:	ba cc f4 01 c0       	mov    edx,0xc001f4cc
c001cbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf0:	89 10                	mov    DWORD PTR [eax],edx
c001cbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf6:	83 ec 0c             	sub    esp,0xc
c001cbf9:	50                   	push   eax
c001cbfa:	e8 39 e8 fe ff       	call   c000b438 <Bus::~Bus()>
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	90                   	nop
c001cc03:	83 c4 0c             	add    esp,0xc
c001cc06:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cc08 <PCI::~PCI()>:
c001cc08:	83 ec 0c             	sub    esp,0xc
c001cc0b:	83 ec 0c             	sub    esp,0xc
c001cc0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc12:	e8 cd ff ff ff       	call   c001cbe4 <PCI::~PCI()>
c001cc17:	83 c4 10             	add    esp,0x10
c001cc1a:	83 ec 08             	sub    esp,0x8
c001cc1d:	68 5c 01 00 00       	push   0x15c
c001cc22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc26:	e8 4c d9 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001cc2b:	83 c4 10             	add    esp,0x10
c001cc2e:	83 c4 0c             	add    esp,0xc
c001cc31:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cc32 <IDE::~IDE()>:
c001cc32:	83 ec 0c             	sub    esp,0xc
c001cc35:	ba 80 f5 01 c0       	mov    edx,0xc001f580
c001cc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3e:	89 10                	mov    DWORD PTR [eax],edx
c001cc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc44:	83 ec 0c             	sub    esp,0xc
c001cc47:	50                   	push   eax
c001cc48:	e8 db f1 fe ff       	call   c000be28 <HardDiskController::~HardDiskController()>
c001cc4d:	83 c4 10             	add    esp,0x10
c001cc50:	90                   	nop
c001cc51:	83 c4 0c             	add    esp,0xc
c001cc54:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cc56 <IDE::~IDE()>:
c001cc56:	83 ec 0c             	sub    esp,0xc
c001cc59:	83 ec 0c             	sub    esp,0xc
c001cc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc60:	e8 cd ff ff ff       	call   c001cc32 <IDE::~IDE()>
c001cc65:	83 c4 10             	add    esp,0x10
c001cc68:	83 ec 08             	sub    esp,0x8
c001cc6b:	68 70 02 00 00       	push   0x270
c001cc70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc74:	e8 fe d8 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001cc79:	83 c4 10             	add    esp,0x10
c001cc7c:	83 c4 0c             	add    esp,0xc
c001cc7f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc80 <SATABus::~SATABus()>:
c001cc80:	83 ec 0c             	sub    esp,0xc
c001cc83:	ba d0 f5 01 c0       	mov    edx,0xc001f5d0
c001cc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8c:	89 10                	mov    DWORD PTR [eax],edx
c001cc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc92:	83 ec 0c             	sub    esp,0xc
c001cc95:	50                   	push   eax
c001cc96:	e8 8d f1 fe ff       	call   c000be28 <HardDiskController::~HardDiskController()>
c001cc9b:	83 c4 10             	add    esp,0x10
c001cc9e:	90                   	nop
c001cc9f:	83 c4 0c             	add    esp,0xc
c001cca2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cca4 <SATABus::~SATABus()>:
c001cca4:	83 ec 0c             	sub    esp,0xc
c001cca7:	83 ec 0c             	sub    esp,0xc
c001ccaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccae:	e8 cd ff ff ff       	call   c001cc80 <SATABus::~SATABus()>
c001ccb3:	83 c4 10             	add    esp,0x10
c001ccb6:	83 ec 08             	sub    esp,0x8
c001ccb9:	68 64 01 00 00       	push   0x164
c001ccbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccc2:	e8 b0 d8 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	83 c4 0c             	add    esp,0xc
c001cccd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ccce <ATA::~ATA()>:
c001ccce:	83 ec 0c             	sub    esp,0xc
c001ccd1:	ba 10 f6 01 c0       	mov    edx,0xc001f610
c001ccd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccda:	89 10                	mov    DWORD PTR [eax],edx
c001ccdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce0:	83 ec 0c             	sub    esp,0xc
c001cce3:	50                   	push   eax
c001cce4:	e8 21 f2 fe ff       	call   c000bf0a <PhysicalDisk::~PhysicalDisk()>
c001cce9:	83 c4 10             	add    esp,0x10
c001ccec:	90                   	nop
c001cced:	83 c4 0c             	add    esp,0xc
c001ccf0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ccf2 <ATA::~ATA()>:
c001ccf2:	83 ec 0c             	sub    esp,0xc
c001ccf5:	83 ec 0c             	sub    esp,0xc
c001ccf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccfc:	e8 cd ff ff ff       	call   c001ccce <ATA::~ATA()>
c001cd01:	83 c4 10             	add    esp,0x10
c001cd04:	83 ec 08             	sub    esp,0x8
c001cd07:	68 7c 01 00 00       	push   0x17c
c001cd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd10:	e8 62 d8 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001cd15:	83 c4 10             	add    esp,0x10
c001cd18:	83 c4 0c             	add    esp,0xc
c001cd1b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cd1c <ATAPI::~ATAPI()>:
c001cd1c:	83 ec 0c             	sub    esp,0xc
c001cd1f:	ba 58 f6 01 c0       	mov    edx,0xc001f658
c001cd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd28:	89 10                	mov    DWORD PTR [eax],edx
c001cd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd2e:	83 ec 0c             	sub    esp,0xc
c001cd31:	50                   	push   eax
c001cd32:	e8 d3 f1 fe ff       	call   c000bf0a <PhysicalDisk::~PhysicalDisk()>
c001cd37:	83 c4 10             	add    esp,0x10
c001cd3a:	90                   	nop
c001cd3b:	83 c4 0c             	add    esp,0xc
c001cd3e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cd40 <ATAPI::~ATAPI()>:
c001cd40:	83 ec 0c             	sub    esp,0xc
c001cd43:	83 ec 0c             	sub    esp,0xc
c001cd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd4a:	e8 cd ff ff ff       	call   c001cd1c <ATAPI::~ATAPI()>
c001cd4f:	83 c4 10             	add    esp,0x10
c001cd52:	83 ec 08             	sub    esp,0x8
c001cd55:	68 84 01 00 00       	push   0x184
c001cd5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd5e:	e8 14 d8 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	83 c4 0c             	add    esp,0xc
c001cd69:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cd6a <SATA::~SATA()>:
c001cd6a:	83 ec 0c             	sub    esp,0xc
c001cd6d:	ba 0c f7 01 c0       	mov    edx,0xc001f70c
c001cd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd76:	89 10                	mov    DWORD PTR [eax],edx
c001cd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd7c:	83 ec 0c             	sub    esp,0xc
c001cd7f:	50                   	push   eax
c001cd80:	e8 85 f1 fe ff       	call   c000bf0a <PhysicalDisk::~PhysicalDisk()>
c001cd85:	83 c4 10             	add    esp,0x10
c001cd88:	90                   	nop
c001cd89:	83 c4 0c             	add    esp,0xc
c001cd8c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd8e <SATA::~SATA()>:
c001cd8e:	83 ec 0c             	sub    esp,0xc
c001cd91:	83 ec 0c             	sub    esp,0xc
c001cd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd98:	e8 cd ff ff ff       	call   c001cd6a <SATA::~SATA()>
c001cd9d:	83 c4 10             	add    esp,0x10
c001cda0:	83 ec 08             	sub    esp,0x8
c001cda3:	68 7c 01 00 00       	push   0x17c
c001cda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdac:	e8 c6 d7 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001cdb1:	83 c4 10             	add    esp,0x10
c001cdb4:	83 c4 0c             	add    esp,0xc
c001cdb7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cdb8 <SATAPI::~SATAPI()>:
c001cdb8:	83 ec 0c             	sub    esp,0xc
c001cdbb:	ba 44 f8 01 c0       	mov    edx,0xc001f844
c001cdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc4:	89 10                	mov    DWORD PTR [eax],edx
c001cdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdca:	83 ec 0c             	sub    esp,0xc
c001cdcd:	50                   	push   eax
c001cdce:	e8 37 f1 fe ff       	call   c000bf0a <PhysicalDisk::~PhysicalDisk()>
c001cdd3:	83 c4 10             	add    esp,0x10
c001cdd6:	90                   	nop
c001cdd7:	83 c4 0c             	add    esp,0xc
c001cdda:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cddc <SATAPI::~SATAPI()>:
c001cddc:	83 ec 0c             	sub    esp,0xc
c001cddf:	83 ec 0c             	sub    esp,0xc
c001cde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cde6:	e8 cd ff ff ff       	call   c001cdb8 <SATAPI::~SATAPI()>
c001cdeb:	83 c4 10             	add    esp,0x10
c001cdee:	83 ec 08             	sub    esp,0x8
c001cdf1:	68 84 01 00 00       	push   0x184
c001cdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdfa:	e8 78 d7 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001cdff:	83 c4 10             	add    esp,0x10
c001ce02:	83 c4 0c             	add    esp,0xc
c001ce05:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ce06 <IOAPIC::~IOAPIC()>:
c001ce06:	83 ec 0c             	sub    esp,0xc
c001ce09:	ba 84 f8 01 c0       	mov    edx,0xc001f884
c001ce0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce12:	89 10                	mov    DWORD PTR [eax],edx
c001ce14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce18:	83 ec 0c             	sub    esp,0xc
c001ce1b:	50                   	push   eax
c001ce1c:	e8 8d eb fe ff       	call   c000b9ae <Device::~Device()>
c001ce21:	83 c4 10             	add    esp,0x10
c001ce24:	90                   	nop
c001ce25:	83 c4 0c             	add    esp,0xc
c001ce28:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ce2a <IOAPIC::~IOAPIC()>:
c001ce2a:	83 ec 0c             	sub    esp,0xc
c001ce2d:	83 ec 0c             	sub    esp,0xc
c001ce30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce34:	e8 cd ff ff ff       	call   c001ce06 <IOAPIC::~IOAPIC()>
c001ce39:	83 c4 10             	add    esp,0x10
c001ce3c:	83 ec 08             	sub    esp,0x8
c001ce3f:	68 68 01 00 00       	push   0x168
c001ce44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce48:	e8 2a d7 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001ce4d:	83 c4 10             	add    esp,0x10
c001ce50:	83 c4 0c             	add    esp,0xc
c001ce53:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ce54 <APICTimer::~APICTimer()>:
c001ce54:	83 ec 0c             	sub    esp,0xc
c001ce57:	ba cc f8 01 c0       	mov    edx,0xc001f8cc
c001ce5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce60:	89 10                	mov    DWORD PTR [eax],edx
c001ce62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce66:	83 ec 0c             	sub    esp,0xc
c001ce69:	50                   	push   eax
c001ce6a:	e8 7d 04 ff ff       	call   c000d2ec <Timer::~Timer()>
c001ce6f:	83 c4 10             	add    esp,0x10
c001ce72:	90                   	nop
c001ce73:	83 c4 0c             	add    esp,0xc
c001ce76:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce78 <APICTimer::~APICTimer()>:
c001ce78:	83 ec 0c             	sub    esp,0xc
c001ce7b:	83 ec 0c             	sub    esp,0xc
c001ce7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce82:	e8 cd ff ff ff       	call   c001ce54 <APICTimer::~APICTimer()>
c001ce87:	83 c4 10             	add    esp,0x10
c001ce8a:	83 ec 08             	sub    esp,0x8
c001ce8d:	68 60 01 00 00       	push   0x160
c001ce92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce96:	e8 dc d6 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001ce9b:	83 c4 10             	add    esp,0x10
c001ce9e:	83 c4 0c             	add    esp,0xc
c001cea1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cea4 <PIT::~PIT()>:
c001cea4:	83 ec 0c             	sub    esp,0xc
c001cea7:	ba 1c f9 01 c0       	mov    edx,0xc001f91c
c001ceac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceb0:	89 10                	mov    DWORD PTR [eax],edx
c001ceb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceb6:	83 ec 0c             	sub    esp,0xc
c001ceb9:	50                   	push   eax
c001ceba:	e8 2d 04 ff ff       	call   c000d2ec <Timer::~Timer()>
c001cebf:	83 c4 10             	add    esp,0x10
c001cec2:	90                   	nop
c001cec3:	83 c4 0c             	add    esp,0xc
c001cec6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cec8 <PIT::~PIT()>:
c001cec8:	83 ec 0c             	sub    esp,0xc
c001cecb:	83 ec 0c             	sub    esp,0xc
c001cece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ced2:	e8 cd ff ff ff       	call   c001cea4 <PIT::~PIT()>
c001ced7:	83 c4 10             	add    esp,0x10
c001ceda:	83 ec 08             	sub    esp,0x8
c001cedd:	68 5c 01 00 00       	push   0x15c
c001cee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee6:	e8 8c d6 fe ff       	call   c000a577 <operator delete(void*, unsigned long)>
c001ceeb:	83 c4 10             	add    esp,0x10
c001ceee:	83 c4 0c             	add    esp,0xc
c001cef1:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be 21 e9 01 c0       	mov    esi,0xc001e921
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be 3d e9 01 c0       	mov    esi,0xc001e93d
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
