
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 70 f4 01 c0       	mov    eax,0xc001f470
c0000025:	3d 70 f4 01 c0       	cmp    eax,0xc001f470
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 70 f4 01 c0       	push   0xc001f470
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 70 f4 01 c0       	mov    eax,0xc001f470
c0000051:	2d 70 f4 01 c0       	sub    eax,0xc001f470
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 70 f4 01 c0       	push   0xc001f470
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f6a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 08 c9 01 c0       	mov    ebx,0xc001c908
c0000097:	81 eb 04 c9 01 c0    	sub    ebx,0xc001c904
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 04 c9 01 c0       	mov    esi,0xc001c904
c00000a6:	a1 a4 f6 01 c0       	mov    eax,ds:0xc001f6a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 f6 01 c0       	mov    ds:0xc001f6a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 f6 01 c0       	mov    eax,ds:0xc001f6a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 70 f4 01 c0       	push   0xc001f470
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 f6 01 c0 01 	mov    BYTE PTR ds:0xc001f6a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 f6 01 c0       	push   0xc001f6a8
c0000108:	68 70 f4 01 c0       	push   0xc001f470
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 38 29 01 00       	call   c0012be8 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 8c 9f 00 00       	call   c000a254 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 16 29 01 00       	call   c0012be8 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 e7 2d 01 00       	call   c00130d8 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 36 34 01 00       	call   c0013730 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 a0 04 02 c0 	lgdtd  ds:0xc00204a0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 a0 fd 00 00       	jmp    c0010122 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 c0 f6 01 c0       	mov    ds:0xc001f6c0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 c0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6c0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d c0 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6c0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 20 c9 01 c0 02 	test   BYTE PTR [edx-0x3ffe36e0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe36e0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 20 c9 01 c0 08 	test   BYTE PTR [edx-0x3ffe36e0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 20 c9 01 c0 04 	test   BYTE PTR [ebx-0x3ffe36e0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 20 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe36e0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d e0 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f6e0
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d e0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6e0,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 e4 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe091c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 e4 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe091c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d e0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6e0,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 0c f7 01 c0    	cmp    DWORD PTR ds:0xc001f70c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 1c f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f71c
c0000d3d:	c7 42 0c 14 f7 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f714
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 1c f7 01 c0    	mov    DWORD PTR ds:0xc001f71c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 0c f7 01 c0    	mov    DWORD PTR ds:0xc001f70c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 e0 f6 01 c0 02 	test   BYTE PTR ds:0xc001f6e0,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d e0 f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f6e0
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 e4 f6 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe091c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 e4 f6 01 c0 	mov    DWORD PTR [edx*4-0x3ffe091c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 14 f7 01 c0 	lea    edx,[eax*8-0x3ffe08ec]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 20 f7 01 c0    	mov    ebx,DWORD PTR ds:0xc001f720
c00010bf:	81 fb 14 f7 01 c0    	cmp    ebx,0xc001f714
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 14 f7 01 c0       	cmp    eax,0xc001f714
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 10 f7 01 c0    	cmp    DWORD PTR ds:0xc001f710,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 1c f7 01 c0       	mov    ds:0xc001f71c,eax
c00010fb:	a3 20 f7 01 c0       	mov    ds:0xc001f720,eax
c0001100:	a3 10 f7 01 c0       	mov    ds:0xc001f710,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 14 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f714
c000110e:	c7 40 0c 14 f7 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f714
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 20 f7 01 c0       	mov    ds:0xc001f720,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 14 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f714
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 d8 f6 01 c0 	lea    ebp,[edx*4-0x3ffe0928]
c000115f:	8b 14 95 e0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0920]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 e0 f6 01 c0 	lea    ecx,[edx*4-0x3ffe0920]
c000117a:	8b 14 95 e0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0920]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 14 fa 01 c0 	or     DWORD PTR [edi*4-0x3ffe05ec],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 14 f7 01 c0 	lea    eax,[eax*8-0x3ffe08ec]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 1c f7 01 c0    	mov    DWORD PTR ds:0xc001f71c,ecx
c0001234:	89 0d 20 f7 01 c0    	mov    DWORD PTR ds:0xc001f720,ecx
c000123a:	c7 41 08 14 f7 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f714
c0001241:	c7 41 0c 14 f7 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f714
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 0c f7 01 c0 	lea    edx,[ecx*8-0x3ffe08f4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 14 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe05ec]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 14 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe05ec]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 0c f7 01 c0 	lea    edx,[eax*4-0x3ffe08f4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 14 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe05ec],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 1c f7 01 c0    	mov    DWORD PTR ds:0xc001f71c,edi
c0001307:	89 3d 20 f7 01 c0    	mov    DWORD PTR ds:0xc001f720,edi
c000130d:	c7 47 08 14 f7 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f714
c0001314:	c7 47 0c 14 f7 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f714
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 10 f7 01 c0    	mov    DWORD PTR ds:0xc001f710,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 0c f7 01 c0       	mov    eax,ds:0xc001f70c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 0c f7 01 c0    	mov    DWORD PTR ds:0xc001f70c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d e0 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6e0,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 34 fa 01 c0    	mov    ebx,DWORD PTR ds:0xc001fa34
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 34 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa34,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 34 fa 01 c0    	mov    DWORD PTR ds:0xc001fa34,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 0c f7 01 c0    	cmp    DWORD PTR ds:0xc001f70c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 0c f7 01 c0    	mov    DWORD PTR ds:0xc001f70c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d e0 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6e0,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 3c fa 01 c0    	push   DWORD PTR ds:0xc001fa3c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d e0 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6e0,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 3c fa 01 c0       	mov    eax,ds:0xc001fa3c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 0c f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f70c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 0c f7 01 c0       	mov    eax,ds:0xc001f70c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 e4 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe091c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 14 f7 01 c0       	mov    eax,0xc001f714
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 0c fa 01 c0       	cmp    eax,0xc001fa0c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 48 fa 01 c0       	mov    eax,ds:0xc001fa48
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 30 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa30
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 44 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa44
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 54 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa54
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 e0 f6 01 c0       	mov    eax,0xc001f6e0
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 24 ca 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe35dc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 e0 f6 01 c0       	mov    eax,ds:0xc001f6e0
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 e0 f6 01 c0       	mov    ds:0xc001f6e0,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 24 fa 01 c0    	mov    DWORD PTR ds:0xc001fa24,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 28 fa 01 c0    	mov    DWORD PTR ds:0xc001fa28,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 2c fa 01 c0    	mov    DWORD PTR ds:0xc001fa2c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 34 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa34,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 a0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc760]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 d6 4d 01 00       	jmp    c0016ac0 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 a0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc760]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 04 4e 01 00       	jmp    c0016b04 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 a0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc760]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 29 4e 01 00       	jmp    c0016b48 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 80 cb 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3480]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 80 cb 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3480]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba e4 e9 01 c0       	mov    edx,0xc001e9e4
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 3c ca 01 c0       	mov    edx,0xc001ca3c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 80 fa 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0580]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 60 fa 01 c0    	mov    ax,ds:0xc001fa60
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 60 fa 01 c0    	mov    ds:0xc001fa60,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 42 ca 01 c0       	mov    eax,0xc001ca42
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 00 cb 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3500]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 4b ca 01 c0       	mov    eax,0xc001ca4b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 80 cb 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3480]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 80 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0580]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 80 fa 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0580],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 d0 ca 01 c0       	mov    eax,0xc001cad0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 80 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0580]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb c0 ca 01 c0       	mov    ebx,0xc001cac0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba a0 ca 01 c0       	mov    edx,0xc001caa0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba b0 ca 01 c0       	mov    edx,0xc001cab0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 52 ca 01 c0       	mov    edx,0xc001ca52
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 5e ca 01 c0       	mov    edx,0xc001ca5e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 72 ca 01 c0       	mov    edx,0xc001ca72
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c a0 ce 01 c0 	mov    DWORD PTR [esp+0xc],0xc001cea0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 a0 ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cea0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 a0 cc 01 c0       	mov    eax,0xc001cca0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 e0 cb 01 c0       	mov    eax,0xc001cbe0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 a0 cb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3460]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 00 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0a00]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 60 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe09a0]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 b0 fb 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe0450],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 40 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f640
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 1d 14 01 00       	call   c001739c <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 00 f6 01 c0       	mov    eax,0xc001f600
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 94 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020494,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 60 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe09a0]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 94 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020494
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 a0 cf 01 c0       	push   0xc001cfa0
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 60 04 02 c0       	mov    ecx,0xc0020460
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 20 fb 01 c0 00 	cmp    DWORD PTR [edi-0x3ffe04e0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 20 fb 01 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffe04e0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 24 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe04dc],esi
c000634e:	89 87 20 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe04e0],eax
c0006354:	c7 87 28 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe04d8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 b0 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0450],0x0
c0006370:	89 87 2c fb 01 c0    	mov    DWORD PTR [edi-0x3ffe04d4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 20 fb 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe04e0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 20 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe04e0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 b0 fb 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe0450]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 28 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe04d8]
c00063e9:	8b 8d 2c fb 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe04d4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 20 fb 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe04e0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 00 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0a00]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 28 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe04d8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 28 fb 01 c0    	add    DWORD PTR [ebp-0x3ffe04d8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 20 fb 01 c0    	lea    ecx,[ebp-0x3ffe04e0]
c00064e1:	83 bd 20 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe04e0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 2c fb 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe04d4]
c000651f:	05 20 fb 01 c0       	add    eax,0xc001fb20
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 28 fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe04d8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 20 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe04e0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb b0 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0450],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 28 fb 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe04d8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 20 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe04e0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba b0 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0450],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 2c fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe04d4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 20 fb 01 c0    	lea    esi,[eax-0x3ffe04e0]
c00065e4:	83 b8 20 fb 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe04e0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 60 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe09a0]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 28 fb 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe04d8]
c0006653:	81 c2 20 fb 01 c0    	add    edx,0xc001fb20
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 60 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe09a0]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 38 fb 01 c0    	lea    ebp,[eax-0x3ffe04c8]
c00066b9:	83 3d 94 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020494,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 38 fb 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe04c8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 a0 cf 01 c0       	push   0xc001cfa0
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 33 fb 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe04cd],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 30 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe04d0],eax
c000678f:	89 91 34 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe04cc],edx
c0006795:	81 c1 20 fb 01 c0    	add    ecx,0xc001fb20
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 30 fb 01 c0       	add    eax,0xc001fb30
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 40 f6 01 c0       	mov    ds:0xc001f640,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 94 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020494,0x0
c00067df:	a1 8c 04 02 c0       	mov    eax,ds:0xc002048c
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 60 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe09a0]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 a3 cf 01 c0       	push   0xc001cfa3
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 60 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe09a0]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 94 04 02 c0       	mov    ds:0xc0020494,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d 94 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020494,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 8c 04 02 c0       	mov    eax,ds:0xc002048c
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 60 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe09a0]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 aa cf 01 c0       	push   0xc001cfaa
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 60 f6 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe09a0]
c000687d:	bf 60 04 02 c0       	mov    edi,0xc0020460
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 62 04 02 c0       	mov    eax,0xc0020462
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 88 04 02 c0       	mov    ds:0xc0020488,eax
c00068a0:	b8 6a 04 02 c0       	mov    eax,0xc002046a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 84 04 02 c0       	mov    ds:0xc0020484,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 20 fb 01 c0       	push   0xc001fb20
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 20 fb 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fb20,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 90 04 02 c0       	mov    ds:0xc0020490,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 00 fb 01 c0       	mov    ds:0xc001fb00,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 60 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe09a0],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 00 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0a00],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 60 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe09a0]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 00 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0a00]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 90 04 02 c0       	mov    eax,ds:0xc0020490
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 00 fb 01 c0       	mov    eax,ds:0xc001fb00
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 00 fb 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fb00,0x0
c00069a9:	c7 05 90 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020490,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 da 4f 00 00       	call   c000b9b2 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 b1 cf 01 c0       	push   0xc001cfb1
c0006a09:	e8 b1 90 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0006a28:	50                   	push   eax
c0006a29:	68 ca cf 01 c0       	push   0xc001cfca
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 e6 c4 00 00       	call   c0012f1c <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 dd c6 00 00       	call   c0013128 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 70 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023770
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 7c 3b 01 c0       	push   0xc0013b7c
c0006a5a:	52                   	push   edx
c0006a5b:	e8 c8 c6 00 00       	call   c0013128 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 28 37 02 c0       	mov    ds:0xc0023728,eax
c0006a68:	68 c8 d0 01 c0       	push   0xc001d0c8
c0006a6d:	c6 05 9d 04 02 c0 01 	mov    BYTE PTR ds:0xc002049d,0x1
c0006a74:	e8 46 90 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c0006a79:	e8 dd d4 00 00       	call   c0013f5b <Vm::initialise8086()>
c0006a7e:	e8 73 3d 00 00       	call   c000a7f6 <Fs::initVFS()>
c0006a83:	c7 04 24 d7 cf 01 c0 	mov    DWORD PTR [esp],0xc001cfd7
c0006a8a:	e8 30 90 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c0006a8f:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 c8 d0 01 c0       	push   0xc001d0c8
c0006aae:	e8 0c 90 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c0006ab3:	e8 e2 94 00 00       	call   c000ff9a <Krnl::loadSystemEnv()>
c0006ab8:	e8 3f 97 00 00       	call   c00101fc <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 f1 cf 01 c0       	push   0xc001cff1
c0006ac7:	68 fa cf 01 c0       	push   0xc001cffa
c0006acc:	e8 39 aa 00 00       	call   c001150a <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 2b 48 00 00       	call   c000b304 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ec d0 01 c0 	mov    DWORD PTR [esp],0xc001d0ec
c0006ae0:	e8 da 8f 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 b9 4e 00 00       	call   c000b9b0 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 02 d0 01 c0 	mov    DWORD PTR [esp],0xc001d002
c0006afe:	e8 bc 8f 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 13 d0 01 c0       	push   0xc001d013
c0006b12:	e8 3f be 00 00       	call   c0012956 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 67 c0 00 00       	call   c0012b87 <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 17 ca 00 00       	call   c0013544 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 2f d0 01 c0       	push   0xc001d02f
c0006b41:	50                   	push   eax
c0006b42:	e8 e5 4e 00 00       	call   c000ba2c <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 38 d1 01 c0       	mov    edx,0xc001d138
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 b1 04 02 c0 04 	test   BYTE PTR ds:0xc00204b1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 d5 4c 01 00       	call   c001b906 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 80 83 00 00       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 59 83 00 00       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 37 83 00 00       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 15 83 00 00       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 b0 04 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00204b0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 23 82 00 00       	call   c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 fe 81 00 00       	call   c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 3f 4b 01 00       	call   c001b8c0 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 9c 48 01 00       	call   c001b640 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 1a 82 00 00       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 38 d0 01 c0       	push   0xc001d038
c0006e14:	e8 1e 93 00 00       	call   c0010137 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 3e d0 01 c0       	push   0xc001d03e
c0006e4c:	e8 e6 92 00 00       	call   c0010137 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 cb 7b 00 00       	jmp    c000ea64 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 b0 04 02 c0 04 	test   BYTE PTR ds:0xc00204b0,0x4
c0006ee8:	68 44 d0 01 c0       	push   0xc001d044
c0006eed:	0f 94 05 40 f1 01 c0 	sete   BYTE PTR ds:0xc001f140
c0006ef4:	e8 c6 8b 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 ed 76 00 00       	call   c000e5fc <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 76 49 00 00       	call   c000b894 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 5c d0 01 c0 	mov    DWORD PTR [esp],0xc001d05c
c0006f37:	e8 83 8b 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 52 81 00 00       	call   c000f0a4 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 33 49 00 00       	call   c000b894 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 0c d1 01 c0       	push   0xc001d10c
c0006f7e:	e8 3c 8b 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c0006f83:	e8 0a e1 00 00       	call   c0015092 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 76 d0 01 c0 	mov    DWORD PTR [esp],0xc001d076
c0006f8f:	e8 2b 8b 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 a0 c2 00 00       	call   c0013240 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 91 d0 01 c0       	push   0xc001d091
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 63 34 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 a2 d0 01 c0       	push   0xc001d0a2
c000700e:	e8 24 91 00 00       	call   c0010137 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 af d0 01 c0       	push   0xc001d0af
c0007023:	e8 0f 91 00 00       	call   c0010137 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 b9 d0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d0b9
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 f8 90 00 00       	jmp    c0010137 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 a2 04 02 c0       	mov    ds:0xc00204a2,eax
c00070cf:	66 89 15 a0 04 02 c0 	mov    WORD PTR ds:0xc00204a0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0007217:	48                   	dec    eax
c0007218:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 47 db 00 00       	call   c0014d6c <HalSystemIdle()>
c0007225:	e8 98 4c 01 00       	call   c001bec2 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 a8 04 02 c0 ff 07 	mov    WORD PTR ds:0xc00204a8,0x7ff
c000731d:	a3 aa 04 02 c0       	mov    ds:0xc00204aa,eax
c0007322:	0f 01 1d a8 04 02 c0 	lidtd  ds:0xc00204a8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 d0 b6 01 c0       	push   0xc001b6d0
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 e0 b6 01 c0       	push   0xc001b6e0
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 ea b6 01 c0       	push   0xc001b6ea
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 f4 b6 01 c0       	push   0xc001b6f4
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 fe b6 01 c0       	push   0xc001b6fe
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 08 b7 01 c0       	push   0xc001b708
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 12 b7 01 c0       	push   0xc001b712
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 1c b7 01 c0       	push   0xc001b71c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 26 b7 01 c0       	push   0xc001b726
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 2e b7 01 c0       	push   0xc001b72e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 38 b7 01 c0       	push   0xc001b738
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 40 b7 01 c0       	push   0xc001b740
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 48 b7 01 c0       	push   0xc001b748
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 50 b7 01 c0       	push   0xc001b750
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 58 b7 01 c0       	push   0xc001b758
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 60 b7 01 c0       	push   0xc001b760
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 6a b7 01 c0       	push   0xc001b76a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 74 b7 01 c0       	push   0xc001b774
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 7e b7 01 c0       	push   0xc001b77e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 18 b8 01 c0       	push   0xc001b818
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 1f b8 01 c0       	push   0xc001b81f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 0a b8 01 c0       	push   0xc001b80a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 11 b8 01 c0       	push   0xc001b811
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 88 b7 01 c0       	push   0xc001b788
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 92 b7 01 c0       	push   0xc001b792
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 9c b7 01 c0       	push   0xc001b79c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 a6 b7 01 c0       	push   0xc001b7a6
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 b0 b7 01 c0       	push   0xc001b7b0
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 ba b7 01 c0       	push   0xc001b7ba
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 c4 b7 01 c0       	push   0xc001b7c4
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 ce b7 01 c0       	push   0xc001b7ce
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 d8 b7 01 c0       	push   0xc001b7d8
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 e2 b7 01 c0       	push   0xc001b7e2
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 ec b7 01 c0       	push   0xc001b7ec
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 f6 b7 01 c0       	push   0xc001b7f6
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 00 b8 01 c0       	push   0xc001b800
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 56 b8 01 c0       	push   0xc001b856
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 60 b8 01 c0       	push   0xc001b860
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 6a b8 01 c0       	push   0xc001b86a
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 74 b8 01 c0       	push   0xc001b874
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 7e b8 01 c0       	push   0xc001b87e
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 88 b8 01 c0       	push   0xc001b888
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 92 b8 01 c0       	push   0xc001b892
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 9c b8 01 c0       	push   0xc001b89c
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c0007614:	e8 81 23 00 00       	call   c000999a <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 0d 15 00 00       	call   c0008b44 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 26 b7 01 c0       	push   0xc001b726
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 42 15 00 00       	call   c0008b88 <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 34 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f134
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 90 05 02 c0    	mov    esi,DWORD PTR ds:0xc0020590
c00076c2:	8b 3d 34 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f134
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 bc 21 00 00       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 34 f1 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f134,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 34 f1 01 c0       	mov    eax,ds:0xc001f134
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 5c d1 01 c0       	push   0xc001d15c
c000770e:	e8 41 2d 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 8c d1 01 c0       	push   0xc001d18c
c000772d:	e8 05 8a 00 00       	call   c0010137 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 91 d1 01 c0       	push   0xc001d191
c0007743:	e8 ef 89 00 00       	call   c0010137 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0007763:	48                   	dec    eax
c0007764:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c0007781:	e8 14 22 00 00       	call   c000999a <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c0007797:	e8 ba 1e 00 00       	call   c0009656 <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 b0 04 02 c0       	mov    ds:0xc00204b0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 98 d1 01 c0       	push   0xc001d198
c0007862:	e8 ed 2b 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 e5 81 00 00       	call   c000fa51 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 38 1b 00 00       	call   c00093c0 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 e9 1b 00 00       	call   c000947c <VAS::VAS()>
c0007893:	89 1d 90 05 02 c0    	mov    DWORD PTR ds:0xc0020590,ebx
c0007899:	e8 bc 45 01 00       	call   c001be5a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 98 04 02 c0    	mov    DWORD PTR ds:0xc0020498,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 63 1e 00 00       	call   c0009732 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb cc 04 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfb34],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 b0 d1 01 c0       	push   0xc001d1b0
c000792c:	e8 06 88 00 00       	call   c0010137 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 cc 04 02 c0    	lea    edx,[ebp-0x3ffdfb34]
c000796e:	8d 84 05 cd 04 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfb33]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d c4 04 02 c0    	add    DWORD PTR ds:0xc00204c4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 b0 d1 01 c0       	push   0xc001d1b0
c0007993:	e8 9f 87 00 00       	call   c0010137 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 c4 04 02 c0    	sub    DWORD PTR ds:0xc00204c4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 cc 04 02 c0       	add    eax,0xc00204cc
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 38 f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f138
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 38 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f138
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 38 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f138
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d c4 04 02 c0    	dec    DWORD PTR ds:0xc00204c4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 55 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d255
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 b4 86 00 00       	jmp    c0010137 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 b8 04 02 c0    	mov    esi,DWORD PTR ds:0xc00204b8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d b8 04 02 c0    	mov    DWORD PTR ds:0xc00204b8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 b8 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00204b8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 dc 04 02 c0 01 	xor    BYTE PTR ds:0xc00204dc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 84 26 00 00       	call   c000a174 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 d8 d1 01 c0       	push   0xc001d1d8
c0007aff:	e8 33 86 00 00       	call   c0010137 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d b8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204b8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 b8 04 02 c0       	mov    eax,ds:0xc00204b8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 c4 04 02 c0    	inc    DWORD PTR ds:0xc00204c4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0007b99:	48                   	dec    eax
c0007b9a:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d bc 04 02 c0    	cmp    DWORD PTR ds:0xc00204bc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d bc 04 02 c0    	mov    DWORD PTR ds:0xc00204bc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 cc 04 02 c0       	push   0xc00204cc
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 6b d2 01 c0       	push   0xc001d26b
c0007c18:	e8 37 28 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 08 d2 01 c0       	push   0xc001d208
c0007ca4:	e8 ab 27 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 2c d2 01 c0       	push   0xc001d22c
c0007d40:	e8 0f 27 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 c8 04 02 c0    	add    eax,DWORD PTR ds:0xc00204c8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 c8 04 02 c0       	mov    ds:0xc00204c8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 91 d2 01 c0       	push   0xc001d291
c0007d76:	e8 d9 26 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 83 d2 01 c0       	push   0xc001d283
c0007de5:	e8 4d 83 00 00       	call   c0010137 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 c8 04 02 c0 02 	add    DWORD PTR ds:0xc00204c8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 c8 04 02 c0       	mov    eax,ds:0xc00204c8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 c8 04 02 c0       	mov    ds:0xc00204c8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 c8 04 02 c0       	mov    eax,ds:0xc00204c8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 c8 04 02 c0       	mov    ds:0xc00204c8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 c8 04 02 c0       	mov    eax,ds:0xc00204c8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 c8 04 02 c0       	mov    ds:0xc00204c8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba f0 d2 01 c0       	mov    edx,0xc001d2f0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 cf 10 00 00       	call   c0008fa0 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 64 24 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 ad d2 01 c0       	push   0xc001d2ad
c0007fa7:	e8 8b 81 00 00       	call   c0010137 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0007ff0:	e8 53 b3 00 00       	call   c0013348 <schedule()>
c0007ff5:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 b3 3c 01 00       	call   c001bd40 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 ca d2 01 c0       	push   0xc001d2ca
c00080a2:	e8 90 80 00 00       	call   c0010137 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 ee 0c 00 00       	call   c0008dbe <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba f0 d2 01 c0       	mov    edx,0xc001d2f0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 78 d3 01 c0       	mov    edx,0xc001d378
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 5b 0e 00 00       	call   c0008fa0 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 ed 21 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 a3 45 00 00       	call   c000c72f <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 72 dd 00 00       	call   c0015f24 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 60 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0ea0]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 60 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0ea0]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 18 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fe8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 f0 ef 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1010]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d e4 04 02 c0    	cmp    DWORD PTR ds:0xc00204e4,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 95 da 00 00       	call   c0015db0 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d e4 04 02 c0    	cmp    DWORD PTR ds:0xc00204e4,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 f0 da 00 00       	jmp    c0015eb8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 04 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d304
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 23 7d 00 00       	jmp    c0010137 <KePanic(char const*)>
c0008414:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d e4 04 02 c0    	mov    DWORD PTR ds:0xc00204e4,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 3c 2d 00 00       	jmp    c000b2ab <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 12 d3 01 c0       	mov    esi,0xc001d312
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d e4 04 02 c0    	cmp    DWORD PTR ds:0xc00204e4,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 02 d6 00 00       	call   c0015eb8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 b0 04 00 00       	call   c0008dbe <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 78 d3 01 c0       	mov    edx,0xc001d378
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 7e 08 00 00       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 e6 0e 00 00       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008a50:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008a54:	84 db                	test   bl,bl
c0008a56:	0f 84 ba 00 00 00    	je     c0008b16 <VgaText::receiveKey(unsigned char)+0xd0>
c0008a5c:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008a62:	80 fb 08             	cmp    bl,0x8
c0008a65:	75 2c                	jne    c0008a93 <VgaText::receiveKey(unsigned char)+0x4d>
c0008a67:	83 ec 0c             	sub    esp,0xc
c0008a6a:	57                   	push   edi
c0008a6b:	e8 d0 7a ff ff       	call   c0000540 <strlen>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	74 41                	je     c0008ab8 <VgaText::receiveKey(unsigned char)+0x72>
c0008a77:	50                   	push   eax
c0008a78:	50                   	push   eax
c0008a79:	6a 08                	push   0x8
c0008a7b:	56                   	push   esi
c0008a7c:	e8 83 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a81:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a84:	e8 b7 7a ff ff       	call   c0000540 <strlen>
c0008a89:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008a91:	eb 22                	jmp    c0008ab5 <VgaText::receiveKey(unsigned char)+0x6f>
c0008a93:	0f be c3             	movsx  eax,bl
c0008a96:	52                   	push   edx
c0008a97:	52                   	push   edx
c0008a98:	50                   	push   eax
c0008a99:	56                   	push   esi
c0008a9a:	e8 65 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a9f:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0008aa3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008aa8:	59                   	pop    ecx
c0008aa9:	58                   	pop    eax
c0008aaa:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008aae:	50                   	push   eax
c0008aaf:	57                   	push   edi
c0008ab0:	e8 0b 7d ff ff       	call   c00007c0 <strcat>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008abf:	75 05                	jne    c0008ac6 <VgaText::receiveKey(unsigned char)+0x80>
c0008ac1:	80 fb 0a             	cmp    bl,0xa
c0008ac4:	75 50                	jne    c0008b16 <VgaText::receiveKey(unsigned char)+0xd0>
c0008ac6:	83 ec 0c             	sub    esp,0xc
c0008ac9:	81 c6 b2 00 00 00    	add    esi,0xb2
c0008acf:	56                   	push   esi
c0008ad0:	e8 6b 7a ff ff       	call   c0000540 <strlen>
c0008ad5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008ad8:	89 c3                	mov    ebx,eax
c0008ada:	e8 61 7a ff ff       	call   c0000540 <strlen>
c0008adf:	83 c4 10             	add    esp,0x10
c0008ae2:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008ae6:	3d 80 00 00 00       	cmp    eax,0x80
c0008aeb:	76 10                	jbe    c0008afd <VgaText::receiveKey(unsigned char)+0xb7>
c0008aed:	83 ec 0c             	sub    esp,0xc
c0008af0:	68 23 d3 01 c0       	push   0xc001d323
c0008af5:	e8 3d 76 00 00       	call   c0010137 <KePanic(char const*)>
c0008afa:	83 c4 10             	add    esp,0x10
c0008afd:	50                   	push   eax
c0008afe:	50                   	push   eax
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 ba 7c ff ff       	call   c00007c0 <strcat>
c0008b06:	83 c4 0c             	add    esp,0xc
c0008b09:	6a 30                	push   0x30
c0008b0b:	6a 00                	push   0x0
c0008b0d:	57                   	push   edi
c0008b0e:	e8 bd 79 ff ff       	call   c00004d0 <memset>
c0008b13:	83 c4 10             	add    esp,0x10
c0008b16:	83 c4 10             	add    esp,0x10
c0008b19:	5b                   	pop    ebx
c0008b1a:	5e                   	pop    esi
c0008b1b:	5f                   	pop    edi
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::doUpdate()>:
c0008b1e:	c3                   	ret    

c0008b1f <newTerminal(char*)>:
c0008b1f:	83 ec 28             	sub    esp,0x28
c0008b22:	68 34 01 00 00       	push   0x134
c0008b27:	e8 8d ec ff ff       	call   c00077b9 <malloc>
c0008b2c:	5a                   	pop    edx
c0008b2d:	59                   	pop    ecx
c0008b2e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008b32:	50                   	push   eax
c0008b33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b37:	e8 be fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008b3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b40:	83 c4 2c             	add    esp,0x2c
c0008b43:	c3                   	ret    

c0008b44 <TSS::TSS()>:
c0008b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008b4f:	90                   	nop
c0008b50:	c3                   	ret    
c0008b51:	90                   	nop
c0008b52:	66 90                	xchg   ax,ax

c0008b54 <TSS::setESP(unsigned long)>:
c0008b54:	55                   	push   ebp
c0008b55:	89 e5                	mov    ebp,esp
c0008b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008b5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008b5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008b60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008b63:	90                   	nop
c0008b64:	5d                   	pop    ebp
c0008b65:	c3                   	ret    
c0008b66:	66 90                	xchg   ax,ax

c0008b68 <TSS::flush()>:
c0008b68:	55                   	push   ebp
c0008b69:	89 e5                	mov    ebp,esp
c0008b6b:	83 ec 10             	sub    esp,0x10
c0008b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008b71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b73:	83 c8 03             	or     eax,0x3
c0008b76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008b7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008b7e:	66 89 d0             	mov    ax,dx
c0008b81:	0f 00 d8             	ltr    ax
c0008b84:	90                   	nop
c0008b85:	c9                   	leave  
c0008b86:	c3                   	ret    
c0008b87:	90                   	nop

c0008b88 <TSS::setup(unsigned long, unsigned long)>:
c0008b88:	55                   	push   ebp
c0008b89:	89 e5                	mov    ebp,esp
c0008b8b:	83 ec 18             	sub    esp,0x18
c0008b8e:	83 ec 0c             	sub    esp,0xc
c0008b91:	6a 68                	push   0x68
c0008b93:	e8 21 ec ff ff       	call   c00077b9 <malloc>
c0008b98:	83 c4 10             	add    esp,0x10
c0008b9b:	89 c2                	mov    edx,eax
c0008b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ba0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ba6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ba9:	83 ec 04             	sub    esp,0x4
c0008bac:	6a 68                	push   0x68
c0008bae:	6a 00                	push   0x0
c0008bb0:	50                   	push   eax
c0008bb1:	e8 1a 79 ff ff       	call   c00004d0 <memset>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bfb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c07:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c13:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c1f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008c2e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c50:	0f 20 da             	mov    edx,cr3
c0008c53:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008c56:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008c59:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008c5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c62:	83 ec 08             	sub    esp,0x8
c0008c65:	50                   	push   eax
c0008c66:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008c69:	50                   	push   eax
c0008c6a:	e8 d1 e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008c6f:	83 c4 10             	add    esp,0x10
c0008c72:	83 ec 08             	sub    esp,0x8
c0008c75:	6a 68                	push   0x68
c0008c77:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008c7a:	50                   	push   eax
c0008c7b:	e8 dc e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008c87:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008c8a:	83 e0 0f             	and    eax,0xf
c0008c8d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008c90:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008c93:	83 c8 40             	or     eax,0x40
c0008c96:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008c99:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0008c9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ca4:	05 78 01 00 00       	add    eax,0x178
c0008ca9:	83 ec 04             	sub    esp,0x4
c0008cac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008caf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008cb2:	50                   	push   eax
c0008cb3:	e8 d8 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008cb8:	83 c4 10             	add    esp,0x10
c0008cbb:	89 c2                	mov    edx,eax
c0008cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc0:	89 10                	mov    DWORD PTR [eax],edx
c0008cc2:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0008cc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ccd:	05 78 01 00 00       	add    eax,0x178
c0008cd2:	83 ec 0c             	sub    esp,0xc
c0008cd5:	50                   	push   eax
c0008cd6:	e8 df e3 ff ff       	call   c00070ba <GDT::flush()>
c0008cdb:	83 c4 10             	add    esp,0x10
c0008cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce3:	c9                   	leave  
c0008ce4:	c3                   	ret    
c0008ce5:	90                   	nop

c0008ce6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008cea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008cee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008cf6:	75 08                	jne    c0008d00 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008cf8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008cfe:	eb 38                	jmp    c0008d38 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d00:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d05:	75 17                	jne    c0008d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d15:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d1b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008d1e:	89 c1                	mov    ecx,eax
c0008d20:	83 e1 fd             	and    ecx,0xfffffffd
c0008d23:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008d29:	74 cd                	je     c0008cf8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d2b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008d30:	83 e0 ef             	and    eax,0xffffffef
c0008d33:	83 f8 08             	cmp    eax,0x8
c0008d36:	76 c0                	jbe    c0008cf8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d38:	31 c0                	xor    eax,eax
c0008d3a:	c3                   	ret    
c0008d3b:	90                   	nop

c0008d3c <ReservedFilename::isAtty()>:
c0008d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008d43:	31 c0                	xor    eax,eax
c0008d45:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008d4b:	74 09                	je     c0008d56 <ReservedFilename::isAtty()+0x1a>
c0008d4d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008d53:	0f 94 c0             	sete   al
c0008d56:	c3                   	ret    
c0008d57:	90                   	nop

c0008d58 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008d60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d67:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d6c:	75 08                	jne    c0008d76 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008d6e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d74:	eb 3d                	jmp    c0008db3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008d76:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d7b:	75 17                	jne    c0008d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008d7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d85:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d91:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008d94:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008d99:	75 04                	jne    c0008d9f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008d9b:	89 0a                	mov    DWORD PTR [edx],ecx
c0008d9d:	eb 14                	jmp    c0008db3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008d9f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008da4:	74 c8                	je     c0008d6e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008da6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dab:	83 e0 ef             	and    eax,0xffffffef
c0008dae:	83 f8 08             	cmp    eax,0x8
c0008db1:	76 bb                	jbe    c0008d6e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008db3:	31 c0                	xor    eax,eax
c0008db5:	c3                   	ret    

c0008db6 <UnixFile::getFileDescriptor()>:
c0008db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dbd:	c3                   	ret    

c0008dbe <UnixFile::UnixFile(int)>:
c0008dbe:	53                   	push   ebx
c0008dbf:	83 ec 28             	sub    esp,0x28
c0008dc2:	ba 40 d4 01 c0       	mov    edx,0xc001d440
c0008dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008dcb:	89 10                	mov    DWORD PTR [eax],edx
c0008dcd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008dd5:	0f 8f 8c 01 00 00    	jg     c0008f67 <UnixFile::UnixFile(int)+0x1a9>
c0008ddb:	a1 a0 f1 01 c0       	mov    eax,ds:0xc001f1a0
c0008de0:	8d 50 01             	lea    edx,[eax+0x1]
c0008de3:	89 15 a0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1a0,edx
c0008de9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008ded:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008df0:	83 ec 08             	sub    esp,0x8
c0008df3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008df7:	68 78 05 02 c0       	push   0xc0020578
c0008dfc:	e8 27 31 01 00       	call   c001bf28 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e01:	83 c4 10             	add    esp,0x10
c0008e04:	a0 74 05 02 c0       	mov    al,ds:0xc0020574
c0008e09:	83 f0 01             	xor    eax,0x1
c0008e0c:	84 c0                	test   al,al
c0008e0e:	0f 84 54 01 00 00    	je     c0008f68 <UnixFile::UnixFile(int)+0x1aa>
c0008e14:	c6 05 74 05 02 c0 01 	mov    BYTE PTR ds:0xc0020574,0x1
c0008e1b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008e23:	83 ec 0c             	sub    esp,0xc
c0008e26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008e2a:	e8 8a e9 ff ff       	call   c00077b9 <malloc>
c0008e2f:	83 c4 10             	add    esp,0x10
c0008e32:	89 c3                	mov    ebx,eax
c0008e34:	83 ec 08             	sub    esp,0x8
c0008e37:	68 03 ff ff 0f       	push   0xfffff03
c0008e3c:	53                   	push   ebx
c0008e3d:	e8 2c 01 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008e42:	83 c4 10             	add    esp,0x10
c0008e45:	89 1d 6c 05 02 c0    	mov    DWORD PTR ds:0xc002056c,ebx
c0008e4b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008e53:	83 ec 0c             	sub    esp,0xc
c0008e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5a:	e8 5a e9 ff ff       	call   c00077b9 <malloc>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	83 ec 08             	sub    esp,0x8
c0008e67:	68 01 ff ff 0f       	push   0xfffff01
c0008e6c:	53                   	push   ebx
c0008e6d:	e8 fc 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008e72:	83 c4 10             	add    esp,0x10
c0008e75:	89 1d 70 05 02 c0    	mov    DWORD PTR ds:0xc0020570,ebx
c0008e7b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008e83:	83 ec 0c             	sub    esp,0xc
c0008e86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e8a:	e8 2a e9 ff ff       	call   c00077b9 <malloc>
c0008e8f:	83 c4 10             	add    esp,0x10
c0008e92:	89 c3                	mov    ebx,eax
c0008e94:	83 ec 08             	sub    esp,0x8
c0008e97:	68 00 ff ff 0f       	push   0xfffff00
c0008e9c:	53                   	push   ebx
c0008e9d:	e8 cc 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008ea2:	83 c4 10             	add    esp,0x10
c0008ea5:	89 1d 64 05 02 c0    	mov    DWORD PTR ds:0xc0020564,ebx
c0008eab:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008eb3:	83 ec 0c             	sub    esp,0xc
c0008eb6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008eba:	e8 fa e8 ff ff       	call   c00077b9 <malloc>
c0008ebf:	83 c4 10             	add    esp,0x10
c0008ec2:	89 c3                	mov    ebx,eax
c0008ec4:	83 ec 08             	sub    esp,0x8
c0008ec7:	68 02 ff ff 0f       	push   0xfffff02
c0008ecc:	53                   	push   ebx
c0008ecd:	e8 9c 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008ed2:	83 c4 10             	add    esp,0x10
c0008ed5:	89 1d 68 05 02 c0    	mov    DWORD PTR ds:0xc0020568,ebx
c0008edb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008ee3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008ee8:	7f 7e                	jg     c0008f68 <UnixFile::UnixFile(int)+0x1aa>
c0008eea:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008ef2:	83 ec 0c             	sub    esp,0xc
c0008ef5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008ef9:	e8 bb e8 ff ff       	call   c00077b9 <malloc>
c0008efe:	83 c4 10             	add    esp,0x10
c0008f01:	89 c3                	mov    ebx,eax
c0008f03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f07:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f0c:	83 ec 08             	sub    esp,0x8
c0008f0f:	50                   	push   eax
c0008f10:	53                   	push   ebx
c0008f11:	e8 58 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008f16:	83 c4 10             	add    esp,0x10
c0008f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f1d:	89 1c 85 40 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfac0],ebx
c0008f24:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008f2c:	83 ec 0c             	sub    esp,0xc
c0008f2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f33:	e8 81 e8 ff ff       	call   c00077b9 <malloc>
c0008f38:	83 c4 10             	add    esp,0x10
c0008f3b:	89 c3                	mov    ebx,eax
c0008f3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f41:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008f46:	83 ec 08             	sub    esp,0x8
c0008f49:	50                   	push   eax
c0008f4a:	53                   	push   ebx
c0008f4b:	e8 1e 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008f50:	83 c4 10             	add    esp,0x10
c0008f53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f57:	89 1c 85 00 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb00],ebx
c0008f5e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008f62:	e9 7c ff ff ff       	jmp    c0008ee3 <UnixFile::UnixFile(int)+0x125>
c0008f67:	90                   	nop
c0008f68:	83 c4 28             	add    esp,0x28
c0008f6b:	5b                   	pop    ebx
c0008f6c:	c3                   	ret    
c0008f6d:	90                   	nop

c0008f6e <ReservedFilename::ReservedFilename(int)>:
c0008f6e:	83 ec 0c             	sub    esp,0xc
c0008f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f75:	83 ec 08             	sub    esp,0x8
c0008f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f7c:	50                   	push   eax
c0008f7d:	e8 3c fe ff ff       	call   c0008dbe <UnixFile::UnixFile(int)>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	ba 5c d4 01 c0       	mov    edx,0xc001d45c
c0008f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f8e:	89 10                	mov    DWORD PTR [eax],edx
c0008f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008f98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f9b:	90                   	nop
c0008f9c:	83 c4 0c             	add    esp,0xc
c0008f9f:	c3                   	ret    

c0008fa0 <UnixFile::~UnixFile()>:
c0008fa0:	83 ec 1c             	sub    esp,0x1c
c0008fa3:	ba 40 d4 01 c0       	mov    edx,0xc001d440
c0008fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fac:	89 10                	mov    DWORD PTR [eax],edx
c0008fae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0008fba:	7f 73                	jg     c000902f <UnixFile::~UnixFile()+0x8f>
c0008fbc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008fc4:	83 ec 0c             	sub    esp,0xc
c0008fc7:	68 78 05 02 c0       	push   0xc0020578
c0008fcc:	e8 2b 30 01 00       	call   c001bffc <LinkedList<UnixFile>::getFirstElement()>
c0008fd1:	83 c4 10             	add    esp,0x10
c0008fd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	68 78 05 02 c0       	push   0xc0020578
c0008fe0:	e8 1f 30 01 00       	call   c001c004 <LinkedList<UnixFile>::removeFirst()>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fec:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008ff0:	74 40                	je     c0009032 <UnixFile::~UnixFile()+0x92>
c0008ff2:	83 ec 08             	sub    esp,0x8
c0008ff5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008ff9:	68 78 05 02 c0       	push   0xc0020578
c0008ffe:	e8 25 2f 01 00       	call   c001bf28 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000900a:	8d 50 01             	lea    edx,[eax+0x1]
c000900d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009011:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009016:	0f 94 c0             	sete   al
c0009019:	84 c0                	test   al,al
c000901b:	74 a7                	je     c0008fc4 <UnixFile::~UnixFile()+0x24>
c000901d:	83 ec 0c             	sub    esp,0xc
c0009020:	68 18 d4 01 c0       	push   0xc001d418
c0009025:	e8 0d 71 00 00       	call   c0010137 <KePanic(char const*)>
c000902a:	83 c4 10             	add    esp,0x10
c000902d:	eb 95                	jmp    c0008fc4 <UnixFile::~UnixFile()+0x24>
c000902f:	90                   	nop
c0009030:	eb 01                	jmp    c0009033 <UnixFile::~UnixFile()+0x93>
c0009032:	90                   	nop
c0009033:	90                   	nop
c0009034:	83 c4 1c             	add    esp,0x1c
c0009037:	c3                   	ret    

c0009038 <UnixFile::~UnixFile()>:
c0009038:	83 ec 0c             	sub    esp,0xc
c000903b:	83 ec 0c             	sub    esp,0xc
c000903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009042:	e8 59 ff ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c0009047:	83 c4 10             	add    esp,0x10
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	6a 0c                	push   0xc
c000904f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009053:	e8 06 13 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	83 c4 0c             	add    esp,0xc
c000905e:	c3                   	ret    
c000905f:	90                   	nop

c0009060 <ReservedFilename::~ReservedFilename()>:
c0009060:	83 ec 0c             	sub    esp,0xc
c0009063:	ba 5c d4 01 c0       	mov    edx,0xc001d45c
c0009068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000906c:	89 10                	mov    DWORD PTR [eax],edx
c000906e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009072:	83 ec 0c             	sub    esp,0xc
c0009075:	50                   	push   eax
c0009076:	e8 25 ff ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c000907b:	83 c4 10             	add    esp,0x10
c000907e:	90                   	nop
c000907f:	83 c4 0c             	add    esp,0xc
c0009082:	c3                   	ret    
c0009083:	90                   	nop

c0009084 <ReservedFilename::~ReservedFilename()>:
c0009084:	83 ec 0c             	sub    esp,0xc
c0009087:	83 ec 0c             	sub    esp,0xc
c000908a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000908e:	e8 cd ff ff ff       	call   c0009060 <ReservedFilename::~ReservedFilename()>
c0009093:	83 c4 10             	add    esp,0x10
c0009096:	83 ec 08             	sub    esp,0x8
c0009099:	6a 0c                	push   0xc
c000909b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909f:	e8 ba 12 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	83 c4 0c             	add    esp,0xc
c00090aa:	c3                   	ret    

c00090ab <getFromFileDescriptor(int)>:
c00090ab:	53                   	push   ebx
c00090ac:	83 ec 08             	sub    esp,0x8
c00090af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00090b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00090b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00090bf:	7f 2c                	jg     c00090ed <getFromFileDescriptor(int)+0x42>
c00090c1:	83 ec 0c             	sub    esp,0xc
c00090c4:	68 78 05 02 c0       	push   0xc0020578
c00090c9:	e8 2e 2f 01 00       	call   c001bffc <LinkedList<UnixFile>::getFirstElement()>
c00090ce:	83 c4 10             	add    esp,0x10
c00090d1:	85 c0                	test   eax,eax
c00090d3:	75 04                	jne    c00090d9 <getFromFileDescriptor(int)+0x2e>
c00090d5:	31 c0                	xor    eax,eax
c00090d7:	eb 6e                	jmp    c0009147 <getFromFileDescriptor(int)+0x9c>
c00090d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00090dc:	74 69                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c00090de:	52                   	push   edx
c00090df:	52                   	push   edx
c00090e0:	50                   	push   eax
c00090e1:	68 78 05 02 c0       	push   0xc0020578
c00090e6:	e8 bb 2f 01 00       	call   c001c0a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00090eb:	eb e1                	jmp    c00090ce <getFromFileDescriptor(int)+0x23>
c00090ed:	a1 6c 05 02 c0       	mov    eax,ds:0xc002056c
c00090f2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00090f8:	74 4d                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c00090fa:	a1 70 05 02 c0       	mov    eax,ds:0xc0020570
c00090ff:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009105:	74 40                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c0009107:	a1 68 05 02 c0       	mov    eax,ds:0xc0020568
c000910c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009112:	74 33                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c0009114:	a1 64 05 02 c0       	mov    eax,ds:0xc0020564
c0009119:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000911f:	74 26                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c0009121:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009127:	83 f8 08             	cmp    eax,0x8
c000912a:	77 09                	ja     c0009135 <getFromFileDescriptor(int)+0x8a>
c000912c:	8b 04 85 40 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfac0]
c0009133:	eb 12                	jmp    c0009147 <getFromFileDescriptor(int)+0x9c>
c0009135:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000913b:	83 fb 08             	cmp    ebx,0x8
c000913e:	77 95                	ja     c00090d5 <getFromFileDescriptor(int)+0x2a>
c0009140:	8b 04 9d 00 05 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfb00]
c0009147:	83 c4 08             	add    esp,0x8
c000914a:	5b                   	pop    ebx
c000914b:	c3                   	ret    

c000914c <__static_initialization_and_destruction_0(int, int)>:
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009154:	75 34                	jne    c000918a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009156:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000915e:	75 2a                	jne    c000918a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009160:	83 ec 0c             	sub    esp,0xc
c0009163:	68 78 05 02 c0       	push   0xc0020578
c0009168:	e8 79 2d 01 00       	call   c001bee6 <LinkedList<UnixFile>::LinkedList()>
c000916d:	83 c4 10             	add    esp,0x10
c0009170:	83 ec 04             	sub    esp,0x4
c0009173:	68 30 f1 01 c0       	push   0xc001f130
c0009178:	68 78 05 02 c0       	push   0xc0020578
c000917d:	68 e4 be 01 c0       	push   0xc001bee4
c0009182:	e8 87 11 00 00       	call   c000a30e <__cxa_atexit>
c0009187:	83 c4 10             	add    esp,0x10
c000918a:	90                   	nop
c000918b:	83 c4 0c             	add    esp,0xc
c000918e:	c3                   	ret    

c000918f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000918f:	83 ec 0c             	sub    esp,0xc
c0009192:	83 ec 08             	sub    esp,0x8
c0009195:	68 ff ff 00 00       	push   0xffff
c000919a:	6a 01                	push   0x1
c000919c:	e8 ab ff ff ff       	call   c000914c <__static_initialization_and_destruction_0(int, int)>
c00091a1:	83 c4 10             	add    esp,0x10
c00091a4:	83 c4 0c             	add    esp,0xc
c00091a7:	c3                   	ret    

c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00091a8:	53                   	push   ebx
c00091a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00091b1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00091b7:	89 c8                	mov    eax,ecx
c00091b9:	d1 e8                	shr    eax,1
c00091bb:	03 05 a8 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f1a8
c00091c1:	83 e1 01             	and    ecx,0x1
c00091c4:	8a 10                	mov    dl,BYTE PTR [eax]
c00091c6:	75 09                	jne    c00091d1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00091c8:	83 e2 f0             	and    edx,0xfffffff0
c00091cb:	09 da                	or     edx,ebx
c00091cd:	88 10                	mov    BYTE PTR [eax],dl
c00091cf:	5b                   	pop    ebx
c00091d0:	c3                   	ret    
c00091d1:	c1 e3 04             	shl    ebx,0x4
c00091d4:	83 e2 0f             	and    edx,0xf
c00091d7:	09 da                	or     edx,ebx
c00091d9:	88 10                	mov    BYTE PTR [eax],dl
c00091db:	5b                   	pop    ebx
c00091dc:	c3                   	ret    

c00091dd <Virt::getPageState(unsigned long)>:
c00091dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091e1:	8b 0d a8 f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1a8
c00091e7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00091ed:	89 d0                	mov    eax,edx
c00091ef:	d1 e8                	shr    eax,1
c00091f1:	83 e2 01             	and    edx,0x1
c00091f4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00091f7:	75 04                	jne    c00091fd <Virt::getPageState(unsigned long)+0x20>
c00091f9:	83 e0 0f             	and    eax,0xf
c00091fc:	c3                   	ret    
c00091fd:	c0 e8 04             	shr    al,0x4
c0009200:	c3                   	ret    

c0009201 <Virt::allocateKernelVirtualPages(int)>:
c0009201:	55                   	push   ebp
c0009202:	31 ed                	xor    ebp,ebp
c0009204:	57                   	push   edi
c0009205:	56                   	push   esi
c0009206:	53                   	push   ebx
c0009207:	31 db                	xor    ebx,ebx
c0009209:	83 ec 1c             	sub    esp,0x1c
c000920c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009210:	8b 3d a4 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f1a4
c0009216:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000921b:	57                   	push   edi
c000921c:	e8 bc ff ff ff       	call   c00091dd <Virt::getPageState(unsigned long)>
c0009221:	5a                   	pop    edx
c0009222:	84 c0                	test   al,al
c0009224:	75 3a                	jne    c0009260 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009226:	85 db                	test   ebx,ebx
c0009228:	75 02                	jne    c000922c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000922a:	89 fd                	mov    ebp,edi
c000922c:	43                   	inc    ebx
c000922d:	39 f3                	cmp    ebx,esi
c000922f:	74 5a                	je     c000928b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009231:	47                   	inc    edi
c0009232:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009238:	76 31                	jbe    c000926b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000923a:	c7 05 a4 f1 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f1a4,0xc8000
c0009244:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009249:	75 28                	jne    c0009273 <Virt::allocateKernelVirtualPages(int)+0x72>
c000924b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009250:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009255:	57                   	push   edi
c0009256:	e8 82 ff ff ff       	call   c00091dd <Virt::getPageState(unsigned long)>
c000925b:	5a                   	pop    edx
c000925c:	84 c0                	test   al,al
c000925e:	74 c6                	je     c0009226 <Virt::allocateKernelVirtualPages(int)+0x25>
c0009260:	31 db                	xor    ebx,ebx
c0009262:	47                   	inc    edi
c0009263:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009269:	77 cf                	ja     c000923a <Virt::allocateKernelVirtualPages(int)+0x39>
c000926b:	89 3d a4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1a4,edi
c0009271:	eb a8                	jmp    c000921b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009273:	83 ec 0c             	sub    esp,0xc
c0009276:	68 70 d4 01 c0       	push   0xc001d470
c000927b:	e8 b7 6e 00 00       	call   c0010137 <KePanic(char const*)>
c0009280:	8b 3d a4 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f1a4
c0009286:	83 c4 10             	add    esp,0x10
c0009289:	eb 90                	jmp    c000921b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000928b:	89 2d a4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1a4,ebp
c0009291:	4b                   	dec    ebx
c0009292:	74 5f                	je     c00092f3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009294:	85 f6                	test   esi,esi
c0009296:	74 3d                	je     c00092d5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009298:	89 e8                	mov    eax,ebp
c000929a:	31 db                	xor    ebx,ebx
c000929c:	8d 7e ff             	lea    edi,[esi-0x1]
c000929f:	eb 14                	jmp    c00092b5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00092a1:	6a 01                	push   0x1
c00092a3:	43                   	inc    ebx
c00092a4:	50                   	push   eax
c00092a5:	e8 fe fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092aa:	58                   	pop    eax
c00092ab:	39 f3                	cmp    ebx,esi
c00092ad:	5a                   	pop    edx
c00092ae:	74 25                	je     c00092d5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00092b0:	a1 a4 f1 01 c0       	mov    eax,ds:0xc001f1a4
c00092b5:	8d 50 01             	lea    edx,[eax+0x1]
c00092b8:	85 db                	test   ebx,ebx
c00092ba:	89 15 a4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1a4,edx
c00092c0:	74 20                	je     c00092e2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00092c2:	39 df                	cmp    edi,ebx
c00092c4:	75 db                	jne    c00092a1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00092c6:	6a 03                	push   0x3
c00092c8:	43                   	inc    ebx
c00092c9:	50                   	push   eax
c00092ca:	e8 d9 fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092cf:	59                   	pop    ecx
c00092d0:	39 f3                	cmp    ebx,esi
c00092d2:	58                   	pop    eax
c00092d3:	75 db                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00092d5:	83 c4 1c             	add    esp,0x1c
c00092d8:	89 e8                	mov    eax,ebp
c00092da:	5b                   	pop    ebx
c00092db:	c1 e0 0c             	shl    eax,0xc
c00092de:	5e                   	pop    esi
c00092df:	5f                   	pop    edi
c00092e0:	5d                   	pop    ebp
c00092e1:	c3                   	ret    
c00092e2:	6a 02                	push   0x2
c00092e4:	bb 01 00 00 00       	mov    ebx,0x1
c00092e9:	50                   	push   eax
c00092ea:	e8 b9 fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092ef:	58                   	pop    eax
c00092f0:	5a                   	pop    edx
c00092f1:	eb bd                	jmp    c00092b0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00092f3:	6a 04                	push   0x4
c00092f5:	8d 45 01             	lea    eax,[ebp+0x1]
c00092f8:	55                   	push   ebp
c00092f9:	a3 a4 f1 01 c0       	mov    ds:0xc001f1a4,eax
c00092fe:	e8 a5 fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009303:	59                   	pop    ecx
c0009304:	89 e8                	mov    eax,ebp
c0009306:	5b                   	pop    ebx
c0009307:	c1 e0 0c             	shl    eax,0xc
c000930a:	83 c4 1c             	add    esp,0x1c
c000930d:	5b                   	pop    ebx
c000930e:	5e                   	pop    esi
c000930f:	5f                   	pop    edi
c0009310:	5d                   	pop    ebp
c0009311:	c3                   	ret    

c0009312 <Virt::freeSwapfilePage(unsigned long)>:
c0009312:	53                   	push   ebx
c0009313:	8b 15 8c 05 02 c0    	mov    edx,DWORD PTR ds:0xc002058c
c0009319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000931d:	b8 01 00 00 00       	mov    eax,0x1
c0009322:	89 cb                	mov    ebx,ecx
c0009324:	d3 e0                	shl    eax,cl
c0009326:	c1 eb 05             	shr    ebx,0x5
c0009329:	f7 d0                	not    eax
c000932b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000932e:	5b                   	pop    ebx
c000932f:	c3                   	ret    

c0009330 <Virt::swapIDToSector(unsigned long)>:
c0009330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009334:	0f af 05 ac f1 01 c0 	imul   eax,DWORD PTR ds:0xc001f1ac
c000933b:	03 05 b4 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f1b4
c0009341:	c3                   	ret    

c0009342 <Virt::allocateSwapfilePage()>:
c0009342:	55                   	push   ebp
c0009343:	31 d2                	xor    edx,edx
c0009345:	57                   	push   edi
c0009346:	56                   	push   esi
c0009347:	53                   	push   ebx
c0009348:	83 ec 0c             	sub    esp,0xc
c000934b:	8b 0d ac f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1ac
c0009351:	a1 b0 f1 01 c0       	mov    eax,ds:0xc001f1b0
c0009356:	f7 f1                	div    ecx
c0009358:	39 0d b0 f1 01 c0    	cmp    DWORD PTR ds:0xc001f1b0,ecx
c000935e:	72 2d                	jb     c000938d <Virt::allocateSwapfilePage()+0x4b>
c0009360:	8b 35 8c 05 02 c0    	mov    esi,DWORD PTR ds:0xc002058c
c0009366:	8b 16                	mov    edx,DWORD PTR [esi]
c0009368:	f6 c2 01             	test   dl,0x1
c000936b:	74 3c                	je     c00093a9 <Virt::allocateSwapfilePage()+0x67>
c000936d:	31 c9                	xor    ecx,ecx
c000936f:	bf 01 00 00 00       	mov    edi,0x1
c0009374:	eb 12                	jmp    c0009388 <Virt::allocateSwapfilePage()+0x46>
c0009376:	89 fd                	mov    ebp,edi
c0009378:	89 ca                	mov    edx,ecx
c000937a:	d3 e5                	shl    ebp,cl
c000937c:	c1 ea 05             	shr    edx,0x5
c000937f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009382:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009384:	85 ea                	test   edx,ebp
c0009386:	74 2a                	je     c00093b2 <Virt::allocateSwapfilePage()+0x70>
c0009388:	41                   	inc    ecx
c0009389:	39 c8                	cmp    eax,ecx
c000938b:	77 e9                	ja     c0009376 <Virt::allocateSwapfilePage()+0x34>
c000938d:	83 ec 0c             	sub    esp,0xc
c0009390:	68 d7 d5 01 c0       	push   0xc001d5d7
c0009395:	e8 9d 6d 00 00       	call   c0010137 <KePanic(char const*)>
c000939a:	83 c4 10             	add    esp,0x10
c000939d:	31 c9                	xor    ecx,ecx
c000939f:	83 c4 0c             	add    esp,0xc
c00093a2:	89 c8                	mov    eax,ecx
c00093a4:	5b                   	pop    ebx
c00093a5:	5e                   	pop    esi
c00093a6:	5f                   	pop    edi
c00093a7:	5d                   	pop    ebp
c00093a8:	c3                   	ret    
c00093a9:	89 f3                	mov    ebx,esi
c00093ab:	bd 01 00 00 00       	mov    ebp,0x1
c00093b0:	31 c9                	xor    ecx,ecx
c00093b2:	09 ea                	or     edx,ebp
c00093b4:	89 c8                	mov    eax,ecx
c00093b6:	89 13                	mov    DWORD PTR [ebx],edx
c00093b8:	83 c4 0c             	add    esp,0xc
c00093bb:	5b                   	pop    ebx
c00093bc:	5e                   	pop    esi
c00093bd:	5f                   	pop    edi
c00093be:	5d                   	pop    ebp
c00093bf:	c3                   	ret    

c00093c0 <Virt::virtualMemorySetup()>:
c00093c0:	53                   	push   ebx
c00093c1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00093c6:	6a 0f                	push   0xf
c00093c8:	53                   	push   ebx
c00093c9:	43                   	inc    ebx
c00093ca:	e8 d9 fd ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093cf:	58                   	pop    eax
c00093d0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00093d6:	5a                   	pop    edx
c00093d7:	75 ed                	jne    c00093c6 <Virt::virtualMemorySetup()+0x6>
c00093d9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00093de:	6a 00                	push   0x0
c00093e0:	53                   	push   ebx
c00093e1:	43                   	inc    ebx
c00093e2:	e8 c1 fd ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093e7:	59                   	pop    ecx
c00093e8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00093ee:	58                   	pop    eax
c00093ef:	75 ed                	jne    c00093de <Virt::virtualMemorySetup()+0x1e>
c00093f1:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00093f6:	6a 0f                	push   0xf
c00093f8:	53                   	push   ebx
c00093f9:	43                   	inc    ebx
c00093fa:	e8 a9 fd ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093ff:	58                   	pop    eax
c0009400:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009406:	5a                   	pop    edx
c0009407:	75 ed                	jne    c00093f6 <Virt::virtualMemorySetup()+0x36>
c0009409:	5b                   	pop    ebx
c000940a:	c3                   	ret    

c000940b <Virt::setupPageSwapping(int)>:
c000940b:	53                   	push   ebx
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009413:	a1 08 2a 02 c0       	mov    eax,ds:0xc0022a08
c0009418:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000941e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009420:	53                   	push   ebx
c0009421:	c1 e3 0b             	shl    ebx,0xb
c0009424:	68 ee d5 01 c0       	push   0xc001d5ee
c0009429:	50                   	push   eax
c000942a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000942d:	89 1d b0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1b0,ebx
c0009433:	c6 05 b8 f1 01 c0 43 	mov    BYTE PTR ds:0xc001f1b8,0x43
c000943a:	c1 eb 08             	shr    ebx,0x8
c000943d:	a3 b4 f1 01 c0       	mov    ds:0xc001f1b4,eax
c0009442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009445:	c7 05 ac f1 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f1ac,0x8
c000944f:	e8 65 e3 ff ff       	call   c00077b9 <malloc>
c0009454:	83 c4 0c             	add    esp,0xc
c0009457:	89 c1                	mov    ecx,eax
c0009459:	a3 8c 05 02 c0       	mov    ds:0xc002058c,eax
c000945e:	31 d2                	xor    edx,edx
c0009460:	a1 b0 f1 01 c0       	mov    eax,ds:0xc001f1b0
c0009465:	f7 35 ac f1 01 c0    	div    DWORD PTR ds:0xc001f1ac
c000946b:	c1 e8 05             	shr    eax,0x5
c000946e:	50                   	push   eax
c000946f:	6a 00                	push   0x0
c0009471:	51                   	push   ecx
c0009472:	e8 59 70 ff ff       	call   c00004d0 <memset>
c0009477:	83 c4 18             	add    esp,0x18
c000947a:	5b                   	pop    ebx
c000947b:	c3                   	ret    

c000947c <VAS::VAS()>:
c000947c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009487:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000948b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009496:	a3 90 05 02 c0       	mov    ds:0xc0020590,eax
c000949b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000949f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00094a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094a7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00094aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094ae:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00094b5:	90                   	nop
c00094b6:	c3                   	ret    
c00094b7:	90                   	nop

c00094b8 <VAS::VAS(VAS*)>:
c00094b8:	83 ec 0c             	sub    esp,0xc
c00094bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00094c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094ca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00094d1:	83 ec 0c             	sub    esp,0xc
c00094d4:	68 90 d4 01 c0       	push   0xc001d490
c00094d9:	e8 59 6c 00 00       	call   c0010137 <KePanic(char const*)>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	90                   	nop
c00094e2:	83 c4 0c             	add    esp,0xc
c00094e5:	c3                   	ret    

c00094e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00094e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00094ea:	89 c2                	mov    edx,eax
c00094ec:	c1 e8 0a             	shr    eax,0xa
c00094ef:	c1 ea 16             	shr    edx,0x16
c00094f2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00094f7:	19 c9                	sbb    ecx,ecx
c00094f9:	c1 e2 0c             	shl    edx,0xc
c00094fc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009502:	25 fc 0f 00 00       	and    eax,0xffc
c0009507:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000950e:	01 d0                	add    eax,edx
c0009510:	c3                   	ret    
c0009511:	90                   	nop

c0009512 <VAS::getPageTableEntry(unsigned long)>:
c0009512:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009516:	89 ca                	mov    edx,ecx
c0009518:	c1 e9 0a             	shr    ecx,0xa
c000951b:	c1 ea 16             	shr    edx,0x16
c000951e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009524:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000952a:	c1 e0 0c             	shl    eax,0xc
c000952d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009530:	c3                   	ret    

c0009531 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009531:	57                   	push   edi
c0009532:	56                   	push   esi
c0009533:	be 01 00 00 00       	mov    esi,0x1
c0009538:	53                   	push   ebx
c0009539:	83 ec 10             	sub    esp,0x10
c000953c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009540:	c1 eb 0c             	shr    ebx,0xc
c0009543:	eb 3f                	jmp    c0009584 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009545:	83 ec 08             	sub    esp,0x8
c0009548:	a1 90 05 02 c0       	mov    eax,ds:0xc0020590
c000954d:	57                   	push   edi
c000954e:	50                   	push   eax
c000954f:	e8 be ff ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0009554:	83 c4 10             	add    esp,0x10
c0009557:	8b 00                	mov    eax,DWORD PTR [eax]
c0009559:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000955d:	f6 c4 04             	test   ah,0x4
c0009560:	75 60                	jne    c00095c2 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009562:	80 fa 04             	cmp    dl,0x4
c0009565:	74 79                	je     c00095e0 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009567:	80 fa 02             	cmp    dl,0x2
c000956a:	0f 84 89 00 00 00    	je     c00095f9 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009570:	80 fa 03             	cmp    dl,0x3
c0009573:	0f 84 ae 00 00 00    	je     c0009627 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009579:	fe ca                	dec    dl
c000957b:	0f 84 93 00 00 00    	je     c0009614 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009581:	43                   	inc    ebx
c0009582:	31 f6                	xor    esi,esi
c0009584:	53                   	push   ebx
c0009585:	89 df                	mov    edi,ebx
c0009587:	e8 51 fc ff ff       	call   c00091dd <Virt::getPageState(unsigned long)>
c000958c:	c1 e7 0c             	shl    edi,0xc
c000958f:	5a                   	pop    edx
c0009590:	84 c0                	test   al,al
c0009592:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009596:	75 ad                	jne    c0009545 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	68 05 d6 01 c0       	push   0xc001d605
c00095a0:	e8 92 6b 00 00       	call   c0010137 <KePanic(char const*)>
c00095a5:	5a                   	pop    edx
c00095a6:	59                   	pop    ecx
c00095a7:	57                   	push   edi
c00095a8:	8b 3d 90 05 02 c0    	mov    edi,DWORD PTR ds:0xc0020590
c00095ae:	57                   	push   edi
c00095af:	e8 5e ff ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00095b9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095bd:	f6 c4 04             	test   ah,0x4
c00095c0:	74 bf                	je     c0009581 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00095c2:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00095c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00095cb:	83 ec 0c             	sub    esp,0xc
c00095ce:	50                   	push   eax
c00095cf:	e8 5f e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095db:	80 fa 04             	cmp    dl,0x4
c00095de:	75 87                	jne    c0009567 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00095e0:	89 f0                	mov    eax,esi
c00095e2:	84 c0                	test   al,al
c00095e4:	75 47                	jne    c000962d <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00095e6:	c7 44 24 20 b4 d4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d4b4
c00095ee:	83 c4 10             	add    esp,0x10
c00095f1:	5b                   	pop    ebx
c00095f2:	5e                   	pop    esi
c00095f3:	5f                   	pop    edi
c00095f4:	e9 3e 6b 00 00       	jmp    c0010137 <KePanic(char const*)>
c00095f9:	89 f0                	mov    eax,esi
c00095fb:	84 c0                	test   al,al
c00095fd:	75 15                	jne    c0009614 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095ff:	83 ec 0c             	sub    esp,0xc
c0009602:	68 21 d6 01 c0       	push   0xc001d621
c0009607:	e8 2b 6b 00 00       	call   c0010137 <KePanic(char const*)>
c000960c:	83 c4 10             	add    esp,0x10
c000960f:	e9 6d ff ff ff       	jmp    c0009581 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009614:	83 ec 08             	sub    esp,0x8
c0009617:	6a 00                	push   0x0
c0009619:	53                   	push   ebx
c000961a:	e8 89 fb ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000961f:	83 c4 10             	add    esp,0x10
c0009622:	e9 5a ff ff ff       	jmp    c0009581 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009627:	89 f0                	mov    eax,esi
c0009629:	84 c0                	test   al,al
c000962b:	75 15                	jne    c0009642 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c000962d:	83 ec 08             	sub    esp,0x8
c0009630:	6a 00                	push   0x0
c0009632:	53                   	push   ebx
c0009633:	e8 70 fb ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009638:	83 c4 10             	add    esp,0x10
c000963b:	83 c4 10             	add    esp,0x10
c000963e:	5b                   	pop    ebx
c000963f:	5e                   	pop    esi
c0009640:	5f                   	pop    edi
c0009641:	c3                   	ret    
c0009642:	c7 44 24 20 3d d6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d63d
c000964a:	83 c4 10             	add    esp,0x10
c000964d:	5b                   	pop    ebx
c000964e:	5e                   	pop    esi
c000964f:	5f                   	pop    edi
c0009650:	e9 e2 6a 00 00       	jmp    c0010137 <KePanic(char const*)>
c0009655:	90                   	nop

c0009656 <VAS::freeAllocatedPages(unsigned long)>:
c0009656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000965a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000965e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009662:	74 09                	je     c000966d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009664:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009668:	e9 c4 fe ff ff       	jmp    c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c000966d:	c7 44 24 04 d8 d4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d4d8
c0009675:	e9 da 0d 00 00       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>

c000967a <VAS::virtualToPhysical(unsigned long)>:
c000967a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000967e:	50                   	push   eax
c000967f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009683:	52                   	push   edx
c0009684:	e8 89 fe ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0009689:	59                   	pop    ecx
c000968a:	8b 00                	mov    eax,DWORD PTR [eax]
c000968c:	5a                   	pop    edx
c000968d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009692:	c3                   	ret    
c0009693:	90                   	nop

c0009694 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009694:	55                   	push   ebp
c0009695:	57                   	push   edi
c0009696:	56                   	push   esi
c0009697:	53                   	push   ebx
c0009698:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000969c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00096a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00096a4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00096a8:	85 db                	test   ebx,ebx
c00096aa:	7e 22                	jle    c00096ce <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00096ac:	c1 e3 0c             	shl    ebx,0xc
c00096af:	01 f3                	add    ebx,esi
c00096b1:	56                   	push   esi
c00096b2:	81 c6 00 10 00 00    	add    esi,0x1000
c00096b8:	55                   	push   ebp
c00096b9:	e8 54 fe ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c00096be:	5a                   	pop    edx
c00096bf:	59                   	pop    ecx
c00096c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00096c2:	21 f9                	and    ecx,edi
c00096c4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00096c8:	39 f3                	cmp    ebx,esi
c00096ca:	89 08                	mov    DWORD PTR [eax],ecx
c00096cc:	75 e3                	jne    c00096b1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00096ce:	5b                   	pop    ebx
c00096cf:	5e                   	pop    esi
c00096d0:	5f                   	pop    edi
c00096d1:	5d                   	pop    ebp
c00096d2:	c3                   	ret    
c00096d3:	90                   	nop

c00096d4 <VAS::setToWriteCombining(unsigned long, int)>:
c00096d4:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c00096d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00096df:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00096e6:	75 01                	jne    c00096e9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00096e8:	c3                   	ret    
c00096e9:	68 80 00 00 00       	push   0x80
c00096ee:	6a ff                	push   0xffffffff
c00096f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096f4:	50                   	push   eax
c00096f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00096f9:	52                   	push   edx
c00096fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00096fe:	51                   	push   ecx
c00096ff:	e8 90 ff ff ff       	call   c0009694 <VAS::reflagRange(unsigned long, int, int, int)>
c0009704:	83 c4 14             	add    esp,0x14
c0009707:	c3                   	ret    

c0009708 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009708:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000970d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009711:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009718:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000971b:	19 c0                	sbb    eax,eax
c000971d:	83 ca 03             	or     edx,0x3
c0009720:	83 e0 fc             	and    eax,0xfffffffc
c0009723:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000972a:	0f 20 d8             	mov    eax,cr3
c000972d:	0f 22 d8             	mov    cr3,eax
c0009730:	c3                   	ret    
c0009731:	90                   	nop

c0009732 <VAS::~VAS()>:
c0009732:	83 ec 2c             	sub    esp,0x2c
c0009735:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000973d:	fa                   	cli    
c000973e:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0009743:	40                   	inc    eax
c0009744:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0009749:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000974e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009750:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009753:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009759:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000975d:	6a 01                	push   0x1
c000975f:	50                   	push   eax
c0009760:	e8 a3 ff ff ff       	call   c0009708 <VAS::mapOtherVASIn(bool, VAS*)>
c0009765:	83 c4 0c             	add    esp,0xc
c0009768:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009770:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009778:	0f 8f d4 00 00 00    	jg     c0009852 <VAS::~VAS()+0x120>
c000977e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009782:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009785:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009789:	c1 e2 02             	shl    edx,0x2
c000978c:	01 d0                	add    eax,edx
c000978e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009790:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009798:	83 e0 01             	and    eax,0x1
c000979b:	0f 84 a8 00 00 00    	je     c0009849 <VAS::~VAS()+0x117>
c00097a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00097a9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00097b1:	7f 72                	jg     c0009825 <VAS::~VAS()+0xf3>
c00097b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00097b7:	c1 e0 0a             	shl    eax,0xa
c00097ba:	89 c2                	mov    edx,eax
c00097bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00097c0:	01 d0                	add    eax,edx
c00097c2:	c1 e0 0c             	shl    eax,0xc
c00097c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097c9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097d3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097dd:	6a 01                	push   0x1
c00097df:	50                   	push   eax
c00097e0:	e8 01 fd ff ff       	call   c00094e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00097e5:	83 c4 0c             	add    esp,0xc
c00097e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00097f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097fa:	25 01 04 00 00       	and    eax,0x401
c00097ff:	3d 01 04 00 00       	cmp    eax,0x401
c0009804:	75 19                	jne    c000981f <VAS::~VAS()+0xed>
c0009806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000980f:	83 ec 0c             	sub    esp,0xc
c0009812:	50                   	push   eax
c0009813:	e8 1b e2 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009818:	83 c4 10             	add    esp,0x10
c000981b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000981f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009823:	eb 84                	jmp    c00097a9 <VAS::~VAS()+0x77>
c0009825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009829:	25 00 04 00 00       	and    eax,0x400
c000982e:	74 19                	je     c0009849 <VAS::~VAS()+0x117>
c0009830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009834:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009839:	83 ec 0c             	sub    esp,0xc
c000983c:	50                   	push   eax
c000983d:	e8 f1 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009842:	83 c4 10             	add    esp,0x10
c0009845:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009849:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000984d:	e9 1e ff ff ff       	jmp    c0009770 <VAS::~VAS()+0x3e>
c0009852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009856:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009859:	83 ec 0c             	sub    esp,0xc
c000985c:	50                   	push   eax
c000985d:	e8 cf fc ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0009862:	83 c4 10             	add    esp,0x10
c0009865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009869:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000986c:	83 ec 0c             	sub    esp,0xc
c000986f:	50                   	push   eax
c0009870:	e8 be e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009875:	83 c4 10             	add    esp,0x10
c0009878:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000987c:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0009881:	48                   	dec    eax
c0009882:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0009887:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000988c:	85 c0                	test   eax,eax
c000988e:	75 01                	jne    c0009891 <VAS::~VAS()+0x15f>
c0009890:	fb                   	sti    
c0009891:	90                   	nop
c0009892:	83 c4 2c             	add    esp,0x2c
c0009895:	c3                   	ret    

c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009896:	55                   	push   ebp
c0009897:	57                   	push   edi
c0009898:	56                   	push   esi
c0009899:	53                   	push   ebx
c000989a:	83 ec 1c             	sub    esp,0x1c
c000989d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00098a5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00098ab:	77 0b                	ja     c00098b8 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c00098ad:	0f 20 d8             	mov    eax,cr3
c00098b0:	0f 20 d8             	mov    eax,cr3
c00098b3:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00098b6:	75 47                	jne    c00098ff <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c00098b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00098bc:	09 d8                	or     eax,ebx
c00098be:	a9 ff 0f 00 00       	test   eax,0xfff
c00098c3:	75 57                	jne    c000991c <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c00098c5:	89 de                	mov    esi,ebx
c00098c7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00098ca:	c1 ee 16             	shr    esi,0x16
c00098cd:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00098d4:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00098d8:	74 54                	je     c000992e <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c00098da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00098de:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00098e4:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00098e8:	c1 e6 0c             	shl    esi,0xc
c00098eb:	c1 eb 0a             	shr    ebx,0xa
c00098ee:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00098f4:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00098f7:	83 c4 1c             	add    esp,0x1c
c00098fa:	5b                   	pop    ebx
c00098fb:	5e                   	pop    esi
c00098fc:	5f                   	pop    edi
c00098fd:	5d                   	pop    ebp
c00098fe:	c3                   	ret    
c00098ff:	83 ec 0c             	sub    esp,0xc
c0009902:	68 fc d4 01 c0       	push   0xc001d4fc
c0009907:	e8 48 0b 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000990c:	83 c4 10             	add    esp,0x10
c000990f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009913:	09 d8                	or     eax,ebx
c0009915:	a9 ff 0f 00 00       	test   eax,0xfff
c000991a:	74 a9                	je     c00098c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000991c:	83 ec 0c             	sub    esp,0xc
c000991f:	68 64 d5 01 c0       	push   0xc001d564
c0009924:	e8 0e 68 00 00       	call   c0010137 <KePanic(char const*)>
c0009929:	83 c4 10             	add    esp,0x10
c000992c:	eb 97                	jmp    c00098c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000992e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009932:	e8 5e e1 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009937:	83 ec 0c             	sub    esp,0xc
c000993a:	89 c5                	mov    ebp,eax
c000993c:	8b 0d 90 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020590
c0009942:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009946:	6a 01                	push   0x1
c0009948:	e8 b4 f8 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000994d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009954:	6a 01                	push   0x1
c0009956:	50                   	push   eax
c0009957:	55                   	push   ebp
c0009958:	81 cd 07 04 00 00    	or     ebp,0x407
c000995e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009962:	51                   	push   ecx
c0009963:	e8 28 02 00 00       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009968:	83 c4 1c             	add    esp,0x1c
c000996b:	68 00 10 00 00       	push   0x1000
c0009970:	6a 00                	push   0x0
c0009972:	50                   	push   eax
c0009973:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009977:	e8 54 6b ff ff       	call   c00004d0 <memset>
c000997c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009980:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009983:	e8 a9 fb ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0009988:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000998c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000998f:	83 c4 10             	add    esp,0x10
c0009992:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009995:	e9 40 ff ff ff       	jmp    c00098da <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000999a <VAS::allocatePages(int, int)>:
c000999a:	55                   	push   ebp
c000999b:	57                   	push   edi
c000999c:	56                   	push   esi
c000999d:	53                   	push   ebx
c000999e:	83 ec 1c             	sub    esp,0x1c
c00099a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00099a5:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c00099aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00099b0:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c00099b6:	83 e0 01             	and    eax,0x1
c00099b9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00099bd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00099c1:	0f 85 cc 00 00 00    	jne    c0009a93 <VAS::allocatePages(int, int)+0xf9>
c00099c7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00099ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ce:	85 c0                	test   eax,eax
c00099d0:	0f 84 a1 00 00 00    	je     c0009a77 <VAS::allocatePages(int, int)+0xdd>
c00099d6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00099da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099de:	c1 e6 0c             	shl    esi,0xc
c00099e1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00099e5:	85 c0                	test   eax,eax
c00099e7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00099ea:	7e 33                	jle    c0009a1f <VAS::allocatePages(int, int)+0x85>
c00099ec:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00099f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00099f4:	81 cd 00 04 00 00    	or     ebp,0x400
c00099fa:	e8 96 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099ff:	55                   	push   ebp
c0009a00:	53                   	push   ebx
c0009a01:	50                   	push   eax
c0009a02:	57                   	push   edi
c0009a03:	e8 8e fe ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a10:	74 03                	je     c0009a15 <VAS::allocatePages(int, int)+0x7b>
c0009a12:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a15:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a1b:	39 de                	cmp    esi,ebx
c0009a1d:	75 db                	jne    c00099fa <VAS::allocatePages(int, int)+0x60>
c0009a1f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a24:	75 12                	jne    c0009a38 <VAS::allocatePages(int, int)+0x9e>
c0009a26:	0f 20 d8             	mov    eax,cr3
c0009a29:	0f 22 d8             	mov    cr3,eax
c0009a2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a30:	83 c4 1c             	add    esp,0x1c
c0009a33:	5b                   	pop    ebx
c0009a34:	5e                   	pop    esi
c0009a35:	5f                   	pop    edi
c0009a36:	5d                   	pop    ebp
c0009a37:	c3                   	ret    
c0009a38:	c1 ee 0a             	shr    esi,0xa
c0009a3b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a3f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009a45:	c1 eb 0a             	shr    ebx,0xa
c0009a48:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009a4e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009a54:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009a5a:	39 c3                	cmp    ebx,eax
c0009a5c:	77 ce                	ja     c0009a2c <VAS::allocatePages(int, int)+0x92>
c0009a5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a61:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a67:	39 d8                	cmp    eax,ebx
c0009a69:	73 f3                	jae    c0009a5e <VAS::allocatePages(int, int)+0xc4>
c0009a6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a6f:	83 c4 1c             	add    esp,0x1c
c0009a72:	5b                   	pop    ebx
c0009a73:	5e                   	pop    esi
c0009a74:	5f                   	pop    edi
c0009a75:	5d                   	pop    ebp
c0009a76:	c3                   	ret    
c0009a77:	83 ec 0c             	sub    esp,0xc
c0009a7a:	68 88 d5 01 c0       	push   0xc001d588
c0009a7f:	e8 b3 66 00 00       	call   c0010137 <KePanic(char const*)>
c0009a84:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a8b:	83 c4 10             	add    esp,0x10
c0009a8e:	e9 43 ff ff ff       	jmp    c00099d6 <VAS::allocatePages(int, int)+0x3c>
c0009a93:	83 ec 0c             	sub    esp,0xc
c0009a96:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009a9a:	51                   	push   ecx
c0009a9b:	e8 61 f7 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0009aa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aa4:	83 c4 10             	add    esp,0x10
c0009aa7:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009aac:	0f 87 9b 00 00 00    	ja     c0009b4d <VAS::allocatePages(int, int)+0x1b3>
c0009ab2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ab6:	85 d2                	test   edx,edx
c0009ab8:	7e 3c                	jle    c0009af6 <VAS::allocatePages(int, int)+0x15c>
c0009aba:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009abe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009ac2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ac6:	c1 e5 0c             	shl    ebp,0xc
c0009ac9:	81 ce 00 04 00 00    	or     esi,0x400
c0009acf:	01 dd                	add    ebp,ebx
c0009ad1:	e8 bf df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ad6:	56                   	push   esi
c0009ad7:	53                   	push   ebx
c0009ad8:	50                   	push   eax
c0009ad9:	57                   	push   edi
c0009ada:	e8 b7 fd ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ae7:	74 03                	je     c0009aec <VAS::allocatePages(int, int)+0x152>
c0009ae9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aec:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009af2:	39 dd                	cmp    ebp,ebx
c0009af4:	75 db                	jne    c0009ad1 <VAS::allocatePages(int, int)+0x137>
c0009af6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009afb:	0f 84 25 ff ff ff    	je     c0009a26 <VAS::allocatePages(int, int)+0x8c>
c0009b01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b09:	89 d3                	mov    ebx,edx
c0009b0b:	c1 e0 0c             	shl    eax,0xc
c0009b0e:	c1 eb 0a             	shr    ebx,0xa
c0009b11:	01 d0                	add    eax,edx
c0009b13:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b19:	c1 e8 0a             	shr    eax,0xa
c0009b1c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b27:	2d 00 00 40 00       	sub    eax,0x400000
c0009b2c:	39 c3                	cmp    ebx,eax
c0009b2e:	0f 87 f8 fe ff ff    	ja     c0009a2c <VAS::allocatePages(int, int)+0x92>
c0009b34:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b37:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b3d:	39 d8                	cmp    eax,ebx
c0009b3f:	73 f3                	jae    c0009b34 <VAS::allocatePages(int, int)+0x19a>
c0009b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b45:	83 c4 1c             	add    esp,0x1c
c0009b48:	5b                   	pop    ebx
c0009b49:	5e                   	pop    esi
c0009b4a:	5f                   	pop    edi
c0009b4b:	5d                   	pop    ebp
c0009b4c:	c3                   	ret    
c0009b4d:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009b52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b58:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009b5f:	0f 84 4d ff ff ff    	je     c0009ab2 <VAS::allocatePages(int, int)+0x118>
c0009b65:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009b6d:	e9 40 ff ff ff       	jmp    c0009ab2 <VAS::allocatePages(int, int)+0x118>

c0009b72 <VAS::setCPUSpecific(unsigned long)>:
c0009b72:	83 ec 0c             	sub    esp,0xc
c0009b75:	6a 05                	push   0x5
c0009b77:	68 00 00 40 c2       	push   0xc2400000
c0009b7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b80:	50                   	push   eax
c0009b81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b85:	52                   	push   edx
c0009b86:	e8 0b fd ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b8b:	83 c4 1c             	add    esp,0x1c
c0009b8e:	c3                   	ret    
c0009b8f:	90                   	nop

c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009b90:	55                   	push   ebp
c0009b91:	57                   	push   edi
c0009b92:	56                   	push   esi
c0009b93:	53                   	push   ebx
c0009b94:	83 ec 1c             	sub    esp,0x1c
c0009b97:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009b9c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009ba0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ba6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009baa:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009bb0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009bb4:	83 e0 01             	and    eax,0x1
c0009bb7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009bbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bbf:	85 c0                	test   eax,eax
c0009bc1:	7e 39                	jle    c0009bfc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009bc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bc7:	89 f3                	mov    ebx,esi
c0009bc9:	c1 e0 0c             	shl    eax,0xc
c0009bcc:	01 f0                	add    eax,esi
c0009bce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009bd2:	55                   	push   ebp
c0009bd3:	53                   	push   ebx
c0009bd4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bd8:	29 f0                	sub    eax,esi
c0009bda:	01 d8                	add    eax,ebx
c0009bdc:	50                   	push   eax
c0009bdd:	57                   	push   edi
c0009bde:	e8 b3 fc ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009be3:	83 c4 10             	add    esp,0x10
c0009be6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009beb:	74 03                	je     c0009bf0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009bed:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bf0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bf6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009bfa:	75 d6                	jne    c0009bd2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009bfc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c01:	75 10                	jne    c0009c13 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c03:	0f 20 d8             	mov    eax,cr3
c0009c06:	0f 22 d8             	mov    cr3,eax
c0009c09:	83 c4 1c             	add    esp,0x1c
c0009c0c:	89 f0                	mov    eax,esi
c0009c0e:	5b                   	pop    ebx
c0009c0f:	5e                   	pop    esi
c0009c10:	5f                   	pop    edi
c0009c11:	5d                   	pop    ebp
c0009c12:	c3                   	ret    
c0009c13:	89 f3                	mov    ebx,esi
c0009c15:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c19:	c1 eb 0a             	shr    ebx,0xa
c0009c1c:	c1 e0 0c             	shl    eax,0xc
c0009c1f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c25:	01 f0                	add    eax,esi
c0009c27:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c2d:	c1 e8 0a             	shr    eax,0xa
c0009c30:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c35:	2d 00 00 40 00       	sub    eax,0x400000
c0009c3a:	39 c3                	cmp    ebx,eax
c0009c3c:	77 cb                	ja     c0009c09 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009c3e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c41:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c47:	39 d8                	cmp    eax,ebx
c0009c49:	73 f3                	jae    c0009c3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009c4b:	83 c4 1c             	add    esp,0x1c
c0009c4e:	89 f0                	mov    eax,esi
c0009c50:	5b                   	pop    ebx
c0009c51:	5e                   	pop    esi
c0009c52:	5f                   	pop    edi
c0009c53:	5d                   	pop    ebp
c0009c54:	c3                   	ret    
c0009c55:	90                   	nop

c0009c56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009c56:	55                   	push   ebp
c0009c57:	57                   	push   edi
c0009c58:	56                   	push   esi
c0009c59:	53                   	push   ebx
c0009c5a:	83 ec 1c             	sub    esp,0x1c
c0009c5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c61:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c65:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009c69:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009c6d:	a9 ff 0f 00 00       	test   eax,0xfff
c0009c72:	75 4a                	jne    c0009cbe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009c74:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009c78:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009c7b:	c1 eb 16             	shr    ebx,0x16
c0009c7e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009c85:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009c89:	74 4d                	je     c0009cd8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009c8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c8f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009c93:	c1 e8 0a             	shr    eax,0xa
c0009c96:	80 fa 01             	cmp    dl,0x1
c0009c99:	19 d2                	sbb    edx,edx
c0009c9b:	c1 e3 0c             	shl    ebx,0xc
c0009c9e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009ca2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009ca8:	25 fc 0f 00 00       	and    eax,0xffc
c0009cad:	01 d8                	add    eax,ebx
c0009caf:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009cb6:	83 c4 1c             	add    esp,0x1c
c0009cb9:	5b                   	pop    ebx
c0009cba:	5e                   	pop    esi
c0009cbb:	5f                   	pop    edi
c0009cbc:	5d                   	pop    ebp
c0009cbd:	c3                   	ret    
c0009cbe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009cc2:	83 ec 0c             	sub    esp,0xc
c0009cc5:	68 b4 d5 01 c0       	push   0xc001d5b4
c0009cca:	e8 68 64 00 00       	call   c0010137 <KePanic(char const*)>
c0009ccf:	83 c4 10             	add    esp,0x10
c0009cd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009cd6:	eb 9c                	jmp    c0009c74 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009cd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cdc:	e8 b4 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ce1:	83 ec 0c             	sub    esp,0xc
c0009ce4:	89 c5                	mov    ebp,eax
c0009ce6:	8b 0d 90 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020590
c0009cec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009cf0:	6a 01                	push   0x1
c0009cf2:	e8 0a f5 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0009cf7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009cfe:	6a 01                	push   0x1
c0009d00:	50                   	push   eax
c0009d01:	55                   	push   ebp
c0009d02:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d08:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d0c:	51                   	push   ecx
c0009d0d:	e8 7e fe ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d12:	83 c4 1c             	add    esp,0x1c
c0009d15:	68 00 10 00 00       	push   0x1000
c0009d1a:	6a 00                	push   0x0
c0009d1c:	50                   	push   eax
c0009d1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d21:	e8 aa 67 ff ff       	call   c00004d0 <memset>
c0009d26:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009d2a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009d2d:	e8 ff f7 ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d32:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d35:	83 c4 10             	add    esp,0x10
c0009d38:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009d3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009d3f:	e9 47 ff ff ff       	jmp    c0009c8b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009d44 <VAS::VAS(bool)>:
c0009d44:	53                   	push   ebx
c0009d45:	83 ec 28             	sub    esp,0x28
c0009d48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d4c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009d50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009d66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d6a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009d6e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009d71:	e8 1f dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d76:	89 c2                	mov    edx,eax
c0009d78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d7c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009d7f:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c0009d85:	83 ec 0c             	sub    esp,0xc
c0009d88:	6a 01                	push   0x1
c0009d8a:	e8 72 f4 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0009d8f:	83 c4 10             	add    esp,0x10
c0009d92:	89 c2                	mov    edx,eax
c0009d94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d98:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d9b:	83 ec 0c             	sub    esp,0xc
c0009d9e:	6a 03                	push   0x3
c0009da0:	6a 01                	push   0x1
c0009da2:	52                   	push   edx
c0009da3:	50                   	push   eax
c0009da4:	53                   	push   ebx
c0009da5:	e8 e6 fd ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009daa:	83 c4 20             	add    esp,0x20
c0009dad:	89 c2                	mov    edx,eax
c0009daf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009db6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009dbe:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009dc6:	7f 1c                	jg     c0009de4 <VAS::VAS(bool)+0xa0>
c0009dc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009dcf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dd3:	c1 e2 02             	shl    edx,0x2
c0009dd6:	01 d0                	add    eax,edx
c0009dd8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009dde:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009de2:	eb da                	jmp    c0009dbe <VAS::VAS(bool)+0x7a>
c0009de4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009dec:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009df4:	7f 7a                	jg     c0009e70 <VAS::VAS(bool)+0x12c>
c0009df6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009dfa:	2d 00 02 00 00       	sub    eax,0x200
c0009dff:	c1 e0 0c             	shl    eax,0xc
c0009e02:	83 c8 03             	or     eax,0x3
c0009e05:	89 c2                	mov    edx,eax
c0009e07:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009e0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e12:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e18:	83 e0 10             	and    eax,0x10
c0009e1b:	84 c0                	test   al,al
c0009e1d:	74 07                	je     c0009e26 <VAS::VAS(bool)+0xe2>
c0009e1f:	b8 00 01 00 00       	mov    eax,0x100
c0009e24:	eb 05                	jmp    c0009e2b <VAS::VAS(bool)+0xe7>
c0009e26:	b8 00 00 00 00       	mov    eax,0x0
c0009e2b:	09 d0                	or     eax,edx
c0009e2d:	89 c1                	mov    ecx,eax
c0009e2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e36:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e3a:	c1 e2 02             	shl    edx,0x2
c0009e3d:	01 d0                	add    eax,edx
c0009e3f:	89 ca                	mov    edx,ecx
c0009e41:	89 10                	mov    DWORD PTR [eax],edx
c0009e43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e47:	2d 40 03 00 00       	sub    eax,0x340
c0009e4c:	83 f8 7f             	cmp    eax,0x7f
c0009e4f:	77 16                	ja     c0009e67 <VAS::VAS(bool)+0x123>
c0009e51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e5c:	c1 e2 02             	shl    edx,0x2
c0009e5f:	01 d0                	add    eax,edx
c0009e61:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e67:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009e6b:	e9 7c ff ff ff       	jmp    c0009dec <VAS::VAS(bool)+0xa8>
c0009e70:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009e75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e7b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e81:	83 e0 10             	and    eax,0x10
c0009e84:	84 c0                	test   al,al
c0009e86:	74 07                	je     c0009e8f <VAS::VAS(bool)+0x14b>
c0009e88:	b8 03 41 00 00       	mov    eax,0x4103
c0009e8d:	eb 05                	jmp    c0009e94 <VAS::VAS(bool)+0x150>
c0009e8f:	b8 03 40 00 00       	mov    eax,0x4003
c0009e94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009e98:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009e9b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009ea1:	89 02                	mov    DWORD PTR [edx],eax
c0009ea3:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009ea8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eae:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009eb4:	83 ec 08             	sub    esp,0x8
c0009eb7:	50                   	push   eax
c0009eb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ebc:	e8 b1 fc ff ff       	call   c0009b72 <VAS::setCPUSpecific(unsigned long)>
c0009ec1:	83 c4 10             	add    esp,0x10
c0009ec4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ec8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ecb:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009ed0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ed6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009edc:	83 e0 10             	and    eax,0x10
c0009edf:	84 c0                	test   al,al
c0009ee1:	74 07                	je     c0009eea <VAS::VAS(bool)+0x1a6>
c0009ee3:	b8 00 01 00 00       	mov    eax,0x100
c0009ee8:	eb 05                	jmp    c0009eef <VAS::VAS(bool)+0x1ab>
c0009eea:	b8 00 00 00 00       	mov    eax,0x0
c0009eef:	09 c2                	or     edx,eax
c0009ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef8:	05 fc 0f 00 00       	add    eax,0xffc
c0009efd:	83 ca 03             	or     edx,0x3
c0009f00:	89 10                	mov    DWORD PTR [eax],edx
c0009f02:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009f07:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f0d:	83 ec 0c             	sub    esp,0xc
c0009f10:	50                   	push   eax
c0009f11:	e8 12 1c 00 00       	call   c000bb28 <Device::getName()>
c0009f16:	83 c4 10             	add    esp,0x10
c0009f19:	83 ec 08             	sub    esp,0x8
c0009f1c:	68 57 d6 01 c0       	push   0xc001d657
c0009f21:	50                   	push   eax
c0009f22:	e8 b9 67 ff ff       	call   c00006e0 <strcmp>
c0009f27:	83 c4 10             	add    esp,0x10
c0009f2a:	85 c0                	test   eax,eax
c0009f2c:	0f 94 c0             	sete   al
c0009f2f:	84 c0                	test   al,al
c0009f31:	0f 84 87 00 00 00    	je     c0009fbe <VAS::VAS(bool)+0x27a>
c0009f37:	fa                   	cli    
c0009f38:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0009f3d:	40                   	inc    eax
c0009f3e:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0009f43:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009f48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f4e:	05 7c 09 00 00       	add    eax,0x97c
c0009f53:	83 ec 0c             	sub    esp,0xc
c0009f56:	50                   	push   eax
c0009f57:	e8 5a d3 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009f5c:	83 c4 10             	add    esp,0x10
c0009f5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f64:	89 c3                	mov    ebx,eax
c0009f66:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0009f6b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f71:	05 7c 09 00 00       	add    eax,0x97c
c0009f76:	83 ec 0c             	sub    esp,0xc
c0009f79:	50                   	push   eax
c0009f7a:	e8 37 d3 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009f7f:	83 c4 10             	add    esp,0x10
c0009f82:	83 ec 08             	sub    esp,0x8
c0009f85:	50                   	push   eax
c0009f86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f8a:	e8 83 f5 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0009f8f:	83 c4 10             	add    esp,0x10
c0009f92:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f94:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f99:	6a 11                	push   0x11
c0009f9b:	53                   	push   ebx
c0009f9c:	50                   	push   eax
c0009f9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fa1:	e8 f0 f8 ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fa6:	83 c4 10             	add    esp,0x10
c0009fa9:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0009fae:	48                   	dec    eax
c0009faf:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0009fb4:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0009fb9:	85 c0                	test   eax,eax
c0009fbb:	75 01                	jne    c0009fbe <VAS::VAS(bool)+0x27a>
c0009fbd:	fb                   	sti    
c0009fbe:	90                   	nop
c0009fbf:	83 c4 28             	add    esp,0x28
c0009fc2:	5b                   	pop    ebx
c0009fc3:	c3                   	ret    

c0009fc4 <VAS::evict(unsigned long)>:
c0009fc4:	55                   	push   ebp
c0009fc5:	57                   	push   edi
c0009fc6:	56                   	push   esi
c0009fc7:	53                   	push   ebx
c0009fc8:	83 ec 1c             	sub    esp,0x1c
c0009fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009fd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fd7:	e8 66 f3 ff ff       	call   c0009342 <Virt::allocateSwapfilePage()>
c0009fdc:	8b 0d ac f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1ac
c0009fe2:	89 c7                	mov    edi,eax
c0009fe4:	85 c9                	test   ecx,ecx
c0009fe6:	7e 3e                	jle    c000a026 <VAS::evict(unsigned long)+0x62>
c0009fe8:	89 ee                	mov    esi,ebp
c0009fea:	31 db                	xor    ebx,ebx
c0009fec:	83 ec 0c             	sub    esp,0xc
c0009fef:	57                   	push   edi
c0009ff0:	e8 3b f3 ff ff       	call   c0009330 <Virt::swapIDToSector(unsigned long)>
c0009ff5:	89 34 24             	mov    DWORD PTR [esp],esi
c0009ff8:	01 d8                	add    eax,ebx
c0009ffa:	6a 01                	push   0x1
c0009ffc:	31 d2                	xor    edx,edx
c0009ffe:	43                   	inc    ebx
c0009fff:	52                   	push   edx
c000a000:	81 c6 00 02 00 00    	add    esi,0x200
c000a006:	50                   	push   eax
c000a007:	0f be 05 b8 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f1b8
c000a00e:	8b 14 85 fc 28 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd704]
c000a015:	52                   	push   edx
c000a016:	e8 0d 2c 00 00       	call   c000cc28 <LogicalDisk::write(unsigned long long, int, void*)>
c000a01b:	83 c4 20             	add    esp,0x20
c000a01e:	39 1d ac f1 01 c0    	cmp    DWORD PTR ds:0xc001f1ac,ebx
c000a024:	7f c6                	jg     c0009fec <VAS::evict(unsigned long)+0x28>
c000a026:	83 ec 08             	sub    esp,0x8
c000a029:	c1 e7 0b             	shl    edi,0xb
c000a02c:	55                   	push   ebp
c000a02d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a031:	50                   	push   eax
c000a032:	e8 db f4 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c000a037:	8b 10                	mov    edx,DWORD PTR [eax]
c000a039:	89 d1                	mov    ecx,edx
c000a03b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a041:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a047:	09 cf                	or     edi,ecx
c000a049:	89 38                	mov    DWORD PTR [eax],edi
c000a04b:	89 14 24             	mov    DWORD PTR [esp],edx
c000a04e:	ff 05 88 05 02 c0    	inc    DWORD PTR ds:0xc0020588
c000a054:	e8 da d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a059:	0f 20 d8             	mov    eax,cr3
c000a05c:	0f 22 d8             	mov    cr3,eax
c000a05f:	a1 84 05 02 c0       	mov    eax,ds:0xc0020584
c000a064:	c7 44 24 40 65 d6 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d665
c000a06c:	8d 50 01             	lea    edx,[eax+0x1]
c000a06f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a073:	89 15 84 05 02 c0    	mov    DWORD PTR ds:0xc0020584,edx
c000a079:	83 c4 2c             	add    esp,0x2c
c000a07c:	5b                   	pop    ebx
c000a07d:	5e                   	pop    esi
c000a07e:	5f                   	pop    edi
c000a07f:	5d                   	pop    ebp
c000a080:	e9 cf 03 00 00       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>
c000a085:	90                   	nop

c000a086 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a086:	55                   	push   ebp
c000a087:	57                   	push   edi
c000a088:	56                   	push   esi
c000a089:	53                   	push   ebx
c000a08a:	83 ec 14             	sub    esp,0x14
c000a08d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a091:	53                   	push   ebx
c000a092:	68 76 d6 01 c0       	push   0xc001d676
c000a097:	e8 b8 03 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a09c:	83 c4 10             	add    esp,0x10
c000a09f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0a5:	74 21                	je     c000a0c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a0a7:	83 ec 08             	sub    esp,0x8
c000a0aa:	53                   	push   ebx
c000a0ab:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a0af:	57                   	push   edi
c000a0b0:	e8 5d f4 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c000a0b5:	83 c4 10             	add    esp,0x10
c000a0b8:	89 c6                	mov    esi,eax
c000a0ba:	85 c0                	test   eax,eax
c000a0bc:	74 0a                	je     c000a0c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a0be:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a0c0:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a0c6:	74 0a                	je     c000a0d2 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a0c8:	31 c0                	xor    eax,eax
c000a0ca:	83 c4 0c             	add    esp,0xc
c000a0cd:	5b                   	pop    ebx
c000a0ce:	5e                   	pop    esi
c000a0cf:	5f                   	pop    edi
c000a0d0:	5d                   	pop    ebp
c000a0d1:	c3                   	ret    
c000a0d2:	e8 be d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a0d7:	c1 ed 0b             	shr    ebp,0xb
c000a0da:	8b 16                	mov    edx,DWORD PTR [esi]
c000a0dc:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a0e2:	09 c2                	or     edx,eax
c000a0e4:	81 ca 01 08 00 00    	or     edx,0x801
c000a0ea:	89 16                	mov    DWORD PTR [esi],edx
c000a0ec:	8b 35 ac f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f1ac
c000a0f2:	85 f6                	test   esi,esi
c000a0f4:	7e 3e                	jle    c000a134 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a0f6:	89 df                	mov    edi,ebx
c000a0f8:	31 f6                	xor    esi,esi
c000a0fa:	83 ec 0c             	sub    esp,0xc
c000a0fd:	55                   	push   ebp
c000a0fe:	e8 2d f2 ff ff       	call   c0009330 <Virt::swapIDToSector(unsigned long)>
c000a103:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a106:	01 f0                	add    eax,esi
c000a108:	6a 01                	push   0x1
c000a10a:	31 d2                	xor    edx,edx
c000a10c:	46                   	inc    esi
c000a10d:	52                   	push   edx
c000a10e:	81 c7 00 02 00 00    	add    edi,0x200
c000a114:	50                   	push   eax
c000a115:	0f be 05 b8 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f1b8
c000a11c:	8b 0c 85 fc 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd704]
c000a123:	51                   	push   ecx
c000a124:	e8 93 2a 00 00       	call   c000cbbc <LogicalDisk::read(unsigned long long, int, void*)>
c000a129:	83 c4 20             	add    esp,0x20
c000a12c:	39 35 ac f1 01 c0    	cmp    DWORD PTR ds:0xc001f1ac,esi
c000a132:	7f c6                	jg     c000a0fa <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a134:	a1 88 05 02 c0       	mov    eax,ds:0xc0020588
c000a139:	48                   	dec    eax
c000a13a:	52                   	push   edx
c000a13b:	a3 88 05 02 c0       	mov    ds:0xc0020588,eax
c000a140:	50                   	push   eax
c000a141:	53                   	push   ebx
c000a142:	68 89 d6 01 c0       	push   0xc001d689
c000a147:	e8 08 03 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a14c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a14f:	e8 be f1 ff ff       	call   c0009312 <Virt::freeSwapfilePage(unsigned long)>
c000a154:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000a159:	83 c4 10             	add    esp,0x10
c000a15c:	48                   	dec    eax
c000a15d:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000a162:	85 c0                	test   eax,eax
c000a164:	75 01                	jne    c000a167 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a166:	fb                   	sti    
c000a167:	0f 20 d8             	mov    eax,cr3
c000a16a:	0f 22 d8             	mov    cr3,eax
c000a16d:	b0 01                	mov    al,0x1
c000a16f:	e9 56 ff ff ff       	jmp    c000a0ca <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a174 <VAS::scanForEviction()>:
c000a174:	57                   	push   edi
c000a175:	31 ff                	xor    edi,edi
c000a177:	56                   	push   esi
c000a178:	53                   	push   ebx
c000a179:	83 ec 10             	sub    esp,0x10
c000a17c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a180:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a183:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a189:	75 0e                	jne    c000a199 <VAS::scanForEviction()+0x25>
c000a18b:	89 da                	mov    edx,ebx
c000a18d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a190:	c1 ea 16             	shr    edx,0x16
c000a193:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a197:	74 4e                	je     c000a1e7 <VAS::scanForEviction()+0x73>
c000a199:	53                   	push   ebx
c000a19a:	56                   	push   esi
c000a19b:	e8 72 f3 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c000a1a0:	5a                   	pop    edx
c000a1a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1a3:	59                   	pop    ecx
c000a1a4:	89 d1                	mov    ecx,edx
c000a1a6:	81 e1 01 08 00 00    	and    ecx,0x801
c000a1ac:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a1b2:	74 3e                	je     c000a1f2 <VAS::scanForEviction()+0x7e>
c000a1b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1ba:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a1c0:	76 2b                	jbe    c000a1ed <VAS::scanForEviction()+0x79>
c000a1c2:	47                   	inc    edi
c000a1c3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a1ca:	83 ff 03             	cmp    edi,0x3
c000a1cd:	74 32                	je     c000a201 <VAS::scanForEviction()+0x8d>
c000a1cf:	31 db                	xor    ebx,ebx
c000a1d1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a1d7:	75 c0                	jne    c000a199 <VAS::scanForEviction()+0x25>
c000a1d9:	89 da                	mov    edx,ebx
c000a1db:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1de:	c1 ea 16             	shr    edx,0x16
c000a1e1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a1e5:	75 b2                	jne    c000a199 <VAS::scanForEviction()+0x25>
c000a1e7:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a1ed:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a1f0:	eb 91                	jmp    c000a183 <VAS::scanForEviction()+0xf>
c000a1f2:	f6 c2 20             	test   dl,0x20
c000a1f5:	74 13                	je     c000a20a <VAS::scanForEviction()+0x96>
c000a1f7:	83 e2 df             	and    edx,0xffffffdf
c000a1fa:	89 10                	mov    DWORD PTR [eax],edx
c000a1fc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a1ff:	eb b3                	jmp    c000a1b4 <VAS::scanForEviction()+0x40>
c000a201:	83 c4 10             	add    esp,0x10
c000a204:	31 c0                	xor    eax,eax
c000a206:	5b                   	pop    ebx
c000a207:	5e                   	pop    esi
c000a208:	5f                   	pop    edi
c000a209:	c3                   	ret    
c000a20a:	83 ec 08             	sub    esp,0x8
c000a20d:	89 d0                	mov    eax,edx
c000a20f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a214:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a218:	53                   	push   ebx
c000a219:	68 9e d6 01 c0       	push   0xc001d69e
c000a21e:	e8 31 02 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a223:	58                   	pop    eax
c000a224:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a227:	5a                   	pop    edx
c000a228:	51                   	push   ecx
c000a229:	56                   	push   esi
c000a22a:	e8 95 fd ff ff       	call   c0009fc4 <VAS::evict(unsigned long)>
c000a22f:	5b                   	pop    ebx
c000a230:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a233:	5f                   	pop    edi
c000a234:	50                   	push   eax
c000a235:	68 b2 d6 01 c0       	push   0xc001d6b2
c000a23a:	e8 15 02 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a23f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a246:	83 c4 10             	add    esp,0x10
c000a249:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	5b                   	pop    ebx
c000a251:	5e                   	pop    esi
c000a252:	5f                   	pop    edi
c000a253:	c3                   	ret    

c000a254 <mapVASFirstTime>:
c000a254:	55                   	push   ebp
c000a255:	57                   	push   edi
c000a256:	56                   	push   esi
c000a257:	53                   	push   ebx
c000a258:	83 ec 0c             	sub    esp,0xc
c000a25b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a260:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a263:	4a                   	dec    edx
c000a264:	0f 84 8c 00 00 00    	je     c000a2f6 <mapVASFirstTime+0xa2>
c000a26a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a26d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a270:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a275:	c1 e5 15             	shl    ebp,0x15
c000a278:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a27d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a283:	29 eb                	sub    ebx,ebp
c000a285:	29 ef                	sub    edi,ebp
c000a287:	e8 09 d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a28c:	83 ec 0c             	sub    esp,0xc
c000a28f:	68 03 04 00 00       	push   0x403
c000a294:	6a 01                	push   0x1
c000a296:	53                   	push   ebx
c000a297:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a29d:	50                   	push   eax
c000a29e:	56                   	push   esi
c000a29f:	e8 ec f8 ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2a4:	83 c4 20             	add    esp,0x20
c000a2a7:	39 fb                	cmp    ebx,edi
c000a2a9:	75 dc                	jne    c000a287 <mapVASFirstTime+0x33>
c000a2ab:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a2b0:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a2b5:	29 eb                	sub    ebx,ebp
c000a2b7:	29 ef                	sub    edi,ebp
c000a2b9:	e8 d7 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a2be:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a2c2:	19 d2                	sbb    edx,edx
c000a2c4:	83 ec 0c             	sub    esp,0xc
c000a2c7:	83 e2 04             	and    edx,0x4
c000a2ca:	81 c2 03 04 00 00    	add    edx,0x403
c000a2d0:	52                   	push   edx
c000a2d1:	6a 01                	push   0x1
c000a2d3:	53                   	push   ebx
c000a2d4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a2da:	50                   	push   eax
c000a2db:	56                   	push   esi
c000a2dc:	e8 af f8 ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2e1:	83 c4 20             	add    esp,0x20
c000a2e4:	39 df                	cmp    edi,ebx
c000a2e6:	75 d1                	jne    c000a2b9 <mapVASFirstTime+0x65>
c000a2e8:	0f 20 d8             	mov    eax,cr3
c000a2eb:	0f 22 d8             	mov    cr3,eax
c000a2ee:	83 c4 0c             	add    esp,0xc
c000a2f1:	5b                   	pop    ebx
c000a2f2:	5e                   	pop    esi
c000a2f3:	5f                   	pop    edi
c000a2f4:	5d                   	pop    ebp
c000a2f5:	c3                   	ret    
c000a2f6:	83 ec 0c             	sub    esp,0xc
c000a2f9:	68 c5 d6 01 c0       	push   0xc001d6c5
c000a2fe:	e8 51 01 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a303:	83 c4 10             	add    esp,0x10
c000a306:	83 c4 0c             	add    esp,0xc
c000a309:	5b                   	pop    ebx
c000a30a:	5e                   	pop    esi
c000a30b:	5f                   	pop    edi
c000a30c:	5d                   	pop    ebp
c000a30d:	c3                   	ret    

c000a30e <__cxa_atexit>:
c000a30e:	31 c0                	xor    eax,eax
c000a310:	c3                   	ret    

c000a311 <__cxa_finalize>:
c000a311:	c3                   	ret    

c000a312 <__stack_chk_fail>:
c000a312:	55                   	push   ebp
c000a313:	89 e5                	mov    ebp,esp
c000a315:	83 ec 10             	sub    esp,0x10
c000a318:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a31b:	68 de d6 01 c0       	push   0xc001d6de
c000a320:	e8 2f 01 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a325:	58                   	pop    eax
c000a326:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a329:	5a                   	pop    edx
c000a32a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a32d:	68 de d6 01 c0       	push   0xc001d6de
c000a332:	e8 1d 01 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a337:	c7 04 24 e6 d6 01 c0 	mov    DWORD PTR [esp],0xc001d6e6
c000a33e:	e8 f4 5d 00 00       	call   c0010137 <KePanic(char const*)>
c000a343:	83 c4 10             	add    esp,0x10
c000a346:	c9                   	leave  
c000a347:	c3                   	ret    

c000a348 <__cxa_pure_virtual>:
c000a348:	83 ec 18             	sub    esp,0x18
c000a34b:	68 fe d6 01 c0       	push   0xc001d6fe
c000a350:	e8 e2 5d 00 00       	call   c0010137 <KePanic(char const*)>
c000a355:	83 c4 1c             	add    esp,0x1c
c000a358:	c3                   	ret    

c000a359 <operator new[](unsigned long)>:
c000a359:	e9 5b d4 ff ff       	jmp    c00077b9 <malloc>

c000a35e <operator delete(void*, unsigned long)>:
c000a35e:	e9 76 d4 ff ff       	jmp    c00077d9 <rfree>

c000a363 <operator delete[](void*)>:
c000a363:	e9 71 d4 ff ff       	jmp    c00077d9 <rfree>

c000a368 <operator delete[](void*, unsigned long)>:
c000a368:	e9 6c d4 ff ff       	jmp    c00077d9 <rfree>

c000a36d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a36d:	55                   	push   ebp
c000a36e:	b9 04 00 00 00       	mov    ecx,0x4
c000a373:	57                   	push   edi
c000a374:	56                   	push   esi
c000a375:	be 13 d3 01 c0       	mov    esi,0xc001d313
c000a37a:	53                   	push   ebx
c000a37b:	83 ec 20             	sub    esp,0x20
c000a37e:	a1 12 d3 01 c0       	mov    eax,ds:0xc001d312
c000a383:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a387:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a38b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a38f:	a1 1f d3 01 c0       	mov    eax,ds:0xc001d31f
c000a394:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a398:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a39c:	fc                   	cld    
c000a39d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a39f:	89 ee                	mov    esi,ebp
c000a3a1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a3a5:	eb 02                	jmp    c000a3a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a3a7:	89 c6                	mov    esi,eax
c000a3a9:	31 d2                	xor    edx,edx
c000a3ab:	41                   	inc    ecx
c000a3ac:	89 f0                	mov    eax,esi
c000a3ae:	f7 f3                	div    ebx
c000a3b0:	39 de                	cmp    esi,ebx
c000a3b2:	73 f3                	jae    c000a3a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a3b4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a3b7:	eb 02                	jmp    c000a3bb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a3b9:	89 c5                	mov    ebp,eax
c000a3bb:	31 d2                	xor    edx,edx
c000a3bd:	49                   	dec    ecx
c000a3be:	89 e8                	mov    eax,ebp
c000a3c0:	f7 f3                	div    ebx
c000a3c2:	39 dd                	cmp    ebp,ebx
c000a3c4:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a3c8:	88 11                	mov    BYTE PTR [ecx],dl
c000a3ca:	73 ed                	jae    c000a3b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a3cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a3d0:	83 c4 20             	add    esp,0x20
c000a3d3:	5b                   	pop    ebx
c000a3d4:	5e                   	pop    esi
c000a3d5:	5f                   	pop    edi
c000a3d6:	5d                   	pop    ebp
c000a3d7:	c3                   	ret    

c000a3d8 <Dbg::logc(char)>:
c000a3d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a3dc:	f6 05 b0 04 02 c0 10 	test   BYTE PTR ds:0xc00204b0,0x10
c000a3e3:	75 12                	jne    c000a3f7 <Dbg::logc(char)+0x1f>
c000a3e5:	ba fd 03 00 00       	mov    edx,0x3fd
c000a3ea:	ec                   	in     al,dx
c000a3eb:	a8 20                	test   al,0x20
c000a3ed:	74 fb                	je     c000a3ea <Dbg::logc(char)+0x12>
c000a3ef:	ba f8 03 00 00       	mov    edx,0x3f8
c000a3f4:	88 c8                	mov    al,cl
c000a3f6:	ee                   	out    dx,al
c000a3f7:	c3                   	ret    

c000a3f8 <Dbg::logs(char*)>:
c000a3f8:	53                   	push   ebx
c000a3f9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a400:	84 c0                	test   al,al
c000a402:	74 0f                	je     c000a413 <Dbg::logs(char*)+0x1b>
c000a404:	50                   	push   eax
c000a405:	43                   	inc    ebx
c000a406:	e8 cd ff ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a40b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a40e:	5a                   	pop    edx
c000a40f:	84 c0                	test   al,al
c000a411:	75 f1                	jne    c000a404 <Dbg::logs(char*)+0xc>
c000a413:	5b                   	pop    ebx
c000a414:	c3                   	ret    

c000a415 <Dbg::logWriteInt(unsigned int)>:
c000a415:	83 ec 10             	sub    esp,0x10
c000a418:	6a 0a                	push   0xa
c000a41a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a41e:	50                   	push   eax
c000a41f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a423:	50                   	push   eax
c000a424:	e8 44 ff ff ff       	call   c000a36d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a429:	50                   	push   eax
c000a42a:	e8 c9 ff ff ff       	call   c000a3f8 <Dbg::logs(char*)>
c000a42f:	83 c4 20             	add    esp,0x20
c000a432:	c3                   	ret    

c000a433 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a433:	83 ec 10             	sub    esp,0x10
c000a436:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a43a:	50                   	push   eax
c000a43b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a43f:	50                   	push   eax
c000a440:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a444:	52                   	push   edx
c000a445:	e8 23 ff ff ff       	call   c000a36d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a44a:	50                   	push   eax
c000a44b:	e8 a8 ff ff ff       	call   c000a3f8 <Dbg::logs(char*)>
c000a450:	83 c4 20             	add    esp,0x20
c000a453:	c3                   	ret    

c000a454 <Dbg::kprintf(char const*, ...)>:
c000a454:	55                   	push   ebp
c000a455:	57                   	push   edi
c000a456:	56                   	push   esi
c000a457:	53                   	push   ebx
c000a458:	83 ec 0c             	sub    esp,0xc
c000a45b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a45f:	f6 05 b0 04 02 c0 10 	test   BYTE PTR ds:0xc00204b0,0x10
c000a466:	74 08                	je     c000a470 <Dbg::kprintf(char const*, ...)+0x1c>
c000a468:	83 c4 0c             	add    esp,0xc
c000a46b:	5b                   	pop    ebx
c000a46c:	5e                   	pop    esi
c000a46d:	5f                   	pop    edi
c000a46e:	5d                   	pop    ebp
c000a46f:	c3                   	ret    
c000a470:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a474:	31 ff                	xor    edi,edi
c000a476:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a47a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a47d:	84 c0                	test   al,al
c000a47f:	74 e7                	je     c000a468 <Dbg::kprintf(char const*, ...)+0x14>
c000a481:	8d 77 01             	lea    esi,[edi+0x1]
c000a484:	3c 25                	cmp    al,0x25
c000a486:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a489:	75 47                	jne    c000a4d2 <Dbg::kprintf(char const*, ...)+0x7e>
c000a48b:	83 c7 02             	add    edi,0x2
c000a48e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a491:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a494:	83 e8 25             	sub    eax,0x25
c000a497:	3c 53                	cmp    al,0x53
c000a499:	0f 87 d2 00 00 00    	ja     c000a571 <Dbg::kprintf(char const*, ...)+0x11d>
c000a49f:	25 ff 00 00 00       	and    eax,0xff
c000a4a4:	ff 24 85 14 d7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe28ec]
c000a4ab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4af:	89 c8                	mov    eax,ecx
c000a4b1:	83 c1 04             	add    ecx,0x4
c000a4b4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a4b8:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a4ba:	55                   	push   ebp
c000a4bb:	e8 55 ff ff ff       	call   c000a415 <Dbg::logWriteInt(unsigned int)>
c000a4c0:	58                   	pop    eax
c000a4c1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a4c4:	84 c0                	test   al,al
c000a4c6:	74 a0                	je     c000a468 <Dbg::kprintf(char const*, ...)+0x14>
c000a4c8:	8d 77 01             	lea    esi,[edi+0x1]
c000a4cb:	3c 25                	cmp    al,0x25
c000a4cd:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a4d0:	74 b9                	je     c000a48b <Dbg::kprintf(char const*, ...)+0x37>
c000a4d2:	50                   	push   eax
c000a4d3:	89 f7                	mov    edi,esi
c000a4d5:	e8 fe fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a4da:	89 ee                	mov    esi,ebp
c000a4dc:	58                   	pop    eax
c000a4dd:	eb e2                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a4df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4e3:	89 c8                	mov    eax,ecx
c000a4e5:	83 c1 04             	add    ecx,0x4
c000a4e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000a4ea:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a4ee:	50                   	push   eax
c000a4ef:	e8 04 ff ff ff       	call   c000a3f8 <Dbg::logs(char*)>
c000a4f4:	58                   	pop    eax
c000a4f5:	eb ca                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a4f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a4fb:	89 d0                	mov    eax,edx
c000a4fd:	83 c2 04             	add    edx,0x4
c000a500:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a504:	8b 00                	mov    eax,DWORD PTR [eax]
c000a506:	50                   	push   eax
c000a507:	e8 09 ff ff ff       	call   c000a415 <Dbg::logWriteInt(unsigned int)>
c000a50c:	58                   	pop    eax
c000a50d:	eb b2                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a50f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a513:	89 d0                	mov    eax,edx
c000a515:	83 c2 04             	add    edx,0x4
c000a518:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a51b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a51f:	50                   	push   eax
c000a520:	e8 b3 fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a525:	58                   	pop    eax
c000a526:	eb 99                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a528:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a52c:	89 c8                	mov    eax,ecx
c000a52e:	83 c1 04             	add    ecx,0x4
c000a531:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a535:	6a 10                	push   0x10
c000a537:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a539:	51                   	push   ecx
c000a53a:	e8 f4 fe ff ff       	call   c000a433 <Dbg::logWriteIntBase(unsigned int, int)>
c000a53f:	5d                   	pop    ebp
c000a540:	58                   	pop    eax
c000a541:	e9 7b ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a546:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a54a:	89 d0                	mov    eax,edx
c000a54c:	83 c2 08             	add    edx,0x8
c000a54f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a553:	6a 10                	push   0x10
c000a555:	8b 00                	mov    eax,DWORD PTR [eax]
c000a557:	50                   	push   eax
c000a558:	e8 d6 fe ff ff       	call   c000a433 <Dbg::logWriteIntBase(unsigned int, int)>
c000a55d:	58                   	pop    eax
c000a55e:	5a                   	pop    edx
c000a55f:	e9 5d ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a564:	6a 25                	push   0x25
c000a566:	e8 6d fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a56b:	5a                   	pop    edx
c000a56c:	e9 50 ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a571:	6a 25                	push   0x25
c000a573:	e8 60 fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a578:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a57c:	50                   	push   eax
c000a57d:	e8 56 fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a582:	5a                   	pop    edx
c000a583:	59                   	pop    ecx
c000a584:	e9 38 ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a589:	90                   	nop

c000a58a <File::read(unsigned long long, void*, int*)>:
c000a58a:	53                   	push   ebx
c000a58b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a58f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a593:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a59a:	3c 19                	cmp    al,0x19
c000a59c:	77 35                	ja     c000a5d3 <File::read(unsigned long long, void*, int*)+0x49>
c000a59e:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000a5a5:	85 c0                	test   eax,eax
c000a5a7:	74 2a                	je     c000a5d3 <File::read(unsigned long long, void*, int*)+0x49>
c000a5a9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a5af:	85 c0                	test   eax,eax
c000a5b1:	74 20                	je     c000a5d3 <File::read(unsigned long long, void*, int*)+0x49>
c000a5b3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a5b7:	74 21                	je     c000a5da <File::read(unsigned long long, void*, int*)+0x50>
c000a5b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a5bf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a5c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5cd:	5b                   	pop    ebx
c000a5ce:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a5d1:	ff e0                	jmp    eax
c000a5d3:	b8 0b 00 00 00       	mov    eax,0xb
c000a5d8:	eb 05                	jmp    c000a5df <File::read(unsigned long long, void*, int*)+0x55>
c000a5da:	b8 05 00 00 00       	mov    eax,0x5
c000a5df:	5b                   	pop    ebx
c000a5e0:	c3                   	ret    
c000a5e1:	90                   	nop

c000a5e2 <File::write(unsigned long long, void*, int*)>:
c000a5e2:	53                   	push   ebx
c000a5e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a5eb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a5f2:	3c 19                	cmp    al,0x19
c000a5f4:	77 35                	ja     c000a62b <File::write(unsigned long long, void*, int*)+0x49>
c000a5f6:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000a5fd:	85 c0                	test   eax,eax
c000a5ff:	74 2a                	je     c000a62b <File::write(unsigned long long, void*, int*)+0x49>
c000a601:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a607:	85 c0                	test   eax,eax
c000a609:	74 20                	je     c000a62b <File::write(unsigned long long, void*, int*)+0x49>
c000a60b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a60f:	74 21                	je     c000a632 <File::write(unsigned long long, void*, int*)+0x50>
c000a611:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a613:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a617:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a61d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a625:	5b                   	pop    ebx
c000a626:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a629:	ff e0                	jmp    eax
c000a62b:	b8 0b 00 00 00       	mov    eax,0xb
c000a630:	eb 05                	jmp    c000a637 <File::write(unsigned long long, void*, int*)+0x55>
c000a632:	b8 05 00 00 00       	mov    eax,0x5
c000a637:	5b                   	pop    ebx
c000a638:	c3                   	ret    
c000a639:	90                   	nop

c000a63a <Directory::read(unsigned long long, void*, int*)>:
c000a63a:	53                   	push   ebx
c000a63b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a63f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a643:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a64a:	3c 19                	cmp    al,0x19
c000a64c:	77 35                	ja     c000a683 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a64e:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000a655:	85 c0                	test   eax,eax
c000a657:	74 2a                	je     c000a683 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a659:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a65f:	85 c0                	test   eax,eax
c000a661:	74 20                	je     c000a683 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a663:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a667:	74 21                	je     c000a68a <Directory::read(unsigned long long, void*, int*)+0x50>
c000a669:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a66b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a66f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a675:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a679:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a67d:	5b                   	pop    ebx
c000a67e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a681:	ff e0                	jmp    eax
c000a683:	b8 0b 00 00 00       	mov    eax,0xb
c000a688:	eb 05                	jmp    c000a68f <Directory::read(unsigned long long, void*, int*)+0x55>
c000a68a:	b8 05 00 00 00       	mov    eax,0x5
c000a68f:	5b                   	pop    ebx
c000a690:	c3                   	ret    
c000a691:	90                   	nop

c000a692 <Directory::write(unsigned long long, void*, int*)>:
c000a692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a696:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a69d:	b8 0b 00 00 00       	mov    eax,0xb
c000a6a2:	80 fa 19             	cmp    dl,0x19
c000a6a5:	77 18                	ja     c000a6bf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6a7:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000a6ae:	85 d2                	test   edx,edx
c000a6b0:	74 0d                	je     c000a6bf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6b2:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a6b9:	19 c0                	sbb    eax,eax
c000a6bb:	83 e0 0a             	and    eax,0xa
c000a6be:	40                   	inc    eax
c000a6bf:	c3                   	ret    

c000a6c0 <File::isAtty()>:
c000a6c0:	31 c0                	xor    eax,eax
c000a6c2:	c3                   	ret    
c000a6c3:	90                   	nop

c000a6c4 <Directory::isAtty()>:
c000a6c4:	31 c0                	xor    eax,eax
c000a6c6:	c3                   	ret    
c000a6c7:	90                   	nop

c000a6c8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a6c8:	b8 0a 00 00 00       	mov    eax,0xa
c000a6cd:	c3                   	ret    

c000a6ce <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a6ce:	b8 0a 00 00 00       	mov    eax,0xa
c000a6d3:	c3                   	ret    

c000a6d4 <Filesystem::allocateSwapfile(char const*, int)>:
c000a6d4:	31 c0                	xor    eax,eax
c000a6d6:	31 d2                	xor    edx,edx
c000a6d8:	c3                   	ret    
c000a6d9:	90                   	nop

c000a6da <File::~File()>:
c000a6da:	83 ec 0c             	sub    esp,0xc
c000a6dd:	ba d4 d8 01 c0       	mov    edx,0xc001d8d4
c000a6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e6:	89 10                	mov    DWORD PTR [eax],edx
c000a6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ec:	83 ec 0c             	sub    esp,0xc
c000a6ef:	50                   	push   eax
c000a6f0:	e8 ab e8 ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c000a6f5:	83 c4 10             	add    esp,0x10
c000a6f8:	90                   	nop
c000a6f9:	83 c4 0c             	add    esp,0xc
c000a6fc:	c3                   	ret    
c000a6fd:	90                   	nop

c000a6fe <File::~File()>:
c000a6fe:	83 ec 0c             	sub    esp,0xc
c000a701:	83 ec 0c             	sub    esp,0xc
c000a704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a708:	e8 cd ff ff ff       	call   c000a6da <File::~File()>
c000a70d:	83 c4 10             	add    esp,0x10
c000a710:	83 ec 08             	sub    esp,0x8
c000a713:	68 14 01 00 00       	push   0x114
c000a718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a71c:	e8 3d fc ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000a721:	83 c4 10             	add    esp,0x10
c000a724:	83 c4 0c             	add    esp,0xc
c000a727:	c3                   	ret    

c000a728 <Directory::~Directory()>:
c000a728:	83 ec 0c             	sub    esp,0xc
c000a72b:	ba f0 d8 01 c0       	mov    edx,0xc001d8f0
c000a730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a734:	89 10                	mov    DWORD PTR [eax],edx
c000a736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	50                   	push   eax
c000a73e:	e8 5d e8 ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c000a743:	83 c4 10             	add    esp,0x10
c000a746:	90                   	nop
c000a747:	83 c4 0c             	add    esp,0xc
c000a74a:	c3                   	ret    
c000a74b:	90                   	nop

c000a74c <Directory::~Directory()>:
c000a74c:	83 ec 0c             	sub    esp,0xc
c000a74f:	83 ec 0c             	sub    esp,0xc
c000a752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a756:	e8 cd ff ff ff       	call   c000a728 <Directory::~Directory()>
c000a75b:	83 c4 10             	add    esp,0x10
c000a75e:	83 ec 08             	sub    esp,0x8
c000a761:	68 14 01 00 00       	push   0x114
c000a766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a76a:	e8 ef fb ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000a76f:	83 c4 10             	add    esp,0x10
c000a772:	83 c4 0c             	add    esp,0xc
c000a775:	c3                   	ret    

c000a776 <Filesystem::Filesystem()>:
c000a776:	ba 6c d8 01 c0       	mov    edx,0xc001d86c
c000a77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a77f:	89 10                	mov    DWORD PTR [eax],edx
c000a781:	8b 15 94 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020594
c000a787:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a78b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a792:	a3 94 05 02 c0       	mov    ds:0xc0020594,eax
c000a797:	90                   	nop
c000a798:	c3                   	ret    
c000a799:	90                   	nop

c000a79a <Filesystem::~Filesystem()>:
c000a79a:	ba 6c d8 01 c0       	mov    edx,0xc001d86c
c000a79f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7a3:	89 10                	mov    DWORD PTR [eax],edx
c000a7a5:	90                   	nop
c000a7a6:	c3                   	ret    
c000a7a7:	90                   	nop

c000a7a8 <Filesystem::~Filesystem()>:
c000a7a8:	83 ec 0c             	sub    esp,0xc
c000a7ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a7af:	e8 e6 ff ff ff       	call   c000a79a <Filesystem::~Filesystem()>
c000a7b4:	83 c4 04             	add    esp,0x4
c000a7b7:	83 ec 08             	sub    esp,0x8
c000a7ba:	6a 08                	push   0x8
c000a7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7c0:	e8 99 fb ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000a7c5:	83 c4 10             	add    esp,0x10
c000a7c8:	83 c4 0c             	add    esp,0xc
c000a7cb:	c3                   	ret    

c000a7cc <Fs::getcwd(Process*, char*, int)>:
c000a7cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7d0:	31 c0                	xor    eax,eax
c000a7d2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a7d5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a7d9:	7d 15                	jge    c000a7f0 <Fs::getcwd(Process*, char*, int)+0x24>
c000a7db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a7df:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a7e6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a7e9:	84 c9                	test   cl,cl
c000a7eb:	74 06                	je     c000a7f3 <Fs::getcwd(Process*, char*, int)+0x27>
c000a7ed:	40                   	inc    eax
c000a7ee:	eb e2                	jmp    c000a7d2 <Fs::getcwd(Process*, char*, int)+0x6>
c000a7f0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a7f3:	31 c0                	xor    eax,eax
c000a7f5:	c3                   	ret    

c000a7f6 <Fs::initVFS()>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	6a 08                	push   0x8
c000a7fb:	e8 b9 cf ff ff       	call   c00077b9 <malloc>
c000a800:	89 04 24             	mov    DWORD PTR [esp],eax
c000a803:	e8 5c c4 00 00       	call   c0016c64 <FAT::FAT()>
c000a808:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a80f:	e8 a5 cf ff ff       	call   c00077b9 <malloc>
c000a814:	89 04 24             	mov    DWORD PTR [esp],eax
c000a817:	e8 a4 d1 00 00       	call   c00179c0 <ISO9660::ISO9660()>
c000a81c:	83 c4 1c             	add    esp,0x1c
c000a81f:	c3                   	ret    

c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a820:	55                   	push   ebp
c000a821:	57                   	push   edi
c000a822:	56                   	push   esi
c000a823:	53                   	push   ebx
c000a824:	81 ec 10 04 00 00    	sub    esp,0x410
c000a82a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a831:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a838:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a83f:	68 00 04 00 00       	push   0x400
c000a844:	6a 00                	push   0x0
c000a846:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a84a:	56                   	push   esi
c000a84b:	e8 80 5c ff ff       	call   c00004d0 <memset>
c000a850:	83 c4 10             	add    esp,0x10
c000a853:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a857:	75 0b                	jne    c000a864 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a859:	50                   	push   eax
c000a85a:	50                   	push   eax
c000a85b:	57                   	push   edi
c000a85c:	56                   	push   esi
c000a85d:	e8 9e 5d ff ff       	call   c0000600 <strcpy>
c000a862:	eb 41                	jmp    c000a8a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a864:	8a 07                	mov    al,BYTE PTR [edi]
c000a866:	3c 5c                	cmp    al,0x5c
c000a868:	74 04                	je     c000a86e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a86a:	3c 2f                	cmp    al,0x2f
c000a86c:	75 18                	jne    c000a886 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a86e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a871:	3c 60                	cmp    al,0x60
c000a873:	7e 03                	jle    c000a878 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a875:	83 e8 20             	sub    eax,0x20
c000a878:	88 04 24             	mov    BYTE PTR [esp],al
c000a87b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a882:	50                   	push   eax
c000a883:	50                   	push   eax
c000a884:	eb 18                	jmp    c000a89e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a886:	50                   	push   eax
c000a887:	50                   	push   eax
c000a888:	55                   	push   ebp
c000a889:	56                   	push   esi
c000a88a:	e8 71 5d ff ff       	call   c0000600 <strcpy>
c000a88f:	5a                   	pop    edx
c000a890:	59                   	pop    ecx
c000a891:	68 46 e5 01 c0       	push   0xc001e546
c000a896:	56                   	push   esi
c000a897:	e8 24 5f ff ff       	call   c00007c0 <strcat>
c000a89c:	5d                   	pop    ebp
c000a89d:	58                   	pop    eax
c000a89e:	57                   	push   edi
c000a89f:	56                   	push   esi
c000a8a0:	e8 1b 5f ff ff       	call   c00007c0 <strcat>
c000a8a5:	83 c4 10             	add    esp,0x10
c000a8a8:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a8ab:	3c 60                	cmp    al,0x60
c000a8ad:	7e 03                	jle    c000a8b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a8af:	83 e8 20             	sub    eax,0x20
c000a8b2:	88 04 24             	mov    BYTE PTR [esp],al
c000a8b5:	88 03                	mov    BYTE PTR [ebx],al
c000a8b7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a8be:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a8c4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a8c8:	bf 03 00 00 00       	mov    edi,0x3
c000a8cd:	b8 03 00 00 00       	mov    eax,0x3
c000a8d2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a8d5:	84 d2                	test   dl,dl
c000a8d7:	0f 84 91 00 00 00    	je     c000a96e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a8dd:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a8e0:	80 fa 5c             	cmp    dl,0x5c
c000a8e3:	74 05                	je     c000a8ea <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a8e5:	80 fa 2f             	cmp    dl,0x2f
c000a8e8:	75 12                	jne    c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a8ea:	89 c5                	mov    ebp,eax
c000a8ec:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a8f1:	74 09                	je     c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a8f3:	40                   	inc    eax
c000a8f4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a8f8:	89 cf                	mov    edi,ecx
c000a8fa:	eb d6                	jmp    c000a8d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a8fc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a901:	75 5b                	jne    c000a95e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a903:	80 fa 2e             	cmp    dl,0x2e
c000a906:	75 56                	jne    c000a95e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a908:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a90c:	74 19                	je     c000a927 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a90e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a913:	74 53                	je     c000a968 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a915:	89 f9                	mov    ecx,edi
c000a917:	41                   	inc    ecx
c000a918:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a91b:	80 fa 2f             	cmp    dl,0x2f
c000a91e:	74 f7                	je     c000a917 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a920:	80 fa 5c             	cmp    dl,0x5c
c000a923:	74 f2                	je     c000a917 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a925:	eb d1                	jmp    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a927:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a92c:	74 3a                	je     c000a968 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a92e:	83 f8 03             	cmp    eax,0x3
c000a931:	74 c5                	je     c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a933:	41                   	inc    ecx
c000a934:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a937:	80 fa 2f             	cmp    dl,0x2f
c000a93a:	74 f7                	je     c000a933 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a93c:	80 fa 5c             	cmp    dl,0x5c
c000a93f:	74 f2                	je     c000a933 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a941:	48                   	dec    eax
c000a942:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a946:	75 06                	jne    c000a94e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a948:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a94c:	eb f3                	jmp    c000a941 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a94e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a952:	74 07                	je     c000a95b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a954:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a958:	48                   	dec    eax
c000a959:	eb f3                	jmp    c000a94e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a95b:	40                   	inc    eax
c000a95c:	eb 9a                	jmp    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a95e:	80 fa 2f             	cmp    dl,0x2f
c000a961:	74 95                	je     c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a963:	80 fa 5c             	cmp    dl,0x5c
c000a966:	74 90                	je     c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a968:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a96b:	40                   	inc    eax
c000a96c:	eb 8a                	jmp    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a96e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a972:	83 ec 0c             	sub    esp,0xc
c000a975:	53                   	push   ebx
c000a976:	e8 c5 5b ff ff       	call   c0000540 <strlen>
c000a97b:	83 c4 10             	add    esp,0x10
c000a97e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000a983:	75 26                	jne    c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000a985:	83 ec 0c             	sub    esp,0xc
c000a988:	53                   	push   ebx
c000a989:	e8 b2 5b ff ff       	call   c0000540 <strlen>
c000a98e:	83 c4 10             	add    esp,0x10
c000a991:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000a996:	74 26                	je     c000a9be <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000a998:	83 ec 0c             	sub    esp,0xc
c000a99b:	53                   	push   ebx
c000a99c:	e8 9f 5b ff ff       	call   c0000540 <strlen>
c000a9a1:	83 c4 10             	add    esp,0x10
c000a9a4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000a9a9:	eb c7                	jmp    c000a972 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000a9ab:	83 ec 0c             	sub    esp,0xc
c000a9ae:	53                   	push   ebx
c000a9af:	e8 8c 5b ff ff       	call   c0000540 <strlen>
c000a9b4:	83 c4 10             	add    esp,0x10
c000a9b7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9bc:	74 c7                	je     c000a985 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000a9be:	81 c4 0c 04 00 00    	add    esp,0x40c
c000a9c4:	5b                   	pop    ebx
c000a9c5:	5e                   	pop    esi
c000a9c6:	5f                   	pop    edi
c000a9c7:	5d                   	pop    ebp
c000a9c8:	c3                   	ret    
c000a9c9:	90                   	nop

c000a9ca <File::File(char const*, Process*)>:
c000a9ca:	83 ec 0c             	sub    esp,0xc
c000a9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9d1:	83 ec 08             	sub    esp,0x8
c000a9d4:	6a 00                	push   0x0
c000a9d6:	50                   	push   eax
c000a9d7:	e8 e2 e3 ff ff       	call   c0008dbe <UnixFile::UnixFile(int)>
c000a9dc:	83 c4 10             	add    esp,0x10
c000a9df:	ba d4 d8 01 c0       	mov    edx,0xc001d8d4
c000a9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9e8:	89 10                	mov    DWORD PTR [eax],edx
c000a9ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f8:	83 c0 0d             	add    eax,0xd
c000a9fb:	83 ec 04             	sub    esp,0x4
c000a9fe:	52                   	push   edx
c000a9ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa03:	50                   	push   eax
c000aa04:	e8 17 fe ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa09:	83 c4 10             	add    esp,0x10
c000aa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa10:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa13:	8d 50 bf             	lea    edx,[eax-0x41]
c000aa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aa20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa24:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aa28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa2c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa32:	25 ff 00 00 00       	and    eax,0xff
c000aa37:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000aa3e:	85 c0                	test   eax,eax
c000aa40:	74 42                	je     c000aa84 <File::File(char const*, Process*)+0xba>
c000aa42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa46:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa4c:	25 ff 00 00 00       	and    eax,0xff
c000aa51:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000aa58:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aa5e:	85 c0                	test   eax,eax
c000aa60:	75 22                	jne    c000aa84 <File::File(char const*, Process*)+0xba>
c000aa62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa66:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa6c:	25 ff 00 00 00       	and    eax,0xff
c000aa71:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000aa78:	83 ec 0c             	sub    esp,0xc
c000aa7b:	50                   	push   eax
c000aa7c:	e8 79 20 00 00       	call   c000cafa <LogicalDisk::mount()>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	90                   	nop
c000aa85:	83 c4 0c             	add    esp,0xc
c000aa88:	c3                   	ret    
c000aa89:	90                   	nop

c000aa8a <File::open(FileOpenMode)>:
c000aa8a:	53                   	push   ebx
c000aa8b:	b8 0b 00 00 00       	mov    eax,0xb
c000aa90:	83 ec 08             	sub    esp,0x8
c000aa93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa97:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000aa9e:	80 fa 19             	cmp    dl,0x19
c000aaa1:	77 40                	ja     c000aae3 <File::open(FileOpenMode)+0x59>
c000aaa3:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000aaaa:	85 d2                	test   edx,edx
c000aaac:	74 35                	je     c000aae3 <File::open(FileOpenMode)+0x59>
c000aaae:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000aab4:	85 d2                	test   edx,edx
c000aab6:	74 2b                	je     c000aae3 <File::open(FileOpenMode)+0x59>
c000aab8:	b8 06 00 00 00       	mov    eax,0x6
c000aabd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000aac1:	75 20                	jne    c000aae3 <File::open(FileOpenMode)+0x59>
c000aac3:	8b 02                	mov    eax,DWORD PTR [edx]
c000aac5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aacb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aacf:	51                   	push   ecx
c000aad0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000aad3:	51                   	push   ecx
c000aad4:	52                   	push   edx
c000aad5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000aad8:	83 c4 10             	add    esp,0x10
c000aadb:	85 c0                	test   eax,eax
c000aadd:	75 04                	jne    c000aae3 <File::open(FileOpenMode)+0x59>
c000aadf:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000aae3:	83 c4 08             	add    esp,0x8
c000aae6:	5b                   	pop    ebx
c000aae7:	c3                   	ret    

c000aae8 <File::close()>:
c000aae8:	53                   	push   ebx
c000aae9:	b8 0b 00 00 00       	mov    eax,0xb
c000aaee:	83 ec 08             	sub    esp,0x8
c000aaf1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aaf5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000aafc:	80 fa 19             	cmp    dl,0x19
c000aaff:	77 41                	ja     c000ab42 <File::close()+0x5a>
c000ab01:	8b 1c 95 00 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd600]
c000ab08:	85 db                	test   ebx,ebx
c000ab0a:	74 36                	je     c000ab42 <File::close()+0x5a>
c000ab0c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab13:	74 2d                	je     c000ab42 <File::close()+0x5a>
c000ab15:	b8 05 00 00 00       	mov    eax,0x5
c000ab1a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ab1e:	74 22                	je     c000ab42 <File::close()+0x5a>
c000ab20:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ab24:	8b 04 95 00 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd600]
c000ab2b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab31:	53                   	push   ebx
c000ab32:	53                   	push   ebx
c000ab33:	8b 10                	mov    edx,DWORD PTR [eax]
c000ab35:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ab3b:	50                   	push   eax
c000ab3c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	83 c4 08             	add    esp,0x8
c000ab45:	5b                   	pop    ebx
c000ab46:	c3                   	ret    
c000ab47:	90                   	nop

c000ab48 <File::seek(unsigned long long)>:
c000ab48:	56                   	push   esi
c000ab49:	53                   	push   ebx
c000ab4a:	b8 0b 00 00 00       	mov    eax,0xb
c000ab4f:	51                   	push   ecx
c000ab50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab54:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab58:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ab5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ab63:	80 fa 19             	cmp    dl,0x19
c000ab66:	77 31                	ja     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab68:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000ab6f:	85 d2                	test   edx,edx
c000ab71:	74 26                	je     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab73:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab79:	85 d2                	test   edx,edx
c000ab7b:	74 1c                	je     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab7d:	b8 05 00 00 00       	mov    eax,0x5
c000ab82:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ab86:	74 11                	je     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab88:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab8a:	53                   	push   ebx
c000ab8b:	51                   	push   ecx
c000ab8c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ab92:	52                   	push   edx
c000ab93:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	5a                   	pop    edx
c000ab9a:	5b                   	pop    ebx
c000ab9b:	5e                   	pop    esi
c000ab9c:	c3                   	ret    
c000ab9d:	90                   	nop

c000ab9e <File::tell(unsigned long long*)>:
c000ab9e:	83 ec 0c             	sub    esp,0xc
c000aba1:	b8 0b 00 00 00       	mov    eax,0xb
c000aba6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abaa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abb1:	80 fa 19             	cmp    dl,0x19
c000abb4:	77 34                	ja     c000abea <File::tell(unsigned long long*)+0x4c>
c000abb6:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000abbd:	85 d2                	test   edx,edx
c000abbf:	74 29                	je     c000abea <File::tell(unsigned long long*)+0x4c>
c000abc1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abc7:	85 d2                	test   edx,edx
c000abc9:	74 1f                	je     c000abea <File::tell(unsigned long long*)+0x4c>
c000abcb:	b8 05 00 00 00       	mov    eax,0x5
c000abd0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abd4:	74 14                	je     c000abea <File::tell(unsigned long long*)+0x4c>
c000abd6:	50                   	push   eax
c000abd7:	8b 02                	mov    eax,DWORD PTR [edx]
c000abd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abdd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abe3:	52                   	push   edx
c000abe4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	83 c4 0c             	add    esp,0xc
c000abed:	c3                   	ret    

c000abee <File::rewind()>:
c000abee:	83 ec 10             	sub    esp,0x10
c000abf1:	6a 00                	push   0x0
c000abf3:	6a 00                	push   0x0
c000abf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abf9:	e8 4a ff ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c000abfe:	83 c4 1c             	add    esp,0x1c
c000ac01:	c3                   	ret    

c000ac02 <File::unlink()>:
c000ac02:	83 ec 0c             	sub    esp,0xc
c000ac05:	b8 0b 00 00 00       	mov    eax,0xb
c000ac0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac15:	80 f9 19             	cmp    cl,0x19
c000ac18:	77 2f                	ja     c000ac49 <File::unlink()+0x47>
c000ac1a:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000ac21:	85 c9                	test   ecx,ecx
c000ac23:	74 24                	je     c000ac49 <File::unlink()+0x47>
c000ac25:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ac2b:	85 c9                	test   ecx,ecx
c000ac2d:	74 1a                	je     c000ac49 <File::unlink()+0x47>
c000ac2f:	b8 06 00 00 00       	mov    eax,0x6
c000ac34:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac38:	75 0f                	jne    c000ac49 <File::unlink()+0x47>
c000ac3a:	83 c2 0d             	add    edx,0xd
c000ac3d:	50                   	push   eax
c000ac3e:	50                   	push   eax
c000ac3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ac41:	52                   	push   edx
c000ac42:	51                   	push   ecx
c000ac43:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ac46:	83 c4 10             	add    esp,0x10
c000ac49:	83 c4 0c             	add    esp,0xc
c000ac4c:	c3                   	ret    
c000ac4d:	90                   	nop

c000ac4e <File::rename(char const*)>:
c000ac4e:	83 ec 0c             	sub    esp,0xc
c000ac51:	b8 0b 00 00 00       	mov    eax,0xb
c000ac56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac61:	80 f9 19             	cmp    cl,0x19
c000ac64:	77 32                	ja     c000ac98 <File::rename(char const*)+0x4a>
c000ac66:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000ac6d:	85 c9                	test   ecx,ecx
c000ac6f:	74 27                	je     c000ac98 <File::rename(char const*)+0x4a>
c000ac71:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ac77:	85 c9                	test   ecx,ecx
c000ac79:	74 1d                	je     c000ac98 <File::rename(char const*)+0x4a>
c000ac7b:	b8 06 00 00 00       	mov    eax,0x6
c000ac80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac84:	75 12                	jne    c000ac98 <File::rename(char const*)+0x4a>
c000ac86:	83 c2 0d             	add    edx,0xd
c000ac89:	50                   	push   eax
c000ac8a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ac8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac90:	52                   	push   edx
c000ac91:	51                   	push   ecx
c000ac92:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ac95:	83 c4 10             	add    esp,0x10
c000ac98:	83 c4 0c             	add    esp,0xc
c000ac9b:	c3                   	ret    

c000ac9c <File::chfatattr(unsigned char, unsigned char)>:
c000ac9c:	57                   	push   edi
c000ac9d:	b8 0b 00 00 00       	mov    eax,0xb
c000aca2:	56                   	push   esi
c000aca3:	53                   	push   ebx
c000aca4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aca8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000acac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000acb7:	80 f9 19             	cmp    cl,0x19
c000acba:	77 37                	ja     c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acbc:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000acc3:	85 c9                	test   ecx,ecx
c000acc5:	74 2c                	je     c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acc7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000accd:	85 c9                	test   ecx,ecx
c000accf:	74 22                	je     c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acd1:	b8 06 00 00 00       	mov    eax,0x6
c000acd6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acda:	75 17                	jne    c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acdc:	8b 39                	mov    edi,DWORD PTR [ecx]
c000acde:	89 f0                	mov    eax,esi
c000ace0:	83 c2 0d             	add    edx,0xd
c000ace3:	0f b6 f0             	movzx  esi,al
c000ace6:	0f b6 db             	movzx  ebx,bl
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	52                   	push   edx
c000acec:	51                   	push   ecx
c000aced:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	5b                   	pop    ebx
c000acf4:	5e                   	pop    esi
c000acf5:	5f                   	pop    edi
c000acf6:	c3                   	ret    
c000acf7:	90                   	nop

c000acf8 <File::exists()>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	31 c0                	xor    eax,eax
c000acfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad01:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad08:	80 f9 19             	cmp    cl,0x19
c000ad0b:	77 24                	ja     c000ad31 <File::exists()+0x39>
c000ad0d:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000ad14:	85 c9                	test   ecx,ecx
c000ad16:	74 19                	je     c000ad31 <File::exists()+0x39>
c000ad18:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad1e:	85 c9                	test   ecx,ecx
c000ad20:	74 0f                	je     c000ad31 <File::exists()+0x39>
c000ad22:	83 c2 0d             	add    edx,0xd
c000ad25:	50                   	push   eax
c000ad26:	50                   	push   eax
c000ad27:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad29:	52                   	push   edx
c000ad2a:	51                   	push   ecx
c000ad2b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ad2e:	83 c4 10             	add    esp,0x10
c000ad31:	83 c4 0c             	add    esp,0xc
c000ad34:	c3                   	ret    
c000ad35:	90                   	nop

c000ad36 <File::stat(unsigned long long*, bool*)>:
c000ad36:	56                   	push   esi
c000ad37:	53                   	push   ebx
c000ad38:	50                   	push   eax
c000ad39:	b8 0b 00 00 00       	mov    eax,0xb
c000ad3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad51:	80 f9 19             	cmp    cl,0x19
c000ad54:	77 3d                	ja     c000ad93 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad56:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000ad5d:	85 c9                	test   ecx,ecx
c000ad5f:	74 32                	je     c000ad93 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad61:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad67:	85 c9                	test   ecx,ecx
c000ad69:	74 28                	je     c000ad93 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad6d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad71:	74 13                	je     c000ad86 <File::stat(unsigned long long*, bool*)+0x50>
c000ad73:	83 ec 04             	sub    esp,0x4
c000ad76:	56                   	push   esi
c000ad77:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ad7d:	51                   	push   ecx
c000ad7e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ad81:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ad84:	eb 0a                	jmp    c000ad90 <File::stat(unsigned long long*, bool*)+0x5a>
c000ad86:	53                   	push   ebx
c000ad87:	83 c2 0d             	add    edx,0xd
c000ad8a:	56                   	push   esi
c000ad8b:	52                   	push   edx
c000ad8c:	51                   	push   ecx
c000ad8d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ad90:	83 c4 10             	add    esp,0x10
c000ad93:	5a                   	pop    edx
c000ad94:	5b                   	pop    ebx
c000ad95:	5e                   	pop    esi
c000ad96:	c3                   	ret    

c000ad97 <Fs::setcwd(Process*, char*)>:
c000ad97:	55                   	push   ebp
c000ad98:	57                   	push   edi
c000ad99:	56                   	push   esi
c000ad9a:	53                   	push   ebx
c000ad9b:	81 ec 20 02 00 00    	sub    esp,0x220
c000ada1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ada8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000adae:	57                   	push   edi
c000adaf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000adb6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000adba:	56                   	push   esi
c000adbb:	e8 60 fa ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c000adc0:	89 34 24             	mov    DWORD PTR [esp],esi
c000adc3:	e8 78 57 ff ff       	call   c0000540 <strlen>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	83 f8 02             	cmp    eax,0x2
c000adce:	77 15                	ja     c000ade5 <Fs::setcwd(Process*, char*)+0x4e>
c000add0:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000add5:	83 eb 41             	sub    ebx,0x41
c000add8:	8b 04 9d 00 2a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd600]
c000addf:	85 c0                	test   eax,eax
c000ade1:	75 1c                	jne    c000adff <Fs::setcwd(Process*, char*)+0x68>
c000ade3:	eb 2f                	jmp    c000ae14 <Fs::setcwd(Process*, char*)+0x7d>
c000ade5:	83 ec 0c             	sub    esp,0xc
c000ade8:	56                   	push   esi
c000ade9:	e8 52 57 ff ff       	call   c0000540 <strlen>
c000adee:	83 c4 10             	add    esp,0x10
c000adf1:	83 f8 03             	cmp    eax,0x3
c000adf4:	75 57                	jne    c000ae4d <Fs::setcwd(Process*, char*)+0xb6>
c000adf6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000adfb:	75 50                	jne    c000ae4d <Fs::setcwd(Process*, char*)+0xb6>
c000adfd:	eb d1                	jmp    c000add0 <Fs::setcwd(Process*, char*)+0x39>
c000adff:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae06:	75 0c                	jne    c000ae14 <Fs::setcwd(Process*, char*)+0x7d>
c000ae08:	83 ec 0c             	sub    esp,0xc
c000ae0b:	50                   	push   eax
c000ae0c:	e8 e9 1c 00 00       	call   c000cafa <LogicalDisk::mount()>
c000ae11:	83 c4 10             	add    esp,0x10
c000ae14:	b8 03 00 00 00       	mov    eax,0x3
c000ae19:	83 fb 19             	cmp    ebx,0x19
c000ae1c:	0f 87 c6 00 00 00    	ja     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae22:	8b 14 9d 00 2a 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd600]
c000ae29:	b8 05 00 00 00       	mov    eax,0x5
c000ae2e:	85 d2                	test   edx,edx
c000ae30:	0f 84 b2 00 00 00    	je     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae36:	b8 06 00 00 00       	mov    eax,0x6
c000ae3b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ae42:	0f 85 92 00 00 00    	jne    c000aeda <Fs::setcwd(Process*, char*)+0x143>
c000ae48:	e9 9b 00 00 00       	jmp    c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae4d:	83 ec 0c             	sub    esp,0xc
c000ae50:	68 14 01 00 00       	push   0x114
c000ae55:	e8 5f c9 ff ff       	call   c00077b9 <malloc>
c000ae5a:	83 c4 0c             	add    esp,0xc
c000ae5d:	89 c3                	mov    ebx,eax
c000ae5f:	55                   	push   ebp
c000ae60:	56                   	push   esi
c000ae61:	50                   	push   eax
c000ae62:	e8 63 fb ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000ae67:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000ae6c:	83 c4 0c             	add    esp,0xc
c000ae6f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000ae73:	50                   	push   eax
c000ae74:	8d 44 24 10          	lea    eax,[esp+0x10]
c000ae78:	50                   	push   eax
c000ae79:	53                   	push   ebx
c000ae7a:	e8 b7 fe ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	83 f8 02             	cmp    eax,0x2
c000ae85:	74 04                	je     c000ae8b <Fs::setcwd(Process*, char*)+0xf4>
c000ae87:	85 c0                	test   eax,eax
c000ae89:	74 1c                	je     c000aea7 <Fs::setcwd(Process*, char*)+0x110>
c000ae8b:	b8 01 00 00 00       	mov    eax,0x1
c000ae90:	85 db                	test   ebx,ebx
c000ae92:	74 54                	je     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae99:	53                   	push   ebx
c000ae9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	b8 01 00 00 00       	mov    eax,0x1
c000aea5:	eb 41                	jmp    c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000aea7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000aeac:	75 1c                	jne    c000aeca <Fs::setcwd(Process*, char*)+0x133>
c000aeae:	b8 02 00 00 00       	mov    eax,0x2
c000aeb3:	85 db                	test   ebx,ebx
c000aeb5:	74 31                	je     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aebc:	53                   	push   ebx
c000aebd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aec0:	83 c4 10             	add    esp,0x10
c000aec3:	b8 02 00 00 00       	mov    eax,0x2
c000aec8:	eb 1e                	jmp    c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000aeca:	85 db                	test   ebx,ebx
c000aecc:	74 0c                	je     c000aeda <Fs::setcwd(Process*, char*)+0x143>
c000aece:	83 ec 0c             	sub    esp,0xc
c000aed1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aed3:	53                   	push   ebx
c000aed4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aed7:	83 c4 10             	add    esp,0x10
c000aeda:	50                   	push   eax
c000aedb:	50                   	push   eax
c000aedc:	56                   	push   esi
c000aedd:	57                   	push   edi
c000aede:	e8 1d 57 ff ff       	call   c0000600 <strcpy>
c000aee3:	83 c4 10             	add    esp,0x10
c000aee6:	31 c0                	xor    eax,eax
c000aee8:	81 c4 1c 02 00 00    	add    esp,0x21c
c000aeee:	5b                   	pop    ebx
c000aeef:	5e                   	pop    esi
c000aef0:	5f                   	pop    edi
c000aef1:	5d                   	pop    ebp
c000aef2:	c3                   	ret    
c000aef3:	90                   	nop

c000aef4 <Directory::Directory(char const*, Process*)>:
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefb:	83 ec 08             	sub    esp,0x8
c000aefe:	6a 00                	push   0x0
c000af00:	50                   	push   eax
c000af01:	e8 b8 de ff ff       	call   c0008dbe <UnixFile::UnixFile(int)>
c000af06:	83 c4 10             	add    esp,0x10
c000af09:	ba f0 d8 01 c0       	mov    edx,0xc001d8f0
c000af0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af12:	89 10                	mov    DWORD PTR [eax],edx
c000af14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af18:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af22:	83 c0 0d             	add    eax,0xd
c000af25:	83 ec 04             	sub    esp,0x4
c000af28:	52                   	push   edx
c000af29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af2d:	50                   	push   eax
c000af2e:	e8 ed f8 ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af33:	83 c4 10             	add    esp,0x10
c000af36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af3d:	8d 50 bf             	lea    edx,[eax-0x41]
c000af40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af44:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af5c:	25 ff 00 00 00       	and    eax,0xff
c000af61:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000af68:	85 c0                	test   eax,eax
c000af6a:	74 42                	je     c000afae <Directory::Directory(char const*, Process*)+0xba>
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af76:	25 ff 00 00 00       	and    eax,0xff
c000af7b:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000af82:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000af88:	85 c0                	test   eax,eax
c000af8a:	75 22                	jne    c000afae <Directory::Directory(char const*, Process*)+0xba>
c000af8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af90:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af96:	25 ff 00 00 00       	and    eax,0xff
c000af9b:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c000afa2:	83 ec 0c             	sub    esp,0xc
c000afa5:	50                   	push   eax
c000afa6:	e8 4f 1b 00 00       	call   c000cafa <LogicalDisk::mount()>
c000afab:	83 c4 10             	add    esp,0x10
c000afae:	90                   	nop
c000afaf:	83 c4 0c             	add    esp,0xc
c000afb2:	c3                   	ret    
c000afb3:	90                   	nop

c000afb4 <Directory::open()>:
c000afb4:	53                   	push   ebx
c000afb5:	b8 0b 00 00 00       	mov    eax,0xb
c000afba:	83 ec 08             	sub    esp,0x8
c000afbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afc1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000afc8:	80 fa 19             	cmp    dl,0x19
c000afcb:	77 3d                	ja     c000b00a <Directory::open()+0x56>
c000afcd:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000afd4:	85 d2                	test   edx,edx
c000afd6:	74 32                	je     c000b00a <Directory::open()+0x56>
c000afd8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000afde:	85 d2                	test   edx,edx
c000afe0:	74 28                	je     c000b00a <Directory::open()+0x56>
c000afe2:	b8 06 00 00 00       	mov    eax,0x6
c000afe7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000afeb:	75 1d                	jne    c000b00a <Directory::open()+0x56>
c000afed:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aff3:	50                   	push   eax
c000aff4:	8b 02                	mov    eax,DWORD PTR [edx]
c000aff6:	51                   	push   ecx
c000aff7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000affa:	51                   	push   ecx
c000affb:	52                   	push   edx
c000affc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000afff:	83 c4 10             	add    esp,0x10
c000b002:	85 c0                	test   eax,eax
c000b004:	75 04                	jne    c000b00a <Directory::open()+0x56>
c000b006:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b00a:	83 c4 08             	add    esp,0x8
c000b00d:	5b                   	pop    ebx
c000b00e:	c3                   	ret    
c000b00f:	90                   	nop

c000b010 <Directory::close()>:
c000b010:	53                   	push   ebx
c000b011:	b8 0b 00 00 00       	mov    eax,0xb
c000b016:	83 ec 08             	sub    esp,0x8
c000b019:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b01d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b024:	80 fa 19             	cmp    dl,0x19
c000b027:	77 41                	ja     c000b06a <Directory::close()+0x5a>
c000b029:	8b 1c 95 00 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd600]
c000b030:	85 db                	test   ebx,ebx
c000b032:	74 36                	je     c000b06a <Directory::close()+0x5a>
c000b034:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b03b:	74 2d                	je     c000b06a <Directory::close()+0x5a>
c000b03d:	b8 05 00 00 00       	mov    eax,0x5
c000b042:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b046:	74 22                	je     c000b06a <Directory::close()+0x5a>
c000b048:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b04c:	8b 04 95 00 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd600]
c000b053:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b059:	53                   	push   ebx
c000b05a:	53                   	push   ebx
c000b05b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b05d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b063:	50                   	push   eax
c000b064:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	83 c4 08             	add    esp,0x8
c000b06d:	5b                   	pop    ebx
c000b06e:	c3                   	ret    
c000b06f:	90                   	nop

c000b070 <Directory::unlink()>:
c000b070:	83 ec 0c             	sub    esp,0xc
c000b073:	b8 0b 00 00 00       	mov    eax,0xb
c000b078:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b07c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b083:	80 f9 19             	cmp    cl,0x19
c000b086:	77 2f                	ja     c000b0b7 <Directory::unlink()+0x47>
c000b088:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000b08f:	85 c9                	test   ecx,ecx
c000b091:	74 24                	je     c000b0b7 <Directory::unlink()+0x47>
c000b093:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b099:	85 c9                	test   ecx,ecx
c000b09b:	74 1a                	je     c000b0b7 <Directory::unlink()+0x47>
c000b09d:	b8 06 00 00 00       	mov    eax,0x6
c000b0a2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0a6:	75 0f                	jne    c000b0b7 <Directory::unlink()+0x47>
c000b0a8:	83 c2 0d             	add    edx,0xd
c000b0ab:	50                   	push   eax
c000b0ac:	50                   	push   eax
c000b0ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b0af:	52                   	push   edx
c000b0b0:	51                   	push   ecx
c000b0b1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	83 c4 0c             	add    esp,0xc
c000b0ba:	c3                   	ret    
c000b0bb:	90                   	nop

c000b0bc <Directory::rename(char const*)>:
c000b0bc:	83 ec 0c             	sub    esp,0xc
c000b0bf:	b8 0b 00 00 00       	mov    eax,0xb
c000b0c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b0cf:	80 f9 19             	cmp    cl,0x19
c000b0d2:	77 32                	ja     c000b106 <Directory::rename(char const*)+0x4a>
c000b0d4:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000b0db:	85 c9                	test   ecx,ecx
c000b0dd:	74 27                	je     c000b106 <Directory::rename(char const*)+0x4a>
c000b0df:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b0e5:	85 c9                	test   ecx,ecx
c000b0e7:	74 1d                	je     c000b106 <Directory::rename(char const*)+0x4a>
c000b0e9:	b8 06 00 00 00       	mov    eax,0x6
c000b0ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0f2:	75 12                	jne    c000b106 <Directory::rename(char const*)+0x4a>
c000b0f4:	83 c2 0d             	add    edx,0xd
c000b0f7:	50                   	push   eax
c000b0f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b0fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b0fe:	52                   	push   edx
c000b0ff:	51                   	push   ecx
c000b100:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b103:	83 c4 10             	add    esp,0x10
c000b106:	83 c4 0c             	add    esp,0xc
c000b109:	c3                   	ret    

c000b10a <Directory::exists()>:
c000b10a:	83 ec 0c             	sub    esp,0xc
c000b10d:	31 c0                	xor    eax,eax
c000b10f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b113:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b11a:	80 f9 19             	cmp    cl,0x19
c000b11d:	77 24                	ja     c000b143 <Directory::exists()+0x39>
c000b11f:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000b126:	85 c9                	test   ecx,ecx
c000b128:	74 19                	je     c000b143 <Directory::exists()+0x39>
c000b12a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b130:	85 c9                	test   ecx,ecx
c000b132:	74 0f                	je     c000b143 <Directory::exists()+0x39>
c000b134:	83 c2 0d             	add    edx,0xd
c000b137:	50                   	push   eax
c000b138:	50                   	push   eax
c000b139:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b13b:	52                   	push   edx
c000b13c:	51                   	push   ecx
c000b13d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b140:	83 c4 10             	add    esp,0x10
c000b143:	83 c4 0c             	add    esp,0xc
c000b146:	c3                   	ret    
c000b147:	90                   	nop

c000b148 <Directory::read(dirent*)>:
c000b148:	83 ec 1c             	sub    esp,0x1c
c000b14b:	b8 0b 00 00 00       	mov    eax,0xb
c000b150:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b154:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b15b:	80 fa 19             	cmp    dl,0x19
c000b15e:	77 30                	ja     c000b190 <Directory::read(dirent*)+0x48>
c000b160:	8b 14 95 00 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd600]
c000b167:	85 d2                	test   edx,edx
c000b169:	74 25                	je     c000b190 <Directory::read(dirent*)+0x48>
c000b16b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b172:	74 1c                	je     c000b190 <Directory::read(dirent*)+0x48>
c000b174:	83 ec 0c             	sub    esp,0xc
c000b177:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b179:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b17d:	52                   	push   edx
c000b17e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b182:	6a 00                	push   0x0
c000b184:	68 10 01 00 00       	push   0x110
c000b189:	51                   	push   ecx
c000b18a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b18d:	83 c4 20             	add    esp,0x20
c000b190:	83 c4 1c             	add    esp,0x1c
c000b193:	c3                   	ret    

c000b194 <Directory::create()>:
c000b194:	83 ec 0c             	sub    esp,0xc
c000b197:	b8 0b 00 00 00       	mov    eax,0xb
c000b19c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1a7:	80 f9 19             	cmp    cl,0x19
c000b1aa:	77 2f                	ja     c000b1db <Directory::create()+0x47>
c000b1ac:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c000b1b3:	85 c9                	test   ecx,ecx
c000b1b5:	74 24                	je     c000b1db <Directory::create()+0x47>
c000b1b7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1bd:	85 c9                	test   ecx,ecx
c000b1bf:	74 1a                	je     c000b1db <Directory::create()+0x47>
c000b1c1:	b8 06 00 00 00       	mov    eax,0x6
c000b1c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ca:	75 0f                	jne    c000b1db <Directory::create()+0x47>
c000b1cc:	83 c2 0d             	add    edx,0xd
c000b1cf:	50                   	push   eax
c000b1d0:	50                   	push   eax
c000b1d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1d3:	52                   	push   edx
c000b1d4:	51                   	push   ecx
c000b1d5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b1d8:	83 c4 10             	add    esp,0x10
c000b1db:	83 c4 0c             	add    esp,0xc
c000b1de:	c3                   	ret    
c000b1df:	90                   	nop

c000b1e0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b1e0:	b8 0a 00 00 00       	mov    eax,0xa
c000b1e5:	c3                   	ret    
c000b1e6:	66 90                	xchg   ax,ax

c000b1e8 <Bus::Bus(char const*)>:
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ef:	83 ec 08             	sub    esp,0x8
c000b1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1f6:	50                   	push   eax
c000b1f7:	e8 30 08 00 00       	call   c000ba2c <Device::Device(char const*)>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	ba 0c d9 01 c0       	mov    edx,0xc001d90c
c000b204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b208:	89 10                	mov    DWORD PTR [eax],edx
c000b20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b20e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b218:	90                   	nop
c000b219:	83 c4 0c             	add    esp,0xc
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop
c000b21e:	66 90                	xchg   ax,ax

c000b220 <Bus::~Bus()>:
c000b220:	83 ec 0c             	sub    esp,0xc
c000b223:	ba 0c d9 01 c0       	mov    edx,0xc001d90c
c000b228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22c:	89 10                	mov    DWORD PTR [eax],edx
c000b22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b232:	83 ec 0c             	sub    esp,0xc
c000b235:	50                   	push   eax
c000b236:	e8 5b 05 00 00       	call   c000b796 <Device::~Device()>
c000b23b:	83 c4 10             	add    esp,0x10
c000b23e:	90                   	nop
c000b23f:	83 c4 0c             	add    esp,0xc
c000b242:	c3                   	ret    
c000b243:	90                   	nop

c000b244 <Bus::~Bus()>:
c000b244:	83 ec 0c             	sub    esp,0xc
c000b247:	83 ec 0c             	sub    esp,0xc
c000b24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b24e:	e8 cd ff ff ff       	call   c000b220 <Bus::~Bus()>
c000b253:	83 c4 10             	add    esp,0x10
c000b256:	83 ec 08             	sub    esp,0x8
c000b259:	68 58 01 00 00       	push   0x158
c000b25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b262:	e8 f7 f0 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000b267:	83 c4 10             	add    esp,0x10
c000b26a:	83 c4 0c             	add    esp,0xc
c000b26d:	c3                   	ret    

c000b26e <beepThread(void*)>:
c000b26e:	83 ec 0c             	sub    esp,0xc
c000b271:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000b276:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b27a:	48                   	dec    eax
c000b27b:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000b280:	75 01                	jne    c000b283 <beepThread(void*)+0x15>
c000b282:	fb                   	sti    
c000b283:	83 ec 0c             	sub    esp,0xc
c000b286:	6b c2 0a             	imul   eax,edx,0xa
c000b289:	50                   	push   eax
c000b28a:	e8 b9 83 00 00       	call   c0013648 <milliTenthSleep(unsigned int)>
c000b28f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b296:	e8 5f a1 00 00       	call   c00153fa <HalMakeBeep(int)>
c000b29b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b2a3:	83 c4 1c             	add    esp,0x1c
c000b2a6:	e9 99 82 00 00       	jmp    c0013544 <blockTask(TaskState)>

c000b2ab <Krnl::beep(int, int, bool)>:
c000b2ab:	56                   	push   esi
c000b2ac:	53                   	push   ebx
c000b2ad:	83 ec 10             	sub    esp,0x10
c000b2b0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b2b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2bc:	e8 39 a1 00 00       	call   c00153fa <HalMakeBeep(int)>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 f0                	mov    eax,esi
c000b2c6:	84 c0                	test   al,al
c000b2c8:	74 1e                	je     c000b2e8 <Krnl::beep(int, int, bool)+0x3d>
c000b2ca:	83 ec 0c             	sub    esp,0xc
c000b2cd:	6b db 0a             	imul   ebx,ebx,0xa
c000b2d0:	53                   	push   ebx
c000b2d1:	e8 72 83 00 00       	call   c0013648 <milliTenthSleep(unsigned int)>
c000b2d6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b2de:	83 c4 14             	add    esp,0x14
c000b2e1:	5b                   	pop    ebx
c000b2e2:	5e                   	pop    esi
c000b2e3:	e9 12 a1 00 00       	jmp    c00153fa <HalMakeBeep(int)>
c000b2e8:	68 e6 00 00 00       	push   0xe6
c000b2ed:	53                   	push   ebx
c000b2ee:	68 6e b2 00 c0       	push   0xc000b26e
c000b2f3:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c000b2f9:	e8 2a 7e 00 00       	call   c0013128 <Process::createThread(void (*)(void*), void*, int)>
c000b2fe:	83 c4 14             	add    esp,0x14
c000b301:	5b                   	pop    ebx
c000b302:	5e                   	pop    esi
c000b303:	c3                   	ret    

c000b304 <User::loadClockSettings(int)>:
c000b304:	53                   	push   ebx
c000b305:	83 ec 14             	sub    esp,0x14
c000b308:	68 14 01 00 00       	push   0x114
c000b30d:	e8 a7 c4 ff ff       	call   c00077b9 <malloc>
c000b312:	83 c4 0c             	add    esp,0xc
c000b315:	89 c3                	mov    ebx,eax
c000b317:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c000b31d:	68 30 d9 01 c0       	push   0xc001d930
c000b322:	50                   	push   eax
c000b323:	e8 a2 f6 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000b328:	58                   	pop    eax
c000b329:	5a                   	pop    edx
c000b32a:	6a 01                	push   0x1
c000b32c:	53                   	push   ebx
c000b32d:	e8 58 f7 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000b332:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b335:	e8 ae f7 ff ff       	call   c000aae8 <File::close()>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	85 db                	test   ebx,ebx
c000b33f:	74 0f                	je     c000b350 <User::loadClockSettings(int)+0x4c>
c000b341:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b343:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b347:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b34a:	83 c4 08             	add    esp,0x8
c000b34d:	5b                   	pop    ebx
c000b34e:	ff e0                	jmp    eax
c000b350:	83 c4 08             	add    esp,0x8
c000b353:	5b                   	pop    ebx
c000b354:	c3                   	ret    
c000b355:	90                   	nop

c000b356 <Clock::Clock(char const*)>:
c000b356:	83 ec 0c             	sub    esp,0xc
c000b359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35d:	83 ec 08             	sub    esp,0x8
c000b360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b364:	50                   	push   eax
c000b365:	e8 c2 06 00 00       	call   c000ba2c <Device::Device(char const*)>
c000b36a:	83 c4 10             	add    esp,0x10
c000b36d:	ba 58 d9 01 c0       	mov    edx,0xc001d958
c000b372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b376:	89 10                	mov    DWORD PTR [eax],edx
c000b378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b37c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b386:	90                   	nop
c000b387:	83 c4 0c             	add    esp,0xc
c000b38a:	c3                   	ret    
c000b38b:	90                   	nop

c000b38c <Clock::~Clock()>:
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	ba 58 d9 01 c0       	mov    edx,0xc001d958
c000b394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b398:	89 10                	mov    DWORD PTR [eax],edx
c000b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39e:	83 ec 0c             	sub    esp,0xc
c000b3a1:	50                   	push   eax
c000b3a2:	e8 ef 03 00 00       	call   c000b796 <Device::~Device()>
c000b3a7:	83 c4 10             	add    esp,0x10
c000b3aa:	90                   	nop
c000b3ab:	83 c4 0c             	add    esp,0xc
c000b3ae:	c3                   	ret    
c000b3af:	90                   	nop

c000b3b0 <Clock::~Clock()>:
c000b3b0:	83 ec 0c             	sub    esp,0xc
c000b3b3:	83 ec 0c             	sub    esp,0xc
c000b3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ba:	e8 cd ff ff ff       	call   c000b38c <Clock::~Clock()>
c000b3bf:	83 c4 10             	add    esp,0x10
c000b3c2:	83 ec 08             	sub    esp,0x8
c000b3c5:	68 58 01 00 00       	push   0x158
c000b3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ce:	e8 8b ef ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000b3d3:	83 c4 10             	add    esp,0x10
c000b3d6:	83 c4 0c             	add    esp,0xc
c000b3d9:	c3                   	ret    

c000b3da <Clock::timeInSecondsLocal()>:
c000b3da:	53                   	push   ebx
c000b3db:	83 ec 14             	sub    esp,0x14
c000b3de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3e2:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3e4:	50                   	push   eax
c000b3e5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b3e8:	0f b6 0d 98 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020598
c000b3ef:	03 0d 9c 05 02 c0    	add    ecx,DWORD PTR ds:0xc002059c
c000b3f5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b3fb:	89 cb                	mov    ebx,ecx
c000b3fd:	c1 fb 1f             	sar    ebx,0x1f
c000b400:	01 c8                	add    eax,ecx
c000b402:	11 da                	adc    edx,ebx
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	31 c9                	xor    ecx,ecx
c000b409:	80 3d 99 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020599,0x0
c000b410:	74 05                	je     c000b417 <Clock::timeInSecondsLocal()+0x3d>
c000b412:	b9 08 07 00 00       	mov    ecx,0x708
c000b417:	31 db                	xor    ebx,ebx
c000b419:	01 c8                	add    eax,ecx
c000b41b:	11 da                	adc    edx,ebx
c000b41d:	83 c4 08             	add    esp,0x8
c000b420:	5b                   	pop    ebx
c000b421:	c3                   	ret    

c000b422 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b422:	57                   	push   edi
c000b423:	56                   	push   esi
c000b424:	53                   	push   ebx
c000b425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b429:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b42d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b42f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b433:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b436:	0f b6 05 98 05 02 c0 	movzx  eax,BYTE PTR ds:0xc0020598
c000b43d:	03 05 9c 05 02 c0    	add    eax,DWORD PTR ds:0xc002059c
c000b443:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b449:	99                   	cdq    
c000b44a:	29 c6                	sub    esi,eax
c000b44c:	19 d7                	sbb    edi,edx
c000b44e:	89 f0                	mov    eax,esi
c000b450:	89 fa                	mov    edx,edi
c000b452:	31 f6                	xor    esi,esi
c000b454:	80 3d 99 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020599,0x0
c000b45b:	74 05                	je     c000b462 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b45d:	be 08 07 00 00       	mov    esi,0x708
c000b462:	31 ff                	xor    edi,edi
c000b464:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b468:	29 f0                	sub    eax,esi
c000b46a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b46e:	19 fa                	sbb    edx,edi
c000b470:	89 d8                	mov    eax,ebx
c000b472:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b476:	5b                   	pop    ebx
c000b477:	5e                   	pop    esi
c000b478:	5f                   	pop    edi
c000b479:	ff e0                	jmp    eax

c000b47b <datetimeToSeconds(datetime_t)>:
c000b47b:	55                   	push   ebp
c000b47c:	57                   	push   edi
c000b47d:	56                   	push   esi
c000b47e:	53                   	push   ebx
c000b47f:	83 ec 14             	sub    esp,0x14
c000b482:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b486:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b48a:	89 d3                	mov    ebx,edx
c000b48c:	0f b6 c6             	movzx  eax,dh
c000b48f:	c1 eb 10             	shr    ebx,0x10
c000b492:	48                   	dec    eax
c000b493:	66 81 eb 6c 07       	sub    bx,0x76c
c000b498:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b49c:	0f b6 f5             	movzx  esi,ch
c000b49f:	89 cf                	mov    edi,ecx
c000b4a1:	6b f6 3c             	imul   esi,esi,0x3c
c000b4a4:	c1 ef 10             	shr    edi,0x10
c000b4a7:	0f b6 c9             	movzx  ecx,cl
c000b4aa:	89 f8                	mov    eax,edi
c000b4ac:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4b2:	0f b6 f8             	movzx  edi,al
c000b4b5:	0f b6 d2             	movzx  edx,dl
c000b4b8:	01 fe                	add    esi,edi
c000b4ba:	01 f1                	add    ecx,esi
c000b4bc:	0f b7 f3             	movzx  esi,bx
c000b4bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b4c3:	c1 f9 1f             	sar    ecx,0x1f
c000b4c6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b4cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b4cf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b4d4:	8b 0c 8d a0 d9 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2660]
c000b4db:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b4df:	76 29                	jbe    c000b50a <datetimeToSeconds(datetime_t)+0x8f>
c000b4e1:	f6 c3 03             	test   bl,0x3
c000b4e4:	75 24                	jne    c000b50a <datetimeToSeconds(datetime_t)+0x8f>
c000b4e6:	31 d2                	xor    edx,edx
c000b4e8:	bf 64 00 00 00       	mov    edi,0x64
c000b4ed:	89 d8                	mov    eax,ebx
c000b4ef:	66 f7 f7             	div    di
c000b4f2:	66 85 d2             	test   dx,dx
c000b4f5:	75 12                	jne    c000b509 <datetimeToSeconds(datetime_t)+0x8e>
c000b4f7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b4fd:	bf 90 01 00 00       	mov    edi,0x190
c000b502:	99                   	cdq    
c000b503:	f7 ff                	idiv   edi
c000b505:	85 d2                	test   edx,edx
c000b507:	75 01                	jne    c000b50a <datetimeToSeconds(datetime_t)+0x8f>
c000b509:	41                   	inc    ecx
c000b50a:	66 83 fb 46          	cmp    bx,0x46
c000b50e:	76 45                	jbe    c000b555 <datetimeToSeconds(datetime_t)+0xda>
c000b510:	bb 46 00 00 00       	mov    ebx,0x46
c000b515:	bf 64 00 00 00       	mov    edi,0x64
c000b51a:	bd 90 01 00 00       	mov    ebp,0x190
c000b51f:	b8 6d 01 00 00       	mov    eax,0x16d
c000b524:	f6 c3 03             	test   bl,0x3
c000b527:	75 23                	jne    c000b54c <datetimeToSeconds(datetime_t)+0xd1>
c000b529:	89 d8                	mov    eax,ebx
c000b52b:	99                   	cdq    
c000b52c:	f7 ff                	idiv   edi
c000b52e:	b8 6e 01 00 00       	mov    eax,0x16e
c000b533:	85 d2                	test   edx,edx
c000b535:	75 15                	jne    c000b54c <datetimeToSeconds(datetime_t)+0xd1>
c000b537:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b53d:	99                   	cdq    
c000b53e:	f7 fd                	idiv   ebp
c000b540:	31 c0                	xor    eax,eax
c000b542:	85 d2                	test   edx,edx
c000b544:	0f 94 c0             	sete   al
c000b547:	05 6d 01 00 00       	add    eax,0x16d
c000b54c:	01 c1                	add    ecx,eax
c000b54e:	43                   	inc    ebx
c000b54f:	39 f3                	cmp    ebx,esi
c000b551:	7c cc                	jl     c000b51f <datetimeToSeconds(datetime_t)+0xa4>
c000b553:	eb 3b                	jmp    c000b590 <datetimeToSeconds(datetime_t)+0x115>
c000b555:	74 39                	je     c000b590 <datetimeToSeconds(datetime_t)+0x115>
c000b557:	b8 45 00 00 00       	mov    eax,0x45
c000b55c:	89 c2                	mov    edx,eax
c000b55e:	83 e2 03             	and    edx,0x3
c000b561:	39 f0                	cmp    eax,esi
c000b563:	7e 13                	jle    c000b578 <datetimeToSeconds(datetime_t)+0xfd>
c000b565:	85 d2                	test   edx,edx
c000b567:	0f 94 c2             	sete   dl
c000b56a:	48                   	dec    eax
c000b56b:	0f b6 d2             	movzx  edx,dl
c000b56e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b574:	29 d1                	sub    ecx,edx
c000b576:	eb e4                	jmp    c000b55c <datetimeToSeconds(datetime_t)+0xe1>
c000b578:	b8 6d 01 00 00       	mov    eax,0x16d
c000b57d:	85 d2                	test   edx,edx
c000b57f:	75 0d                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x113>
c000b581:	31 c0                	xor    eax,eax
c000b583:	66 85 db             	test   bx,bx
c000b586:	0f 95 c0             	setne  al
c000b589:	05 6d 01 00 00       	add    eax,0x16d
c000b58e:	29 c1                	sub    ecx,eax
c000b590:	b8 80 51 01 00       	mov    eax,0x15180
c000b595:	f7 e9                	imul   ecx
c000b597:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b59b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b59f:	83 c4 14             	add    esp,0x14
c000b5a2:	5b                   	pop    ebx
c000b5a3:	5e                   	pop    esi
c000b5a4:	5f                   	pop    edi
c000b5a5:	5d                   	pop    ebp
c000b5a6:	c3                   	ret    
c000b5a7:	90                   	nop

c000b5a8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b5a8:	57                   	push   edi
c000b5a9:	56                   	push   esi
c000b5aa:	53                   	push   ebx
c000b5ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b5af:	8b 06                	mov    eax,DWORD PTR [esi]
c000b5b1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b5b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5bc:	e8 ba fe ff ff       	call   c000b47b <datetimeToSeconds(datetime_t)>
c000b5c1:	59                   	pop    ecx
c000b5c2:	0f b6 0d 98 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020598
c000b5c9:	5b                   	pop    ebx
c000b5ca:	03 0d 9c 05 02 c0    	add    ecx,DWORD PTR ds:0xc002059c
c000b5d0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5d6:	89 cb                	mov    ebx,ecx
c000b5d8:	c1 fb 1f             	sar    ebx,0x1f
c000b5db:	29 c8                	sub    eax,ecx
c000b5dd:	19 da                	sbb    edx,ebx
c000b5df:	31 c9                	xor    ecx,ecx
c000b5e1:	80 3d 99 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020599,0x0
c000b5e8:	74 05                	je     c000b5ef <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b5ea:	b9 08 07 00 00       	mov    ecx,0x708
c000b5ef:	31 db                	xor    ebx,ebx
c000b5f1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b5f5:	29 c8                	sub    eax,ecx
c000b5f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b5fb:	19 da                	sbb    edx,ebx
c000b5fd:	89 f8                	mov    eax,edi
c000b5ff:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b603:	5b                   	pop    ebx
c000b604:	5e                   	pop    esi
c000b605:	5f                   	pop    edi
c000b606:	ff e0                	jmp    eax

c000b608 <secondsToDatetime(unsigned long long)>:
c000b608:	55                   	push   ebp
c000b609:	57                   	push   edi
c000b60a:	56                   	push   esi
c000b60b:	53                   	push   ebx
c000b60c:	83 ec 1c             	sub    esp,0x1c
c000b60f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b613:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b617:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b61b:	6a 00                	push   0x0
c000b61d:	68 80 51 01 00       	push   0x15180
c000b622:	55                   	push   ebp
c000b623:	57                   	push   edi
c000b624:	e8 17 06 01 00       	call   c001bc40 <__udivdi3>
c000b629:	83 c4 10             	add    esp,0x10
c000b62c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b632:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b636:	6a 00                	push   0x0
c000b638:	68 80 51 01 00       	push   0x15180
c000b63d:	55                   	push   ebp
c000b63e:	57                   	push   edi
c000b63f:	bf 10 0e 00 00       	mov    edi,0xe10
c000b644:	e8 f7 06 01 00       	call   c001bd40 <__umoddi3>
c000b649:	83 c4 10             	add    esp,0x10
c000b64c:	99                   	cdq    
c000b64d:	f7 ff                	idiv   edi
c000b64f:	bf 3c 00 00 00       	mov    edi,0x3c
c000b654:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b657:	89 d0                	mov    eax,edx
c000b659:	99                   	cdq    
c000b65a:	f7 ff                	idiv   edi
c000b65c:	85 db                	test   ebx,ebx
c000b65e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b661:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b664:	79 11                	jns    c000b677 <secondsToDatetime(unsigned long long)+0x6f>
c000b666:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b66a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b670:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b675:	eb 07                	jmp    c000b67e <secondsToDatetime(unsigned long long)+0x76>
c000b677:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b67c:	89 d8                	mov    eax,ebx
c000b67e:	bf b4 05 00 00       	mov    edi,0x5b4
c000b683:	99                   	cdq    
c000b684:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b689:	f7 f9                	idiv   ecx
c000b68b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b690:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b694:	31 d2                	xor    edx,edx
c000b696:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b69e:	01 c3                	add    ebx,eax
c000b6a0:	89 d8                	mov    eax,ebx
c000b6a2:	f7 f1                	div    ecx
c000b6a4:	31 d2                	xor    edx,edx
c000b6a6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b6a9:	89 d8                	mov    eax,ebx
c000b6ab:	f7 f7                	div    edi
c000b6ad:	31 d2                	xor    edx,edx
c000b6af:	29 c1                	sub    ecx,eax
c000b6b1:	89 d8                	mov    eax,ebx
c000b6b3:	f7 f5                	div    ebp
c000b6b5:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b6ba:	29 c1                	sub    ecx,eax
c000b6bc:	31 d2                	xor    edx,edx
c000b6be:	89 c8                	mov    eax,ecx
c000b6c0:	f7 f5                	div    ebp
c000b6c2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b6c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b6cb:	31 d2                	xor    edx,edx
c000b6cd:	89 c8                	mov    eax,ecx
c000b6cf:	f7 f5                	div    ebp
c000b6d1:	31 d2                	xor    edx,edx
c000b6d3:	01 c3                	add    ebx,eax
c000b6d5:	89 c8                	mov    eax,ecx
c000b6d7:	f7 f7                	div    edi
c000b6d9:	bf 99 00 00 00       	mov    edi,0x99
c000b6de:	29 c3                	sub    ebx,eax
c000b6e0:	31 d2                	xor    edx,edx
c000b6e2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b6ea:	29 c3                	sub    ebx,eax
c000b6ec:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b6ef:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b6f2:	bb 05 00 00 00       	mov    ebx,0x5
c000b6f7:	83 c1 02             	add    ecx,0x2
c000b6fa:	89 c8                	mov    eax,ecx
c000b6fc:	f7 f7                	div    edi
c000b6fe:	31 d2                	xor    edx,edx
c000b700:	89 c7                	mov    edi,eax
c000b702:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b708:	83 c0 02             	add    eax,0x2
c000b70b:	f7 f3                	div    ebx
c000b70d:	89 eb                	mov    ebx,ebp
c000b70f:	29 c3                	sub    ebx,eax
c000b711:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b717:	88 1e                	mov    BYTE PTR [esi],bl
c000b719:	19 c0                	sbb    eax,eax
c000b71b:	31 d2                	xor    edx,edx
c000b71d:	83 e0 0c             	and    eax,0xc
c000b720:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b724:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b72c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b730:	83 f9 01             	cmp    ecx,0x1
c000b733:	0f 96 c2             	setbe  dl
c000b736:	41                   	inc    ecx
c000b737:	01 d0                	add    eax,edx
c000b739:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b73c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b740:	83 c4 1c             	add    esp,0x1c
c000b743:	89 f0                	mov    eax,esi
c000b745:	5b                   	pop    ebx
c000b746:	5e                   	pop    esi
c000b747:	5f                   	pop    edi
c000b748:	5d                   	pop    ebp
c000b749:	c2 04 00             	ret    0x4

c000b74c <Clock::timeInDatetimeLocal()>:
c000b74c:	53                   	push   ebx
c000b74d:	83 ec 14             	sub    esp,0x14
c000b750:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b754:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b758:	e8 7d fc ff ff       	call   c000b3da <Clock::timeInSecondsLocal()>
c000b75d:	83 c4 0c             	add    esp,0xc
c000b760:	52                   	push   edx
c000b761:	50                   	push   eax
c000b762:	53                   	push   ebx
c000b763:	e8 a0 fe ff ff       	call   c000b608 <secondsToDatetime(unsigned long long)>
c000b768:	89 d8                	mov    eax,ebx
c000b76a:	83 c4 14             	add    esp,0x14
c000b76d:	5b                   	pop    ebx
c000b76e:	c2 04 00             	ret    0x4
c000b771:	90                   	nop

c000b772 <Device::hibernate()>:
c000b772:	c3                   	ret    
c000b773:	90                   	nop

c000b774 <Device::wake()>:
c000b774:	c3                   	ret    
c000b775:	90                   	nop

c000b776 <Device::detect()>:
c000b776:	c3                   	ret    
c000b777:	90                   	nop

c000b778 <Device::disableLegacy()>:
c000b778:	c3                   	ret    
c000b779:	90                   	nop

c000b77a <Device::powerSaving(PowerSavingLevel)>:
c000b77a:	c3                   	ret    
c000b77b:	90                   	nop

c000b77c <DriverlessDevice::close(int, int, void*)>:
c000b77c:	31 c0                	xor    eax,eax
c000b77e:	c3                   	ret    
c000b77f:	90                   	nop

c000b780 <DriverlessDevice::detect()>:
c000b780:	c3                   	ret    
c000b781:	90                   	nop

c000b782 <DriverlessDevice::open(int, int, void*)>:
c000b782:	83 ec 18             	sub    esp,0x18
c000b785:	68 d0 d9 01 c0       	push   0xc001d9d0
c000b78a:	e8 a8 49 00 00       	call   c0010137 <KePanic(char const*)>
c000b78f:	83 c8 ff             	or     eax,0xffffffff
c000b792:	83 c4 1c             	add    esp,0x1c
c000b795:	c3                   	ret    

c000b796 <Device::~Device()>:
c000b796:	ba 30 da 01 c0       	mov    edx,0xc001da30
c000b79b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b79f:	89 10                	mov    DWORD PTR [eax],edx
c000b7a1:	90                   	nop
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <Device::~Device()>:
c000b7a4:	83 ec 0c             	sub    esp,0xc
c000b7a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7ab:	e8 e6 ff ff ff       	call   c000b796 <Device::~Device()>
c000b7b0:	83 c4 04             	add    esp,0x4
c000b7b3:	83 ec 08             	sub    esp,0x8
c000b7b6:	68 58 01 00 00       	push   0x158
c000b7bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7bf:	e8 9a eb ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	83 c4 0c             	add    esp,0xc
c000b7ca:	c3                   	ret    
c000b7cb:	90                   	nop

c000b7cc <Device::findAndLoadDriver()>:
c000b7cc:	c7 44 24 04 ee d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d9ee
c000b7d4:	e9 7b ec ff ff       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>
c000b7d9:	90                   	nop

c000b7da <Device::preOpenPCI(PCIDeviceInfo)>:
c000b7da:	57                   	push   edi
c000b7db:	b9 09 00 00 00       	mov    ecx,0x9
c000b7e0:	56                   	push   esi
c000b7e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b7e5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b7e9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b7f3:	81 c7 18 01 00 00    	add    edi,0x118
c000b7f9:	fc                   	cld    
c000b7fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b7fc:	5e                   	pop    esi
c000b7fd:	5f                   	pop    edi
c000b7fe:	c3                   	ret    
c000b7ff:	90                   	nop

c000b800 <Device::preOpenACPI(void*, char*, char*)>:
c000b800:	57                   	push   edi
c000b801:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b806:	56                   	push   esi
c000b807:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b80b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b80f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b819:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b81f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b825:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b829:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b82b:	b9 0e 00 00 00       	mov    ecx,0xe
c000b830:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b836:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b83a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b83c:	5e                   	pop    esi
c000b83d:	5f                   	pop    edi
c000b83e:	c3                   	ret    
c000b83f:	90                   	nop

c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b840:	53                   	push   ebx
c000b841:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b845:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b849:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b84d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b851:	0f b6 c0             	movzx  eax,al
c000b854:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b858:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b85c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b860:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b864:	5b                   	pop    ebx
c000b865:	e9 a6 05 00 00       	jmp    c000be10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b86a <Device::getParent()>:
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b874:	c3                   	ret    
c000b875:	90                   	nop

c000b876 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b87e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b883:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b887:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b88b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b88f:	e9 e8 06 00 00       	jmp    c000bf7c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b894 <Device::addChild(Device*)>:
c000b894:	53                   	push   ebx
c000b895:	83 ec 08             	sub    esp,0x8
c000b898:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b89c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8a0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b8a6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b8ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b8ae:	85 d2                	test   edx,edx
c000b8b0:	74 04                	je     c000b8b6 <Device::addChild(Device*)+0x22>
c000b8b2:	89 d3                	mov    ebx,edx
c000b8b4:	eb f6                	jmp    c000b8ac <Device::addChild(Device*)+0x18>
c000b8b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b8b9:	83 ec 0c             	sub    esp,0xc
c000b8bc:	6a 08                	push   0x8
c000b8be:	e8 f6 be ff ff       	call   c00077b9 <malloc>
c000b8c3:	89 03                	mov    DWORD PTR [ebx],eax
c000b8c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b8cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b8d2:	83 c4 18             	add    esp,0x18
c000b8d5:	5b                   	pop    ebx
c000b8d6:	c3                   	ret    
c000b8d7:	90                   	nop

c000b8d8 <Device::removeAllChildren()>:
c000b8d8:	56                   	push   esi
c000b8d9:	53                   	push   ebx
c000b8da:	52                   	push   edx
c000b8db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8df:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b8e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b8e8:	74 17                	je     c000b901 <Device::removeAllChildren()+0x29>
c000b8ea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b8ed:	85 c0                	test   eax,eax
c000b8ef:	74 0c                	je     c000b8fd <Device::removeAllChildren()+0x25>
c000b8f1:	83 ec 0c             	sub    esp,0xc
c000b8f4:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8f6:	50                   	push   eax
c000b8f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b8fa:	83 c4 10             	add    esp,0x10
c000b8fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b8ff:	eb e4                	jmp    c000b8e5 <Device::removeAllChildren()+0xd>
c000b901:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b907:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b90d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b913:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b91a:	58                   	pop    eax
c000b91b:	5b                   	pop    ebx
c000b91c:	5e                   	pop    esi
c000b91d:	c3                   	ret    

c000b91e <Device::hibernateAll()>:
c000b91e:	53                   	push   ebx
c000b91f:	83 ec 14             	sub    esp,0x14
c000b922:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b926:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b928:	53                   	push   ebx
c000b929:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b92c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b938:	74 0f                	je     c000b949 <Device::hibernateAll()+0x2b>
c000b93a:	83 ec 0c             	sub    esp,0xc
c000b93d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b940:	e8 d9 ff ff ff       	call   c000b91e <Device::hibernateAll()>
c000b945:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b947:	eb e9                	jmp    c000b932 <Device::hibernateAll()+0x14>
c000b949:	83 c4 08             	add    esp,0x8
c000b94c:	5b                   	pop    ebx
c000b94d:	c3                   	ret    

c000b94e <Device::wakeAll()>:
c000b94e:	53                   	push   ebx
c000b94f:	83 ec 14             	sub    esp,0x14
c000b952:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b956:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b958:	53                   	push   ebx
c000b959:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b95c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b962:	83 c4 10             	add    esp,0x10
c000b965:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b968:	74 0f                	je     c000b979 <Device::wakeAll()+0x2b>
c000b96a:	83 ec 0c             	sub    esp,0xc
c000b96d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b970:	e8 d9 ff ff ff       	call   c000b94e <Device::wakeAll()>
c000b975:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b977:	eb e9                	jmp    c000b962 <Device::wakeAll()+0x14>
c000b979:	83 c4 08             	add    esp,0x8
c000b97c:	5b                   	pop    ebx
c000b97d:	c3                   	ret    

c000b97e <Device::detectAll()>:
c000b97e:	53                   	push   ebx
c000b97f:	83 ec 14             	sub    esp,0x14
c000b982:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b986:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b988:	53                   	push   ebx
c000b989:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000b98c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b992:	83 c4 10             	add    esp,0x10
c000b995:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b998:	74 0f                	je     c000b9a9 <Device::detectAll()+0x2b>
c000b99a:	83 ec 0c             	sub    esp,0xc
c000b99d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9a0:	e8 d9 ff ff ff       	call   c000b97e <Device::detectAll()>
c000b9a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9a7:	eb e9                	jmp    c000b992 <Device::detectAll()+0x14>
c000b9a9:	83 c4 08             	add    esp,0x8
c000b9ac:	5b                   	pop    ebx
c000b9ad:	c3                   	ret    

c000b9ae <Device::disableLegacyAll()>:
c000b9ae:	c3                   	ret    
c000b9af:	90                   	nop

c000b9b0 <Device::loadDriversForAll()>:
c000b9b0:	c3                   	ret    
c000b9b1:	90                   	nop

c000b9b2 <Device::closeAll()>:
c000b9b2:	53                   	push   ebx
c000b9b3:	83 ec 08             	sub    esp,0x8
c000b9b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b9ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9bc:	6a 00                	push   0x0
c000b9be:	6a 00                	push   0x0
c000b9c0:	6a 00                	push   0x0
c000b9c2:	53                   	push   ebx
c000b9c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b9c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9cc:	83 c4 10             	add    esp,0x10
c000b9cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9d2:	74 0f                	je     c000b9e3 <Device::closeAll()+0x31>
c000b9d4:	83 ec 0c             	sub    esp,0xc
c000b9d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9da:	e8 d3 ff ff ff       	call   c000b9b2 <Device::closeAll()>
c000b9df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9e1:	eb e9                	jmp    c000b9cc <Device::closeAll()+0x1a>
c000b9e3:	83 c4 08             	add    esp,0x8
c000b9e6:	5b                   	pop    ebx
c000b9e7:	c3                   	ret    

c000b9e8 <Device::powerSavingAll(PowerSavingLevel)>:
c000b9e8:	56                   	push   esi
c000b9e9:	53                   	push   ebx
c000b9ea:	83 ec 0c             	sub    esp,0xc
c000b9ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b9f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9f7:	56                   	push   esi
c000b9f8:	53                   	push   ebx
c000b9f9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000b9fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba02:	83 c4 10             	add    esp,0x10
c000ba05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba08:	74 0f                	je     c000ba19 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba0a:	52                   	push   edx
c000ba0b:	52                   	push   edx
c000ba0c:	56                   	push   esi
c000ba0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba10:	e8 d3 ff ff ff       	call   c000b9e8 <Device::powerSavingAll(PowerSavingLevel)>
c000ba15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba17:	eb e9                	jmp    c000ba02 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ba19:	58                   	pop    eax
c000ba1a:	5b                   	pop    ebx
c000ba1b:	5e                   	pop    esi
c000ba1c:	c3                   	ret    
c000ba1d:	90                   	nop

c000ba1e <Device::setName(char const*)>:
c000ba1e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000ba26:	e9 d5 4b ff ff       	jmp    c0000600 <strcpy>
c000ba2b:	90                   	nop

c000ba2c <Device::Device(char const*)>:
c000ba2c:	83 ec 1c             	sub    esp,0x1c
c000ba2f:	ba 30 da 01 c0       	mov    edx,0xc001da30
c000ba34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba38:	89 10                	mov    DWORD PTR [eax],edx
c000ba3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba3e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000ba48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba4c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ba56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba5a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ba64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba68:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ba72:	83 ec 08             	sub    esp,0x8
c000ba75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba7d:	e8 9c ff ff ff       	call   c000ba1e <Device::setName(char const*)>
c000ba82:	83 c4 10             	add    esp,0x10
c000ba85:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000ba8d:	83 ec 0c             	sub    esp,0xc
c000ba90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba94:	e8 20 bd ff ff       	call   c00077b9 <malloc>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000baa2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baa9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baad:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000babd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bacd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000badf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000baea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000baf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bafc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb18:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bb22:	90                   	nop
c000bb23:	83 c4 1c             	add    esp,0x1c
c000bb26:	c3                   	ret    
c000bb27:	90                   	nop

c000bb28 <Device::getName()>:
c000bb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb2c:	05 d0 00 00 00       	add    eax,0xd0
c000bb31:	c3                   	ret    

c000bb32 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bb32:	83 ec 0c             	sub    esp,0xc
c000bb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb39:	83 ec 08             	sub    esp,0x8
c000bb3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb40:	50                   	push   eax
c000bb41:	e8 e6 fe ff ff       	call   c000ba2c <Device::Device(char const*)>
c000bb46:	83 c4 10             	add    esp,0x10
c000bb49:	ba 5c da 01 c0       	mov    edx,0xc001da5c
c000bb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb52:	89 10                	mov    DWORD PTR [eax],edx
c000bb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb58:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bb62:	90                   	nop
c000bb63:	83 c4 0c             	add    esp,0xc
c000bb66:	c3                   	ret    
c000bb67:	90                   	nop

c000bb68 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bb68:	57                   	push   edi
c000bb69:	56                   	push   esi
c000bb6a:	53                   	push   ebx
c000bb6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb6f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bb73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bb77:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bb7d:	75 0c                	jne    c000bb8b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bb7f:	52                   	push   edx
c000bb80:	52                   	push   edx
c000bb81:	53                   	push   ebx
c000bb82:	56                   	push   esi
c000bb83:	e8 6a 05 01 00       	call   c001c0f2 <LinkedList<Device>::addElement(Device*)>
c000bb88:	83 c4 10             	add    esp,0x10
c000bb8b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb94:	74 12                	je     c000bba8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bb96:	50                   	push   eax
c000bb97:	57                   	push   edi
c000bb98:	56                   	push   esi
c000bb99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb9c:	e8 c7 ff ff ff       	call   c000bb68 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bba1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	eb e9                	jmp    c000bb91 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bba8:	5b                   	pop    ebx
c000bba9:	5e                   	pop    esi
c000bbaa:	5f                   	pop    edi
c000bbab:	c3                   	ret    

c000bbac <getDevicesOfType(DeviceType)>:
c000bbac:	53                   	push   ebx
c000bbad:	83 ec 14             	sub    esp,0x14
c000bbb0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbb4:	53                   	push   ebx
c000bbb5:	e8 14 06 01 00       	call   c001c1ce <LinkedList<Device>::LinkedList()>
c000bbba:	83 c4 0c             	add    esp,0xc
c000bbbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbc1:	53                   	push   ebx
c000bbc2:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c000bbc8:	e8 9b ff ff ff       	call   c000bb68 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bbcd:	89 d8                	mov    eax,ebx
c000bbcf:	83 c4 18             	add    esp,0x18
c000bbd2:	5b                   	pop    ebx
c000bbd3:	c2 04 00             	ret    0x4
c000bbd6:	66 90                	xchg   ax,ax

c000bbd8 <HardDiskController::HardDiskController(char const*)>:
c000bbd8:	83 ec 0c             	sub    esp,0xc
c000bbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbdf:	83 ec 08             	sub    esp,0x8
c000bbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe6:	50                   	push   eax
c000bbe7:	e8 40 fe ff ff       	call   c000ba2c <Device::Device(char const*)>
c000bbec:	83 c4 10             	add    esp,0x10
c000bbef:	ba 88 da 01 c0       	mov    edx,0xc001da88
c000bbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbf8:	89 10                	mov    DWORD PTR [eax],edx
c000bbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbfe:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc08:	90                   	nop
c000bc09:	83 c4 0c             	add    esp,0xc
c000bc0c:	c3                   	ret    
c000bc0d:	90                   	nop
c000bc0e:	66 90                	xchg   ax,ax

c000bc10 <HardDiskController::~HardDiskController()>:
c000bc10:	83 ec 0c             	sub    esp,0xc
c000bc13:	ba 88 da 01 c0       	mov    edx,0xc001da88
c000bc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc1c:	89 10                	mov    DWORD PTR [eax],edx
c000bc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc22:	83 ec 0c             	sub    esp,0xc
c000bc25:	50                   	push   eax
c000bc26:	e8 6b fb ff ff       	call   c000b796 <Device::~Device()>
c000bc2b:	83 c4 10             	add    esp,0x10
c000bc2e:	90                   	nop
c000bc2f:	83 c4 0c             	add    esp,0xc
c000bc32:	c3                   	ret    
c000bc33:	90                   	nop

c000bc34 <HardDiskController::~HardDiskController()>:
c000bc34:	83 ec 0c             	sub    esp,0xc
c000bc37:	83 ec 0c             	sub    esp,0xc
c000bc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3e:	e8 cd ff ff ff       	call   c000bc10 <HardDiskController::~HardDiskController()>
c000bc43:	83 c4 10             	add    esp,0x10
c000bc46:	83 ec 08             	sub    esp,0x8
c000bc49:	68 58 01 00 00       	push   0x158
c000bc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc52:	e8 07 e7 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000bc57:	83 c4 10             	add    esp,0x10
c000bc5a:	83 c4 0c             	add    esp,0xc
c000bc5d:	c3                   	ret    

c000bc5e <PhysicalDisk::eject()>:
c000bc5e:	83 c8 ff             	or     eax,0xffffffff
c000bc61:	c3                   	ret    

c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bc62:	83 ec 0c             	sub    esp,0xc
c000bc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc69:	83 ec 08             	sub    esp,0x8
c000bc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc70:	50                   	push   eax
c000bc71:	e8 b6 fd ff ff       	call   c000ba2c <Device::Device(char const*)>
c000bc76:	83 c4 10             	add    esp,0x10
c000bc79:	ba b4 da 01 c0       	mov    edx,0xc001dab4
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	89 10                	mov    DWORD PTR [eax],edx
c000bc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc88:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc93:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcb0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bcc4:	90                   	nop
c000bcc5:	83 c4 0c             	add    esp,0xc
c000bcc8:	c3                   	ret    
c000bcc9:	90                   	nop

c000bcca <PhysicalDisk::startCache()>:
c000bcca:	56                   	push   esi
c000bccb:	53                   	push   ebx
c000bccc:	83 ec 10             	sub    esp,0x10
c000bccf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcd3:	6a 44                	push   0x44
c000bcd5:	e8 df ba ff ff       	call   c00077b9 <malloc>
c000bcda:	89 c6                	mov    esi,eax
c000bcdc:	58                   	pop    eax
c000bcdd:	5a                   	pop    edx
c000bcde:	53                   	push   ebx
c000bcdf:	56                   	push   esi
c000bce0:	e8 2b 16 00 00       	call   c000d310 <VCache::VCache(PhysicalDisk*)>
c000bce5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bceb:	83 c4 14             	add    esp,0x14
c000bcee:	5b                   	pop    ebx
c000bcef:	5e                   	pop    esi
c000bcf0:	c3                   	ret    
c000bcf1:	90                   	nop

c000bcf2 <PhysicalDisk::~PhysicalDisk()>:
c000bcf2:	83 ec 0c             	sub    esp,0xc
c000bcf5:	ba b4 da 01 c0       	mov    edx,0xc001dab4
c000bcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfe:	89 10                	mov    DWORD PTR [eax],edx
c000bd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd04:	83 ec 0c             	sub    esp,0xc
c000bd07:	50                   	push   eax
c000bd08:	e8 89 fa ff ff       	call   c000b796 <Device::~Device()>
c000bd0d:	83 c4 10             	add    esp,0x10
c000bd10:	90                   	nop
c000bd11:	83 c4 0c             	add    esp,0xc
c000bd14:	c3                   	ret    
c000bd15:	90                   	nop

c000bd16 <PhysicalDisk::~PhysicalDisk()>:
c000bd16:	83 ec 0c             	sub    esp,0xc
c000bd19:	83 ec 0c             	sub    esp,0xc
c000bd1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd20:	e8 cd ff ff ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c000bd25:	83 c4 10             	add    esp,0x10
c000bd28:	83 ec 08             	sub    esp,0x8
c000bd2b:	68 6c 01 00 00       	push   0x16c
c000bd30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd34:	e8 25 e6 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000bd39:	83 c4 10             	add    esp,0x10
c000bd3c:	83 c4 0c             	add    esp,0xc
c000bd3f:	c3                   	ret    

c000bd40 <int_handler>:
c000bd40:	55                   	push   ebp
c000bd41:	57                   	push   edi
c000bd42:	56                   	push   esi
c000bd43:	53                   	push   ebx
c000bd44:	83 ec 0c             	sub    esp,0xc
c000bd47:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bd4b:	80 3d 18 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f18,0x0
c000bd52:	74 0b                	je     c000bd5f <int_handler+0x1f>
c000bd54:	fa                   	cli    
c000bd55:	f4                   	hlt    
c000bd56:	80 3d 18 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f18,0x0
c000bd5d:	75 f5                	jne    c000bd54 <int_handler+0x14>
c000bd5f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bd62:	8d 46 e0             	lea    eax,[esi-0x20]
c000bd65:	83 f8 17             	cmp    eax,0x17
c000bd68:	76 3e                	jbe    c000bda8 <int_handler+0x68>
c000bd6a:	c1 e6 04             	shl    esi,0x4
c000bd6d:	31 db                	xor    ebx,ebx
c000bd6f:	8d ae a0 15 02 c0    	lea    ebp,[esi-0x3ffdea60]
c000bd75:	81 c6 a0 05 02 c0    	add    esi,0xc00205a0
c000bd7b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bd7f:	85 c0                	test   eax,eax
c000bd81:	74 13                	je     c000bd96 <int_handler+0x56>
c000bd83:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bd86:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bd8a:	74 2a                	je     c000bdb6 <int_handler+0x76>
c000bd8c:	83 ec 08             	sub    esp,0x8
c000bd8f:	52                   	push   edx
c000bd90:	57                   	push   edi
c000bd91:	ff d0                	call   eax
c000bd93:	83 c4 10             	add    esp,0x10
c000bd96:	43                   	inc    ebx
c000bd97:	83 fb 04             	cmp    ebx,0x4
c000bd9a:	75 df                	jne    c000bd7b <int_handler+0x3b>
c000bd9c:	83 c4 0c             	add    esp,0xc
c000bd9f:	31 c0                	xor    eax,eax
c000bda1:	5b                   	pop    ebx
c000bda2:	31 d2                	xor    edx,edx
c000bda4:	5e                   	pop    esi
c000bda5:	5f                   	pop    edi
c000bda6:	5d                   	pop    ebp
c000bda7:	c3                   	ret    
c000bda8:	83 ec 0c             	sub    esp,0xc
c000bdab:	50                   	push   eax
c000bdac:	e8 86 96 00 00       	call   c0015437 <HalEndOfInterrupt(int)>
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	eb b4                	jmp    c000bd6a <int_handler+0x2a>
c000bdb6:	83 ec 08             	sub    esp,0x8
c000bdb9:	52                   	push   edx
c000bdba:	57                   	push   edi
c000bdbb:	ff d0                	call   eax
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	83 c4 0c             	add    esp,0xc
c000bdc3:	5b                   	pop    ebx
c000bdc4:	5e                   	pop    esi
c000bdc5:	5f                   	pop    edi
c000bdc6:	5d                   	pop    ebp
c000bdc7:	c3                   	ret    

c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bdc8:	56                   	push   esi
c000bdc9:	31 c0                	xor    eax,eax
c000bdcb:	53                   	push   ebx
c000bdcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bdd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bdda:	c1 e2 04             	shl    edx,0x4
c000bddd:	83 bc 82 a0 15 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdea60],0x0
c000bde5:	74 15                	je     c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bde7:	40                   	inc    eax
c000bde8:	83 f8 04             	cmp    eax,0x4
c000bdeb:	75 f0                	jne    c000bddd <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bded:	c7 44 24 0c e4 da 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dae4
c000bdf5:	5b                   	pop    ebx
c000bdf6:	5e                   	pop    esi
c000bdf7:	e9 3b 43 00 00       	jmp    c0010137 <KePanic(char const*)>
c000bdfc:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bdff:	89 1c 85 a0 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea60],ebx
c000be06:	89 34 85 a0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa60],esi
c000be0d:	5b                   	pop    ebx
c000be0e:	5e                   	pop    esi
c000be0f:	c3                   	ret    

c000be10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be10:	57                   	push   edi
c000be11:	8b 15 98 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020498
c000be17:	56                   	push   esi
c000be18:	53                   	push   ebx
c000be19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be21:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000be28:	74 5b                	je     c000be85 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000be2a:	89 c7                	mov    edi,eax
c000be2c:	84 c0                	test   al,al
c000be2e:	74 24                	je     c000be54 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000be30:	83 fe 0f             	cmp    esi,0xf
c000be33:	0f 8f d9 00 00 00    	jg     c000bf12 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000be39:	8a 86 c0 f1 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0e40]
c000be3f:	25 ff 00 00 00       	and    eax,0xff
c000be44:	66 8b bc 00 40 2d 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd2c0]
c000be4c:	89 c6                	mov    esi,eax
c000be4e:	66 d1 ef             	shr    di,1
c000be51:	83 e7 01             	and    edi,0x1
c000be54:	83 ec 08             	sub    esp,0x8
c000be57:	a1 40 41 02 c0       	mov    eax,ds:0xc0024140
c000be5c:	31 db                	xor    ebx,ebx
c000be5e:	50                   	push   eax
c000be5f:	68 f1 da 01 c0       	push   0xc001daf1
c000be64:	e8 eb e5 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000be69:	83 c4 10             	add    esp,0x10
c000be6c:	a1 40 41 02 c0       	mov    eax,ds:0xc0024140
c000be71:	85 c0                	test   eax,eax
c000be73:	7f 51                	jg     c000bec6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000be75:	83 ec 0c             	sub    esp,0xc
c000be78:	68 08 db 01 c0       	push   0xc001db08
c000be7d:	e8 b5 42 00 00       	call   c0010137 <KePanic(char const*)>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	8d 4e 20             	lea    ecx,[esi+0x20]
c000be88:	31 d2                	xor    edx,edx
c000be8a:	89 c8                	mov    eax,ecx
c000be8c:	c1 e0 04             	shl    eax,0x4
c000be8f:	8b 9c 90 a0 15 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdea60]
c000be96:	85 db                	test   ebx,ebx
c000be98:	0f 84 8b 00 00 00    	je     c000bf29 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000be9e:	42                   	inc    edx
c000be9f:	83 fa 04             	cmp    edx,0x4
c000bea2:	75 eb                	jne    c000be8f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bea4:	83 ec 0c             	sub    esp,0xc
c000bea7:	68 5c db 01 c0       	push   0xc001db5c
c000beac:	e8 86 42 00 00       	call   c0010137 <KePanic(char const*)>
c000beb1:	83 c4 10             	add    esp,0x10
c000beb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	5f                   	pop    edi
c000bebc:	c3                   	ret    
c000bebd:	43                   	inc    ebx
c000bebe:	39 1d 40 41 02 c0    	cmp    DWORD PTR ds:0xc0024140,ebx
c000bec4:	7e af                	jle    c000be75 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bec6:	83 ec 08             	sub    esp,0x8
c000bec9:	8b 04 9d 60 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbea0]
c000bed0:	56                   	push   esi
c000bed1:	50                   	push   eax
c000bed2:	e8 4d f2 00 00       	call   c001b124 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bed7:	83 c4 10             	add    esp,0x10
c000beda:	84 c0                	test   al,al
c000bedc:	74 df                	je     c000bebd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bede:	81 e7 ff 00 00 00    	and    edi,0xff
c000bee4:	50                   	push   eax
c000bee5:	8d 46 20             	lea    eax,[esi+0x20]
c000bee8:	57                   	push   edi
c000bee9:	25 ff 00 00 00       	and    eax,0xff
c000beee:	6a 00                	push   0x0
c000bef0:	50                   	push   eax
c000bef1:	89 f0                	mov    eax,esi
c000bef3:	6a 00                	push   0x0
c000bef5:	25 ff 00 00 00       	and    eax,0xff
c000befa:	6a 00                	push   0x0
c000befc:	50                   	push   eax
c000befd:	8b 04 9d 60 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbea0]
c000bf04:	50                   	push   eax
c000bf05:	e8 94 f3 00 00       	call   c001b29e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf0a:	83 c4 20             	add    esp,0x20
c000bf0d:	e9 73 ff ff ff       	jmp    c000be85 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf12:	83 ec 0c             	sub    esp,0xc
c000bf15:	31 ff                	xor    edi,edi
c000bf17:	68 24 db 01 c0       	push   0xc001db24
c000bf1c:	e8 16 42 00 00       	call   c0010137 <KePanic(char const*)>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	e9 2b ff ff ff       	jmp    c000be54 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf29:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bf2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf30:	89 14 85 a0 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea60],edx
c000bf37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3b:	5b                   	pop    ebx
c000bf3c:	89 14 85 a0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa60],edx
c000bf43:	89 f0                	mov    eax,esi
c000bf45:	5e                   	pop    esi
c000bf46:	5f                   	pop    edi
c000bf47:	c3                   	ret    

c000bf48 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bf48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf4c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf50:	c1 e0 04             	shl    eax,0x4
c000bf53:	8d 50 10             	lea    edx,[eax+0x10]
c000bf56:	39 88 a0 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdea60],ecx
c000bf5c:	74 08                	je     c000bf66 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bf5e:	83 c0 04             	add    eax,0x4
c000bf61:	39 d0                	cmp    eax,edx
c000bf63:	75 f1                	jne    c000bf56 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bf65:	c3                   	ret    
c000bf66:	c7 80 a0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea60],0x0
c000bf70:	c7 80 a0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa60],0x0
c000bf7a:	eb e2                	jmp    c000bf5e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000bf7c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bf7c:	53                   	push   ebx
c000bf7d:	83 ec 08             	sub    esp,0x8
c000bf80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf84:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000bf89:	74 0e                	je     c000bf99 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000bf8b:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000bf90:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000bf97:	75 37                	jne    c000bfd0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000bf99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf9d:	83 c0 20             	add    eax,0x20
c000bfa0:	c1 e0 04             	shl    eax,0x4
c000bfa3:	8d 50 10             	lea    edx,[eax+0x10]
c000bfa6:	39 98 a0 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdea60],ebx
c000bfac:	74 0c                	je     c000bfba <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000bfae:	83 c0 04             	add    eax,0x4
c000bfb1:	39 d0                	cmp    eax,edx
c000bfb3:	75 f1                	jne    c000bfa6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000bfb5:	83 c4 08             	add    esp,0x8
c000bfb8:	5b                   	pop    ebx
c000bfb9:	c3                   	ret    
c000bfba:	c7 80 a0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea60],0x0
c000bfc4:	c7 80 a0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa60],0x0
c000bfce:	eb de                	jmp    c000bfae <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000bfd0:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000bfd5:	7f 12                	jg     c000bfe9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000bfd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfdb:	31 c0                	xor    eax,eax
c000bfdd:	8a 81 c0 f1 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0e40]
c000bfe3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfe7:	eb b0                	jmp    c000bf99 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000bfe9:	83 ec 0c             	sub    esp,0xc
c000bfec:	68 15 db 01 c0       	push   0xc001db15
c000bff1:	e8 41 41 00 00       	call   c0010137 <KePanic(char const*)>
c000bff6:	83 c4 10             	add    esp,0x10
c000bff9:	eb 9e                	jmp    c000bf99 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000bffb <setupINTS()>:
c000bffb:	31 c0                	xor    eax,eax
c000bffd:	c7 80 a0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea60],0x0
c000c007:	c7 80 a0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa60],0x0
c000c011:	c7 80 a4 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea5c],0x0
c000c01b:	c7 80 a4 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa5c],0x0
c000c025:	c7 80 a8 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea58],0x0
c000c02f:	c7 80 a8 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa58],0x0
c000c039:	c7 80 ac 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea54],0x0
c000c043:	c7 80 ac 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa54],0x0
c000c04d:	83 c0 10             	add    eax,0x10
c000c050:	3d 00 10 00 00       	cmp    eax,0x1000
c000c055:	75 a6                	jne    c000bffd <setupINTS()+0x2>
c000c057:	c3                   	ret    

c000c058 <convertLegacyIRQNumber(int)>:
c000c058:	83 ec 0c             	sub    esp,0xc
c000c05b:	8b 15 98 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020498
c000c061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c065:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c06c:	74 0f                	je     c000c07d <convertLegacyIRQNumber(int)+0x25>
c000c06e:	83 f8 0f             	cmp    eax,0xf
c000c071:	7f 0e                	jg     c000c081 <convertLegacyIRQNumber(int)+0x29>
c000c073:	31 c9                	xor    ecx,ecx
c000c075:	8a 88 c0 f1 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0e40]
c000c07b:	89 c8                	mov    eax,ecx
c000c07d:	83 c4 0c             	add    esp,0xc
c000c080:	c3                   	ret    
c000c081:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c085:	83 ec 0c             	sub    esp,0xc
c000c088:	68 24 db 01 c0       	push   0xc001db24
c000c08d:	e8 a5 40 00 00       	call   c0010137 <KePanic(char const*)>
c000c092:	83 c4 10             	add    esp,0x10
c000c095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c099:	83 c4 0c             	add    esp,0xc
c000c09c:	c3                   	ret    
c000c09d:	90                   	nop

c000c09e <startGUI(void*)>:
c000c09e:	55                   	push   ebp
c000c09f:	89 e5                	mov    ebp,esp
c000c0a1:	53                   	push   ebx
c000c0a2:	83 ec 04             	sub    esp,0x4
c000c0a5:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c0aa:	48                   	dec    eax
c000c0ab:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c0b0:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c0b5:	85 c0                	test   eax,eax
c000c0b7:	75 01                	jne    c000c0ba <startGUI(void*)+0x1c>
c000c0b9:	fb                   	sti    
c000c0ba:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c000c0c0:	83 ec 08             	sub    esp,0x8
c000c0c3:	6a 01                	push   0x1
c000c0c5:	68 81 db 01 c0       	push   0xc001db81
c000c0ca:	e8 87 68 00 00       	call   c0012956 <Thr::loadDLL(char const*, bool)>
c000c0cf:	83 c4 10             	add    esp,0x10
c000c0d2:	83 ec 08             	sub    esp,0x8
c000c0d5:	53                   	push   ebx
c000c0d6:	50                   	push   eax
c000c0d7:	e8 ab 6a 00 00       	call   c0012b87 <Thr::executeDLL(unsigned long, void*)>
c000c0dc:	83 c4 10             	add    esp,0x10
c000c0df:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c000c0e5:	83 ec 08             	sub    esp,0x8
c000c0e8:	6a 01                	push   0x1
c000c0ea:	68 9b db 01 c0       	push   0xc001db9b
c000c0ef:	e8 62 68 00 00       	call   c0012956 <Thr::loadDLL(char const*, bool)>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	83 ec 08             	sub    esp,0x8
c000c0fa:	53                   	push   ebx
c000c0fb:	50                   	push   eax
c000c0fc:	e8 86 6a 00 00       	call   c0012b87 <Thr::executeDLL(unsigned long, void*)>
c000c101:	83 c4 10             	add    esp,0x10
c000c104:	90                   	nop
c000c105:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c108:	c9                   	leave  
c000c109:	c3                   	ret    

c000c10a <startGUIVESA(void*)>:
c000c10a:	55                   	push   ebp
c000c10b:	89 e5                	mov    ebp,esp
c000c10d:	53                   	push   ebx
c000c10e:	83 ec 04             	sub    esp,0x4
c000c111:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c116:	48                   	dec    eax
c000c117:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c11c:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c121:	85 c0                	test   eax,eax
c000c123:	75 01                	jne    c000c126 <startGUIVESA(void*)+0x1c>
c000c125:	fb                   	sti    
c000c126:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c000c12c:	83 ec 08             	sub    esp,0x8
c000c12f:	6a 01                	push   0x1
c000c131:	68 b9 db 01 c0       	push   0xc001dbb9
c000c136:	e8 1b 68 00 00       	call   c0012956 <Thr::loadDLL(char const*, bool)>
c000c13b:	83 c4 10             	add    esp,0x10
c000c13e:	83 ec 08             	sub    esp,0x8
c000c141:	53                   	push   ebx
c000c142:	50                   	push   eax
c000c143:	e8 3f 6a 00 00       	call   c0012b87 <Thr::executeDLL(unsigned long, void*)>
c000c148:	83 c4 10             	add    esp,0x10
c000c14b:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c000c151:	83 ec 08             	sub    esp,0x8
c000c154:	6a 01                	push   0x1
c000c156:	68 9b db 01 c0       	push   0xc001db9b
c000c15b:	e8 f6 67 00 00       	call   c0012956 <Thr::loadDLL(char const*, bool)>
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	83 ec 08             	sub    esp,0x8
c000c166:	53                   	push   ebx
c000c167:	50                   	push   eax
c000c168:	e8 1a 6a 00 00       	call   c0012b87 <Thr::executeDLL(unsigned long, void*)>
c000c16d:	83 c4 10             	add    esp,0x10
c000c170:	90                   	nop
c000c171:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c174:	c9                   	leave  
c000c175:	c3                   	ret    

c000c176 <sendKeyToTerminal(unsigned char)>:
c000c176:	55                   	push   ebp
c000c177:	89 e5                	mov    ebp,esp
c000c179:	83 ec 28             	sub    esp,0x28
c000c17c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c17f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c182:	8b 15 e4 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204e4
c000c188:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c18b:	25 ff 00 00 00       	and    eax,0xff
c000c190:	83 ec 08             	sub    esp,0x8
c000c193:	50                   	push   eax
c000c194:	52                   	push   edx
c000c195:	e8 ac c8 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c1a1:	0f 85 8f 00 00 00    	jne    c000c236 <sendKeyToTerminal(unsigned char)+0xc0>
c000c1a7:	fa                   	cli    
c000c1a8:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c1ad:	40                   	inc    eax
c000c1ae:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c1b3:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c000c1b8:	40                   	inc    eax
c000c1b9:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c000c1be:	a1 a0 25 02 c0       	mov    eax,ds:0xc00225a0
c000c1c3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c1c6:	c7 05 a0 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00225a0,0x0
c000c1d0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c1d4:	74 1f                	je     c000c1f5 <sendKeyToTerminal(unsigned char)+0x7f>
c000c1d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c1d9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c1dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c1df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c1e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c1e5:	83 ec 0c             	sub    esp,0xc
c000c1e8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1eb:	e8 1c 76 00 00       	call   c001380c <unblockTask(ThreadControlBlock*)>
c000c1f0:	83 c4 10             	add    esp,0x10
c000c1f3:	eb db                	jmp    c000c1d0 <sendKeyToTerminal(unsigned char)+0x5a>
c000c1f5:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c000c1fa:	48                   	dec    eax
c000c1fb:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c000c200:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c000c205:	85 c0                	test   eax,eax
c000c207:	75 18                	jne    c000c221 <sendKeyToTerminal(unsigned char)+0xab>
c000c209:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c000c20e:	85 c0                	test   eax,eax
c000c210:	74 0f                	je     c000c221 <sendKeyToTerminal(unsigned char)+0xab>
c000c212:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c000c21c:	e8 27 71 00 00       	call   c0013348 <schedule()>
c000c221:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c226:	48                   	dec    eax
c000c227:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c22c:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c231:	85 c0                	test   eax,eax
c000c233:	75 01                	jne    c000c236 <sendKeyToTerminal(unsigned char)+0xc0>
c000c235:	fb                   	sti    
c000c236:	90                   	nop
c000c237:	c9                   	leave  
c000c238:	c3                   	ret    

c000c239 <sendKeyboardToken(KeyboardToken)>:
c000c239:	55                   	push   ebp
c000c23a:	89 e5                	mov    ebp,esp
c000c23c:	83 ec 18             	sub    esp,0x18
c000c23f:	e8 43 3f 00 00       	call   c0010187 <Krnl::userIOReceived()>
c000c244:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c24a:	25 ff ff 00 00       	and    eax,0xffff
c000c24f:	83 f2 01             	xor    edx,0x1
c000c252:	88 90 c0 25 02 c0    	mov    BYTE PTR [eax-0x3ffdda40],dl
c000c258:	a1 a8 25 02 c0       	mov    eax,ds:0xc00225a8
c000c25d:	85 c0                	test   eax,eax
c000c25f:	74 24                	je     c000c285 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c261:	8b 0d a8 25 02 c0    	mov    ecx,DWORD PTR ds:0xc00225a8
c000c267:	83 ec 04             	sub    esp,0x4
c000c26a:	68 c0 25 02 c0       	push   0xc00225c0
c000c26f:	83 ec 08             	sub    esp,0x8
c000c272:	89 e2                	mov    edx,esp
c000c274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c277:	89 02                	mov    DWORD PTR [edx],eax
c000c279:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c27c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c280:	ff d1                	call   ecx
c000c282:	83 c4 10             	add    esp,0x10
c000c285:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c289:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c28c:	a0 c8 29 02 c0       	mov    al,ds:0xc00229c8
c000c291:	38 c2                	cmp    dl,al
c000c293:	74 1e                	je     c000c2b3 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c298:	a2 c8 29 02 c0       	mov    ds:0xc00229c8,al
c000c29d:	a0 c8 29 02 c0       	mov    al,ds:0xc00229c8
c000c2a2:	25 ff 00 00 00       	and    eax,0xff
c000c2a7:	83 ec 0c             	sub    esp,0xc
c000c2aa:	50                   	push   eax
c000c2ab:	e8 e8 be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c2b0:	83 c4 10             	add    esp,0x10
c000c2b3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c2b6:	84 c0                	test   al,al
c000c2b8:	0f 84 ae 00 00 00    	je     c000c36c <sendKeyboardToken(KeyboardToken)+0x133>
c000c2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c1:	66 3d 10 03          	cmp    ax,0x310
c000c2c5:	75 06                	jne    c000c2cd <sendKeyboardToken(KeyboardToken)+0x94>
c000c2c7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c2cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2d0:	66 3d 11 03          	cmp    ax,0x311
c000c2d4:	75 06                	jne    c000c2dc <sendKeyboardToken(KeyboardToken)+0xa3>
c000c2d6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	66 3d 12 03          	cmp    ax,0x312
c000c2e3:	75 06                	jne    c000c2eb <sendKeyboardToken(KeyboardToken)+0xb2>
c000c2e5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c2eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2ee:	66 3d 13 03          	cmp    ax,0x313
c000c2f2:	75 06                	jne    c000c2fa <sendKeyboardToken(KeyboardToken)+0xc1>
c000c2f4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2fd:	66 3d 14 03          	cmp    ax,0x314
c000c301:	75 06                	jne    c000c309 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c303:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c30c:	66 3d 15 03          	cmp    ax,0x315
c000c310:	75 06                	jne    c000c318 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c312:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c31b:	66 3d 16 03          	cmp    ax,0x316
c000c31f:	75 06                	jne    c000c327 <sendKeyboardToken(KeyboardToken)+0xee>
c000c321:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c32a:	66 3d 17 03          	cmp    ax,0x317
c000c32e:	75 06                	jne    c000c336 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c330:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c339:	66 3d 18 03          	cmp    ax,0x318
c000c33d:	75 06                	jne    c000c345 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c33f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c348:	66 3d 19 03          	cmp    ax,0x319
c000c34c:	75 06                	jne    c000c354 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c34e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c357:	66 3d 1a 03          	cmp    ax,0x31a
c000c35b:	0f 85 c9 00 00 00    	jne    c000c42a <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c361:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c367:	e9 be 00 00 00       	jmp    c000c42a <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c36f:	66 3d 10 03          	cmp    ax,0x310
c000c373:	75 0a                	jne    c000c37f <sendKeyboardToken(KeyboardToken)+0x146>
c000c375:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c37b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c382:	66 3d 11 03          	cmp    ax,0x311
c000c386:	75 0a                	jne    c000c392 <sendKeyboardToken(KeyboardToken)+0x159>
c000c388:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c38e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c395:	66 3d 12 03          	cmp    ax,0x312
c000c399:	75 0a                	jne    c000c3a5 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c39b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c3a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a8:	66 3d 13 03          	cmp    ax,0x313
c000c3ac:	75 0a                	jne    c000c3b8 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c3ae:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c3b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3bb:	66 3d 14 03          	cmp    ax,0x314
c000c3bf:	75 0a                	jne    c000c3cb <sendKeyboardToken(KeyboardToken)+0x192>
c000c3c1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c3c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ce:	66 3d 15 03          	cmp    ax,0x315
c000c3d2:	75 0a                	jne    c000c3de <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c3d4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e1:	66 3d 16 03          	cmp    ax,0x316
c000c3e5:	75 0a                	jne    c000c3f1 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c3e7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c3ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f4:	66 3d 17 03          	cmp    ax,0x317
c000c3f8:	75 0a                	jne    c000c404 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c3fa:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c400:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c407:	66 3d 18 03          	cmp    ax,0x318
c000c40b:	75 0a                	jne    c000c417 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c40d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c413:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41a:	66 3d 19 03          	cmp    ax,0x319
c000c41e:	75 0a                	jne    c000c42a <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c420:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c426:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42d:	66 3d 00 02          	cmp    ax,0x200
c000c431:	75 2c                	jne    c000c45f <sendKeyboardToken(KeyboardToken)+0x226>
c000c433:	a0 c0 29 02 c0       	mov    al,ds:0xc00229c0
c000c438:	83 f0 01             	xor    eax,0x1
c000c43b:	84 c0                	test   al,al
c000c43d:	74 20                	je     c000c45f <sendKeyboardToken(KeyboardToken)+0x226>
c000c43f:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c000c444:	6a 01                	push   0x1
c000c446:	6a 00                	push   0x0
c000c448:	68 9e c0 00 c0       	push   0xc000c09e
c000c44d:	50                   	push   eax
c000c44e:	e8 d5 6c 00 00       	call   c0013128 <Process::createThread(void (*)(void*), void*, int)>
c000c453:	83 c4 10             	add    esp,0x10
c000c456:	c6 05 c0 29 02 c0 01 	mov    BYTE PTR ds:0xc00229c0,0x1
c000c45d:	eb 33                	jmp    c000c492 <sendKeyboardToken(KeyboardToken)+0x259>
c000c45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c462:	66 3d 01 02          	cmp    ax,0x201
c000c466:	75 2a                	jne    c000c492 <sendKeyboardToken(KeyboardToken)+0x259>
c000c468:	a0 c0 29 02 c0       	mov    al,ds:0xc00229c0
c000c46d:	83 f0 01             	xor    eax,0x1
c000c470:	84 c0                	test   al,al
c000c472:	74 1e                	je     c000c492 <sendKeyboardToken(KeyboardToken)+0x259>
c000c474:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c000c479:	6a 01                	push   0x1
c000c47b:	6a 00                	push   0x0
c000c47d:	68 0a c1 00 c0       	push   0xc000c10a
c000c482:	50                   	push   eax
c000c483:	e8 a0 6c 00 00       	call   c0013128 <Process::createThread(void (*)(void*), void*, int)>
c000c488:	83 c4 10             	add    esp,0x10
c000c48b:	c6 05 c0 29 02 c0 01 	mov    BYTE PTR ds:0xc00229c0,0x1
c000c492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c495:	66 3d 1d 03          	cmp    ax,0x31d
c000c499:	75 06                	jne    c000c4a1 <sendKeyboardToken(KeyboardToken)+0x268>
c000c49b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c4a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a4:	66 3d 1c 03          	cmp    ax,0x31c
c000c4a8:	75 06                	jne    c000c4b0 <sendKeyboardToken(KeyboardToken)+0x277>
c000c4aa:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c4b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b3:	66 3d 1b 03          	cmp    ax,0x31b
c000c4b7:	75 06                	jne    c000c4bf <sendKeyboardToken(KeyboardToken)+0x286>
c000c4b9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c4bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c2:	66 3d 1e 03          	cmp    ax,0x31e
c000c4c6:	75 06                	jne    c000c4ce <sendKeyboardToken(KeyboardToken)+0x295>
c000c4c8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c4ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d1:	66 3d 1f 03          	cmp    ax,0x31f
c000c4d5:	75 06                	jne    c000c4dd <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c4d7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c4dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e0:	66 3d 1a 03          	cmp    ax,0x31a
c000c4e4:	75 06                	jne    c000c4ec <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c4e6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c4ec:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c4f0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c4f3:	83 f0 01             	xor    eax,0x1
c000c4f6:	84 c0                	test   al,al
c000c4f8:	74 7b                	je     c000c575 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c4fa:	a0 c1 26 02 c0       	mov    al,ds:0xc00226c1
c000c4ff:	84 c0                	test   al,al
c000c501:	74 43                	je     c000c546 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c503:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c507:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c50b:	74 2d                	je     c000c53a <sendKeyboardToken(KeyboardToken)+0x301>
c000c50d:	8b 15 c4 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229c4
c000c513:	89 d0                	mov    eax,edx
c000c515:	c1 e0 02             	shl    eax,0x2
c000c518:	01 d0                	add    eax,edx
c000c51a:	01 c0                	add    eax,eax
c000c51c:	a3 c4 29 02 c0       	mov    ds:0xc00229c4,eax
c000c521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c524:	25 ff ff 00 00       	and    eax,0xffff
c000c529:	8d 50 d0             	lea    edx,[eax-0x30]
c000c52c:	a1 c4 29 02 c0       	mov    eax,ds:0xc00229c4
c000c531:	01 d0                	add    eax,edx
c000c533:	a3 c4 29 02 c0       	mov    ds:0xc00229c4,eax
c000c538:	eb 71                	jmp    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c53a:	c7 05 c4 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229c4,0x0
c000c544:	eb 65                	jmp    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c546:	a1 c4 29 02 c0       	mov    eax,ds:0xc00229c4
c000c54b:	85 c0                	test   eax,eax
c000c54d:	74 1a                	je     c000c569 <sendKeyboardToken(KeyboardToken)+0x330>
c000c54f:	a1 c4 29 02 c0       	mov    eax,ds:0xc00229c4
c000c554:	25 ff 00 00 00       	and    eax,0xff
c000c559:	83 ec 0c             	sub    esp,0xc
c000c55c:	50                   	push   eax
c000c55d:	e8 14 fc ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c562:	83 c4 10             	add    esp,0x10
c000c565:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c569:	c7 05 c4 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229c4,0x0
c000c573:	eb 36                	jmp    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c578:	66 3d 01 01          	cmp    ax,0x101
c000c57c:	75 2d                	jne    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c57e:	a1 c4 29 02 c0       	mov    eax,ds:0xc00229c4
c000c583:	85 c0                	test   eax,eax
c000c585:	74 1a                	je     c000c5a1 <sendKeyboardToken(KeyboardToken)+0x368>
c000c587:	a1 c4 29 02 c0       	mov    eax,ds:0xc00229c4
c000c58c:	25 ff 00 00 00       	and    eax,0xff
c000c591:	83 ec 0c             	sub    esp,0xc
c000c594:	50                   	push   eax
c000c595:	e8 dc fb ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c59a:	83 c4 10             	add    esp,0x10
c000c59d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5a1:	c7 05 c4 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229c4,0x0
c000c5ab:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c5ae:	83 f0 01             	xor    eax,0x1
c000c5b1:	84 c0                	test   al,al
c000c5b3:	74 4e                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5b5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c5b8:	83 f0 01             	xor    eax,0x1
c000c5bb:	84 c0                	test   al,al
c000c5bd:	74 44                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5bf:	a0 c0 26 02 c0       	mov    al,ds:0xc00226c0
c000c5c4:	83 f0 01             	xor    eax,0x1
c000c5c7:	84 c0                	test   al,al
c000c5c9:	74 38                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ce:	66 83 f8 1f          	cmp    ax,0x1f
c000c5d2:	76 09                	jbe    c000c5dd <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c5d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d7:	66 83 f8 7e          	cmp    ax,0x7e
c000c5db:	76 12                	jbe    c000c5ef <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e0:	66 83 f8 0a          	cmp    ax,0xa
c000c5e4:	74 09                	je     c000c5ef <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e9:	66 83 f8 08          	cmp    ax,0x8
c000c5ed:	75 14                	jne    c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f2:	25 ff 00 00 00       	and    eax,0xff
c000c5f7:	83 ec 0c             	sub    esp,0xc
c000c5fa:	50                   	push   eax
c000c5fb:	e8 76 fb ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c600:	83 c4 10             	add    esp,0x10
c000c603:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c606:	83 f0 01             	xor    eax,0x1
c000c609:	84 c0                	test   al,al
c000c60b:	0f 84 ce 00 00 00    	je     c000c6df <sendKeyboardToken(KeyboardToken)+0x4a6>
c000c611:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c614:	83 f0 01             	xor    eax,0x1
c000c617:	84 c0                	test   al,al
c000c619:	0f 84 c0 00 00 00    	je     c000c6df <sendKeyboardToken(KeyboardToken)+0x4a6>
c000c61f:	a0 c0 26 02 c0       	mov    al,ds:0xc00226c0
c000c624:	84 c0                	test   al,al
c000c626:	0f 84 b3 00 00 00    	je     c000c6df <sendKeyboardToken(KeyboardToken)+0x4a6>
c000c62c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62f:	66 83 f8 3f          	cmp    ax,0x3f
c000c633:	0f 86 a6 00 00 00    	jbe    c000c6df <sendKeyboardToken(KeyboardToken)+0x4a6>
c000c639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c63c:	66 83 f8 7f          	cmp    ax,0x7f
c000c640:	0f 87 99 00 00 00    	ja     c000c6df <sendKeyboardToken(KeyboardToken)+0x4a6>
c000c646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c649:	66 83 f8 63          	cmp    ax,0x63
c000c64d:	75 64                	jne    c000c6b3 <sendKeyboardToken(KeyboardToken)+0x47a>
c000c64f:	a0 c0 26 02 c0       	mov    al,ds:0xc00226c0
c000c654:	84 c0                	test   al,al
c000c656:	74 5b                	je     c000c6b3 <sendKeyboardToken(KeyboardToken)+0x47a>
c000c658:	83 ec 0c             	sub    esp,0xc
c000c65b:	6a 43                	push   0x43
c000c65d:	e8 14 fb ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c662:	83 c4 10             	add    esp,0x10
c000c665:	83 ec 0c             	sub    esp,0xc
c000c668:	6a 54                	push   0x54
c000c66a:	e8 07 fb ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c66f:	83 c4 10             	add    esp,0x10
c000c672:	83 ec 0c             	sub    esp,0xc
c000c675:	6a 52                	push   0x52
c000c677:	e8 fa fa ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	83 ec 0c             	sub    esp,0xc
c000c682:	6a 4c                	push   0x4c
c000c684:	e8 ed fa ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c689:	83 c4 10             	add    esp,0x10
c000c68c:	83 ec 0c             	sub    esp,0xc
c000c68f:	6a 2d                	push   0x2d
c000c691:	e8 e0 fa ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	83 ec 0c             	sub    esp,0xc
c000c69c:	6a 43                	push   0x43
c000c69e:	e8 d3 fa ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c6a3:	83 c4 10             	add    esp,0x10
c000c6a6:	83 ec 0c             	sub    esp,0xc
c000c6a9:	6a ff                	push   0xffffffff
c000c6ab:	e8 bc 75 00 00       	call   c0013c6c <terminateTask(int)>
c000c6b0:	83 c4 10             	add    esp,0x10
c000c6b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b6:	88 c2                	mov    dl,al
c000c6b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6bb:	66 83 f8 5f          	cmp    ax,0x5f
c000c6bf:	76 04                	jbe    c000c6c5 <sendKeyboardToken(KeyboardToken)+0x48c>
c000c6c1:	b0 20                	mov    al,0x20
c000c6c3:	eb 02                	jmp    c000c6c7 <sendKeyboardToken(KeyboardToken)+0x48e>
c000c6c5:	b0 00                	mov    al,0x0
c000c6c7:	29 c2                	sub    edx,eax
c000c6c9:	88 d0                	mov    al,dl
c000c6cb:	83 e8 40             	sub    eax,0x40
c000c6ce:	25 ff 00 00 00       	and    eax,0xff
c000c6d3:	83 ec 0c             	sub    esp,0xc
c000c6d6:	50                   	push   eax
c000c6d7:	e8 9a fa ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c6dc:	83 c4 10             	add    esp,0x10
c000c6df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e2:	66 3d 00 03          	cmp    ax,0x300
c000c6e6:	75 0f                	jne    c000c6f7 <sendKeyboardToken(KeyboardToken)+0x4be>
c000c6e8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6eb:	83 f0 01             	xor    eax,0x1
c000c6ee:	84 c0                	test   al,al
c000c6f0:	74 05                	je     c000c6f7 <sendKeyboardToken(KeyboardToken)+0x4be>
c000c6f2:	e8 a2 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c6f7:	90                   	nop
c000c6f8:	c9                   	leave  
c000c6f9:	c3                   	ret    

c000c6fa <clearInternalKeybuffer(VgaText*)>:
c000c6fa:	55                   	push   ebp
c000c6fb:	89 e5                	mov    ebp,esp
c000c6fd:	83 ec 08             	sub    esp,0x8
c000c700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c703:	05 b2 00 00 00       	add    eax,0xb2
c000c708:	83 ec 0c             	sub    esp,0xc
c000c70b:	50                   	push   eax
c000c70c:	e8 2f 3e ff ff       	call   c0000540 <strlen>
c000c711:	83 c4 10             	add    esp,0x10
c000c714:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c717:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c71d:	83 ec 04             	sub    esp,0x4
c000c720:	50                   	push   eax
c000c721:	6a 00                	push   0x0
c000c723:	52                   	push   edx
c000c724:	e8 a7 3d ff ff       	call   c00004d0 <memset>
c000c729:	83 c4 10             	add    esp,0x10
c000c72c:	90                   	nop
c000c72d:	c9                   	leave  
c000c72e:	c3                   	ret    

c000c72f <readKeyboard(VgaText*, char*, unsigned long)>:
c000c72f:	55                   	push   ebp
c000c730:	89 e5                	mov    ebp,esp
c000c732:	83 ec 18             	sub    esp,0x18
c000c735:	a1 a8 25 02 c0       	mov    eax,ds:0xc00225a8
c000c73a:	85 c0                	test   eax,eax
c000c73c:	74 2a                	je     c000c768 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c73e:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c744:	8b 0d a8 25 02 c0    	mov    ecx,DWORD PTR ds:0xc00225a8
c000c74a:	83 ec 04             	sub    esp,0x4
c000c74d:	68 c0 25 02 c0       	push   0xc00225c0
c000c752:	83 ec 08             	sub    esp,0x8
c000c755:	89 e2                	mov    edx,esp
c000c757:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c75a:	89 02                	mov    DWORD PTR [edx],eax
c000c75c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c75f:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c763:	ff d1                	call   ecx
c000c765:	83 c4 10             	add    esp,0x10
c000c768:	fb                   	sti    
c000c769:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c770:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c774:	0f 84 a1 00 00 00    	je     c000c81b <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c77a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c77d:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c783:	84 c0                	test   al,al
c000c785:	75 28                	jne    c000c7af <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c787:	fa                   	cli    
c000c788:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c78d:	40                   	inc    eax
c000c78e:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c793:	e8 b0 6b 00 00       	call   c0013348 <schedule()>
c000c798:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c79d:	48                   	dec    eax
c000c79e:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000c7a3:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000c7a8:	85 c0                	test   eax,eax
c000c7aa:	75 ce                	jne    c000c77a <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7ac:	fb                   	sti    
c000c7ad:	eb cb                	jmp    c000c77a <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7b2:	8d 50 01             	lea    edx,[eax+0x1]
c000c7b5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7bb:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7c1:	88 10                	mov    BYTE PTR [eax],dl
c000c7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7c6:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7cc:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c7cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d2:	05 b2 00 00 00       	add    eax,0xb2
c000c7d7:	83 ec 0c             	sub    esp,0xc
c000c7da:	50                   	push   eax
c000c7db:	e8 60 3d ff ff       	call   c0000540 <strlen>
c000c7e0:	83 c4 10             	add    esp,0x10
c000c7e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7e6:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7ec:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c7ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7f2:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7f8:	83 ec 04             	sub    esp,0x4
c000c7fb:	50                   	push   eax
c000c7fc:	51                   	push   ecx
c000c7fd:	52                   	push   edx
c000c7fe:	e8 dd 3b ff ff       	call   c00003e0 <memmove>
c000c803:	83 c4 10             	add    esp,0x10
c000c806:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c809:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c80c:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c810:	0f 85 5a ff ff ff    	jne    c000c770 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c816:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c819:	eb 03                	jmp    c000c81e <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000c81b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c81e:	c9                   	leave  
c000c81f:	c3                   	ret    

c000c820 <Keyboard::Keyboard(char const*)>:
c000c820:	83 ec 0c             	sub    esp,0xc
c000c823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c827:	83 ec 08             	sub    esp,0x8
c000c82a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c82e:	50                   	push   eax
c000c82f:	e8 f8 f1 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000c834:	83 c4 10             	add    esp,0x10
c000c837:	ba dc db 01 c0       	mov    edx,0xc001dbdc
c000c83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c840:	89 10                	mov    DWORD PTR [eax],edx
c000c842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c846:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c850:	c6 05 a4 25 02 c0 01 	mov    BYTE PTR ds:0xc00225a4,0x1
c000c857:	90                   	nop
c000c858:	83 c4 0c             	add    esp,0xc
c000c85b:	c3                   	ret    

c000c85c <Keyboard::~Keyboard()>:
c000c85c:	83 ec 0c             	sub    esp,0xc
c000c85f:	ba dc db 01 c0       	mov    edx,0xc001dbdc
c000c864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c868:	89 10                	mov    DWORD PTR [eax],edx
c000c86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c86e:	83 ec 0c             	sub    esp,0xc
c000c871:	50                   	push   eax
c000c872:	e8 1f ef ff ff       	call   c000b796 <Device::~Device()>
c000c877:	83 c4 10             	add    esp,0x10
c000c87a:	90                   	nop
c000c87b:	83 c4 0c             	add    esp,0xc
c000c87e:	c3                   	ret    
c000c87f:	90                   	nop

c000c880 <Keyboard::~Keyboard()>:
c000c880:	83 ec 0c             	sub    esp,0xc
c000c883:	83 ec 0c             	sub    esp,0xc
c000c886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c88a:	e8 cd ff ff ff       	call   c000c85c <Keyboard::~Keyboard()>
c000c88f:	83 c4 10             	add    esp,0x10
c000c892:	83 ec 08             	sub    esp,0x8
c000c895:	68 5c 01 00 00       	push   0x15c
c000c89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c89e:	e8 bb da ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000c8a3:	83 c4 10             	add    esp,0x10
c000c8a6:	83 c4 0c             	add    esp,0xc
c000c8a9:	c3                   	ret    

c000c8aa <LogicalDisk::close(int, int, void*)>:
c000c8aa:	83 c8 ff             	or     eax,0xffffffff
c000c8ad:	c3                   	ret    

c000c8ae <LogicalDisk::~LogicalDisk()>:
c000c8ae:	83 ec 0c             	sub    esp,0xc
c000c8b1:	ba 54 dc 01 c0       	mov    edx,0xc001dc54
c000c8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ba:	89 10                	mov    DWORD PTR [eax],edx
c000c8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8c0:	83 ec 0c             	sub    esp,0xc
c000c8c3:	50                   	push   eax
c000c8c4:	e8 cd ee ff ff       	call   c000b796 <Device::~Device()>
c000c8c9:	83 c4 10             	add    esp,0x10
c000c8cc:	90                   	nop
c000c8cd:	83 c4 0c             	add    esp,0xc
c000c8d0:	c3                   	ret    
c000c8d1:	90                   	nop

c000c8d2 <LogicalDisk::~LogicalDisk()>:
c000c8d2:	83 ec 0c             	sub    esp,0xc
c000c8d5:	83 ec 0c             	sub    esp,0xc
c000c8d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8dc:	e8 cd ff ff ff       	call   c000c8ae <LogicalDisk::~LogicalDisk()>
c000c8e1:	83 c4 10             	add    esp,0x10
c000c8e4:	83 ec 08             	sub    esp,0x8
c000c8e7:	68 74 01 00 00       	push   0x174
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 69 da ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	83 c4 0c             	add    esp,0xc
c000c8fb:	c3                   	ret    

c000c8fc <LogicalDisk::open(int, int, void*)>:
c000c8fc:	83 ec 18             	sub    esp,0x18
c000c8ff:	68 08 dc 01 c0       	push   0xc001dc08
c000c904:	e8 2e 38 00 00       	call   c0010137 <KePanic(char const*)>
c000c909:	83 c8 ff             	or     eax,0xffffffff
c000c90c:	83 c4 1c             	add    esp,0x1c
c000c90f:	c3                   	ret    

c000c910 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c910:	53                   	push   ebx
c000c911:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c919:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c91d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c923:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c929:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c92f:	77 10                	ja     c000c941 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c931:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c937:	89 d3                	mov    ebx,edx
c000c939:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c93f:	72 05                	jb     c000c946 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c941:	83 c8 ff             	or     eax,0xffffffff
c000c944:	89 c2                	mov    edx,eax
c000c946:	5b                   	pop    ebx
c000c947:	c3                   	ret    

c000c948 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c948:	56                   	push   esi
c000c949:	83 c8 ff             	or     eax,0xffffffff
c000c94c:	53                   	push   ebx
c000c94d:	89 c2                	mov    edx,eax
c000c94f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c953:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c957:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c95b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c961:	77 27                	ja     c000c98a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c963:	89 d8                	mov    eax,ebx
c000c965:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c96b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c971:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c976:	89 c2                	mov    edx,eax
c000c978:	73 10                	jae    c000c98a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c97a:	89 c8                	mov    eax,ecx
c000c97c:	89 da                	mov    edx,ebx
c000c97e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c984:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c98a:	5b                   	pop    ebx
c000c98b:	5e                   	pop    esi
c000c98c:	c3                   	ret    
c000c98d:	90                   	nop

c000c98e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c98e:	83 ec 1c             	sub    esp,0x1c
c000c991:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c995:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c99d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9a5:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b4:	83 ec 08             	sub    esp,0x8
c000c9b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bb:	50                   	push   eax
c000c9bc:	e8 6b f0 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000c9c1:	83 c4 10             	add    esp,0x10
c000c9c4:	ba 54 dc 01 c0       	mov    edx,0xc001dc54
c000c9c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9cd:	89 10                	mov    DWORD PTR [eax],edx
c000c9cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9de:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000c9f3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c9f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9ff:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca05:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca0b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca16:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca1c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca26:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca2a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca34:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca3e:	90                   	nop
c000ca3f:	83 c4 1c             	add    esp,0x1c
c000ca42:	c3                   	ret    
c000ca43:	90                   	nop

c000ca44 <LogicalDisk::assignDriveLetter()>:
c000ca44:	55                   	push   ebp
c000ca45:	57                   	push   edi
c000ca46:	56                   	push   esi
c000ca47:	53                   	push   ebx
c000ca48:	83 ec 14             	sub    esp,0x14
c000ca4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca4f:	8b 3d e0 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229e0
c000ca55:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca5b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca5f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ca65:	8b 3d e4 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229e4
c000ca6b:	3c 01                	cmp    al,0x1
c000ca6d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ca71:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ca75:	19 c0                	sbb    eax,eax
c000ca77:	83 e0 02             	and    eax,0x2
c000ca7a:	83 c0 41             	add    eax,0x41
c000ca7d:	0f be e8             	movsx  ebp,al
c000ca80:	3c 43                	cmp    al,0x43
c000ca82:	75 10                	jne    c000ca94 <LogicalDisk::assignDriveLetter()+0x50>
c000ca84:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ca8b:	75 5d                	jne    c000caea <LogicalDisk::assignDriveLetter()+0xa6>
c000ca8d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ca92:	75 56                	jne    c000caea <LogicalDisk::assignDriveLetter()+0xa6>
c000ca94:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ca97:	ba 01 00 00 00       	mov    edx,0x1
c000ca9c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000caa0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000caa4:	d3 e2                	shl    edx,cl
c000caa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caaa:	89 d7                	mov    edi,edx
c000caac:	89 d6                	mov    esi,edx
c000caae:	c1 ff 1f             	sar    edi,0x1f
c000cab1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cab5:	21 f9                	and    ecx,edi
c000cab7:	09 d1                	or     ecx,edx
c000cab9:	75 2f                	jne    c000caea <LogicalDisk::assignDriveLetter()+0xa6>
c000cabb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cabf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cac3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cac9:	09 f2                	or     edx,esi
c000cacb:	89 15 e0 29 02 c0    	mov    DWORD PTR ds:0xc00229e0,edx
c000cad1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad5:	09 fa                	or     edx,edi
c000cad7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cadb:	89 15 e4 29 02 c0    	mov    DWORD PTR ds:0xc00229e4,edx
c000cae1:	89 1c bd 00 2a 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd600],ebx
c000cae8:	eb 08                	jmp    c000caf2 <LogicalDisk::assignDriveLetter()+0xae>
c000caea:	45                   	inc    ebp
c000caeb:	40                   	inc    eax
c000caec:	3c 5b                	cmp    al,0x5b
c000caee:	75 90                	jne    c000ca80 <LogicalDisk::assignDriveLetter()+0x3c>
c000caf0:	31 c0                	xor    eax,eax
c000caf2:	83 c4 14             	add    esp,0x14
c000caf5:	5b                   	pop    ebx
c000caf6:	5e                   	pop    esi
c000caf7:	5f                   	pop    edi
c000caf8:	5d                   	pop    ebp
c000caf9:	c3                   	ret    

c000cafa <LogicalDisk::mount()>:
c000cafa:	56                   	push   esi
c000cafb:	53                   	push   ebx
c000cafc:	53                   	push   ebx
c000cafd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb01:	8b 1d 94 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020594
c000cb07:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb11:	85 db                	test   ebx,ebx
c000cb13:	74 27                	je     c000cb3c <LogicalDisk::mount()+0x42>
c000cb15:	51                   	push   ecx
c000cb16:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb1d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb1f:	83 e8 41             	sub    eax,0x41
c000cb22:	50                   	push   eax
c000cb23:	56                   	push   esi
c000cb24:	53                   	push   ebx
c000cb25:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb28:	83 c4 10             	add    esp,0x10
c000cb2b:	84 c0                	test   al,al
c000cb2d:	74 08                	je     c000cb37 <LogicalDisk::mount()+0x3d>
c000cb2f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb35:	eb 07                	jmp    c000cb3e <LogicalDisk::mount()+0x44>
c000cb37:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb3a:	eb d5                	jmp    c000cb11 <LogicalDisk::mount()+0x17>
c000cb3c:	31 c0                	xor    eax,eax
c000cb3e:	5a                   	pop    edx
c000cb3f:	5b                   	pop    ebx
c000cb40:	5e                   	pop    esi
c000cb41:	c3                   	ret    

c000cb42 <LogicalDisk::unmount()>:
c000cb42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb46:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb50:	c3                   	ret    
c000cb51:	90                   	nop

c000cb52 <LogicalDisk::eject()>:
c000cb52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb56:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cb5c:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb62:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cb65:	90                   	nop

c000cb66 <LogicalDisk::unassignDriveLetter()>:
c000cb66:	57                   	push   edi
c000cb67:	56                   	push   esi
c000cb68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb6c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cb73:	84 c9                	test   cl,cl
c000cb75:	75 0f                	jne    c000cb86 <LogicalDisk::unassignDriveLetter()+0x20>
c000cb77:	c7 44 24 0c 2c dc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dc2c
c000cb7f:	5e                   	pop    esi
c000cb80:	5f                   	pop    edi
c000cb81:	e9 b1 35 00 00       	jmp    c0010137 <KePanic(char const*)>
c000cb86:	83 e9 41             	sub    ecx,0x41
c000cb89:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cb90:	b8 01 00 00 00       	mov    eax,0x1
c000cb95:	c7 04 8d 00 2a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd600],0x0
c000cba0:	d3 e0                	shl    eax,cl
c000cba2:	89 c7                	mov    edi,eax
c000cba4:	f7 d0                	not    eax
c000cba6:	c1 ff 1f             	sar    edi,0x1f
c000cba9:	21 05 e0 29 02 c0    	and    DWORD PTR ds:0xc00229e0,eax
c000cbaf:	89 fe                	mov    esi,edi
c000cbb1:	f7 d6                	not    esi
c000cbb3:	21 35 e4 29 02 c0    	and    DWORD PTR ds:0xc00229e4,esi
c000cbb9:	5e                   	pop    esi
c000cbba:	5f                   	pop    edi
c000cbbb:	c3                   	ret    

c000cbbc <LogicalDisk::read(unsigned long long, int, void*)>:
c000cbbc:	57                   	push   edi
c000cbbd:	56                   	push   esi
c000cbbe:	53                   	push   ebx
c000cbbf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbc7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cbcf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cbd5:	77 41                	ja     c000cc18 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cbd7:	99                   	cdq    
c000cbd8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cbde:	01 c8                	add    eax,ecx
c000cbe0:	11 da                	adc    edx,ebx
c000cbe2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cbe8:	19 d7                	sbb    edi,edx
c000cbea:	72 33                	jb     c000cc1f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cbec:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cbf2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cbf8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cbfc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc00:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc06:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc10:	5b                   	pop    ebx
c000cc11:	5e                   	pop    esi
c000cc12:	5f                   	pop    edi
c000cc13:	e9 4e 0a 00 00       	jmp    c000d666 <VCache::read(unsigned long long, int, void*)>
c000cc18:	b8 05 00 00 00       	mov    eax,0x5
c000cc1d:	eb 05                	jmp    c000cc24 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc1f:	b8 07 00 00 00       	mov    eax,0x7
c000cc24:	5b                   	pop    ebx
c000cc25:	5e                   	pop    esi
c000cc26:	5f                   	pop    edi
c000cc27:	c3                   	ret    

c000cc28 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc28:	57                   	push   edi
c000cc29:	56                   	push   esi
c000cc2a:	53                   	push   ebx
c000cc2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc3b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc41:	77 41                	ja     c000cc84 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc43:	99                   	cdq    
c000cc44:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc4a:	01 c8                	add    eax,ecx
c000cc4c:	11 da                	adc    edx,ebx
c000cc4e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc54:	19 d7                	sbb    edi,edx
c000cc56:	72 33                	jb     c000cc8b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc58:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc5e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc64:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc68:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc6c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc72:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7c:	5b                   	pop    ebx
c000cc7d:	5e                   	pop    esi
c000cc7e:	5f                   	pop    edi
c000cc7f:	e9 cc 08 00 00       	jmp    c000d550 <VCache::write(unsigned long long, int, void*)>
c000cc84:	b8 05 00 00 00       	mov    eax,0x5
c000cc89:	eb 05                	jmp    c000cc90 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cc8b:	b8 07 00 00 00       	mov    eax,0x7
c000cc90:	5b                   	pop    ebx
c000cc91:	5e                   	pop    esi
c000cc92:	5f                   	pop    edi
c000cc93:	c3                   	ret    

c000cc94 <Mouse::Mouse(char const*)>:
c000cc94:	83 ec 0c             	sub    esp,0xc
c000cc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc9b:	83 ec 08             	sub    esp,0x8
c000cc9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca2:	50                   	push   eax
c000cca3:	e8 84 ed ff ff       	call   c000ba2c <Device::Device(char const*)>
c000cca8:	83 c4 10             	add    esp,0x10
c000ccab:	ba 80 dc 01 c0       	mov    edx,0xc001dc80
c000ccb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccb4:	89 10                	mov    DWORD PTR [eax],edx
c000ccb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccba:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ccc4:	90                   	nop
c000ccc5:	83 c4 0c             	add    esp,0xc
c000ccc8:	c3                   	ret    
c000ccc9:	90                   	nop
c000ccca:	66 90                	xchg   ax,ax

c000cccc <Mouse::~Mouse()>:
c000cccc:	83 ec 0c             	sub    esp,0xc
c000cccf:	ba 80 dc 01 c0       	mov    edx,0xc001dc80
c000ccd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd8:	89 10                	mov    DWORD PTR [eax],edx
c000ccda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccde:	83 ec 0c             	sub    esp,0xc
c000cce1:	50                   	push   eax
c000cce2:	e8 af ea ff ff       	call   c000b796 <Device::~Device()>
c000cce7:	83 c4 10             	add    esp,0x10
c000ccea:	90                   	nop
c000cceb:	83 c4 0c             	add    esp,0xc
c000ccee:	c3                   	ret    
c000ccef:	90                   	nop

c000ccf0 <Mouse::~Mouse()>:
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	83 ec 0c             	sub    esp,0xc
c000ccf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfa:	e8 cd ff ff ff       	call   c000cccc <Mouse::~Mouse()>
c000ccff:	83 c4 10             	add    esp,0x10
c000cd02:	83 ec 08             	sub    esp,0x8
c000cd05:	68 58 01 00 00       	push   0x158
c000cd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd0e:	e8 4b d6 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000cd13:	83 c4 10             	add    esp,0x10
c000cd16:	83 c4 0c             	add    esp,0xc
c000cd19:	c3                   	ret    

c000cd1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd1a:	55                   	push   ebp
c000cd1b:	57                   	push   edi
c000cd1c:	56                   	push   esi
c000cd1d:	53                   	push   ebx
c000cd1e:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd24:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd2b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd32:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd39:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd44:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd48:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd4f:	e8 d4 ed ff ff       	call   c000bb28 <Device::getName()>
c000cd54:	5a                   	pop    edx
c000cd55:	59                   	pop    ecx
c000cd56:	50                   	push   eax
c000cd57:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd5b:	55                   	push   ebp
c000cd5c:	e8 9f 38 ff ff       	call   c0000600 <strcpy>
c000cd61:	5b                   	pop    ebx
c000cd62:	58                   	pop    eax
c000cd63:	68 a4 dc 01 c0       	push   0xc001dca4
c000cd68:	55                   	push   ebp
c000cd69:	e8 52 3a ff ff       	call   c00007c0 <strcat>
c000cd6e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cd75:	e8 3f aa ff ff       	call   c00077b9 <malloc>
c000cd7a:	83 c4 0c             	add    esp,0xc
c000cd7d:	89 c3                	mov    ebx,eax
c000cd7f:	57                   	push   edi
c000cd80:	56                   	push   esi
c000cd81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd89:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cd90:	55                   	push   ebp
c000cd91:	50                   	push   eax
c000cd92:	e8 f7 fb ff ff       	call   c000c98e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cd97:	83 c4 14             	add    esp,0x14
c000cd9a:	53                   	push   ebx
c000cd9b:	e8 a4 fc ff ff       	call   c000ca44 <LogicalDisk::assignDriveLetter()>
c000cda0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cda3:	e8 52 fd ff ff       	call   c000cafa <LogicalDisk::mount()>
c000cda8:	58                   	pop    eax
c000cda9:	5a                   	pop    edx
c000cdaa:	53                   	push   ebx
c000cdab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdb2:	e8 dd ea ff ff       	call   c000b894 <Device::addChild(Device*)>
c000cdb7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cdbd:	5b                   	pop    ebx
c000cdbe:	5e                   	pop    esi
c000cdbf:	5f                   	pop    edi
c000cdc0:	5d                   	pop    ebp
c000cdc1:	c3                   	ret    

c000cdc2 <createPartitionsForDisk(PhysicalDisk*)>:
c000cdc2:	55                   	push   ebp
c000cdc3:	57                   	push   edi
c000cdc4:	56                   	push   esi
c000cdc5:	53                   	push   ebx
c000cdc6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cdcc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cdd3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cdd9:	3d 00 02 00 00       	cmp    eax,0x200
c000cdde:	74 27                	je     c000ce07 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cde0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cde6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cdec:	83 ec 10             	sub    esp,0x10
c000cdef:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cdf3:	99                   	cdq    
c000cdf4:	c1 e6 0a             	shl    esi,0xa
c000cdf7:	52                   	push   edx
c000cdf8:	89 fd                	mov    ebp,edi
c000cdfa:	50                   	push   eax
c000cdfb:	55                   	push   ebp
c000cdfc:	56                   	push   esi
c000cdfd:	e8 3e ee 00 00       	call   c001bc40 <__udivdi3>
c000ce02:	e9 b1 00 00 00       	jmp    c000ceb8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce07:	83 ec 0c             	sub    esp,0xc
c000ce0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce0c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce10:	56                   	push   esi
c000ce11:	6a 01                	push   0x1
c000ce13:	6a 00                	push   0x0
c000ce15:	6a 00                	push   0x0
c000ce17:	53                   	push   ebx
c000ce18:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce1b:	83 c4 20             	add    esp,0x20
c000ce1e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce26:	75 0a                	jne    c000ce32 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce28:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce30:	74 2c                	je     c000ce5e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce32:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce38:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce3e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce44:	83 ec 10             	sub    esp,0x10
c000ce47:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce4b:	89 f7                	mov    edi,esi
c000ce4d:	c1 e0 0a             	shl    eax,0xa
c000ce50:	c1 ff 1f             	sar    edi,0x1f
c000ce53:	57                   	push   edi
c000ce54:	56                   	push   esi
c000ce55:	52                   	push   edx
c000ce56:	50                   	push   eax
c000ce57:	e8 e4 ed 00 00       	call   c001bc40 <__udivdi3>
c000ce5c:	eb 5a                	jmp    c000ceb8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce5e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ce65:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ce6c:	83 e1 7f             	and    ecx,0x7f
c000ce6f:	83 e0 7f             	and    eax,0x7f
c000ce72:	01 c1                	add    ecx,eax
c000ce74:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ce7b:	83 e0 7f             	and    eax,0x7f
c000ce7e:	01 c1                	add    ecx,eax
c000ce80:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ce87:	83 e0 7f             	and    eax,0x7f
c000ce8a:	00 c1                	add    cl,al
c000ce8c:	74 41                	je     c000cecf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ce8e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce94:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce9a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cea0:	83 ec 10             	sub    esp,0x10
c000cea3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cea7:	89 f7                	mov    edi,esi
c000cea9:	c1 e0 0a             	shl    eax,0xa
c000ceac:	c1 ff 1f             	sar    edi,0x1f
c000ceaf:	57                   	push   edi
c000ceb0:	56                   	push   esi
c000ceb1:	52                   	push   edx
c000ceb2:	50                   	push   eax
c000ceb3:	e8 88 ed 00 00       	call   c001bc40 <__udivdi3>
c000ceb8:	83 c4 14             	add    esp,0x14
c000cebb:	52                   	push   edx
c000cebc:	50                   	push   eax
c000cebd:	6a 00                	push   0x0
c000cebf:	6a 00                	push   0x0
c000cec1:	53                   	push   ebx
c000cec2:	e8 53 fe ff ff       	call   c000cd1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cec7:	83 c4 20             	add    esp,0x20
c000ceca:	e9 79 01 00 00       	jmp    c000d048 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cecf:	89 f0                	mov    eax,esi
c000ced1:	31 f6                	xor    esi,esi
c000ced3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ceda:	75 02                	jne    c000cede <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cedc:	89 f1                	mov    ecx,esi
c000cede:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cee5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000ceec:	c1 e2 08             	shl    edx,0x8
c000ceef:	c1 e7 10             	shl    edi,0x10
c000cef2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cefa:	09 fa                	or     edx,edi
c000cefc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf04:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf0b:	83 c0 10             	add    eax,0x10
c000cf0e:	09 fa                	or     edx,edi
c000cf10:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf17:	c1 e7 18             	shl    edi,0x18
c000cf1a:	09 fa                	or     edx,edi
c000cf1c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf23:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf27:	c1 e7 10             	shl    edi,0x10
c000cf2a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf31:	c1 e2 08             	shl    edx,0x8
c000cf34:	09 fa                	or     edx,edi
c000cf36:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf3d:	09 fa                	or     edx,edi
c000cf3f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf46:	c1 e7 18             	shl    edi,0x18
c000cf49:	09 fa                	or     edx,edi
c000cf4b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf4f:	46                   	inc    esi
c000cf50:	83 fe 04             	cmp    esi,0x4
c000cf53:	0f 85 7a ff ff ff    	jne    c000ced3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5d:	83 f0 01             	xor    eax,0x1
c000cf60:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cf64:	75 57                	jne    c000cfbd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf6a:	83 f0 01             	xor    eax,0x1
c000cf6d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cf71:	75 4a                	jne    c000cfbd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf73:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cf77:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cf7f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cf87:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf8d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf93:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf99:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf9d:	89 f7                	mov    edi,esi
c000cf9f:	c1 e0 0a             	shl    eax,0xa
c000cfa2:	c1 ff 1f             	sar    edi,0x1f
c000cfa5:	57                   	push   edi
c000cfa6:	56                   	push   esi
c000cfa7:	52                   	push   edx
c000cfa8:	50                   	push   eax
c000cfa9:	e8 92 ec 00 00       	call   c001bc40 <__udivdi3>
c000cfae:	83 c4 10             	add    esp,0x10
c000cfb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfb5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfb9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cfbd:	84 c9                	test   cl,cl
c000cfbf:	74 53                	je     c000d014 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cfc1:	0f b6 c9             	movzx  ecx,cl
c000cfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfcc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cfd0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cfd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfdc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000cfe0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000cfe4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cfe8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cfec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cff0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cff4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000cff8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000cffc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d000:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d004:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d008:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d010:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d014:	31 ed                	xor    ebp,ebp
c000d016:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d01a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d01e:	89 f8                	mov    eax,edi
c000d020:	09 f0                	or     eax,esi
c000d022:	74 1e                	je     c000d042 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d024:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d028:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d02c:	89 d1                	mov    ecx,edx
c000d02e:	09 c1                	or     ecx,eax
c000d030:	74 10                	je     c000d042 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d032:	83 ec 0c             	sub    esp,0xc
c000d035:	57                   	push   edi
c000d036:	56                   	push   esi
c000d037:	52                   	push   edx
c000d038:	50                   	push   eax
c000d039:	53                   	push   ebx
c000d03a:	e8 db fc ff ff       	call   c000cd1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d03f:	83 c4 20             	add    esp,0x20
c000d042:	45                   	inc    ebp
c000d043:	83 fd 04             	cmp    ebp,0x4
c000d046:	75 ce                	jne    c000d016 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d048:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d04e:	5b                   	pop    ebx
c000d04f:	5e                   	pop    esi
c000d050:	5f                   	pop    edi
c000d051:	5d                   	pop    ebp
c000d052:	c3                   	ret    
c000d053:	90                   	nop

c000d054 <Serial::Serial(char const*)>:
c000d054:	83 ec 0c             	sub    esp,0xc
c000d057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d05b:	83 ec 08             	sub    esp,0x8
c000d05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d062:	50                   	push   eax
c000d063:	e8 c4 e9 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000d068:	83 c4 10             	add    esp,0x10
c000d06b:	ba b8 dc 01 c0       	mov    edx,0xc001dcb8
c000d070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d074:	89 10                	mov    DWORD PTR [eax],edx
c000d076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d07a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d084:	90                   	nop
c000d085:	83 c4 0c             	add    esp,0xc
c000d088:	c3                   	ret    
c000d089:	90                   	nop
c000d08a:	66 90                	xchg   ax,ax

c000d08c <Serial::~Serial()>:
c000d08c:	83 ec 0c             	sub    esp,0xc
c000d08f:	ba b8 dc 01 c0       	mov    edx,0xc001dcb8
c000d094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d098:	89 10                	mov    DWORD PTR [eax],edx
c000d09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d09e:	83 ec 0c             	sub    esp,0xc
c000d0a1:	50                   	push   eax
c000d0a2:	e8 ef e6 ff ff       	call   c000b796 <Device::~Device()>
c000d0a7:	83 c4 10             	add    esp,0x10
c000d0aa:	90                   	nop
c000d0ab:	83 c4 0c             	add    esp,0xc
c000d0ae:	c3                   	ret    
c000d0af:	90                   	nop

c000d0b0 <Serial::~Serial()>:
c000d0b0:	83 ec 0c             	sub    esp,0xc
c000d0b3:	83 ec 0c             	sub    esp,0xc
c000d0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ba:	e8 cd ff ff ff       	call   c000d08c <Serial::~Serial()>
c000d0bf:	83 c4 10             	add    esp,0x10
c000d0c2:	83 ec 08             	sub    esp,0x8
c000d0c5:	68 58 01 00 00       	push   0x158
c000d0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ce:	e8 8b d2 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d0d3:	83 c4 10             	add    esp,0x10
c000d0d6:	83 c4 0c             	add    esp,0xc
c000d0d9:	c3                   	ret    
c000d0da:	66 90                	xchg   ax,ax

c000d0dc <Timer::Timer(char const*)>:
c000d0dc:	83 ec 0c             	sub    esp,0xc
c000d0df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0e3:	83 ec 08             	sub    esp,0x8
c000d0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ea:	50                   	push   eax
c000d0eb:	e8 3c e9 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000d0f0:	83 c4 10             	add    esp,0x10
c000d0f3:	ba fc dc 01 c0       	mov    edx,0xc001dcfc
c000d0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0fc:	89 10                	mov    DWORD PTR [eax],edx
c000d0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d102:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d10c:	90                   	nop
c000d10d:	83 c4 0c             	add    esp,0xc
c000d110:	c3                   	ret    
c000d111:	90                   	nop
c000d112:	66 90                	xchg   ax,ax

c000d114 <Timer::~Timer()>:
c000d114:	83 ec 0c             	sub    esp,0xc
c000d117:	ba fc dc 01 c0       	mov    edx,0xc001dcfc
c000d11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d120:	89 10                	mov    DWORD PTR [eax],edx
c000d122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d126:	83 ec 0c             	sub    esp,0xc
c000d129:	50                   	push   eax
c000d12a:	e8 67 e6 ff ff       	call   c000b796 <Device::~Device()>
c000d12f:	83 c4 10             	add    esp,0x10
c000d132:	90                   	nop
c000d133:	83 c4 0c             	add    esp,0xc
c000d136:	c3                   	ret    
c000d137:	90                   	nop

c000d138 <Timer::~Timer()>:
c000d138:	83 ec 0c             	sub    esp,0xc
c000d13b:	83 ec 0c             	sub    esp,0xc
c000d13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d142:	e8 cd ff ff ff       	call   c000d114 <Timer::~Timer()>
c000d147:	83 c4 10             	add    esp,0x10
c000d14a:	83 ec 08             	sub    esp,0x8
c000d14d:	68 5c 01 00 00       	push   0x15c
c000d152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d156:	e8 03 d2 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d15b:	83 c4 10             	add    esp,0x10
c000d15e:	83 c4 0c             	add    esp,0xc
c000d161:	c3                   	ret    

c000d162 <Timer::read()>:
c000d162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d166:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d16c:	c3                   	ret    

c000d16d <setupTimer(int)>:
c000d16d:	53                   	push   ebx
c000d16e:	83 ec 14             	sub    esp,0x14
c000d171:	68 5c 01 00 00       	push   0x15c
c000d176:	e8 3e a6 ff ff       	call   c00077b9 <malloc>
c000d17b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d17e:	89 c3                	mov    ebx,eax
c000d180:	e8 37 e4 00 00       	call   c001b5bc <PIT::PIT()>
c000d185:	58                   	pop    eax
c000d186:	5a                   	pop    edx
c000d187:	53                   	push   ebx
c000d188:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c000d18e:	e8 01 e7 ff ff       	call   c000b894 <Device::addChild(Device*)>
c000d193:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d195:	6a 00                	push   0x0
c000d197:	6a 00                	push   0x0
c000d199:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d19d:	53                   	push   ebx
c000d19e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1a1:	89 d8                	mov    eax,ebx
c000d1a3:	83 c4 28             	add    esp,0x28
c000d1a6:	5b                   	pop    ebx
c000d1a7:	c3                   	ret    

c000d1a8 <timerHandler(unsigned int)>:
c000d1a8:	56                   	push   esi
c000d1a9:	53                   	push   ebx
c000d1aa:	51                   	push   ecx
c000d1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1af:	01 05 6c 2a 02 c0    	add    DWORD PTR ds:0xc0022a6c,eax
c000d1b5:	80 3d 9d 04 02 c0 00 	cmp    BYTE PTR ds:0xc002049d,0x0
c000d1bc:	0f 84 4a 01 00 00    	je     c000d30c <timerHandler(unsigned int)+0x164>
c000d1c2:	fa                   	cli    
c000d1c3:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c000d1c9:	83 ec 0c             	sub    esp,0xc
c000d1cc:	ff 05 44 37 02 c0    	inc    DWORD PTR ds:0xc0023744
c000d1d2:	68 58 37 02 c0       	push   0xc0023758
c000d1d7:	e8 34 f0 00 00       	call   c001c210 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d1dc:	83 c4 10             	add    esp,0x10
c000d1df:	84 c0                	test   al,al
c000d1e1:	0f 85 a1 00 00 00    	jne    c000d288 <timerHandler(unsigned int)+0xe0>
c000d1e7:	83 ec 0c             	sub    esp,0xc
c000d1ea:	68 58 37 02 c0       	push   0xc0023758
c000d1ef:	e8 38 f0 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1f4:	83 c4 10             	add    esp,0x10
c000d1f7:	89 c6                	mov    esi,eax
c000d1f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d1fc:	83 ec 0c             	sub    esp,0xc
c000d1ff:	68 58 37 02 c0       	push   0xc0023758
c000d204:	e8 23 f0 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d209:	c7 04 24 58 37 02 c0 	mov    DWORD PTR [esp],0xc0023758
c000d210:	89 c3                	mov    ebx,eax
c000d212:	e8 1d f0 00 00       	call   c001c234 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d217:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d21a:	83 c4 10             	add    esp,0x10
c000d21d:	3b 05 6c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a6c
c000d223:	77 23                	ja     c000d248 <timerHandler(unsigned int)+0xa0>
c000d225:	83 ec 0c             	sub    esp,0xc
c000d228:	53                   	push   ebx
c000d229:	e8 de 65 00 00       	call   c001380c <unblockTask(ThreadControlBlock*)>
c000d22e:	83 c4 10             	add    esp,0x10
c000d231:	39 de                	cmp    esi,ebx
c000d233:	75 27                	jne    c000d25c <timerHandler(unsigned int)+0xb4>
c000d235:	83 ec 0c             	sub    esp,0xc
c000d238:	68 58 37 02 c0       	push   0xc0023758
c000d23d:	e8 ea ef 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d242:	89 c6                	mov    esi,eax
c000d244:	eb 12                	jmp    c000d258 <timerHandler(unsigned int)+0xb0>
c000d246:	66 90                	xchg   ax,ax
c000d248:	52                   	push   edx
c000d249:	52                   	push   edx
c000d24a:	53                   	push   ebx
c000d24b:	68 58 37 02 c0       	push   0xc0023758
c000d250:	e8 97 f0 00 00       	call   c001c2ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d255:	8d 76 00             	lea    esi,[esi+0x0]
c000d258:	83 c4 10             	add    esp,0x10
c000d25b:	90                   	nop
c000d25c:	83 ec 0c             	sub    esp,0xc
c000d25f:	68 58 37 02 c0       	push   0xc0023758
c000d264:	e8 a7 ef 00 00       	call   c001c210 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d269:	83 c4 10             	add    esp,0x10
c000d26c:	84 c0                	test   al,al
c000d26e:	75 18                	jne    c000d288 <timerHandler(unsigned int)+0xe0>
c000d270:	83 ec 0c             	sub    esp,0xc
c000d273:	68 58 37 02 c0       	push   0xc0023758
c000d278:	e8 af ef 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d27d:	83 c4 10             	add    esp,0x10
c000d280:	39 f0                	cmp    eax,esi
c000d282:	0f 85 74 ff ff ff    	jne    c000d1fc <timerHandler(unsigned int)+0x54>
c000d288:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d28d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d291:	74 41                	je     c000d2d4 <timerHandler(unsigned int)+0x12c>
c000d293:	80 3d 9c 04 02 c0 00 	cmp    BYTE PTR ds:0xc002049c,0x0
c000d29a:	74 38                	je     c000d2d4 <timerHandler(unsigned int)+0x12c>
c000d29c:	fa                   	cli    
c000d29d:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c000d2a3:	a1 6c 2a 02 c0       	mov    eax,ds:0xc0022a6c
c000d2a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2ae:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d2b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2b7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d2ba:	72 08                	jb     c000d2c4 <timerHandler(unsigned int)+0x11c>
c000d2bc:	e8 87 60 00 00       	call   c0013348 <schedule()>
c000d2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2c4:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000d2c9:	48                   	dec    eax
c000d2ca:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000d2cf:	75 03                	jne    c000d2d4 <timerHandler(unsigned int)+0x12c>
c000d2d1:	fb                   	sti    
c000d2d2:	66 90                	xchg   ax,ax
c000d2d4:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c000d2d9:	48                   	dec    eax
c000d2da:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c000d2df:	75 1b                	jne    c000d2fc <timerHandler(unsigned int)+0x154>
c000d2e1:	83 3d 40 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023740,0x0
c000d2e8:	74 12                	je     c000d2fc <timerHandler(unsigned int)+0x154>
c000d2ea:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c000d2f4:	e8 4f 60 00 00       	call   c0013348 <schedule()>
c000d2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2fc:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000d301:	48                   	dec    eax
c000d302:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c000d307:	75 03                	jne    c000d30c <timerHandler(unsigned int)+0x164>
c000d309:	fb                   	sti    
c000d30a:	66 90                	xchg   ax,ax
c000d30c:	58                   	pop    eax
c000d30d:	5b                   	pop    ebx
c000d30e:	5e                   	pop    esi
c000d30f:	c3                   	ret    

c000d310 <VCache::VCache(PhysicalDisk*)>:
c000d310:	53                   	push   ebx
c000d311:	83 ec 18             	sub    esp,0x18
c000d314:	ba 2c dd 01 c0       	mov    edx,0xc001dd2c
c000d319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d31d:	89 10                	mov    DWORD PTR [eax],edx
c000d31f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d323:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d32a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d32e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d335:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d339:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d340:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d34b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d352:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d35d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d364:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d368:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d36c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d370:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d377:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d37e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d382:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d38a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d392:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d39a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3a1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3a9:	83 ec 0c             	sub    esp,0xc
c000d3ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3b0:	e8 04 a4 ff ff       	call   c00077b9 <malloc>
c000d3b5:	83 c4 10             	add    esp,0x10
c000d3b8:	89 c3                	mov    ebx,eax
c000d3ba:	83 ec 0c             	sub    esp,0xc
c000d3bd:	53                   	push   ebx
c000d3be:	e8 51 5d 00 00       	call   c0013114 <Mutex::Mutex()>
c000d3c3:	83 c4 10             	add    esp,0x10
c000d3c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ca:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d3cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d3d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d3d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3dc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d3e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3e7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d3ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3f1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d3f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3f8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d3fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d404:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d408:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d40b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d40e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d412:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d416:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d41a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d420:	05 00 01 00 00       	add    eax,0x100
c000d425:	c1 e0 04             	shl    eax,0x4
c000d428:	83 ec 0c             	sub    esp,0xc
c000d42b:	50                   	push   eax
c000d42c:	e8 88 a3 ff ff       	call   c00077b9 <malloc>
c000d431:	83 c4 10             	add    esp,0x10
c000d434:	89 c2                	mov    edx,eax
c000d436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d43d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d441:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d44c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d450:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d454:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d45a:	c1 e0 06             	shl    eax,0x6
c000d45d:	83 ec 0c             	sub    esp,0xc
c000d460:	50                   	push   eax
c000d461:	e8 53 a3 ff ff       	call   c00077b9 <malloc>
c000d466:	83 c4 10             	add    esp,0x10
c000d469:	89 c2                	mov    edx,eax
c000d46b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d46f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d472:	90                   	nop
c000d473:	83 c4 18             	add    esp,0x18
c000d476:	5b                   	pop    ebx
c000d477:	c3                   	ret    

c000d478 <VCache::invalidateReadBuffer()>:
c000d478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d47c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d482:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d486:	c3                   	ret    
c000d487:	90                   	nop

c000d488 <VCache::writeWriteBuffer()>:
c000d488:	53                   	push   ebx
c000d489:	83 ec 08             	sub    esp,0x8
c000d48c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d490:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d494:	74 1e                	je     c000d4b4 <VCache::writeWriteBuffer()+0x2c>
c000d496:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d499:	83 ec 0c             	sub    esp,0xc
c000d49c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d49e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4a4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4aa:	50                   	push   eax
c000d4ab:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d4ae:	83 c4 20             	add    esp,0x20
c000d4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d4b4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d4bb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d4c2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d4c6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d4cd:	83 c4 08             	add    esp,0x8
c000d4d0:	5b                   	pop    ebx
c000d4d1:	c3                   	ret    
c000d4d2:	66 90                	xchg   ax,ax

c000d4d4 <VCache::~VCache()>:
c000d4d4:	83 ec 0c             	sub    esp,0xc
c000d4d7:	ba 2c dd 01 c0       	mov    edx,0xc001dd2c
c000d4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4e0:	89 10                	mov    DWORD PTR [eax],edx
c000d4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4e6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d4e9:	84 c0                	test   al,al
c000d4eb:	74 0f                	je     c000d4fc <VCache::~VCache()+0x28>
c000d4ed:	83 ec 0c             	sub    esp,0xc
c000d4f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f4:	e8 8f ff ff ff       	call   c000d488 <VCache::writeWriteBuffer()>
c000d4f9:	83 c4 10             	add    esp,0x10
c000d4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d500:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d503:	83 ec 0c             	sub    esp,0xc
c000d506:	50                   	push   eax
c000d507:	e8 bd a2 ff ff       	call   c00077c9 <free>
c000d50c:	83 c4 10             	add    esp,0x10
c000d50f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d513:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d516:	83 ec 0c             	sub    esp,0xc
c000d519:	50                   	push   eax
c000d51a:	e8 aa a2 ff ff       	call   c00077c9 <free>
c000d51f:	83 c4 10             	add    esp,0x10
c000d522:	90                   	nop
c000d523:	83 c4 0c             	add    esp,0xc
c000d526:	c3                   	ret    
c000d527:	90                   	nop

c000d528 <VCache::~VCache()>:
c000d528:	83 ec 0c             	sub    esp,0xc
c000d52b:	83 ec 0c             	sub    esp,0xc
c000d52e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d532:	e8 9d ff ff ff       	call   c000d4d4 <VCache::~VCache()>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	83 ec 08             	sub    esp,0x8
c000d53d:	6a 44                	push   0x44
c000d53f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d543:	e8 16 ce ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d548:	83 c4 10             	add    esp,0x10
c000d54b:	83 c4 0c             	add    esp,0xc
c000d54e:	c3                   	ret    
c000d54f:	90                   	nop

c000d550 <VCache::write(unsigned long long, int, void*)>:
c000d550:	55                   	push   ebp
c000d551:	57                   	push   edi
c000d552:	56                   	push   esi
c000d553:	53                   	push   ebx
c000d554:	83 ec 1c             	sub    esp,0x1c
c000d557:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d55b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d55f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d563:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d567:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d56b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d56f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d573:	31 c0                	xor    eax,eax
c000d575:	8d 76 00             	lea    esi,[esi+0x0]
c000d578:	39 e8                	cmp    eax,ebp
c000d57a:	7d 18                	jge    c000d594 <VCache::write(unsigned long long, int, void*)+0x44>
c000d57c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d57f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d585:	0f af c8             	imul   ecx,eax
c000d588:	89 ca                	mov    edx,ecx
c000d58a:	01 f2                	add    edx,esi
c000d58c:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d58e:	40                   	inc    eax
c000d58f:	eb e7                	jmp    c000d578 <VCache::write(unsigned long long, int, void*)+0x28>
c000d591:	8d 76 00             	lea    esi,[esi+0x0]
c000d594:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d598:	74 0a                	je     c000d5a4 <VCache::write(unsigned long long, int, void*)+0x54>
c000d59a:	53                   	push   ebx
c000d59b:	e8 d8 fe ff ff       	call   c000d478 <VCache::invalidateReadBuffer()>
c000d5a0:	58                   	pop    eax
c000d5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5a8:	74 5a                	je     c000d604 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5aa:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d5ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d5b1:	89 f8                	mov    eax,edi
c000d5b3:	99                   	cdq    
c000d5b4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d5b7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d5ba:	31 c1                	xor    ecx,eax
c000d5bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5c0:	31 d0                	xor    eax,edx
c000d5c2:	09 c1                	or     ecx,eax
c000d5c4:	75 32                	jne    c000d5f8 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5c6:	83 fd 01             	cmp    ebp,0x1
c000d5c9:	75 2d                	jne    c000d5f8 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5ce:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5d4:	0f af f9             	imul   edi,ecx
c000d5d7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d5da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d5df:	40                   	inc    eax
c000d5e0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d5e3:	83 f8 40             	cmp    eax,0x40
c000d5e6:	75 74                	jne    c000d65c <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5e8:	83 ec 0c             	sub    esp,0xc
c000d5eb:	53                   	push   ebx
c000d5ec:	e8 97 fe ff ff       	call   c000d488 <VCache::writeWriteBuffer()>
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	eb 66                	jmp    c000d65c <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5f6:	66 90                	xchg   ax,ax
c000d5f8:	83 ec 0c             	sub    esp,0xc
c000d5fb:	53                   	push   ebx
c000d5fc:	e8 87 fe ff ff       	call   c000d488 <VCache::writeWriteBuffer()>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d607:	83 fd 3f             	cmp    ebp,0x3f
c000d60a:	7f 24                	jg     c000d630 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d60c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d610:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d613:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d616:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d61a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d61e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d621:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d624:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d62a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d62c:	eb 2e                	jmp    c000d65c <VCache::write(unsigned long long, int, void*)+0x10c>
c000d62e:	66 90                	xchg   ax,ax
c000d630:	8b 10                	mov    edx,DWORD PTR [eax]
c000d632:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d636:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d63a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d63e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d642:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d646:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d64a:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d64e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d651:	83 c4 1c             	add    esp,0x1c
c000d654:	5b                   	pop    ebx
c000d655:	5e                   	pop    esi
c000d656:	5f                   	pop    edi
c000d657:	5d                   	pop    ebp
c000d658:	ff e0                	jmp    eax
c000d65a:	66 90                	xchg   ax,ax
c000d65c:	83 c4 1c             	add    esp,0x1c
c000d65f:	31 c0                	xor    eax,eax
c000d661:	5b                   	pop    ebx
c000d662:	5e                   	pop    esi
c000d663:	5f                   	pop    edi
c000d664:	5d                   	pop    ebp
c000d665:	c3                   	ret    

c000d666 <VCache::read(unsigned long long, int, void*)>:
c000d666:	55                   	push   ebp
c000d667:	57                   	push   edi
c000d668:	56                   	push   esi
c000d669:	53                   	push   ebx
c000d66a:	83 ec 1c             	sub    esp,0x1c
c000d66d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d671:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d679:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d67d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d681:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d685:	31 c0                	xor    eax,eax
c000d687:	90                   	nop
c000d688:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d68c:	7d 16                	jge    c000d6a4 <VCache::read(unsigned long long, int, void*)+0x3e>
c000d68e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d691:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d697:	0f af c8             	imul   ecx,eax
c000d69a:	89 ca                	mov    edx,ecx
c000d69c:	01 f2                	add    edx,esi
c000d69e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d6a0:	40                   	inc    eax
c000d6a1:	eb e5                	jmp    c000d688 <VCache::read(unsigned long long, int, void*)+0x22>
c000d6a3:	90                   	nop
c000d6a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6a8:	74 0e                	je     c000d6b8 <VCache::read(unsigned long long, int, void*)+0x52>
c000d6aa:	83 ec 0c             	sub    esp,0xc
c000d6ad:	53                   	push   ebx
c000d6ae:	e8 d5 fd ff ff       	call   c000d488 <VCache::writeWriteBuffer()>
c000d6b3:	83 c4 10             	add    esp,0x10
c000d6b6:	66 90                	xchg   ax,ax
c000d6b8:	83 ec 0c             	sub    esp,0xc
c000d6bb:	53                   	push   ebx
c000d6bc:	e8 b7 fd ff ff       	call   c000d478 <VCache::invalidateReadBuffer()>
c000d6c1:	83 c4 0c             	add    esp,0xc
c000d6c4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6c7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d6cd:	6a 00                	push   0x0
c000d6cf:	56                   	push   esi
c000d6d0:	e8 fb 2d ff ff       	call   c00004d0 <memset>
c000d6d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6d8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6da:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000d6de:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000d6e2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d6e6:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000d6ea:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000d6ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6f2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d6f5:	83 c4 2c             	add    esp,0x2c
c000d6f8:	5b                   	pop    ebx
c000d6f9:	5e                   	pop    esi
c000d6fa:	5f                   	pop    edi
c000d6fb:	5d                   	pop    ebp
c000d6fc:	ff e0                	jmp    eax

c000d6fe <Video::putrect(int, int, int, int, unsigned int)>:
c000d6fe:	55                   	push   ebp
c000d6ff:	57                   	push   edi
c000d700:	56                   	push   esi
c000d701:	53                   	push   ebx
c000d702:	83 ec 1c             	sub    esp,0x1c
c000d705:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d709:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d70d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d711:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d715:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d719:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d71d:	01 df                	add    edi,ebx
c000d71f:	39 fb                	cmp    ebx,edi
c000d721:	7d 1f                	jge    c000d742 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d723:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d727:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d72b:	7d 12                	jge    c000d73f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d72d:	8b 16                	mov    edx,DWORD PTR [esi]
c000d72f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d733:	53                   	push   ebx
c000d734:	55                   	push   ebp
c000d735:	45                   	inc    ebp
c000d736:	56                   	push   esi
c000d737:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d73a:	83 c4 10             	add    esp,0x10
c000d73d:	eb e8                	jmp    c000d727 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d73f:	43                   	inc    ebx
c000d740:	eb dd                	jmp    c000d71f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d742:	83 c4 1c             	add    esp,0x1c
c000d745:	5b                   	pop    ebx
c000d746:	5e                   	pop    esi
c000d747:	5f                   	pop    edi
c000d748:	5d                   	pop    ebp
c000d749:	c3                   	ret    

c000d74a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d74a:	55                   	push   ebp
c000d74b:	57                   	push   edi
c000d74c:	31 ff                	xor    edi,edi
c000d74e:	56                   	push   esi
c000d74f:	53                   	push   ebx
c000d750:	83 ec 1c             	sub    esp,0x1c
c000d753:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d757:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d75b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d762:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d767:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d76f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d773:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d776:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d77a:	01 f9                	add    ecx,edi
c000d77c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d780:	7d 2f                	jge    c000d7b1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d782:	31 f6                	xor    esi,esi
c000d784:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d788:	01 f2                	add    edx,esi
c000d78a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d78e:	7d 1a                	jge    c000d7aa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d790:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d793:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d796:	46                   	inc    esi
c000d797:	51                   	push   ecx
c000d798:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d79c:	52                   	push   edx
c000d79d:	55                   	push   ebp
c000d79e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7a1:	83 c4 10             	add    esp,0x10
c000d7a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7a8:	eb da                	jmp    c000d784 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d7aa:	47                   	inc    edi
c000d7ab:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d7af:	eb c5                	jmp    c000d776 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d7b1:	83 c4 1c             	add    esp,0x1c
c000d7b4:	5b                   	pop    ebx
c000d7b5:	5e                   	pop    esi
c000d7b6:	5f                   	pop    edi
c000d7b7:	5d                   	pop    ebp
c000d7b8:	c3                   	ret    
c000d7b9:	90                   	nop

c000d7ba <Video::blit(unsigned int*, int, int, int, int)>:
c000d7ba:	55                   	push   ebp
c000d7bb:	57                   	push   edi
c000d7bc:	56                   	push   esi
c000d7bd:	53                   	push   ebx
c000d7be:	83 ec 1c             	sub    esp,0x1c
c000d7c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7c9:	85 c0                	test   eax,eax
c000d7cb:	79 02                	jns    c000d7cf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d7cd:	31 c0                	xor    eax,eax
c000d7cf:	c1 e0 02             	shl    eax,0x2
c000d7d2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d7d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7de:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d7e2:	39 d8                	cmp    eax,ebx
c000d7e4:	7e 49                	jle    c000d82f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7e6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d7ec:	7c 41                	jl     c000d82f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7ee:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d7f2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7f6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7fa:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d7fe:	39 f9                	cmp    ecx,edi
c000d800:	7e 22                	jle    c000d824 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d802:	83 c5 04             	add    ebp,0x4
c000d805:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d80b:	7c 14                	jl     c000d821 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d80d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d80f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d812:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d816:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d81a:	56                   	push   esi
c000d81b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d81e:	83 c4 10             	add    esp,0x10
c000d821:	47                   	inc    edi
c000d822:	eb d2                	jmp    c000d7f6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d824:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d828:	43                   	inc    ebx
c000d829:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d82d:	eb ab                	jmp    c000d7da <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d82f:	83 c4 1c             	add    esp,0x1c
c000d832:	5b                   	pop    ebx
c000d833:	5e                   	pop    esi
c000d834:	5f                   	pop    edi
c000d835:	5d                   	pop    ebp
c000d836:	c3                   	ret    
c000d837:	90                   	nop

c000d838 <Video::clearScreen(unsigned int)>:
c000d838:	57                   	push   edi
c000d839:	56                   	push   esi
c000d83a:	53                   	push   ebx
c000d83b:	31 db                	xor    ebx,ebx
c000d83d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d841:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d847:	7e 1f                	jle    c000d868 <Video::clearScreen(unsigned int)+0x30>
c000d849:	31 ff                	xor    edi,edi
c000d84b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d851:	7e 12                	jle    c000d865 <Video::clearScreen(unsigned int)+0x2d>
c000d853:	8b 06                	mov    eax,DWORD PTR [esi]
c000d855:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d859:	53                   	push   ebx
c000d85a:	57                   	push   edi
c000d85b:	47                   	inc    edi
c000d85c:	56                   	push   esi
c000d85d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d860:	83 c4 10             	add    esp,0x10
c000d863:	eb e6                	jmp    c000d84b <Video::clearScreen(unsigned int)+0x13>
c000d865:	43                   	inc    ebx
c000d866:	eb d9                	jmp    c000d841 <Video::clearScreen(unsigned int)+0x9>
c000d868:	5b                   	pop    ebx
c000d869:	5e                   	pop    esi
c000d86a:	5f                   	pop    edi
c000d86b:	c3                   	ret    

c000d86c <Video::putpixel(int, int, unsigned int)>:
c000d86c:	c7 44 24 04 34 dd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dd34
c000d874:	e9 be 28 00 00       	jmp    c0010137 <KePanic(char const*)>
c000d879:	90                   	nop

c000d87a <Video::Video(char const*)>:
c000d87a:	83 ec 0c             	sub    esp,0xc
c000d87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d881:	83 ec 08             	sub    esp,0x8
c000d884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d888:	50                   	push   eax
c000d889:	e8 9e e1 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000d88e:	83 c4 10             	add    esp,0x10
c000d891:	ba a4 dd 01 c0       	mov    edx,0xc001dda4
c000d896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89a:	89 10                	mov    DWORD PTR [eax],edx
c000d89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d8aa:	90                   	nop
c000d8ab:	83 c4 0c             	add    esp,0xc
c000d8ae:	c3                   	ret    
c000d8af:	90                   	nop

c000d8b0 <Video::~Video()>:
c000d8b0:	83 ec 0c             	sub    esp,0xc
c000d8b3:	ba a4 dd 01 c0       	mov    edx,0xc001dda4
c000d8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8bc:	89 10                	mov    DWORD PTR [eax],edx
c000d8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c2:	83 ec 0c             	sub    esp,0xc
c000d8c5:	50                   	push   eax
c000d8c6:	e8 cb de ff ff       	call   c000b796 <Device::~Device()>
c000d8cb:	83 c4 10             	add    esp,0x10
c000d8ce:	90                   	nop
c000d8cf:	83 c4 0c             	add    esp,0xc
c000d8d2:	c3                   	ret    
c000d8d3:	90                   	nop

c000d8d4 <Video::~Video()>:
c000d8d4:	83 ec 0c             	sub    esp,0xc
c000d8d7:	83 ec 0c             	sub    esp,0xc
c000d8da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8de:	e8 cd ff ff ff       	call   c000d8b0 <Video::~Video()>
c000d8e3:	83 c4 10             	add    esp,0x10
c000d8e6:	83 ec 08             	sub    esp,0x8
c000d8e9:	68 64 01 00 00       	push   0x164
c000d8ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f2:	e8 67 ca ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d8f7:	83 c4 10             	add    esp,0x10
c000d8fa:	83 c4 0c             	add    esp,0xc
c000d8fd:	c3                   	ret    

c000d8fe <Video::isMonochrome()>:
c000d8fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d902:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d908:	c3                   	ret    
c000d909:	90                   	nop

c000d90a <Video::getWidth()>:
c000d90a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d90e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d914:	c3                   	ret    
c000d915:	90                   	nop

c000d916 <Video::getHeight()>:
c000d916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d91a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d920:	c3                   	ret    
c000d921:	90                   	nop

c000d922 <Video::drawCursor(int, int, unsigned char*, int)>:
c000d922:	55                   	push   ebp
c000d923:	57                   	push   edi
c000d924:	56                   	push   esi
c000d925:	53                   	push   ebx
c000d926:	83 ec 2c             	sub    esp,0x2c
c000d929:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d92d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d931:	83 f8 01             	cmp    eax,0x1
c000d934:	19 c9                	sbb    ecx,ecx
c000d936:	31 db                	xor    ebx,ebx
c000d938:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d93c:	89 cd                	mov    ebp,ecx
c000d93e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d946:	f7 d5                	not    ebp
c000d948:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d94e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d952:	01 d8                	add    eax,ebx
c000d954:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d958:	56                   	push   esi
c000d959:	e8 b8 ff ff ff       	call   c000d916 <Video::getHeight()>
c000d95e:	59                   	pop    ecx
c000d95f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d963:	7e 70                	jle    c000d9d5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d965:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d969:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d96d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d970:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d974:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d978:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d97f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d983:	89 f8                	mov    eax,edi
c000d985:	83 c0 20             	add    eax,0x20
c000d988:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d98c:	56                   	push   esi
c000d98d:	e8 78 ff ff ff       	call   c000d90a <Video::getWidth()>
c000d992:	5a                   	pop    edx
c000d993:	39 c7                	cmp    edi,eax
c000d995:	7d 34                	jge    c000d9cb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d997:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d99c:	74 05                	je     c000d9a3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d99e:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9a0:	55                   	push   ebp
c000d9a1:	eb 0d                	jmp    c000d9b0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9a3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d9a8:	74 12                	je     c000d9bc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d9aa:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9b4:	57                   	push   edi
c000d9b5:	56                   	push   esi
c000d9b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9b9:	83 c4 10             	add    esp,0x10
c000d9bc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d9c0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d9c4:	47                   	inc    edi
c000d9c5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d9c9:	75 c1                	jne    c000d98c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d9cb:	43                   	inc    ebx
c000d9cc:	83 fb 20             	cmp    ebx,0x20
c000d9cf:	0f 85 79 ff ff ff    	jne    c000d94e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d9d5:	83 c4 2c             	add    esp,0x2c
c000d9d8:	5b                   	pop    ebx
c000d9d9:	5e                   	pop    esi
c000d9da:	5f                   	pop    edi
c000d9db:	5d                   	pop    ebp
c000d9dc:	c3                   	ret    
c000d9dd:	90                   	nop

c000d9de <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d9de:	55                   	push   ebp
c000d9df:	57                   	push   edi
c000d9e0:	56                   	push   esi
c000d9e1:	53                   	push   ebx
c000d9e2:	83 ec 28             	sub    esp,0x28
c000d9e5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d9e9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000d9ed:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000d9f1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000d9f5:	c1 e6 08             	shl    esi,0x8
c000d9f8:	01 c6                	add    esi,eax
c000d9fa:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000d9fe:	c1 e0 08             	shl    eax,0x8
c000da01:	01 d0                	add    eax,edx
c000da03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da0b:	0f af c6             	imul   eax,esi
c000da0e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da15:	50                   	push   eax
c000da16:	e8 9e 9d ff ff       	call   c00077b9 <malloc>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 c7                	mov    edi,eax
c000da20:	85 c0                	test   eax,eax
c000da22:	75 10                	jne    c000da34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da24:	83 ec 0c             	sub    esp,0xc
c000da27:	68 55 dd 01 c0       	push   0xc001dd55
c000da2c:	e8 06 27 00 00       	call   c0010137 <KePanic(char const*)>
c000da31:	83 c4 10             	add    esp,0x10
c000da34:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da37:	ba 12 00 00 00       	mov    edx,0x12
c000da3c:	84 c0                	test   al,al
c000da3e:	74 11                	je     c000da51 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da40:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da44:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da48:	c1 fa 03             	sar    edx,0x3
c000da4b:	0f af d1             	imul   edx,ecx
c000da4e:	83 c2 12             	add    edx,0x12
c000da51:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da55:	74 04                	je     c000da5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da57:	85 f6                	test   esi,esi
c000da59:	75 12                	jne    c000da6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da5b:	83 ec 0c             	sub    esp,0xc
c000da5e:	68 65 dd 01 c0       	push   0xc001dd65
c000da63:	e8 ec c9 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000da68:	e9 b8 00 00 00       	jmp    c000db25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da6d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da71:	80 f9 02             	cmp    cl,0x2
c000da74:	0f 85 96 00 00 00    	jne    c000db10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da7a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000da7f:	75 0e                	jne    c000da8f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da81:	84 c0                	test   al,al
c000da83:	75 0a                	jne    c000da8f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da85:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000da88:	83 e8 18             	sub    eax,0x18
c000da8b:	a8 f7                	test   al,0xf7
c000da8d:	74 0a                	je     c000da99 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000da8f:	83 ec 0c             	sub    esp,0xc
c000da92:	68 7a dd 01 c0       	push   0xc001dd7a
c000da97:	eb 7f                	jmp    c000db18 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000da99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000daa1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000daa9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000daad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dab5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dab9:	75 0c                	jne    c000dac7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dabb:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dac0:	c1 e0 18             	shl    eax,0x18
c000dac3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dac7:	45                   	inc    ebp
c000dac8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dacd:	c1 e1 10             	shl    ecx,0x10
c000dad0:	89 c8                	mov    eax,ecx
c000dad2:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dad7:	c1 e1 08             	shl    ecx,0x8
c000dada:	09 c1                	or     ecx,eax
c000dadc:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dae0:	09 c1                	or     ecx,eax
c000dae2:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dae6:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000daea:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000daee:	c1 f8 03             	sar    eax,0x3
c000daf1:	01 c2                	add    edx,eax
c000daf3:	89 e8                	mov    eax,ebp
c000daf5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000daf9:	39 c6                	cmp    esi,eax
c000dafb:	7f b0                	jg     c000daad <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dafd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db05:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db08:	7e 22                	jle    c000db2c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db0a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db0e:	eb 99                	jmp    c000daa9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db10:	50                   	push   eax
c000db11:	50                   	push   eax
c000db12:	51                   	push   ecx
c000db13:	68 88 dd 01 c0       	push   0xc001dd88
c000db18:	e8 37 c9 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000db1d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db20:	e8 a4 9c ff ff       	call   c00077c9 <free>
c000db25:	83 c4 10             	add    esp,0x10
c000db28:	31 ff                	xor    edi,edi
c000db2a:	eb 0f                	jmp    c000db3b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db2c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db30:	89 30                	mov    DWORD PTR [eax],esi
c000db32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db36:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db39:	89 30                	mov    DWORD PTR [eax],esi
c000db3b:	83 c4 1c             	add    esp,0x1c
c000db3e:	89 f8                	mov    eax,edi
c000db40:	5b                   	pop    ebx
c000db41:	5e                   	pop    esi
c000db42:	5f                   	pop    edi
c000db43:	5d                   	pop    ebp
c000db44:	c3                   	ret    
c000db45:	90                   	nop

c000db46 <Video::putTGA(int, int, unsigned char*, int)>:
c000db46:	55                   	push   ebp
c000db47:	57                   	push   edi
c000db48:	56                   	push   esi
c000db49:	53                   	push   ebx
c000db4a:	83 ec 28             	sub    esp,0x28
c000db4d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db51:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db55:	50                   	push   eax
c000db56:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db5a:	50                   	push   eax
c000db5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db5f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db63:	56                   	push   esi
c000db64:	e8 75 fe ff ff       	call   c000d9de <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db69:	83 c4 20             	add    esp,0x20
c000db6c:	85 c0                	test   eax,eax
c000db6e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db72:	74 35                	je     c000dba9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db74:	89 c7                	mov    edi,eax
c000db76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db7a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000db7e:	39 d8                	cmp    eax,ebx
c000db80:	7e 27                	jle    c000dba9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db82:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000db86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db8a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db8e:	39 e8                	cmp    eax,ebp
c000db90:	7e 14                	jle    c000dba6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000db92:	8b 06                	mov    eax,DWORD PTR [esi]
c000db94:	83 c7 04             	add    edi,0x4
c000db97:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000db9a:	53                   	push   ebx
c000db9b:	55                   	push   ebp
c000db9c:	45                   	inc    ebp
c000db9d:	56                   	push   esi
c000db9e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dba1:	83 c4 10             	add    esp,0x10
c000dba4:	eb e0                	jmp    c000db86 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dba6:	43                   	inc    ebx
c000dba7:	eb cd                	jmp    c000db76 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dba9:	83 c4 1c             	add    esp,0x1c
c000dbac:	5b                   	pop    ebx
c000dbad:	5e                   	pop    esi
c000dbae:	5f                   	pop    edi
c000dbaf:	5d                   	pop    ebp
c000dbb0:	c3                   	ret    
c000dbb1:	66 90                	xchg   ax,ax
c000dbb3:	90                   	nop

c000dbb4 <ACPI::close(int, int, void*)>:
c000dbb4:	83 ec 1c             	sub    esp,0x1c
c000dbb7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dbbf:	74 0b                	je     c000dbcc <ACPI::close(int, int, void*)+0x18>
c000dbc1:	b8 00 00 00 00       	mov    eax,0x0
c000dbc6:	e9 9d 00 00 00       	jmp    c000dc68 <ACPI::close(int, int, void*)+0xb4>
c000dbcb:	90                   	nop
c000dbcc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dbd1:	75 29                	jne    c000dbfc <ACPI::close(int, int, void*)+0x48>
c000dbd3:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000dbd8:	85 c0                	test   eax,eax
c000dbda:	74 08                	je     c000dbe4 <ACPI::close(int, int, void*)+0x30>
c000dbdc:	a1 88 2a 02 c0       	mov    eax,ds:0xc0022a88
c000dbe1:	ff d0                	call   eax
c000dbe3:	90                   	nop
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	68 e4 dd 01 c0       	push   0xc001dde4
c000dbec:	e8 46 25 00 00       	call   c0010137 <KePanic(char const*)>
c000dbf1:	83 c4 10             	add    esp,0x10
c000dbf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbf9:	eb 6d                	jmp    c000dc68 <ACPI::close(int, int, void*)+0xb4>
c000dbfb:	90                   	nop
c000dbfc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc01:	75 5d                	jne    c000dc60 <ACPI::close(int, int, void*)+0xac>
c000dc03:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000dc08:	85 c0                	test   eax,eax
c000dc0a:	74 08                	je     c000dc14 <ACPI::close(int, int, void*)+0x60>
c000dc0c:	a1 84 2a 02 c0       	mov    eax,ds:0xc0022a84
c000dc11:	ff d0                	call   eax
c000dc13:	90                   	nop
c000dc14:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc19:	8d 76 00             	lea    esi,[esi+0x0]
c000dc1c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc20:	25 ff 00 00 00       	and    eax,0xff
c000dc25:	83 e0 02             	and    eax,0x2
c000dc28:	74 1e                	je     c000dc48 <ACPI::close(int, int, void*)+0x94>
c000dc2a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc35:	89 c2                	mov    edx,eax
c000dc37:	ec                   	in     al,dx
c000dc38:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc3c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc40:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc44:	eb d6                	jmp    c000dc1c <ACPI::close(int, int, void*)+0x68>
c000dc46:	66 90                	xchg   ax,ax
c000dc48:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc4f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc54:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc5c:	ee                   	out    dx,al
c000dc5d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc65:	8d 76 00             	lea    esi,[esi+0x0]
c000dc68:	83 c4 1c             	add    esp,0x1c
c000dc6b:	c3                   	ret    

c000dc6c <findRSDP()>:
c000dc6c:	83 ec 1c             	sub    esp,0x1c
c000dc6f:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000dc74:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc7a:	83 e0 04             	and    eax,0x4
c000dc7d:	84 c0                	test   al,al
c000dc7f:	75 07                	jne    c000dc88 <findRSDP()+0x1c>
c000dc81:	b8 00 00 00 00       	mov    eax,0x0
c000dc86:	eb 70                	jmp    c000dcf8 <findRSDP()+0x8c>
c000dc88:	a1 c8 04 02 c0       	mov    eax,ds:0xc00204c8
c000dc8d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dc92:	7f 1c                	jg     c000dcb0 <findRSDP()+0x44>
c000dc94:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000dc99:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dc9f:	83 e2 fb             	and    edx,0xfffffffb
c000dca2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dca8:	b8 00 00 00 00       	mov    eax,0x0
c000dcad:	eb 49                	jmp    c000dcf8 <findRSDP()+0x8c>
c000dcaf:	90                   	nop
c000dcb0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dcb8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dcc0:	77 2e                	ja     c000dcf0 <findRSDP()+0x84>
c000dcc2:	83 ec 04             	sub    esp,0x4
c000dcc5:	6a 08                	push   0x8
c000dcc7:	68 7f de 01 c0       	push   0xc001de7f
c000dccc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcd0:	e8 bb 26 ff ff       	call   c0000390 <memcmp>
c000dcd5:	83 c4 10             	add    esp,0x10
c000dcd8:	85 c0                	test   eax,eax
c000dcda:	0f 94 c0             	sete   al
c000dcdd:	84 c0                	test   al,al
c000dcdf:	74 07                	je     c000dce8 <findRSDP()+0x7c>
c000dce1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dce5:	eb 11                	jmp    c000dcf8 <findRSDP()+0x8c>
c000dce7:	90                   	nop
c000dce8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dced:	eb c9                	jmp    c000dcb8 <findRSDP()+0x4c>
c000dcef:	90                   	nop
c000dcf0:	b8 00 00 00 00       	mov    eax,0x0
c000dcf5:	8d 76 00             	lea    esi,[esi+0x0]
c000dcf8:	83 c4 1c             	add    esp,0x1c
c000dcfb:	c3                   	ret    

c000dcfc <loadACPITables(unsigned char*)>:
c000dcfc:	57                   	push   edi
c000dcfd:	56                   	push   esi
c000dcfe:	53                   	push   ebx
c000dcff:	83 ec 60             	sub    esp,0x60
c000dd02:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000dd07:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd0d:	83 e0 04             	and    eax,0x4
c000dd10:	84 c0                	test   al,al
c000dd12:	0f 84 3c 02 00 00    	je     c000df54 <loadACPITables(unsigned char*)+0x258>
c000dd18:	a0 a0 2c 02 c0       	mov    al,ds:0xc0022ca0
c000dd1d:	84 c0                	test   al,al
c000dd1f:	74 77                	je     c000dd98 <loadACPITables(unsigned char*)+0x9c>
c000dd21:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd25:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd29:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd30:	83 e8 24             	sub    eax,0x24
c000dd33:	c1 e8 03             	shr    eax,0x3
c000dd36:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd3a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd42:	66 90                	xchg   ax,ax
c000dd44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd48:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd4c:	0f 8d b6 00 00 00    	jge    c000de08 <loadACPITables(unsigned char*)+0x10c>
c000dd52:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd56:	83 c0 24             	add    eax,0x24
c000dd59:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd5d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd61:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd65:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd69:	c1 e0 03             	shl    eax,0x3
c000dd6c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd70:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd74:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd77:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd79:	89 c1                	mov    ecx,eax
c000dd7b:	a1 8c 2a 02 c0       	mov    eax,ds:0xc0022a8c
c000dd80:	8d 50 01             	lea    edx,[eax+0x1]
c000dd83:	89 15 8c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a8c,edx
c000dd89:	89 ca                	mov    edx,ecx
c000dd8b:	89 14 c5 a4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd55c],edx
c000dd92:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dd96:	eb ac                	jmp    c000dd44 <loadACPITables(unsigned char*)+0x48>
c000dd98:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dda0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dda4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dda7:	83 e8 24             	sub    eax,0x24
c000ddaa:	c1 e8 02             	shr    eax,0x2
c000ddad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ddb1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ddb9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddbc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ddc0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ddc4:	7d 42                	jge    c000de08 <loadACPITables(unsigned char*)+0x10c>
c000ddc6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddca:	83 c0 24             	add    eax,0x24
c000ddcd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ddd1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ddd5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ddd9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dddd:	c1 e0 02             	shl    eax,0x2
c000dde0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dde4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dde8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ddea:	a1 8c 2a 02 c0       	mov    eax,ds:0xc0022a8c
c000ddef:	8d 50 01             	lea    edx,[eax+0x1]
c000ddf2:	89 15 8c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a8c,edx
c000ddf8:	89 ca                	mov    edx,ecx
c000ddfa:	89 14 c5 a4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd55c],edx
c000de01:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de05:	eb b5                	jmp    c000ddbc <loadACPITables(unsigned char*)+0xc0>
c000de07:	90                   	nop
c000de08:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de10:	a1 8c 2a 02 c0       	mov    eax,ds:0xc0022a8c
c000de15:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de19:	0f 8d 39 01 00 00    	jge    c000df58 <loadACPITables(unsigned char*)+0x25c>
c000de1f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de23:	8b 04 c5 a4 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd55c]
c000de2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de3a:	25 ff 0f 00 00       	and    eax,0xfff
c000de3f:	89 c6                	mov    esi,eax
c000de41:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c000de47:	83 ec 0c             	sub    esp,0xc
c000de4a:	6a 01                	push   0x1
c000de4c:	e8 b0 b3 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000de51:	83 c4 10             	add    esp,0x10
c000de54:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de58:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de5e:	83 ec 0c             	sub    esp,0xc
c000de61:	6a 01                	push   0x1
c000de63:	6a 01                	push   0x1
c000de65:	50                   	push   eax
c000de66:	52                   	push   edx
c000de67:	53                   	push   ebx
c000de68:	e8 23 bd ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de6d:	83 c4 20             	add    esp,0x20
c000de70:	09 f0                	or     eax,esi
c000de72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de76:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de7a:	c1 e0 03             	shl    eax,0x3
c000de7d:	05 a0 2a 02 c0       	add    eax,0xc0022aa0
c000de82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de8e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000de96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dea2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dea6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000deaa:	89 c6                	mov    esi,eax
c000deac:	89 d7                	mov    edi,edx
c000deae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000deb0:	89 c8                	mov    eax,ecx
c000deb2:	89 fa                	mov    edx,edi
c000deb4:	89 f3                	mov    ebx,esi
c000deb6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000deba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000debe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dec2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dec6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dec9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000decd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ded1:	05 00 10 00 00       	add    eax,0x1000
c000ded6:	c1 e8 0c             	shr    eax,0xc
c000ded9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dedd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dee1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dee5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dee9:	25 ff 0f 00 00       	and    eax,0xfff
c000deee:	89 c6                	mov    esi,eax
c000def0:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000defd:	e8 ff b2 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000df02:	83 c4 10             	add    esp,0x10
c000df05:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df09:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df0f:	83 ec 0c             	sub    esp,0xc
c000df12:	6a 01                	push   0x1
c000df14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df18:	50                   	push   eax
c000df19:	52                   	push   edx
c000df1a:	53                   	push   ebx
c000df1b:	e8 70 bc ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df20:	83 c4 20             	add    esp,0x20
c000df23:	09 f0                	or     eax,esi
c000df25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df2d:	83 ec 0c             	sub    esp,0xc
c000df30:	50                   	push   eax
c000df31:	e8 fb b5 ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c000df36:	83 c4 10             	add    esp,0x10
c000df39:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df3d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df41:	89 14 c5 a4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd55c],edx
c000df48:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df4c:	e9 bf fe ff ff       	jmp    c000de10 <loadACPITables(unsigned char*)+0x114>
c000df51:	8d 76 00             	lea    esi,[esi+0x0]
c000df54:	90                   	nop
c000df55:	8d 76 00             	lea    esi,[esi+0x0]
c000df58:	83 c4 60             	add    esp,0x60
c000df5b:	5b                   	pop    ebx
c000df5c:	5e                   	pop    esi
c000df5d:	5f                   	pop    edi
c000df5e:	c3                   	ret    
c000df5f:	90                   	nop

c000df60 <findRSDT(unsigned char*)>:
c000df60:	57                   	push   edi
c000df61:	56                   	push   esi
c000df62:	53                   	push   ebx
c000df63:	83 ec 50             	sub    esp,0x50
c000df66:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000df6b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df71:	83 e0 04             	and    eax,0x4
c000df74:	84 c0                	test   al,al
c000df76:	75 0c                	jne    c000df84 <findRSDT(unsigned char*)+0x24>
c000df78:	b8 00 00 00 00       	mov    eax,0x0
c000df7d:	e9 26 01 00 00       	jmp    c000e0a8 <findRSDT(unsigned char*)+0x148>
c000df82:	66 90                	xchg   ax,ax
c000df84:	89 e0                	mov    eax,esp
c000df86:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df8a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000df8e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df92:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000df9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfa2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfa6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000dfaa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dfae:	89 c6                	mov    esi,eax
c000dfb0:	89 d7                	mov    edi,edx
c000dfb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfb4:	89 c8                	mov    eax,ecx
c000dfb6:	89 fa                	mov    edx,edi
c000dfb8:	89 f3                	mov    ebx,esi
c000dfba:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000dfbe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dfc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfc6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfca:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000dfce:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000dfd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfde:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dfea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dfee:	25 ff 0f 00 00       	and    eax,0xfff
c000dff3:	89 c6                	mov    esi,eax
c000dff5:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c000dffb:	83 ec 0c             	sub    esp,0xc
c000dffe:	6a 02                	push   0x2
c000e000:	e8 fc b1 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000e005:	83 c4 10             	add    esp,0x10
c000e008:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e00c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e012:	83 ec 0c             	sub    esp,0xc
c000e015:	6a 01                	push   0x1
c000e017:	6a 02                	push   0x2
c000e019:	50                   	push   eax
c000e01a:	52                   	push   edx
c000e01b:	53                   	push   ebx
c000e01c:	e8 6f bb ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e021:	83 c4 20             	add    esp,0x20
c000e024:	09 f0                	or     eax,esi
c000e026:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e02a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e02e:	25 ff 0f 00 00       	and    eax,0xfff
c000e033:	89 c6                	mov    esi,eax
c000e035:	8b 1d 90 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020590
c000e03b:	83 ec 0c             	sub    esp,0xc
c000e03e:	6a 02                	push   0x2
c000e040:	e8 bc b1 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000e045:	83 c4 10             	add    esp,0x10
c000e048:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e04c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e052:	83 ec 0c             	sub    esp,0xc
c000e055:	6a 01                	push   0x1
c000e057:	6a 02                	push   0x2
c000e059:	50                   	push   eax
c000e05a:	52                   	push   edx
c000e05b:	53                   	push   ebx
c000e05c:	e8 2f bb ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e061:	83 c4 20             	add    esp,0x20
c000e064:	09 f0                	or     eax,esi
c000e066:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e06a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e06f:	75 13                	jne    c000e084 <findRSDT(unsigned char*)+0x124>
c000e071:	c6 05 a0 2c 02 c0 00 	mov    BYTE PTR ds:0xc0022ca0,0x0
c000e078:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e07c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e080:	eb 22                	jmp    c000e0a4 <findRSDT(unsigned char*)+0x144>
c000e082:	66 90                	xchg   ax,ax
c000e084:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e089:	75 11                	jne    c000e09c <findRSDT(unsigned char*)+0x13c>
c000e08b:	c6 05 a0 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022ca0,0x1
c000e092:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e096:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e09a:	eb 08                	jmp    c000e0a4 <findRSDT(unsigned char*)+0x144>
c000e09c:	b8 00 00 00 00       	mov    eax,0x0
c000e0a1:	eb 05                	jmp    c000e0a8 <findRSDT(unsigned char*)+0x148>
c000e0a3:	90                   	nop
c000e0a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0a8:	83 c4 50             	add    esp,0x50
c000e0ab:	5b                   	pop    ebx
c000e0ac:	5e                   	pop    esi
c000e0ad:	5f                   	pop    edi
c000e0ae:	c3                   	ret    
c000e0af:	90                   	nop

c000e0b0 <findDataTable(unsigned char*, char*)>:
c000e0b0:	83 ec 1c             	sub    esp,0x1c
c000e0b3:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e0b8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0be:	83 e0 04             	and    eax,0x4
c000e0c1:	84 c0                	test   al,al
c000e0c3:	75 07                	jne    c000e0cc <findDataTable(unsigned char*, char*)+0x1c>
c000e0c5:	b8 00 00 00 00       	mov    eax,0x0
c000e0ca:	eb 58                	jmp    c000e124 <findDataTable(unsigned char*, char*)+0x74>
c000e0cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0d4:	a1 8c 2a 02 c0       	mov    eax,ds:0xc0022a8c
c000e0d9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e0dd:	7d 3d                	jge    c000e11c <findDataTable(unsigned char*, char*)+0x6c>
c000e0df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0e3:	c1 e0 03             	shl    eax,0x3
c000e0e6:	05 a0 2a 02 c0       	add    eax,0xc0022aa0
c000e0eb:	83 ec 04             	sub    esp,0x4
c000e0ee:	6a 04                	push   0x4
c000e0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0f4:	50                   	push   eax
c000e0f5:	e8 96 22 ff ff       	call   c0000390 <memcmp>
c000e0fa:	83 c4 10             	add    esp,0x10
c000e0fd:	85 c0                	test   eax,eax
c000e0ff:	0f 94 c0             	sete   al
c000e102:	84 c0                	test   al,al
c000e104:	74 0e                	je     c000e114 <findDataTable(unsigned char*, char*)+0x64>
c000e106:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e10a:	8b 04 c5 a4 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd55c]
c000e111:	eb 11                	jmp    c000e124 <findDataTable(unsigned char*, char*)+0x74>
c000e113:	90                   	nop
c000e114:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e118:	eb ba                	jmp    c000e0d4 <findDataTable(unsigned char*, char*)+0x24>
c000e11a:	66 90                	xchg   ax,ax
c000e11c:	b8 00 00 00 00       	mov    eax,0x0
c000e121:	8d 76 00             	lea    esi,[esi+0x0]
c000e124:	83 c4 1c             	add    esp,0x1c
c000e127:	c3                   	ret    

c000e128 <scanMADT()>:
c000e128:	53                   	push   ebx
c000e129:	83 ec 38             	sub    esp,0x38
c000e12c:	a1 b0 04 02 c0       	mov    eax,ds:0xc00204b0
c000e131:	25 00 04 00 00       	and    eax,0x400
c000e136:	74 14                	je     c000e14c <scanMADT()+0x24>
c000e138:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e13d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e143:	83 e2 fb             	and    edx,0xfffffffb
c000e146:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e14c:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e151:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e157:	83 e0 04             	and    eax,0x4
c000e15a:	84 c0                	test   al,al
c000e15c:	0f 84 8a 04 00 00    	je     c000e5ec <scanMADT()+0x4c4>
c000e162:	e8 05 fb ff ff       	call   c000dc6c <findRSDP()>
c000e167:	a3 ac 2c 02 c0       	mov    ds:0xc0022cac,eax
c000e16c:	a1 ac 2c 02 c0       	mov    eax,ds:0xc0022cac
c000e171:	85 c0                	test   eax,eax
c000e173:	75 1b                	jne    c000e190 <scanMADT()+0x68>
c000e175:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e17a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e180:	83 e2 fb             	and    edx,0xfffffffb
c000e183:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e189:	e9 66 04 00 00       	jmp    c000e5f4 <scanMADT()+0x4cc>
c000e18e:	66 90                	xchg   ax,ax
c000e190:	a1 ac 2c 02 c0       	mov    eax,ds:0xc0022cac
c000e195:	83 ec 0c             	sub    esp,0xc
c000e198:	50                   	push   eax
c000e199:	e8 c2 fd ff ff       	call   c000df60 <findRSDT(unsigned char*)>
c000e19e:	83 c4 10             	add    esp,0x10
c000e1a1:	a3 a8 2c 02 c0       	mov    ds:0xc0022ca8,eax
c000e1a6:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c000e1ab:	85 c0                	test   eax,eax
c000e1ad:	75 19                	jne    c000e1c8 <scanMADT()+0xa0>
c000e1af:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e1b4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1ba:	83 e2 fb             	and    edx,0xfffffffb
c000e1bd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1c3:	e9 2c 04 00 00       	jmp    c000e5f4 <scanMADT()+0x4cc>
c000e1c8:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c000e1cd:	83 ec 0c             	sub    esp,0xc
c000e1d0:	50                   	push   eax
c000e1d1:	e8 26 fb ff ff       	call   c000dcfc <loadACPITables(unsigned char*)>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c000e1de:	83 ec 08             	sub    esp,0x8
c000e1e1:	68 88 de 01 c0       	push   0xc001de88
c000e1e6:	50                   	push   eax
c000e1e7:	e8 c4 fe ff ff       	call   c000e0b0 <findDataTable(unsigned char*, char*)>
c000e1ec:	83 c4 10             	add    esp,0x10
c000e1ef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e1f3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e1f8:	75 1a                	jne    c000e214 <scanMADT()+0xec>
c000e1fa:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e1ff:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e205:	83 e2 fe             	and    edx,0xfffffffe
c000e208:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e20e:	e9 e1 03 00 00       	jmp    c000e5f4 <scanMADT()+0x4cc>
c000e213:	90                   	nop
c000e214:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e21c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e220:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e223:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e227:	0f 87 c7 03 00 00    	ja     c000e5f4 <scanMADT()+0x4cc>
c000e22d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e235:	0f 87 b9 03 00 00    	ja     c000e5f4 <scanMADT()+0x4cc>
c000e23b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e23f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e243:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e247:	8d 50 01             	lea    edx,[eax+0x1]
c000e24a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e24e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e252:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e256:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e25a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e25e:	8d 50 01             	lea    edx,[eax+0x1]
c000e261:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e265:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e269:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e26d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e271:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e276:	0f 86 74 03 00 00    	jbe    c000e5f0 <scanMADT()+0x4c8>
c000e27c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e281:	75 5d                	jne    c000e2e0 <scanMADT()+0x1b8>
c000e283:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e287:	8d 50 01             	lea    edx,[eax+0x1]
c000e28a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e28e:	8a 15 a0 2e 02 c0    	mov    dl,BYTE PTR ds:0xc0022ea0
c000e294:	81 e2 ff 00 00 00    	and    edx,0xff
c000e29a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e29e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2a2:	88 82 e0 2e 02 c0    	mov    BYTE PTR [edx-0x3ffdd120],al
c000e2a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2ac:	8d 42 01             	lea    eax,[edx+0x1]
c000e2af:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2b3:	a0 a0 2e 02 c0       	mov    al,ds:0xc0022ea0
c000e2b8:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2bb:	88 0d a0 2e 02 c0    	mov    BYTE PTR ds:0xc0022ea0,cl
c000e2c1:	25 ff 00 00 00       	and    eax,0xff
c000e2c6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2ca:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e2ce:	88 90 c0 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd140],dl
c000e2d4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e2d9:	e9 f6 02 00 00       	jmp    c000e5d4 <scanMADT()+0x4ac>
c000e2de:	66 90                	xchg   ax,ax
c000e2e0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e2e5:	0f 85 29 01 00 00    	jne    c000e414 <scanMADT()+0x2ec>
c000e2eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2ef:	8d 50 01             	lea    edx,[eax+0x1]
c000e2f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2f6:	8a 15 60 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022d60
c000e2fc:	81 e2 ff 00 00 00    	and    edx,0xff
c000e302:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e306:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e30a:	88 82 80 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd280],al
c000e310:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e314:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e318:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e31c:	01 d0                	add    eax,edx
c000e31e:	83 c0 2c             	add    eax,0x2c
c000e321:	8a 00                	mov    al,BYTE PTR [eax]
c000e323:	31 d2                	xor    edx,edx
c000e325:	88 c2                	mov    dl,al
c000e327:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e32b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e32e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e332:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e336:	25 ff 00 00 00       	and    eax,0xff
c000e33b:	c1 e0 08             	shl    eax,0x8
c000e33e:	89 d1                	mov    ecx,edx
c000e340:	09 c1                	or     ecx,eax
c000e342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e346:	8d 50 02             	lea    edx,[eax+0x2]
c000e349:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e34d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e351:	25 ff 00 00 00       	and    eax,0xff
c000e356:	c1 e0 10             	shl    eax,0x10
c000e359:	09 c1                	or     ecx,eax
c000e35b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e35f:	8d 50 03             	lea    edx,[eax+0x3]
c000e362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e366:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e36a:	25 ff 00 00 00       	and    eax,0xff
c000e36f:	c1 e0 18             	shl    eax,0x18
c000e372:	09 c1                	or     ecx,eax
c000e374:	89 ca                	mov    edx,ecx
c000e376:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000e37b:	25 ff 00 00 00       	and    eax,0xff
c000e380:	89 14 85 a0 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd260],edx
c000e387:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e38c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e390:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e394:	01 d0                	add    eax,edx
c000e396:	83 c0 2c             	add    eax,0x2c
c000e399:	8a 00                	mov    al,BYTE PTR [eax]
c000e39b:	31 d2                	xor    edx,edx
c000e39d:	88 c2                	mov    dl,al
c000e39f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3a3:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3aa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3ae:	25 ff 00 00 00       	and    eax,0xff
c000e3b3:	c1 e0 08             	shl    eax,0x8
c000e3b6:	89 d1                	mov    ecx,edx
c000e3b8:	09 c1                	or     ecx,eax
c000e3ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3be:	8d 50 02             	lea    edx,[eax+0x2]
c000e3c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3c5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3c9:	25 ff 00 00 00       	and    eax,0xff
c000e3ce:	c1 e0 10             	shl    eax,0x10
c000e3d1:	09 c1                	or     ecx,eax
c000e3d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3d7:	8d 50 03             	lea    edx,[eax+0x3]
c000e3da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3e2:	25 ff 00 00 00       	and    eax,0xff
c000e3e7:	c1 e0 18             	shl    eax,0x18
c000e3ea:	09 c1                	or     ecx,eax
c000e3ec:	89 ca                	mov    edx,ecx
c000e3ee:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000e3f3:	25 ff 00 00 00       	and    eax,0xff
c000e3f8:	89 14 85 20 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd1e0],edx
c000e3ff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e404:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000e409:	40                   	inc    eax
c000e40a:	a2 60 2d 02 c0       	mov    ds:0xc0022d60,al
c000e40f:	e9 c0 01 00 00       	jmp    c000e5d4 <scanMADT()+0x4ac>
c000e414:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e419:	0f 85 fd 00 00 00    	jne    c000e51c <scanMADT()+0x3f4>
c000e41f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e423:	8d 50 01             	lea    edx,[eax+0x1]
c000e426:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e42a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e42e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e432:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e436:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e43a:	8d 50 01             	lea    edx,[eax+0x1]
c000e43d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e441:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e445:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e449:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e44d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e451:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e455:	01 d0                	add    eax,edx
c000e457:	83 c0 2c             	add    eax,0x2c
c000e45a:	8a 00                	mov    al,BYTE PTR [eax]
c000e45c:	31 d2                	xor    edx,edx
c000e45e:	88 c2                	mov    dl,al
c000e460:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e464:	8d 48 01             	lea    ecx,[eax+0x1]
c000e467:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e46b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e46f:	25 ff 00 00 00       	and    eax,0xff
c000e474:	c1 e0 08             	shl    eax,0x8
c000e477:	89 d1                	mov    ecx,edx
c000e479:	09 c1                	or     ecx,eax
c000e47b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e47f:	8d 50 02             	lea    edx,[eax+0x2]
c000e482:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e486:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e48a:	25 ff 00 00 00       	and    eax,0xff
c000e48f:	c1 e0 10             	shl    eax,0x10
c000e492:	09 c1                	or     ecx,eax
c000e494:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e498:	8d 50 03             	lea    edx,[eax+0x3]
c000e49b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e49f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4a3:	25 ff 00 00 00       	and    eax,0xff
c000e4a8:	c1 e0 18             	shl    eax,0x18
c000e4ab:	09 c8                	or     eax,ecx
c000e4ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4b1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4be:	01 d0                	add    eax,edx
c000e4c0:	83 c0 2c             	add    eax,0x2c
c000e4c3:	8a 00                	mov    al,BYTE PTR [eax]
c000e4c5:	25 ff 00 00 00       	and    eax,0xff
c000e4ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e4ce:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e4d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4d5:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e4d9:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4df:	c1 e2 08             	shl    edx,0x8
c000e4e2:	09 d0                	or     eax,edx
c000e4e4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e4e9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e4ee:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4f2:	25 ff 00 00 00       	and    eax,0xff
c000e4f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4fb:	88 90 c0 f1 01 c0    	mov    BYTE PTR [eax-0x3ffe0e40],dl
c000e501:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e505:	31 d2                	xor    edx,edx
c000e507:	88 c2                	mov    dl,al
c000e509:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e50e:	66 89 84 12 40 2d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd2c0],ax
c000e516:	e9 b9 00 00 00       	jmp    c000e5d4 <scanMADT()+0x4ac>
c000e51b:	90                   	nop
c000e51c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e521:	0f 85 a1 00 00 00    	jne    c000e5c8 <scanMADT()+0x4a0>
c000e527:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e52b:	8d 50 01             	lea    edx,[eax+0x1]
c000e52e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e532:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e536:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e53a:	25 ff 00 00 00       	and    eax,0xff
c000e53f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e543:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e547:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e54b:	01 d0                	add    eax,edx
c000e54d:	83 c0 2c             	add    eax,0x2c
c000e550:	8a 00                	mov    al,BYTE PTR [eax]
c000e552:	31 d2                	xor    edx,edx
c000e554:	88 c2                	mov    dl,al
c000e556:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e55a:	8d 48 01             	lea    ecx,[eax+0x1]
c000e55d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e561:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e565:	25 ff 00 00 00       	and    eax,0xff
c000e56a:	c1 e0 08             	shl    eax,0x8
c000e56d:	09 d0                	or     eax,edx
c000e56f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e573:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e578:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e57c:	8d 50 01             	lea    edx,[eax+0x1]
c000e57f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e583:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e587:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e58b:	25 ff 00 00 00       	and    eax,0xff
c000e590:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e598:	c1 e0 08             	shl    eax,0x8
c000e59b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e59f:	89 c1                	mov    ecx,eax
c000e5a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5a5:	c1 e0 18             	shl    eax,0x18
c000e5a8:	89 c3                	mov    ebx,eax
c000e5aa:	a1 b0 2c 02 c0       	mov    eax,ds:0xc0022cb0
c000e5af:	8d 50 01             	lea    edx,[eax+0x1]
c000e5b2:	89 15 b0 2c 02 c0    	mov    DWORD PTR ds:0xc0022cb0,edx
c000e5b8:	09 d9                	or     ecx,ebx
c000e5ba:	89 ca                	mov    edx,ecx
c000e5bc:	89 14 85 c0 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd340],edx
c000e5c3:	eb 0f                	jmp    c000e5d4 <scanMADT()+0x4ac>
c000e5c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e5cd:	75 05                	jne    c000e5d4 <scanMADT()+0x4ac>
c000e5cf:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e5d4:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e5d8:	31 d2                	xor    edx,edx
c000e5da:	88 c2                	mov    dl,al
c000e5dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5e0:	01 d0                	add    eax,edx
c000e5e2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5e6:	e9 31 fc ff ff       	jmp    c000e21c <scanMADT()+0xf4>
c000e5eb:	90                   	nop
c000e5ec:	90                   	nop
c000e5ed:	eb 05                	jmp    c000e5f4 <scanMADT()+0x4cc>
c000e5ef:	90                   	nop
c000e5f0:	90                   	nop
c000e5f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f4:	83 c4 38             	add    esp,0x38
c000e5f7:	5b                   	pop    ebx
c000e5f8:	c3                   	ret    
c000e5f9:	90                   	nop
c000e5fa:	66 90                	xchg   ax,ax

c000e5fc <ACPI::ACPI()>:
c000e5fc:	83 ec 0c             	sub    esp,0xc
c000e5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e603:	83 ec 08             	sub    esp,0x8
c000e606:	68 8d de 01 c0       	push   0xc001de8d
c000e60b:	50                   	push   eax
c000e60c:	e8 1b d4 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000e611:	83 c4 10             	add    esp,0x10
c000e614:	ba c4 df 01 c0       	mov    edx,0xc001dfc4
c000e619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e61d:	89 10                	mov    DWORD PTR [eax],edx
c000e61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e623:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e646:	e8 dd fa ff ff       	call   c000e128 <scanMADT()>
c000e64b:	90                   	nop
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e650:	83 ec 2c             	sub    esp,0x2c
c000e653:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e657:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e65b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e65f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e663:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e668:	88 d0                	mov    al,dl
c000e66a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e66e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e673:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e67b:	90                   	nop
c000e67c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e680:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e686:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e68a:	0f 8d 9c 00 00 00    	jge    c000e72c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e690:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e694:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e698:	83 c2 2a             	add    edx,0x2a
c000e69b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e69f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6a4:	75 7a                	jne    c000e720 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6ae:	83 c2 2a             	add    edx,0x2a
c000e6b1:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e6b5:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e6b9:	75 65                	jne    c000e720 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6bb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e6c0:	74 3a                	je     c000e6fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e6c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6ca:	83 c2 2a             	add    edx,0x2a
c000e6cd:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e6d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6d8:	39 c2                	cmp    edx,eax
c000e6da:	74 10                	je     c000e6ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e6dc:	83 ec 0c             	sub    esp,0xc
c000e6df:	68 08 de 01 c0       	push   0xc001de08
c000e6e4:	e8 4e 1a 00 00       	call   c0010137 <KePanic(char const*)>
c000e6e9:	83 c4 10             	add    esp,0x10
c000e6ec:	83 ec 0c             	sub    esp,0xc
c000e6ef:	68 92 de 01 c0       	push   0xc001de92
c000e6f4:	e8 3e 1a 00 00       	call   c0010137 <KePanic(char const*)>
c000e6f9:	83 c4 10             	add    esp,0x10
c000e6fc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e700:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e704:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e708:	83 c2 2a             	add    edx,0x2a
c000e70b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e70f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e711:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e714:	89 01                	mov    DWORD PTR [ecx],eax
c000e716:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e719:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e71e:	66 90                	xchg   ax,ax
c000e720:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e724:	e9 53 ff ff ff       	jmp    c000e67c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e729:	8d 76 00             	lea    esi,[esi+0x0]
c000e72c:	90                   	nop
c000e72d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e731:	83 c4 2c             	add    esp,0x2c
c000e734:	c2 04 00             	ret    0x4
c000e737:	90                   	nop

c000e738 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e738:	83 ec 1c             	sub    esp,0x1c
c000e73b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e73f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e743:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e747:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e74c:	88 c8                	mov    al,cl
c000e74e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e752:	88 d0                	mov    al,dl
c000e754:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e75c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e766:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e769:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e76d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e775:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e77b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e77f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e786:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e78b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e78f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e795:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e799:	8d 48 01             	lea    ecx,[eax+0x1]
c000e79c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a0:	83 c2 2a             	add    edx,0x2a
c000e7a3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ab:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7b8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7bc:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e7c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7ca:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e7d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7db:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7e1:	3d 00 02 00 00       	cmp    eax,0x200
c000e7e6:	75 10                	jne    c000e7f8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e7e8:	83 ec 0c             	sub    esp,0xc
c000e7eb:	68 a1 de 01 c0       	push   0xc001dea1
c000e7f0:	e8 42 19 00 00       	call   c0010137 <KePanic(char const*)>
c000e7f5:	83 c4 10             	add    esp,0x10
c000e7f8:	90                   	nop
c000e7f9:	83 c4 1c             	add    esp,0x1c
c000e7fc:	c3                   	ret    
c000e7fd:	90                   	nop
c000e7fe:	66 90                	xchg   ax,ax

c000e800 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e800:	b8 00 00 00 00       	mov    eax,0x0
c000e805:	c3                   	ret    
c000e806:	66 90                	xchg   ax,ax

c000e808 <ACPI::detectPCI()>:
c000e808:	53                   	push   ebx
c000e809:	83 ec 28             	sub    esp,0x28
c000e80c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e811:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e816:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000e81b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e821:	83 e0 04             	and    eax,0x4
c000e824:	84 c0                	test   al,al
c000e826:	74 2c                	je     c000e854 <ACPI::detectPCI()+0x4c>
c000e828:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c000e82d:	83 ec 08             	sub    esp,0x8
c000e830:	68 be de 01 c0       	push   0xc001debe
c000e835:	50                   	push   eax
c000e836:	e8 75 f8 ff ff       	call   c000e0b0 <findDataTable(unsigned char*, char*)>
c000e83b:	83 c4 10             	add    esp,0x10
c000e83e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e842:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e847:	74 0b                	je     c000e854 <ACPI::detectPCI()+0x4c>
c000e849:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e84e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e853:	90                   	nop
c000e854:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e85c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e860:	8a 00                	mov    al,BYTE PTR [eax]
c000e862:	3c 01                	cmp    al,0x1
c000e864:	75 0e                	jne    c000e874 <ACPI::detectPCI()+0x6c>
c000e866:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e86b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e870:	eb 2a                	jmp    c000e89c <ACPI::detectPCI()+0x94>
c000e872:	66 90                	xchg   ax,ax
c000e874:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e878:	8a 00                	mov    al,BYTE PTR [eax]
c000e87a:	3c 02                	cmp    al,0x2
c000e87c:	75 1e                	jne    c000e89c <ACPI::detectPCI()+0x94>
c000e87e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e883:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e888:	74 12                	je     c000e89c <ACPI::detectPCI()+0x94>
c000e88a:	83 ec 0c             	sub    esp,0xc
c000e88d:	68 38 de 01 c0       	push   0xc001de38
c000e892:	e8 a0 18 00 00       	call   c0010137 <KePanic(char const*)>
c000e897:	83 c4 10             	add    esp,0x10
c000e89a:	66 90                	xchg   ax,ax
c000e89c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8a0:	83 f0 01             	xor    eax,0x1
c000e8a3:	84 c0                	test   al,al
c000e8a5:	74 41                	je     c000e8e8 <ACPI::detectPCI()+0xe0>
c000e8a7:	e8 84 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e8ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8b0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8b5:	75 0d                	jne    c000e8c4 <ACPI::detectPCI()+0xbc>
c000e8b7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8bc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8c1:	eb 25                	jmp    c000e8e8 <ACPI::detectPCI()+0xe0>
c000e8c3:	90                   	nop
c000e8c4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e8c9:	75 1d                	jne    c000e8e8 <ACPI::detectPCI()+0xe0>
c000e8cb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8d0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8d5:	74 11                	je     c000e8e8 <ACPI::detectPCI()+0xe0>
c000e8d7:	83 ec 0c             	sub    esp,0xc
c000e8da:	68 38 de 01 c0       	push   0xc001de38
c000e8df:	e8 53 18 00 00       	call   c0010137 <KePanic(char const*)>
c000e8e4:	83 c4 10             	add    esp,0x10
c000e8e7:	90                   	nop
c000e8e8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e8ed:	0f 84 85 00 00 00    	je     c000e978 <ACPI::detectPCI()+0x170>
c000e8f3:	83 ec 0c             	sub    esp,0xc
c000e8f6:	68 c3 de 01 c0       	push   0xc001dec3
c000e8fb:	e8 bf 11 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c000e900:	83 c4 10             	add    esp,0x10
c000e903:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e90b:	83 ec 0c             	sub    esp,0xc
c000e90e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e912:	e8 a2 8e ff ff       	call   c00077b9 <malloc>
c000e917:	83 c4 10             	add    esp,0x10
c000e91a:	89 c3                	mov    ebx,eax
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	53                   	push   ebx
c000e920:	e8 c9 96 00 00       	call   c0017fee <PCI::PCI()>
c000e925:	83 c4 10             	add    esp,0x10
c000e928:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e92c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e930:	83 ec 08             	sub    esp,0x8
c000e933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e937:	50                   	push   eax
c000e938:	e8 57 cf ff ff       	call   c000b894 <Device::addChild(Device*)>
c000e93d:	83 c4 10             	add    esp,0x10
c000e940:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e944:	8b 00                	mov    eax,DWORD PTR [eax]
c000e946:	83 c0 08             	add    eax,0x8
c000e949:	8b 00                	mov    eax,DWORD PTR [eax]
c000e94b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e950:	74 0a                	je     c000e95c <ACPI::detectPCI()+0x154>
c000e952:	ba 01 00 00 00       	mov    edx,0x1
c000e957:	eb 0b                	jmp    c000e964 <ACPI::detectPCI()+0x15c>
c000e959:	8d 76 00             	lea    esi,[esi+0x0]
c000e95c:	ba 02 00 00 00       	mov    edx,0x2
c000e961:	8d 76 00             	lea    esi,[esi+0x0]
c000e964:	6a 00                	push   0x0
c000e966:	6a 00                	push   0x0
c000e968:	52                   	push   edx
c000e969:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e96d:	ff d0                	call   eax
c000e96f:	83 c4 10             	add    esp,0x10
c000e972:	e9 91 00 00 00       	jmp    c000ea08 <ACPI::detectPCI()+0x200>
c000e977:	90                   	nop
c000e978:	83 ec 0c             	sub    esp,0xc
c000e97b:	68 db de 01 c0       	push   0xc001dedb
c000e980:	e8 3a 11 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c000e985:	83 c4 10             	add    esp,0x10
c000e988:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e98f:	83 ec 0c             	sub    esp,0xc
c000e992:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e996:	e8 1e 8e ff ff       	call   c00077b9 <malloc>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	89 c3                	mov    ebx,eax
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	53                   	push   ebx
c000e9a4:	e8 71 a1 00 00       	call   c0018b1a <IDE::IDE()>
c000e9a9:	83 c4 10             	add    esp,0x10
c000e9ac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e9b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9b4:	83 ec 08             	sub    esp,0x8
c000e9b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9bb:	50                   	push   eax
c000e9bc:	e8 d3 ce ff ff       	call   c000b894 <Device::addChild(Device*)>
c000e9c1:	83 c4 10             	add    esp,0x10
c000e9c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9c8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e9d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9d6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000e9df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9e3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000e9ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9f2:	83 c0 08             	add    eax,0x8
c000e9f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9f7:	6a 00                	push   0x0
c000e9f9:	6a 00                	push   0x0
c000e9fb:	6a 00                	push   0x0
c000e9fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea01:	ff d0                	call   eax
c000ea03:	83 c4 10             	add    esp,0x10
c000ea06:	66 90                	xchg   ax,ax
c000ea08:	90                   	nop
c000ea09:	83 c4 28             	add    esp,0x28
c000ea0c:	5b                   	pop    ebx
c000ea0d:	c3                   	ret    
c000ea0e:	66 90                	xchg   ax,ax

c000ea10 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea10:	83 ec 1c             	sub    esp,0x1c
c000ea13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea17:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea1e:	8b 15 98 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020498
c000ea24:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea28:	25 ff 00 00 00       	and    eax,0xff
c000ea2d:	83 ec 08             	sub    esp,0x8
c000ea30:	50                   	push   eax
c000ea31:	52                   	push   edx
c000ea32:	e8 6f 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea37:	83 c4 10             	add    esp,0x10
c000ea3a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea3e:	8b 15 98 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020498
c000ea44:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea48:	25 ff 00 00 00       	and    eax,0xff
c000ea4d:	83 ec 04             	sub    esp,0x4
c000ea50:	6a 01                	push   0x1
c000ea52:	50                   	push   eax
c000ea53:	52                   	push   edx
c000ea54:	e8 63 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea59:	83 c4 10             	add    esp,0x10
c000ea5c:	90                   	nop
c000ea5d:	83 c4 1c             	add    esp,0x1c
c000ea60:	c3                   	ret    
c000ea61:	90                   	nop
c000ea62:	66 90                	xchg   ax,ax

c000ea64 <ACPI::sleep()>:
c000ea64:	83 ec 0c             	sub    esp,0xc
c000ea67:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c000ea6c:	85 c0                	test   eax,eax
c000ea6e:	74 08                	je     c000ea78 <ACPI::sleep()+0x14>
c000ea70:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c000ea75:	ff d0                	call   eax
c000ea77:	90                   	nop
c000ea78:	90                   	nop
c000ea79:	83 c4 0c             	add    esp,0xc
c000ea7c:	c3                   	ret    
c000ea7d:	90                   	nop
c000ea7e:	66 90                	xchg   ax,ax

c000ea80 <ACPI::open(int, int, void*)>:
c000ea80:	57                   	push   edi
c000ea81:	56                   	push   esi
c000ea82:	53                   	push   ebx
c000ea83:	81 ec 70 01 00 00    	sub    esp,0x170
c000ea89:	83 ec 0c             	sub    esp,0xc
c000ea8c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ea93:	e8 70 fd ff ff       	call   c000e808 <ACPI::detectPCI()>
c000ea98:	83 c4 10             	add    esp,0x10
c000ea9b:	83 ec 0c             	sub    esp,0xc
c000ea9e:	68 60 de 01 c0       	push   0xc001de60
c000eaa3:	e8 17 10 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c000eaa8:	83 c4 10             	add    esp,0x10
c000eaab:	83 ec 0c             	sub    esp,0xc
c000eaae:	68 f0 de 01 c0       	push   0xc001def0
c000eab3:	e8 27 34 00 00       	call   c0011edf <Thr::loadKernelSymbolTable(char const*)>
c000eab8:	83 c4 10             	add    esp,0x10
c000eabb:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eac3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ead8:	e8 dc 8c ff ff       	call   c00077b9 <malloc>
c000eadd:	83 c4 10             	add    esp,0x10
c000eae0:	89 c3                	mov    ebx,eax
c000eae2:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c000eae7:	83 ec 04             	sub    esp,0x4
c000eaea:	50                   	push   eax
c000eaeb:	68 0e df 01 c0       	push   0xc001df0e
c000eaf0:	53                   	push   ebx
c000eaf1:	e8 d4 be ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000eaf6:	83 c4 10             	add    esp,0x10
c000eaf9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb00:	83 ec 08             	sub    esp,0x8
c000eb03:	6a 01                	push   0x1
c000eb05:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb0c:	e8 79 bf ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000eb11:	83 c4 10             	add    esp,0x10
c000eb14:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb1b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb23:	75 17                	jne    c000eb3c <ACPI::open(int, int, void*)+0xbc>
c000eb25:	83 ec 0c             	sub    esp,0xc
c000eb28:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb2f:	e8 b4 bf ff ff       	call   c000aae8 <File::close()>
c000eb34:	83 c4 10             	add    esp,0x10
c000eb37:	eb 0b                	jmp    c000eb44 <ACPI::open(int, int, void*)+0xc4>
c000eb39:	8d 76 00             	lea    esi,[esi+0x0]
c000eb3c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb44:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb4c:	74 1e                	je     c000eb6c <ACPI::open(int, int, void*)+0xec>
c000eb4e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb55:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb57:	83 c0 08             	add    eax,0x8
c000eb5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb5c:	83 ec 0c             	sub    esp,0xc
c000eb5f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb66:	ff d0                	call   eax
c000eb68:	83 c4 10             	add    esp,0x10
c000eb6b:	90                   	nop
c000eb6c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb73:	83 f0 01             	xor    eax,0x1
c000eb76:	84 c0                	test   al,al
c000eb78:	74 42                	je     c000ebbc <ACPI::open(int, int, void*)+0x13c>
c000eb7a:	83 ec 0c             	sub    esp,0xc
c000eb7d:	68 2c df 01 c0       	push   0xc001df2c
c000eb82:	e8 38 0f 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c000eb87:	83 c4 10             	add    esp,0x10
c000eb8a:	83 ec 04             	sub    esp,0x4
c000eb8d:	6a 0c                	push   0xc
c000eb8f:	68 47 df 01 c0       	push   0xc001df47
c000eb94:	68 58 df 01 c0       	push   0xc001df58
c000eb99:	e8 6c 29 00 00       	call   c001150a <Reg::readIntWithDefault(char*, char*, int)>
c000eb9e:	83 c4 10             	add    esp,0x10
c000eba1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000eba8:	83 ec 0c             	sub    esp,0xc
c000ebab:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ebb2:	e8 54 a8 ff ff       	call   c000940b <Virt::setupPageSwapping(int)>
c000ebb7:	83 c4 10             	add    esp,0x10
c000ebba:	66 90                	xchg   ax,ax
c000ebbc:	83 ec 0c             	sub    esp,0xc
c000ebbf:	68 d7 cf 01 c0       	push   0xc001cfd7
c000ebc4:	e8 f6 0e 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ebd3:	83 ec 08             	sub    esp,0x8
c000ebd6:	6a 12                	push   0x12
c000ebd8:	50                   	push   eax
c000ebd9:	e8 ce cf ff ff       	call   c000bbac <getDevicesOfType(DeviceType)>
c000ebde:	83 c4 0c             	add    esp,0xc
c000ebe1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebe4:	83 ec 0c             	sub    esp,0xc
c000ebe7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebee:	50                   	push   eax
c000ebef:	e8 28 d8 00 00       	call   c001c41c <LinkedList<Device>::isEmpty()>
c000ebf4:	83 c4 10             	add    esp,0x10
c000ebf7:	83 f0 01             	xor    eax,0x1
c000ebfa:	84 c0                	test   al,al
c000ebfc:	0f 84 46 01 00 00    	je     c000ed48 <ACPI::open(int, int, void*)+0x2c8>
c000ec02:	83 ec 0c             	sub    esp,0xc
c000ec05:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec0c:	50                   	push   eax
c000ec0d:	e8 26 d8 00 00       	call   c001c438 <LinkedList<Device>::getFirstElement()>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec1c:	83 ec 0c             	sub    esp,0xc
c000ec1f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec26:	50                   	push   eax
c000ec27:	e8 14 d8 00 00       	call   c001c440 <LinkedList<Device>::removeFirst()>
c000ec2c:	83 c4 10             	add    esp,0x10
c000ec2f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec36:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec3d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec48:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec4e:	ba 09 00 00 00       	mov    edx,0x9
c000ec53:	fc                   	cld    
c000ec54:	89 c7                	mov    edi,eax
c000ec56:	89 de                	mov    esi,ebx
c000ec58:	89 d1                	mov    ecx,edx
c000ec5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec5c:	83 ec 08             	sub    esp,0x8
c000ec5f:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec63:	50                   	push   eax
c000ec64:	83 ec 24             	sub    esp,0x24
c000ec67:	89 e0                	mov    eax,esp
c000ec69:	89 c3                	mov    ebx,eax
c000ec6b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec6f:	ba 09 00 00 00       	mov    edx,0x9
c000ec74:	89 df                	mov    edi,ebx
c000ec76:	89 c6                	mov    esi,eax
c000ec78:	89 d1                	mov    ecx,edx
c000ec7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec7c:	e8 4f 98 00 00       	call   c00184d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ec81:	83 c4 30             	add    esp,0x30
c000ec84:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ec8b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ec93:	0f 84 4b ff ff ff    	je     c000ebe4 <ACPI::open(int, int, void*)+0x164>
c000ec99:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000eca4:	83 ec 0c             	sub    esp,0xc
c000eca7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ecae:	e8 06 8b ff ff       	call   c00077b9 <malloc>
c000ecb3:	83 c4 10             	add    esp,0x10
c000ecb6:	89 c3                	mov    ebx,eax
c000ecb8:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c000ecbd:	83 ec 04             	sub    esp,0x4
c000ecc0:	50                   	push   eax
c000ecc1:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecc8:	53                   	push   ebx
c000ecc9:	e8 fc bc ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000ecce:	83 c4 10             	add    esp,0x10
c000ecd1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ecd8:	83 ec 0c             	sub    esp,0xc
c000ecdb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ece2:	e8 11 c0 ff ff       	call   c000acf8 <File::exists()>
c000ece7:	83 c4 10             	add    esp,0x10
c000ecea:	84 c0                	test   al,al
c000ecec:	74 2a                	je     c000ed18 <ACPI::open(int, int, void*)+0x298>
c000ecee:	83 ec 08             	sub    esp,0x8
c000ecf1:	6a 01                	push   0x1
c000ecf3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ecfa:	e8 57 3c 00 00       	call   c0012956 <Thr::loadDLL(char const*, bool)>
c000ecff:	83 c4 10             	add    esp,0x10
c000ed02:	83 ec 08             	sub    esp,0x8
c000ed05:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed0c:	50                   	push   eax
c000ed0d:	e8 75 3e 00 00       	call   c0012b87 <Thr::executeDLL(unsigned long, void*)>
c000ed12:	83 c4 10             	add    esp,0x10
c000ed15:	8d 76 00             	lea    esi,[esi+0x0]
c000ed18:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed20:	0f 84 be fe ff ff    	je     c000ebe4 <ACPI::open(int, int, void*)+0x164>
c000ed26:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed2f:	83 c0 08             	add    eax,0x8
c000ed32:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed34:	83 ec 0c             	sub    esp,0xc
c000ed37:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed3e:	ff d0                	call   eax
c000ed40:	83 c4 10             	add    esp,0x10
c000ed43:	e9 9c fe ff ff       	jmp    c000ebe4 <ACPI::open(int, int, void*)+0x164>
c000ed48:	83 ec 0c             	sub    esp,0xc
c000ed4b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed52:	50                   	push   eax
c000ed53:	e8 c0 d6 00 00       	call   c001c418 <LinkedList<Device>::~LinkedList()>
c000ed58:	83 c4 10             	add    esp,0x10
c000ed5b:	8b 1d 98 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020498
c000ed61:	83 ec 08             	sub    esp,0x8
c000ed64:	6a 01                	push   0x1
c000ed66:	68 5f df 01 c0       	push   0xc001df5f
c000ed6b:	e8 e6 3b 00 00       	call   c0012956 <Thr::loadDLL(char const*, bool)>
c000ed70:	83 c4 10             	add    esp,0x10
c000ed73:	83 ec 08             	sub    esp,0x8
c000ed76:	53                   	push   ebx
c000ed77:	50                   	push   eax
c000ed78:	e8 0a 3e 00 00       	call   c0012b87 <Thr::executeDLL(unsigned long, void*)>
c000ed7d:	83 c4 10             	add    esp,0x10
c000ed80:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000ed85:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed8b:	83 e0 04             	and    eax,0x4
c000ed8e:	84 c0                	test   al,al
c000ed90:	0f 84 16 01 00 00    	je     c000eeac <ACPI::open(int, int, void*)+0x42c>
c000ed96:	83 ec 0c             	sub    esp,0xc
c000ed99:	68 7c df 01 c0       	push   0xc001df7c
c000ed9e:	e8 1c 0d 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c000eda3:	83 c4 10             	add    esp,0x10
c000eda6:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000edbb:	e8 f9 89 ff ff       	call   c00077b9 <malloc>
c000edc0:	83 c4 10             	add    esp,0x10
c000edc3:	89 c3                	mov    ebx,eax
c000edc5:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c000edca:	83 ec 04             	sub    esp,0x4
c000edcd:	50                   	push   eax
c000edce:	68 99 df 01 c0       	push   0xc001df99
c000edd3:	53                   	push   ebx
c000edd4:	e8 f1 bb ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000edd9:	83 c4 10             	add    esp,0x10
c000eddc:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ede3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edeb:	74 1b                	je     c000ee08 <ACPI::open(int, int, void*)+0x388>
c000eded:	83 ec 0c             	sub    esp,0xc
c000edf0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000edf7:	e8 fc be ff ff       	call   c000acf8 <File::exists()>
c000edfc:	83 c4 10             	add    esp,0x10
c000edff:	84 c0                	test   al,al
c000ee01:	74 05                	je     c000ee08 <ACPI::open(int, int, void*)+0x388>
c000ee03:	b0 01                	mov    al,0x1
c000ee05:	eb 05                	jmp    c000ee0c <ACPI::open(int, int, void*)+0x38c>
c000ee07:	90                   	nop
c000ee08:	b0 00                	mov    al,0x0
c000ee0a:	66 90                	xchg   ax,ax
c000ee0c:	84 c0                	test   al,al
c000ee0e:	74 28                	je     c000ee38 <ACPI::open(int, int, void*)+0x3b8>
c000ee10:	83 ec 08             	sub    esp,0x8
c000ee13:	6a 01                	push   0x1
c000ee15:	68 99 df 01 c0       	push   0xc001df99
c000ee1a:	e8 37 3b 00 00       	call   c0012956 <Thr::loadDLL(char const*, bool)>
c000ee1f:	83 c4 10             	add    esp,0x10
c000ee22:	83 ec 08             	sub    esp,0x8
c000ee25:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee2c:	50                   	push   eax
c000ee2d:	e8 55 3d 00 00       	call   c0012b87 <Thr::executeDLL(unsigned long, void*)>
c000ee32:	83 c4 10             	add    esp,0x10
c000ee35:	8d 76 00             	lea    esi,[esi+0x0]
c000ee38:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee40:	74 2a                	je     c000ee6c <ACPI::open(int, int, void*)+0x3ec>
c000ee42:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee4a:	74 20                	je     c000ee6c <ACPI::open(int, int, void*)+0x3ec>
c000ee4c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee53:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee55:	83 c0 08             	add    eax,0x8
c000ee58:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee5a:	83 ec 0c             	sub    esp,0xc
c000ee5d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee64:	ff d0                	call   eax
c000ee66:	83 c4 10             	add    esp,0x10
c000ee69:	8d 76 00             	lea    esi,[esi+0x0]
c000ee6c:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c000ee71:	83 ec 08             	sub    esp,0x8
c000ee74:	68 b6 df 01 c0       	push   0xc001dfb6
c000ee79:	50                   	push   eax
c000ee7a:	e8 31 f2 ff ff       	call   c000e0b0 <findDataTable(unsigned char*, char*)>
c000ee7f:	83 c4 10             	add    esp,0x10
c000ee82:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ee89:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ee91:	74 19                	je     c000eeac <ACPI::open(int, int, void*)+0x42c>
c000ee93:	83 ec 08             	sub    esp,0x8
c000ee96:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ee9d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eea4:	e8 67 fb ff ff       	call   c000ea10 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eea9:	83 c4 10             	add    esp,0x10
c000eeac:	b8 00 00 00 00       	mov    eax,0x0
c000eeb1:	81 c4 70 01 00 00    	add    esp,0x170
c000eeb7:	5b                   	pop    ebx
c000eeb8:	5e                   	pop    esi
c000eeb9:	5f                   	pop    edi
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <CPU::close(int, int, void*)>:
c000eebc:	31 c0                	xor    eax,eax
c000eebe:	c3                   	ret    
c000eebf:	90                   	nop

c000eec0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eec0:	60                   	pusha  
c000eec1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eec5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eec9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eecd:	9c                   	pushf  
c000eece:	fa                   	cli    
c000eecf:	0f 09                	wbinvd 
c000eed1:	0f 30                	wrmsr  
c000eed3:	9d                   	popf   
c000eed4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eed8:	89 02                	mov    DWORD PTR [edx],eax
c000eeda:	61                   	popa   
c000eedb:	c3                   	ret    

c000eedc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000eedc:	60                   	pusha  
c000eedd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eee1:	9c                   	pushf  
c000eee2:	fa                   	cli    
c000eee3:	0f 09                	wbinvd 
c000eee5:	31 c0                	xor    eax,eax
c000eee7:	31 d2                	xor    edx,edx
c000eee9:	0f 32                	rdmsr  
c000eeeb:	9d                   	popf   
c000eeec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eef0:	89 02                	mov    DWORD PTR [edx],eax
c000eef2:	61                   	popa   
c000eef3:	c3                   	ret    

c000eef4 <CPU::AMD_K6_writeback(int, int, int)>:
c000eef4:	56                   	push   esi
c000eef5:	53                   	push   ebx
c000eef6:	83 ec 10             	sub    esp,0x10
c000eef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eefd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef02:	75 5d                	jne    c000ef61 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef04:	83 f8 08             	cmp    eax,0x8
c000ef07:	75 09                	jne    c000ef12 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef09:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef0e:	7e 13                	jle    c000ef23 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef10:	eb 30                	jmp    c000ef42 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef12:	83 f8 06             	cmp    eax,0x6
c000ef15:	7c 4a                	jl     c000ef61 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef17:	83 f8 07             	cmp    eax,0x7
c000ef1a:	7e 07                	jle    c000ef23 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef1c:	83 f8 09             	cmp    eax,0x9
c000ef1f:	74 21                	je     c000ef42 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef21:	eb 3e                	jmp    c000ef61 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef23:	89 e6                	mov    esi,esp
c000ef25:	8b 1d bc 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204bc
c000ef2b:	56                   	push   esi
c000ef2c:	c1 eb 15             	shr    ebx,0x15
c000ef2f:	68 82 00 00 c0       	push   0xc0000082
c000ef34:	83 e3 7e             	and    ebx,0x7e
c000ef37:	e8 a0 ff ff ff       	call   c000eedc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef3c:	56                   	push   esi
c000ef3d:	6a 00                	push   0x0
c000ef3f:	53                   	push   ebx
c000ef40:	eb 12                	jmp    c000ef54 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef42:	89 e3                	mov    ebx,esp
c000ef44:	53                   	push   ebx
c000ef45:	68 82 00 00 c0       	push   0xc0000082
c000ef4a:	e8 8d ff ff ff       	call   c000eedc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef4f:	53                   	push   ebx
c000ef50:	6a 00                	push   0x0
c000ef52:	6a 00                	push   0x0
c000ef54:	68 82 00 00 c0       	push   0xc0000082
c000ef59:	e8 62 ff ff ff       	call   c000eec0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef5e:	83 c4 18             	add    esp,0x18
c000ef61:	83 c4 10             	add    esp,0x10
c000ef64:	5b                   	pop    ebx
c000ef65:	5e                   	pop    esi
c000ef66:	c3                   	ret    
c000ef67:	90                   	nop

c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef68:	55                   	push   ebp
c000ef69:	57                   	push   edi
c000ef6a:	56                   	push   esi
c000ef6b:	53                   	push   ebx
c000ef6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef78:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ef7c:	39 05 d0 f1 01 c0    	cmp    DWORD PTR ds:0xc001f1d0,eax
c000ef82:	75 23                	jne    c000efa7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ef84:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000ef89:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef8d:	89 06                	mov    DWORD PTR [esi],eax
c000ef8f:	a1 08 2f 02 c0       	mov    eax,ds:0xc0022f08
c000ef94:	89 07                	mov    DWORD PTR [edi],eax
c000ef96:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000ef9b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ef9e:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c000efa3:	89 02                	mov    DWORD PTR [edx],eax
c000efa5:	eb 3f                	jmp    c000efe6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000efa7:	31 c9                	xor    ecx,ecx
c000efa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efad:	0f a2                	cpuid  
c000efaf:	89 06                	mov    DWORD PTR [esi],eax
c000efb1:	89 1f                	mov    DWORD PTR [edi],ebx
c000efb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efb7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000efba:	89 10                	mov    DWORD PTR [eax],edx
c000efbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efc0:	a3 d0 f1 01 c0       	mov    ds:0xc001f1d0,eax
c000efc5:	8b 06                	mov    eax,DWORD PTR [esi]
c000efc7:	a3 0c 2f 02 c0       	mov    ds:0xc0022f0c,eax
c000efcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000efce:	a3 08 2f 02 c0       	mov    ds:0xc0022f08,eax
c000efd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efd6:	a3 04 2f 02 c0       	mov    ds:0xc0022f04,eax
c000efdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efdf:	8b 00                	mov    eax,DWORD PTR [eax]
c000efe1:	a3 00 2f 02 c0       	mov    ds:0xc0022f00,eax
c000efe6:	5b                   	pop    ebx
c000efe7:	5e                   	pop    esi
c000efe8:	5f                   	pop    edi
c000efe9:	5d                   	pop    ebp
c000efea:	c3                   	ret    
c000efeb:	90                   	nop

c000efec <CPU::cpuidCheckEDX(unsigned int)>:
c000efec:	83 ec 10             	sub    esp,0x10
c000efef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eff3:	50                   	push   eax
c000eff4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eff8:	50                   	push   eax
c000eff9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000effd:	50                   	push   eax
c000effe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f002:	50                   	push   eax
c000f003:	6a 01                	push   0x1
c000f005:	e8 5e ff ff ff       	call   c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f00a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f00e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f012:	0f 95 c0             	setne  al
c000f015:	83 c4 24             	add    esp,0x24
c000f018:	c3                   	ret    
c000f019:	90                   	nop

c000f01a <CPU::cpuidCheckECX(unsigned int)>:
c000f01a:	83 ec 10             	sub    esp,0x10
c000f01d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f021:	50                   	push   eax
c000f022:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f026:	50                   	push   eax
c000f027:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f02b:	50                   	push   eax
c000f02c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f030:	50                   	push   eax
c000f031:	6a 01                	push   0x1
c000f033:	e8 30 ff ff ff       	call   c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f038:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f03c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f040:	0f 95 c0             	setne  al
c000f043:	83 c4 24             	add    esp,0x24
c000f046:	c3                   	ret    
c000f047:	90                   	nop

c000f048 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f048:	83 ec 10             	sub    esp,0x10
c000f04b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04f:	50                   	push   eax
c000f050:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f054:	50                   	push   eax
c000f055:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f059:	50                   	push   eax
c000f05a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f05e:	50                   	push   eax
c000f05f:	6a 07                	push   0x7
c000f061:	e8 02 ff ff ff       	call   c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f066:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f06a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f06e:	0f 95 c0             	setne  al
c000f071:	83 c4 24             	add    esp,0x24
c000f074:	c3                   	ret    
c000f075:	90                   	nop

c000f076 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f076:	83 ec 10             	sub    esp,0x10
c000f079:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f07d:	50                   	push   eax
c000f07e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f082:	50                   	push   eax
c000f083:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f087:	50                   	push   eax
c000f088:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f08c:	50                   	push   eax
c000f08d:	6a 07                	push   0x7
c000f08f:	e8 d4 fe ff ff       	call   c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f094:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f098:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f09c:	0f 95 c0             	setne  al
c000f09f:	83 c4 24             	add    esp,0x24
c000f0a2:	c3                   	ret    
c000f0a3:	90                   	nop

c000f0a4 <CPU::CPU()>:
c000f0a4:	83 ec 0c             	sub    esp,0xc
c000f0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ab:	83 ec 08             	sub    esp,0x8
c000f0ae:	68 d9 e0 01 c0       	push   0xc001e0d9
c000f0b3:	50                   	push   eax
c000f0b4:	e8 73 c9 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000f0b9:	83 c4 10             	add    esp,0x10
c000f0bc:	ba 60 e1 01 c0       	mov    edx,0xc001e160
c000f0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0c5:	89 10                	mov    DWORD PTR [eax],edx
c000f0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0cb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0d9:	05 78 01 00 00       	add    eax,0x178
c000f0de:	83 ec 0c             	sub    esp,0xc
c000f0e1:	50                   	push   eax
c000f0e2:	e8 93 7f ff ff       	call   c000707a <GDT::GDT()>
c000f0e7:	83 c4 10             	add    esp,0x10
c000f0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ee:	05 7c 09 00 00       	add    eax,0x97c
c000f0f3:	83 ec 0c             	sub    esp,0xc
c000f0f6:	50                   	push   eax
c000f0f7:	e8 b8 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f0fc:	83 c4 10             	add    esp,0x10
c000f0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f103:	05 7c 11 00 00       	add    eax,0x117c
c000f108:	83 ec 0c             	sub    esp,0xc
c000f10b:	50                   	push   eax
c000f10c:	e8 33 9a ff ff       	call   c0008b44 <TSS::TSS()>
c000f111:	83 c4 10             	add    esp,0x10
c000f114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f118:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f123:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f12d:	90                   	nop
c000f12e:	83 c4 0c             	add    esp,0xc
c000f131:	c3                   	ret    

c000f132 <CPU::displayFeatures()>:
c000f132:	c3                   	ret    
c000f133:	90                   	nop

c000f134 <CPU::detectFeatures()>:
c000f134:	55                   	push   ebp
c000f135:	57                   	push   edi
c000f136:	56                   	push   esi
c000f137:	53                   	push   ebx
c000f138:	83 ec 30             	sub    esp,0x30
c000f13b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f13f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f149:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f150:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f156:	6a 0d                	push   0xd
c000f158:	6a 00                	push   0x0
c000f15a:	55                   	push   ebp
c000f15b:	e8 70 13 ff ff       	call   c00004d0 <memset>
c000f160:	83 c4 10             	add    esp,0x10
c000f163:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000f168:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f16f:	0f 84 d5 05 00 00    	je     c000f74a <CPU::detectFeatures()+0x616>
c000f175:	83 ec 0c             	sub    esp,0xc
c000f178:	89 ef                	mov    edi,ebp
c000f17a:	6a 10                	push   0x10
c000f17c:	e8 6b fe ff ff       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c000f181:	83 e0 01             	and    eax,0x1
c000f184:	8d 14 00             	lea    edx,[eax+eax*1]
c000f187:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f18d:	83 e0 fd             	and    eax,0xfffffffd
c000f190:	09 d0                	or     eax,edx
c000f192:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f198:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f19f:	e8 48 fe ff ff       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c000f1a4:	83 e0 01             	and    eax,0x1
c000f1a7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1ae:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1b4:	83 e0 fb             	and    eax,0xfffffffb
c000f1b7:	09 d0                	or     eax,edx
c000f1b9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1bf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1c6:	e8 21 fe ff ff       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c000f1cb:	83 e0 01             	and    eax,0x1
c000f1ce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f1d5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1db:	83 e0 f7             	and    eax,0xfffffff7
c000f1de:	09 d0                	or     eax,edx
c000f1e0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1e6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f1ed:	e8 fa fd ff ff       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c000f1f2:	83 e0 01             	and    eax,0x1
c000f1f5:	c1 e0 04             	shl    eax,0x4
c000f1f8:	88 c2                	mov    dl,al
c000f1fa:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f200:	83 e0 ef             	and    eax,0xffffffef
c000f203:	09 d0                	or     eax,edx
c000f205:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f20b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f212:	e8 d5 fd ff ff       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c000f217:	83 e0 01             	and    eax,0x1
c000f21a:	c1 e0 05             	shl    eax,0x5
c000f21d:	88 c2                	mov    dl,al
c000f21f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f225:	83 e0 df             	and    eax,0xffffffdf
c000f228:	09 d0                	or     eax,edx
c000f22a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f230:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f237:	e8 b0 fd ff ff       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c000f23c:	83 e0 01             	and    eax,0x1
c000f23f:	8d 14 00             	lea    edx,[eax+eax*1]
c000f242:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f248:	83 e0 fd             	and    eax,0xfffffffd
c000f24b:	09 d0                	or     eax,edx
c000f24d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f253:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f25a:	e8 8d fd ff ff       	call   c000efec <CPU::cpuidCheckEDX(unsigned int)>
c000f25f:	83 e0 01             	and    eax,0x1
c000f262:	c1 e0 06             	shl    eax,0x6
c000f265:	88 c2                	mov    dl,al
c000f267:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f26d:	83 e0 bf             	and    eax,0xffffffbf
c000f270:	09 d0                	or     eax,edx
c000f272:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f278:	58                   	pop    eax
c000f279:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f27d:	50                   	push   eax
c000f27e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f282:	50                   	push   eax
c000f283:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f287:	56                   	push   esi
c000f288:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f28c:	50                   	push   eax
c000f28d:	6a 00                	push   0x0
c000f28f:	e8 d4 fc ff ff       	call   c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f294:	b8 04 00 00 00       	mov    eax,0x4
c000f299:	89 c1                	mov    ecx,eax
c000f29b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f29d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2a3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2a7:	89 c1                	mov    ecx,eax
c000f2a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2ab:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f2b1:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f2b5:	89 c1                	mov    ecx,eax
c000f2b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2b9:	83 c4 18             	add    esp,0x18
c000f2bc:	68 e8 df 01 c0       	push   0xc001dfe8
c000f2c1:	55                   	push   ebp
c000f2c2:	e8 19 14 ff ff       	call   c00006e0 <strcmp>
c000f2c7:	83 c4 10             	add    esp,0x10
c000f2ca:	85 c0                	test   eax,eax
c000f2cc:	75 0f                	jne    c000f2dd <CPU::detectFeatures()+0x1a9>
c000f2ce:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f2d8:	e9 22 02 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f2dd:	50                   	push   eax
c000f2de:	50                   	push   eax
c000f2df:	68 f5 df 01 c0       	push   0xc001dff5
c000f2e4:	55                   	push   ebp
c000f2e5:	e8 f6 13 ff ff       	call   c00006e0 <strcmp>
c000f2ea:	83 c4 10             	add    esp,0x10
c000f2ed:	85 c0                	test   eax,eax
c000f2ef:	74 dd                	je     c000f2ce <CPU::detectFeatures()+0x19a>
c000f2f1:	50                   	push   eax
c000f2f2:	50                   	push   eax
c000f2f3:	68 02 e0 01 c0       	push   0xc001e002
c000f2f8:	55                   	push   ebp
c000f2f9:	e8 e2 13 ff ff       	call   c00006e0 <strcmp>
c000f2fe:	83 c4 10             	add    esp,0x10
c000f301:	85 c0                	test   eax,eax
c000f303:	74 2a                	je     c000f32f <CPU::detectFeatures()+0x1fb>
c000f305:	50                   	push   eax
c000f306:	50                   	push   eax
c000f307:	68 0f e0 01 c0       	push   0xc001e00f
c000f30c:	55                   	push   ebp
c000f30d:	e8 ce 13 ff ff       	call   c00006e0 <strcmp>
c000f312:	83 c4 10             	add    esp,0x10
c000f315:	85 c0                	test   eax,eax
c000f317:	74 16                	je     c000f32f <CPU::detectFeatures()+0x1fb>
c000f319:	50                   	push   eax
c000f31a:	50                   	push   eax
c000f31b:	68 1c e0 01 c0       	push   0xc001e01c
c000f320:	55                   	push   ebp
c000f321:	e8 ba 13 ff ff       	call   c00006e0 <strcmp>
c000f326:	83 c4 10             	add    esp,0x10
c000f329:	85 c0                	test   eax,eax
c000f32b:	74 48                	je     c000f375 <CPU::detectFeatures()+0x241>
c000f32d:	eb 0f                	jmp    c000f33e <CPU::detectFeatures()+0x20a>
c000f32f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f339:	e9 c1 01 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f33e:	50                   	push   eax
c000f33f:	50                   	push   eax
c000f340:	68 29 e0 01 c0       	push   0xc001e029
c000f345:	55                   	push   ebp
c000f346:	e8 95 13 ff ff       	call   c00006e0 <strcmp>
c000f34b:	83 c4 10             	add    esp,0x10
c000f34e:	85 c0                	test   eax,eax
c000f350:	74 23                	je     c000f375 <CPU::detectFeatures()+0x241>
c000f352:	57                   	push   edi
c000f353:	57                   	push   edi
c000f354:	68 36 e0 01 c0       	push   0xc001e036
c000f359:	55                   	push   ebp
c000f35a:	e8 81 13 ff ff       	call   c00006e0 <strcmp>
c000f35f:	83 c4 10             	add    esp,0x10
c000f362:	85 c0                	test   eax,eax
c000f364:	75 1e                	jne    c000f384 <CPU::detectFeatures()+0x250>
c000f366:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f370:	e9 8a 01 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f375:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f37f:	e9 7b 01 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f384:	56                   	push   esi
c000f385:	56                   	push   esi
c000f386:	68 43 e0 01 c0       	push   0xc001e043
c000f38b:	55                   	push   ebp
c000f38c:	e8 4f 13 ff ff       	call   c00006e0 <strcmp>
c000f391:	83 c4 10             	add    esp,0x10
c000f394:	85 c0                	test   eax,eax
c000f396:	75 0f                	jne    c000f3a7 <CPU::detectFeatures()+0x273>
c000f398:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3a2:	e9 58 01 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f3a7:	51                   	push   ecx
c000f3a8:	51                   	push   ecx
c000f3a9:	68 02 e0 01 c0       	push   0xc001e002
c000f3ae:	55                   	push   ebp
c000f3af:	e8 2c 13 ff ff       	call   c00006e0 <strcmp>
c000f3b4:	83 c4 10             	add    esp,0x10
c000f3b7:	85 c0                	test   eax,eax
c000f3b9:	75 0f                	jne    c000f3ca <CPU::detectFeatures()+0x296>
c000f3bb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f3c5:	e9 35 01 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f3ca:	52                   	push   edx
c000f3cb:	52                   	push   edx
c000f3cc:	68 50 e0 01 c0       	push   0xc001e050
c000f3d1:	55                   	push   ebp
c000f3d2:	e8 09 13 ff ff       	call   c00006e0 <strcmp>
c000f3d7:	83 c4 10             	add    esp,0x10
c000f3da:	85 c0                	test   eax,eax
c000f3dc:	75 0f                	jne    c000f3ed <CPU::detectFeatures()+0x2b9>
c000f3de:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f3e8:	e9 12 01 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f3ed:	50                   	push   eax
c000f3ee:	50                   	push   eax
c000f3ef:	68 5d e0 01 c0       	push   0xc001e05d
c000f3f4:	55                   	push   ebp
c000f3f5:	e8 e6 12 ff ff       	call   c00006e0 <strcmp>
c000f3fa:	83 c4 10             	add    esp,0x10
c000f3fd:	85 c0                	test   eax,eax
c000f3ff:	75 0f                	jne    c000f410 <CPU::detectFeatures()+0x2dc>
c000f401:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f40b:	e9 ef 00 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f410:	50                   	push   eax
c000f411:	50                   	push   eax
c000f412:	68 6a e0 01 c0       	push   0xc001e06a
c000f417:	55                   	push   ebp
c000f418:	e8 c3 12 ff ff       	call   c00006e0 <strcmp>
c000f41d:	83 c4 10             	add    esp,0x10
c000f420:	85 c0                	test   eax,eax
c000f422:	75 0f                	jne    c000f433 <CPU::detectFeatures()+0x2ff>
c000f424:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f42e:	e9 cc 00 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f433:	50                   	push   eax
c000f434:	50                   	push   eax
c000f435:	68 77 e0 01 c0       	push   0xc001e077
c000f43a:	55                   	push   ebp
c000f43b:	e8 a0 12 ff ff       	call   c00006e0 <strcmp>
c000f440:	83 c4 10             	add    esp,0x10
c000f443:	85 c0                	test   eax,eax
c000f445:	75 0f                	jne    c000f456 <CPU::detectFeatures()+0x322>
c000f447:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f451:	e9 a9 00 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f456:	50                   	push   eax
c000f457:	50                   	push   eax
c000f458:	68 84 e0 01 c0       	push   0xc001e084
c000f45d:	55                   	push   ebp
c000f45e:	e8 7d 12 ff ff       	call   c00006e0 <strcmp>
c000f463:	83 c4 10             	add    esp,0x10
c000f466:	85 c0                	test   eax,eax
c000f468:	75 0f                	jne    c000f479 <CPU::detectFeatures()+0x345>
c000f46a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f474:	e9 86 00 00 00       	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f479:	50                   	push   eax
c000f47a:	50                   	push   eax
c000f47b:	68 91 e0 01 c0       	push   0xc001e091
c000f480:	55                   	push   ebp
c000f481:	e8 5a 12 ff ff       	call   c00006e0 <strcmp>
c000f486:	83 c4 10             	add    esp,0x10
c000f489:	85 c0                	test   eax,eax
c000f48b:	75 0c                	jne    c000f499 <CPU::detectFeatures()+0x365>
c000f48d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f497:	eb 66                	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f499:	50                   	push   eax
c000f49a:	50                   	push   eax
c000f49b:	68 9e e0 01 c0       	push   0xc001e09e
c000f4a0:	55                   	push   ebp
c000f4a1:	e8 3a 12 ff ff       	call   c00006e0 <strcmp>
c000f4a6:	83 c4 10             	add    esp,0x10
c000f4a9:	85 c0                	test   eax,eax
c000f4ab:	75 0c                	jne    c000f4b9 <CPU::detectFeatures()+0x385>
c000f4ad:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f4b7:	eb 46                	jmp    c000f4ff <CPU::detectFeatures()+0x3cb>
c000f4b9:	57                   	push   edi
c000f4ba:	57                   	push   edi
c000f4bb:	68 ab e0 01 c0       	push   0xc001e0ab
c000f4c0:	55                   	push   ebp
c000f4c1:	e8 1a 12 ff ff       	call   c00006e0 <strcmp>
c000f4c6:	83 c4 10             	add    esp,0x10
c000f4c9:	85 c0                	test   eax,eax
c000f4cb:	74 e0                	je     c000f4ad <CPU::detectFeatures()+0x379>
c000f4cd:	56                   	push   esi
c000f4ce:	56                   	push   esi
c000f4cf:	68 b8 e0 01 c0       	push   0xc001e0b8
c000f4d4:	55                   	push   ebp
c000f4d5:	e8 06 12 ff ff       	call   c00006e0 <strcmp>
c000f4da:	83 c4 10             	add    esp,0x10
c000f4dd:	85 c0                	test   eax,eax
c000f4df:	74 cc                	je     c000f4ad <CPU::detectFeatures()+0x379>
c000f4e1:	51                   	push   ecx
c000f4e2:	51                   	push   ecx
c000f4e3:	68 c5 e0 01 c0       	push   0xc001e0c5
c000f4e8:	55                   	push   ebp
c000f4e9:	e8 f2 11 ff ff       	call   c00006e0 <strcmp>
c000f4ee:	83 c4 10             	add    esp,0x10
c000f4f1:	85 c0                	test   eax,eax
c000f4f3:	74 b8                	je     c000f4ad <CPU::detectFeatures()+0x379>
c000f4f5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f4ff:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f504:	0f 86 be 00 00 00    	jbe    c000f5c8 <CPU::detectFeatures()+0x494>
c000f50a:	83 ec 0c             	sub    esp,0xc
c000f50d:	68 80 00 00 00       	push   0x80
c000f512:	e8 31 fb ff ff       	call   c000f048 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f517:	83 e0 01             	and    eax,0x1
c000f51a:	c1 e0 06             	shl    eax,0x6
c000f51d:	88 c2                	mov    dl,al
c000f51f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f525:	83 e0 bf             	and    eax,0xffffffbf
c000f528:	09 d0                	or     eax,edx
c000f52a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f530:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f537:	e8 0c fb ff ff       	call   c000f048 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f53c:	83 e0 01             	and    eax,0x1
c000f53f:	c1 e0 04             	shl    eax,0x4
c000f542:	88 c2                	mov    dl,al
c000f544:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f54a:	83 e0 ef             	and    eax,0xffffffef
c000f54d:	09 d0                	or     eax,edx
c000f54f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f555:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f55c:	e8 e7 fa ff ff       	call   c000f048 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f561:	c1 e0 07             	shl    eax,0x7
c000f564:	88 c2                	mov    dl,al
c000f566:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f56c:	83 e0 7f             	and    eax,0x7f
c000f56f:	09 d0                	or     eax,edx
c000f571:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f577:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f57e:	e8 f3 fa ff ff       	call   c000f076 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f583:	83 e0 01             	and    eax,0x1
c000f586:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f58d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f593:	83 e0 f7             	and    eax,0xfffffff7
c000f596:	09 d0                	or     eax,edx
c000f598:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f59e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5a5:	e8 cc fa ff ff       	call   c000f076 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5aa:	83 c4 10             	add    esp,0x10
c000f5ad:	83 e0 01             	and    eax,0x1
c000f5b0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f5b7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5bd:	83 e0 fb             	and    eax,0xfffffffb
c000f5c0:	09 d0                	or     eax,edx
c000f5c2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5c8:	83 ec 0c             	sub    esp,0xc
c000f5cb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5cf:	50                   	push   eax
c000f5d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5d4:	50                   	push   eax
c000f5d5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f5d9:	56                   	push   esi
c000f5da:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5de:	50                   	push   eax
c000f5df:	6a 01                	push   0x1
c000f5e1:	e8 82 f9 ff ff       	call   c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f5e6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f5ea:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f5f0:	88 ca                	mov    dl,cl
c000f5f2:	83 e0 f0             	and    eax,0xfffffff0
c000f5f5:	83 e2 0f             	and    edx,0xf
c000f5f8:	09 d0                	or     eax,edx
c000f5fa:	88 ca                	mov    dl,cl
c000f5fc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f602:	c0 ea 04             	shr    dl,0x4
c000f605:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f609:	0f b6 c2             	movzx  eax,dl
c000f60c:	83 c4 20             	add    esp,0x20
c000f60f:	c1 e0 06             	shl    eax,0x6
c000f612:	89 c7                	mov    edi,eax
c000f614:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f61a:	66 25 3f c0          	and    ax,0xc03f
c000f61e:	09 f8                	or     eax,edi
c000f620:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f627:	89 c8                	mov    eax,ecx
c000f629:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f630:	c1 e8 08             	shr    eax,0x8
c000f633:	83 e5 3f             	and    ebp,0x3f
c000f636:	83 e0 0f             	and    eax,0xf
c000f639:	89 c7                	mov    edi,eax
c000f63b:	c1 e7 06             	shl    edi,0x6
c000f63e:	09 ef                	or     edi,ebp
c000f640:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f647:	89 fa                	mov    edx,edi
c000f649:	83 e5 c0             	and    ebp,0xffffffc0
c000f64c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f652:	88 c2                	mov    dl,al
c000f654:	c0 ea 02             	shr    dl,0x2
c000f657:	89 d7                	mov    edi,edx
c000f659:	09 ef                	or     edi,ebp
c000f65b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f661:	89 fa                	mov    edx,edi
c000f663:	83 e5 cf             	and    ebp,0xffffffcf
c000f666:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f66c:	89 cf                	mov    edi,ecx
c000f66e:	c1 ef 0c             	shr    edi,0xc
c000f671:	83 e7 03             	and    edi,0x3
c000f674:	c1 e7 04             	shl    edi,0x4
c000f677:	09 ef                	or     edi,ebp
c000f679:	3c 06                	cmp    al,0x6
c000f67b:	89 fa                	mov    edx,edi
c000f67d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f683:	74 04                	je     c000f689 <CPU::detectFeatures()+0x555>
c000f685:	3c 0f                	cmp    al,0xf
c000f687:	75 5c                	jne    c000f6e5 <CPU::detectFeatures()+0x5b1>
c000f689:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f68d:	89 cf                	mov    edi,ecx
c000f68f:	c1 ef 10             	shr    edi,0x10
c000f692:	c1 e7 04             	shl    edi,0x4
c000f695:	09 fa                	or     edx,edi
c000f697:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f69d:	0f b6 d2             	movzx  edx,dl
c000f6a0:	66 81 e7 3f c0       	and    di,0xc03f
c000f6a5:	c1 e2 06             	shl    edx,0x6
c000f6a8:	09 fa                	or     edx,edi
c000f6aa:	3c 0f                	cmp    al,0xf
c000f6ac:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f6b3:	75 30                	jne    c000f6e5 <CPU::detectFeatures()+0x5b1>
c000f6b5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f6bb:	c1 e9 14             	shr    ecx,0x14
c000f6be:	83 e0 3f             	and    eax,0x3f
c000f6c1:	83 c1 0f             	add    ecx,0xf
c000f6c4:	88 ca                	mov    dl,cl
c000f6c6:	c0 e9 02             	shr    cl,0x2
c000f6c9:	c1 e2 06             	shl    edx,0x6
c000f6cc:	09 d0                	or     eax,edx
c000f6ce:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f6d4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f6da:	83 e0 c0             	and    eax,0xffffffc0
c000f6dd:	09 c1                	or     ecx,eax
c000f6df:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f6e5:	83 ec 0c             	sub    esp,0xc
c000f6e8:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f6ef:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6f3:	50                   	push   eax
c000f6f4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f6f8:	55                   	push   ebp
c000f6f9:	56                   	push   esi
c000f6fa:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f6fe:	57                   	push   edi
c000f6ff:	68 00 00 00 80       	push   0x80000000
c000f704:	e8 5f f8 ff ff       	call   c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f709:	83 c4 20             	add    esp,0x20
c000f70c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f714:	76 22                	jbe    c000f738 <CPU::detectFeatures()+0x604>
c000f716:	83 ec 0c             	sub    esp,0xc
c000f719:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f71d:	50                   	push   eax
c000f71e:	55                   	push   ebp
c000f71f:	56                   	push   esi
c000f720:	57                   	push   edi
c000f721:	68 01 00 00 80       	push   0x80000001
c000f726:	e8 3d f8 ff ff       	call   c000ef68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f72b:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f735:	83 c4 20             	add    esp,0x20
c000f738:	52                   	push   edx
c000f739:	52                   	push   edx
c000f73a:	68 d1 e0 01 c0       	push   0xc001e0d1
c000f73f:	53                   	push   ebx
c000f740:	e8 d9 c2 ff ff       	call   c000ba1e <Device::setName(char const*)>
c000f745:	83 c4 10             	add    esp,0x10
c000f748:	eb 67                	jmp    c000f7b1 <CPU::detectFeatures()+0x67d>
c000f74a:	50                   	push   eax
c000f74b:	50                   	push   eax
c000f74c:	68 36 e0 01 c0       	push   0xc001e036
c000f751:	55                   	push   ebp
c000f752:	e8 a9 0e ff ff       	call   c0000600 <strcpy>
c000f757:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f761:	e8 5d 0a ff ff       	call   c00001c3 <is486>
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	85 c0                	test   eax,eax
c000f76b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f771:	74 1d                	je     c000f790 <CPU::detectFeatures()+0x65c>
c000f773:	83 c8 07             	or     eax,0x7
c000f776:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f77c:	0f 20 c0             	mov    eax,cr0
c000f77f:	83 e0 14             	and    eax,0x14
c000f782:	83 f8 04             	cmp    eax,0x4
c000f785:	75 0e                	jne    c000f795 <CPU::detectFeatures()+0x661>
c000f787:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f78e:	eb 21                	jmp    c000f7b1 <CPU::detectFeatures()+0x67d>
c000f790:	83 e0 f8             	and    eax,0xfffffff8
c000f793:	eb e1                	jmp    c000f776 <CPU::detectFeatures()+0x642>
c000f795:	e8 04 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f79a:	83 e0 01             	and    eax,0x1
c000f79d:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7a0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7a6:	83 e0 fd             	and    eax,0xfffffffd
c000f7a9:	09 d0                	or     eax,edx
c000f7ab:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7b1:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f7b8:	74 0e                	je     c000f7c8 <CPU::detectFeatures()+0x694>
c000f7ba:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000f7bf:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f7c6:	eb 20                	jmp    c000f7e8 <CPU::detectFeatures()+0x6b4>
c000f7c8:	e8 d1 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7cd:	83 e0 01             	and    eax,0x1
c000f7d0:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7d3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7d9:	83 e0 fd             	and    eax,0xfffffffd
c000f7dc:	09 d0                	or     eax,edx
c000f7de:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7e4:	a8 02                	test   al,0x2
c000f7e6:	75 d2                	jne    c000f7ba <CPU::detectFeatures()+0x686>
c000f7e8:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f7ef:	83 c4 2c             	add    esp,0x2c
c000f7f2:	5b                   	pop    ebx
c000f7f3:	5e                   	pop    esi
c000f7f4:	5f                   	pop    edi
c000f7f5:	5d                   	pop    ebp
c000f7f6:	c3                   	ret    
c000f7f7:	90                   	nop

c000f7f8 <CPU::setupSMEP()>:
c000f7f8:	0f 20 e0             	mov    eax,cr4
c000f7fb:	0d 00 00 10 00       	or     eax,0x100000
c000f800:	0f 22 e0             	mov    cr4,eax
c000f803:	c3                   	ret    

c000f804 <CPU::setupUMIP()>:
c000f804:	0f 20 e0             	mov    eax,cr4
c000f807:	80 cc 08             	or     ah,0x8
c000f80a:	0f 22 e0             	mov    cr4,eax
c000f80d:	c3                   	ret    

c000f80e <CPU::setupTSC()>:
c000f80e:	0f 20 e0             	mov    eax,cr4
c000f811:	83 c8 04             	or     eax,0x4
c000f814:	0f 22 e0             	mov    cr4,eax
c000f817:	c3                   	ret    

c000f818 <CPU::setupLargePages()>:
c000f818:	0f 20 e0             	mov    eax,cr4
c000f81b:	83 c8 10             	or     eax,0x10
c000f81e:	0f 22 e0             	mov    cr4,eax
c000f821:	c3                   	ret    

c000f822 <CPU::setupPAT()>:
c000f822:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c000f827:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f82e:	74 2c                	je     c000f85c <CPU::setupPAT()+0x3a>
c000f830:	53                   	push   ebx
c000f831:	83 ec 10             	sub    esp,0x10
c000f834:	68 77 02 00 00       	push   0x277
c000f839:	50                   	push   eax
c000f83a:	e8 b3 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f83f:	83 e2 f8             	and    edx,0xfffffff8
c000f842:	83 ca 01             	or     edx,0x1
c000f845:	52                   	push   edx
c000f846:	50                   	push   eax
c000f847:	68 77 02 00 00       	push   0x277
c000f84c:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c000f852:	e8 c7 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f857:	83 c4 28             	add    esp,0x28
c000f85a:	5b                   	pop    ebx
c000f85b:	c3                   	ret    
c000f85c:	c3                   	ret    
c000f85d:	90                   	nop

c000f85e <CPU::setupMTRR()>:
c000f85e:	c3                   	ret    
c000f85f:	90                   	nop

c000f860 <CPU::setupGlobalPages()>:
c000f860:	0f 20 e0             	mov    eax,cr4
c000f863:	0c 80                	or     al,0x80
c000f865:	0f 22 e0             	mov    cr4,eax
c000f868:	c3                   	ret    
c000f869:	90                   	nop

c000f86a <CPU::allowUsermodeDataAccess()>:
c000f86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f86e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f875:	74 03                	je     c000f87a <CPU::allowUsermodeDataAccess()+0x10>
c000f877:	0f 01 cb             	stac   
c000f87a:	c3                   	ret    
c000f87b:	90                   	nop

c000f87c <CPU::prohibitUsermodeDataAccess()>:
c000f87c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f880:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f887:	74 03                	je     c000f88c <CPU::prohibitUsermodeDataAccess()+0x10>
c000f889:	0f 01 ca             	clac   
c000f88c:	c3                   	ret    
c000f88d:	90                   	nop

c000f88e <CPU::setupSMAP()>:
c000f88e:	0f 20 e0             	mov    eax,cr4
c000f891:	0d 00 00 20 00       	or     eax,0x200000
c000f896:	0f 22 e0             	mov    cr4,eax
c000f899:	eb e1                	jmp    c000f87c <CPU::prohibitUsermodeDataAccess()>
c000f89b:	90                   	nop

c000f89c <CPU::setupFeatures()>:
c000f89c:	53                   	push   ebx
c000f89d:	83 ec 08             	sub    esp,0x8
c000f8a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a4:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f8ab:	74 18                	je     c000f8c5 <CPU::setupFeatures()+0x29>
c000f8ad:	83 ec 0c             	sub    esp,0xc
c000f8b0:	68 dd e0 01 c0       	push   0xc001e0dd
c000f8b5:	e8 9a ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f8ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8bd:	e8 42 ff ff ff       	call   c000f804 <CPU::setupUMIP()>
c000f8c2:	83 c4 10             	add    esp,0x10
c000f8c5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f8cc:	74 18                	je     c000f8e6 <CPU::setupFeatures()+0x4a>
c000f8ce:	83 ec 0c             	sub    esp,0xc
c000f8d1:	68 e7 e0 01 c0       	push   0xc001e0e7
c000f8d6:	e8 79 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f8db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8de:	e8 2b ff ff ff       	call   c000f80e <CPU::setupTSC()>
c000f8e3:	83 c4 10             	add    esp,0x10
c000f8e6:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f8ed:	74 18                	je     c000f907 <CPU::setupFeatures()+0x6b>
c000f8ef:	83 ec 0c             	sub    esp,0xc
c000f8f2:	68 f0 e0 01 c0       	push   0xc001e0f0
c000f8f7:	e8 58 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f8fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8ff:	e8 14 ff ff ff       	call   c000f818 <CPU::setupLargePages()>
c000f904:	83 c4 10             	add    esp,0x10
c000f907:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f90e:	74 18                	je     c000f928 <CPU::setupFeatures()+0x8c>
c000f910:	83 ec 0c             	sub    esp,0xc
c000f913:	68 f9 e0 01 c0       	push   0xc001e0f9
c000f918:	e8 37 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f91d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f920:	e8 3b ff ff ff       	call   c000f860 <CPU::setupGlobalPages()>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f92f:	74 18                	je     c000f949 <CPU::setupFeatures()+0xad>
c000f931:	83 ec 0c             	sub    esp,0xc
c000f934:	68 0b e1 01 c0       	push   0xc001e10b
c000f939:	e8 16 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f93e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f941:	e8 dc fe ff ff       	call   c000f822 <CPU::setupPAT()>
c000f946:	83 c4 10             	add    esp,0x10
c000f949:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f950:	74 11                	je     c000f963 <CPU::setupFeatures()+0xc7>
c000f952:	c7 44 24 10 14 e1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e114
c000f95a:	83 c4 08             	add    esp,0x8
c000f95d:	5b                   	pop    ebx
c000f95e:	e9 f1 aa ff ff       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>
c000f963:	83 c4 08             	add    esp,0x8
c000f966:	5b                   	pop    ebx
c000f967:	c3                   	ret    

c000f968 <CPU::open(int, int, void*)>:
c000f968:	57                   	push   edi
c000f969:	56                   	push   esi
c000f96a:	53                   	push   ebx
c000f96b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f96f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f973:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f979:	83 ec 0c             	sub    esp,0xc
c000f97c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f982:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f988:	50                   	push   eax
c000f989:	e8 4e 77 ff ff       	call   c00070dc <GDT::setup()>
c000f98e:	83 c4 0c             	add    esp,0xc
c000f991:	6a 00                	push   0x0
c000f993:	68 ef be ad de       	push   0xdeadbeef
c000f998:	57                   	push   edi
c000f999:	e8 ea 91 ff ff       	call   c0008b88 <TSS::setup(unsigned long, unsigned long)>
c000f99e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9a1:	e8 c2 91 ff ff       	call   c0008b68 <TSS::flush()>
c000f9a6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f9ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9af:	e8 76 79 ff ff       	call   c000732a <IDT::setup()>
c000f9b4:	b8 00 04 00 00       	mov    eax,0x400
c000f9b9:	0f 23 f8             	mov    db7,eax
c000f9bc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f9c6:	e8 ca 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000f9cb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f9d1:	89 30                	mov    DWORD PTR [eax],esi
c000f9d3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f9d9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f9dc:	58                   	pop    eax
c000f9dd:	5a                   	pop    edx
c000f9de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000f9e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f9e8:	e8 85 a1 ff ff       	call   c0009b72 <VAS::setCPUSpecific(unsigned long)>
c000f9ed:	c7 04 24 1e e1 01 c0 	mov    DWORD PTR [esp],0xc001e11e
c000f9f4:	e8 c6 00 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c000f9f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9fc:	e8 33 f7 ff ff       	call   c000f134 <CPU::detectFeatures()>
c000fa01:	c7 04 24 41 e1 01 c0 	mov    DWORD PTR [esp],0xc001e141
c000fa08:	e8 b2 00 00 00       	call   c000fabf <KeSetBootMessage(char const*)>
c000fa0d:	e8 42 58 00 00       	call   c0015254 <HalInitialise()>
c000fa12:	a1 b0 04 02 c0       	mov    eax,ds:0xc00204b0
c000fa17:	83 e0 10             	and    eax,0x10
c000fa1a:	83 f8 01             	cmp    eax,0x1
c000fa1d:	19 c0                	sbb    eax,eax
c000fa1f:	83 e0 46             	and    eax,0x46
c000fa22:	83 c0 1e             	add    eax,0x1e
c000fa25:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa28:	e8 40 d7 ff ff       	call   c000d16d <setupTimer(int)>
c000fa2d:	83 c4 10             	add    esp,0x10
c000fa30:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa36:	f6 05 b0 04 02 c0 20 	test   BYTE PTR ds:0xc00204b0,0x20
c000fa3d:	74 0c                	je     c000fa4b <CPU::open(int, int, void*)+0xe3>
c000fa3f:	83 ec 0c             	sub    esp,0xc
c000fa42:	53                   	push   ebx
c000fa43:	e8 54 fe ff ff       	call   c000f89c <CPU::setupFeatures()>
c000fa48:	83 c4 10             	add    esp,0x10
c000fa4b:	5b                   	pop    ebx
c000fa4c:	31 c0                	xor    eax,eax
c000fa4e:	5e                   	pop    esi
c000fa4f:	5f                   	pop    edi
c000fa50:	c3                   	ret    

c000fa51 <KeDisplaySplashScreen()>:
c000fa51:	55                   	push   ebp
c000fa52:	bd 05 00 00 00       	mov    ebp,0x5
c000fa57:	57                   	push   edi
c000fa58:	bf e0 f1 01 c0       	mov    edi,0xc001f1e0
c000fa5d:	56                   	push   esi
c000fa5e:	be 0a 00 00 00       	mov    esi,0xa
c000fa63:	53                   	push   ebx
c000fa64:	31 db                	xor    ebx,ebx
c000fa66:	83 ec 0c             	sub    esp,0xc
c000fa69:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa6c:	84 c0                	test   al,al
c000fa6e:	74 47                	je     c000fab7 <KeDisplaySplashScreen()+0x66>
c000fa70:	80 bb 16 f2 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe0dea],0xdb
c000fa77:	75 13                	jne    c000fa8c <KeDisplaySplashScreen()+0x3b>
c000fa79:	0f b6 93 15 f2 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe0deb]
c000fa80:	83 e2 fe             	and    edx,0xfffffffe
c000fa83:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa89:	75 01                	jne    c000fa8c <KeDisplaySplashScreen()+0x3b>
c000fa8b:	46                   	inc    esi
c000fa8c:	3c 0d                	cmp    al,0xd
c000fa8e:	74 24                	je     c000fab4 <KeDisplaySplashScreen()+0x63>
c000fa90:	3c 0a                	cmp    al,0xa
c000fa92:	75 0a                	jne    c000fa9e <KeDisplaySplashScreen()+0x4d>
c000fa94:	45                   	inc    ebp
c000fa95:	be 0a 00 00 00       	mov    esi,0xa
c000fa9a:	31 db                	xor    ebx,ebx
c000fa9c:	eb 16                	jmp    c000fab4 <KeDisplaySplashScreen()+0x63>
c000fa9e:	83 ec 0c             	sub    esp,0xc
c000faa1:	8d 14 33             	lea    edx,[ebx+esi*1]
c000faa4:	55                   	push   ebp
c000faa5:	43                   	inc    ebx
c000faa6:	52                   	push   edx
c000faa7:	6a 00                	push   0x0
c000faa9:	6a 0e                	push   0xe
c000faab:	50                   	push   eax
c000faac:	e8 07 64 00 00       	call   c0015eb8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fab1:	83 c4 20             	add    esp,0x20
c000fab4:	47                   	inc    edi
c000fab5:	eb b2                	jmp    c000fa69 <KeDisplaySplashScreen()+0x18>
c000fab7:	83 c4 0c             	add    esp,0xc
c000faba:	5b                   	pop    ebx
c000fabb:	5e                   	pop    esi
c000fabc:	5f                   	pop    edi
c000fabd:	5d                   	pop    ebp
c000fabe:	c3                   	ret    

c000fabf <KeSetBootMessage(char const*)>:
c000fabf:	57                   	push   edi
c000fac0:	56                   	push   esi
c000fac1:	53                   	push   ebx
c000fac2:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fac8:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000facf:	68 9e 00 00 00       	push   0x9e
c000fad4:	6a 00                	push   0x0
c000fad6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fada:	56                   	push   esi
c000fadb:	e8 f0 09 ff ff       	call   c00004d0 <memset>
c000fae0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fae3:	e8 58 0a ff ff       	call   c0000540 <strlen>
c000fae8:	ba 50 00 00 00       	mov    edx,0x50
c000faed:	83 c4 10             	add    esp,0x10
c000faf0:	29 c2                	sub    edx,eax
c000faf2:	31 c9                	xor    ecx,ecx
c000faf4:	83 e2 fe             	and    edx,0xfffffffe
c000faf7:	01 f2                	add    edx,esi
c000faf9:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fafe:	84 c0                	test   al,al
c000fb00:	74 0a                	je     c000fb0c <KeSetBootMessage(char const*)+0x4d>
c000fb02:	80 cc 0f             	or     ah,0xf
c000fb05:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb09:	41                   	inc    ecx
c000fb0a:	eb ed                	jmp    c000faf9 <KeSetBootMessage(char const*)+0x3a>
c000fb0c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb11:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb18:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	5f                   	pop    edi
c000fb21:	c3                   	ret    

c000fb22 <EnvVarContainer::getEnv(char const*)>:
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	31 db                	xor    ebx,ebx
c000fb27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb2b:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb2d:	7e 2b                	jle    c000fb5a <EnvVarContainer::getEnv(char const*)+0x38>
c000fb2f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb36:	50                   	push   eax
c000fb37:	50                   	push   eax
c000fb38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb3b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb3e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb42:	e8 99 0b ff ff       	call   c00006e0 <strcmp>
c000fb47:	83 c4 10             	add    esp,0x10
c000fb4a:	85 c0                	test   eax,eax
c000fb4c:	75 09                	jne    c000fb57 <EnvVarContainer::getEnv(char const*)+0x35>
c000fb4e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb51:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb55:	eb 05                	jmp    c000fb5c <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb57:	43                   	inc    ebx
c000fb58:	eb d1                	jmp    c000fb2b <EnvVarContainer::getEnv(char const*)+0x9>
c000fb5a:	31 c0                	xor    eax,eax
c000fb5c:	5b                   	pop    ebx
c000fb5d:	5e                   	pop    esi
c000fb5e:	5f                   	pop    edi
c000fb5f:	c3                   	ret    

c000fb60 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb60:	55                   	push   ebp
c000fb61:	57                   	push   edi
c000fb62:	56                   	push   esi
c000fb63:	53                   	push   ebx
c000fb64:	83 ec 28             	sub    esp,0x28
c000fb67:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb6b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb6f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb73:	56                   	push   esi
c000fb74:	e8 c7 09 ff ff       	call   c0000540 <strlen>
c000fb79:	40                   	inc    eax
c000fb7a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb7d:	e8 37 7c ff ff       	call   c00077b9 <malloc>
c000fb82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb85:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb89:	e8 b2 09 ff ff       	call   c0000540 <strlen>
c000fb8e:	40                   	inc    eax
c000fb8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb92:	e8 22 7c ff ff       	call   c00077b9 <malloc>
c000fb97:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb9e:	e8 9d 09 ff ff       	call   c0000540 <strlen>
c000fba3:	83 c4 0c             	add    esp,0xc
c000fba6:	40                   	inc    eax
c000fba7:	50                   	push   eax
c000fba8:	6a 00                	push   0x0
c000fbaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbae:	e8 1d 09 ff ff       	call   c00004d0 <memset>
c000fbb3:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbb6:	e8 85 09 ff ff       	call   c0000540 <strlen>
c000fbbb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbbf:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbc7:	89 de                	mov    esi,ebx
c000fbc9:	e8 72 09 ff ff       	call   c0000540 <strlen>
c000fbce:	83 c4 0c             	add    esp,0xc
c000fbd1:	40                   	inc    eax
c000fbd2:	50                   	push   eax
c000fbd3:	6a 00                	push   0x0
c000fbd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbd9:	e8 f2 08 ff ff       	call   c00004d0 <memset>
c000fbde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbe1:	e8 5a 09 ff ff       	call   c0000540 <strlen>
c000fbe6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fbea:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fbf2:	40                   	inc    eax
c000fbf3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fbf6:	c1 e0 03             	shl    eax,0x3
c000fbf9:	5a                   	pop    edx
c000fbfa:	59                   	pop    ecx
c000fbfb:	50                   	push   eax
c000fbfc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fbff:	e8 a1 7b ff ff       	call   c00077a5 <realloc>
c000fc04:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc08:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc0e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc12:	b9 08 00 00 00       	mov    ecx,0x8
c000fc17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc19:	83 c4 2c             	add    esp,0x2c
c000fc1c:	5b                   	pop    ebx
c000fc1d:	5e                   	pop    esi
c000fc1e:	5f                   	pop    edi
c000fc1f:	5d                   	pop    ebp
c000fc20:	c3                   	ret    
c000fc21:	90                   	nop

c000fc22 <EnvVarContainer::deleteEnv(char const*)>:
c000fc22:	c3                   	ret    
c000fc23:	90                   	nop

c000fc24 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc24:	55                   	push   ebp
c000fc25:	57                   	push   edi
c000fc26:	56                   	push   esi
c000fc27:	53                   	push   ebx
c000fc28:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc2e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc35:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc3c:	68 14 01 00 00       	push   0x114
c000fc41:	e8 73 7b ff ff       	call   c00077b9 <malloc>
c000fc46:	83 c4 0c             	add    esp,0xc
c000fc49:	89 c3                	mov    ebx,eax
c000fc4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc4e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc55:	50                   	push   eax
c000fc56:	e8 6f ad ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000fc5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc5e:	e8 95 b0 ff ff       	call   c000acf8 <File::exists()>
c000fc63:	83 c4 10             	add    esp,0x10
c000fc66:	84 c0                	test   al,al
c000fc68:	75 31                	jne    c000fc9b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc6a:	50                   	push   eax
c000fc6b:	50                   	push   eax
c000fc6c:	6a 12                	push   0x12
c000fc6e:	53                   	push   ebx
c000fc6f:	e8 16 ae ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000fc74:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc76:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc79:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc7c:	e8 bf 08 ff ff       	call   c0000540 <strlen>
c000fc81:	5a                   	pop    edx
c000fc82:	31 d2                	xor    edx,edx
c000fc84:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc88:	51                   	push   ecx
c000fc89:	56                   	push   esi
c000fc8a:	52                   	push   edx
c000fc8b:	50                   	push   eax
c000fc8c:	53                   	push   ebx
c000fc8d:	ff d7                	call   edi
c000fc8f:	83 c4 14             	add    esp,0x14
c000fc92:	53                   	push   ebx
c000fc93:	e8 50 ae ff ff       	call   c000aae8 <File::close()>
c000fc98:	83 c4 10             	add    esp,0x10
c000fc9b:	56                   	push   esi
c000fc9c:	31 f6                	xor    esi,esi
c000fc9e:	68 00 01 00 00       	push   0x100
c000fca3:	6a 00                	push   0x0
c000fca5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fca9:	50                   	push   eax
c000fcaa:	e8 21 08 ff ff       	call   c00004d0 <memset>
c000fcaf:	5f                   	pop    edi
c000fcb0:	58                   	pop    eax
c000fcb1:	6a 01                	push   0x1
c000fcb3:	53                   	push   ebx
c000fcb4:	e8 d1 ad ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000fcb9:	83 c4 10             	add    esp,0x10
c000fcbc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fcc4:	83 ec 0c             	sub    esp,0xc
c000fcc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcc9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fccd:	51                   	push   ecx
c000fcce:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fcd2:	52                   	push   edx
c000fcd3:	6a 00                	push   0x0
c000fcd5:	6a 01                	push   0x1
c000fcd7:	53                   	push   ebx
c000fcd8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fcdb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fcdf:	83 c4 20             	add    esp,0x20
c000fce2:	3c 0d                	cmp    al,0xd
c000fce4:	0f 84 09 01 00 00    	je     c000fdf3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fcea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fcef:	0f 84 ef 00 00 00    	je     c000fde4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fcf5:	3c 0a                	cmp    al,0xa
c000fcf7:	74 13                	je     c000fd0c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fcf9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fcfe:	74 0c                	je     c000fd0c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd00:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd06:	0f 8e d8 00 00 00    	jle    c000fde4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd10:	83 ec 0c             	sub    esp,0xc
c000fd13:	8d 78 01             	lea    edi,[eax+0x1]
c000fd16:	57                   	push   edi
c000fd17:	e8 9d 7a ff ff       	call   c00077b9 <malloc>
c000fd1c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd24:	8d 56 04             	lea    edx,[esi+0x4]
c000fd27:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd2e:	e8 86 7a ff ff       	call   c00077b9 <malloc>
c000fd33:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd37:	83 c4 0c             	add    esp,0xc
c000fd3a:	57                   	push   edi
c000fd3b:	6a 00                	push   0x0
c000fd3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd41:	e8 8a 07 ff ff       	call   c00004d0 <memset>
c000fd46:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd4a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd4e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd54:	83 c4 0c             	add    esp,0xc
c000fd57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd5b:	52                   	push   edx
c000fd5c:	6a 00                	push   0x0
c000fd5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd62:	e8 69 07 ff ff       	call   c00004d0 <memset>
c000fd67:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd6b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd6f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd72:	e8 c9 07 ff ff       	call   c0000540 <strlen>
c000fd77:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd7b:	89 c1                	mov    ecx,eax
c000fd7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd7f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd82:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fd85:	40                   	inc    eax
c000fd86:	83 c4 10             	add    esp,0x10
c000fd89:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd8c:	85 d2                	test   edx,edx
c000fd8e:	75 0c                	jne    c000fd9c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fd90:	83 ec 0c             	sub    esp,0xc
c000fd93:	6a 08                	push   0x8
c000fd95:	e8 1f 7a ff ff       	call   c00077b9 <malloc>
c000fd9a:	eb 0c                	jmp    c000fda8 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fd9c:	c1 e0 03             	shl    eax,0x3
c000fd9f:	51                   	push   ecx
c000fda0:	51                   	push   ecx
c000fda1:	50                   	push   eax
c000fda2:	52                   	push   edx
c000fda3:	e8 fd 79 ff ff       	call   c00077a5 <realloc>
c000fda8:	83 c4 10             	add    esp,0x10
c000fdab:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdb1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fdb4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fdb8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fdbc:	b9 08 00 00 00       	mov    ecx,0x8
c000fdc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc3:	31 f6                	xor    esi,esi
c000fdc5:	50                   	push   eax
c000fdc6:	68 00 01 00 00       	push   0x100
c000fdcb:	6a 00                	push   0x0
c000fdcd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fdd1:	50                   	push   eax
c000fdd2:	e8 f9 06 ff ff       	call   c00004d0 <memset>
c000fdd7:	83 c4 10             	add    esp,0x10
c000fdda:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fde2:	eb 0f                	jmp    c000fdf3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fde4:	3c 3d                	cmp    al,0x3d
c000fde6:	74 07                	je     c000fdef <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fde8:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fdec:	46                   	inc    esi
c000fded:	eb 04                	jmp    c000fdf3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdef:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fdf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fdf8:	0f 85 c6 fe ff ff    	jne    c000fcc4 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fdfe:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe04:	5b                   	pop    ebx
c000fe05:	5e                   	pop    esi
c000fe06:	5f                   	pop    edi
c000fe07:	5d                   	pop    ebp
c000fe08:	c3                   	ret    
c000fe09:	90                   	nop

c000fe0a <EnvVarContainer::__loadSystem()>:
c000fe0a:	83 ec 10             	sub    esp,0x10
c000fe0d:	68 40 f3 01 c0       	push   0xc001f340
c000fe12:	68 84 e1 01 c0       	push   0xc001e184
c000fe17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe1b:	e8 04 fe ff ff       	call   c000fc24 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe20:	83 c4 1c             	add    esp,0x1c
c000fe23:	c3                   	ret    

c000fe24 <EnvVarContainer::__loadUser()>:
c000fe24:	c3                   	ret    
c000fe25:	90                   	nop

c000fe26 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe2a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe38:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe46:	90                   	nop
c000fe47:	c3                   	ret    

c000fe48 <EnvVarContainer::~EnvVarContainer()>:
c000fe48:	83 ec 0c             	sub    esp,0xc
c000fe4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe52:	85 c0                	test   eax,eax
c000fe54:	74 1d                	je     c000fe73 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe5c:	85 c0                	test   eax,eax
c000fe5e:	74 13                	je     c000fe73 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe67:	83 ec 0c             	sub    esp,0xc
c000fe6a:	50                   	push   eax
c000fe6b:	e8 59 79 ff ff       	call   c00077c9 <free>
c000fe70:	83 c4 10             	add    esp,0x10
c000fe73:	90                   	nop
c000fe74:	83 c4 0c             	add    esp,0xc
c000fe77:	c3                   	ret    

c000fe78 <Krnl::getEnv(Process*, char const*)>:
c000fe78:	53                   	push   ebx
c000fe79:	83 ec 08             	sub    esp,0x8
c000fe7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fe84:	39 05 70 37 02 c0    	cmp    DWORD PTR ds:0xc0023770,eax
c000fe8a:	74 04                	je     c000fe90 <Krnl::getEnv(Process*, char const*)+0x18>
c000fe8c:	85 c0                	test   eax,eax
c000fe8e:	75 0b                	jne    c000fe9b <Krnl::getEnv(Process*, char const*)+0x23>
c000fe90:	a1 10 2f 02 c0       	mov    eax,ds:0xc0022f10
c000fe95:	85 c0                	test   eax,eax
c000fe97:	75 19                	jne    c000feb2 <Krnl::getEnv(Process*, char const*)+0x3a>
c000fe99:	eb 27                	jmp    c000fec2 <Krnl::getEnv(Process*, char const*)+0x4a>
c000fe9b:	52                   	push   edx
c000fe9c:	52                   	push   edx
c000fe9d:	53                   	push   ebx
c000fe9e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fea4:	e8 79 fc ff ff       	call   c000fb22 <EnvVarContainer::getEnv(char const*)>
c000fea9:	83 c4 10             	add    esp,0x10
c000feac:	85 c0                	test   eax,eax
c000feae:	75 28                	jne    c000fed8 <Krnl::getEnv(Process*, char const*)+0x60>
c000feb0:	eb de                	jmp    c000fe90 <Krnl::getEnv(Process*, char const*)+0x18>
c000feb2:	52                   	push   edx
c000feb3:	52                   	push   edx
c000feb4:	53                   	push   ebx
c000feb5:	50                   	push   eax
c000feb6:	e8 67 fc ff ff       	call   c000fb22 <EnvVarContainer::getEnv(char const*)>
c000febb:	83 c4 10             	add    esp,0x10
c000febe:	85 c0                	test   eax,eax
c000fec0:	75 16                	jne    c000fed8 <Krnl::getEnv(Process*, char const*)+0x60>
c000fec2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fec6:	a1 14 2f 02 c0       	mov    eax,ds:0xc0022f14
c000fecb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fecf:	83 c4 08             	add    esp,0x8
c000fed2:	5b                   	pop    ebx
c000fed3:	e9 4a fc ff ff       	jmp    c000fb22 <EnvVarContainer::getEnv(char const*)>
c000fed8:	83 c4 08             	add    esp,0x8
c000fedb:	5b                   	pop    ebx
c000fedc:	c3                   	ret    

c000fedd <Krnl::setEnvSystem(char const*, char const*)>:
c000fedd:	83 ec 10             	sub    esp,0x10
c000fee0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fee4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fee8:	ff 35 14 2f 02 c0    	push   DWORD PTR ds:0xc0022f14
c000feee:	e8 6d fc ff ff       	call   c000fb60 <EnvVarContainer::setEnv(char const*, char const*)>
c000fef3:	83 c4 1c             	add    esp,0x1c
c000fef6:	c3                   	ret    

c000fef7 <Krnl::setEnvUser(char const*, char const*)>:
c000fef7:	a1 10 2f 02 c0       	mov    eax,ds:0xc0022f10
c000fefc:	85 c0                	test   eax,eax
c000fefe:	74 15                	je     c000ff15 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff00:	83 ec 10             	sub    esp,0x10
c000ff03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff0b:	50                   	push   eax
c000ff0c:	e8 4f fc ff ff       	call   c000fb60 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff11:	83 c4 1c             	add    esp,0x1c
c000ff14:	c3                   	ret    
c000ff15:	c3                   	ret    

c000ff16 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff1a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff24:	e9 37 fc ff ff       	jmp    c000fb60 <EnvVarContainer::setEnv(char const*, char const*)>

c000ff29 <Krnl::deleteEnvSystem(char const*)>:
c000ff29:	c3                   	ret    

c000ff2a <Krnl::deleteEnvUser(char const*)>:
c000ff2a:	c3                   	ret    

c000ff2b <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff2b:	c3                   	ret    

c000ff2c <Krnl::newProcessEnv(Process*)>:
c000ff2c:	83 ec 28             	sub    esp,0x28
c000ff2f:	6a 0c                	push   0xc
c000ff31:	e8 83 78 ff ff       	call   c00077b9 <malloc>
c000ff36:	5a                   	pop    edx
c000ff37:	59                   	pop    ecx
c000ff38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff3c:	50                   	push   eax
c000ff3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff41:	e8 e0 fe ff ff       	call   c000fe26 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff4a:	83 c4 2c             	add    esp,0x2c
c000ff4d:	c3                   	ret    

c000ff4e <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff4e:	57                   	push   edi
c000ff4f:	56                   	push   esi
c000ff50:	53                   	push   ebx
c000ff51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff55:	83 ec 0c             	sub    esp,0xc
c000ff58:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff5e:	6a 0c                	push   0xc
c000ff60:	e8 54 78 ff ff       	call   c00077b9 <malloc>
c000ff65:	89 c3                	mov    ebx,eax
c000ff67:	58                   	pop    eax
c000ff68:	5a                   	pop    edx
c000ff69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff6d:	53                   	push   ebx
c000ff6e:	e8 b3 fe ff ff       	call   c000fe26 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff73:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff75:	89 03                	mov    DWORD PTR [ebx],eax
c000ff77:	c1 e0 03             	shl    eax,0x3
c000ff7a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff7d:	e8 37 78 ff ff       	call   c00077b9 <malloc>
c000ff82:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ff85:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ff87:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ff8a:	c1 e1 03             	shl    ecx,0x3
c000ff8d:	89 c7                	mov    edi,eax
c000ff8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff91:	83 c4 10             	add    esp,0x10
c000ff94:	89 d8                	mov    eax,ebx
c000ff96:	5b                   	pop    ebx
c000ff97:	5e                   	pop    esi
c000ff98:	5f                   	pop    edi
c000ff99:	c3                   	ret    

c000ff9a <Krnl::loadSystemEnv()>:
c000ff9a:	53                   	push   ebx
c000ff9b:	83 ec 14             	sub    esp,0x14
c000ff9e:	6a 0c                	push   0xc
c000ffa0:	e8 14 78 ff ff       	call   c00077b9 <malloc>
c000ffa5:	89 c3                	mov    ebx,eax
c000ffa7:	58                   	pop    eax
c000ffa8:	5a                   	pop    edx
c000ffa9:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c000ffaf:	53                   	push   ebx
c000ffb0:	e8 71 fe ff ff       	call   c000fe26 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffb8:	89 1d 14 2f 02 c0    	mov    DWORD PTR ds:0xc0022f14,ebx
c000ffbe:	e8 47 fe ff ff       	call   c000fe0a <EnvVarContainer::__loadSystem()>
c000ffc3:	83 c4 18             	add    esp,0x18
c000ffc6:	5b                   	pop    ebx
c000ffc7:	c3                   	ret    

c000ffc8 <Krnl::loadUserEnv()>:
c000ffc8:	53                   	push   ebx
c000ffc9:	83 ec 14             	sub    esp,0x14
c000ffcc:	6a 0c                	push   0xc
c000ffce:	e8 e6 77 ff ff       	call   c00077b9 <malloc>
c000ffd3:	89 c3                	mov    ebx,eax
c000ffd5:	58                   	pop    eax
c000ffd6:	5a                   	pop    edx
c000ffd7:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c000ffdd:	53                   	push   ebx
c000ffde:	e8 43 fe ff ff       	call   c000fe26 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffe3:	89 1d 10 2f 02 c0    	mov    DWORD PTR ds:0xc0022f10,ebx
c000ffe9:	83 c4 18             	add    esp,0x18
c000ffec:	5b                   	pop    ebx
c000ffed:	c3                   	ret    

c000ffee <Krnl::flushEnv()>:
c000ffee:	c3                   	ret    

c000ffef <Krnl::getProcessTotalEnvCount(Process*)>:
c000ffef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff3:	8b 15 10 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f10
c000fff9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000ffff:	a1 14 2f 02 c0       	mov    eax,ds:0xc0022f14
c0010004:	8b 00                	mov    eax,DWORD PTR [eax]
c0010006:	03 01                	add    eax,DWORD PTR [ecx]
c0010008:	85 d2                	test   edx,edx
c001000a:	74 02                	je     c001000e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001000c:	03 02                	add    eax,DWORD PTR [edx]
c001000e:	c3                   	ret    

c001000f <Krnl::getProcessEnvPair(Process*, int)>:
c001000f:	57                   	push   edi
c0010010:	56                   	push   esi
c0010011:	8b 35 10 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f10
c0010017:	53                   	push   ebx
c0010018:	85 f6                	test   esi,esi
c001001a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001001e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010022:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010028:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001002c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001002e:	75 16                	jne    c0010046 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010030:	39 c2                	cmp    edx,eax
c0010032:	7c 16                	jl     c001004a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010034:	8b 0d 14 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f14
c001003a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001003c:	01 c6                	add    esi,eax
c001003e:	39 d6                	cmp    esi,edx
c0010040:	7e 3c                	jle    c001007e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010042:	29 c2                	sub    edx,eax
c0010044:	eb 04                	jmp    c001004a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010046:	39 c2                	cmp    edx,eax
c0010048:	7d 05                	jge    c001004f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001004a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001004d:	eb 20                	jmp    c001006f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001004f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010051:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010054:	39 d1                	cmp    ecx,edx
c0010056:	7e 04                	jle    c001005c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010058:	29 c2                	sub    edx,eax
c001005a:	eb 10                	jmp    c001006c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001005c:	8b 35 14 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f14
c0010062:	03 0e                	add    ecx,DWORD PTR [esi]
c0010064:	39 d1                	cmp    ecx,edx
c0010066:	7e 16                	jle    c001007e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010068:	29 c2                	sub    edx,eax
c001006a:	29 fa                	sub    edx,edi
c001006c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001006f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010072:	8b 02                	mov    eax,DWORD PTR [edx]
c0010074:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010077:	89 03                	mov    DWORD PTR [ebx],eax
c0010079:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001007c:	eb 1d                	jmp    c001009b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001007e:	83 ec 0c             	sub    esp,0xc
c0010081:	68 a6 e1 01 c0       	push   0xc001e1a6
c0010086:	e8 ac 00 00 00       	call   c0010137 <KePanic(char const*)>
c001008b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010091:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010098:	83 c4 10             	add    esp,0x10
c001009b:	89 d8                	mov    eax,ebx
c001009d:	5b                   	pop    ebx
c001009e:	5e                   	pop    esi
c001009f:	5f                   	pop    edi
c00100a0:	c2 04 00             	ret    0x4

c00100a3 <CPU::current()>:
c00100a3:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c00100a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00100ae:	c3                   	ret    

c00100af <operator new(unsigned long)>:
c00100af:	e9 05 77 ff ff       	jmp    c00077b9 <malloc>

c00100b4 <operator delete(void*)>:
c00100b4:	e9 20 77 ff ff       	jmp    c00077d9 <rfree>

c00100b9 <disableIRQs()>:
c00100b9:	fa                   	cli    
c00100ba:	c3                   	ret    

c00100bb <enableIRQs()>:
c00100bb:	fb                   	sti    
c00100bc:	c3                   	ret    

c00100bd <lockScheduler()>:
c00100bd:	fa                   	cli    
c00100be:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00100c4:	c3                   	ret    

c00100c5 <unlockScheduler()>:
c00100c5:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00100ca:	48                   	dec    eax
c00100cb:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00100d0:	75 01                	jne    c00100d3 <unlockScheduler()+0xe>
c00100d2:	fb                   	sti    
c00100d3:	c3                   	ret    

c00100d4 <lockStuff()>:
c00100d4:	fa                   	cli    
c00100d5:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00100db:	ff 05 44 37 02 c0    	inc    DWORD PTR ds:0xc0023744
c00100e1:	c3                   	ret    

c00100e2 <unlockStuff()>:
c00100e2:	83 ec 0c             	sub    esp,0xc
c00100e5:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c00100ea:	48                   	dec    eax
c00100eb:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c00100f0:	75 18                	jne    c001010a <unlockStuff()+0x28>
c00100f2:	83 3d 40 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023740,0x0
c00100f9:	74 0f                	je     c001010a <unlockStuff()+0x28>
c00100fb:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0010105:	e8 3e 32 00 00       	call   c0013348 <schedule()>
c001010a:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001010f:	48                   	dec    eax
c0010110:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0010115:	75 01                	jne    c0010118 <unlockStuff()+0x36>
c0010117:	fb                   	sti    
c0010118:	83 c4 0c             	add    esp,0xc
c001011b:	c3                   	ret    

c001011c <Virt::getAKernelVAS()>:
c001011c:	a1 90 05 02 c0       	mov    eax,ds:0xc0020590
c0010121:	c3                   	ret    

c0010122 <__not_memcpy>:
c0010122:	57                   	push   edi
c0010123:	56                   	push   esi
c0010124:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010128:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001012c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010130:	89 c7                	mov    edi,eax
c0010132:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010134:	5e                   	pop    esi
c0010135:	5f                   	pop    edi
c0010136:	c3                   	ret    

c0010137 <KePanic(char const*)>:
c0010137:	c6 05 18 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f18,0x1
c001013e:	e9 fd 4f 00 00       	jmp    c0015140 <HalPanic(char const*)>

c0010143 <Krnl::powerThread(void*)>:
c0010143:	83 ec 0c             	sub    esp,0xc
c0010146:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001014b:	48                   	dec    eax
c001014c:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0010151:	75 01                	jne    c0010154 <Krnl::powerThread(void*)+0x11>
c0010153:	fb                   	sti    
c0010154:	83 ec 0c             	sub    esp,0xc
c0010157:	c6 05 20 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f20,0x0
c001015e:	6a 0a                	push   0xa
c0010160:	e8 f3 34 00 00       	call   c0013658 <sleep(unsigned int)>
c0010165:	83 05 64 2f 02 c0 0a 	add    DWORD PTR ds:0xc0022f64,0xa
c001016c:	83 c4 10             	add    esp,0x10
c001016f:	eb e3                	jmp    c0010154 <Krnl::powerThread(void*)+0x11>

c0010171 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010171:	57                   	push   edi
c0010172:	b9 09 00 00 00       	mov    ecx,0x9
c0010177:	56                   	push   esi
c0010178:	bf 40 2f 02 c0       	mov    edi,0xc0022f40
c001017d:	fc                   	cld    
c001017e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010182:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010184:	5e                   	pop    esi
c0010185:	5f                   	pop    edi
c0010186:	c3                   	ret    

c0010187 <Krnl::userIOReceived()>:
c0010187:	c7 05 64 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f64,0x0
c0010191:	c3                   	ret    

c0010192 <Krnl::handlePowerButton()>:
c0010192:	83 ec 0c             	sub    esp,0xc
c0010195:	a1 40 2f 02 c0       	mov    eax,ds:0xc0022f40
c001019a:	83 f8 02             	cmp    eax,0x2
c001019d:	75 10                	jne    c00101af <Krnl::handlePowerButton()+0x1d>
c001019f:	83 ec 0c             	sub    esp,0xc
c00101a2:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00101a8:	e8 a9 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101ad:	eb 11                	jmp    c00101c0 <Krnl::handlePowerButton()+0x2e>
c00101af:	48                   	dec    eax
c00101b0:	75 11                	jne    c00101c3 <Krnl::handlePowerButton()+0x31>
c00101b2:	83 ec 0c             	sub    esp,0xc
c00101b5:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00101bb:	e8 c6 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101c0:	83 c4 10             	add    esp,0x10
c00101c3:	83 c4 0c             	add    esp,0xc
c00101c6:	c3                   	ret    

c00101c7 <Krnl::handleSleepButton()>:
c00101c7:	83 ec 0c             	sub    esp,0xc
c00101ca:	a1 44 2f 02 c0       	mov    eax,ds:0xc0022f44
c00101cf:	83 f8 02             	cmp    eax,0x2
c00101d2:	75 10                	jne    c00101e4 <Krnl::handleSleepButton()+0x1d>
c00101d4:	83 ec 0c             	sub    esp,0xc
c00101d7:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00101dd:	e8 74 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101e2:	eb 11                	jmp    c00101f5 <Krnl::handleSleepButton()+0x2e>
c00101e4:	48                   	dec    eax
c00101e5:	75 11                	jne    c00101f8 <Krnl::handleSleepButton()+0x31>
c00101e7:	83 ec 0c             	sub    esp,0xc
c00101ea:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00101f0:	e8 91 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101f5:	83 c4 10             	add    esp,0x10
c00101f8:	83 c4 0c             	add    esp,0xc
c00101fb:	c3                   	ret    

c00101fc <Krnl::setupPowerManager()>:
c00101fc:	83 ec 0c             	sub    esp,0xc
c00101ff:	c7 05 64 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f64,0x0
c0010209:	68 f0 00 00 00       	push   0xf0
c001020e:	c6 05 20 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f20,0x0
c0010215:	6a 00                	push   0x0
c0010217:	68 43 01 01 c0       	push   0xc0010143
c001021c:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c0010222:	e8 01 2f 00 00       	call   c0013128 <Process::createThread(void (*)(void*), void*, int)>
c0010227:	c7 05 40 2f 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022f40,0x2
c0010231:	c7 05 44 2f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022f44,0x1
c001023b:	c7 05 48 2f 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022f48,0x3
c0010245:	c7 05 4c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f4c,0x0
c001024f:	c7 05 58 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f58,0x0
c0010259:	c7 05 50 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f50,0x0
c0010263:	c7 05 5c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f5c,0x0
c001026d:	c7 05 54 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f54,0x3c
c0010277:	c7 05 60 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f60,0x3c
c0010281:	83 c4 1c             	add    esp,0x1c
c0010284:	c3                   	ret    
c0010285:	66 90                	xchg   ax,ax
c0010287:	90                   	nop

c0010288 <KeResolveCompatibilitySymbol(char*)>:
c0010288:	83 ec 0c             	sub    esp,0xc
c001028b:	83 ec 08             	sub    esp,0x8
c001028e:	68 c0 e1 01 c0       	push   0xc001e1c0
c0010293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010297:	e8 44 04 ff ff       	call   c00006e0 <strcmp>
c001029c:	83 c4 10             	add    esp,0x10
c001029f:	85 c0                	test   eax,eax
c00102a1:	0f 94 c0             	sete   al
c00102a4:	84 c0                	test   al,al
c00102a6:	74 0c                	je     c00102b4 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00102a8:	b8 98 04 02 c0       	mov    eax,0xc0020498
c00102ad:	e9 62 01 00 00       	jmp    c0010414 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102b2:	66 90                	xchg   ax,ax
c00102b4:	83 ec 08             	sub    esp,0x8
c00102b7:	68 c9 e1 01 c0       	push   0xc001e1c9
c00102bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c0:	e8 1b 04 ff ff       	call   c00006e0 <strcmp>
c00102c5:	83 c4 10             	add    esp,0x10
c00102c8:	85 c0                	test   eax,eax
c00102ca:	0f 94 c0             	sete   al
c00102cd:	84 c0                	test   al,al
c00102cf:	74 0b                	je     c00102dc <KeResolveCompatibilitySymbol(char*)+0x54>
c00102d1:	b8 40 bc 01 c0       	mov    eax,0xc001bc40
c00102d6:	e9 39 01 00 00       	jmp    c0010414 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102db:	90                   	nop
c00102dc:	83 ec 08             	sub    esp,0x8
c00102df:	68 d3 e1 01 c0       	push   0xc001e1d3
c00102e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e8:	e8 f3 03 ff ff       	call   c00006e0 <strcmp>
c00102ed:	83 c4 10             	add    esp,0x10
c00102f0:	85 c0                	test   eax,eax
c00102f2:	0f 94 c0             	sete   al
c00102f5:	84 c0                	test   al,al
c00102f7:	74 0b                	je     c0010304 <KeResolveCompatibilitySymbol(char*)+0x7c>
c00102f9:	b8 74 b9 01 c0       	mov    eax,0xc001b974
c00102fe:	e9 11 01 00 00       	jmp    c0010414 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010303:	90                   	nop
c0010304:	83 ec 08             	sub    esp,0x8
c0010307:	68 dc e1 01 c0       	push   0xc001e1dc
c001030c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010310:	e8 cb 03 ff ff       	call   c00006e0 <strcmp>
c0010315:	83 c4 10             	add    esp,0x10
c0010318:	85 c0                	test   eax,eax
c001031a:	0f 94 c0             	sete   al
c001031d:	84 c0                	test   al,al
c001031f:	74 0b                	je     c001032c <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010321:	b8 37 01 01 c0       	mov    eax,0xc0010137
c0010326:	e9 e9 00 00 00       	jmp    c0010414 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001032b:	90                   	nop
c001032c:	83 ec 08             	sub    esp,0x8
c001032f:	68 ef e1 01 c0       	push   0xc001e1ef
c0010334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010338:	e8 a3 03 ff ff       	call   c00006e0 <strcmp>
c001033d:	83 c4 10             	add    esp,0x10
c0010340:	85 c0                	test   eax,eax
c0010342:	0f 94 c0             	sete   al
c0010345:	84 c0                	test   al,al
c0010347:	74 0b                	je     c0010354 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010349:	b8 bf fa 00 c0       	mov    eax,0xc000fabf
c001034e:	e9 c1 00 00 00       	jmp    c0010414 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010353:	90                   	nop
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	68 0c e2 01 c0       	push   0xc001e20c
c001035c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010360:	e8 7b 03 ff ff       	call   c00006e0 <strcmp>
c0010365:	83 c4 10             	add    esp,0x10
c0010368:	85 c0                	test   eax,eax
c001036a:	0f 94 c0             	sete   al
c001036d:	84 c0                	test   al,al
c001036f:	74 0b                	je     c001037c <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010371:	b8 40 bd 01 c0       	mov    eax,0xc001bd40
c0010376:	e9 99 00 00 00       	jmp    c0010414 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001037b:	90                   	nop
c001037c:	83 ec 08             	sub    esp,0x8
c001037f:	68 16 e2 01 c0       	push   0xc001e216
c0010384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010388:	e8 53 03 ff ff       	call   c00006e0 <strcmp>
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	85 c0                	test   eax,eax
c0010392:	0f 94 c0             	sete   al
c0010395:	84 c0                	test   al,al
c0010397:	74 07                	je     c00103a0 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010399:	b8 c0 ba 01 c0       	mov    eax,0xc001bac0
c001039e:	eb 74                	jmp    c0010414 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103a0:	83 ec 08             	sub    esp,0x8
c00103a3:	68 1f e2 01 c0       	push   0xc001e21f
c00103a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103ac:	e8 2f 03 ff ff       	call   c00006e0 <strcmp>
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	85 c0                	test   eax,eax
c00103b6:	0f 94 c0             	sete   al
c00103b9:	84 c0                	test   al,al
c00103bb:	74 07                	je     c00103c4 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00103bd:	b8 9c 04 02 c0       	mov    eax,0xc002049c
c00103c2:	eb 50                	jmp    c0010414 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103c4:	83 ec 08             	sub    esp,0x8
c00103c7:	68 37 e2 01 c0       	push   0xc001e237
c00103cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d0:	e8 0b 03 ff ff       	call   c00006e0 <strcmp>
c00103d5:	83 c4 10             	add    esp,0x10
c00103d8:	85 c0                	test   eax,eax
c00103da:	0f 94 c0             	sete   al
c00103dd:	84 c0                	test   al,al
c00103df:	74 07                	je     c00103e8 <KeResolveCompatibilitySymbol(char*)+0x160>
c00103e1:	b8 9c 04 02 c0       	mov    eax,0xc002049c
c00103e6:	eb 2c                	jmp    c0010414 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103e8:	83 ec 08             	sub    esp,0x8
c00103eb:	68 44 e2 01 c0       	push   0xc001e244
c00103f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f4:	e8 e7 02 ff ff       	call   c00006e0 <strcmp>
c00103f9:	83 c4 10             	add    esp,0x10
c00103fc:	85 c0                	test   eax,eax
c00103fe:	0f 94 c0             	sete   al
c0010401:	84 c0                	test   al,al
c0010403:	74 07                	je     c001040c <KeResolveCompatibilitySymbol(char*)+0x184>
c0010405:	b8 9d 04 02 c0       	mov    eax,0xc002049d
c001040a:	eb 08                	jmp    c0010414 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001040c:	b8 00 00 00 00       	mov    eax,0x0
c0010411:	8d 76 00             	lea    esi,[esi+0x0]
c0010414:	83 c4 0c             	add    esp,0xc
c0010417:	c3                   	ret    

c0010418 <SysSeekDir(regs*)>:
c0010418:	31 c0                	xor    eax,eax
c001041a:	31 d2                	xor    edx,edx
c001041c:	c3                   	ret    

c001041d <SysTellDir(regs*)>:
c001041d:	31 c0                	xor    eax,eax
c001041f:	31 d2                	xor    edx,edx
c0010421:	c3                   	ret    

c0010422 <SysVerify(regs*)>:
c0010422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010426:	31 d2                	xor    edx,edx
c0010428:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001042b:	c3                   	ret    

c001042c <SysGetArgc(regs*)>:
c001042c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010431:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010434:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001043a:	99                   	cdq    
c001043b:	c3                   	ret    

c001043c <SysTTYName(regs*)>:
c001043c:	b8 01 00 00 00       	mov    eax,0x1
c0010441:	31 d2                	xor    edx,edx
c0010443:	c3                   	ret    

c0010444 <SysFormatDisk(regs*)>:
c0010444:	56                   	push   esi
c0010445:	53                   	push   ebx
c0010446:	50                   	push   eax
c0010447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001044b:	8b 1d 94 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020594
c0010451:	eb 28                	jmp    c001047b <SysFormatDisk(regs*)+0x37>
c0010453:	83 ec 0c             	sub    esp,0xc
c0010456:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010459:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001045c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001045e:	51                   	push   ecx
c001045f:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010462:	51                   	push   ecx
c0010463:	50                   	push   eax
c0010464:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c001046b:	50                   	push   eax
c001046c:	53                   	push   ebx
c001046d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010470:	83 c4 20             	add    esp,0x20
c0010473:	83 f8 08             	cmp    eax,0x8
c0010476:	75 12                	jne    c001048a <SysFormatDisk(regs*)+0x46>
c0010478:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001047b:	85 db                	test   ebx,ebx
c001047d:	75 d4                	jne    c0010453 <SysFormatDisk(regs*)+0xf>
c001047f:	59                   	pop    ecx
c0010480:	b8 03 00 00 00       	mov    eax,0x3
c0010485:	31 d2                	xor    edx,edx
c0010487:	5b                   	pop    ebx
c0010488:	5e                   	pop    esi
c0010489:	c3                   	ret    
c001048a:	85 c0                	test   eax,eax
c001048c:	74 1b                	je     c00104a9 <SysFormatDisk(regs*)+0x65>
c001048e:	83 f8 09             	cmp    eax,0x9
c0010491:	74 0b                	je     c001049e <SysFormatDisk(regs*)+0x5a>
c0010493:	59                   	pop    ecx
c0010494:	b8 02 00 00 00       	mov    eax,0x2
c0010499:	31 d2                	xor    edx,edx
c001049b:	5b                   	pop    ebx
c001049c:	5e                   	pop    esi
c001049d:	c3                   	ret    
c001049e:	59                   	pop    ecx
c001049f:	b8 01 00 00 00       	mov    eax,0x1
c00104a4:	31 d2                	xor    edx,edx
c00104a6:	5b                   	pop    ebx
c00104a7:	5e                   	pop    esi
c00104a8:	c3                   	ret    
c00104a9:	59                   	pop    ecx
c00104aa:	31 c0                	xor    eax,eax
c00104ac:	31 d2                	xor    edx,edx
c00104ae:	5b                   	pop    ebx
c00104af:	5e                   	pop    esi
c00104b0:	c3                   	ret    

c00104b1 <SysSetDiskVolumeLabel(regs*)>:
c00104b1:	56                   	push   esi
c00104b2:	53                   	push   ebx
c00104b3:	53                   	push   ebx
c00104b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00104b8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00104bb:	83 f8 19             	cmp    eax,0x19
c00104be:	77 2d                	ja     c00104ed <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104c0:	8b 0c 85 00 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd600]
c00104c7:	85 c9                	test   ecx,ecx
c00104c9:	74 22                	je     c00104ed <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104cb:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00104ce:	85 db                	test   ebx,ebx
c00104d0:	74 1b                	je     c00104ed <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104d2:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00104d8:	85 d2                	test   edx,edx
c00104da:	74 11                	je     c00104ed <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104dc:	8b 32                	mov    esi,DWORD PTR [edx]
c00104de:	53                   	push   ebx
c00104df:	50                   	push   eax
c00104e0:	51                   	push   ecx
c00104e1:	52                   	push   edx
c00104e2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00104e5:	83 c4 10             	add    esp,0x10
c00104e8:	99                   	cdq    
c00104e9:	59                   	pop    ecx
c00104ea:	5b                   	pop    ebx
c00104eb:	5e                   	pop    esi
c00104ec:	c3                   	ret    
c00104ed:	59                   	pop    ecx
c00104ee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00104f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104f8:	5b                   	pop    ebx
c00104f9:	5e                   	pop    esi
c00104fa:	c3                   	ret    

c00104fb <SysGetDiskVolumeLabel(regs*)>:
c00104fb:	57                   	push   edi
c00104fc:	56                   	push   esi
c00104fd:	53                   	push   ebx
c00104fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010502:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010505:	83 fa 19             	cmp    edx,0x19
c0010508:	77 38                	ja     c0010542 <SysGetDiskVolumeLabel(regs*)+0x47>
c001050a:	8b 0c 95 00 2a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd600]
c0010511:	85 c9                	test   ecx,ecx
c0010513:	74 2d                	je     c0010542 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010515:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010518:	85 db                	test   ebx,ebx
c001051a:	74 26                	je     c0010542 <SysGetDiskVolumeLabel(regs*)+0x47>
c001051c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001051f:	85 f6                	test   esi,esi
c0010521:	74 1f                	je     c0010542 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010523:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010529:	85 c0                	test   eax,eax
c001052b:	74 15                	je     c0010542 <SysGetDiskVolumeLabel(regs*)+0x47>
c001052d:	83 ec 0c             	sub    esp,0xc
c0010530:	8b 38                	mov    edi,DWORD PTR [eax]
c0010532:	56                   	push   esi
c0010533:	53                   	push   ebx
c0010534:	52                   	push   edx
c0010535:	51                   	push   ecx
c0010536:	50                   	push   eax
c0010537:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001053a:	83 c4 20             	add    esp,0x20
c001053d:	99                   	cdq    
c001053e:	5b                   	pop    ebx
c001053f:	5e                   	pop    esi
c0010540:	5f                   	pop    edi
c0010541:	c3                   	ret    
c0010542:	5b                   	pop    ebx
c0010543:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010548:	ba ff ff ff ff       	mov    edx,0xffffffff
c001054d:	5e                   	pop    esi
c001054e:	5f                   	pop    edi
c001054f:	c3                   	ret    

c0010550 <SysShutdown(regs*)>:
c0010550:	83 ec 0c             	sub    esp,0xc
c0010553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010557:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001055a:	85 c0                	test   eax,eax
c001055c:	74 18                	je     c0010576 <SysShutdown(regs*)+0x26>
c001055e:	83 f8 01             	cmp    eax,0x1
c0010561:	74 38                	je     c001059b <SysShutdown(regs*)+0x4b>
c0010563:	83 f8 02             	cmp    eax,0x2
c0010566:	74 24                	je     c001058c <SysShutdown(regs*)+0x3c>
c0010568:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001056d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010572:	83 c4 0c             	add    esp,0xc
c0010575:	c3                   	ret    
c0010576:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001057b:	8b 10                	mov    edx,DWORD PTR [eax]
c001057d:	6a 00                	push   0x0
c001057f:	6a 00                	push   0x0
c0010581:	6a 00                	push   0x0
c0010583:	50                   	push   eax
c0010584:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010587:	83 c4 10             	add    esp,0x10
c001058a:	eb dc                	jmp    c0010568 <SysShutdown(regs*)+0x18>
c001058c:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0010591:	8b 10                	mov    edx,DWORD PTR [eax]
c0010593:	6a 00                	push   0x0
c0010595:	6a 00                	push   0x0
c0010597:	6a 01                	push   0x1
c0010599:	eb e8                	jmp    c0010583 <SysShutdown(regs*)+0x33>
c001059b:	a1 80 2a 02 c0       	mov    eax,ds:0xc0022a80
c00105a0:	85 c0                	test   eax,eax
c00105a2:	74 02                	je     c00105a6 <SysShutdown(regs*)+0x56>
c00105a4:	ff d0                	call   eax
c00105a6:	31 c0                	xor    eax,eax
c00105a8:	31 d2                	xor    edx,edx
c00105aa:	83 c4 0c             	add    esp,0xc
c00105ad:	c3                   	ret    

c00105ae <SysRealpath(regs*)>:
c00105ae:	83 ec 0c             	sub    esp,0xc
c00105b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00105b8:	85 d2                	test   edx,edx
c00105ba:	74 07                	je     c00105c3 <SysRealpath(regs*)+0x15>
c00105bc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00105bf:	85 c0                	test   eax,eax
c00105c1:	75 0b                	jne    c00105ce <SysRealpath(regs*)+0x20>
c00105c3:	b8 01 00 00 00       	mov    eax,0x1
c00105c8:	31 d2                	xor    edx,edx
c00105ca:	83 c4 0c             	add    esp,0xc
c00105cd:	c3                   	ret    
c00105ce:	51                   	push   ecx
c00105cf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00105d5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00105d8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00105de:	51                   	push   ecx
c00105df:	52                   	push   edx
c00105e0:	50                   	push   eax
c00105e1:	e8 3a a2 ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c00105e6:	83 c4 10             	add    esp,0x10
c00105e9:	31 c0                	xor    eax,eax
c00105eb:	31 d2                	xor    edx,edx
c00105ed:	83 c4 0c             	add    esp,0xc
c00105f0:	c3                   	ret    

c00105f1 <SysReadDir(regs*)>:
c00105f1:	53                   	push   ebx
c00105f2:	83 ec 18             	sub    esp,0x18
c00105f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00105f9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00105fc:	83 f8 02             	cmp    eax,0x2
c00105ff:	76 61                	jbe    c0010662 <SysReadDir(regs*)+0x71>
c0010601:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010608:	77 49                	ja     c0010653 <SysReadDir(regs*)+0x62>
c001060a:	83 ec 0c             	sub    esp,0xc
c001060d:	50                   	push   eax
c001060e:	e8 98 8a ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c0010613:	83 c4 10             	add    esp,0x10
c0010616:	85 c0                	test   eax,eax
c0010618:	74 39                	je     c0010653 <SysReadDir(regs*)+0x62>
c001061a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010622:	83 ec 0c             	sub    esp,0xc
c0010625:	8b 10                	mov    edx,DWORD PTR [eax]
c0010627:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001062b:	51                   	push   ecx
c001062c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001062f:	51                   	push   ecx
c0010630:	6a 00                	push   0x0
c0010632:	68 10 01 00 00       	push   0x110
c0010637:	50                   	push   eax
c0010638:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001063b:	83 c4 20             	add    esp,0x20
c001063e:	85 c0                	test   eax,eax
c0010640:	74 29                	je     c001066b <SysReadDir(regs*)+0x7a>
c0010642:	83 f8 07             	cmp    eax,0x7
c0010645:	74 1b                	je     c0010662 <SysReadDir(regs*)+0x71>
c0010647:	b8 02 00 00 00       	mov    eax,0x2
c001064c:	31 d2                	xor    edx,edx
c001064e:	83 c4 18             	add    esp,0x18
c0010651:	5b                   	pop    ebx
c0010652:	c3                   	ret    
c0010653:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010658:	ba ff ff ff ff       	mov    edx,0xffffffff
c001065d:	83 c4 18             	add    esp,0x18
c0010660:	5b                   	pop    ebx
c0010661:	c3                   	ret    
c0010662:	b8 01 00 00 00       	mov    eax,0x1
c0010667:	31 d2                	xor    edx,edx
c0010669:	eb e3                	jmp    c001064e <SysReadDir(regs*)+0x5d>
c001066b:	31 c0                	xor    eax,eax
c001066d:	31 d2                	xor    edx,edx
c001066f:	eb dd                	jmp    c001064e <SysReadDir(regs*)+0x5d>

c0010671 <SysIsATTY(regs*)>:
c0010671:	83 ec 0c             	sub    esp,0xc
c0010674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010678:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001067b:	83 f8 02             	cmp    eax,0x2
c001067e:	76 07                	jbe    c0010687 <SysIsATTY(regs*)+0x16>
c0010680:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010685:	75 28                	jne    c00106af <SysIsATTY(regs*)+0x3e>
c0010687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001068c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001068f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010695:	85 c0                	test   eax,eax
c0010697:	74 26                	je     c00106bf <SysIsATTY(regs*)+0x4e>
c0010699:	83 ec 0c             	sub    esp,0xc
c001069c:	8b 10                	mov    edx,DWORD PTR [eax]
c001069e:	50                   	push   eax
c001069f:	ff 12                	call   DWORD PTR [edx]
c00106a1:	31 d2                	xor    edx,edx
c00106a3:	25 ff 00 00 00       	and    eax,0xff
c00106a8:	83 c4 10             	add    esp,0x10
c00106ab:	83 c4 0c             	add    esp,0xc
c00106ae:	c3                   	ret    
c00106af:	83 ec 0c             	sub    esp,0xc
c00106b2:	50                   	push   eax
c00106b3:	e8 f3 89 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	85 c0                	test   eax,eax
c00106bd:	75 da                	jne    c0010699 <SysIsATTY(regs*)+0x28>
c00106bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106c9:	83 c4 0c             	add    esp,0xc
c00106cc:	c3                   	ret    

c00106cd <SysSeek(regs*)>:
c00106cd:	53                   	push   ebx
c00106ce:	83 ec 08             	sub    esp,0x8
c00106d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106d8:	8d 50 fd             	lea    edx,[eax-0x3]
c00106db:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00106e1:	77 34                	ja     c0010717 <SysSeek(regs*)+0x4a>
c00106e3:	83 ec 0c             	sub    esp,0xc
c00106e6:	50                   	push   eax
c00106e7:	e8 bf 89 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00106ec:	83 c4 0c             	add    esp,0xc
c00106ef:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00106f2:	31 db                	xor    ebx,ebx
c00106f4:	53                   	push   ebx
c00106f5:	51                   	push   ecx
c00106f6:	50                   	push   eax
c00106f7:	e8 4c a4 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00106fc:	83 c4 10             	add    esp,0x10
c00106ff:	85 c0                	test   eax,eax
c0010701:	0f 95 c0             	setne  al
c0010704:	31 d2                	xor    edx,edx
c0010706:	25 ff 00 00 00       	and    eax,0xff
c001070b:	f7 d8                	neg    eax
c001070d:	83 d2 00             	adc    edx,0x0
c0010710:	83 c4 08             	add    esp,0x8
c0010713:	f7 da                	neg    edx
c0010715:	5b                   	pop    ebx
c0010716:	c3                   	ret    
c0010717:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001071c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010721:	83 c4 08             	add    esp,0x8
c0010724:	5b                   	pop    ebx
c0010725:	c3                   	ret    

c0010726 <SysTell(regs*)>:
c0010726:	53                   	push   ebx
c0010727:	83 ec 08             	sub    esp,0x8
c001072a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001072e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010731:	83 f8 02             	cmp    eax,0x2
c0010734:	76 50                	jbe    c0010786 <SysTell(regs*)+0x60>
c0010736:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001073b:	76 19                	jbe    c0010756 <SysTell(regs*)+0x30>
c001073d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010740:	31 d2                	xor    edx,edx
c0010742:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010748:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001074f:	31 c0                	xor    eax,eax
c0010751:	83 c4 08             	add    esp,0x8
c0010754:	5b                   	pop    ebx
c0010755:	c3                   	ret    
c0010756:	83 ec 0c             	sub    esp,0xc
c0010759:	50                   	push   eax
c001075a:	e8 4c 89 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c001075f:	5a                   	pop    edx
c0010760:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010763:	59                   	pop    ecx
c0010764:	53                   	push   ebx
c0010765:	50                   	push   eax
c0010766:	e8 33 a4 ff ff       	call   c000ab9e <File::tell(unsigned long long*)>
c001076b:	83 c4 10             	add    esp,0x10
c001076e:	85 c0                	test   eax,eax
c0010770:	0f 95 c0             	setne  al
c0010773:	31 d2                	xor    edx,edx
c0010775:	25 ff 00 00 00       	and    eax,0xff
c001077a:	f7 d8                	neg    eax
c001077c:	83 d2 00             	adc    edx,0x0
c001077f:	83 c4 08             	add    esp,0x8
c0010782:	f7 da                	neg    edx
c0010784:	5b                   	pop    ebx
c0010785:	c3                   	ret    
c0010786:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001078b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010790:	83 c4 08             	add    esp,0x8
c0010793:	5b                   	pop    ebx
c0010794:	c3                   	ret    

c0010795 <SysSize(regs*)>:
c0010795:	53                   	push   ebx
c0010796:	83 ec 18             	sub    esp,0x18
c0010799:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001079d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107a0:	83 f8 02             	cmp    eax,0x2
c00107a3:	76 56                	jbe    c00107fb <SysSize(regs*)+0x66>
c00107a5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00107aa:	76 19                	jbe    c00107c5 <SysSize(regs*)+0x30>
c00107ac:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00107af:	31 d2                	xor    edx,edx
c00107b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107be:	31 c0                	xor    eax,eax
c00107c0:	83 c4 18             	add    esp,0x18
c00107c3:	5b                   	pop    ebx
c00107c4:	c3                   	ret    
c00107c5:	83 ec 0c             	sub    esp,0xc
c00107c8:	50                   	push   eax
c00107c9:	e8 dd 88 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00107ce:	83 c4 0c             	add    esp,0xc
c00107d1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00107d5:	52                   	push   edx
c00107d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00107d9:	52                   	push   edx
c00107da:	50                   	push   eax
c00107db:	e8 56 a5 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c00107e0:	83 c4 10             	add    esp,0x10
c00107e3:	85 c0                	test   eax,eax
c00107e5:	0f 95 c0             	setne  al
c00107e8:	31 d2                	xor    edx,edx
c00107ea:	25 ff 00 00 00       	and    eax,0xff
c00107ef:	f7 d8                	neg    eax
c00107f1:	83 d2 00             	adc    edx,0x0
c00107f4:	83 c4 18             	add    esp,0x18
c00107f7:	f7 da                	neg    edx
c00107f9:	5b                   	pop    ebx
c00107fa:	c3                   	ret    
c00107fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010800:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010805:	83 c4 18             	add    esp,0x18
c0010808:	5b                   	pop    ebx
c0010809:	c3                   	ret    

c001080a <SysSizeFromFilename(regs*)>:
c001080a:	57                   	push   edi
c001080b:	56                   	push   esi
c001080c:	53                   	push   ebx
c001080d:	83 ec 20             	sub    esp,0x20
c0010810:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010814:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010817:	83 fb 02             	cmp    ebx,0x2
c001081a:	0f 86 8c 00 00 00    	jbe    c00108ac <SysSizeFromFilename(regs*)+0xa2>
c0010820:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010826:	76 1b                	jbe    c0010843 <SysSizeFromFilename(regs*)+0x39>
c0010828:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001082b:	31 d2                	xor    edx,edx
c001082d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010833:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001083a:	83 c4 20             	add    esp,0x20
c001083d:	31 c0                	xor    eax,eax
c001083f:	5b                   	pop    ebx
c0010840:	5e                   	pop    esi
c0010841:	5f                   	pop    edi
c0010842:	c3                   	ret    
c0010843:	83 ec 0c             	sub    esp,0xc
c0010846:	68 14 01 00 00       	push   0x114
c001084b:	e8 69 6f ff ff       	call   c00077b9 <malloc>
c0010850:	83 c4 0c             	add    esp,0xc
c0010853:	89 c7                	mov    edi,eax
c0010855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001085a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001085d:	50                   	push   eax
c001085e:	53                   	push   ebx
c001085f:	57                   	push   edi
c0010860:	e8 65 a1 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010865:	83 c4 0c             	add    esp,0xc
c0010868:	8d 44 24 23          	lea    eax,[esp+0x23]
c001086c:	50                   	push   eax
c001086d:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010870:	52                   	push   edx
c0010871:	57                   	push   edi
c0010872:	e8 bf a4 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c0010877:	83 c4 10             	add    esp,0x10
c001087a:	85 ff                	test   edi,edi
c001087c:	74 14                	je     c0010892 <SysSizeFromFilename(regs*)+0x88>
c001087e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010882:	8b 17                	mov    edx,DWORD PTR [edi]
c0010884:	83 ec 0c             	sub    esp,0xc
c0010887:	57                   	push   edi
c0010888:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001088b:	83 c4 10             	add    esp,0x10
c001088e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010892:	85 c0                	test   eax,eax
c0010894:	0f 95 c0             	setne  al
c0010897:	31 d2                	xor    edx,edx
c0010899:	25 ff 00 00 00       	and    eax,0xff
c001089e:	f7 d8                	neg    eax
c00108a0:	83 d2 00             	adc    edx,0x0
c00108a3:	83 c4 20             	add    esp,0x20
c00108a6:	f7 da                	neg    edx
c00108a8:	5b                   	pop    ebx
c00108a9:	5e                   	pop    esi
c00108aa:	5f                   	pop    edi
c00108ab:	c3                   	ret    
c00108ac:	83 c4 20             	add    esp,0x20
c00108af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108b4:	5b                   	pop    ebx
c00108b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108ba:	5e                   	pop    esi
c00108bb:	5f                   	pop    edi
c00108bc:	c3                   	ret    

c00108bd <SysClose(regs*)>:
c00108bd:	53                   	push   ebx
c00108be:	83 ec 08             	sub    esp,0x8
c00108c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108c8:	83 f8 02             	cmp    eax,0x2
c00108cb:	76 41                	jbe    c001090e <SysClose(regs*)+0x51>
c00108cd:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00108d3:	83 fa 01             	cmp    edx,0x1
c00108d6:	76 2d                	jbe    c0010905 <SysClose(regs*)+0x48>
c00108d8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00108dd:	77 2f                	ja     c001090e <SysClose(regs*)+0x51>
c00108df:	83 ec 0c             	sub    esp,0xc
c00108e2:	50                   	push   eax
c00108e3:	e8 c3 87 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00108e8:	89 c3                	mov    ebx,eax
c00108ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00108ed:	e8 f6 a1 ff ff       	call   c000aae8 <File::close()>
c00108f2:	83 c4 10             	add    esp,0x10
c00108f5:	85 db                	test   ebx,ebx
c00108f7:	74 0c                	je     c0010905 <SysClose(regs*)+0x48>
c00108f9:	83 ec 0c             	sub    esp,0xc
c00108fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108fe:	53                   	push   ebx
c00108ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010902:	83 c4 10             	add    esp,0x10
c0010905:	31 c0                	xor    eax,eax
c0010907:	31 d2                	xor    edx,edx
c0010909:	83 c4 08             	add    esp,0x8
c001090c:	5b                   	pop    ebx
c001090d:	c3                   	ret    
c001090e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010913:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010918:	83 c4 08             	add    esp,0x8
c001091b:	5b                   	pop    ebx
c001091c:	c3                   	ret    

c001091d <SysOpenDir(regs*)>:
c001091d:	56                   	push   esi
c001091e:	53                   	push   ebx
c001091f:	50                   	push   eax
c0010920:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010924:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010927:	85 c0                	test   eax,eax
c0010929:	74 5b                	je     c0010986 <SysOpenDir(regs*)+0x69>
c001092b:	83 ec 0c             	sub    esp,0xc
c001092e:	68 14 01 00 00       	push   0x114
c0010933:	e8 81 6e ff ff       	call   c00077b9 <malloc>
c0010938:	83 c4 0c             	add    esp,0xc
c001093b:	89 c6                	mov    esi,eax
c001093d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010942:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010945:	50                   	push   eax
c0010946:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010949:	50                   	push   eax
c001094a:	56                   	push   esi
c001094b:	e8 a4 a5 ff ff       	call   c000aef4 <Directory::Directory(char const*, Process*)>
c0010950:	83 c4 10             	add    esp,0x10
c0010953:	85 f6                	test   esi,esi
c0010955:	74 2f                	je     c0010986 <SysOpenDir(regs*)+0x69>
c0010957:	83 ec 0c             	sub    esp,0xc
c001095a:	56                   	push   esi
c001095b:	e8 54 a6 ff ff       	call   c000afb4 <Directory::open()>
c0010960:	83 c4 10             	add    esp,0x10
c0010963:	85 c0                	test   eax,eax
c0010965:	75 1f                	jne    c0010986 <SysOpenDir(regs*)+0x69>
c0010967:	83 ec 0c             	sub    esp,0xc
c001096a:	56                   	push   esi
c001096b:	e8 46 84 ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010970:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010973:	83 c4 10             	add    esp,0x10
c0010976:	89 02                	mov    DWORD PTR [edx],eax
c0010978:	c1 f8 1f             	sar    eax,0x1f
c001097b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001097e:	31 c0                	xor    eax,eax
c0010980:	59                   	pop    ecx
c0010981:	31 d2                	xor    edx,edx
c0010983:	5b                   	pop    ebx
c0010984:	5e                   	pop    esi
c0010985:	c3                   	ret    
c0010986:	59                   	pop    ecx
c0010987:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001098c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010991:	5b                   	pop    ebx
c0010992:	5e                   	pop    esi
c0010993:	c3                   	ret    

c0010994 <SysCloseDir(regs*)>:
c0010994:	53                   	push   ebx
c0010995:	83 ec 08             	sub    esp,0x8
c0010998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001099f:	8d 50 fd             	lea    edx,[eax-0x3]
c00109a2:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00109a8:	77 2f                	ja     c00109d9 <SysCloseDir(regs*)+0x45>
c00109aa:	83 ec 0c             	sub    esp,0xc
c00109ad:	50                   	push   eax
c00109ae:	e8 f8 86 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00109b3:	89 c3                	mov    ebx,eax
c00109b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00109b8:	e8 53 a6 ff ff       	call   c000b010 <Directory::close()>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	85 db                	test   ebx,ebx
c00109c2:	74 0c                	je     c00109d0 <SysCloseDir(regs*)+0x3c>
c00109c4:	83 ec 0c             	sub    esp,0xc
c00109c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109c9:	53                   	push   ebx
c00109ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109cd:	83 c4 10             	add    esp,0x10
c00109d0:	31 c0                	xor    eax,eax
c00109d2:	31 d2                	xor    edx,edx
c00109d4:	83 c4 08             	add    esp,0x8
c00109d7:	5b                   	pop    ebx
c00109d8:	c3                   	ret    
c00109d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109de:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109e3:	83 c4 08             	add    esp,0x8
c00109e6:	5b                   	pop    ebx
c00109e7:	c3                   	ret    

c00109e8 <SysMakeDir(regs*)>:
c00109e8:	56                   	push   esi
c00109e9:	53                   	push   ebx
c00109ea:	83 ec 10             	sub    esp,0x10
c00109ed:	68 14 01 00 00       	push   0x114
c00109f2:	e8 c2 6d ff ff       	call   c00077b9 <malloc>
c00109f7:	83 c4 0c             	add    esp,0xc
c00109fa:	89 c3                	mov    ebx,eax
c00109fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a01:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010a04:	56                   	push   esi
c0010a05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010a09:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a0c:	50                   	push   eax
c0010a0d:	53                   	push   ebx
c0010a0e:	e8 e1 a4 ff ff       	call   c000aef4 <Directory::Directory(char const*, Process*)>
c0010a13:	83 c4 10             	add    esp,0x10
c0010a16:	85 db                	test   ebx,ebx
c0010a18:	74 32                	je     c0010a4c <SysMakeDir(regs*)+0x64>
c0010a1a:	83 ec 0c             	sub    esp,0xc
c0010a1d:	53                   	push   ebx
c0010a1e:	e8 71 a7 ff ff       	call   c000b194 <Directory::create()>
c0010a23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a26:	89 c6                	mov    esi,eax
c0010a28:	e8 e3 a5 ff ff       	call   c000b010 <Directory::close()>
c0010a2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a35:	83 c4 10             	add    esp,0x10
c0010a38:	31 c0                	xor    eax,eax
c0010a3a:	59                   	pop    ecx
c0010a3b:	85 f6                	test   esi,esi
c0010a3d:	5b                   	pop    ebx
c0010a3e:	0f 95 c0             	setne  al
c0010a41:	5e                   	pop    esi
c0010a42:	31 d2                	xor    edx,edx
c0010a44:	f7 d8                	neg    eax
c0010a46:	83 d2 00             	adc    edx,0x0
c0010a49:	f7 da                	neg    edx
c0010a4b:	c3                   	ret    
c0010a4c:	59                   	pop    ecx
c0010a4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a52:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a57:	5b                   	pop    ebx
c0010a58:	5e                   	pop    esi
c0010a59:	c3                   	ret    

c0010a5a <SysWait(regs*)>:
c0010a5a:	83 ec 10             	sub    esp,0x10
c0010a5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a61:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a64:	52                   	push   edx
c0010a65:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010a68:	51                   	push   ecx
c0010a69:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a6c:	50                   	push   eax
c0010a6d:	e8 02 2b 00 00       	call   c0013574 <waitTask(int, int*, int)>
c0010a72:	83 c4 1c             	add    esp,0x1c
c0010a75:	99                   	cdq    
c0010a76:	c3                   	ret    

c0010a77 <SysNotImpl(regs*)>:
c0010a77:	83 ec 18             	sub    esp,0x18
c0010a7a:	68 51 e2 01 c0       	push   0xc001e251
c0010a7f:	e8 b3 f6 ff ff       	call   c0010137 <KePanic(char const*)>
c0010a84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a89:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a8e:	83 c4 1c             	add    esp,0x1c
c0010a91:	c3                   	ret    

c0010a92 <SysPanic(regs*)>:
c0010a92:	83 ec 18             	sub    esp,0x18
c0010a95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a99:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a9c:	50                   	push   eax
c0010a9d:	e8 95 f6 ff ff       	call   c0010137 <KePanic(char const*)>
c0010aa2:	b8 01 00 00 00       	mov    eax,0x1
c0010aa7:	31 d2                	xor    edx,edx
c0010aa9:	83 c4 1c             	add    esp,0x1c
c0010aac:	c3                   	ret    

c0010aad <SysRmdir(regs*)>:
c0010aad:	56                   	push   esi
c0010aae:	53                   	push   ebx
c0010aaf:	83 ec 20             	sub    esp,0x20
c0010ab2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ab6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ab9:	68 14 01 00 00       	push   0x114
c0010abe:	e8 f6 6c ff ff       	call   c00077b9 <malloc>
c0010ac3:	83 c4 0c             	add    esp,0xc
c0010ac6:	89 c3                	mov    ebx,eax
c0010ac8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010acd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ad0:	50                   	push   eax
c0010ad1:	56                   	push   esi
c0010ad2:	53                   	push   ebx
c0010ad3:	e8 f2 9e ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010ad8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010adb:	e8 22 a1 ff ff       	call   c000ac02 <File::unlink()>
c0010ae0:	83 c4 10             	add    esp,0x10
c0010ae3:	85 db                	test   ebx,ebx
c0010ae5:	74 14                	je     c0010afb <SysRmdir(regs*)+0x4e>
c0010ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010aeb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010aed:	83 ec 0c             	sub    esp,0xc
c0010af0:	53                   	push   ebx
c0010af1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010af4:	83 c4 10             	add    esp,0x10
c0010af7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010afb:	85 c0                	test   eax,eax
c0010afd:	0f 95 c0             	setne  al
c0010b00:	31 d2                	xor    edx,edx
c0010b02:	25 ff 00 00 00       	and    eax,0xff
c0010b07:	f7 d8                	neg    eax
c0010b09:	83 d2 00             	adc    edx,0x0
c0010b0c:	83 c4 14             	add    esp,0x14
c0010b0f:	f7 da                	neg    edx
c0010b11:	5b                   	pop    ebx
c0010b12:	5e                   	pop    esi
c0010b13:	c3                   	ret    

c0010b14 <SysUnlink(regs*)>:
c0010b14:	56                   	push   esi
c0010b15:	53                   	push   ebx
c0010b16:	83 ec 20             	sub    esp,0x20
c0010b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010b1d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010b20:	68 14 01 00 00       	push   0x114
c0010b25:	e8 8f 6c ff ff       	call   c00077b9 <malloc>
c0010b2a:	83 c4 0c             	add    esp,0xc
c0010b2d:	89 c3                	mov    ebx,eax
c0010b2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b37:	50                   	push   eax
c0010b38:	56                   	push   esi
c0010b39:	53                   	push   ebx
c0010b3a:	e8 8b 9e ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010b3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b42:	e8 bb a0 ff ff       	call   c000ac02 <File::unlink()>
c0010b47:	83 c4 10             	add    esp,0x10
c0010b4a:	85 db                	test   ebx,ebx
c0010b4c:	74 14                	je     c0010b62 <SysUnlink(regs*)+0x4e>
c0010b4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b52:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b54:	83 ec 0c             	sub    esp,0xc
c0010b57:	53                   	push   ebx
c0010b58:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b5b:	83 c4 10             	add    esp,0x10
c0010b5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b62:	85 c0                	test   eax,eax
c0010b64:	0f 95 c0             	setne  al
c0010b67:	31 d2                	xor    edx,edx
c0010b69:	25 ff 00 00 00       	and    eax,0xff
c0010b6e:	f7 d8                	neg    eax
c0010b70:	83 d2 00             	adc    edx,0x0
c0010b73:	83 c4 14             	add    esp,0x14
c0010b76:	f7 da                	neg    edx
c0010b78:	5b                   	pop    ebx
c0010b79:	5e                   	pop    esi
c0010b7a:	c3                   	ret    

c0010b7b <SysGetArgv(regs*)>:
c0010b7b:	83 ec 0c             	sub    esp,0xc
c0010b7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010b82:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010b85:	85 c0                	test   eax,eax
c0010b87:	78 2c                	js     c0010bb5 <SysGetArgv(regs*)+0x3a>
c0010b89:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b8f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b92:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010b98:	7d 1b                	jge    c0010bb5 <SysGetArgv(regs*)+0x3a>
c0010b9a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010ba1:	85 c0                	test   eax,eax
c0010ba3:	74 18                	je     c0010bbd <SysGetArgv(regs*)+0x42>
c0010ba5:	83 ec 08             	sub    esp,0x8
c0010ba8:	50                   	push   eax
c0010ba9:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010bac:	50                   	push   eax
c0010bad:	e8 4e fa fe ff       	call   c0000600 <strcpy>
c0010bb2:	83 c4 10             	add    esp,0x10
c0010bb5:	31 c0                	xor    eax,eax
c0010bb7:	31 d2                	xor    edx,edx
c0010bb9:	83 c4 0c             	add    esp,0xc
c0010bbc:	c3                   	ret    
c0010bbd:	b8 01 00 00 00       	mov    eax,0x1
c0010bc2:	31 d2                	xor    edx,edx
c0010bc4:	83 c4 0c             	add    esp,0xc
c0010bc7:	c3                   	ret    

c0010bc8 <SysUSleep(regs*)>:
c0010bc8:	83 ec 1c             	sub    esp,0x1c
c0010bcb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010bcf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010bd2:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010bd5:	6a 00                	push   0x0
c0010bd7:	6a 64                	push   0x64
c0010bd9:	52                   	push   edx
c0010bda:	50                   	push   eax
c0010bdb:	e8 60 b0 00 00       	call   c001bc40 <__udivdi3>
c0010be0:	83 c4 14             	add    esp,0x14
c0010be3:	50                   	push   eax
c0010be4:	e8 5f 2a 00 00       	call   c0013648 <milliTenthSleep(unsigned int)>
c0010be9:	31 c0                	xor    eax,eax
c0010beb:	31 d2                	xor    edx,edx
c0010bed:	83 c4 1c             	add    esp,0x1c
c0010bf0:	c3                   	ret    

c0010bf1 <SysSpawn(regs*)>:
c0010bf1:	56                   	push   esi
c0010bf2:	53                   	push   ebx
c0010bf3:	50                   	push   eax
c0010bf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bf8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bfb:	85 c0                	test   eax,eax
c0010bfd:	75 08                	jne    c0010c07 <SysSpawn(regs*)+0x16>
c0010bff:	59                   	pop    ecx
c0010c00:	31 c0                	xor    eax,eax
c0010c02:	31 d2                	xor    edx,edx
c0010c04:	5b                   	pop    ebx
c0010c05:	5e                   	pop    esi
c0010c06:	c3                   	ret    
c0010c07:	83 ec 0c             	sub    esp,0xc
c0010c0a:	68 1f 07 00 00       	push   0x71f
c0010c0f:	e8 a5 6b ff ff       	call   c00077b9 <malloc>
c0010c14:	83 c4 10             	add    esp,0x10
c0010c17:	89 c6                	mov    esi,eax
c0010c19:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c1c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c1f:	85 c0                	test   eax,eax
c0010c21:	75 33                	jne    c0010c56 <SysSpawn(regs*)+0x65>
c0010c23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c2b:	52                   	push   edx
c0010c2c:	50                   	push   eax
c0010c2d:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010c30:	53                   	push   ebx
c0010c31:	56                   	push   esi
c0010c32:	e8 f5 20 00 00       	call   c0012d2c <Process::Process(char const*, Process*, char**)>
c0010c37:	83 c4 10             	add    esp,0x10
c0010c3a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010c41:	75 bc                	jne    c0010bff <SysSpawn(regs*)+0xe>
c0010c43:	83 ec 0c             	sub    esp,0xc
c0010c46:	56                   	push   esi
c0010c47:	e8 d4 25 00 00       	call   c0013220 <Process::createUserThread()>
c0010c4c:	8b 06                	mov    eax,DWORD PTR [esi]
c0010c4e:	83 c4 10             	add    esp,0x10
c0010c51:	99                   	cdq    
c0010c52:	59                   	pop    ecx
c0010c53:	5b                   	pop    ebx
c0010c54:	5e                   	pop    esi
c0010c55:	c3                   	ret    
c0010c56:	31 c0                	xor    eax,eax
c0010c58:	eb d1                	jmp    c0010c2b <SysSpawn(regs*)+0x3a>

c0010c5a <SysGetEnv(regs*)>:
c0010c5a:	57                   	push   edi
c0010c5b:	56                   	push   esi
c0010c5c:	53                   	push   ebx
c0010c5d:	83 ec 1c             	sub    esp,0x1c
c0010c60:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c69:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010c6c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c6f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c72:	50                   	push   eax
c0010c73:	e8 77 f3 ff ff       	call   c000ffef <Krnl::getProcessTotalEnvCount(Process*)>
c0010c78:	83 c4 10             	add    esp,0x10
c0010c7b:	39 c7                	cmp    edi,eax
c0010c7d:	7c 14                	jl     c0010c93 <SysGetEnv(regs*)+0x39>
c0010c7f:	85 f6                	test   esi,esi
c0010c81:	75 0b                	jne    c0010c8e <SysGetEnv(regs*)+0x34>
c0010c83:	83 c4 10             	add    esp,0x10
c0010c86:	31 c0                	xor    eax,eax
c0010c88:	5b                   	pop    ebx
c0010c89:	31 d2                	xor    edx,edx
c0010c8b:	5e                   	pop    esi
c0010c8c:	5f                   	pop    edi
c0010c8d:	c3                   	ret    
c0010c8e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010c91:	eb f0                	jmp    c0010c83 <SysGetEnv(regs*)+0x29>
c0010c93:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010c97:	52                   	push   edx
c0010c98:	57                   	push   edi
c0010c99:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c9f:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010ca2:	51                   	push   ecx
c0010ca3:	50                   	push   eax
c0010ca4:	e8 66 f3 ff ff       	call   c001000f <Krnl::getProcessEnvPair(Process*, int)>
c0010ca9:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010cac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010cb0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010cb4:	83 c4 0c             	add    esp,0xc
c0010cb7:	85 db                	test   ebx,ebx
c0010cb9:	75 23                	jne    c0010cde <SysGetEnv(regs*)+0x84>
c0010cbb:	83 ec 0c             	sub    esp,0xc
c0010cbe:	50                   	push   eax
c0010cbf:	e8 7c f8 fe ff       	call   c0000540 <strlen>
c0010cc4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cc7:	89 c3                	mov    ebx,eax
c0010cc9:	e8 72 f8 fe ff       	call   c0000540 <strlen>
c0010cce:	31 d2                	xor    edx,edx
c0010cd0:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010cd4:	83 c4 10             	add    esp,0x10
c0010cd7:	83 c4 10             	add    esp,0x10
c0010cda:	5b                   	pop    ebx
c0010cdb:	5e                   	pop    esi
c0010cdc:	5f                   	pop    edi
c0010cdd:	c3                   	ret    
c0010cde:	83 ec 08             	sub    esp,0x8
c0010ce1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010ce4:	50                   	push   eax
c0010ce5:	56                   	push   esi
c0010ce6:	e8 15 f9 fe ff       	call   c0000600 <strcpy>
c0010ceb:	58                   	pop    eax
c0010cec:	5a                   	pop    edx
c0010ced:	68 6b e2 01 c0       	push   0xc001e26b
c0010cf2:	56                   	push   esi
c0010cf3:	e8 c8 fa fe ff       	call   c00007c0 <strcat>
c0010cf8:	59                   	pop    ecx
c0010cf9:	5b                   	pop    ebx
c0010cfa:	57                   	push   edi
c0010cfb:	56                   	push   esi
c0010cfc:	e8 bf fa fe ff       	call   c00007c0 <strcat>
c0010d01:	83 c4 10             	add    esp,0x10
c0010d04:	e9 7a ff ff ff       	jmp    c0010c83 <SysGetEnv(regs*)+0x29>

c0010d09 <SysSetFatAttrib(regs*)>:
c0010d09:	57                   	push   edi
c0010d0a:	56                   	push   esi
c0010d0b:	53                   	push   ebx
c0010d0c:	83 ec 1c             	sub    esp,0x1c
c0010d0f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010d13:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010d16:	68 14 01 00 00       	push   0x114
c0010d1b:	e8 99 6a ff ff       	call   c00077b9 <malloc>
c0010d20:	83 c4 0c             	add    esp,0xc
c0010d23:	89 c3                	mov    ebx,eax
c0010d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d2d:	50                   	push   eax
c0010d2e:	57                   	push   edi
c0010d2f:	53                   	push   ebx
c0010d30:	e8 95 9c ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010d35:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010d38:	83 c4 0c             	add    esp,0xc
c0010d3b:	0f b6 d4             	movzx  edx,ah
c0010d3e:	25 ff 00 00 00       	and    eax,0xff
c0010d43:	52                   	push   edx
c0010d44:	50                   	push   eax
c0010d45:	53                   	push   ebx
c0010d46:	e8 51 9f ff ff       	call   c000ac9c <File::chfatattr(unsigned char, unsigned char)>
c0010d4b:	83 c4 10             	add    esp,0x10
c0010d4e:	85 db                	test   ebx,ebx
c0010d50:	74 14                	je     c0010d66 <SysSetFatAttrib(regs*)+0x5d>
c0010d52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d56:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010d58:	83 ec 0c             	sub    esp,0xc
c0010d5b:	53                   	push   ebx
c0010d5c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d66:	85 c0                	test   eax,eax
c0010d68:	0f 95 c0             	setne  al
c0010d6b:	31 d2                	xor    edx,edx
c0010d6d:	25 ff 00 00 00       	and    eax,0xff
c0010d72:	f7 d8                	neg    eax
c0010d74:	83 d2 00             	adc    edx,0x0
c0010d77:	83 c4 10             	add    esp,0x10
c0010d7a:	f7 da                	neg    edx
c0010d7c:	5b                   	pop    ebx
c0010d7d:	5e                   	pop    esi
c0010d7e:	5f                   	pop    edi
c0010d7f:	c3                   	ret    

c0010d80 <SysPipe(regs*)>:
c0010d80:	57                   	push   edi
c0010d81:	56                   	push   esi
c0010d82:	53                   	push   ebx
c0010d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d87:	83 ec 0c             	sub    esp,0xc
c0010d8a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010d8d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010d90:	6a 20                	push   0x20
c0010d92:	e8 22 6a ff ff       	call   c00077b9 <malloc>
c0010d97:	89 c3                	mov    ebx,eax
c0010d99:	58                   	pop    eax
c0010d9a:	5a                   	pop    edx
c0010d9b:	68 00 50 00 00       	push   0x5000
c0010da0:	53                   	push   ebx
c0010da1:	e8 18 73 ff ff       	call   c00080be <Pipe::Pipe(int)>
c0010da6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010da9:	e8 08 80 ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010dae:	89 07                	mov    DWORD PTR [edi],eax
c0010db0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db3:	e8 fe 7f ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010db8:	83 c4 10             	add    esp,0x10
c0010dbb:	89 06                	mov    DWORD PTR [esi],eax
c0010dbd:	31 d2                	xor    edx,edx
c0010dbf:	5b                   	pop    ebx
c0010dc0:	31 c0                	xor    eax,eax
c0010dc2:	5e                   	pop    esi
c0010dc3:	5f                   	pop    edi
c0010dc4:	c3                   	ret    

c0010dc5 <SysGetUnixTime(regs*)>:
c0010dc5:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0010dca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010dd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dd4:	e9 01 a6 ff ff       	jmp    c000b3da <Clock::timeInSecondsLocal()>

c0010dd9 <string_ends_with(char const*, char const*)>:
c0010dd9:	57                   	push   edi
c0010dda:	56                   	push   esi
c0010ddb:	53                   	push   ebx
c0010ddc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010de0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010de4:	83 ec 0c             	sub    esp,0xc
c0010de7:	53                   	push   ebx
c0010de8:	e8 53 f7 fe ff       	call   c0000540 <strlen>
c0010ded:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010df0:	89 c6                	mov    esi,eax
c0010df2:	e8 49 f7 fe ff       	call   c0000540 <strlen>
c0010df7:	83 c4 10             	add    esp,0x10
c0010dfa:	39 c6                	cmp    esi,eax
c0010dfc:	7d 06                	jge    c0010e04 <string_ends_with(char const*, char const*)+0x2b>
c0010dfe:	5b                   	pop    ebx
c0010dff:	31 c0                	xor    eax,eax
c0010e01:	5e                   	pop    esi
c0010e02:	5f                   	pop    edi
c0010e03:	c3                   	ret    
c0010e04:	83 ec 08             	sub    esp,0x8
c0010e07:	29 c6                	sub    esi,eax
c0010e09:	57                   	push   edi
c0010e0a:	01 f3                	add    ebx,esi
c0010e0c:	53                   	push   ebx
c0010e0d:	e8 ce f8 fe ff       	call   c00006e0 <strcmp>
c0010e12:	83 c4 10             	add    esp,0x10
c0010e15:	85 c0                	test   eax,eax
c0010e17:	5b                   	pop    ebx
c0010e18:	0f 94 c0             	sete   al
c0010e1b:	5e                   	pop    esi
c0010e1c:	25 ff 00 00 00       	and    eax,0xff
c0010e21:	5f                   	pop    edi
c0010e22:	c3                   	ret    

c0010e23 <SysOpen(regs*)>:
c0010e23:	56                   	push   esi
c0010e24:	53                   	push   ebx
c0010e25:	81 ec 04 01 00 00    	sub    esp,0x104
c0010e2b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010e32:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010e35:	85 c9                	test   ecx,ecx
c0010e37:	0f 84 b9 01 00 00    	je     c0010ff6 <SysOpen(regs*)+0x1d3>
c0010e3d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e40:	85 c0                	test   eax,eax
c0010e42:	0f 84 ae 01 00 00    	je     c0010ff6 <SysOpen(regs*)+0x1d3>
c0010e48:	52                   	push   edx
c0010e49:	68 6d e2 01 c0       	push   0xc001e26d
c0010e4e:	50                   	push   eax
c0010e4f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010e53:	56                   	push   esi
c0010e54:	e8 c7 99 ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010e59:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e5c:	e8 df f6 fe ff       	call   c0000540 <strlen>
c0010e61:	83 c4 10             	add    esp,0x10
c0010e64:	48                   	dec    eax
c0010e65:	74 1d                	je     c0010e84 <SysOpen(regs*)+0x61>
c0010e67:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010e6a:	eb 0f                	jmp    c0010e7b <SysOpen(regs*)+0x58>
c0010e6c:	80 fa 3a             	cmp    dl,0x3a
c0010e6f:	74 0f                	je     c0010e80 <SysOpen(regs*)+0x5d>
c0010e71:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010e75:	48                   	dec    eax
c0010e76:	74 0c                	je     c0010e84 <SysOpen(regs*)+0x61>
c0010e78:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010e7b:	80 fa 2e             	cmp    dl,0x2e
c0010e7e:	75 ec                	jne    c0010e6c <SysOpen(regs*)+0x49>
c0010e80:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010e84:	83 ec 08             	sub    esp,0x8
c0010e87:	68 71 e2 01 c0       	push   0xc001e271
c0010e8c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e8f:	50                   	push   eax
c0010e90:	e8 44 ff ff ff       	call   c0010dd9 <string_ends_with(char const*, char const*)>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	85 c0                	test   eax,eax
c0010e9a:	74 1d                	je     c0010eb9 <SysOpen(regs*)+0x96>
c0010e9c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e9f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010ea5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010eac:	81 c4 04 01 00 00    	add    esp,0x104
c0010eb2:	31 c0                	xor    eax,eax
c0010eb4:	31 d2                	xor    edx,edx
c0010eb6:	5b                   	pop    ebx
c0010eb7:	5e                   	pop    esi
c0010eb8:	c3                   	ret    
c0010eb9:	83 ec 08             	sub    esp,0x8
c0010ebc:	68 76 e2 01 c0       	push   0xc001e276
c0010ec1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ec4:	50                   	push   eax
c0010ec5:	e8 0f ff ff ff       	call   c0010dd9 <string_ends_with(char const*, char const*)>
c0010eca:	83 c4 10             	add    esp,0x10
c0010ecd:	85 c0                	test   eax,eax
c0010ecf:	75 cb                	jne    c0010e9c <SysOpen(regs*)+0x79>
c0010ed1:	83 ec 08             	sub    esp,0x8
c0010ed4:	68 72 e2 01 c0       	push   0xc001e272
c0010ed9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010edc:	50                   	push   eax
c0010edd:	e8 fe f7 fe ff       	call   c00006e0 <strcmp>
c0010ee2:	83 c4 10             	add    esp,0x10
c0010ee5:	85 c0                	test   eax,eax
c0010ee7:	74 b3                	je     c0010e9c <SysOpen(regs*)+0x79>
c0010ee9:	83 ec 08             	sub    esp,0x8
c0010eec:	68 71 e2 01 c0       	push   0xc001e271
c0010ef1:	56                   	push   esi
c0010ef2:	e8 e2 fe ff ff       	call   c0010dd9 <string_ends_with(char const*, char const*)>
c0010ef7:	83 c4 10             	add    esp,0x10
c0010efa:	85 c0                	test   eax,eax
c0010efc:	75 9e                	jne    c0010e9c <SysOpen(regs*)+0x79>
c0010efe:	83 ec 08             	sub    esp,0x8
c0010f01:	68 7b e2 01 c0       	push   0xc001e27b
c0010f06:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f09:	50                   	push   eax
c0010f0a:	e8 ca fe ff ff       	call   c0010dd9 <string_ends_with(char const*, char const*)>
c0010f0f:	83 c4 10             	add    esp,0x10
c0010f12:	85 c0                	test   eax,eax
c0010f14:	0f 85 ef 00 00 00    	jne    c0011009 <SysOpen(regs*)+0x1e6>
c0010f1a:	83 ec 08             	sub    esp,0x8
c0010f1d:	68 80 e2 01 c0       	push   0xc001e280
c0010f22:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f25:	50                   	push   eax
c0010f26:	e8 ae fe ff ff       	call   c0010dd9 <string_ends_with(char const*, char const*)>
c0010f2b:	83 c4 10             	add    esp,0x10
c0010f2e:	85 c0                	test   eax,eax
c0010f30:	0f 85 d3 00 00 00    	jne    c0011009 <SysOpen(regs*)+0x1e6>
c0010f36:	83 ec 08             	sub    esp,0x8
c0010f39:	68 7c e2 01 c0       	push   0xc001e27c
c0010f3e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010f41:	51                   	push   ecx
c0010f42:	e8 99 f7 fe ff       	call   c00006e0 <strcmp>
c0010f47:	83 c4 10             	add    esp,0x10
c0010f4a:	85 c0                	test   eax,eax
c0010f4c:	0f 84 b7 00 00 00    	je     c0011009 <SysOpen(regs*)+0x1e6>
c0010f52:	83 ec 08             	sub    esp,0x8
c0010f55:	68 7b e2 01 c0       	push   0xc001e27b
c0010f5a:	56                   	push   esi
c0010f5b:	e8 79 fe ff ff       	call   c0010dd9 <string_ends_with(char const*, char const*)>
c0010f60:	83 c4 10             	add    esp,0x10
c0010f63:	85 c0                	test   eax,eax
c0010f65:	0f 85 9e 00 00 00    	jne    c0011009 <SysOpen(regs*)+0x1e6>
c0010f6b:	83 ec 0c             	sub    esp,0xc
c0010f6e:	68 14 01 00 00       	push   0x114
c0010f73:	e8 41 68 ff ff       	call   c00077b9 <malloc>
c0010f78:	83 c4 0c             	add    esp,0xc
c0010f7b:	89 c6                	mov    esi,eax
c0010f7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f85:	50                   	push   eax
c0010f86:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010f89:	52                   	push   edx
c0010f8a:	56                   	push   esi
c0010f8b:	e8 3a 9a ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010f90:	83 c4 10             	add    esp,0x10
c0010f93:	85 f6                	test   esi,esi
c0010f95:	74 5f                	je     c0010ff6 <SysOpen(regs*)+0x1d3>
c0010f97:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010f9a:	89 d0                	mov    eax,edx
c0010f9c:	25 ff 00 00 00       	and    eax,0xff
c0010fa1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010fa4:	89 d0                	mov    eax,edx
c0010fa6:	83 e0 01             	and    eax,0x1
c0010fa9:	f6 c2 02             	test   dl,0x2
c0010fac:	74 03                	je     c0010fb1 <SysOpen(regs*)+0x18e>
c0010fae:	83 c8 02             	or     eax,0x2
c0010fb1:	f6 c2 04             	test   dl,0x4
c0010fb4:	74 03                	je     c0010fb9 <SysOpen(regs*)+0x196>
c0010fb6:	83 c8 04             	or     eax,0x4
c0010fb9:	f6 c2 08             	test   dl,0x8
c0010fbc:	74 03                	je     c0010fc1 <SysOpen(regs*)+0x19e>
c0010fbe:	83 c8 0a             	or     eax,0xa
c0010fc1:	83 e2 10             	and    edx,0x10
c0010fc4:	74 03                	je     c0010fc9 <SysOpen(regs*)+0x1a6>
c0010fc6:	83 c8 12             	or     eax,0x12
c0010fc9:	83 ec 08             	sub    esp,0x8
c0010fcc:	50                   	push   eax
c0010fcd:	56                   	push   esi
c0010fce:	e8 b7 9a ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0010fd3:	83 c4 10             	add    esp,0x10
c0010fd6:	85 c0                	test   eax,eax
c0010fd8:	75 1c                	jne    c0010ff6 <SysOpen(regs*)+0x1d3>
c0010fda:	83 ec 0c             	sub    esp,0xc
c0010fdd:	56                   	push   esi
c0010fde:	e8 d3 7d ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010fe3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010fe6:	83 c4 10             	add    esp,0x10
c0010fe9:	89 02                	mov    DWORD PTR [edx],eax
c0010feb:	c1 f8 1f             	sar    eax,0x1f
c0010fee:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010ff1:	e9 b6 fe ff ff       	jmp    c0010eac <SysOpen(regs*)+0x89>
c0010ff6:	81 c4 04 01 00 00    	add    esp,0x104
c0010ffc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011001:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011006:	5b                   	pop    ebx
c0011007:	5e                   	pop    esi
c0011008:	c3                   	ret    
c0011009:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001100c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011012:	e9 8e fe ff ff       	jmp    c0010ea5 <SysOpen(regs*)+0x82>

c0011017 <KeSystemCall(regs*, void*)>:
c0011017:	53                   	push   ebx
c0011018:	83 ec 10             	sub    esp,0x10
c001101b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001101f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011022:	68 85 e2 01 c0       	push   0xc001e285
c0011027:	e8 28 94 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001102c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001102f:	83 c4 10             	add    esp,0x10
c0011032:	83 f8 31             	cmp    eax,0x31
c0011035:	77 16                	ja     c001104d <KeSystemCall(regs*, void*)+0x36>
c0011037:	8b 14 85 a0 f3 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0c60]
c001103e:	85 d2                	test   edx,edx
c0011040:	74 0b                	je     c001104d <KeSystemCall(regs*, void*)+0x36>
c0011042:	83 ec 0c             	sub    esp,0xc
c0011045:	53                   	push   ebx
c0011046:	ff d2                	call   edx
c0011048:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001104b:	eb 0d                	jmp    c001105a <KeSystemCall(regs*, void*)+0x43>
c001104d:	52                   	push   edx
c001104e:	52                   	push   edx
c001104f:	50                   	push   eax
c0011050:	68 95 e2 01 c0       	push   0xc001e295
c0011055:	e8 fa 93 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001105a:	83 c4 10             	add    esp,0x10
c001105d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011062:	31 d2                	xor    edx,edx
c0011064:	83 c4 08             	add    esp,0x8
c0011067:	5b                   	pop    ebx
c0011068:	c3                   	ret    

c0011069 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011069:	55                   	push   ebp
c001106a:	57                   	push   edi
c001106b:	56                   	push   esi
c001106c:	53                   	push   ebx
c001106d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011073:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001107a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001107c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001107f:	80 fb 40             	cmp    bl,0x40
c0011082:	75 1b                	jne    c001109f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011084:	8a 16                	mov    dl,BYTE PTR [esi]
c0011086:	84 d2                	test   dl,dl
c0011088:	0f 84 f1 00 00 00    	je     c001117f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001108e:	8d 46 01             	lea    eax,[esi+0x1]
c0011091:	80 fa 3a             	cmp    dl,0x3a
c0011094:	74 04                	je     c001109a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011096:	89 c6                	mov    esi,eax
c0011098:	eb ea                	jmp    c0011084 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001109a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001109d:	89 c6                	mov    esi,eax
c001109f:	50                   	push   eax
c00110a0:	6a 40                	push   0x40
c00110a2:	6a 00                	push   0x0
c00110a4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00110a8:	50                   	push   eax
c00110a9:	e8 22 f4 fe ff       	call   c00004d0 <memset>
c00110ae:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00110b5:	31 c0                	xor    eax,eax
c00110b7:	83 c4 10             	add    esp,0x10
c00110ba:	8a 0f                	mov    cl,BYTE PTR [edi]
c00110bc:	84 c9                	test   cl,cl
c00110be:	0f 84 bb 00 00 00    	je     c001117f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110c4:	3d c7 00 00 00       	cmp    eax,0xc7
c00110c9:	0f 8f b0 00 00 00    	jg     c001117f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110cf:	80 f9 0a             	cmp    cl,0xa
c00110d2:	0f 85 98 00 00 00    	jne    c0011170 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00110d8:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00110dd:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00110e1:	a8 df                	test   al,0xdf
c00110e3:	0f 94 c1             	sete   cl
c00110e6:	3c 23                	cmp    al,0x23
c00110e8:	0f 94 c2             	sete   dl
c00110eb:	08 d1                	or     cl,dl
c00110ed:	75 4a                	jne    c0011139 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110ef:	8d 50 f7             	lea    edx,[eax-0x9]
c00110f2:	80 fa 01             	cmp    dl,0x1
c00110f5:	76 42                	jbe    c0011139 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110f7:	3c 5b                	cmp    al,0x5b
c00110f9:	75 42                	jne    c001113d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00110fb:	80 fb 40             	cmp    bl,0x40
c00110fe:	75 39                	jne    c0011139 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011100:	83 ec 0c             	sub    esp,0xc
c0011103:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011107:	52                   	push   edx
c0011108:	e8 33 f4 fe ff       	call   c0000540 <strlen>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	83 f8 3f             	cmp    eax,0x3f
c0011113:	77 6a                	ja     c001117f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011115:	50                   	push   eax
c0011116:	50                   	push   eax
c0011117:	8d 54 24 61          	lea    edx,[esp+0x61]
c001111b:	52                   	push   edx
c001111c:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011120:	52                   	push   edx
c0011121:	e8 da f4 fe ff       	call   c0000600 <strcpy>
c0011126:	58                   	pop    eax
c0011127:	8d 54 24 24          	lea    edx,[esp+0x24]
c001112b:	52                   	push   edx
c001112c:	e8 0f f4 fe ff       	call   c0000540 <strlen>
c0011131:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011136:	83 c4 10             	add    esp,0x10
c0011139:	31 d2                	xor    edx,edx
c001113b:	eb 3a                	jmp    c0011177 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001113d:	80 fb 40             	cmp    bl,0x40
c0011140:	74 06                	je     c0011148 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011142:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011146:	eb 20                	jmp    c0011168 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011148:	50                   	push   eax
c0011149:	50                   	push   eax
c001114a:	55                   	push   ebp
c001114b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001114f:	50                   	push   eax
c0011150:	e8 8b f5 fe ff       	call   c00006e0 <strcmp>
c0011155:	83 c4 10             	add    esp,0x10
c0011158:	85 c0                	test   eax,eax
c001115a:	75 dd                	jne    c0011139 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001115c:	eb e4                	jmp    c0011142 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001115e:	8d 50 01             	lea    edx,[eax+0x1]
c0011161:	80 f9 3d             	cmp    cl,0x3d
c0011164:	74 1d                	je     c0011183 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011166:	89 d0                	mov    eax,edx
c0011168:	8a 08                	mov    cl,BYTE PTR [eax]
c001116a:	84 c9                	test   cl,cl
c001116c:	75 f0                	jne    c001115e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001116e:	eb 0f                	jmp    c001117f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011170:	8d 50 01             	lea    edx,[eax+0x1]
c0011173:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011177:	47                   	inc    edi
c0011178:	89 d0                	mov    eax,edx
c001117a:	e9 3b ff ff ff       	jmp    c00110ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001117f:	31 c0                	xor    eax,eax
c0011181:	eb 33                	jmp    c00111b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0011183:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011187:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001118a:	50                   	push   eax
c001118b:	50                   	push   eax
c001118c:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011190:	50                   	push   eax
c0011191:	56                   	push   esi
c0011192:	e8 49 f5 fe ff       	call   c00006e0 <strcmp>
c0011197:	83 c4 10             	add    esp,0x10
c001119a:	85 c0                	test   eax,eax
c001119c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00111a0:	75 97                	jne    c0011139 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00111a2:	51                   	push   ecx
c00111a3:	51                   	push   ecx
c00111a4:	52                   	push   edx
c00111a5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00111ac:	e8 4f f4 fe ff       	call   c0000600 <strcpy>
c00111b1:	83 c4 10             	add    esp,0x10
c00111b4:	b0 01                	mov    al,0x1
c00111b6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00111bc:	5b                   	pop    ebx
c00111bd:	5e                   	pop    esi
c00111be:	5f                   	pop    edi
c00111bf:	5d                   	pop    ebp
c00111c0:	c3                   	ret    

c00111c1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00111c1:	57                   	push   edi
c00111c2:	56                   	push   esi
c00111c3:	53                   	push   ebx
c00111c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00111ca:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00111d1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00111d8:	53                   	push   ebx
c00111d9:	e8 62 f3 fe ff       	call   c0000540 <strlen>
c00111de:	89 34 24             	mov    DWORD PTR [esp],esi
c00111e1:	89 c7                	mov    edi,eax
c00111e3:	e8 58 f3 fe ff       	call   c0000540 <strlen>
c00111e8:	83 c4 10             	add    esp,0x10
c00111eb:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00111ef:	3d ff 00 00 00       	cmp    eax,0xff
c00111f4:	0f 87 d3 00 00 00    	ja     c00112cd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00111fa:	57                   	push   edi
c00111fb:	57                   	push   edi
c00111fc:	56                   	push   esi
c00111fd:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011201:	56                   	push   esi
c0011202:	e8 f9 f3 fe ff       	call   c0000600 <strcpy>
c0011207:	58                   	pop    eax
c0011208:	5a                   	pop    edx
c0011209:	68 46 e5 01 c0       	push   0xc001e546
c001120e:	56                   	push   esi
c001120f:	e8 ac f5 fe ff       	call   c00007c0 <strcat>
c0011214:	59                   	pop    ecx
c0011215:	5f                   	pop    edi
c0011216:	53                   	push   ebx
c0011217:	56                   	push   esi
c0011218:	e8 a3 f5 fe ff       	call   c00007c0 <strcat>
c001121d:	58                   	pop    eax
c001121e:	5a                   	pop    edx
c001121f:	68 a9 e2 01 c0       	push   0xc001e2a9
c0011224:	56                   	push   esi
c0011225:	e8 96 f5 fe ff       	call   c00007c0 <strcat>
c001122a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011231:	e8 83 65 ff ff       	call   c00077b9 <malloc>
c0011236:	83 c4 0c             	add    esp,0xc
c0011239:	89 c3                	mov    ebx,eax
c001123b:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c0011241:	56                   	push   esi
c0011242:	50                   	push   eax
c0011243:	e8 82 97 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0011248:	83 c4 10             	add    esp,0x10
c001124b:	85 db                	test   ebx,ebx
c001124d:	74 7e                	je     c00112cd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001124f:	51                   	push   ecx
c0011250:	51                   	push   ecx
c0011251:	6a 01                	push   0x1
c0011253:	53                   	push   ebx
c0011254:	e8 31 98 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	85 c0                	test   eax,eax
c001125e:	74 08                	je     c0011268 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011260:	83 ec 0c             	sub    esp,0xc
c0011263:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011265:	53                   	push   ebx
c0011266:	eb 5f                	jmp    c00112c7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011268:	52                   	push   edx
c0011269:	8d 44 24 17          	lea    eax,[esp+0x17]
c001126d:	50                   	push   eax
c001126e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011272:	50                   	push   eax
c0011273:	53                   	push   ebx
c0011274:	e8 bd 9a ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c0011279:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001127d:	83 c4 10             	add    esp,0x10
c0011280:	89 c1                	mov    ecx,eax
c0011282:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011286:	74 31                	je     c00112b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011288:	83 ec 0c             	sub    esp,0xc
c001128b:	50                   	push   eax
c001128c:	e8 28 65 ff ff       	call   c00077b9 <malloc>
c0011291:	89 c6                	mov    esi,eax
c0011293:	58                   	pop    eax
c0011294:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011296:	8d 54 24 20          	lea    edx,[esp+0x20]
c001129a:	52                   	push   edx
c001129b:	56                   	push   esi
c001129c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00112a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00112a4:	53                   	push   ebx
c00112a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00112a8:	83 c4 20             	add    esp,0x20
c00112ab:	85 c0                	test   eax,eax
c00112ad:	75 0a                	jne    c00112b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00112af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112b3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00112b7:	74 18                	je     c00112d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00112b9:	83 ec 0c             	sub    esp,0xc
c00112bc:	53                   	push   ebx
c00112bd:	e8 26 98 ff ff       	call   c000aae8 <File::close()>
c00112c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112ca:	83 c4 10             	add    esp,0x10
c00112cd:	31 c0                	xor    eax,eax
c00112cf:	eb 3b                	jmp    c001130c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00112d1:	83 ec 0c             	sub    esp,0xc
c00112d4:	53                   	push   ebx
c00112d5:	e8 0e 98 ff ff       	call   c000aae8 <File::close()>
c00112da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112e2:	83 c4 0c             	add    esp,0xc
c00112e5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00112ec:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00112f3:	56                   	push   esi
c00112f4:	e8 70 fd ff ff       	call   c0011069 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00112f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00112fc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011300:	e8 c4 64 ff ff       	call   c00077c9 <free>
c0011305:	83 c4 10             	add    esp,0x10
c0011308:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001130c:	81 c4 20 01 00 00    	add    esp,0x120
c0011312:	5b                   	pop    ebx
c0011313:	5e                   	pop    esi
c0011314:	5f                   	pop    edi
c0011315:	c3                   	ret    

c0011316 <Reg::getLine(char*, char*, char*)>:
c0011316:	57                   	push   edi
c0011317:	56                   	push   esi
c0011318:	53                   	push   ebx
c0011319:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001131d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011321:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011325:	57                   	push   edi
c0011326:	56                   	push   esi
c0011327:	53                   	push   ebx
c0011328:	68 ae e2 01 c0       	push   0xc001e2ae
c001132d:	e8 8f fe ff ff       	call   c00111c1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011332:	83 c4 10             	add    esp,0x10
c0011335:	84 c0                	test   al,al
c0011337:	75 10                	jne    c0011349 <Reg::getLine(char*, char*, char*)+0x33>
c0011339:	57                   	push   edi
c001133a:	56                   	push   esi
c001133b:	53                   	push   ebx
c001133c:	68 d3 e2 01 c0       	push   0xc001e2d3
c0011341:	e8 7b fe ff ff       	call   c00111c1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011346:	83 c4 10             	add    esp,0x10
c0011349:	5b                   	pop    ebx
c001134a:	5e                   	pop    esi
c001134b:	5f                   	pop    edi
c001134c:	c3                   	ret    

c001134d <Reg::readInt(char*, char*, int*)>:
c001134d:	55                   	push   ebp
c001134e:	57                   	push   edi
c001134f:	56                   	push   esi
c0011350:	53                   	push   ebx
c0011351:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011357:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001135b:	57                   	push   edi
c001135c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011363:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001136a:	e8 a7 ff ff ff       	call   c0011316 <Reg::getLine(char*, char*, char*)>
c001136f:	83 c4 10             	add    esp,0x10
c0011372:	84 c0                	test   al,al
c0011374:	0f 84 b3 00 00 00    	je     c001142d <Reg::readInt(char*, char*, int*)+0xe0>
c001137a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001137e:	80 fa 2b             	cmp    dl,0x2b
c0011381:	74 0c                	je     c001138f <Reg::readInt(char*, char*, int*)+0x42>
c0011383:	80 fa 2d             	cmp    dl,0x2d
c0011386:	75 0e                	jne    c0011396 <Reg::readInt(char*, char*, int*)+0x49>
c0011388:	ba 01 00 00 00       	mov    edx,0x1
c001138d:	eb 0b                	jmp    c001139a <Reg::readInt(char*, char*, int*)+0x4d>
c001138f:	ba 01 00 00 00       	mov    edx,0x1
c0011394:	eb 02                	jmp    c0011398 <Reg::readInt(char*, char*, int*)+0x4b>
c0011396:	31 d2                	xor    edx,edx
c0011398:	31 c0                	xor    eax,eax
c001139a:	be 0a 00 00 00       	mov    esi,0xa
c001139f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00113a4:	75 20                	jne    c00113c6 <Reg::readInt(char*, char*, int*)+0x79>
c00113a6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00113aa:	80 f9 78             	cmp    cl,0x78
c00113ad:	75 0a                	jne    c00113b9 <Reg::readInt(char*, char*, int*)+0x6c>
c00113af:	83 c2 02             	add    edx,0x2
c00113b2:	be 10 00 00 00       	mov    esi,0x10
c00113b7:	eb 0d                	jmp    c00113c6 <Reg::readInt(char*, char*, int*)+0x79>
c00113b9:	80 f9 62             	cmp    cl,0x62
c00113bc:	75 08                	jne    c00113c6 <Reg::readInt(char*, char*, int*)+0x79>
c00113be:	83 c2 02             	add    edx,0x2
c00113c1:	be 02 00 00 00       	mov    esi,0x2
c00113c6:	01 d7                	add    edi,edx
c00113c8:	31 d2                	xor    edx,edx
c00113ca:	8a 1f                	mov    bl,BYTE PTR [edi]
c00113cc:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00113d0:	80 fb 0d             	cmp    bl,0xd
c00113d3:	0f 94 c3             	sete   bl
c00113d6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00113db:	0f 94 c1             	sete   cl
c00113de:	08 cb                	or     bl,cl
c00113e0:	75 3a                	jne    c001141c <Reg::readInt(char*, char*, int*)+0xcf>
c00113e2:	0f af d6             	imul   edx,esi
c00113e5:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00113ea:	83 fe 10             	cmp    esi,0x10
c00113ed:	75 26                	jne    c0011415 <Reg::readInt(char*, char*, int*)+0xc8>
c00113ef:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00113f3:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00113f6:	89 e9                	mov    ecx,ebp
c00113f8:	80 f9 05             	cmp    cl,0x5
c00113fb:	77 06                	ja     c0011403 <Reg::readInt(char*, char*, int*)+0xb6>
c00113fd:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011401:	eb 16                	jmp    c0011419 <Reg::readInt(char*, char*, int*)+0xcc>
c0011403:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011407:	83 e9 61             	sub    ecx,0x61
c001140a:	80 f9 05             	cmp    cl,0x5
c001140d:	77 06                	ja     c0011415 <Reg::readInt(char*, char*, int*)+0xc8>
c001140f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0011413:	eb 04                	jmp    c0011419 <Reg::readInt(char*, char*, int*)+0xcc>
c0011415:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011419:	47                   	inc    edi
c001141a:	eb ae                	jmp    c00113ca <Reg::readInt(char*, char*, int*)+0x7d>
c001141c:	84 c0                	test   al,al
c001141e:	74 02                	je     c0011422 <Reg::readInt(char*, char*, int*)+0xd5>
c0011420:	f7 da                	neg    edx
c0011422:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011429:	89 10                	mov    DWORD PTR [eax],edx
c001142b:	88 d8                	mov    al,bl
c001142d:	81 c4 ec 00 00 00    	add    esp,0xec
c0011433:	5b                   	pop    ebx
c0011434:	5e                   	pop    esi
c0011435:	5f                   	pop    edi
c0011436:	5d                   	pop    ebp
c0011437:	c3                   	ret    

c0011438 <Reg::readString(char*, char*, char*, int)>:
c0011438:	57                   	push   edi
c0011439:	56                   	push   esi
c001143a:	53                   	push   ebx
c001143b:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011441:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011448:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001144c:	57                   	push   edi
c001144d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011454:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001145b:	e8 b6 fe ff ff       	call   c0011316 <Reg::getLine(char*, char*, char*)>
c0011460:	83 c4 10             	add    esp,0x10
c0011463:	89 c6                	mov    esi,eax
c0011465:	84 c0                	test   al,al
c0011467:	74 44                	je     c00114ad <Reg::readString(char*, char*, char*, int)+0x75>
c0011469:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011470:	31 c0                	xor    eax,eax
c0011472:	4a                   	dec    edx
c0011473:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011476:	84 c9                	test   cl,cl
c0011478:	74 0f                	je     c0011489 <Reg::readString(char*, char*, char*, int)+0x51>
c001147a:	39 c2                	cmp    edx,eax
c001147c:	7e 0b                	jle    c0011489 <Reg::readString(char*, char*, char*, int)+0x51>
c001147e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011481:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011486:	40                   	inc    eax
c0011487:	eb ea                	jmp    c0011473 <Reg::readString(char*, char*, char*, int)+0x3b>
c0011489:	83 ec 0c             	sub    esp,0xc
c001148c:	53                   	push   ebx
c001148d:	e8 ae f0 fe ff       	call   c0000540 <strlen>
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001149a:	75 11                	jne    c00114ad <Reg::readString(char*, char*, char*, int)+0x75>
c001149c:	83 ec 0c             	sub    esp,0xc
c001149f:	53                   	push   ebx
c00114a0:	e8 9b f0 fe ff       	call   c0000540 <strlen>
c00114a5:	83 c4 10             	add    esp,0x10
c00114a8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00114ad:	81 c4 d0 00 00 00    	add    esp,0xd0
c00114b3:	89 f0                	mov    eax,esi
c00114b5:	5b                   	pop    ebx
c00114b6:	5e                   	pop    esi
c00114b7:	5f                   	pop    edi
c00114b8:	c3                   	ret    

c00114b9 <Reg::readBool(char*, char*, bool*)>:
c00114b9:	83 ec 20             	sub    esp,0x20
c00114bc:	8d 44 24 10          	lea    eax,[esp+0x10]
c00114c0:	50                   	push   eax
c00114c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114c9:	e8 7f fe ff ff       	call   c001134d <Reg::readInt(char*, char*, int*)>
c00114ce:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00114d3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00114d7:	0f 95 02             	setne  BYTE PTR [edx]
c00114da:	83 c4 2c             	add    esp,0x2c
c00114dd:	c3                   	ret    

c00114de <Reg::readBoolWithDefault(char*, char*, bool)>:
c00114de:	53                   	push   ebx
c00114df:	83 ec 1c             	sub    esp,0x1c
c00114e2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00114e6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00114ea:	50                   	push   eax
c00114eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114f3:	e8 c1 ff ff ff       	call   c00114b9 <Reg::readBool(char*, char*, bool*)>
c00114f8:	83 c4 10             	add    esp,0x10
c00114fb:	84 c0                	test   al,al
c00114fd:	74 04                	je     c0011503 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00114ff:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011503:	88 d8                	mov    al,bl
c0011505:	83 c4 18             	add    esp,0x18
c0011508:	5b                   	pop    ebx
c0011509:	c3                   	ret    

c001150a <Reg::readIntWithDefault(char*, char*, int)>:
c001150a:	53                   	push   ebx
c001150b:	83 ec 1c             	sub    esp,0x1c
c001150e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011512:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011516:	50                   	push   eax
c0011517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001151b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001151f:	e8 29 fe ff ff       	call   c001134d <Reg::readInt(char*, char*, int*)>
c0011524:	83 c4 10             	add    esp,0x10
c0011527:	84 c0                	test   al,al
c0011529:	74 04                	je     c001152f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001152b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001152f:	89 d8                	mov    eax,ebx
c0011531:	83 c4 18             	add    esp,0x18
c0011534:	5b                   	pop    ebx
c0011535:	c3                   	ret    

c0011536 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011536:	57                   	push   edi
c0011537:	56                   	push   esi
c0011538:	56                   	push   esi
c0011539:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001153d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011541:	56                   	push   esi
c0011542:	57                   	push   edi
c0011543:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001154b:	e8 e8 fe ff ff       	call   c0011438 <Reg::readString(char*, char*, char*, int)>
c0011550:	83 c4 10             	add    esp,0x10
c0011553:	84 c0                	test   al,al
c0011555:	75 1a                	jne    c0011571 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011557:	51                   	push   ecx
c0011558:	56                   	push   esi
c0011559:	6a 00                	push   0x0
c001155b:	57                   	push   edi
c001155c:	e8 6f ef fe ff       	call   c00004d0 <memset>
c0011561:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011564:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011568:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001156a:	83 c4 10             	add    esp,0x10
c001156d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011571:	89 f8                	mov    eax,edi
c0011573:	5a                   	pop    edx
c0011574:	5e                   	pop    esi
c0011575:	5f                   	pop    edi
c0011576:	c3                   	ret    

c0011577 <SysEject(regs*)>:
c0011577:	83 ec 0c             	sub    esp,0xc
c001157a:	83 ca ff             	or     edx,0xffffffff
c001157d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011581:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011584:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011589:	83 e9 41             	sub    ecx,0x41
c001158c:	83 f9 19             	cmp    ecx,0x19
c001158f:	77 18                	ja     c00115a9 <SysEject(regs*)+0x32>
c0011591:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c0011598:	85 c9                	test   ecx,ecx
c001159a:	74 0d                	je     c00115a9 <SysEject(regs*)+0x32>
c001159c:	83 ec 0c             	sub    esp,0xc
c001159f:	51                   	push   ecx
c00115a0:	e8 ad b5 ff ff       	call   c000cb52 <LogicalDisk::eject()>
c00115a5:	83 c4 10             	add    esp,0x10
c00115a8:	99                   	cdq    
c00115a9:	83 c4 0c             	add    esp,0xc
c00115ac:	c3                   	ret    

c00115ad <SysExit(regs*)>:
c00115ad:	83 ec 18             	sub    esp,0x18
c00115b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115b4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00115b7:	e8 b0 26 00 00       	call   c0013c6c <terminateTask(int)>
c00115bc:	83 c8 ff             	or     eax,0xffffffff
c00115bf:	83 c4 1c             	add    esp,0x1c
c00115c2:	89 c2                	mov    edx,eax
c00115c4:	c3                   	ret    

c00115c5 <SysGetCwd(regs*)>:
c00115c5:	83 ec 10             	sub    esp,0x10
c00115c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115cc:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00115cf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00115d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115d7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00115da:	e8 ed 91 ff ff       	call   c000a7cc <Fs::getcwd(Process*, char*, int)>
c00115df:	83 c4 1c             	add    esp,0x1c
c00115e2:	99                   	cdq    
c00115e3:	c3                   	ret    

c00115e4 <SysGetPID(regs*)>:
c00115e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00115ee:	99                   	cdq    
c00115ef:	c3                   	ret    

c00115f0 <SysGetRAMData(regs*)>:
c00115f0:	8b 0d c8 04 02 c0    	mov    ecx,DWORD PTR ds:0xc00204c8
c00115f6:	69 05 c4 04 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00204c4,0xc8
c0011600:	99                   	cdq    
c0011601:	f7 f9                	idiv   ecx
c0011603:	c1 e0 18             	shl    eax,0x18
c0011606:	09 c8                	or     eax,ecx
c0011608:	99                   	cdq    
c0011609:	c3                   	ret    

c001160a <SysGetVGAPtr(regs*)>:
c001160a:	55                   	push   ebp
c001160b:	57                   	push   edi
c001160c:	56                   	push   esi
c001160d:	53                   	push   ebx
c001160e:	83 ec 18             	sub    esp,0x18
c0011611:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011615:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011618:	e8 4f 21 00 00       	call   c001376c <Thr::processFromPID(int)>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	89 c1                	mov    ecx,eax
c0011622:	b8 01 00 00 00       	mov    eax,0x1
c0011627:	85 c9                	test   ecx,ecx
c0011629:	74 57                	je     c0011682 <SysGetVGAPtr(regs*)+0x78>
c001162b:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011631:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011635:	74 0c                	je     c0011643 <SysGetVGAPtr(regs*)+0x39>
c0011637:	83 ec 0c             	sub    esp,0xc
c001163a:	55                   	push   ebp
c001163b:	e8 b7 6d ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011646:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011649:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011650:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011653:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011656:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001165c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001165f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011662:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011668:	50                   	push   eax
c0011669:	50                   	push   eax
c001166a:	68 ee e2 01 c0       	push   0xc001e2ee
c001166f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011672:	05 a8 0f 00 00       	add    eax,0xfa8
c0011677:	50                   	push   eax
c0011678:	e8 83 ef fe ff       	call   c0000600 <strcpy>
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	31 c0                	xor    eax,eax
c0011682:	83 c4 0c             	add    esp,0xc
c0011685:	31 d2                	xor    edx,edx
c0011687:	5b                   	pop    ebx
c0011688:	5e                   	pop    esi
c0011689:	5f                   	pop    edi
c001168a:	5d                   	pop    ebp
c001168b:	c3                   	ret    

c001168c <SysLoadDLL(regs*)>:
c001168c:	56                   	push   esi
c001168d:	53                   	push   ebx
c001168e:	31 d2                	xor    edx,edx
c0011690:	51                   	push   ecx
c0011691:	b8 01 00 00 00       	mov    eax,0x1
c0011696:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001169a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001169e:	0f 84 8c 00 00 00    	je     c0011730 <SysLoadDLL(regs*)+0xa4>
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	68 14 01 00 00       	push   0x114
c00116ac:	e8 08 61 ff ff       	call   c00077b9 <malloc>
c00116b1:	83 c4 0c             	add    esp,0xc
c00116b4:	89 c3                	mov    ebx,eax
c00116b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116bb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00116be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00116c1:	53                   	push   ebx
c00116c2:	e8 03 93 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	31 d2                	xor    edx,edx
c00116cc:	b8 02 00 00 00       	mov    eax,0x2
c00116d1:	85 db                	test   ebx,ebx
c00116d3:	74 5b                	je     c0011730 <SysLoadDLL(regs*)+0xa4>
c00116d5:	83 ec 0c             	sub    esp,0xc
c00116d8:	53                   	push   ebx
c00116d9:	e8 1a 96 ff ff       	call   c000acf8 <File::exists()>
c00116de:	83 c4 10             	add    esp,0x10
c00116e1:	84 c0                	test   al,al
c00116e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116e5:	75 11                	jne    c00116f8 <SysLoadDLL(regs*)+0x6c>
c00116e7:	83 ec 0c             	sub    esp,0xc
c00116ea:	53                   	push   ebx
c00116eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116ee:	83 c4 10             	add    esp,0x10
c00116f1:	b8 03 00 00 00       	mov    eax,0x3
c00116f6:	eb 36                	jmp    c001172e <SysLoadDLL(regs*)+0xa2>
c00116f8:	83 ec 0c             	sub    esp,0xc
c00116fb:	53                   	push   ebx
c00116fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116ff:	58                   	pop    eax
c0011700:	5a                   	pop    edx
c0011701:	6a 00                	push   0x0
c0011703:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011706:	e8 4b 12 00 00       	call   c0012956 <Thr::loadDLL(char const*, bool)>
c001170b:	83 c4 10             	add    esp,0x10
c001170e:	89 c1                	mov    ecx,eax
c0011710:	31 d2                	xor    edx,edx
c0011712:	b8 04 00 00 00       	mov    eax,0x4
c0011717:	85 c9                	test   ecx,ecx
c0011719:	74 15                	je     c0011730 <SysLoadDLL(regs*)+0xa4>
c001171b:	53                   	push   ebx
c001171c:	53                   	push   ebx
c001171d:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0011723:	51                   	push   ecx
c0011724:	e8 5e 14 00 00       	call   c0012b87 <Thr::executeDLL(unsigned long, void*)>
c0011729:	83 c4 10             	add    esp,0x10
c001172c:	31 c0                	xor    eax,eax
c001172e:	31 d2                	xor    edx,edx
c0011730:	59                   	pop    ecx
c0011731:	5b                   	pop    ebx
c0011732:	5e                   	pop    esi
c0011733:	c3                   	ret    

c0011734 <SysRead(regs*)>:
c0011734:	57                   	push   edi
c0011735:	56                   	push   esi
c0011736:	53                   	push   ebx
c0011737:	83 ec 10             	sub    esp,0x10
c001173a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001173e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011741:	83 f8 02             	cmp    eax,0x2
c0011744:	77 10                	ja     c0011756 <SysRead(regs*)+0x22>
c0011746:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001174b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001174e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011754:	eb 0e                	jmp    c0011764 <SysRead(regs*)+0x30>
c0011756:	83 ec 0c             	sub    esp,0xc
c0011759:	50                   	push   eax
c001175a:	e8 4c 79 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c001175f:	83 c4 10             	add    esp,0x10
c0011762:	89 c1                	mov    ecx,eax
c0011764:	83 c8 ff             	or     eax,0xffffffff
c0011767:	85 c9                	test   ecx,ecx
c0011769:	89 c2                	mov    edx,eax
c001176b:	74 28                	je     c0011795 <SysRead(regs*)+0x61>
c001176d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011775:	31 ff                	xor    edi,edi
c0011777:	83 ec 0c             	sub    esp,0xc
c001177a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001177c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011780:	52                   	push   edx
c0011781:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011784:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011787:	57                   	push   edi
c0011788:	56                   	push   esi
c0011789:	51                   	push   ecx
c001178a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001178d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011791:	83 c4 20             	add    esp,0x20
c0011794:	99                   	cdq    
c0011795:	83 c4 10             	add    esp,0x10
c0011798:	5b                   	pop    ebx
c0011799:	5e                   	pop    esi
c001179a:	5f                   	pop    edi
c001179b:	c3                   	ret    

c001179c <SysSbrk(regs*)>:
c001179c:	56                   	push   esi
c001179d:	53                   	push   ebx
c001179e:	50                   	push   eax
c001179f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00117a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117ab:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00117ae:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00117b4:	85 db                	test   ebx,ebx
c00117b6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00117b9:	74 02                	je     c00117bd <SysSbrk(regs*)+0x21>
c00117bb:	79 06                	jns    c00117c3 <SysSbrk(regs*)+0x27>
c00117bd:	89 f0                	mov    eax,esi
c00117bf:	31 d2                	xor    edx,edx
c00117c1:	eb 2a                	jmp    c00117ed <SysSbrk(regs*)+0x51>
c00117c3:	83 c8 ff             	or     eax,0xffffffff
c00117c6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00117cc:	89 c2                	mov    edx,eax
c00117ce:	77 1d                	ja     c00117ed <SysSbrk(regs*)+0x51>
c00117d0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00117d6:	50                   	push   eax
c00117d7:	c1 ea 0c             	shr    edx,0xc
c00117da:	68 07 0c 00 00       	push   0xc07
c00117df:	52                   	push   edx
c00117e0:	51                   	push   ecx
c00117e1:	e8 b4 81 ff ff       	call   c000999a <VAS::allocatePages(int, int)>
c00117e6:	89 f0                	mov    eax,esi
c00117e8:	31 d2                	xor    edx,edx
c00117ea:	83 c4 10             	add    esp,0x10
c00117ed:	59                   	pop    ecx
c00117ee:	5b                   	pop    ebx
c00117ef:	5e                   	pop    esi
c00117f0:	c3                   	ret    

c00117f1 <SysSetCwd(regs*)>:
c00117f1:	83 ec 14             	sub    esp,0x14
c00117f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117f8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00117fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011800:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011803:	e8 8f 95 ff ff       	call   c000ad97 <Fs::setcwd(Process*, char*)>
c0011808:	83 c4 1c             	add    esp,0x1c
c001180b:	99                   	cdq    
c001180c:	c3                   	ret    

c001180d <SysSetTime(regs*)>:
c001180d:	55                   	push   ebp
c001180e:	31 c9                	xor    ecx,ecx
c0011810:	57                   	push   edi
c0011811:	bd 0c 00 00 00       	mov    ebp,0xc
c0011816:	56                   	push   esi
c0011817:	53                   	push   ebx
c0011818:	31 db                	xor    ebx,ebx
c001181a:	83 ec 10             	sub    esp,0x10
c001181d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011821:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011824:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011827:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001182a:	89 c2                	mov    edx,eax
c001182c:	66 81 ef 6c 07       	sub    di,0x76c
c0011831:	83 e2 1f             	and    edx,0x1f
c0011834:	c1 e7 10             	shl    edi,0x10
c0011837:	42                   	inc    edx
c0011838:	c1 e8 05             	shr    eax,0x5
c001183b:	88 d1                	mov    cl,dl
c001183d:	31 d2                	xor    edx,edx
c001183f:	f7 f5                	div    ebp
c0011841:	89 dd                	mov    ebp,ebx
c0011843:	88 d5                	mov    ch,dl
c0011845:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001184b:	0f b7 c1             	movzx  eax,cx
c001184e:	31 d2                	xor    edx,edx
c0011850:	09 f8                	or     eax,edi
c0011852:	bf 3c 00 00 00       	mov    edi,0x3c
c0011857:	89 c1                	mov    ecx,eax
c0011859:	89 f0                	mov    eax,esi
c001185b:	f7 f7                	div    edi
c001185d:	c1 e2 10             	shl    edx,0x10
c0011860:	09 d5                	or     ebp,edx
c0011862:	31 d2                	xor    edx,edx
c0011864:	89 eb                	mov    ebx,ebp
c0011866:	f7 f7                	div    edi
c0011868:	bf 10 0e 00 00       	mov    edi,0xe10
c001186d:	88 d7                	mov    bh,dl
c001186f:	89 f0                	mov    eax,esi
c0011871:	31 d2                	xor    edx,edx
c0011873:	f7 f7                	div    edi
c0011875:	bf 18 00 00 00       	mov    edi,0x18
c001187a:	31 d2                	xor    edx,edx
c001187c:	f7 f7                	div    edi
c001187e:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0011883:	88 d3                	mov    bl,dl
c0011885:	53                   	push   ebx
c0011886:	51                   	push   ecx
c0011887:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001188d:	e8 16 9d ff ff       	call   c000b5a8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011892:	83 c4 1c             	add    esp,0x1c
c0011895:	83 f0 01             	xor    eax,0x1
c0011898:	5b                   	pop    ebx
c0011899:	0f b6 c0             	movzx  eax,al
c001189c:	5e                   	pop    esi
c001189d:	31 d2                	xor    edx,edx
c001189f:	5f                   	pop    edi
c00118a0:	5d                   	pop    ebp
c00118a1:	c3                   	ret    

c00118a2 <SysTimezone(regs*)>:
c00118a2:	53                   	push   ebx
c00118a3:	83 ec 08             	sub    esp,0x8
c00118a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118aa:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00118ae:	75 17                	jne    c00118c7 <SysTimezone(regs*)+0x25>
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	68 f8 e2 01 c0       	push   0xc001e2f8
c00118b8:	e8 97 8b ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00118bd:	83 c8 ff             	or     eax,0xffffffff
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	89 c2                	mov    edx,eax
c00118c5:	eb 20                	jmp    c00118e7 <SysTimezone(regs*)+0x45>
c00118c7:	83 ec 0c             	sub    esp,0xc
c00118ca:	68 0d e3 01 c0       	push   0xc001e30d
c00118cf:	e8 80 8b ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00118d4:	58                   	pop    eax
c00118d5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00118d8:	e8 27 9a ff ff       	call   c000b304 <User::loadClockSettings(int)>
c00118dd:	83 c4 10             	add    esp,0x10
c00118e0:	b8 01 00 00 00       	mov    eax,0x1
c00118e5:	31 d2                	xor    edx,edx
c00118e7:	83 c4 08             	add    esp,0x8
c00118ea:	5b                   	pop    ebx
c00118eb:	c3                   	ret    

c00118ec <SysWrite(regs*)>:
c00118ec:	57                   	push   edi
c00118ed:	56                   	push   esi
c00118ee:	53                   	push   ebx
c00118ef:	83 ec 10             	sub    esp,0x10
c00118f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00118f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118f9:	83 f8 02             	cmp    eax,0x2
c00118fc:	77 10                	ja     c001190e <SysWrite(regs*)+0x22>
c00118fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011903:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011906:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001190c:	eb 0e                	jmp    c001191c <SysWrite(regs*)+0x30>
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	50                   	push   eax
c0011912:	e8 94 77 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c0011917:	83 c4 10             	add    esp,0x10
c001191a:	89 c1                	mov    ecx,eax
c001191c:	83 c8 ff             	or     eax,0xffffffff
c001191f:	85 c9                	test   ecx,ecx
c0011921:	89 c2                	mov    edx,eax
c0011923:	74 28                	je     c001194d <SysWrite(regs*)+0x61>
c0011925:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001192d:	31 ff                	xor    edi,edi
c001192f:	83 ec 0c             	sub    esp,0xc
c0011932:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011934:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011938:	52                   	push   edx
c0011939:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001193c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001193f:	57                   	push   edi
c0011940:	56                   	push   esi
c0011941:	51                   	push   ecx
c0011942:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011945:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011949:	83 c4 20             	add    esp,0x20
c001194c:	99                   	cdq    
c001194d:	83 c4 10             	add    esp,0x10
c0011950:	5b                   	pop    ebx
c0011951:	5e                   	pop    esi
c0011952:	5f                   	pop    edi
c0011953:	c3                   	ret    

c0011954 <SysWsbe(regs*)>:
c0011954:	57                   	push   edi
c0011955:	b9 0b 00 00 00       	mov    ecx,0xb
c001195a:	56                   	push   esi
c001195b:	be 4c e3 01 c0       	mov    esi,0xc001e34c
c0011960:	53                   	push   ebx
c0011961:	83 ec 30             	sub    esp,0x30
c0011964:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011968:	fc                   	cld    
c0011969:	83 ec 0c             	sub    esp,0xc
c001196c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001196e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011972:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011977:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001197a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011980:	8b 06                	mov    eax,DWORD PTR [esi]
c0011982:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011985:	57                   	push   edi
c0011986:	e8 b5 eb fe ff       	call   c0000540 <strlen>
c001198b:	5a                   	pop    edx
c001198c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011990:	52                   	push   edx
c0011991:	31 d2                	xor    edx,edx
c0011993:	57                   	push   edi
c0011994:	52                   	push   edx
c0011995:	50                   	push   eax
c0011996:	56                   	push   esi
c0011997:	ff d3                	call   ebx
c0011999:	83 c4 14             	add    esp,0x14
c001199c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00119a0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00119a3:	e8 c4 22 00 00       	call   c0013c6c <terminateTask(int)>
c00119a8:	83 c4 40             	add    esp,0x40
c00119ab:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00119b0:	5b                   	pop    ebx
c00119b1:	31 d2                	xor    edx,edx
c00119b3:	5e                   	pop    esi
c00119b4:	5f                   	pop    edi
c00119b5:	c3                   	ret    

c00119b6 <SysYield(regs*)>:
c00119b6:	83 ec 0c             	sub    esp,0xc
c00119b9:	fa                   	cli    
c00119ba:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00119c0:	e8 83 19 00 00       	call   c0013348 <schedule()>
c00119c5:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00119ca:	48                   	dec    eax
c00119cb:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00119d0:	75 01                	jne    c00119d3 <SysYield(regs*)+0x1d>
c00119d2:	fb                   	sti    
c00119d3:	31 c0                	xor    eax,eax
c00119d5:	31 d2                	xor    edx,edx
c00119d7:	83 c4 0c             	add    esp,0xc
c00119da:	c3                   	ret    

c00119db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00119db:	55                   	push   ebp
c00119dc:	57                   	push   edi
c00119dd:	56                   	push   esi
c00119de:	53                   	push   ebx
c00119df:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00119e5:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00119ed:	0f 95 c2             	setne  dl
c00119f0:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00119f8:	0f 94 c0             	sete   al
c00119fb:	84 c2                	test   dl,al
c00119fd:	74 34                	je     c0011a33 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00119ff:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011a0a:	74 27                	je     c0011a33 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011a0c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011a13:	05 00 10 00 00       	add    eax,0x1000
c0011a18:	89 c1                	mov    ecx,eax
c0011a1a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a1f:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011a25:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011a2c:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011a33:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011a3a:	83 ec 0c             	sub    esp,0xc
c0011a3d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011a43:	6a 01                	push   0x1
c0011a45:	e8 b7 77 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0011a4a:	83 c4 10             	add    esp,0x10
c0011a4d:	89 c3                	mov    ebx,eax
c0011a4f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011a55:	0f 86 25 01 00 00    	jbe    c0011b80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011a5b:	c1 ee 0c             	shr    esi,0xc
c0011a5e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011a65:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011a69:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011a71:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011a78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a7c:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011a83:	29 ef                	sub    edi,ebp
c0011a85:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011a89:	0f 83 f8 00 00 00    	jae    c0011b87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011a8f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011a95:	76 05                	jbe    c0011a9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011a97:	bf 00 10 00 00       	mov    edi,0x1000
c0011a9c:	83 ec 0c             	sub    esp,0xc
c0011a9f:	31 d2                	xor    edx,edx
c0011aa1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011aa8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011aaa:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011aae:	50                   	push   eax
c0011aaf:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ab3:	56                   	push   esi
c0011ab4:	52                   	push   edx
c0011ab5:	57                   	push   edi
c0011ab6:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011abd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ac0:	83 c4 20             	add    esp,0x20
c0011ac3:	85 c0                	test   eax,eax
c0011ac5:	75 06                	jne    c0011acd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011ac7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011acb:	74 13                	je     c0011ae0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011acd:	83 ec 0c             	sub    esp,0xc
c0011ad0:	53                   	push   ebx
c0011ad1:	e8 5b 7a ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ad6:	83 c4 10             	add    esp,0x10
c0011ad9:	31 c0                	xor    eax,eax
c0011adb:	e9 7c 01 00 00       	jmp    c0011c5c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011ae0:	fa                   	cli    
c0011ae1:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0011ae7:	e8 a9 5f ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011aec:	6a 07                	push   0x7
c0011aee:	89 c7                	mov    edi,eax
c0011af0:	53                   	push   ebx
c0011af1:	50                   	push   eax
c0011af2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011afa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b00:	e8 91 7d ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b05:	83 c4 0c             	add    esp,0xc
c0011b08:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011b0f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b15:	6a 00                	push   0x0
c0011b17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b1f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b25:	e8 de 7b ff ff       	call   c0009708 <VAS::mapOtherVASIn(bool, VAS*)>
c0011b2a:	58                   	pop    eax
c0011b2b:	5a                   	pop    edx
c0011b2c:	68 07 0c 00 00       	push   0xc07
c0011b31:	55                   	push   ebp
c0011b32:	57                   	push   edi
c0011b33:	89 df                	mov    edi,ebx
c0011b35:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011b3c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b42:	6a 00                	push   0x0
c0011b44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b49:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b4c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b52:	e8 ff 80 ff ff       	call   c0009c56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011b57:	b9 00 10 00 00       	mov    ecx,0x1000
c0011b5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b5e:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0011b63:	83 c4 20             	add    esp,0x20
c0011b66:	48                   	dec    eax
c0011b67:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0011b6c:	85 c0                	test   eax,eax
c0011b6e:	75 01                	jne    c0011b71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011b70:	fb                   	sti    
c0011b71:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011b77:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011b7b:	e9 f1 fe ff ff       	jmp    c0011a71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011b80:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011b87:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011b8e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011b94:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011b9a:	0f 86 ae 00 00 00    	jbe    c0011c4e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011ba0:	fa                   	cli    
c0011ba1:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0011ba7:	c1 ee 0c             	shr    esi,0xc
c0011baa:	51                   	push   ecx
c0011bab:	31 ff                	xor    edi,edi
c0011bad:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011bb4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011bba:	6a 00                	push   0x0
c0011bbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bc4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011bca:	e8 39 7b ff ff       	call   c0009708 <VAS::mapOtherVASIn(bool, VAS*)>
c0011bcf:	83 c4 10             	add    esp,0x10
c0011bd2:	e8 be 5e ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011bd7:	47                   	inc    edi
c0011bd8:	6a 07                	push   0x7
c0011bda:	53                   	push   ebx
c0011bdb:	50                   	push   eax
c0011bdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011be0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011be6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011be9:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011bef:	e8 a2 7c ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bf4:	58                   	pop    eax
c0011bf5:	5a                   	pop    edx
c0011bf6:	68 07 0c 00 00       	push   0xc07
c0011bfb:	55                   	push   ebp
c0011bfc:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011c02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c06:	50                   	push   eax
c0011c07:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011c0e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c14:	6a 00                	push   0x0
c0011c16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c1b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c1e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c24:	e8 2d 80 ff ff       	call   c0009c56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011c29:	83 c4 1c             	add    esp,0x1c
c0011c2c:	68 00 10 00 00       	push   0x1000
c0011c31:	6a 00                	push   0x0
c0011c33:	53                   	push   ebx
c0011c34:	e8 97 e8 fe ff       	call   c00004d0 <memset>
c0011c39:	83 c4 10             	add    esp,0x10
c0011c3c:	39 fe                	cmp    esi,edi
c0011c3e:	77 92                	ja     c0011bd2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011c40:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0011c45:	48                   	dec    eax
c0011c46:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0011c4b:	75 01                	jne    c0011c4e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011c4d:	fb                   	sti    
c0011c4e:	83 ec 0c             	sub    esp,0xc
c0011c51:	53                   	push   ebx
c0011c52:	e8 da 78 ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c57:	83 c4 10             	add    esp,0x10
c0011c5a:	b0 01                	mov    al,0x1
c0011c5c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011c62:	5b                   	pop    ebx
c0011c63:	5e                   	pop    esi
c0011c64:	5f                   	pop    edi
c0011c65:	5d                   	pop    ebp
c0011c66:	c3                   	ret    

c0011c67 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011c67:	55                   	push   ebp
c0011c68:	57                   	push   edi
c0011c69:	56                   	push   esi
c0011c6a:	53                   	push   ebx
c0011c6b:	83 ec 48             	sub    esp,0x48
c0011c6e:	68 14 01 00 00       	push   0x114
c0011c73:	e8 41 5b ff ff       	call   c00077b9 <malloc>
c0011c78:	83 c4 0c             	add    esp,0xc
c0011c7b:	89 c6                	mov    esi,eax
c0011c7d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011c81:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011c85:	50                   	push   eax
c0011c86:	e8 3f 8d ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0011c8b:	58                   	pop    eax
c0011c8c:	5a                   	pop    edx
c0011c8d:	6a 01                	push   0x1
c0011c8f:	56                   	push   esi
c0011c90:	e8 f5 8d ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0011c95:	83 c4 10             	add    esp,0x10
c0011c98:	85 c0                	test   eax,eax
c0011c9a:	0f 85 47 01 00 00    	jne    c0011de7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011ca0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011ca8:	83 ec 0c             	sub    esp,0xc
c0011cab:	6a 34                	push   0x34
c0011cad:	e8 07 5b ff ff       	call   c00077b9 <malloc>
c0011cb2:	89 c3                	mov    ebx,eax
c0011cb4:	58                   	pop    eax
c0011cb5:	8b 06                	mov    eax,DWORD PTR [esi]
c0011cb7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011cbb:	57                   	push   edi
c0011cbc:	53                   	push   ebx
c0011cbd:	6a 00                	push   0x0
c0011cbf:	6a 34                	push   0x34
c0011cc1:	56                   	push   esi
c0011cc2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011cc5:	83 c4 20             	add    esp,0x20
c0011cc8:	85 c0                	test   eax,eax
c0011cca:	0f 85 17 01 00 00    	jne    c0011de7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cd0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011cd6:	0f 85 0b 01 00 00    	jne    c0011de7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cdc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cdf:	85 c0                	test   eax,eax
c0011ce1:	0f 84 00 01 00 00    	je     c0011de7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011ce7:	31 d2                	xor    edx,edx
c0011ce9:	55                   	push   ebp
c0011cea:	52                   	push   edx
c0011ceb:	50                   	push   eax
c0011cec:	56                   	push   esi
c0011ced:	e8 56 8e ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011cf2:	83 c4 10             	add    esp,0x10
c0011cf5:	85 c0                	test   eax,eax
c0011cf7:	0f 85 ea 00 00 00    	jne    c0011de7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cfd:	83 ec 0c             	sub    esp,0xc
c0011d00:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011d03:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011d07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d0b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011d0f:	0f af c2             	imul   eax,edx
c0011d12:	50                   	push   eax
c0011d13:	e8 a1 5a ff ff       	call   c00077b9 <malloc>
c0011d18:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d25:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011d29:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011d2d:	0f af c2             	imul   eax,edx
c0011d30:	99                   	cdq    
c0011d31:	52                   	push   edx
c0011d32:	50                   	push   eax
c0011d33:	56                   	push   esi
c0011d34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011d3a:	83 c4 20             	add    esp,0x20
c0011d3d:	85 c0                	test   eax,eax
c0011d3f:	0f 84 a2 00 00 00    	je     c0011de7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d45:	31 d2                	xor    edx,edx
c0011d47:	51                   	push   ecx
c0011d48:	52                   	push   edx
c0011d49:	50                   	push   eax
c0011d4a:	56                   	push   esi
c0011d4b:	e8 f8 8d ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	85 c0                	test   eax,eax
c0011d55:	0f 85 8c 00 00 00    	jne    c0011de7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d5b:	83 ec 0c             	sub    esp,0xc
c0011d5e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d62:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d66:	31 ed                	xor    ebp,ebp
c0011d68:	0f af c2             	imul   eax,edx
c0011d6b:	50                   	push   eax
c0011d6c:	e8 48 5a ff ff       	call   c00077b9 <malloc>
c0011d71:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d77:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d7e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d82:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d86:	0f af c2             	imul   eax,edx
c0011d89:	99                   	cdq    
c0011d8a:	52                   	push   edx
c0011d8b:	50                   	push   eax
c0011d8c:	56                   	push   esi
c0011d8d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d90:	83 c4 20             	add    esp,0x20
c0011d93:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011d9b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011d9f:	0f 86 80 00 00 00    	jbe    c0011e25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011da5:	0f b7 fd             	movzx  edi,bp
c0011da8:	c1 e7 05             	shl    edi,0x5
c0011dab:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011daf:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011db2:	75 6b                	jne    c0011e1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011db4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011db7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dbb:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011dbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dc2:	52                   	push   edx
c0011dc3:	31 d2                	xor    edx,edx
c0011dc5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011dc8:	52                   	push   edx
c0011dc9:	50                   	push   eax
c0011dca:	56                   	push   esi
c0011dcb:	e8 78 8d ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011dd0:	83 c4 10             	add    esp,0x10
c0011dd3:	85 c0                	test   eax,eax
c0011dd5:	74 17                	je     c0011dee <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011dd7:	83 ec 0c             	sub    esp,0xc
c0011dda:	68 78 e3 01 c0       	push   0xc001e378
c0011ddf:	e8 70 86 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	31 c0                	xor    eax,eax
c0011de9:	e9 87 00 00 00       	jmp    c0011e75 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011dee:	83 ec 0c             	sub    esp,0xc
c0011df1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011df4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011df7:	50                   	push   eax
c0011df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011dfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e00:	56                   	push   esi
c0011e01:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011e05:	e8 d1 fb ff ff       	call   c00119db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011e0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e0e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011e12:	83 c4 20             	add    esp,0x20
c0011e15:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011e19:	73 04                	jae    c0011e1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011e1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e1f:	45                   	inc    ebp
c0011e20:	e9 76 ff ff ff       	jmp    c0011d9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011e25:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011e29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e31:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011e37:	83 ec 0c             	sub    esp,0xc
c0011e3a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011e40:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e45:	05 00 10 00 00       	add    eax,0x1000
c0011e4a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e51:	e8 73 59 ff ff       	call   c00077c9 <free>
c0011e56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e59:	e8 6b 59 ff ff       	call   c00077c9 <free>
c0011e5e:	58                   	pop    eax
c0011e5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e63:	e8 61 59 ff ff       	call   c00077c9 <free>
c0011e68:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e6b:	e8 78 8c ff ff       	call   c000aae8 <File::close()>
c0011e70:	83 c4 10             	add    esp,0x10
c0011e73:	b0 01                	mov    al,0x1
c0011e75:	83 c4 3c             	add    esp,0x3c
c0011e78:	5b                   	pop    ebx
c0011e79:	5e                   	pop    esi
c0011e7a:	5f                   	pop    edi
c0011e7b:	5d                   	pop    ebp
c0011e7c:	c3                   	ret    

c0011e7d <Thr::runtimeReferenceHelper()>:
c0011e7d:	83 ec 18             	sub    esp,0x18
c0011e80:	68 80 e3 01 c0       	push   0xc001e380
c0011e85:	e8 ca 85 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0011e8a:	fa                   	cli    
c0011e8b:	83 c4 10             	add    esp,0x10
c0011e8e:	eb fe                	jmp    c0011e8e <Thr::runtimeReferenceHelper()+0x11>

c0011e90 <Thr::getAddressOfKernelSymbol(char const*)>:
c0011e90:	57                   	push   edi
c0011e91:	56                   	push   esi
c0011e92:	53                   	push   ebx
c0011e93:	31 db                	xor    ebx,ebx
c0011e95:	39 1d 20 37 02 c0    	cmp    DWORD PTR ds:0xc0023720,ebx
c0011e9b:	7e 3c                	jle    c0011ed9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011e9d:	8b 34 9d a0 36 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc960]
c0011ea4:	31 ff                	xor    edi,edi
c0011ea6:	39 3c 9d a0 35 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdca60],edi
c0011ead:	7e 27                	jle    c0011ed6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011eaf:	50                   	push   eax
c0011eb0:	50                   	push   eax
c0011eb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011eb5:	8b 06                	mov    eax,DWORD PTR [esi]
c0011eb7:	03 04 9d 20 36 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc9e0]
c0011ebe:	50                   	push   eax
c0011ebf:	e8 1c e8 fe ff       	call   c00006e0 <strcmp>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	85 c0                	test   eax,eax
c0011ec9:	75 05                	jne    c0011ed0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011ecb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011ece:	eb 0b                	jmp    c0011edb <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011ed0:	83 c6 10             	add    esi,0x10
c0011ed3:	47                   	inc    edi
c0011ed4:	eb d0                	jmp    c0011ea6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011ed6:	43                   	inc    ebx
c0011ed7:	eb bc                	jmp    c0011e95 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011ed9:	31 c0                	xor    eax,eax
c0011edb:	5b                   	pop    ebx
c0011edc:	5e                   	pop    esi
c0011edd:	5f                   	pop    edi
c0011ede:	c3                   	ret    

c0011edf <Thr::loadKernelSymbolTable(char const*)>:
c0011edf:	55                   	push   ebp
c0011ee0:	57                   	push   edi
c0011ee1:	56                   	push   esi
c0011ee2:	53                   	push   ebx
c0011ee3:	83 ec 68             	sub    esp,0x68
c0011ee6:	8b 35 70 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023770
c0011eec:	68 14 01 00 00       	push   0x114
c0011ef1:	e8 c3 58 ff ff       	call   c00077b9 <malloc>
c0011ef6:	83 c4 0c             	add    esp,0xc
c0011ef9:	89 c3                	mov    ebx,eax
c0011efb:	56                   	push   esi
c0011efc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011f00:	50                   	push   eax
c0011f01:	e8 c4 8a ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0011f06:	5e                   	pop    esi
c0011f07:	5f                   	pop    edi
c0011f08:	6a 01                	push   0x1
c0011f0a:	53                   	push   ebx
c0011f0b:	e8 7a 8b ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0011f10:	83 c4 10             	add    esp,0x10
c0011f13:	85 c0                	test   eax,eax
c0011f15:	74 0a                	je     c0011f21 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011f17:	83 ec 0c             	sub    esp,0xc
c0011f1a:	68 a2 e3 01 c0       	push   0xc001e3a2
c0011f1f:	eb 34                	jmp    c0011f55 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011f21:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011f29:	83 ec 0c             	sub    esp,0xc
c0011f2c:	6a 34                	push   0x34
c0011f2e:	e8 86 58 ff ff       	call   c00077b9 <malloc>
c0011f33:	59                   	pop    ecx
c0011f34:	89 c7                	mov    edi,eax
c0011f36:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011f3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f3c:	56                   	push   esi
c0011f3d:	57                   	push   edi
c0011f3e:	6a 00                	push   0x0
c0011f40:	6a 34                	push   0x34
c0011f42:	53                   	push   ebx
c0011f43:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011f46:	83 c4 20             	add    esp,0x20
c0011f49:	85 c0                	test   eax,eax
c0011f4b:	74 17                	je     c0011f64 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011f4d:	83 ec 0c             	sub    esp,0xc
c0011f50:	68 b9 e3 01 c0       	push   0xc001e3b9
c0011f55:	e8 dd e1 ff ff       	call   c0010137 <KePanic(char const*)>
c0011f5a:	83 c4 10             	add    esp,0x10
c0011f5d:	31 c0                	xor    eax,eax
c0011f5f:	e9 31 02 00 00       	jmp    c0012195 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011f64:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011f6a:	75 e1                	jne    c0011f4d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f6c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011f6f:	85 c0                	test   eax,eax
c0011f71:	74 da                	je     c0011f4d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f73:	52                   	push   edx
c0011f74:	31 d2                	xor    edx,edx
c0011f76:	52                   	push   edx
c0011f77:	50                   	push   eax
c0011f78:	53                   	push   ebx
c0011f79:	e8 ca 8b ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011f7e:	83 c4 10             	add    esp,0x10
c0011f81:	85 c0                	test   eax,eax
c0011f83:	75 c8                	jne    c0011f4d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f85:	83 ec 0c             	sub    esp,0xc
c0011f88:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011f8c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011f90:	31 ed                	xor    ebp,ebp
c0011f92:	0f af c2             	imul   eax,edx
c0011f95:	50                   	push   eax
c0011f96:	e8 1e 58 ff ff       	call   c00077b9 <malloc>
c0011f9b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011f9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fa1:	89 34 24             	mov    DWORD PTR [esp],esi
c0011fa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011fa8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011fac:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011fb0:	0f af c2             	imul   eax,edx
c0011fb3:	99                   	cdq    
c0011fb4:	52                   	push   edx
c0011fb5:	50                   	push   eax
c0011fb6:	53                   	push   ebx
c0011fb7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011fba:	83 c4 20             	add    esp,0x20
c0011fbd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011fc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011fcd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011fd5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fdd:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0011fe1:	0f 86 aa 00 00 00    	jbe    c0012091 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011fe7:	0f b7 f5             	movzx  esi,bp
c0011fea:	6b f6 28             	imul   esi,esi,0x28
c0011fed:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011ff1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011ff4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ff8:	50                   	push   eax
c0011ff9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ffd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012001:	8b 16                	mov    edx,DWORD PTR [esi]
c0012003:	6b c0 28             	imul   eax,eax,0x28
c0012006:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001200a:	89 d0                	mov    eax,edx
c001200c:	31 d2                	xor    edx,edx
c001200e:	52                   	push   edx
c001200f:	50                   	push   eax
c0012010:	53                   	push   ebx
c0012011:	e8 32 8b ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012016:	83 c4 0c             	add    esp,0xc
c0012019:	6a 20                	push   0x20
c001201b:	6a 00                	push   0x0
c001201d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012021:	52                   	push   edx
c0012022:	e8 a9 e4 fe ff       	call   c00004d0 <memset>
c0012027:	58                   	pop    eax
c0012028:	8b 03                	mov    eax,DWORD PTR [ebx]
c001202a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001202e:	51                   	push   ecx
c001202f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012033:	52                   	push   edx
c0012034:	6a 00                	push   0x0
c0012036:	6a 1f                	push   0x1f
c0012038:	53                   	push   ebx
c0012039:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001203c:	83 c4 18             	add    esp,0x18
c001203f:	68 d0 e3 01 c0       	push   0xc001e3d0
c0012044:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012048:	52                   	push   edx
c0012049:	e8 92 e6 fe ff       	call   c00006e0 <strcmp>
c001204e:	83 c4 10             	add    esp,0x10
c0012051:	85 c0                	test   eax,eax
c0012053:	75 0f                	jne    c0012064 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012055:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012058:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001205c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012064:	50                   	push   eax
c0012065:	50                   	push   eax
c0012066:	68 d8 e3 01 c0       	push   0xc001e3d8
c001206b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001206f:	50                   	push   eax
c0012070:	e8 6b e6 fe ff       	call   c00006e0 <strcmp>
c0012075:	83 c4 10             	add    esp,0x10
c0012078:	85 c0                	test   eax,eax
c001207a:	75 0f                	jne    c001208b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001207c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001207f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012083:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001208b:	45                   	inc    ebp
c001208c:	e9 4c ff ff ff       	jmp    c0011fdd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012091:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012096:	75 10                	jne    c00120a8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0012098:	83 ec 0c             	sub    esp,0xc
c001209b:	68 e0 e3 01 c0       	push   0xc001e3e0
c00120a0:	e8 92 e0 ff ff       	call   c0010137 <KePanic(char const*)>
c00120a5:	83 c4 10             	add    esp,0x10
c00120a8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00120ad:	75 10                	jne    c00120bf <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00120af:	83 ec 0c             	sub    esp,0xc
c00120b2:	68 e0 e3 01 c0       	push   0xc001e3e0
c00120b7:	e8 7b e0 ff ff       	call   c0010137 <KePanic(char const*)>
c00120bc:	83 c4 10             	add    esp,0x10
c00120bf:	31 d2                	xor    edx,edx
c00120c1:	50                   	push   eax
c00120c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120c6:	52                   	push   edx
c00120c7:	50                   	push   eax
c00120c8:	53                   	push   ebx
c00120c9:	e8 7a 8a ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00120ce:	5a                   	pop    edx
c00120cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00120d3:	e8 e1 56 ff ff       	call   c00077b9 <malloc>
c00120d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120e0:	31 c9                	xor    ecx,ecx
c00120e2:	5e                   	pop    esi
c00120e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120e5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00120e9:	55                   	push   ebp
c00120ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120ee:	51                   	push   ecx
c00120ef:	52                   	push   edx
c00120f0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00120f4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00120f8:	53                   	push   ebx
c00120f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120fc:	83 c4 14             	add    esp,0x14
c00120ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012103:	e8 b1 56 ff ff       	call   c00077b9 <malloc>
c0012108:	89 c6                	mov    esi,eax
c001210a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001210c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001210f:	56                   	push   esi
c0012110:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012114:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012118:	51                   	push   ecx
c0012119:	52                   	push   edx
c001211a:	53                   	push   ebx
c001211b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001211e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012122:	8b 15 20 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023720
c0012128:	83 c4 1c             	add    esp,0x1c
c001212b:	c1 e8 04             	shr    eax,0x4
c001212e:	89 04 95 a0 35 02 c0 	mov    DWORD PTR [edx*4-0x3ffdca60],eax
c0012135:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012139:	31 d2                	xor    edx,edx
c001213b:	52                   	push   edx
c001213c:	50                   	push   eax
c001213d:	53                   	push   ebx
c001213e:	e8 05 8a ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012143:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012145:	31 d2                	xor    edx,edx
c0012147:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001214a:	56                   	push   esi
c001214b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001214f:	52                   	push   edx
c0012150:	50                   	push   eax
c0012151:	53                   	push   ebx
c0012152:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012155:	83 c4 14             	add    esp,0x14
c0012158:	53                   	push   ebx
c0012159:	e8 8a 89 ff ff       	call   c000aae8 <File::close()>
c001215e:	5d                   	pop    ebp
c001215f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012163:	e8 61 56 ff ff       	call   c00077c9 <free>
c0012168:	89 3c 24             	mov    DWORD PTR [esp],edi
c001216b:	e8 59 56 ff ff       	call   c00077c9 <free>
c0012170:	a1 20 37 02 c0       	mov    eax,ds:0xc0023720
c0012175:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012179:	8d 50 01             	lea    edx,[eax+0x1]
c001217c:	89 0c 85 a0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc960],ecx
c0012183:	89 34 85 20 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9e0],esi
c001218a:	89 15 20 37 02 c0    	mov    DWORD PTR ds:0xc0023720,edx
c0012190:	83 c4 10             	add    esp,0x10
c0012193:	b0 01                	mov    al,0x1
c0012195:	83 c4 5c             	add    esp,0x5c
c0012198:	5b                   	pop    ebx
c0012199:	5e                   	pop    esi
c001219a:	5f                   	pop    edi
c001219b:	5d                   	pop    ebp
c001219c:	c3                   	ret    

c001219d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001219d:	55                   	push   ebp
c001219e:	57                   	push   edi
c001219f:	56                   	push   esi
c00121a0:	53                   	push   ebx
c00121a1:	81 ec 68 03 00 00    	sub    esp,0x368
c00121a7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00121ae:	8b 1d 70 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023770
c00121b4:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00121b8:	68 14 01 00 00       	push   0x114
c00121bd:	e8 f7 55 ff ff       	call   c00077b9 <malloc>
c00121c2:	83 c4 0c             	add    esp,0xc
c00121c5:	89 c5                	mov    ebp,eax
c00121c7:	53                   	push   ebx
c00121c8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00121cf:	50                   	push   eax
c00121d0:	e8 f5 87 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c00121d5:	5e                   	pop    esi
c00121d6:	5f                   	pop    edi
c00121d7:	6a 01                	push   0x1
c00121d9:	55                   	push   ebp
c00121da:	e8 ab 88 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c00121df:	83 c4 10             	add    esp,0x10
c00121e2:	85 c0                	test   eax,eax
c00121e4:	0f 85 a7 06 00 00    	jne    c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121ea:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00121f2:	83 ec 0c             	sub    esp,0xc
c00121f5:	6a 34                	push   0x34
c00121f7:	e8 bd 55 ff ff       	call   c00077b9 <malloc>
c00121fc:	5b                   	pop    ebx
c00121fd:	89 c7                	mov    edi,eax
c00121ff:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012203:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012206:	53                   	push   ebx
c0012207:	57                   	push   edi
c0012208:	6a 00                	push   0x0
c001220a:	6a 34                	push   0x34
c001220c:	55                   	push   ebp
c001220d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012210:	83 c4 20             	add    esp,0x20
c0012213:	85 c0                	test   eax,eax
c0012215:	0f 85 76 06 00 00    	jne    c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001221b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012221:	0f 85 6a 06 00 00    	jne    c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012227:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001222a:	85 c0                	test   eax,eax
c001222c:	0f 84 5f 06 00 00    	je     c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012232:	31 d2                	xor    edx,edx
c0012234:	51                   	push   ecx
c0012235:	52                   	push   edx
c0012236:	50                   	push   eax
c0012237:	55                   	push   ebp
c0012238:	e8 0b 89 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c001223d:	83 c4 10             	add    esp,0x10
c0012240:	85 c0                	test   eax,eax
c0012242:	0f 85 49 06 00 00    	jne    c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012248:	83 ec 0c             	sub    esp,0xc
c001224b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001224e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012252:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012256:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001225a:	0f af c2             	imul   eax,edx
c001225d:	50                   	push   eax
c001225e:	e8 56 55 ff ff       	call   c00077b9 <malloc>
c0012263:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012266:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001226a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001226d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012271:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012275:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012279:	0f af c2             	imul   eax,edx
c001227c:	99                   	cdq    
c001227d:	52                   	push   edx
c001227e:	50                   	push   eax
c001227f:	55                   	push   ebp
c0012280:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012283:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012286:	83 c4 20             	add    esp,0x20
c0012289:	85 c0                	test   eax,eax
c001228b:	0f 84 00 06 00 00    	je     c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012291:	52                   	push   edx
c0012292:	31 d2                	xor    edx,edx
c0012294:	52                   	push   edx
c0012295:	50                   	push   eax
c0012296:	55                   	push   ebp
c0012297:	e8 ac 88 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c001229c:	83 c4 10             	add    esp,0x10
c001229f:	85 c0                	test   eax,eax
c00122a1:	0f 85 ea 05 00 00    	jne    c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122a7:	83 ec 0c             	sub    esp,0xc
c00122aa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00122ae:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00122b2:	31 f6                	xor    esi,esi
c00122b4:	0f af c2             	imul   eax,edx
c00122b7:	50                   	push   eax
c00122b8:	e8 fc 54 ff ff       	call   c00077b9 <malloc>
c00122bd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00122c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00122c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00122cb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00122cf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00122d3:	0f af c2             	imul   eax,edx
c00122d6:	99                   	cdq    
c00122d7:	52                   	push   edx
c00122d8:	50                   	push   eax
c00122d9:	55                   	push   ebp
c00122da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00122dd:	83 c4 20             	add    esp,0x20
c00122e0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00122e4:	0f 86 8a 00 00 00    	jbe    c0012374 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00122ea:	0f b7 de             	movzx  ebx,si
c00122ed:	c1 e3 05             	shl    ebx,0x5
c00122f0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00122f4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00122f7:	75 75                	jne    c001236e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00122f9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00122fc:	31 d2                	xor    edx,edx
c00122fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012302:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012305:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012309:	50                   	push   eax
c001230a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001230d:	52                   	push   edx
c001230e:	50                   	push   eax
c001230f:	55                   	push   ebp
c0012310:	e8 33 88 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	85 c0                	test   eax,eax
c001231a:	0f 85 71 05 00 00    	jne    c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012320:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012327:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001232a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001232e:	31 d2                	xor    edx,edx
c0012330:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012334:	83 ec 0c             	sub    esp,0xc
c0012337:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001233b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012342:	50                   	push   eax
c0012343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001234b:	52                   	push   edx
c001234c:	50                   	push   eax
c001234d:	55                   	push   ebp
c001234e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012351:	83 c4 1c             	add    esp,0x1c
c0012354:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012357:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001235a:	50                   	push   eax
c001235b:	6a 00                	push   0x0
c001235d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012361:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012365:	50                   	push   eax
c0012366:	e8 65 e1 fe ff       	call   c00004d0 <memset>
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	46                   	inc    esi
c001236f:	e9 6c ff ff ff       	jmp    c00122e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012374:	53                   	push   ebx
c0012375:	31 db                	xor    ebx,ebx
c0012377:	68 00 01 00 00       	push   0x100
c001237c:	6a 00                	push   0x0
c001237e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012382:	50                   	push   eax
c0012383:	e8 48 e1 fe ff       	call   c00004d0 <memset>
c0012388:	83 c4 0c             	add    esp,0xc
c001238b:	68 00 01 00 00       	push   0x100
c0012390:	6a 00                	push   0x0
c0012392:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012399:	50                   	push   eax
c001239a:	e8 31 e1 fe ff       	call   c00004d0 <memset>
c001239f:	83 c4 10             	add    esp,0x10
c00123a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123aa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00123b2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00123ba:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123c2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00123ca:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00123ce:	0f 86 30 01 00 00    	jbe    c0012504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00123d4:	0f b7 f3             	movzx  esi,bx
c00123d7:	6b f6 28             	imul   esi,esi,0x28
c00123da:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00123de:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00123e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123e5:	52                   	push   edx
c00123e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00123ea:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00123ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00123f0:	6b d2 28             	imul   edx,edx,0x28
c00123f3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00123f7:	31 d2                	xor    edx,edx
c00123f9:	52                   	push   edx
c00123fa:	50                   	push   eax
c00123fb:	55                   	push   ebp
c00123fc:	e8 47 87 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012401:	83 c4 0c             	add    esp,0xc
c0012404:	6a 20                	push   0x20
c0012406:	6a 00                	push   0x0
c0012408:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001240f:	51                   	push   ecx
c0012410:	e8 bb e0 fe ff       	call   c00004d0 <memset>
c0012415:	59                   	pop    ecx
c0012416:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012419:	8d 54 24 58          	lea    edx,[esp+0x58]
c001241d:	52                   	push   edx
c001241e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012425:	51                   	push   ecx
c0012426:	6a 00                	push   0x0
c0012428:	6a 1f                	push   0x1f
c001242a:	55                   	push   ebp
c001242b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001242e:	83 c4 1c             	add    esp,0x1c
c0012431:	6a 09                	push   0x9
c0012433:	68 fa e3 01 c0       	push   0xc001e3fa
c0012438:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001243f:	51                   	push   ecx
c0012440:	e8 4b df fe ff       	call   c0000390 <memcmp>
c0012445:	83 c4 10             	add    esp,0x10
c0012448:	85 c0                	test   eax,eax
c001244a:	75 21                	jne    c001246d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001244c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012454:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012458:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001245c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001245f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012466:	89 d0                	mov    eax,edx
c0012468:	40                   	inc    eax
c0012469:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001246d:	50                   	push   eax
c001246e:	6a 09                	push   0x9
c0012470:	68 04 e4 01 c0       	push   0xc001e404
c0012475:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001247c:	50                   	push   eax
c001247d:	e8 0e df fe ff       	call   c0000390 <memcmp>
c0012482:	83 c4 10             	add    esp,0x10
c0012485:	85 c0                	test   eax,eax
c0012487:	75 21                	jne    c00124aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001248d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012491:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012495:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012499:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001249c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00124a3:	89 d0                	mov    eax,edx
c00124a5:	40                   	inc    eax
c00124a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124aa:	50                   	push   eax
c00124ab:	50                   	push   eax
c00124ac:	68 d0 e3 01 c0       	push   0xc001e3d0
c00124b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00124b8:	50                   	push   eax
c00124b9:	e8 22 e2 fe ff       	call   c00006e0 <strcmp>
c00124be:	83 c4 10             	add    esp,0x10
c00124c1:	85 c0                	test   eax,eax
c00124c3:	75 0f                	jne    c00124d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00124c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124d4:	50                   	push   eax
c00124d5:	50                   	push   eax
c00124d6:	68 d8 e3 01 c0       	push   0xc001e3d8
c00124db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00124e2:	50                   	push   eax
c00124e3:	e8 f8 e1 fe ff       	call   c00006e0 <strcmp>
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	85 c0                	test   eax,eax
c00124ed:	75 0f                	jne    c00124fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00124ef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00124f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124fa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00124fe:	43                   	inc    ebx
c00124ff:	e9 c6 fe ff ff       	jmp    c00123ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012504:	31 d2                	xor    edx,edx
c0012506:	50                   	push   eax
c0012507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001250b:	52                   	push   edx
c001250c:	50                   	push   eax
c001250d:	55                   	push   ebp
c001250e:	e8 35 86 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012513:	58                   	pop    eax
c0012514:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012518:	e8 9c 52 ff ff       	call   c00077b9 <malloc>
c001251d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012520:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012524:	31 d2                	xor    edx,edx
c0012526:	58                   	pop    eax
c0012527:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001252b:	53                   	push   ebx
c001252c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012530:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012534:	52                   	push   edx
c0012535:	50                   	push   eax
c0012536:	55                   	push   ebp
c0012537:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001253a:	83 c4 14             	add    esp,0x14
c001253d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012541:	e8 73 52 ff ff       	call   c00077b9 <malloc>
c0012546:	31 d2                	xor    edx,edx
c0012548:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001254c:	83 c4 0c             	add    esp,0xc
c001254f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012553:	52                   	push   edx
c0012554:	50                   	push   eax
c0012555:	55                   	push   ebp
c0012556:	e8 ed 85 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c001255b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001255e:	31 d2                	xor    edx,edx
c0012560:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012563:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012567:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001256b:	52                   	push   edx
c001256c:	50                   	push   eax
c001256d:	55                   	push   ebp
c001256e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012571:	83 c4 20             	add    esp,0x20
c0012574:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001257c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012580:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012584:	0f 84 0b 03 00 00    	je     c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001258a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012591:	31 d2                	xor    edx,edx
c0012593:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012597:	c1 e8 03             	shr    eax,0x3
c001259a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001259e:	51                   	push   ecx
c001259f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125a3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00125a7:	52                   	push   edx
c00125a8:	50                   	push   eax
c00125a9:	55                   	push   ebp
c00125aa:	e8 99 85 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00125af:	5b                   	pop    ebx
c00125b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125b4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00125bb:	e8 f9 51 ff ff       	call   c00077b9 <malloc>
c00125c0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00125c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125c7:	31 d2                	xor    edx,edx
c00125c9:	5e                   	pop    esi
c00125ca:	8d 44 24 58          	lea    eax,[esp+0x58]
c00125ce:	50                   	push   eax
c00125cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125d7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00125de:	52                   	push   edx
c00125df:	50                   	push   eax
c00125e0:	55                   	push   ebp
c00125e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125e4:	83 c4 20             	add    esp,0x20
c00125e7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00125ef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125f3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00125f7:	0f 8d 7c 02 00 00    	jge    c0012879 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00125fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012605:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001260a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001260d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012615:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012619:	89 d8                	mov    eax,ebx
c001261b:	c1 e8 08             	shr    eax,0x8
c001261e:	89 c6                	mov    esi,eax
c0012620:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012624:	c1 e6 04             	shl    esi,0x4
c0012627:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001262b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001262e:	85 d2                	test   edx,edx
c0012630:	0f 85 bf 00 00 00    	jne    c00126f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012636:	83 ec 0c             	sub    esp,0xc
c0012639:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001263d:	03 06                	add    eax,DWORD PTR [esi]
c001263f:	50                   	push   eax
c0012640:	e8 4b f8 ff ff       	call   c0011e90 <Thr::getAddressOfKernelSymbol(char const*)>
c0012645:	83 c4 10             	add    esp,0x10
c0012648:	89 c2                	mov    edx,eax
c001264a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001264f:	85 c0                	test   eax,eax
c0012651:	0f 85 9e 00 00 00    	jne    c00126f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012657:	83 ec 0c             	sub    esp,0xc
c001265a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001265e:	03 06                	add    eax,DWORD PTR [esi]
c0012660:	50                   	push   eax
c0012661:	e8 22 dc ff ff       	call   c0010288 <KeResolveCompatibilitySymbol(char*)>
c0012666:	83 c4 10             	add    esp,0x10
c0012669:	89 c2                	mov    edx,eax
c001266b:	85 c0                	test   eax,eax
c001266d:	0f 85 82 00 00 00    	jne    c00126f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012673:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012677:	50                   	push   eax
c0012678:	50                   	push   eax
c0012679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001267d:	03 06                	add    eax,DWORD PTR [esi]
c001267f:	50                   	push   eax
c0012680:	68 0e e4 01 c0       	push   0xc001e40e
c0012685:	e8 ca 7d ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001268a:	58                   	pop    eax
c001268b:	5a                   	pop    edx
c001268c:	68 28 e4 01 c0       	push   0xc001e428
c0012691:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012698:	50                   	push   eax
c0012699:	e8 62 df fe ff       	call   c0000600 <strcpy>
c001269e:	59                   	pop    ecx
c001269f:	58                   	pop    eax
c00126a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126a4:	03 06                	add    eax,DWORD PTR [esi]
c00126a6:	50                   	push   eax
c00126a7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126ae:	50                   	push   eax
c00126af:	e8 0c e1 fe ff       	call   c00007c0 <strcat>
c00126b4:	58                   	pop    eax
c00126b5:	5a                   	pop    edx
c00126b6:	68 be e4 01 c0       	push   0xc001e4be
c00126bb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126c2:	50                   	push   eax
c00126c3:	e8 f8 e0 fe ff       	call   c00007c0 <strcat>
c00126c8:	83 c4 10             	add    esp,0x10
c00126cb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00126d0:	0f 84 5d 01 00 00    	je     c0012833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00126d6:	83 ec 0c             	sub    esp,0xc
c00126d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126e0:	50                   	push   eax
c00126e1:	e8 51 da ff ff       	call   c0010137 <KePanic(char const*)>
c00126e6:	83 c4 10             	add    esp,0x10
c00126e9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00126ed:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00126f1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00126f5:	80 fb 01             	cmp    bl,0x1
c00126f8:	0f 85 88 00 00 00    	jne    c0012786 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00126fe:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012705:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012709:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001270d:	01 ce                	add    esi,ecx
c001270f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012715:	0f 94 c0             	sete   al
c0012718:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001271e:	0f 94 c3             	sete   bl
c0012721:	09 c3                	or     ebx,eax
c0012723:	8b 06                	mov    eax,DWORD PTR [esi]
c0012725:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001272a:	74 41                	je     c001276d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001272c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001272f:	84 db                	test   bl,bl
c0012731:	75 15                	jne    c0012748 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012733:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012737:	66 83 f8 0c          	cmp    ax,0xc
c001273b:	76 05                	jbe    c0012742 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001273d:	b8 0c 00 00 00       	mov    eax,0xc
c0012742:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012746:	76 37                	jbe    c001277f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012748:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001274c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012751:	0f 84 dc 00 00 00    	je     c0012833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	68 3f e4 01 c0       	push   0xc001e43f
c001275f:	e8 d3 d9 ff ff       	call   c0010137 <KePanic(char const*)>
c0012764:	83 c4 10             	add    esp,0x10
c0012767:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001276b:	eb 12                	jmp    c001277f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001276d:	01 c1                	add    ecx,eax
c001276f:	84 db                	test   bl,bl
c0012771:	75 0c                	jne    c001277f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012773:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012777:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001277b:	77 02                	ja     c001277f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001277d:	01 d1                	add    ecx,edx
c001277f:	89 0e                	mov    DWORD PTR [esi],ecx
c0012781:	e9 ea 00 00 00       	jmp    c0012870 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012786:	80 fb 02             	cmp    bl,0x2
c0012789:	75 7c                	jne    c0012807 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001278b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012792:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012796:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001279a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00127a0:	74 20                	je     c00127c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00127a2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00127a8:	74 18                	je     c00127c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00127aa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00127ae:	b9 0a 00 00 00       	mov    ecx,0xa
c00127b3:	66 83 f8 0e          	cmp    ax,0xe
c00127b7:	77 03                	ja     c00127bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00127b9:	8d 48 fc             	lea    ecx,[eax-0x4]
c00127bc:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00127c0:	76 1f                	jbe    c00127e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00127c2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00127c6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00127cb:	74 66                	je     c0012833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00127cd:	83 ec 0c             	sub    esp,0xc
c00127d0:	68 5b e4 01 c0       	push   0xc001e45b
c00127d5:	e8 5d d9 ff ff       	call   c0010137 <KePanic(char const*)>
c00127da:	83 c4 10             	add    esp,0x10
c00127dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00127e3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00127e8:	74 13                	je     c00127fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00127ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00127ee:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00127f5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00127f9:	01 c8                	add    eax,ecx
c00127fb:	eb 04                	jmp    c0012801 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00127fd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012801:	01 c2                	add    edx,eax
c0012803:	89 16                	mov    DWORD PTR [esi],edx
c0012805:	eb 69                	jmp    c0012870 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012807:	0f b6 db             	movzx  ebx,bl
c001280a:	50                   	push   eax
c001280b:	50                   	push   eax
c001280c:	53                   	push   ebx
c001280d:	68 77 e4 01 c0       	push   0xc001e477
c0012812:	e8 3d 7c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012817:	83 c4 10             	add    esp,0x10
c001281a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001281f:	74 12                	je     c0012833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012821:	83 ec 0c             	sub    esp,0xc
c0012824:	68 82 e4 01 c0       	push   0xc001e482
c0012829:	e8 09 d9 ff ff       	call   c0010137 <KePanic(char const*)>
c001282e:	83 c4 10             	add    esp,0x10
c0012831:	eb 3d                	jmp    c0012870 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012833:	83 ec 0c             	sub    esp,0xc
c0012836:	55                   	push   ebp
c0012837:	e8 ac 82 ff ff       	call   c000aae8 <File::close()>
c001283c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001283f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012842:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012845:	59                   	pop    ecx
c0012846:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001284a:	e8 7a 4f ff ff       	call   c00077c9 <free>
c001284f:	5b                   	pop    ebx
c0012850:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012854:	e8 70 4f ff ff       	call   c00077c9 <free>
c0012859:	89 3c 24             	mov    DWORD PTR [esp],edi
c001285c:	e8 68 4f ff ff       	call   c00077c9 <free>
c0012861:	5e                   	pop    esi
c0012862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012866:	e8 5e 4f ff ff       	call   c00077c9 <free>
c001286b:	83 c4 10             	add    esp,0x10
c001286e:	eb 21                	jmp    c0012891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012870:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012874:	e9 76 fd ff ff       	jmp    c00125ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012879:	83 ec 0c             	sub    esp,0xc
c001287c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012880:	e8 44 4f ff ff       	call   c00077c9 <free>
c0012885:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012889:	83 c4 10             	add    esp,0x10
c001288c:	e9 eb fc ff ff       	jmp    c001257c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012891:	31 c0                	xor    eax,eax
c0012893:	eb 33                	jmp    c00128c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012895:	83 ec 0c             	sub    esp,0xc
c0012898:	55                   	push   ebp
c0012899:	e8 4a 82 ff ff       	call   c000aae8 <File::close()>
c001289e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00128a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00128a7:	58                   	pop    eax
c00128a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128ac:	e8 18 4f ff ff       	call   c00077c9 <free>
c00128b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128b4:	e8 10 4f ff ff       	call   c00077c9 <free>
c00128b9:	5a                   	pop    edx
c00128ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128be:	e8 06 4f ff ff       	call   c00077c9 <free>
c00128c3:	83 c4 10             	add    esp,0x10
c00128c6:	b0 01                	mov    al,0x1
c00128c8:	81 c4 5c 03 00 00    	add    esp,0x35c
c00128ce:	5b                   	pop    ebx
c00128cf:	5e                   	pop    esi
c00128d0:	5f                   	pop    edi
c00128d1:	5d                   	pop    ebp
c00128d2:	c3                   	ret    

c00128d3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00128d3:	56                   	push   esi
c00128d4:	31 d2                	xor    edx,edx
c00128d6:	53                   	push   ebx
c00128d7:	8b 1d 80 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f80
c00128dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00128e1:	39 d3                	cmp    ebx,edx
c00128e3:	7e 1b                	jle    c0012900 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00128e5:	8b 04 95 a0 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdce60]
c00128ec:	39 c8                	cmp    eax,ecx
c00128ee:	77 0d                	ja     c00128fd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00128f0:	8b 34 95 a0 2f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdd060]
c00128f7:	01 c6                	add    esi,eax
c00128f9:	39 ce                	cmp    esi,ecx
c00128fb:	77 05                	ja     c0012902 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00128fd:	42                   	inc    edx
c00128fe:	eb e1                	jmp    c00128e1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012900:	31 c0                	xor    eax,eax
c0012902:	5b                   	pop    ebx
c0012903:	5e                   	pop    esi
c0012904:	c3                   	ret    

c0012905 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012905:	53                   	push   ebx
c0012906:	31 c0                	xor    eax,eax
c0012908:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001290c:	8b 1d 80 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f80
c0012912:	39 c3                	cmp    ebx,eax
c0012914:	7e 22                	jle    c0012938 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012916:	8b 14 85 a0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce60]
c001291d:	39 ca                	cmp    edx,ecx
c001291f:	77 14                	ja     c0012935 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012921:	03 14 85 a0 2f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdd060]
c0012928:	39 ca                	cmp    edx,ecx
c001292a:	76 09                	jbe    c0012935 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001292c:	8b 04 85 a0 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc60]
c0012933:	eb 05                	jmp    c001293a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012935:	40                   	inc    eax
c0012936:	eb da                	jmp    c0012912 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012938:	31 c0                	xor    eax,eax
c001293a:	5b                   	pop    ebx
c001293b:	c3                   	ret    

c001293c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001293c:	53                   	push   ebx
c001293d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012941:	53                   	push   ebx
c0012942:	e8 8c ff ff ff       	call   c00128d3 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012947:	5a                   	pop    edx
c0012948:	31 d2                	xor    edx,edx
c001294a:	85 c0                	test   eax,eax
c001294c:	74 04                	je     c0012952 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001294e:	89 da                	mov    edx,ebx
c0012950:	29 c2                	sub    edx,eax
c0012952:	89 d0                	mov    eax,edx
c0012954:	5b                   	pop    ebx
c0012955:	c3                   	ret    

c0012956 <Thr::loadDLL(char const*, bool)>:
c0012956:	55                   	push   ebp
c0012957:	57                   	push   edi
c0012958:	56                   	push   esi
c0012959:	53                   	push   ebx
c001295a:	81 ec 34 01 00 00    	sub    esp,0x134
c0012960:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012967:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001296e:	56                   	push   esi
c001296f:	68 9a e4 01 c0       	push   0xc001e49a
c0012974:	e8 db 7a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012979:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012980:	e8 34 4e ff ff       	call   c00077b9 <malloc>
c0012985:	83 c4 0c             	add    esp,0xc
c0012988:	89 c3                	mov    ebx,eax
c001298a:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c0012990:	56                   	push   esi
c0012991:	50                   	push   eax
c0012992:	e8 33 80 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0012997:	83 c4 10             	add    esp,0x10
c001299a:	85 db                	test   ebx,ebx
c001299c:	75 3c                	jne    c00129da <Thr::loadDLL(char const*, bool)+0x84>
c001299e:	89 f8                	mov    eax,edi
c00129a0:	84 c0                	test   al,al
c00129a2:	0f 84 d2 01 00 00    	je     c0012b7a <Thr::loadDLL(char const*, bool)+0x224>
c00129a8:	55                   	push   ebp
c00129a9:	55                   	push   ebp
c00129aa:	68 ab e4 01 c0       	push   0xc001e4ab
c00129af:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00129b3:	55                   	push   ebp
c00129b4:	e8 47 dc fe ff       	call   c0000600 <strcpy>
c00129b9:	58                   	pop    eax
c00129ba:	5a                   	pop    edx
c00129bb:	56                   	push   esi
c00129bc:	55                   	push   ebp
c00129bd:	e8 fe dd fe ff       	call   c00007c0 <strcat>
c00129c2:	59                   	pop    ecx
c00129c3:	58                   	pop    eax
c00129c4:	68 be e4 01 c0       	push   0xc001e4be
c00129c9:	55                   	push   ebp
c00129ca:	e8 f1 dd fe ff       	call   c00007c0 <strcat>
c00129cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00129d2:	e8 60 d7 ff ff       	call   c0010137 <KePanic(char const*)>
c00129d7:	83 c4 10             	add    esp,0x10
c00129da:	51                   	push   ecx
c00129db:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00129df:	50                   	push   eax
c00129e0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00129e4:	50                   	push   eax
c00129e5:	53                   	push   ebx
c00129e6:	e8 4b 83 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c00129eb:	83 c4 10             	add    esp,0x10
c00129ee:	85 db                	test   ebx,ebx
c00129f0:	74 0c                	je     c00129fe <Thr::loadDLL(char const*, bool)+0xa8>
c00129f2:	83 ec 0c             	sub    esp,0xc
c00129f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129f7:	53                   	push   ebx
c00129f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012a03:	75 0a                	jne    c0012a0f <Thr::loadDLL(char const*, bool)+0xb9>
c0012a05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a09:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012a0d:	75 3c                	jne    c0012a4b <Thr::loadDLL(char const*, bool)+0xf5>
c0012a0f:	89 f8                	mov    eax,edi
c0012a11:	84 c0                	test   al,al
c0012a13:	0f 84 49 01 00 00    	je     c0012b62 <Thr::loadDLL(char const*, bool)+0x20c>
c0012a19:	51                   	push   ecx
c0012a1a:	51                   	push   ecx
c0012a1b:	68 ab e4 01 c0       	push   0xc001e4ab
c0012a20:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012a24:	53                   	push   ebx
c0012a25:	e8 d6 db fe ff       	call   c0000600 <strcpy>
c0012a2a:	5d                   	pop    ebp
c0012a2b:	58                   	pop    eax
c0012a2c:	56                   	push   esi
c0012a2d:	53                   	push   ebx
c0012a2e:	e8 8d dd fe ff       	call   c00007c0 <strcat>
c0012a33:	58                   	pop    eax
c0012a34:	5a                   	pop    edx
c0012a35:	68 be e4 01 c0       	push   0xc001e4be
c0012a3a:	53                   	push   ebx
c0012a3b:	e8 80 dd fe ff       	call   c00007c0 <strcat>
c0012a40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a43:	e8 ef d6 ff ff       	call   c0010137 <KePanic(char const*)>
c0012a48:	83 c4 10             	add    esp,0x10
c0012a4b:	52                   	push   edx
c0012a4c:	6a 03                	push   0x3
c0012a4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a52:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012a56:	05 ff 0f 00 00       	add    eax,0xfff
c0012a5b:	83 d2 00             	adc    edx,0x0
c0012a5e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012a62:	50                   	push   eax
c0012a63:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c0012a69:	e8 2c 6f ff ff       	call   c000999a <VAS::allocatePages(int, int)>
c0012a6e:	59                   	pop    ecx
c0012a6f:	89 c3                	mov    ebx,eax
c0012a71:	5d                   	pop    ebp
c0012a72:	50                   	push   eax
c0012a73:	68 76 d2 01 c0       	push   0xc001d276
c0012a78:	e8 d7 79 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012a7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a80:	e8 bb da fe ff       	call   c0000540 <strlen>
c0012a85:	8b 2d 80 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f80
c0012a8b:	40                   	inc    eax
c0012a8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a8f:	e8 25 4d ff ff       	call   c00077b9 <malloc>
c0012a94:	89 04 ad a0 33 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcc60],eax
c0012a9b:	58                   	pop    eax
c0012a9c:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c0012aa1:	5a                   	pop    edx
c0012aa2:	56                   	push   esi
c0012aa3:	ff 34 85 a0 33 02 c0 	push   DWORD PTR [eax*4-0x3ffdcc60]
c0012aaa:	e8 51 db fe ff       	call   c0000600 <strcpy>
c0012aaf:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c0012ab4:	8d 50 01             	lea    edx,[eax+0x1]
c0012ab7:	89 1c 85 a0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce60],ebx
c0012abe:	89 15 80 2f 02 c0    	mov    DWORD PTR ds:0xc0022f80,edx
c0012ac4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012ac8:	83 c4 0c             	add    esp,0xc
c0012acb:	89 14 85 a0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd060],edx
c0012ad2:	6a 01                	push   0x1
c0012ad4:	53                   	push   ebx
c0012ad5:	56                   	push   esi
c0012ad6:	e8 c2 f6 ff ff       	call   c001219d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012adb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012adf:	83 c4 10             	add    esp,0x10
c0012ae2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ae7:	0f 85 89 00 00 00    	jne    c0012b76 <Thr::loadDLL(char const*, bool)+0x220>
c0012aed:	89 f8                	mov    eax,edi
c0012aef:	84 c0                	test   al,al
c0012af1:	74 73                	je     c0012b66 <Thr::loadDLL(char const*, bool)+0x210>
c0012af3:	83 ec 0c             	sub    esp,0xc
c0012af6:	68 c0 e4 01 c0       	push   0xc001e4c0
c0012afb:	e8 37 d6 ff ff       	call   c0010137 <KePanic(char const*)>
c0012b00:	83 c4 10             	add    esp,0x10
c0012b03:	eb 61                	jmp    c0012b66 <Thr::loadDLL(char const*, bool)+0x210>
c0012b05:	50                   	push   eax
c0012b06:	50                   	push   eax
c0012b07:	89 e8                	mov    eax,ebp
c0012b09:	c1 e0 0c             	shl    eax,0xc
c0012b0c:	01 d8                	add    eax,ebx
c0012b0e:	50                   	push   eax
c0012b0f:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c0012b15:	e8 f8 69 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0012b1a:	83 c4 10             	add    esp,0x10
c0012b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b1f:	a8 60                	test   al,0x60
c0012b21:	75 11                	jne    c0012b34 <Thr::loadDLL(char const*, bool)+0x1de>
c0012b23:	83 ec 0c             	sub    esp,0xc
c0012b26:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b2b:	50                   	push   eax
c0012b2c:	e8 02 4f ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012b31:	83 c4 10             	add    esp,0x10
c0012b34:	45                   	inc    ebp
c0012b35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b3d:	05 ff 0f 00 00       	add    eax,0xfff
c0012b42:	bf 00 00 00 00       	mov    edi,0x0
c0012b47:	83 d2 00             	adc    edx,0x0
c0012b4a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012b4e:	c1 ea 0c             	shr    edx,0xc
c0012b51:	39 c5                	cmp    ebp,eax
c0012b53:	89 d1                	mov    ecx,edx
c0012b55:	89 f8                	mov    eax,edi
c0012b57:	19 c8                	sbb    eax,ecx
c0012b59:	72 aa                	jb     c0012b05 <Thr::loadDLL(char const*, bool)+0x1af>
c0012b5b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012b60:	75 18                	jne    c0012b7a <Thr::loadDLL(char const*, bool)+0x224>
c0012b62:	31 db                	xor    ebx,ebx
c0012b64:	eb 14                	jmp    c0012b7a <Thr::loadDLL(char const*, bool)+0x224>
c0012b66:	83 ec 0c             	sub    esp,0xc
c0012b69:	68 df e4 01 c0       	push   0xc001e4df
c0012b6e:	e8 c4 d5 ff ff       	call   c0010137 <KePanic(char const*)>
c0012b73:	83 c4 10             	add    esp,0x10
c0012b76:	31 ed                	xor    ebp,ebp
c0012b78:	eb bb                	jmp    c0012b35 <Thr::loadDLL(char const*, bool)+0x1df>
c0012b7a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b80:	89 d8                	mov    eax,ebx
c0012b82:	5b                   	pop    ebx
c0012b83:	5e                   	pop    esi
c0012b84:	5f                   	pop    edi
c0012b85:	5d                   	pop    ebp
c0012b86:	c3                   	ret    

c0012b87 <Thr::executeDLL(unsigned long, void*)>:
c0012b87:	56                   	push   esi
c0012b88:	53                   	push   ebx
c0012b89:	52                   	push   edx
c0012b8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b92:	85 db                	test   ebx,ebx
c0012b94:	75 10                	jne    c0012ba6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012b96:	83 ec 0c             	sub    esp,0xc
c0012b99:	68 fb e4 01 c0       	push   0xc001e4fb
c0012b9e:	e8 94 d5 ff ff       	call   c0010137 <KePanic(char const*)>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	50                   	push   eax
c0012ba7:	50                   	push   eax
c0012ba8:	53                   	push   ebx
c0012ba9:	68 25 e5 01 c0       	push   0xc001e525
c0012bae:	e8 a1 78 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012bb3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012bb7:	89 d8                	mov    eax,ebx
c0012bb9:	83 c4 14             	add    esp,0x14
c0012bbc:	5b                   	pop    ebx
c0012bbd:	5e                   	pop    esi
c0012bbe:	ff e0                	jmp    eax

c0012bc0 <userModeEntryPoint(void*)>:
c0012bc0:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0012bc5:	48                   	dec    eax
c0012bc6:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0012bcb:	75 03                	jne    c0012bd0 <userModeEntryPoint(void*)+0x10>
c0012bcd:	fb                   	sti    
c0012bce:	66 90                	xchg   ax,ax
c0012bd0:	fb                   	sti    
c0012bd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bd6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012bd9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012bdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012be3:	e9 57 d6 fe ff       	jmp    c000023f <goToUsermode>

c0012be8 <changeTSS>:
c0012be8:	83 ec 14             	sub    esp,0x14
c0012beb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bf0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012bf3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012bf8:	c1 e2 15             	shl    edx,0x15
c0012bfb:	29 d0                	sub    eax,edx
c0012bfd:	50                   	push   eax
c0012bfe:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0012c03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c09:	05 7c 11 00 00       	add    eax,0x117c
c0012c0e:	50                   	push   eax
c0012c0f:	e8 40 5f ff ff       	call   c0008b54 <TSS::setESP(unsigned long)>
c0012c14:	83 c4 1c             	add    esp,0x1c
c0012c17:	c3                   	ret    

c0012c18 <switchToThread(ThreadControlBlock*)>:
c0012c18:	57                   	push   edi
c0012c19:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0012c1e:	56                   	push   esi
c0012c1f:	85 c0                	test   eax,eax
c0012c21:	53                   	push   ebx
c0012c22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c26:	0f 85 90 00 00 00    	jne    c0012cbc <switchToThread(ThreadControlBlock*)+0xa4>
c0012c2c:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012c2f:	80 fa ff             	cmp    dl,0xff
c0012c32:	0f 84 80 00 00 00    	je     c0012cb8 <switchToThread(ThreadControlBlock*)+0xa0>
c0012c38:	81 e2 ff 00 00 00    	and    edx,0xff
c0012c3e:	b8 00 04 00 00       	mov    eax,0x400
c0012c43:	29 d0                	sub    eax,edx
c0012c45:	d1 f8                	sar    eax,1
c0012c47:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012c4a:	66 90                	xchg   ax,ax
c0012c4c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012c4f:	e8 e5 25 00 00       	call   c0015239 <HalQueryPerformanceCounter()>
c0012c54:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0012c59:	89 15 8c 37 02 c0    	mov    DWORD PTR ds:0xc002378c,edx
c0012c5f:	89 c6                	mov    esi,eax
c0012c61:	89 d7                	mov    edi,edx
c0012c63:	2b 35 78 37 02 c0    	sub    esi,DWORD PTR ds:0xc0023778
c0012c69:	a3 78 37 02 c0       	mov    ds:0xc0023778,eax
c0012c6e:	1b 3d 7c 37 02 c0    	sbb    edi,DWORD PTR ds:0xc002377c
c0012c74:	89 35 80 37 02 c0    	mov    DWORD PTR ds:0xc0023780,esi
c0012c7a:	89 3d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,edi
c0012c80:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012c86:	89 15 7c 37 02 c0    	mov    DWORD PTR ds:0xc002377c,edx
c0012c8c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012c8f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012c92:	01 c6                	add    esi,eax
c0012c94:	11 d7                	adc    edi,edx
c0012c96:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012c99:	83 ec 0c             	sub    esp,0xc
c0012c9c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012c9f:	53                   	push   ebx
c0012ca0:	e8 d2 d5 fe ff       	call   c0000277 <switchToThreadASM>
c0012ca5:	0f 20 c0             	mov    eax,cr0
c0012ca8:	83 c8 08             	or     eax,0x8
c0012cab:	0f 22 c0             	mov    cr0,eax
c0012cae:	83 c4 10             	add    esp,0x10
c0012cb1:	5b                   	pop    ebx
c0012cb2:	5e                   	pop    esi
c0012cb3:	5f                   	pop    edi
c0012cb4:	c3                   	ret    
c0012cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0012cb8:	31 c0                	xor    eax,eax
c0012cba:	eb 90                	jmp    c0012c4c <switchToThread(ThreadControlBlock*)+0x34>
c0012cbc:	5b                   	pop    ebx
c0012cbd:	c7 05 40 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x1
c0012cc7:	5e                   	pop    esi
c0012cc8:	5f                   	pop    edi
c0012cc9:	c3                   	ret    
c0012cca:	66 90                	xchg   ax,ax

c0012ccc <Process::addArgs(char**)>:
c0012ccc:	57                   	push   edi
c0012ccd:	56                   	push   esi
c0012cce:	53                   	push   ebx
c0012ccf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012cd3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012cd7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012ce1:	85 ff                	test   edi,edi
c0012ce3:	74 43                	je     c0012d28 <Process::addArgs(char**)+0x5c>
c0012ce5:	8b 07                	mov    eax,DWORD PTR [edi]
c0012ce7:	85 c0                	test   eax,eax
c0012ce9:	74 3d                	je     c0012d28 <Process::addArgs(char**)+0x5c>
c0012ceb:	31 db                	xor    ebx,ebx
c0012ced:	8d 76 00             	lea    esi,[esi+0x0]
c0012cf0:	83 ec 0c             	sub    esp,0xc
c0012cf3:	50                   	push   eax
c0012cf4:	e8 47 d8 fe ff       	call   c0000540 <strlen>
c0012cf9:	40                   	inc    eax
c0012cfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0012cfd:	e8 b7 4a ff ff       	call   c00077b9 <malloc>
c0012d02:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012d09:	5a                   	pop    edx
c0012d0a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012d0d:	59                   	pop    ecx
c0012d0e:	43                   	inc    ebx
c0012d0f:	52                   	push   edx
c0012d10:	50                   	push   eax
c0012d11:	e8 ea d8 fe ff       	call   c0000600 <strcpy>
c0012d16:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012d1c:	83 c4 10             	add    esp,0x10
c0012d1f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012d22:	85 c0                	test   eax,eax
c0012d24:	75 ca                	jne    c0012cf0 <Process::addArgs(char**)+0x24>
c0012d26:	66 90                	xchg   ax,ax
c0012d28:	5b                   	pop    ebx
c0012d29:	5e                   	pop    esi
c0012d2a:	5f                   	pop    edi
c0012d2b:	c3                   	ret    

c0012d2c <Process::Process(char const*, Process*, char**)>:
c0012d2c:	56                   	push   esi
c0012d2d:	53                   	push   ebx
c0012d2e:	83 ec 14             	sub    esp,0x14
c0012d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d35:	05 0c 02 00 00       	add    eax,0x20c
c0012d3a:	bb 07 00 00 00       	mov    ebx,0x7
c0012d3f:	89 c6                	mov    esi,eax
c0012d41:	8d 76 00             	lea    esi,[esi+0x0]
c0012d44:	85 db                	test   ebx,ebx
c0012d46:	78 14                	js     c0012d5c <Process::Process(char const*, Process*, char**)+0x30>
c0012d48:	83 ec 0c             	sub    esp,0xc
c0012d4b:	56                   	push   esi
c0012d4c:	e8 fb 97 00 00       	call   c001c54c <ThreadControlBlock::ThreadControlBlock()>
c0012d51:	83 c4 10             	add    esp,0x10
c0012d54:	83 c6 5f             	add    esi,0x5f
c0012d57:	4b                   	dec    ebx
c0012d58:	eb ea                	jmp    c0012d44 <Process::Process(char const*, Process*, char**)+0x18>
c0012d5a:	66 90                	xchg   ax,ax
c0012d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d60:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012d67:	83 ec 0c             	sub    esp,0xc
c0012d6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d6e:	e8 b9 d1 ff ff       	call   c000ff2c <Krnl::newProcessEnv(Process*)>
c0012d73:	83 c4 10             	add    esp,0x10
c0012d76:	89 c2                	mov    edx,eax
c0012d78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d7c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d86:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012d8f:	a1 68 f4 01 c0       	mov    eax,ds:0xc001f468
c0012d94:	8d 50 01             	lea    edx,[eax+0x1]
c0012d97:	89 15 68 f4 01 c0    	mov    DWORD PTR ds:0xc001f468,edx
c0012d9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012da1:	89 02                	mov    DWORD PTR [edx],eax
c0012da3:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012dab:	83 ec 0c             	sub    esp,0xc
c0012dae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012db2:	e8 02 4a ff ff       	call   c00077b9 <malloc>
c0012db7:	83 c4 10             	add    esp,0x10
c0012dba:	89 c3                	mov    ebx,eax
c0012dbc:	83 ec 08             	sub    esp,0x8
c0012dbf:	6a 00                	push   0x0
c0012dc1:	53                   	push   ebx
c0012dc2:	e8 7d 6f ff ff       	call   c0009d44 <VAS::VAS(bool)>
c0012dc7:	83 c4 10             	add    esp,0x10
c0012dca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dce:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dd8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012de6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012dea:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012df0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012df4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012dfa:	85 c0                	test   eax,eax
c0012dfc:	74 42                	je     c0012e40 <Process::Process(char const*, Process*, char**)+0x114>
c0012dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e02:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e08:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e12:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e1c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e22:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e2c:	05 0c 01 00 00       	add    eax,0x10c
c0012e31:	83 ec 08             	sub    esp,0x8
c0012e34:	52                   	push   edx
c0012e35:	50                   	push   eax
c0012e36:	e8 c5 d7 fe ff       	call   c0000600 <strcpy>
c0012e3b:	83 c4 10             	add    esp,0x10
c0012e3e:	eb 64                	jmp    c0012ea4 <Process::Process(char const*, Process*, char**)+0x178>
c0012e40:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012e48:	83 ec 0c             	sub    esp,0xc
c0012e4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e4f:	e8 65 49 ff ff       	call   c00077b9 <malloc>
c0012e54:	83 c4 10             	add    esp,0x10
c0012e57:	89 c3                	mov    ebx,eax
c0012e59:	83 ec 08             	sub    esp,0x8
c0012e5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e60:	53                   	push   ebx
c0012e61:	e8 94 5a ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0012e66:	83 c4 10             	add    esp,0x10
c0012e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e6d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012e73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012e7d:	83 ec 0c             	sub    esp,0xc
c0012e80:	50                   	push   eax
c0012e81:	e8 14 53 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0012e86:	83 c4 10             	add    esp,0x10
c0012e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e8d:	05 0c 01 00 00       	add    eax,0x10c
c0012e92:	83 ec 08             	sub    esp,0x8
c0012e95:	68 44 e5 01 c0       	push   0xc001e544
c0012e9a:	50                   	push   eax
c0012e9b:	e8 60 d7 fe ff       	call   c0000600 <strcpy>
c0012ea0:	83 c4 10             	add    esp,0x10
c0012ea3:	90                   	nop
c0012ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ea8:	83 c0 0c             	add    eax,0xc
c0012eab:	83 ec 08             	sub    esp,0x8
c0012eae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eb2:	50                   	push   eax
c0012eb3:	e8 48 d7 fe ff       	call   c0000600 <strcpy>
c0012eb8:	83 c4 10             	add    esp,0x10
c0012ebb:	83 ec 08             	sub    esp,0x8
c0012ebe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ec6:	e8 01 fe ff ff       	call   c0012ccc <Process::addArgs(char**)>
c0012ecb:	83 c4 10             	add    esp,0x10
c0012ece:	83 ec 08             	sub    esp,0x8
c0012ed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed9:	e8 89 ed ff ff       	call   c0011c67 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012ede:	83 c4 10             	add    esp,0x10
c0012ee1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012ee5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012ee9:	83 f0 01             	xor    eax,0x1
c0012eec:	88 c2                	mov    dl,al
c0012eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ef2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012ef8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012efc:	25 ff 00 00 00       	and    eax,0xff
c0012f01:	83 ec 08             	sub    esp,0x8
c0012f04:	50                   	push   eax
c0012f05:	68 9c e5 01 c0       	push   0xc001e59c
c0012f0a:	e8 45 75 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012f0f:	83 c4 10             	add    esp,0x10
c0012f12:	90                   	nop
c0012f13:	83 c4 14             	add    esp,0x14
c0012f16:	5b                   	pop    ebx
c0012f17:	5e                   	pop    esi
c0012f18:	c3                   	ret    
c0012f19:	90                   	nop
c0012f1a:	66 90                	xchg   ax,ax

c0012f1c <Process::Process(bool, char const*, Process*, char**)>:
c0012f1c:	56                   	push   esi
c0012f1d:	53                   	push   ebx
c0012f1e:	83 ec 24             	sub    esp,0x24
c0012f21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f25:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f2d:	05 0c 02 00 00       	add    eax,0x20c
c0012f32:	bb 07 00 00 00       	mov    ebx,0x7
c0012f37:	89 c6                	mov    esi,eax
c0012f39:	8d 76 00             	lea    esi,[esi+0x0]
c0012f3c:	85 db                	test   ebx,ebx
c0012f3e:	78 14                	js     c0012f54 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012f40:	83 ec 0c             	sub    esp,0xc
c0012f43:	56                   	push   esi
c0012f44:	e8 03 96 00 00       	call   c001c54c <ThreadControlBlock::ThreadControlBlock()>
c0012f49:	83 c4 10             	add    esp,0x10
c0012f4c:	83 c6 5f             	add    esi,0x5f
c0012f4f:	4b                   	dec    ebx
c0012f50:	eb ea                	jmp    c0012f3c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012f52:	66 90                	xchg   ax,ax
c0012f54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f58:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012f5f:	83 ec 0c             	sub    esp,0xc
c0012f62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f66:	e8 c1 cf ff ff       	call   c000ff2c <Krnl::newProcessEnv(Process*)>
c0012f6b:	83 c4 10             	add    esp,0x10
c0012f6e:	89 c2                	mov    edx,eax
c0012f70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f74:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012f7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f7e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012f87:	a1 68 f4 01 c0       	mov    eax,ds:0xc001f468
c0012f8c:	8d 50 01             	lea    edx,[eax+0x1]
c0012f8f:	89 15 68 f4 01 c0    	mov    DWORD PTR ds:0xc001f468,edx
c0012f95:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f99:	89 02                	mov    DWORD PTR [edx],eax
c0012f9b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0012fa3:	83 ec 0c             	sub    esp,0xc
c0012fa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012faa:	e8 0a 48 ff ff       	call   c00077b9 <malloc>
c0012faf:	83 c4 10             	add    esp,0x10
c0012fb2:	89 c3                	mov    ebx,eax
c0012fb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0012fb8:	25 ff 00 00 00       	and    eax,0xff
c0012fbd:	83 ec 08             	sub    esp,0x8
c0012fc0:	50                   	push   eax
c0012fc1:	53                   	push   ebx
c0012fc2:	e8 7d 6d ff ff       	call   c0009d44 <VAS::VAS(bool)>
c0012fc7:	83 c4 10             	add    esp,0x10
c0012fca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fce:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012fd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fd8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012fe2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fe6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012fea:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012ff0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ff4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012ffa:	85 c0                	test   eax,eax
c0012ffc:	74 42                	je     c0013040 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0012ffe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013002:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013008:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001300e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013012:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013018:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001301c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013022:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013028:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001302c:	05 0c 01 00 00       	add    eax,0x10c
c0013031:	83 ec 08             	sub    esp,0x8
c0013034:	52                   	push   edx
c0013035:	50                   	push   eax
c0013036:	e8 c5 d5 fe ff       	call   c0000600 <strcpy>
c001303b:	83 c4 10             	add    esp,0x10
c001303e:	eb 64                	jmp    c00130a4 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0013040:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013048:	83 ec 0c             	sub    esp,0xc
c001304b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001304f:	e8 65 47 ff ff       	call   c00077b9 <malloc>
c0013054:	83 c4 10             	add    esp,0x10
c0013057:	89 c3                	mov    ebx,eax
c0013059:	83 ec 08             	sub    esp,0x8
c001305c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013060:	53                   	push   ebx
c0013061:	e8 94 58 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013066:	83 c4 10             	add    esp,0x10
c0013069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001306d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013073:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013077:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001307d:	83 ec 0c             	sub    esp,0xc
c0013080:	50                   	push   eax
c0013081:	e8 14 51 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013086:	83 c4 10             	add    esp,0x10
c0013089:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001308d:	05 0c 01 00 00       	add    eax,0x10c
c0013092:	83 ec 08             	sub    esp,0x8
c0013095:	68 44 e5 01 c0       	push   0xc001e544
c001309a:	50                   	push   eax
c001309b:	e8 60 d5 fe ff       	call   c0000600 <strcpy>
c00130a0:	83 c4 10             	add    esp,0x10
c00130a3:	90                   	nop
c00130a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130a8:	83 c0 0c             	add    eax,0xc
c00130ab:	83 ec 08             	sub    esp,0x8
c00130ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00130b2:	50                   	push   eax
c00130b3:	e8 48 d5 fe ff       	call   c0000600 <strcpy>
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	83 ec 08             	sub    esp,0x8
c00130be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00130c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00130c6:	e8 01 fc ff ff       	call   c0012ccc <Process::addArgs(char**)>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	90                   	nop
c00130cf:	83 c4 24             	add    esp,0x24
c00130d2:	5b                   	pop    ebx
c00130d3:	5e                   	pop    esi
c00130d4:	c3                   	ret    
c00130d5:	8d 76 00             	lea    esi,[esi+0x0]

c00130d8 <taskStartupFunction>:
c00130d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130dd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00130e0:	c3                   	ret    
c00130e1:	90                   	nop
c00130e2:	66 90                	xchg   ax,ax

c00130e4 <Semaphore::Semaphore(int)>:
c00130e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130ec:	89 10                	mov    DWORD PTR [eax],edx
c00130ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00130f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013108:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001310f:	90                   	nop
c0013110:	c3                   	ret    
c0013111:	90                   	nop
c0013112:	66 90                	xchg   ax,ax

c0013114 <Mutex::Mutex()>:
c0013114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013118:	6a 01                	push   0x1
c001311a:	50                   	push   eax
c001311b:	e8 c4 ff ff ff       	call   c00130e4 <Semaphore::Semaphore(int)>
c0013120:	83 c4 08             	add    esp,0x8
c0013123:	90                   	nop
c0013124:	c3                   	ret    
c0013125:	90                   	nop
c0013126:	66 90                	xchg   ax,ax

c0013128 <Process::createThread(void (*)(void*), void*, int)>:
c0013128:	57                   	push   edi
c0013129:	31 c9                	xor    ecx,ecx
c001312b:	56                   	push   esi
c001312c:	53                   	push   ebx
c001312d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013131:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013138:	89 f2                	mov    edx,esi
c001313a:	66 90                	xchg   ax,ax
c001313c:	31 c0                	xor    eax,eax
c001313e:	66 89 d0             	mov    ax,dx
c0013141:	83 e2 01             	and    edx,0x1
c0013144:	74 12                	je     c0013158 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013146:	d1 f8                	sar    eax,1
c0013148:	41                   	inc    ecx
c0013149:	89 c2                	mov    edx,eax
c001314b:	83 f9 10             	cmp    ecx,0x10
c001314e:	75 ec                	jne    c001313c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013150:	31 db                	xor    ebx,ebx
c0013152:	89 d8                	mov    eax,ebx
c0013154:	5b                   	pop    ebx
c0013155:	5e                   	pop    esi
c0013156:	5f                   	pop    edi
c0013157:	c3                   	ret    
c0013158:	b8 01 00 00 00       	mov    eax,0x1
c001315d:	d3 e0                	shl    eax,cl
c001315f:	09 c6                	or     esi,eax
c0013161:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013164:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001316b:	01 c0                	add    eax,eax
c001316d:	01 c8                	add    eax,ecx
c001316f:	8d 04 80             	lea    eax,[eax+eax*4]
c0013172:	01 d8                	add    eax,ebx
c0013174:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001317b:	75 0b                	jne    c0013188 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001317d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013187:	90                   	nop
c0013188:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001318e:	83 ec 08             	sub    esp,0x8
c0013191:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013194:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013197:	01 c0                	add    eax,eax
c0013199:	01 c8                	add    eax,ecx
c001319b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001319e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00131a1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00131a7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00131ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131b1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00131b7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00131bd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00131c4:	89 ca                	mov    edx,ecx
c00131c6:	f7 da                	neg    edx
c00131c8:	c1 e2 15             	shl    edx,0x15
c00131cb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00131d1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00131d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00131db:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00131e5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00131eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00131ef:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00131f5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00131ff:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013209:	53                   	push   ebx
c001320a:	68 64 37 02 c0       	push   0xc0023764
c001320f:	e8 d8 90 00 00       	call   c001c2ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013214:	83 c4 10             	add    esp,0x10
c0013217:	89 d8                	mov    eax,ebx
c0013219:	5b                   	pop    ebx
c001321a:	5e                   	pop    esi
c001321b:	5f                   	pop    edi
c001321c:	c3                   	ret    
c001321d:	90                   	nop
c001321e:	66 90                	xchg   ax,ax

c0013220 <Process::createUserThread()>:
c0013220:	83 ec 0c             	sub    esp,0xc
c0013223:	68 80 00 00 00       	push   0x80
c0013228:	6a 00                	push   0x0
c001322a:	68 c0 2b 01 c0       	push   0xc0012bc0
c001322f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013233:	50                   	push   eax
c0013234:	e8 ef fe ff ff       	call   c0013128 <Process::createThread(void (*)(void*), void*, int)>
c0013239:	83 c4 1c             	add    esp,0x1c
c001323c:	c3                   	ret    
c001323d:	8d 76 00             	lea    esi,[esi+0x0]

c0013240 <setupMultitasking(void (*)())>:
c0013240:	56                   	push   esi
c0013241:	53                   	push   ebx
c0013242:	53                   	push   ebx
c0013243:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013247:	eb 13                	jmp    c001325c <setupMultitasking(void (*)())+0x1c>
c0013249:	8d 76 00             	lea    esi,[esi+0x0]
c001324c:	83 ec 0c             	sub    esp,0xc
c001324f:	68 64 37 02 c0       	push   0xc0023764
c0013254:	e8 db 8f 00 00       	call   c001c234 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013259:	83 c4 10             	add    esp,0x10
c001325c:	83 ec 0c             	sub    esp,0xc
c001325f:	68 64 37 02 c0       	push   0xc0023764
c0013264:	e8 a7 8f 00 00       	call   c001c210 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013269:	83 c4 10             	add    esp,0x10
c001326c:	84 c0                	test   al,al
c001326e:	74 dc                	je     c001324c <setupMultitasking(void (*)())+0xc>
c0013270:	83 ec 0c             	sub    esp,0xc
c0013273:	68 1f 07 00 00       	push   0x71f
c0013278:	e8 3c 45 ff ff       	call   c00077b9 <malloc>
c001327d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013284:	89 c3                	mov    ebx,eax
c0013286:	6a 00                	push   0x0
c0013288:	68 48 e5 01 c0       	push   0xc001e548
c001328d:	6a 01                	push   0x1
c001328f:	50                   	push   eax
c0013290:	e8 87 fc ff ff       	call   c0012f1c <Process::Process(bool, char const*, Process*, char**)>
c0013295:	83 c4 14             	add    esp,0x14
c0013298:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001329e:	89 1d 70 37 02 c0    	mov    DWORD PTR ds:0xc0023770,ebx
c00132a4:	50                   	push   eax
c00132a5:	e8 4d 51 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00132aa:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00132b2:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00132bc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00132c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00132c5:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00132cf:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00132d5:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00132db:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00132e5:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00132ef:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00132f9:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00132ff:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013305:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001330f:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013315:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001331f:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013325:	5a                   	pop    edx
c0013326:	59                   	pop    ecx
c0013327:	68 44 e5 01 c0       	push   0xc001e544
c001332c:	50                   	push   eax
c001332d:	e8 ce d2 fe ff       	call   c0000600 <strcpy>
c0013332:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013339:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001333d:	83 c4 14             	add    esp,0x14
c0013340:	5b                   	pop    ebx
c0013341:	5e                   	pop    esi
c0013342:	e9 22 cf fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0013347:	90                   	nop

c0013348 <schedule()>:
c0013348:	8b 15 44 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023744
c001334e:	85 d2                	test   edx,edx
c0013350:	74 0e                	je     c0013360 <schedule()+0x18>
c0013352:	c7 05 40 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x1
c001335c:	c3                   	ret    
c001335d:	8d 76 00             	lea    esi,[esi+0x0]
c0013360:	53                   	push   ebx
c0013361:	83 ec 14             	sub    esp,0x14
c0013364:	68 64 37 02 c0       	push   0xc0023764
c0013369:	e8 a2 8e 00 00       	call   c001c210 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001336e:	83 c4 10             	add    esp,0x10
c0013371:	84 c0                	test   al,al
c0013373:	75 3b                	jne    c00133b0 <schedule()+0x68>
c0013375:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001337a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001337d:	4a                   	dec    edx
c001337e:	74 38                	je     c00133b8 <schedule()+0x70>
c0013380:	83 ec 0c             	sub    esp,0xc
c0013383:	68 64 37 02 c0       	push   0xc0023764
c0013388:	e8 9f 8e 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001338d:	c7 04 24 64 37 02 c0 	mov    DWORD PTR [esp],0xc0023764
c0013394:	89 c3                	mov    ebx,eax
c0013396:	e8 99 8e 00 00       	call   c001c234 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001339b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00133a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133a5:	e8 6e f8 ff ff       	call   c0012c18 <switchToThread(ThreadControlBlock*)>
c00133aa:	83 c4 10             	add    esp,0x10
c00133ad:	8d 76 00             	lea    esi,[esi+0x0]
c00133b0:	83 c4 08             	add    esp,0x8
c00133b3:	5b                   	pop    ebx
c00133b4:	c3                   	ret    
c00133b5:	8d 76 00             	lea    esi,[esi+0x0]
c00133b8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00133bf:	83 ec 08             	sub    esp,0x8
c00133c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133c7:	50                   	push   eax
c00133c8:	68 64 37 02 c0       	push   0xc0023764
c00133cd:	e8 1a 8f 00 00       	call   c001c2ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00133d2:	83 c4 10             	add    esp,0x10
c00133d5:	eb a9                	jmp    c0013380 <schedule()+0x38>
c00133d7:	90                   	nop

c00133d8 <Semaphore::tryAcquire()>:
c00133d8:	53                   	push   ebx
c00133d9:	83 ec 08             	sub    esp,0x8
c00133dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133e0:	fa                   	cli    
c00133e1:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00133e6:	8d 50 01             	lea    edx,[eax+0x1]
c00133e9:	89 15 48 37 02 c0    	mov    DWORD PTR ds:0xc0023748,edx
c00133ef:	8b 15 44 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023744
c00133f5:	8d 5a 01             	lea    ebx,[edx+0x1]
c00133f8:	89 1d 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,ebx
c00133fe:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013401:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013403:	7c 33                	jl     c0013438 <Semaphore::tryAcquire()+0x60>
c0013405:	89 15 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,edx
c001340b:	85 d2                	test   edx,edx
c001340d:	75 0d                	jne    c001341c <Semaphore::tryAcquire()+0x44>
c001340f:	8b 15 40 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023740
c0013415:	85 d2                	test   edx,edx
c0013417:	75 6b                	jne    c0013484 <Semaphore::tryAcquire()+0xac>
c0013419:	8d 76 00             	lea    esi,[esi+0x0]
c001341c:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013421:	85 c0                	test   eax,eax
c0013423:	74 0b                	je     c0013430 <Semaphore::tryAcquire()+0x58>
c0013425:	8d 76 00             	lea    esi,[esi+0x0]
c0013428:	31 c0                	xor    eax,eax
c001342a:	83 c4 08             	add    esp,0x8
c001342d:	5b                   	pop    ebx
c001342e:	c3                   	ret    
c001342f:	90                   	nop
c0013430:	fb                   	sti    
c0013431:	83 c4 08             	add    esp,0x8
c0013434:	5b                   	pop    ebx
c0013435:	c3                   	ret    
c0013436:	66 90                	xchg   ax,ax
c0013438:	43                   	inc    ebx
c0013439:	89 15 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,edx
c001343f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013442:	85 d2                	test   edx,edx
c0013444:	75 22                	jne    c0013468 <Semaphore::tryAcquire()+0x90>
c0013446:	8b 0d 40 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023740
c001344c:	85 c9                	test   ecx,ecx
c001344e:	74 18                	je     c0013468 <Semaphore::tryAcquire()+0x90>
c0013450:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c001345a:	e8 e9 fe ff ff       	call   c0013348 <schedule()>
c001345f:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013464:	48                   	dec    eax
c0013465:	8d 76 00             	lea    esi,[esi+0x0]
c0013468:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001346d:	85 c0                	test   eax,eax
c001346f:	75 0b                	jne    c001347c <Semaphore::tryAcquire()+0xa4>
c0013471:	fb                   	sti    
c0013472:	b0 01                	mov    al,0x1
c0013474:	83 c4 08             	add    esp,0x8
c0013477:	5b                   	pop    ebx
c0013478:	c3                   	ret    
c0013479:	8d 76 00             	lea    esi,[esi+0x0]
c001347c:	b0 01                	mov    al,0x1
c001347e:	83 c4 08             	add    esp,0x8
c0013481:	5b                   	pop    ebx
c0013482:	c3                   	ret    
c0013483:	90                   	nop
c0013484:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c001348e:	e8 b5 fe ff ff       	call   c0013348 <schedule()>
c0013493:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013498:	48                   	dec    eax
c0013499:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001349e:	85 c0                	test   eax,eax
c00134a0:	75 86                	jne    c0013428 <Semaphore::tryAcquire()+0x50>
c00134a2:	eb 8c                	jmp    c0013430 <Semaphore::tryAcquire()+0x58>

c00134a4 <Semaphore::assertLocked(char const*)>:
c00134a4:	83 ec 0c             	sub    esp,0xc
c00134a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134ab:	fa                   	cli    
c00134ac:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00134b2:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c00134b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00134ba:	89 0d 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,ecx
c00134c0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00134c2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00134c5:	7c 29                	jl     c00134f0 <Semaphore::assertLocked(char const*)+0x4c>
c00134c7:	90                   	nop
c00134c8:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c00134cd:	85 c0                	test   eax,eax
c00134cf:	75 0b                	jne    c00134dc <Semaphore::assertLocked(char const*)+0x38>
c00134d1:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c00134d6:	85 c0                	test   eax,eax
c00134d8:	75 2e                	jne    c0013508 <Semaphore::assertLocked(char const*)+0x64>
c00134da:	66 90                	xchg   ax,ax
c00134dc:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00134e1:	48                   	dec    eax
c00134e2:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00134e7:	75 03                	jne    c00134ec <Semaphore::assertLocked(char const*)+0x48>
c00134e9:	fb                   	sti    
c00134ea:	66 90                	xchg   ax,ax
c00134ec:	83 c4 0c             	add    esp,0xc
c00134ef:	c3                   	ret    
c00134f0:	83 ec 0c             	sub    esp,0xc
c00134f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134f7:	52                   	push   edx
c00134f8:	e8 3a cc ff ff       	call   c0010137 <KePanic(char const*)>
c00134fd:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013502:	83 c4 10             	add    esp,0x10
c0013505:	48                   	dec    eax
c0013506:	eb c0                	jmp    c00134c8 <Semaphore::assertLocked(char const*)+0x24>
c0013508:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0013512:	e8 31 fe ff ff       	call   c0013348 <schedule()>
c0013517:	eb c3                	jmp    c00134dc <Semaphore::assertLocked(char const*)+0x38>
c0013519:	8d 76 00             	lea    esi,[esi+0x0]

c001351c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001351c:	83 ec 0c             	sub    esp,0xc
c001351f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013524:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013528:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001352b:	e8 18 fe ff ff       	call   c0013348 <schedule()>
c0013530:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013535:	48                   	dec    eax
c0013536:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001353b:	75 03                	jne    c0013540 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001353d:	fb                   	sti    
c001353e:	66 90                	xchg   ax,ax
c0013540:	83 c4 0c             	add    esp,0xc
c0013543:	c3                   	ret    

c0013544 <blockTask(TaskState)>:
c0013544:	83 ec 0c             	sub    esp,0xc
c0013547:	fa                   	cli    
c0013548:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c001354e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013552:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013557:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001355a:	e8 e9 fd ff ff       	call   c0013348 <schedule()>
c001355f:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013564:	48                   	dec    eax
c0013565:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001356a:	75 04                	jne    c0013570 <blockTask(TaskState)+0x2c>
c001356c:	fb                   	sti    
c001356d:	8d 76 00             	lea    esi,[esi+0x0]
c0013570:	83 c4 0c             	add    esp,0xc
c0013573:	c3                   	ret    

c0013574 <waitTask(int, int*, int)>:
c0013574:	83 ec 18             	sub    esp,0x18
c0013577:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001357c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013580:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013583:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013587:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001358c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001358f:	6a 07                	push   0x7
c0013591:	e8 ae ff ff ff       	call   c0013544 <blockTask(TaskState)>
c0013596:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001359b:	83 c4 10             	add    esp,0x10
c001359e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00135a1:	85 d2                	test   edx,edx
c00135a3:	74 0b                	je     c00135b0 <waitTask(int, int*, int)+0x3c>
c00135a5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00135a8:	89 02                	mov    DWORD PTR [edx],eax
c00135aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135af:	90                   	nop
c00135b0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00135b3:	83 c4 0c             	add    esp,0xc
c00135b6:	c3                   	ret    
c00135b7:	90                   	nop

c00135b8 <milliTenthSleepUntil(unsigned int)>:
c00135b8:	83 ec 0c             	sub    esp,0xc
c00135bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135bf:	39 05 6c 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a6c,eax
c00135c5:	76 05                	jbe    c00135cc <milliTenthSleepUntil(unsigned int)+0x14>
c00135c7:	90                   	nop
c00135c8:	83 c4 0c             	add    esp,0xc
c00135cb:	c3                   	ret    
c00135cc:	fa                   	cli    
c00135cd:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00135d3:	83 ec 08             	sub    esp,0x8
c00135d6:	ff 05 44 37 02 c0    	inc    DWORD PTR ds:0xc0023744
c00135dc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00135e2:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00135e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00135eb:	52                   	push   edx
c00135ec:	68 58 37 02 c0       	push   0xc0023758
c00135f1:	e8 f6 8c 00 00       	call   c001c2ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00135f6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00135fd:	e8 42 ff ff ff       	call   c0013544 <blockTask(TaskState)>
c0013602:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013607:	83 c4 10             	add    esp,0x10
c001360a:	48                   	dec    eax
c001360b:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c0013610:	85 c0                	test   eax,eax
c0013612:	75 0c                	jne    c0013620 <milliTenthSleepUntil(unsigned int)+0x68>
c0013614:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c0013619:	85 c0                	test   eax,eax
c001361b:	75 17                	jne    c0013634 <milliTenthSleepUntil(unsigned int)+0x7c>
c001361d:	8d 76 00             	lea    esi,[esi+0x0]
c0013620:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013625:	48                   	dec    eax
c0013626:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001362b:	75 9b                	jne    c00135c8 <milliTenthSleepUntil(unsigned int)+0x10>
c001362d:	fb                   	sti    
c001362e:	83 c4 0c             	add    esp,0xc
c0013631:	c3                   	ret    
c0013632:	66 90                	xchg   ax,ax
c0013634:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c001363e:	e8 05 fd ff ff       	call   c0013348 <schedule()>
c0013643:	eb db                	jmp    c0013620 <milliTenthSleepUntil(unsigned int)+0x68>
c0013645:	8d 76 00             	lea    esi,[esi+0x0]

c0013648 <milliTenthSleep(unsigned int)>:
c0013648:	a1 6c 2a 02 c0       	mov    eax,ds:0xc0022a6c
c001364d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013651:	e9 62 ff ff ff       	jmp    c00135b8 <milliTenthSleepUntil(unsigned int)>
c0013656:	66 90                	xchg   ax,ax

c0013658 <sleep(unsigned int)>:
c0013658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001365c:	8d 04 80             	lea    eax,[eax+eax*4]
c001365f:	8d 04 80             	lea    eax,[eax+eax*4]
c0013662:	8d 04 80             	lea    eax,[eax+eax*4]
c0013665:	8d 04 80             	lea    eax,[eax+eax*4]
c0013668:	c1 e0 04             	shl    eax,0x4
c001366b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001366f:	eb d7                	jmp    c0013648 <milliTenthSleep(unsigned int)>
c0013671:	90                   	nop
c0013672:	66 90                	xchg   ax,ax

c0013674 <Semaphore::acquire()>:
c0013674:	83 ec 0c             	sub    esp,0xc
c0013677:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001367b:	fa                   	cli    
c001367c:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013681:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013687:	8d 48 01             	lea    ecx,[eax+0x1]
c001368a:	89 0d 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,ecx
c0013690:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013693:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013695:	7d 2d                	jge    c00136c4 <Semaphore::acquire()+0x50>
c0013697:	41                   	inc    ecx
c0013698:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001369b:	90                   	nop
c001369c:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c00136a1:	85 c0                	test   eax,eax
c00136a3:	75 0b                	jne    c00136b0 <Semaphore::acquire()+0x3c>
c00136a5:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c00136aa:	85 c0                	test   eax,eax
c00136ac:	75 62                	jne    c0013710 <Semaphore::acquire()+0x9c>
c00136ae:	66 90                	xchg   ax,ax
c00136b0:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00136b5:	48                   	dec    eax
c00136b6:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00136bb:	75 03                	jne    c00136c0 <Semaphore::acquire()+0x4c>
c00136bd:	fb                   	sti    
c00136be:	66 90                	xchg   ax,ax
c00136c0:	83 c4 0c             	add    esp,0xc
c00136c3:	c3                   	ret    
c00136c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00136d0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00136d3:	85 c9                	test   ecx,ecx
c00136d5:	74 4d                	je     c0013724 <Semaphore::acquire()+0xb0>
c00136d7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00136da:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00136e0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00136e3:	90                   	nop
c00136e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136e9:	83 ec 0c             	sub    esp,0xc
c00136ec:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00136ef:	68 c4 e5 01 c0       	push   0xc001e5c4
c00136f4:	e8 5b 6d ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00136f9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013700:	e8 3f fe ff ff       	call   c0013544 <blockTask(TaskState)>
c0013705:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c001370a:	83 c4 10             	add    esp,0x10
c001370d:	48                   	dec    eax
c001370e:	eb 8c                	jmp    c001369c <Semaphore::acquire()+0x28>
c0013710:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c001371a:	e8 29 fc ff ff       	call   c0013348 <schedule()>
c001371f:	eb 8f                	jmp    c00136b0 <Semaphore::acquire()+0x3c>
c0013721:	8d 76 00             	lea    esi,[esi+0x0]
c0013724:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013729:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001372c:	eb b6                	jmp    c00136e4 <Semaphore::acquire()+0x70>
c001372e:	66 90                	xchg   ax,ax

c0013730 <taskReturned>:
c0013730:	83 ec 18             	sub    esp,0x18
c0013733:	68 e4 e5 01 c0       	push   0xc001e5e4
c0013738:	e8 fa c9 ff ff       	call   c0010137 <KePanic(char const*)>
c001373d:	83 c4 10             	add    esp,0x10
c0013740:	83 ec 0c             	sub    esp,0xc
c0013743:	6a 02                	push   0x2
c0013745:	e8 fa fd ff ff       	call   c0013544 <blockTask(TaskState)>
c001374a:	fa                   	cli    
c001374b:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013751:	e8 f2 fb ff ff       	call   c0013348 <schedule()>
c0013756:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001375b:	83 c4 10             	add    esp,0x10
c001375e:	48                   	dec    eax
c001375f:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013764:	85 c0                	test   eax,eax
c0013766:	75 d8                	jne    c0013740 <taskReturned+0x10>
c0013768:	fb                   	sti    
c0013769:	eb d5                	jmp    c0013740 <taskReturned+0x10>
c001376b:	90                   	nop

c001376c <Thr::processFromPID(int)>:
c001376c:	57                   	push   edi
c001376d:	56                   	push   esi
c001376e:	53                   	push   ebx
c001376f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013773:	fa                   	cli    
c0013774:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c001377a:	83 ec 0c             	sub    esp,0xc
c001377d:	68 64 37 02 c0       	push   0xc0023764
c0013782:	e8 a5 8a 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013787:	83 c4 10             	add    esp,0x10
c001378a:	89 c7                	mov    edi,eax
c001378c:	eb 16                	jmp    c00137a4 <Thr::processFromPID(int)+0x38>
c001378e:	66 90                	xchg   ax,ax
c0013790:	83 ec 0c             	sub    esp,0xc
c0013793:	68 64 37 02 c0       	push   0xc0023764
c0013798:	e8 8f 8a 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001379d:	83 c4 10             	add    esp,0x10
c00137a0:	39 f8                	cmp    eax,edi
c00137a2:	74 4c                	je     c00137f0 <Thr::processFromPID(int)+0x84>
c00137a4:	83 ec 0c             	sub    esp,0xc
c00137a7:	68 64 37 02 c0       	push   0xc0023764
c00137ac:	e8 7b 8a 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137b1:	c7 04 24 64 37 02 c0 	mov    DWORD PTR [esp],0xc0023764
c00137b8:	89 c3                	mov    ebx,eax
c00137ba:	e8 75 8a 00 00       	call   c001c234 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137bf:	58                   	pop    eax
c00137c0:	5a                   	pop    edx
c00137c1:	53                   	push   ebx
c00137c2:	68 64 37 02 c0       	push   0xc0023764
c00137c7:	e8 20 8b 00 00       	call   c001c2ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00137cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00137cf:	83 c4 10             	add    esp,0x10
c00137d2:	39 30                	cmp    DWORD PTR [eax],esi
c00137d4:	75 ba                	jne    c0013790 <Thr::processFromPID(int)+0x24>
c00137d6:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00137db:	48                   	dec    eax
c00137dc:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00137e1:	74 09                	je     c00137ec <Thr::processFromPID(int)+0x80>
c00137e3:	90                   	nop
c00137e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00137e7:	5b                   	pop    ebx
c00137e8:	5e                   	pop    esi
c00137e9:	5f                   	pop    edi
c00137ea:	c3                   	ret    
c00137eb:	90                   	nop
c00137ec:	fb                   	sti    
c00137ed:	eb f5                	jmp    c00137e4 <Thr::processFromPID(int)+0x78>
c00137ef:	90                   	nop
c00137f0:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00137f5:	48                   	dec    eax
c00137f6:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00137fb:	75 07                	jne    c0013804 <Thr::processFromPID(int)+0x98>
c00137fd:	fb                   	sti    
c00137fe:	5b                   	pop    ebx
c00137ff:	5e                   	pop    esi
c0013800:	5f                   	pop    edi
c0013801:	c3                   	ret    
c0013802:	66 90                	xchg   ax,ax
c0013804:	5b                   	pop    ebx
c0013805:	31 c0                	xor    eax,eax
c0013807:	5e                   	pop    esi
c0013808:	5f                   	pop    edi
c0013809:	c3                   	ret    
c001380a:	66 90                	xchg   ax,ax

c001380c <unblockTask(ThreadControlBlock*)>:
c001380c:	53                   	push   ebx
c001380d:	83 ec 08             	sub    esp,0x8
c0013810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013814:	fa                   	cli    
c0013815:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c001381b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001381e:	85 c0                	test   eax,eax
c0013820:	74 66                	je     c0013888 <unblockTask(ThreadControlBlock*)+0x7c>
c0013822:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013825:	48                   	dec    eax
c0013826:	74 38                	je     c0013860 <unblockTask(ThreadControlBlock*)+0x54>
c0013828:	83 ec 0c             	sub    esp,0xc
c001382b:	68 64 37 02 c0       	push   0xc0023764
c0013830:	e8 f7 89 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013835:	83 c4 10             	add    esp,0x10
c0013838:	85 c0                	test   eax,eax
c001383a:	75 1c                	jne    c0013858 <unblockTask(ThreadControlBlock*)+0x4c>
c001383c:	eb 5e                	jmp    c001389c <unblockTask(ThreadControlBlock*)+0x90>
c001383e:	66 90                	xchg   ax,ax
c0013840:	83 ec 08             	sub    esp,0x8
c0013843:	50                   	push   eax
c0013844:	68 64 37 02 c0       	push   0xc0023764
c0013849:	e8 8e 8d 00 00       	call   c001c5dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001384e:	83 c4 10             	add    esp,0x10
c0013851:	85 c0                	test   eax,eax
c0013853:	74 47                	je     c001389c <unblockTask(ThreadControlBlock*)+0x90>
c0013855:	8d 76 00             	lea    esi,[esi+0x0]
c0013858:	39 c3                	cmp    ebx,eax
c001385a:	75 e4                	jne    c0013840 <unblockTask(ThreadControlBlock*)+0x34>
c001385c:	eb 12                	jmp    c0013870 <unblockTask(ThreadControlBlock*)+0x64>
c001385e:	66 90                	xchg   ax,ax
c0013860:	83 ec 0c             	sub    esp,0xc
c0013863:	68 66 e5 01 c0       	push   0xc001e566
c0013868:	e8 e7 6b ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001386d:	83 c4 10             	add    esp,0x10
c0013870:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013875:	48                   	dec    eax
c0013876:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001387b:	75 03                	jne    c0013880 <unblockTask(ThreadControlBlock*)+0x74>
c001387d:	fb                   	sti    
c001387e:	66 90                	xchg   ax,ax
c0013880:	83 c4 08             	add    esp,0x8
c0013883:	5b                   	pop    ebx
c0013884:	c3                   	ret    
c0013885:	8d 76 00             	lea    esi,[esi+0x0]
c0013888:	83 ec 0c             	sub    esp,0xc
c001388b:	68 4f e5 01 c0       	push   0xc001e54f
c0013890:	e8 bf 6b ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013895:	83 c4 10             	add    esp,0x10
c0013898:	eb d6                	jmp    c0013870 <unblockTask(ThreadControlBlock*)+0x64>
c001389a:	66 90                	xchg   ax,ax
c001389c:	83 ec 08             	sub    esp,0x8
c001389f:	53                   	push   ebx
c00138a0:	68 64 37 02 c0       	push   0xc0023764
c00138a5:	e8 42 8a 00 00       	call   c001c2ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00138aa:	83 c4 10             	add    esp,0x10
c00138ad:	eb c1                	jmp    c0013870 <unblockTask(ThreadControlBlock*)+0x64>
c00138af:	90                   	nop

c00138b0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00138b0:	55                   	push   ebp
c00138b1:	57                   	push   edi
c00138b2:	56                   	push   esi
c00138b3:	53                   	push   ebx
c00138b4:	83 ec 1c             	sub    esp,0x1c
c00138b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00138bb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00138be:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00138c4:	85 ed                	test   ebp,ebp
c00138c6:	7e 24                	jle    c00138ec <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00138c8:	31 f6                	xor    esi,esi
c00138ca:	66 90                	xchg   ax,ax
c00138cc:	83 ec 0c             	sub    esp,0xc
c00138cf:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00138d6:	46                   	inc    esi
c00138d7:	57                   	push   edi
c00138d8:	e8 ec 3e ff ff       	call   c00077c9 <free>
c00138dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00138e9:	7f e1                	jg     c00138cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00138eb:	90                   	nop
c00138ec:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00138f6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00138fb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00138fe:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013901:	d3 c0                	rol    eax,cl
c0013903:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001390a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001390d:	89 f7                	mov    edi,esi
c001390f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013917:	0f 85 77 01 00 00    	jne    c0013a94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c001391d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013923:	85 ed                	test   ebp,ebp
c0013925:	74 1d                	je     c0013944 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013927:	83 ec 0c             	sub    esp,0xc
c001392a:	55                   	push   ebp
c001392b:	e8 18 c5 ff ff       	call   c000fe48 <EnvVarContainer::~EnvVarContainer()>
c0013930:	59                   	pop    ecx
c0013931:	5e                   	pop    esi
c0013932:	6a 0c                	push   0xc
c0013934:	55                   	push   ebp
c0013935:	e8 24 6a ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001393a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001393d:	83 c4 10             	add    esp,0x10
c0013940:	89 f7                	mov    edi,esi
c0013942:	66 90                	xchg   ax,ax
c0013944:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001394a:	85 c0                	test   eax,eax
c001394c:	0f 84 b6 00 00 00    	je     c0013a08 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013952:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013955:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013959:	31 c9                	xor    ecx,ecx
c001395b:	eb 17                	jmp    c0013974 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001395d:	8d 76 00             	lea    esi,[esi+0x0]
c0013960:	41                   	inc    ecx
c0013961:	83 f9 10             	cmp    ecx,0x10
c0013964:	0f 84 9e 00 00 00    	je     c0013a08 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001396a:	66 90                	xchg   ax,ax
c001396c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013972:	66 90                	xchg   ax,ax
c0013974:	31 d2                	xor    edx,edx
c0013976:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c001397d:	d3 fa                	sar    edx,cl
c001397f:	83 e2 01             	and    edx,0x1
c0013982:	74 dc                	je     c0013960 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013984:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013987:	01 d2                	add    edx,edx
c0013989:	01 ca                	add    edx,ecx
c001398b:	8d 14 92             	lea    edx,[edx+edx*4]
c001398e:	01 d0                	add    eax,edx
c0013990:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013996:	83 fd 07             	cmp    ebp,0x7
c0013999:	75 c5                	jne    c0013960 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001399b:	05 40 02 00 00       	add    eax,0x240
c00139a0:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00139a3:	83 fd ff             	cmp    ebp,0xffffffff
c00139a6:	0f 8c f0 00 00 00    	jl     c0013a9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00139ac:	0f 84 ae 01 00 00    	je     c0013b60 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00139b2:	85 ed                	test   ebp,ebp
c00139b4:	0f 84 92 01 00 00    	je     c0013b4c <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00139ba:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00139bc:	75 a2                	jne    c0013960 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00139be:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00139c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00139c8:	01 d0                	add    eax,edx
c00139ca:	66 90                	xchg   ax,ax
c00139cc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00139d9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00139dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00139e2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00139e9:	50                   	push   eax
c00139ea:	e8 1d fe ff ff       	call   c001380c <unblockTask(ThreadControlBlock*)>
c00139ef:	83 c4 10             	add    esp,0x10
c00139f2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00139f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00139f9:	89 f7                	mov    edi,esi
c00139fb:	41                   	inc    ecx
c00139fc:	83 f9 10             	cmp    ecx,0x10
c00139ff:	0f 85 67 ff ff ff    	jne    c001396c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013a05:	8d 76 00             	lea    esi,[esi+0x0]
c0013a08:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013a0e:	85 c0                	test   eax,eax
c0013a10:	74 62                	je     c0013a74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013a12:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013a18:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013a1e:	74 54                	je     c0013a74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013a20:	83 ec 0c             	sub    esp,0xc
c0013a23:	68 64 37 02 c0       	push   0xc0023764
c0013a28:	e8 ff 87 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a2d:	c7 04 24 64 37 02 c0 	mov    DWORD PTR [esp],0xc0023764
c0013a34:	89 c7                	mov    edi,eax
c0013a36:	e8 d5 87 00 00       	call   c001c210 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013a3b:	83 c4 10             	add    esp,0x10
c0013a3e:	84 c0                	test   al,al
c0013a40:	0f 84 ce 00 00 00    	je     c0013b14 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013a46:	66 90                	xchg   ax,ax
c0013a48:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a4b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013a51:	85 d2                	test   edx,edx
c0013a53:	74 0f                	je     c0013a64 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013a55:	83 ec 0c             	sub    esp,0xc
c0013a58:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a5a:	52                   	push   edx
c0013a5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a5e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013a6e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013a71:	8d 76 00             	lea    esi,[esi+0x0]
c0013a74:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013a7a:	85 db                	test   ebx,ebx
c0013a7c:	74 16                	je     c0013a94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013a7e:	83 ec 0c             	sub    esp,0xc
c0013a81:	53                   	push   ebx
c0013a82:	e8 ab 5c ff ff       	call   c0009732 <VAS::~VAS()>
c0013a87:	58                   	pop    eax
c0013a88:	5a                   	pop    edx
c0013a89:	6a 14                	push   0x14
c0013a8b:	53                   	push   ebx
c0013a8c:	e8 cd 68 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c0013a91:	83 c4 10             	add    esp,0x10
c0013a94:	83 c4 1c             	add    esp,0x1c
c0013a97:	5b                   	pop    ebx
c0013a98:	5e                   	pop    esi
c0013a99:	5f                   	pop    edi
c0013a9a:	5d                   	pop    ebp
c0013a9b:	c3                   	ret    
c0013a9c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013aa0:	83 ec 0c             	sub    esp,0xc
c0013aa3:	68 18 e6 01 c0       	push   0xc001e618
c0013aa8:	e8 8a c6 ff ff       	call   c0010137 <KePanic(char const*)>
c0013aad:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ab0:	83 c4 10             	add    esp,0x10
c0013ab3:	89 f7                	mov    edi,esi
c0013ab5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ab9:	e9 a2 fe ff ff       	jmp    c0013960 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013abe:	66 90                	xchg   ax,ax
c0013ac0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013ac6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013acc:	75 1e                	jne    c0013aec <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ace:	83 ec 0c             	sub    esp,0xc
c0013ad1:	68 80 e6 01 c0       	push   0xc001e680
c0013ad6:	e8 79 69 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013adb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013ae2:	e8 5d fa ff ff       	call   c0013544 <blockTask(TaskState)>
c0013ae7:	83 c4 10             	add    esp,0x10
c0013aea:	66 90                	xchg   ax,ax
c0013aec:	83 ec 08             	sub    esp,0x8
c0013aef:	56                   	push   esi
c0013af0:	68 64 37 02 c0       	push   0xc0023764
c0013af5:	e8 f2 87 00 00       	call   c001c2ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013afa:	c7 04 24 64 37 02 c0 	mov    DWORD PTR [esp],0xc0023764
c0013b01:	e8 26 87 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b06:	83 c4 10             	add    esp,0x10
c0013b09:	39 f8                	cmp    eax,edi
c0013b0b:	0f 84 37 ff ff ff    	je     c0013a48 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013b11:	8d 76 00             	lea    esi,[esi+0x0]
c0013b14:	83 ec 0c             	sub    esp,0xc
c0013b17:	68 64 37 02 c0       	push   0xc0023764
c0013b1c:	e8 0b 87 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b21:	c7 04 24 64 37 02 c0 	mov    DWORD PTR [esp],0xc0023764
c0013b28:	89 c6                	mov    esi,eax
c0013b2a:	e8 05 87 00 00       	call   c001c234 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013b2f:	83 c4 10             	add    esp,0x10
c0013b32:	39 f3                	cmp    ebx,esi
c0013b34:	74 b6                	je     c0013aec <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b36:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013b39:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b3c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013b42:	75 a8                	jne    c0013aec <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b44:	e9 77 ff ff ff       	jmp    c0013ac0 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013b49:	8d 76 00             	lea    esi,[esi+0x0]
c0013b4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	68 4c e6 01 c0       	push   0xc001e64c
c0013b58:	e9 4b ff ff ff       	jmp    c0013aa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b60:	8b 36                	mov    esi,DWORD PTR [esi]
c0013b62:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b66:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013b69:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b6c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013b72:	01 d7                	add    edi,edx
c0013b74:	89 f8                	mov    eax,edi
c0013b76:	e9 51 fe ff ff       	jmp    c00139cc <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013b7b:	90                   	nop

c0013b7c <cleanerTaskFunction(void*)>:
c0013b7c:	53                   	push   ebx
c0013b7d:	83 ec 08             	sub    esp,0x8
c0013b80:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013b85:	48                   	dec    eax
c0013b86:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013b8b:	75 03                	jne    c0013b90 <cleanerTaskFunction(void*)+0x14>
c0013b8d:	fb                   	sti    
c0013b8e:	66 90                	xchg   ax,ax
c0013b90:	fa                   	cli    
c0013b91:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013b96:	80 3d 2c 37 02 c0 00 	cmp    BYTE PTR ds:0xc002372c,0x0
c0013b9d:	8d 50 01             	lea    edx,[eax+0x1]
c0013ba0:	89 15 48 37 02 c0    	mov    DWORD PTR ds:0xc0023748,edx
c0013ba6:	0f 84 ac 00 00 00    	je     c0013c58 <cleanerTaskFunction(void*)+0xdc>
c0013bac:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013bb1:	85 c0                	test   eax,eax
c0013bb3:	75 03                	jne    c0013bb8 <cleanerTaskFunction(void*)+0x3c>
c0013bb5:	fb                   	sti    
c0013bb6:	66 90                	xchg   ax,ax
c0013bb8:	c6 05 2c 37 02 c0 00 	mov    BYTE PTR ds:0xc002372c,0x0
c0013bbf:	fa                   	cli    
c0013bc0:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013bc6:	ff 05 44 37 02 c0    	inc    DWORD PTR ds:0xc0023744
c0013bcc:	fa                   	cli    
c0013bcd:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013bd3:	eb 2b                	jmp    c0013c00 <cleanerTaskFunction(void*)+0x84>
c0013bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0013bd8:	83 ec 0c             	sub    esp,0xc
c0013bdb:	68 4c 37 02 c0       	push   0xc002374c
c0013be0:	e8 47 86 00 00       	call   c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013be5:	c7 04 24 4c 37 02 c0 	mov    DWORD PTR [esp],0xc002374c
c0013bec:	89 c3                	mov    ebx,eax
c0013bee:	e8 41 86 00 00       	call   c001c234 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013bf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bf6:	e8 b5 fc ff ff       	call   c00138b0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013bfb:	83 c4 10             	add    esp,0x10
c0013bfe:	66 90                	xchg   ax,ax
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	68 4c 37 02 c0       	push   0xc002374c
c0013c08:	e8 03 86 00 00       	call   c001c210 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013c0d:	83 c4 10             	add    esp,0x10
c0013c10:	84 c0                	test   al,al
c0013c12:	74 c4                	je     c0013bd8 <cleanerTaskFunction(void*)+0x5c>
c0013c14:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013c19:	48                   	dec    eax
c0013c1a:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013c1f:	75 03                	jne    c0013c24 <cleanerTaskFunction(void*)+0xa8>
c0013c21:	fb                   	sti    
c0013c22:	66 90                	xchg   ax,ax
c0013c24:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013c29:	48                   	dec    eax
c0013c2a:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c0013c2f:	0f 85 4b ff ff ff    	jne    c0013b80 <cleanerTaskFunction(void*)+0x4>
c0013c35:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c0013c3a:	85 c0                	test   eax,eax
c0013c3c:	0f 84 3e ff ff ff    	je     c0013b80 <cleanerTaskFunction(void*)+0x4>
c0013c42:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0013c4c:	e8 f7 f6 ff ff       	call   c0013348 <schedule()>
c0013c51:	e9 2a ff ff ff       	jmp    c0013b80 <cleanerTaskFunction(void*)+0x4>
c0013c56:	66 90                	xchg   ax,ax
c0013c58:	83 ec 0c             	sub    esp,0xc
c0013c5b:	6a 02                	push   0x2
c0013c5d:	e8 ba f8 ff ff       	call   c001351c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013c62:	83 c4 10             	add    esp,0x10
c0013c65:	e9 4e ff ff ff       	jmp    c0013bb8 <cleanerTaskFunction(void*)+0x3c>
c0013c6a:	66 90                	xchg   ax,ax

c0013c6c <terminateTask(int)>:
c0013c6c:	83 ec 14             	sub    esp,0x14
c0013c6f:	fa                   	cli    
c0013c70:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013c76:	ff 05 44 37 02 c0    	inc    DWORD PTR ds:0xc0023744
c0013c7c:	fa                   	cli    
c0013c7d:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013c83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c8c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013c8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c94:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013c97:	50                   	push   eax
c0013c98:	68 4c 37 02 c0       	push   0xc002374c
c0013c9d:	e8 4a 86 00 00       	call   c001c2ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ca2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ca7:	83 c4 10             	add    esp,0x10
c0013caa:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013cb1:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0013cb6:	85 c0                	test   eax,eax
c0013cb8:	74 5e                	je     c0013d18 <terminateTask(int)+0xac>
c0013cba:	83 ec 0c             	sub    esp,0xc
c0013cbd:	c6 05 2c 37 02 c0 01 	mov    BYTE PTR ds:0xc002372c,0x1
c0013cc4:	50                   	push   eax
c0013cc5:	e8 42 fb ff ff       	call   c001380c <unblockTask(ThreadControlBlock*)>
c0013cca:	83 c4 10             	add    esp,0x10
c0013ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0013cd0:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013cd5:	48                   	dec    eax
c0013cd6:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013cdb:	75 03                	jne    c0013ce0 <terminateTask(int)+0x74>
c0013cdd:	fb                   	sti    
c0013cde:	66 90                	xchg   ax,ax
c0013ce0:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013ce5:	48                   	dec    eax
c0013ce6:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c0013ceb:	75 0b                	jne    c0013cf8 <terminateTask(int)+0x8c>
c0013ced:	83 3d 40 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023740,0x0
c0013cf4:	75 36                	jne    c0013d2c <terminateTask(int)+0xc0>
c0013cf6:	66 90                	xchg   ax,ax
c0013cf8:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013cfd:	48                   	dec    eax
c0013cfe:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013d03:	75 03                	jne    c0013d08 <terminateTask(int)+0x9c>
c0013d05:	fb                   	sti    
c0013d06:	66 90                	xchg   ax,ax
c0013d08:	fa                   	cli    
c0013d09:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013d0f:	90                   	nop
c0013d10:	e8 33 f6 ff ff       	call   c0013348 <schedule()>
c0013d15:	eb e1                	jmp    c0013cf8 <terminateTask(int)+0x8c>
c0013d17:	90                   	nop
c0013d18:	83 ec 0c             	sub    esp,0xc
c0013d1b:	68 7d e5 01 c0       	push   0xc001e57d
c0013d20:	e8 2f 67 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013d25:	83 c4 10             	add    esp,0x10
c0013d28:	eb a6                	jmp    c0013cd0 <terminateTask(int)+0x64>
c0013d2a:	66 90                	xchg   ax,ax
c0013d2c:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0013d36:	eb d8                	jmp    c0013d10 <terminateTask(int)+0xa4>

c0013d38 <Thr::terminateFromIRQ(int)>:
c0013d38:	83 ec 18             	sub    esp,0x18
c0013d3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d3f:	50                   	push   eax
c0013d40:	e8 27 ff ff ff       	call   c0013c6c <terminateTask(int)>
c0013d45:	90                   	nop
c0013d46:	66 90                	xchg   ax,ax

c0013d48 <Semaphore::release()>:
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d4f:	fa                   	cli    
c0013d50:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013d55:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013d5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d5e:	89 0d 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,ecx
c0013d64:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013d67:	85 c9                	test   ecx,ecx
c0013d69:	74 41                	je     c0013dac <Semaphore::release()+0x64>
c0013d6b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013d6e:	83 ec 0c             	sub    esp,0xc
c0013d71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d74:	51                   	push   ecx
c0013d75:	e8 92 fa ff ff       	call   c001380c <unblockTask(ThreadControlBlock*)>
c0013d7a:	a1 44 37 02 c0       	mov    eax,ds:0xc0023744
c0013d7f:	83 c4 10             	add    esp,0x10
c0013d82:	48                   	dec    eax
c0013d83:	90                   	nop
c0013d84:	a3 44 37 02 c0       	mov    ds:0xc0023744,eax
c0013d89:	85 c0                	test   eax,eax
c0013d8b:	75 0b                	jne    c0013d98 <Semaphore::release()+0x50>
c0013d8d:	a1 40 37 02 c0       	mov    eax,ds:0xc0023740
c0013d92:	85 c0                	test   eax,eax
c0013d94:	75 1e                	jne    c0013db4 <Semaphore::release()+0x6c>
c0013d96:	66 90                	xchg   ax,ax
c0013d98:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013d9d:	48                   	dec    eax
c0013d9e:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013da3:	75 03                	jne    c0013da8 <Semaphore::release()+0x60>
c0013da5:	fb                   	sti    
c0013da6:	66 90                	xchg   ax,ax
c0013da8:	83 c4 0c             	add    esp,0xc
c0013dab:	c3                   	ret    
c0013dac:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013daf:	eb d3                	jmp    c0013d84 <Semaphore::release()+0x3c>
c0013db1:	8d 76 00             	lea    esi,[esi+0x0]
c0013db4:	c7 05 40 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023740,0x0
c0013dbe:	e8 85 f5 ff ff       	call   c0013348 <schedule()>
c0013dc3:	eb d3                	jmp    c0013d98 <Semaphore::release()+0x50>
c0013dc5:	8d 76 00             	lea    esi,[esi+0x0]

c0013dc8 <__static_initialization_and_destruction_0(int, int)>:
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013dd0:	0f 85 8e 00 00 00    	jne    c0013e64 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013dd6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013dde:	0f 85 80 00 00 00    	jne    c0013e64 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013de4:	83 ec 0c             	sub    esp,0xc
c0013de7:	68 64 37 02 c0       	push   0xc0023764
c0013dec:	e8 a7 87 00 00       	call   c001c598 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013df1:	83 c4 10             	add    esp,0x10
c0013df4:	83 ec 04             	sub    esp,0x4
c0013df7:	68 30 f1 01 c0       	push   0xc001f130
c0013dfc:	68 64 37 02 c0       	push   0xc0023764
c0013e01:	68 48 c5 01 c0       	push   0xc001c548
c0013e06:	e8 03 65 ff ff       	call   c000a30e <__cxa_atexit>
c0013e0b:	83 c4 10             	add    esp,0x10
c0013e0e:	83 ec 0c             	sub    esp,0xc
c0013e11:	68 58 37 02 c0       	push   0xc0023758
c0013e16:	e8 7d 87 00 00       	call   c001c598 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e1b:	83 c4 10             	add    esp,0x10
c0013e1e:	83 ec 04             	sub    esp,0x4
c0013e21:	68 30 f1 01 c0       	push   0xc001f130
c0013e26:	68 58 37 02 c0       	push   0xc0023758
c0013e2b:	68 48 c5 01 c0       	push   0xc001c548
c0013e30:	e8 d9 64 ff ff       	call   c000a30e <__cxa_atexit>
c0013e35:	83 c4 10             	add    esp,0x10
c0013e38:	83 ec 0c             	sub    esp,0xc
c0013e3b:	68 4c 37 02 c0       	push   0xc002374c
c0013e40:	e8 53 87 00 00       	call   c001c598 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e45:	83 c4 10             	add    esp,0x10
c0013e48:	83 ec 04             	sub    esp,0x4
c0013e4b:	68 30 f1 01 c0       	push   0xc001f130
c0013e50:	68 4c 37 02 c0       	push   0xc002374c
c0013e55:	68 48 c5 01 c0       	push   0xc001c548
c0013e5a:	e8 af 64 ff ff       	call   c000a30e <__cxa_atexit>
c0013e5f:	83 c4 10             	add    esp,0x10
c0013e62:	66 90                	xchg   ax,ax
c0013e64:	90                   	nop
c0013e65:	83 c4 0c             	add    esp,0xc
c0013e68:	c3                   	ret    
c0013e69:	8d 76 00             	lea    esi,[esi+0x0]

c0013e6c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013e6c:	83 ec 0c             	sub    esp,0xc
c0013e6f:	83 ec 08             	sub    esp,0x8
c0013e72:	68 ff ff 00 00       	push   0xffff
c0013e77:	6a 01                	push   0x1
c0013e79:	e8 4a ff ff ff       	call   c0013dc8 <__static_initialization_and_destruction_0(int, int)>
c0013e7e:	83 c4 10             	add    esp,0x10
c0013e81:	83 c4 0c             	add    esp,0xc
c0013e84:	c3                   	ret    

c0013e85 <Vm::inbv(unsigned short)>:
c0013e85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e89:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013e8e:	75 06                	jne    c0013e96 <Vm::inbv(unsigned short)+0x11>
c0013e90:	a0 ac 37 02 c0       	mov    al,ds:0xc00237ac
c0013e95:	c3                   	ret    
c0013e96:	ec                   	in     al,dx
c0013e97:	c3                   	ret    

c0013e98 <Vm::outbv(unsigned short, unsigned char)>:
c0013e98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ea0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013ea5:	75 25                	jne    c0013ecc <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013ea7:	8b 0d ac 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237ac
c0013ead:	8d 51 01             	lea    edx,[ecx+0x1]
c0013eb0:	88 81 c0 37 02 c0    	mov    BYTE PTR [ecx-0x3ffdc840],al
c0013eb6:	89 15 ac 37 02 c0    	mov    DWORD PTR ds:0xc00237ac,edx
c0013ebc:	83 fa 20             	cmp    edx,0x20
c0013ebf:	75 0c                	jne    c0013ecd <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013ec1:	c7 05 ac 37 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00237ac,0x1f
c0013ecb:	c3                   	ret    
c0013ecc:	ee                   	out    dx,al
c0013ecd:	c3                   	ret    

c0013ece <Vm::realToLinear(unsigned short, unsigned short)>:
c0013ece:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013ed3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013ed8:	c1 e0 04             	shl    eax,0x4
c0013edb:	01 d0                	add    eax,edx
c0013edd:	c3                   	ret    

c0013ede <Vm::getSegment(unsigned int)>:
c0013ede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ee2:	c1 e8 10             	shr    eax,0x10
c0013ee5:	c3                   	ret    

c0013ee6 <Vm::getOffset(unsigned int)>:
c0013ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eea:	c3                   	ret    

c0013eeb <Vm::mainloop2()>:
c0013eeb:	83 ec 18             	sub    esp,0x18
c0013eee:	fa                   	cli    
c0013eef:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013ef5:	6a 02                	push   0x2
c0013ef7:	c6 05 a5 37 02 c0 01 	mov    BYTE PTR ds:0xc00237a5,0x1
c0013efe:	e8 19 f6 ff ff       	call   c001351c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f08:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013f0c:	52                   	push   edx
c0013f0d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013f11:	52                   	push   edx
c0013f12:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013f16:	52                   	push   edx
c0013f17:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013f1b:	50                   	push   eax
c0013f1c:	e8 ee c2 fe ff       	call   c000020f <goToVM86>
c0013f21:	83 c4 2c             	add    esp,0x2c
c0013f24:	c3                   	ret    

c0013f25 <Vm::mainVm8086Loop(void*)>:
c0013f25:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013f2a:	48                   	dec    eax
c0013f2b:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013f30:	75 01                	jne    c0013f33 <Vm::mainVm8086Loop(void*)+0xe>
c0013f32:	fb                   	sti    
c0013f33:	eb b6                	jmp    c0013eeb <Vm::mainloop2()>

c0013f35 <Vm::mainloop3(unsigned long)>:
c0013f35:	83 ec 18             	sub    esp,0x18
c0013f38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f3c:	fa                   	cli    
c0013f3d:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013f43:	6a 02                	push   0x2
c0013f45:	c6 05 a4 37 02 c0 01 	mov    BYTE PTR ds:0xc00237a4,0x1
c0013f4c:	a3 a0 37 02 c0       	mov    ds:0xc00237a0,eax
c0013f51:	e8 c6 f5 ff ff       	call   c001351c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f56:	83 c4 1c             	add    esp,0x1c
c0013f59:	eb 90                	jmp    c0013eeb <Vm::mainloop2()>

c0013f5b <Vm::initialise8086()>:
c0013f5b:	83 ec 0c             	sub    esp,0xc
c0013f5e:	68 80 00 00 00       	push   0x80
c0013f63:	6a 00                	push   0x0
c0013f65:	68 25 3f 01 c0       	push   0xc0013f25
c0013f6a:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c0013f70:	e8 b3 f1 ff ff       	call   c0013128 <Process::createThread(void (*)(void*), void*, int)>
c0013f75:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013f7c:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013f81:	68 00 01 00 00       	push   0x100
c0013f86:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0013f8b:	6a 00                	push   0x0
c0013f8d:	6a 00                	push   0x0
c0013f8f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f95:	e8 f6 5b ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f9a:	83 c4 2c             	add    esp,0x2c
c0013f9d:	c3                   	ret    

c0013f9e <Vm::finish8086()>:
c0013f9e:	53                   	push   ebx
c0013f9f:	83 ec 08             	sub    esp,0x8
c0013fa2:	fa                   	cli    
c0013fa3:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0013fa9:	80 3d a4 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237a4,0x0
c0013fb0:	75 15                	jne    c0013fc7 <Vm::finish8086()+0x29>
c0013fb2:	e8 91 f3 ff ff       	call   c0013348 <schedule()>
c0013fb7:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013fbc:	48                   	dec    eax
c0013fbd:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013fc2:	75 de                	jne    c0013fa2 <Vm::finish8086()+0x4>
c0013fc4:	fb                   	sti    
c0013fc5:	eb db                	jmp    c0013fa2 <Vm::finish8086()+0x4>
c0013fc7:	83 ec 0c             	sub    esp,0xc
c0013fca:	8b 1d a0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a0
c0013fd0:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c0013fd6:	c6 05 a4 37 02 c0 00 	mov    BYTE PTR ds:0xc00237a4,0x0
c0013fdd:	e8 2a f8 ff ff       	call   c001380c <unblockTask(ThreadControlBlock*)>
c0013fe2:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013fe7:	83 c4 10             	add    esp,0x10
c0013fea:	8d 50 ff             	lea    edx,[eax-0x1]
c0013fed:	89 15 48 37 02 c0    	mov    DWORD PTR ds:0xc0023748,edx
c0013ff3:	85 d2                	test   edx,edx
c0013ff5:	75 01                	jne    c0013ff8 <Vm::finish8086()+0x5a>
c0013ff7:	fb                   	sti    
c0013ff8:	89 d8                	mov    eax,ebx
c0013ffa:	83 c4 08             	add    esp,0x8
c0013ffd:	5b                   	pop    ebx
c0013ffe:	c3                   	ret    

c0013fff <Vm::getOutput8086(unsigned char*)>:
c0013fff:	57                   	push   edi
c0014000:	8b 0d ac 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237ac
c0014006:	56                   	push   esi
c0014007:	be c0 37 02 c0       	mov    esi,0xc00237c0
c001400c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014010:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014012:	a1 ac 37 02 c0       	mov    eax,ds:0xc00237ac
c0014017:	5e                   	pop    esi
c0014018:	c7 05 ac 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ac,0x0
c0014022:	5f                   	pop    edi
c0014023:	c3                   	ret    

c0014024 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014024:	55                   	push   ebp
c0014025:	57                   	push   edi
c0014026:	56                   	push   esi
c0014027:	53                   	push   ebx
c0014028:	83 ec 0c             	sub    esp,0xc
c001402b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001402f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014033:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014037:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001403b:	fa                   	cli    
c001403c:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c0014042:	80 3d a5 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237a5,0x0
c0014049:	75 15                	jne    c0014060 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001404b:	e8 f8 f2 ff ff       	call   c0013348 <schedule()>
c0014050:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0014055:	48                   	dec    eax
c0014056:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001405b:	75 de                	jne    c001403b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001405d:	fb                   	sti    
c001405e:	eb db                	jmp    c001403b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014060:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0014065:	c7 05 ac 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ac,0x0
c001406f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014073:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0014077:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001407b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001407f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014083:	0f b7 ff             	movzx  edi,di
c0014086:	0f b7 f6             	movzx  esi,si
c0014089:	50                   	push   eax
c001408a:	6a 20                	push   0x20
c001408c:	6a 00                	push   0x0
c001408e:	68 c0 37 02 c0       	push   0xc00237c0
c0014093:	e8 38 c4 fe ff       	call   c00004d0 <memset>
c0014098:	5a                   	pop    edx
c0014099:	59                   	pop    ecx
c001409a:	57                   	push   edi
c001409b:	56                   	push   esi
c001409c:	e8 2d fe ff ff       	call   c0013ece <Vm::realToLinear(unsigned short, unsigned short)>
c00140a1:	83 c4 10             	add    esp,0x10
c00140a4:	89 c7                	mov    edi,eax
c00140a6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00140aa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00140ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140b0:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00140b5:	c6 05 a5 37 02 c0 00 	mov    BYTE PTR ds:0xc00237a5,0x0
c00140bc:	48                   	dec    eax
c00140bd:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00140c2:	75 01                	jne    c00140c5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00140c4:	fb                   	sti    
c00140c5:	83 ec 0c             	sub    esp,0xc
c00140c8:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c00140ce:	e8 39 f7 ff ff       	call   c001380c <unblockTask(ThreadControlBlock*)>
c00140d3:	83 c4 1c             	add    esp,0x1c
c00140d6:	b0 01                	mov    al,0x1
c00140d8:	5b                   	pop    ebx
c00140d9:	5e                   	pop    esi
c00140da:	5f                   	pop    edi
c00140db:	5d                   	pop    ebp
c00140dc:	c3                   	ret    

c00140dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00140dd:	55                   	push   ebp
c00140de:	57                   	push   edi
c00140df:	56                   	push   esi
c00140e0:	53                   	push   ebx
c00140e1:	83 ec 2c             	sub    esp,0x2c
c00140e4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00140e8:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00140ec:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00140f0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00140f4:	fa                   	cli    
c00140f5:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c00140fb:	0f b6 35 a5 37 02 c0 	movzx  esi,BYTE PTR ds:0xc00237a5
c0014102:	89 f0                	mov    eax,esi
c0014104:	84 c0                	test   al,al
c0014106:	75 1d                	jne    c0014125 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014108:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001410c:	e8 37 f2 ff ff       	call   c0013348 <schedule()>
c0014111:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0014116:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001411a:	48                   	dec    eax
c001411b:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0014120:	75 d2                	jne    c00140f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014122:	fb                   	sti    
c0014123:	eb cf                	jmp    c00140f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014125:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001412a:	c7 05 ac 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ac,0x0
c0014134:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014138:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001413c:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014140:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014144:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014148:	50                   	push   eax
c0014149:	6a 20                	push   0x20
c001414b:	6a 00                	push   0x0
c001414d:	68 c0 37 02 c0       	push   0xc00237c0
c0014152:	e8 79 c3 fe ff       	call   c00004d0 <memset>
c0014157:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001415e:	e8 56 36 ff ff       	call   c00077b9 <malloc>
c0014163:	83 c4 0c             	add    esp,0xc
c0014166:	89 c3                	mov    ebx,eax
c0014168:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c001416e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014172:	50                   	push   eax
c0014173:	e8 52 68 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0014178:	83 c4 10             	add    esp,0x10
c001417b:	85 db                	test   ebx,ebx
c001417d:	75 0a                	jne    c0014189 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001417f:	83 ec 0c             	sub    esp,0xc
c0014182:	68 a8 e6 01 c0       	push   0xc001e6a8
c0014187:	eb 3e                	jmp    c00141c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014189:	50                   	push   eax
c001418a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001418e:	50                   	push   eax
c001418f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014193:	50                   	push   eax
c0014194:	53                   	push   ebx
c0014195:	e8 9c 6b ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c001419a:	83 c4 10             	add    esp,0x10
c001419d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00141a2:	74 0a                	je     c00141ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	68 bc e6 01 c0       	push   0xc001e6bc
c00141ac:	eb 19                	jmp    c00141c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00141ae:	51                   	push   ecx
c00141af:	51                   	push   ecx
c00141b0:	6a 01                	push   0x1
c00141b2:	53                   	push   ebx
c00141b3:	e8 d2 68 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c00141b8:	83 c4 10             	add    esp,0x10
c00141bb:	85 c0                	test   eax,eax
c00141bd:	74 24                	je     c00141e3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00141bf:	83 ec 0c             	sub    esp,0xc
c00141c2:	68 d5 e6 01 c0       	push   0xc001e6d5
c00141c7:	e8 6b bf ff ff       	call   c0010137 <KePanic(char const*)>
c00141cc:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00141d1:	83 c4 10             	add    esp,0x10
c00141d4:	48                   	dec    eax
c00141d5:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c00141da:	85 c0                	test   eax,eax
c00141dc:	75 01                	jne    c00141df <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00141de:	fb                   	sti    
c00141df:	31 f6                	xor    esi,esi
c00141e1:	eb 58                	jmp    c001423b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00141e3:	0f b7 ed             	movzx  ebp,bp
c00141e6:	50                   	push   eax
c00141e7:	0f b7 ff             	movzx  edi,di
c00141ea:	50                   	push   eax
c00141eb:	55                   	push   ebp
c00141ec:	57                   	push   edi
c00141ed:	e8 dc fc ff ff       	call   c0013ece <Vm::realToLinear(unsigned short, unsigned short)>
c00141f2:	5a                   	pop    edx
c00141f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00141f5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00141f9:	51                   	push   ecx
c00141fa:	50                   	push   eax
c00141fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00141ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014203:	53                   	push   ebx
c0014204:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014207:	83 c4 14             	add    esp,0x14
c001420a:	53                   	push   ebx
c001420b:	e8 d8 68 ff ff       	call   c000aae8 <File::close()>
c0014210:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0014215:	83 c4 10             	add    esp,0x10
c0014218:	48                   	dec    eax
c0014219:	c6 05 a5 37 02 c0 00 	mov    BYTE PTR ds:0xc00237a5,0x0
c0014220:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0014225:	85 c0                	test   eax,eax
c0014227:	75 01                	jne    c001422a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014229:	fb                   	sti    
c001422a:	83 ec 0c             	sub    esp,0xc
c001422d:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c0014233:	e8 d4 f5 ff ff       	call   c001380c <unblockTask(ThreadControlBlock*)>
c0014238:	83 c4 10             	add    esp,0x10
c001423b:	83 c4 2c             	add    esp,0x2c
c001423e:	89 f0                	mov    eax,esi
c0014240:	5b                   	pop    ebx
c0014241:	5e                   	pop    esi
c0014242:	5f                   	pop    edi
c0014243:	5d                   	pop    ebp
c0014244:	c3                   	ret    

c0014245 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014245:	57                   	push   edi
c0014246:	56                   	push   esi
c0014247:	53                   	push   ebx
c0014248:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001424c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014250:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014254:	83 e8 06             	sub    eax,0x6
c0014257:	0f b7 c0             	movzx  eax,ax
c001425a:	50                   	push   eax
c001425b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014260:	50                   	push   eax
c0014261:	e8 68 fc ff ff       	call   c0013ece <Vm::realToLinear(unsigned short, unsigned short)>
c0014266:	5a                   	pop    edx
c0014267:	5e                   	pop    esi
c0014268:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001426b:	8d 56 fa             	lea    edx,[esi-0x6]
c001426e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014274:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0014277:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001427a:	83 c2 02             	add    edx,0x2
c001427d:	66 89 10             	mov    WORD PTR [eax],dx
c0014280:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014283:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014287:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001428a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001428e:	89 d6                	mov    esi,edx
c0014290:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014296:	66 81 e6 ff fd       	and    si,0xfdff
c001429b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001429f:	74 07                	je     c00142a8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00142a1:	89 d6                	mov    esi,edx
c00142a3:	66 81 ce 00 02       	or     si,0x200
c00142a8:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00142ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142b1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00142b5:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00142bd:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00142c0:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00142c8:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00142cb:	5b                   	pop    ebx
c00142cc:	5e                   	pop    esi
c00142cd:	5f                   	pop    edi
c00142ce:	c3                   	ret    

c00142cf <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00142cf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142d4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142d9:	c1 e0 04             	shl    eax,0x4
c00142dc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00142df:	c3                   	ret    

c00142e0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00142e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142ea:	c1 e0 04             	shl    eax,0x4
c00142ed:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00142f1:	c3                   	ret    

c00142f2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00142f2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142f7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142fc:	c1 e0 04             	shl    eax,0x4
c00142ff:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014302:	c3                   	ret    

c0014303 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014303:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014308:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001430d:	c1 e0 04             	shl    eax,0x4
c0014310:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014314:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014317:	c3                   	ret    

c0014318 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014318:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001431d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014322:	c1 e0 04             	shl    eax,0x4
c0014325:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014329:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001432d:	c3                   	ret    

c001432e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001432e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014333:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014338:	c1 e0 04             	shl    eax,0x4
c001433b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001433f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014342:	c3                   	ret    

c0014343 <Vm::faultHandler(regs*)>:
c0014343:	55                   	push   ebp
c0014344:	57                   	push   edi
c0014345:	56                   	push   esi
c0014346:	53                   	push   ebx
c0014347:	83 ec 1c             	sub    esp,0x1c
c001434a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001434e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014351:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014355:	0f b7 f8             	movzx  edi,ax
c0014358:	52                   	push   edx
c0014359:	0f b7 c0             	movzx  eax,ax
c001435c:	50                   	push   eax
c001435d:	e8 6c fb ff ff       	call   c0013ece <Vm::realToLinear(unsigned short, unsigned short)>
c0014362:	5a                   	pop    edx
c0014363:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014366:	59                   	pop    ecx
c0014367:	89 c1                	mov    ecx,eax
c0014369:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001436c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014370:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014375:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014379:	0f b7 c5             	movzx  eax,bp
c001437c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014380:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014384:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014388:	e8 41 fb ff ff       	call   c0013ece <Vm::realToLinear(unsigned short, unsigned short)>
c001438d:	5e                   	pop    esi
c001438e:	be 06 00 00 00       	mov    esi,0x6
c0014393:	5a                   	pop    edx
c0014394:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014399:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001439e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00143a1:	80 fa 9d             	cmp    dl,0x9d
c00143a4:	0f 84 2c 02 00 00    	je     c00145d6 <Vm::faultHandler(regs*)+0x293>
c00143aa:	0f 87 91 00 00 00    	ja     c0014441 <Vm::faultHandler(regs*)+0xfe>
c00143b0:	80 fa 66             	cmp    dl,0x66
c00143b3:	0f 84 98 01 00 00    	je     c0014551 <Vm::faultHandler(regs*)+0x20e>
c00143b9:	77 47                	ja     c0014402 <Vm::faultHandler(regs*)+0xbf>
c00143bb:	80 fa 36             	cmp    dl,0x36
c00143be:	0f 84 80 01 00 00    	je     c0014544 <Vm::faultHandler(regs*)+0x201>
c00143c4:	77 1a                	ja     c00143e0 <Vm::faultHandler(regs*)+0x9d>
c00143c6:	80 fa 26             	cmp    dl,0x26
c00143c9:	0f 84 4e 01 00 00    	je     c001451d <Vm::faultHandler(regs*)+0x1da>
c00143cf:	80 fa 2e             	cmp    dl,0x2e
c00143d2:	0f 85 e2 05 00 00    	jne    c00149ba <Vm::faultHandler(regs*)+0x677>
c00143d8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00143db:	31 f6                	xor    esi,esi
c00143dd:	41                   	inc    ecx
c00143de:	eb be                	jmp    c001439e <Vm::faultHandler(regs*)+0x5b>
c00143e0:	80 fa 64             	cmp    dl,0x64
c00143e3:	0f 84 41 01 00 00    	je     c001452a <Vm::faultHandler(regs*)+0x1e7>
c00143e9:	0f 87 48 01 00 00    	ja     c0014537 <Vm::faultHandler(regs*)+0x1f4>
c00143ef:	80 fa 3e             	cmp    dl,0x3e
c00143f2:	0f 85 c2 05 00 00    	jne    c00149ba <Vm::faultHandler(regs*)+0x677>
c00143f8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00143fb:	be 01 00 00 00       	mov    esi,0x1
c0014400:	eb db                	jmp    c00143dd <Vm::faultHandler(regs*)+0x9a>
c0014402:	80 fa 6d             	cmp    dl,0x6d
c0014405:	0f 84 ec 02 00 00    	je     c00146f7 <Vm::faultHandler(regs*)+0x3b4>
c001440b:	77 17                	ja     c0014424 <Vm::faultHandler(regs*)+0xe1>
c001440d:	80 fa 67             	cmp    dl,0x67
c0014410:	0f 84 48 01 00 00    	je     c001455e <Vm::faultHandler(regs*)+0x21b>
c0014416:	80 fa 6c             	cmp    dl,0x6c
c0014419:	0f 84 69 02 00 00    	je     c0014688 <Vm::faultHandler(regs*)+0x345>
c001441f:	e9 96 05 00 00       	jmp    c00149ba <Vm::faultHandler(regs*)+0x677>
c0014424:	80 fa 6f             	cmp    dl,0x6f
c0014427:	0f 84 f4 03 00 00    	je     c0014821 <Vm::faultHandler(regs*)+0x4de>
c001442d:	0f 82 59 03 00 00    	jb     c001478c <Vm::faultHandler(regs*)+0x449>
c0014433:	80 fa 9c             	cmp    dl,0x9c
c0014436:	0f 84 2f 01 00 00    	je     c001456b <Vm::faultHandler(regs*)+0x228>
c001443c:	e9 79 05 00 00       	jmp    c00149ba <Vm::faultHandler(regs*)+0x677>
c0014441:	80 fa ec             	cmp    dl,0xec
c0014444:	0f 84 14 05 00 00    	je     c001495e <Vm::faultHandler(regs*)+0x61b>
c001444a:	77 7b                	ja     c00144c7 <Vm::faultHandler(regs*)+0x184>
c001444c:	80 fa e4             	cmp    dl,0xe4
c001444f:	0f 84 93 04 00 00    	je     c00148e8 <Vm::faultHandler(regs*)+0x5a5>
c0014455:	77 53                	ja     c00144aa <Vm::faultHandler(regs*)+0x167>
c0014457:	80 fa cd             	cmp    dl,0xcd
c001445a:	0f 84 d9 01 00 00    	je     c0014639 <Vm::faultHandler(regs*)+0x2f6>
c0014460:	80 fa cf             	cmp    dl,0xcf
c0014463:	0f 85 51 05 00 00    	jne    c00149ba <Vm::faultHandler(regs*)+0x677>
c0014469:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001446c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001446f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014473:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014476:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001447a:	81 ca 00 02 02 00    	or     edx,0x20200
c0014480:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014483:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014487:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001448d:	66 c1 e8 09          	shr    ax,0x9
c0014491:	83 e0 01             	and    eax,0x1
c0014494:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014497:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001449a:	83 c0 06             	add    eax,0x6
c001449d:	25 ff ff 00 00       	and    eax,0xffff
c00144a2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00144a5:	e9 0c 05 00 00       	jmp    c00149b6 <Vm::faultHandler(regs*)+0x673>
c00144aa:	80 fa e6             	cmp    dl,0xe6
c00144ad:	0f 84 7f 04 00 00    	je     c0014932 <Vm::faultHandler(regs*)+0x5ef>
c00144b3:	0f 82 4b 04 00 00    	jb     c0014904 <Vm::faultHandler(regs*)+0x5c1>
c00144b9:	80 fa e7             	cmp    dl,0xe7
c00144bc:	0f 84 87 04 00 00    	je     c0014949 <Vm::faultHandler(regs*)+0x606>
c00144c2:	e9 f3 04 00 00       	jmp    c00149ba <Vm::faultHandler(regs*)+0x677>
c00144c7:	80 fa ef             	cmp    dl,0xef
c00144ca:	0f 84 d1 04 00 00    	je     c00149a1 <Vm::faultHandler(regs*)+0x65e>
c00144d0:	77 28                	ja     c00144fa <Vm::faultHandler(regs*)+0x1b7>
c00144d2:	80 fa ed             	cmp    dl,0xed
c00144d5:	0f 84 9f 04 00 00    	je     c001497a <Vm::faultHandler(regs*)+0x637>
c00144db:	80 fa ee             	cmp    dl,0xee
c00144de:	0f 85 d6 04 00 00    	jne    c00149ba <Vm::faultHandler(regs*)+0x677>
c00144e4:	50                   	push   eax
c00144e5:	50                   	push   eax
c00144e6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00144ea:	50                   	push   eax
c00144eb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00144ef:	50                   	push   eax
c00144f0:	e8 a3 f9 ff ff       	call   c0013e98 <Vm::outbv(unsigned short, unsigned char)>
c00144f5:	e9 9f 04 00 00       	jmp    c0014999 <Vm::faultHandler(regs*)+0x656>
c00144fa:	80 fa fa             	cmp    dl,0xfa
c00144fd:	0f 84 69 01 00 00    	je     c001466c <Vm::faultHandler(regs*)+0x329>
c0014503:	80 fa fb             	cmp    dl,0xfb
c0014506:	0f 84 6e 01 00 00    	je     c001467a <Vm::faultHandler(regs*)+0x337>
c001450c:	80 fa f3             	cmp    dl,0xf3
c001450f:	0f 85 a5 04 00 00    	jne    c00149ba <Vm::faultHandler(regs*)+0x677>
c0014515:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014518:	e9 c0 fe ff ff       	jmp    c00143dd <Vm::faultHandler(regs*)+0x9a>
c001451d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014520:	be 02 00 00 00       	mov    esi,0x2
c0014525:	e9 b3 fe ff ff       	jmp    c00143dd <Vm::faultHandler(regs*)+0x9a>
c001452a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001452d:	be 03 00 00 00       	mov    esi,0x3
c0014532:	e9 a6 fe ff ff       	jmp    c00143dd <Vm::faultHandler(regs*)+0x9a>
c0014537:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001453a:	be 04 00 00 00       	mov    esi,0x4
c001453f:	e9 99 fe ff ff       	jmp    c00143dd <Vm::faultHandler(regs*)+0x9a>
c0014544:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014547:	be 05 00 00 00       	mov    esi,0x5
c001454c:	e9 8c fe ff ff       	jmp    c00143dd <Vm::faultHandler(regs*)+0x9a>
c0014551:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014554:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014559:	e9 7f fe ff ff       	jmp    c00143dd <Vm::faultHandler(regs*)+0x9a>
c001455e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014561:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014566:	e9 72 fe ff ff       	jmp    c00143dd <Vm::faultHandler(regs*)+0x9a>
c001456b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001456e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014572:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014577:	74 30                	je     c00145a9 <Vm::faultHandler(regs*)+0x266>
c0014579:	83 e9 04             	sub    ecx,0x4
c001457c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014582:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014588:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001458b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001458e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014594:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014598:	0f 84 15 04 00 00    	je     c00149b3 <Vm::faultHandler(regs*)+0x670>
c001459e:	80 ce 02             	or     dh,0x2
c00145a1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00145a4:	e9 0a 04 00 00       	jmp    c00149b3 <Vm::faultHandler(regs*)+0x670>
c00145a9:	83 e9 02             	sub    ecx,0x2
c00145ac:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00145b2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00145b5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00145b9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00145bf:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00145c3:	74 05                	je     c00145ca <Vm::faultHandler(regs*)+0x287>
c00145c5:	80 ce 02             	or     dh,0x2
c00145c8:	eb 03                	jmp    c00145cd <Vm::faultHandler(regs*)+0x28a>
c00145ca:	80 e6 fd             	and    dh,0xfd
c00145cd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00145d1:	e9 dd 03 00 00       	jmp    c00149b3 <Vm::faultHandler(regs*)+0x670>
c00145d6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00145db:	74 2a                	je     c0014607 <Vm::faultHandler(regs*)+0x2c4>
c00145dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00145df:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00145e5:	81 ca 00 02 02 00    	or     edx,0x20200
c00145eb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00145ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00145f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00145f6:	c1 e8 09             	shr    eax,0x9
c00145f9:	83 e0 01             	and    eax,0x1
c00145fc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00145ff:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014602:	83 c0 04             	add    eax,0x4
c0014605:	eb 25                	jmp    c001462c <Vm::faultHandler(regs*)+0x2e9>
c0014607:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001460a:	81 ca 00 02 02 00    	or     edx,0x20200
c0014610:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014613:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014616:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001461c:	66 c1 e8 09          	shr    ax,0x9
c0014620:	83 e0 01             	and    eax,0x1
c0014623:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014626:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014629:	83 c0 02             	add    eax,0x2
c001462c:	25 ff ff 00 00       	and    eax,0xffff
c0014631:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014634:	e9 7a 03 00 00       	jmp    c00149b3 <Vm::faultHandler(regs*)+0x670>
c0014639:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001463d:	3c ee                	cmp    al,0xee
c001463f:	75 10                	jne    c0014651 <Vm::faultHandler(regs*)+0x30e>
c0014641:	83 ec 0c             	sub    esp,0xc
c0014644:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014647:	e8 e9 f8 ff ff       	call   c0013f35 <Vm::mainloop3(unsigned long)>
c001464c:	e9 4b 03 00 00       	jmp    c001499c <Vm::faultHandler(regs*)+0x659>
c0014651:	83 ec 0c             	sub    esp,0xc
c0014654:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001465c:	51                   	push   ecx
c001465d:	50                   	push   eax
c001465e:	53                   	push   ebx
c001465f:	e8 e1 fb ff ff       	call   c0014245 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014664:	83 c4 20             	add    esp,0x20
c0014667:	e9 4a 03 00 00       	jmp    c00149b6 <Vm::faultHandler(regs*)+0x673>
c001466c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014671:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014675:	e9 39 03 00 00       	jmp    c00149b3 <Vm::faultHandler(regs*)+0x670>
c001467a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001467f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014683:	e9 2b 03 00 00       	jmp    c00149b3 <Vm::faultHandler(regs*)+0x670>
c0014688:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001468b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014690:	74 2b                	je     c00146bd <Vm::faultHandler(regs*)+0x37a>
c0014692:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014699:	76 22                	jbe    c00146bd <Vm::faultHandler(regs*)+0x37a>
c001469b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001469f:	50                   	push   eax
c00146a0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00146a4:	50                   	push   eax
c00146a5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00146a9:	50                   	push   eax
c00146aa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00146ae:	50                   	push   eax
c00146af:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00146b3:	50                   	push   eax
c00146b4:	6a 6c                	push   0x6c
c00146b6:	6a 6c                	push   0x6c
c00146b8:	e9 b9 01 00 00       	jmp    c0014876 <Vm::faultHandler(regs*)+0x533>
c00146bd:	83 ec 0c             	sub    esp,0xc
c00146c0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00146c4:	0f b7 f6             	movzx  esi,si
c00146c7:	50                   	push   eax
c00146c8:	e8 b8 f7 ff ff       	call   c0013e85 <Vm::inbv(unsigned short)>
c00146cd:	83 c4 0c             	add    esp,0xc
c00146d0:	0f b6 c0             	movzx  eax,al
c00146d3:	50                   	push   eax
c00146d4:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00146d8:	50                   	push   eax
c00146d9:	56                   	push   esi
c00146da:	e8 24 fc ff ff       	call   c0014303 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00146df:	83 c4 10             	add    esp,0x10
c00146e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00146e5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00146e9:	74 03                	je     c00146ee <Vm::faultHandler(regs*)+0x3ab>
c00146eb:	48                   	dec    eax
c00146ec:	eb 01                	jmp    c00146ef <Vm::faultHandler(regs*)+0x3ac>
c00146ee:	40                   	inc    eax
c00146ef:	0f b7 c0             	movzx  eax,ax
c00146f2:	e9 8d 00 00 00       	jmp    c0014784 <Vm::faultHandler(regs*)+0x441>
c00146f7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00146fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00146fd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014702:	74 29                	je     c001472d <Vm::faultHandler(regs*)+0x3ea>
c0014704:	3d ff ff 00 00       	cmp    eax,0xffff
c0014709:	76 22                	jbe    c001472d <Vm::faultHandler(regs*)+0x3ea>
c001470b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001470f:	50                   	push   eax
c0014710:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014714:	50                   	push   eax
c0014715:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014719:	50                   	push   eax
c001471a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001471e:	50                   	push   eax
c001471f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014723:	50                   	push   eax
c0014724:	6a 6d                	push   0x6d
c0014726:	6a 6d                	push   0x6d
c0014728:	e9 49 01 00 00       	jmp    c0014876 <Vm::faultHandler(regs*)+0x533>
c001472d:	0f b7 c8             	movzx  ecx,ax
c0014730:	0f b7 f6             	movzx  esi,si
c0014733:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014736:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001473b:	74 20                	je     c001475d <Vm::faultHandler(regs*)+0x41a>
c001473d:	ed                   	in     eax,dx
c001473e:	55                   	push   ebp
c001473f:	50                   	push   eax
c0014740:	51                   	push   ecx
c0014741:	56                   	push   esi
c0014742:	e8 e7 fb ff ff       	call   c001432e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014747:	83 c4 10             	add    esp,0x10
c001474a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001474d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014751:	74 05                	je     c0014758 <Vm::faultHandler(regs*)+0x415>
c0014753:	83 e8 04             	sub    eax,0x4
c0014756:	eb 27                	jmp    c001477f <Vm::faultHandler(regs*)+0x43c>
c0014758:	83 c0 04             	add    eax,0x4
c001475b:	eb 22                	jmp    c001477f <Vm::faultHandler(regs*)+0x43c>
c001475d:	66 ed                	in     ax,dx
c001475f:	0f b7 c0             	movzx  eax,ax
c0014762:	57                   	push   edi
c0014763:	50                   	push   eax
c0014764:	51                   	push   ecx
c0014765:	56                   	push   esi
c0014766:	e8 ad fb ff ff       	call   c0014318 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001476b:	83 c4 10             	add    esp,0x10
c001476e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014771:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014775:	74 05                	je     c001477c <Vm::faultHandler(regs*)+0x439>
c0014777:	83 e8 02             	sub    eax,0x2
c001477a:	eb 03                	jmp    c001477f <Vm::faultHandler(regs*)+0x43c>
c001477c:	83 c0 02             	add    eax,0x2
c001477f:	25 ff ff 00 00       	and    eax,0xffff
c0014784:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014787:	e9 27 02 00 00       	jmp    c00149b3 <Vm::faultHandler(regs*)+0x670>
c001478c:	8d 46 ff             	lea    eax,[esi-0x1]
c001478f:	3c 05                	cmp    al,0x5
c0014791:	77 24                	ja     c00147b7 <Vm::faultHandler(regs*)+0x474>
c0014793:	0f b6 c0             	movzx  eax,al
c0014796:	ff 24 85 48 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe18b8]
c001479d:	0f b7 fd             	movzx  edi,bp
c00147a0:	eb 15                	jmp    c00147b7 <Vm::faultHandler(regs*)+0x474>
c00147a2:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00147a6:	eb 0f                	jmp    c00147b7 <Vm::faultHandler(regs*)+0x474>
c00147a8:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00147ac:	eb 09                	jmp    c00147b7 <Vm::faultHandler(regs*)+0x474>
c00147ae:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00147b2:	eb 03                	jmp    c00147b7 <Vm::faultHandler(regs*)+0x474>
c00147b4:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00147b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00147ba:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00147bf:	74 29                	je     c00147ea <Vm::faultHandler(regs*)+0x4a7>
c00147c1:	3d ff ff 00 00       	cmp    eax,0xffff
c00147c6:	76 22                	jbe    c00147ea <Vm::faultHandler(regs*)+0x4a7>
c00147c8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00147cc:	50                   	push   eax
c00147cd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00147d1:	50                   	push   eax
c00147d2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00147d6:	50                   	push   eax
c00147d7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00147db:	50                   	push   eax
c00147dc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00147e0:	50                   	push   eax
c00147e1:	6a 6e                	push   0x6e
c00147e3:	6a 6e                	push   0x6e
c00147e5:	e9 8c 00 00 00       	jmp    c0014876 <Vm::faultHandler(regs*)+0x533>
c00147ea:	0f b7 c0             	movzx  eax,ax
c00147ed:	52                   	push   edx
c00147ee:	52                   	push   edx
c00147ef:	50                   	push   eax
c00147f0:	57                   	push   edi
c00147f1:	e8 d9 fa ff ff       	call   c00142cf <Vm::readByteFromReal(unsigned short, unsigned short)>
c00147f6:	59                   	pop    ecx
c00147f7:	0f b6 c0             	movzx  eax,al
c00147fa:	5e                   	pop    esi
c00147fb:	50                   	push   eax
c00147fc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014800:	50                   	push   eax
c0014801:	e8 92 f6 ff ff       	call   c0013e98 <Vm::outbv(unsigned short, unsigned char)>
c0014806:	83 c4 10             	add    esp,0x10
c0014809:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001480c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014810:	74 03                	je     c0014815 <Vm::faultHandler(regs*)+0x4d2>
c0014812:	48                   	dec    eax
c0014813:	eb 01                	jmp    c0014816 <Vm::faultHandler(regs*)+0x4d3>
c0014815:	40                   	inc    eax
c0014816:	0f b7 c0             	movzx  eax,ax
c0014819:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001481c:	e9 92 01 00 00       	jmp    c00149b3 <Vm::faultHandler(regs*)+0x670>
c0014821:	8d 46 ff             	lea    eax,[esi-0x1]
c0014824:	3c 05                	cmp    al,0x5
c0014826:	77 1f                	ja     c0014847 <Vm::faultHandler(regs*)+0x504>
c0014828:	0f b6 c0             	movzx  eax,al
c001482b:	ff 24 85 60 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe18a0]
c0014832:	89 ef                	mov    edi,ebp
c0014834:	eb 11                	jmp    c0014847 <Vm::faultHandler(regs*)+0x504>
c0014836:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014839:	eb 0c                	jmp    c0014847 <Vm::faultHandler(regs*)+0x504>
c001483b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001483e:	eb 07                	jmp    c0014847 <Vm::faultHandler(regs*)+0x504>
c0014840:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014843:	eb 02                	jmp    c0014847 <Vm::faultHandler(regs*)+0x504>
c0014845:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014847:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001484a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001484f:	74 37                	je     c0014888 <Vm::faultHandler(regs*)+0x545>
c0014851:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014857:	76 2f                	jbe    c0014888 <Vm::faultHandler(regs*)+0x545>
c0014859:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001485d:	50                   	push   eax
c001485e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014862:	50                   	push   eax
c0014863:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014867:	50                   	push   eax
c0014868:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001486c:	50                   	push   eax
c001486d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014871:	50                   	push   eax
c0014872:	6a 6f                	push   0x6f
c0014874:	6a 6f                	push   0x6f
c0014876:	68 ee e6 01 c0       	push   0xc001e6ee
c001487b:	e8 d4 5b ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014880:	83 c4 20             	add    esp,0x20
c0014883:	e9 86 01 00 00       	jmp    c0014a0e <Vm::faultHandler(regs*)+0x6cb>
c0014888:	0f b7 d7             	movzx  edx,di
c001488b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001488e:	0f b7 c6             	movzx  eax,si
c0014891:	81 e1 00 04 00 00    	and    ecx,0x400
c0014897:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001489a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001489f:	74 1d                	je     c00148be <Vm::faultHandler(regs*)+0x57b>
c00148a1:	55                   	push   ebp
c00148a2:	55                   	push   ebp
c00148a3:	50                   	push   eax
c00148a4:	52                   	push   edx
c00148a5:	e8 48 fa ff ff       	call   c00142f2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00148aa:	83 c4 10             	add    esp,0x10
c00148ad:	89 fa                	mov    edx,edi
c00148af:	ef                   	out    dx,eax
c00148b0:	85 c9                	test   ecx,ecx
c00148b2:	74 05                	je     c00148b9 <Vm::faultHandler(regs*)+0x576>
c00148b4:	83 ee 04             	sub    esi,0x4
c00148b7:	eb 21                	jmp    c00148da <Vm::faultHandler(regs*)+0x597>
c00148b9:	83 c6 04             	add    esi,0x4
c00148bc:	eb 1c                	jmp    c00148da <Vm::faultHandler(regs*)+0x597>
c00148be:	55                   	push   ebp
c00148bf:	55                   	push   ebp
c00148c0:	50                   	push   eax
c00148c1:	52                   	push   edx
c00148c2:	e8 19 fa ff ff       	call   c00142e0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00148c7:	83 c4 10             	add    esp,0x10
c00148ca:	89 fa                	mov    edx,edi
c00148cc:	66 ef                	out    dx,ax
c00148ce:	85 c9                	test   ecx,ecx
c00148d0:	74 05                	je     c00148d7 <Vm::faultHandler(regs*)+0x594>
c00148d2:	83 ee 02             	sub    esi,0x2
c00148d5:	eb 03                	jmp    c00148da <Vm::faultHandler(regs*)+0x597>
c00148d7:	83 c6 02             	add    esi,0x2
c00148da:	81 e6 ff ff 00 00    	and    esi,0xffff
c00148e0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00148e3:	e9 cb 00 00 00       	jmp    c00149b3 <Vm::faultHandler(regs*)+0x670>
c00148e8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00148ef:	83 ec 0c             	sub    esp,0xc
c00148f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148f6:	50                   	push   eax
c00148f7:	e8 89 f5 ff ff       	call   c0013e85 <Vm::inbv(unsigned short)>
c00148fc:	0f b6 c0             	movzx  eax,al
c00148ff:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014902:	eb 3f                	jmp    c0014943 <Vm::faultHandler(regs*)+0x600>
c0014904:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014909:	74 07                	je     c0014912 <Vm::faultHandler(regs*)+0x5cf>
c001490b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001490f:	ed                   	in     eax,dx
c0014910:	eb 14                	jmp    c0014926 <Vm::faultHandler(regs*)+0x5e3>
c0014912:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014915:	66 31 f6             	xor    si,si
c0014918:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001491b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001491f:	66 ed                	in     ax,dx
c0014921:	0f b7 c0             	movzx  eax,ax
c0014924:	09 f0                	or     eax,esi
c0014926:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014929:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001492d:	e9 84 00 00 00       	jmp    c00149b6 <Vm::faultHandler(regs*)+0x673>
c0014932:	52                   	push   edx
c0014933:	52                   	push   edx
c0014934:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014938:	50                   	push   eax
c0014939:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001493d:	50                   	push   eax
c001493e:	e8 55 f5 ff ff       	call   c0013e98 <Vm::outbv(unsigned short, unsigned char)>
c0014943:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014947:	eb 53                	jmp    c001499c <Vm::faultHandler(regs*)+0x659>
c0014949:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001494c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014950:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014955:	74 03                	je     c001495a <Vm::faultHandler(regs*)+0x617>
c0014957:	ef                   	out    dx,eax
c0014958:	eb cf                	jmp    c0014929 <Vm::faultHandler(regs*)+0x5e6>
c001495a:	66 ef                	out    dx,ax
c001495c:	eb cb                	jmp    c0014929 <Vm::faultHandler(regs*)+0x5e6>
c001495e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014965:	83 ec 0c             	sub    esp,0xc
c0014968:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001496c:	50                   	push   eax
c001496d:	e8 13 f5 ff ff       	call   c0013e85 <Vm::inbv(unsigned short)>
c0014972:	0f b6 c0             	movzx  eax,al
c0014975:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014978:	eb 1f                	jmp    c0014999 <Vm::faultHandler(regs*)+0x656>
c001497a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001497d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014982:	74 03                	je     c0014987 <Vm::faultHandler(regs*)+0x644>
c0014984:	ed                   	in     eax,dx
c0014985:	eb 0d                	jmp    c0014994 <Vm::faultHandler(regs*)+0x651>
c0014987:	66 ed                	in     ax,dx
c0014989:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001498c:	0f b7 c0             	movzx  eax,ax
c001498f:	66 31 d2             	xor    dx,dx
c0014992:	09 d0                	or     eax,edx
c0014994:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014997:	eb 1a                	jmp    c00149b3 <Vm::faultHandler(regs*)+0x670>
c0014999:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001499c:	83 c4 10             	add    esp,0x10
c001499f:	eb 15                	jmp    c00149b6 <Vm::faultHandler(regs*)+0x673>
c00149a1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00149a4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00149a7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149ac:	74 03                	je     c00149b1 <Vm::faultHandler(regs*)+0x66e>
c00149ae:	ef                   	out    dx,eax
c00149af:	eb 02                	jmp    c00149b3 <Vm::faultHandler(regs*)+0x670>
c00149b1:	66 ef                	out    dx,ax
c00149b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149b6:	b0 01                	mov    al,0x1
c00149b8:	eb 56                	jmp    c0014a10 <Vm::faultHandler(regs*)+0x6cd>
c00149ba:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00149be:	50                   	push   eax
c00149bf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00149c3:	50                   	push   eax
c00149c4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00149c8:	50                   	push   eax
c00149c9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00149cd:	50                   	push   eax
c00149ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00149d2:	50                   	push   eax
c00149d3:	52                   	push   edx
c00149d4:	52                   	push   edx
c00149d5:	68 1b e7 01 c0       	push   0xc001e71b
c00149da:	e8 75 5a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00149df:	83 c4 20             	add    esp,0x20
c00149e2:	83 ec 0c             	sub    esp,0xc
c00149e5:	6a 60                	push   0x60
c00149e7:	e8 99 f4 ff ff       	call   c0013e85 <Vm::inbv(unsigned short)>
c00149ec:	83 c4 10             	add    esp,0x10
c00149ef:	3c 1c                	cmp    al,0x1c
c00149f1:	74 04                	je     c00149f7 <Vm::faultHandler(regs*)+0x6b4>
c00149f3:	3c 5a                	cmp    al,0x5a
c00149f5:	75 eb                	jne    c00149e2 <Vm::faultHandler(regs*)+0x69f>
c00149f7:	3c 5a                	cmp    al,0x5a
c00149f9:	74 04                	je     c00149ff <Vm::faultHandler(regs*)+0x6bc>
c00149fb:	3c 1c                	cmp    al,0x1c
c00149fd:	75 0f                	jne    c0014a0e <Vm::faultHandler(regs*)+0x6cb>
c00149ff:	83 ec 0c             	sub    esp,0xc
c0014a02:	6a 60                	push   0x60
c0014a04:	e8 7c f4 ff ff       	call   c0013e85 <Vm::inbv(unsigned short)>
c0014a09:	83 c4 10             	add    esp,0x10
c0014a0c:	eb e9                	jmp    c00149f7 <Vm::faultHandler(regs*)+0x6b4>
c0014a0e:	31 c0                	xor    eax,eax
c0014a10:	83 c4 1c             	add    esp,0x1c
c0014a13:	5b                   	pop    ebx
c0014a14:	5e                   	pop    esi
c0014a15:	5f                   	pop    edi
c0014a16:	5d                   	pop    ebp
c0014a17:	c3                   	ret    

c0014a18 <noCopro(unsigned long)>:
c0014a18:	c3                   	ret    

c0014a19 <nmiHandler(regs*, void*)>:
c0014a19:	83 ec 0c             	sub    esp,0xc
c0014a1c:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0014a21:	83 ec 0c             	sub    esp,0xc
c0014a24:	50                   	push   eax
c0014a25:	e8 b0 25 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014a2a:	83 c4 10             	add    esp,0x10
c0014a2d:	90                   	nop
c0014a2e:	83 c4 0c             	add    esp,0xc
c0014a31:	c3                   	ret    

c0014a32 <doubleFault(regs*, void*)>:
c0014a32:	55                   	push   ebp
c0014a33:	89 e5                	mov    ebp,esp
c0014a35:	83 ec 08             	sub    esp,0x8
c0014a38:	83 ec 0c             	sub    esp,0xc
c0014a3b:	68 78 e7 01 c0       	push   0xc001e778
c0014a40:	e8 f2 b6 ff ff       	call   c0010137 <KePanic(char const*)>
c0014a45:	83 c4 10             	add    esp,0x10
c0014a48:	90                   	nop
c0014a49:	c9                   	leave  
c0014a4a:	c3                   	ret    

c0014a4b <displayDebugInfo(regs*)>:
c0014a4b:	83 ec 1c             	sub    esp,0x1c
c0014a4e:	0f 20 c0             	mov    eax,cr0
c0014a51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a55:	0f 20 d0             	mov    eax,cr2
c0014a58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a5c:	0f 20 d8             	mov    eax,cr3
c0014a5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a63:	0f 20 e0             	mov    eax,cr4
c0014a66:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a6d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014a70:	83 ec 08             	sub    esp,0x8
c0014a73:	50                   	push   eax
c0014a74:	68 94 e7 01 c0       	push   0xc001e794
c0014a79:	e8 d6 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a85:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014a88:	83 ec 08             	sub    esp,0x8
c0014a8b:	50                   	push   eax
c0014a8c:	68 85 e7 01 c0       	push   0xc001e785
c0014a91:	e8 be 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a9d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014aa0:	83 ec 08             	sub    esp,0x8
c0014aa3:	50                   	push   eax
c0014aa4:	68 90 e7 01 c0       	push   0xc001e790
c0014aa9:	e8 a6 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014aae:	83 c4 10             	add    esp,0x10
c0014ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ab8:	83 ec 08             	sub    esp,0x8
c0014abb:	50                   	push   eax
c0014abc:	68 9f e7 01 c0       	push   0xc001e79f
c0014ac1:	e8 8e 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014ac6:	83 c4 10             	add    esp,0x10
c0014ac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014acd:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014ad0:	83 ec 08             	sub    esp,0x8
c0014ad3:	50                   	push   eax
c0014ad4:	68 aa e7 01 c0       	push   0xc001e7aa
c0014ad9:	e8 76 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014ade:	83 c4 10             	add    esp,0x10
c0014ae1:	83 ec 08             	sub    esp,0x8
c0014ae4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ae8:	68 b5 e7 01 c0       	push   0xc001e7b5
c0014aed:	e8 62 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	83 ec 08             	sub    esp,0x8
c0014af8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014afc:	68 c0 e7 01 c0       	push   0xc001e7c0
c0014b01:	e8 4e 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014b06:	83 c4 10             	add    esp,0x10
c0014b09:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014b0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b14:	83 ec 0c             	sub    esp,0xc
c0014b17:	50                   	push   eax
c0014b18:	e8 da 38 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014b1d:	83 c4 10             	add    esp,0x10
c0014b20:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014b25:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b2b:	83 ec 08             	sub    esp,0x8
c0014b2e:	68 cb e7 01 c0       	push   0xc001e7cb
c0014b33:	50                   	push   eax
c0014b34:	e8 fd 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b39:	83 c4 10             	add    esp,0x10
c0014b3c:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014b41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b47:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014b4c:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b4e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014b51:	83 c2 0c             	add    edx,0xc
c0014b54:	83 ec 08             	sub    esp,0x8
c0014b57:	52                   	push   edx
c0014b58:	50                   	push   eax
c0014b59:	e8 d8 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b5e:	83 c4 10             	add    esp,0x10
c0014b61:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014b66:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b6c:	83 ec 08             	sub    esp,0x8
c0014b6f:	68 d4 e7 01 c0       	push   0xc001e7d4
c0014b74:	50                   	push   eax
c0014b75:	e8 bc 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b7a:	83 c4 10             	add    esp,0x10
c0014b7d:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014b82:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b8c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014b8f:	83 ec 08             	sub    esp,0x8
c0014b92:	52                   	push   edx
c0014b93:	50                   	push   eax
c0014b94:	e8 57 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014b99:	83 c4 10             	add    esp,0x10
c0014b9c:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014ba1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ba7:	83 ec 08             	sub    esp,0x8
c0014baa:	68 dc e7 01 c0       	push   0xc001e7dc
c0014baf:	50                   	push   eax
c0014bb0:	e8 81 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bb5:	83 c4 10             	add    esp,0x10
c0014bb8:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014bbd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bc3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bc7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014bca:	83 ec 08             	sub    esp,0x8
c0014bcd:	52                   	push   edx
c0014bce:	50                   	push   eax
c0014bcf:	e8 1c 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014bd4:	83 c4 10             	add    esp,0x10
c0014bd7:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014bdc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014be2:	83 ec 08             	sub    esp,0x8
c0014be5:	68 e4 e7 01 c0       	push   0xc001e7e4
c0014bea:	50                   	push   eax
c0014beb:	e8 46 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bf0:	83 c4 10             	add    esp,0x10
c0014bf3:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014bf8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bfe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c02:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014c05:	83 ec 08             	sub    esp,0x8
c0014c08:	52                   	push   edx
c0014c09:	50                   	push   eax
c0014c0a:	e8 e1 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c0f:	83 c4 10             	add    esp,0x10
c0014c12:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014c17:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c1d:	83 ec 08             	sub    esp,0x8
c0014c20:	68 ec e7 01 c0       	push   0xc001e7ec
c0014c25:	50                   	push   eax
c0014c26:	e8 0b 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c2b:	83 c4 10             	add    esp,0x10
c0014c2e:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014c33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c3d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014c40:	83 ec 08             	sub    esp,0x8
c0014c43:	52                   	push   edx
c0014c44:	50                   	push   eax
c0014c45:	e8 a6 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c4a:	83 c4 10             	add    esp,0x10
c0014c4d:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014c52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c58:	83 ec 08             	sub    esp,0x8
c0014c5b:	68 f4 e7 01 c0       	push   0xc001e7f4
c0014c60:	50                   	push   eax
c0014c61:	e8 d0 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c66:	83 c4 10             	add    esp,0x10
c0014c69:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014c6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c78:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014c7b:	83 ec 08             	sub    esp,0x8
c0014c7e:	52                   	push   edx
c0014c7f:	50                   	push   eax
c0014c80:	e8 6b 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c85:	83 c4 10             	add    esp,0x10
c0014c88:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014c8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c93:	83 ec 08             	sub    esp,0x8
c0014c96:	68 fc e7 01 c0       	push   0xc001e7fc
c0014c9b:	50                   	push   eax
c0014c9c:	e8 95 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ca1:	83 c4 10             	add    esp,0x10
c0014ca4:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014ca9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014caf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014cb3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014cb6:	83 ec 08             	sub    esp,0x8
c0014cb9:	52                   	push   edx
c0014cba:	50                   	push   eax
c0014cbb:	e8 30 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cc0:	83 c4 10             	add    esp,0x10
c0014cc3:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014cc8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cce:	83 ec 08             	sub    esp,0x8
c0014cd1:	68 04 e8 01 c0       	push   0xc001e804
c0014cd6:	50                   	push   eax
c0014cd7:	e8 5a 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014cdc:	83 c4 10             	add    esp,0x10
c0014cdf:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014ce4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cea:	83 ec 08             	sub    esp,0x8
c0014ced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014cf1:	50                   	push   eax
c0014cf2:	e8 f9 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cf7:	83 c4 10             	add    esp,0x10
c0014cfa:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014cff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d05:	83 ec 08             	sub    esp,0x8
c0014d08:	68 0d e8 01 c0       	push   0xc001e80d
c0014d0d:	50                   	push   eax
c0014d0e:	e8 23 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d13:	83 c4 10             	add    esp,0x10
c0014d16:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014d1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d21:	83 ec 08             	sub    esp,0x8
c0014d24:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d28:	50                   	push   eax
c0014d29:	e8 c2 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d2e:	83 c4 10             	add    esp,0x10
c0014d31:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014d36:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d3c:	83 ec 08             	sub    esp,0x8
c0014d3f:	68 15 e8 01 c0       	push   0xc001e815
c0014d44:	50                   	push   eax
c0014d45:	e8 ec 39 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014d52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d58:	83 ec 08             	sub    esp,0x8
c0014d5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014d5f:	50                   	push   eax
c0014d60:	e8 8b 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d65:	83 c4 10             	add    esp,0x10
c0014d68:	fa                   	cli    
c0014d69:	f4                   	hlt    
c0014d6a:	eb fe                	jmp    c0014d6a <displayDebugInfo(regs*)+0x31f>

c0014d6c <HalSystemIdle()>:
c0014d6c:	56                   	push   esi
c0014d6d:	53                   	push   ebx
c0014d6e:	83 ec 14             	sub    esp,0x14
c0014d71:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0014d76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d7c:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0014d82:	83 e0 04             	and    eax,0x4
c0014d85:	84 c0                	test   al,al
c0014d87:	0f 95 c0             	setne  al
c0014d8a:	84 c0                	test   al,al
c0014d8c:	74 4c                	je     c0014dda <HalSystemIdle()+0x6e>
c0014d8e:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0014d93:	83 ec 08             	sub    esp,0x8
c0014d96:	68 e1 00 00 00       	push   0xe1
c0014d9b:	50                   	push   eax
c0014d9c:	e8 51 20 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0014da1:	83 c4 10             	add    esp,0x10
c0014da4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014da8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014dac:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0014db1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014db5:	83 e2 02             	and    edx,0x2
c0014db8:	89 d3                	mov    ebx,edx
c0014dba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dbe:	83 e2 00             	and    edx,0x0
c0014dc1:	89 d6                	mov    esi,edx
c0014dc3:	56                   	push   esi
c0014dc4:	53                   	push   ebx
c0014dc5:	68 e1 00 00 00       	push   0xe1
c0014dca:	50                   	push   eax
c0014dcb:	e8 4e 20 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0014dd0:	83 c4 10             	add    esp,0x10
c0014dd3:	e8 bc b3 fe ff       	call   c0000194 <doTPAUSE>
c0014dd8:	eb 01                	jmp    c0014ddb <HalSystemIdle()+0x6f>
c0014dda:	f4                   	hlt    
c0014ddb:	90                   	nop
c0014ddc:	83 c4 14             	add    esp,0x14
c0014ddf:	5b                   	pop    ebx
c0014de0:	5e                   	pop    esi
c0014de1:	c3                   	ret    

c0014de2 <displayProgramFault(char const*)>:
c0014de2:	83 ec 0c             	sub    esp,0xc
c0014de5:	83 ec 0c             	sub    esp,0xc
c0014de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dec:	e8 63 56 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014df1:	83 c4 10             	add    esp,0x10
c0014df4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dfb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014dfe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e04:	85 c0                	test   eax,eax
c0014e06:	74 21                	je     c0014e29 <displayProgramFault(char const*)+0x47>
c0014e08:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e12:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e18:	6a 04                	push   0x4
c0014e1a:	6a 0f                	push   0xf
c0014e1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e20:	50                   	push   eax
c0014e21:	e8 82 39 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014e26:	83 c4 10             	add    esp,0x10
c0014e29:	90                   	nop
c0014e2a:	83 c4 0c             	add    esp,0xc
c0014e2d:	c3                   	ret    

c0014e2e <gpFault(regs*, void*)>:
c0014e2e:	83 ec 1c             	sub    esp,0x1c
c0014e31:	c7 05 f0 37 02 c0 43 43 01 c0 	mov    DWORD PTR ds:0xc00237f0,0xc0014343
c0014e3b:	a1 f0 37 02 c0       	mov    eax,ds:0xc00237f0
c0014e40:	85 c0                	test   eax,eax
c0014e42:	74 1c                	je     c0014e60 <gpFault(regs*, void*)+0x32>
c0014e44:	a1 f0 37 02 c0       	mov    eax,ds:0xc00237f0
c0014e49:	83 ec 0c             	sub    esp,0xc
c0014e4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e50:	ff d0                	call   eax
c0014e52:	83 c4 10             	add    esp,0x10
c0014e55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014e59:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014e5e:	75 2e                	jne    c0014e8e <gpFault(regs*, void*)+0x60>
c0014e60:	83 ec 0c             	sub    esp,0xc
c0014e63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e67:	e8 df fb ff ff       	call   c0014a4b <displayDebugInfo(regs*)>
c0014e6c:	83 c4 10             	add    esp,0x10
c0014e6f:	83 ec 0c             	sub    esp,0xc
c0014e72:	68 1d e8 01 c0       	push   0xc001e81d
c0014e77:	e8 66 ff ff ff       	call   c0014de2 <displayProgramFault(char const*)>
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	83 ec 0c             	sub    esp,0xc
c0014e82:	6a 00                	push   0x0
c0014e84:	e8 af ee ff ff       	call   c0013d38 <Thr::terminateFromIRQ(int)>
c0014e89:	83 c4 10             	add    esp,0x10
c0014e8c:	eb 01                	jmp    c0014e8f <gpFault(regs*, void*)+0x61>
c0014e8e:	90                   	nop
c0014e8f:	83 c4 1c             	add    esp,0x1c
c0014e92:	c3                   	ret    

c0014e93 <pgFault(regs*, void*)>:
c0014e93:	83 ec 1c             	sub    esp,0x1c
c0014e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e9a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e9d:	0f 20 d0             	mov    eax,cr2
c0014ea0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014ea8:	83 ec 04             	sub    esp,0x4
c0014eab:	52                   	push   edx
c0014eac:	50                   	push   eax
c0014ead:	68 fc e8 01 c0       	push   0xc001e8fc
c0014eb2:	e8 9d 55 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014eb7:	83 c4 10             	add    esp,0x10
c0014eba:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014ebf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ec1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ec4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014eca:	0f 20 d2             	mov    edx,cr2
c0014ecd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014ed1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ed5:	83 ec 08             	sub    esp,0x8
c0014ed8:	52                   	push   edx
c0014ed9:	50                   	push   eax
c0014eda:	e8 a7 51 ff ff       	call   c000a086 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014edf:	83 c4 10             	add    esp,0x10
c0014ee2:	84 c0                	test   al,al
c0014ee4:	75 2e                	jne    c0014f14 <pgFault(regs*, void*)+0x81>
c0014ee6:	83 ec 0c             	sub    esp,0xc
c0014ee9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014eed:	e8 59 fb ff ff       	call   c0014a4b <displayDebugInfo(regs*)>
c0014ef2:	83 c4 10             	add    esp,0x10
c0014ef5:	83 ec 0c             	sub    esp,0xc
c0014ef8:	68 36 e8 01 c0       	push   0xc001e836
c0014efd:	e8 e0 fe ff ff       	call   c0014de2 <displayProgramFault(char const*)>
c0014f02:	83 c4 10             	add    esp,0x10
c0014f05:	83 ec 0c             	sub    esp,0xc
c0014f08:	6a 00                	push   0x0
c0014f0a:	e8 29 ee ff ff       	call   c0013d38 <Thr::terminateFromIRQ(int)>
c0014f0f:	83 c4 10             	add    esp,0x10
c0014f12:	eb 01                	jmp    c0014f15 <pgFault(regs*, void*)+0x82>
c0014f14:	90                   	nop
c0014f15:	83 c4 1c             	add    esp,0x1c
c0014f18:	c3                   	ret    

c0014f19 <otherISRHandler(regs*, void*)>:
c0014f19:	83 ec 0c             	sub    esp,0xc
c0014f1c:	83 ec 0c             	sub    esp,0xc
c0014f1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f23:	e8 23 fb ff ff       	call   c0014a4b <displayDebugInfo(regs*)>
c0014f28:	83 c4 10             	add    esp,0x10
c0014f2b:	83 ec 0c             	sub    esp,0xc
c0014f2e:	68 24 e9 01 c0       	push   0xc001e924
c0014f33:	e8 aa fe ff ff       	call   c0014de2 <displayProgramFault(char const*)>
c0014f38:	83 c4 10             	add    esp,0x10
c0014f3b:	83 ec 0c             	sub    esp,0xc
c0014f3e:	6a 00                	push   0x0
c0014f40:	e8 f3 ed ff ff       	call   c0013d38 <Thr::terminateFromIRQ(int)>
c0014f45:	83 c4 10             	add    esp,0x10
c0014f48:	90                   	nop
c0014f49:	83 c4 0c             	add    esp,0xc
c0014f4c:	c3                   	ret    

c0014f4d <opcodeFault(regs*, void*)>:
c0014f4d:	55                   	push   ebp
c0014f4e:	89 e5                	mov    ebp,esp
c0014f50:	83 ec 08             	sub    esp,0x8
c0014f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f56:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f59:	83 ec 08             	sub    esp,0x8
c0014f5c:	50                   	push   eax
c0014f5d:	68 41 e8 01 c0       	push   0xc001e841
c0014f62:	e8 ed 54 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014f67:	83 c4 10             	add    esp,0x10
c0014f6a:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0014f6f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f75:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014f7b:	84 c0                	test   al,al
c0014f7d:	74 21                	je     c0014fa0 <opcodeFault(regs*, void*)+0x53>
c0014f7f:	83 ec 0c             	sub    esp,0xc
c0014f82:	68 4c e9 01 c0       	push   0xc001e94c
c0014f87:	e8 c8 54 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014f8c:	83 c4 10             	add    esp,0x10
c0014f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f95:	8d 50 19             	lea    edx,[eax+0x19]
c0014f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f9e:	eb 2b                	jmp    c0014fcb <opcodeFault(regs*, void*)+0x7e>
c0014fa0:	83 ec 0c             	sub    esp,0xc
c0014fa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fa6:	e8 a0 fa ff ff       	call   c0014a4b <displayDebugInfo(regs*)>
c0014fab:	83 c4 10             	add    esp,0x10
c0014fae:	83 ec 0c             	sub    esp,0xc
c0014fb1:	68 4f e8 01 c0       	push   0xc001e84f
c0014fb6:	e8 27 fe ff ff       	call   c0014de2 <displayProgramFault(char const*)>
c0014fbb:	83 c4 10             	add    esp,0x10
c0014fbe:	83 ec 0c             	sub    esp,0xc
c0014fc1:	6a 00                	push   0x0
c0014fc3:	e8 70 ed ff ff       	call   c0013d38 <Thr::terminateFromIRQ(int)>
c0014fc8:	83 c4 10             	add    esp,0x10
c0014fcb:	c9                   	leave  
c0014fcc:	c3                   	ret    

c0014fcd <i386SaveCoprocessor(void*)>:
c0014fcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fd1:	83 c0 3f             	add    eax,0x3f
c0014fd4:	83 e0 c0             	and    eax,0xffffffc0
c0014fd7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fdb:	ff 25 ec 37 02 c0    	jmp    DWORD PTR ds:0xc00237ec

c0014fe1 <i386LoadCoprocessor(void*)>:
c0014fe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fe5:	83 c0 3f             	add    eax,0x3f
c0014fe8:	83 e0 c0             	and    eax,0xffffffc0
c0014feb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fef:	ff 25 e8 37 02 c0    	jmp    DWORD PTR ds:0xc00237e8

c0014ff5 <x87EmulHandler(regs*, void*)>:
c0014ff5:	53                   	push   ebx
c0014ff6:	83 ec 08             	sub    esp,0x8
c0014ff9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ffe:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015002:	74 10                	je     c0015014 <x87EmulHandler(regs*, void*)+0x1f>
c0015004:	83 ec 0c             	sub    esp,0xc
c0015007:	68 5c e8 01 c0       	push   0xc001e85c
c001500c:	e8 26 b1 ff ff       	call   c0010137 <KePanic(char const*)>
c0015011:	83 c4 10             	add    esp,0x10
c0015014:	0f 20 c0             	mov    eax,cr0
c0015017:	a8 08                	test   al,0x8
c0015019:	74 59                	je     c0015074 <x87EmulHandler(regs*, void*)+0x7f>
c001501b:	0f 06                	clts   
c001501d:	a1 e4 37 02 c0       	mov    eax,ds:0xc00237e4
c0015022:	85 c0                	test   eax,eax
c0015024:	74 0e                	je     c0015034 <x87EmulHandler(regs*, void*)+0x3f>
c0015026:	83 ec 0c             	sub    esp,0xc
c0015029:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001502c:	e8 9c ff ff ff       	call   c0014fcd <i386SaveCoprocessor(void*)>
c0015031:	83 c4 10             	add    esp,0x10
c0015034:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001503a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001503e:	75 12                	jne    c0015052 <x87EmulHandler(regs*, void*)+0x5d>
c0015040:	83 ec 0c             	sub    esp,0xc
c0015043:	68 40 02 00 00       	push   0x240
c0015048:	e8 6c 27 ff ff       	call   c00077b9 <malloc>
c001504d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015050:	eb 10                	jmp    c0015062 <x87EmulHandler(regs*, void*)+0x6d>
c0015052:	83 ec 0c             	sub    esp,0xc
c0015055:	a1 e4 37 02 c0       	mov    eax,ds:0xc00237e4
c001505a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001505d:	e8 7f ff ff ff       	call   c0014fe1 <i386LoadCoprocessor(void*)>
c0015062:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015067:	83 c4 10             	add    esp,0x10
c001506a:	a3 e4 37 02 c0       	mov    ds:0xc00237e4,eax
c001506f:	83 c4 08             	add    esp,0x8
c0015072:	5b                   	pop    ebx
c0015073:	c3                   	ret    
c0015074:	83 ec 0c             	sub    esp,0xc
c0015077:	68 70 e8 01 c0       	push   0xc001e870
c001507c:	e8 d3 53 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0015081:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015089:	83 c4 18             	add    esp,0x18
c001508c:	5b                   	pop    ebx
c001508d:	e9 a6 ec ff ff       	jmp    c0013d38 <Thr::terminateFromIRQ(int)>

c0015092 <HalInitialiseCoprocessor()>:
c0015092:	83 ec 10             	sub    esp,0x10
c0015095:	c7 05 e4 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237e4,0x0
c001509f:	6a 00                	push   0x0
c00150a1:	68 f5 4f 01 c0       	push   0xc0014ff5
c00150a6:	6a 07                	push   0x7
c00150a8:	e8 1b 6d ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00150ad:	e8 8e 65 00 00       	call   c001b640 <avxDetect>
c00150b2:	83 c4 10             	add    esp,0x10
c00150b5:	85 c0                	test   eax,eax
c00150b7:	74 1c                	je     c00150d5 <HalInitialiseCoprocessor()+0x43>
c00150b9:	c7 05 ec 37 02 c0 6a b6 01 c0 	mov    DWORD PTR ds:0xc00237ec,0xc001b66a
c00150c3:	c7 05 e8 37 02 c0 7b b6 01 c0 	mov    DWORD PTR ds:0xc00237e8,0xc001b67b
c00150cd:	83 c4 0c             	add    esp,0xc
c00150d0:	e9 b7 65 00 00       	jmp    c001b68c <avxInit>
c00150d5:	e8 e6 67 00 00       	call   c001b8c0 <absolutelyNoChanceInHell>
c00150da:	85 c0                	test   eax,eax
c00150dc:	74 1c                	je     c00150fa <HalInitialiseCoprocessor()+0x68>
c00150de:	c7 05 ec 37 02 c0 d8 b8 01 c0 	mov    DWORD PTR ds:0xc00237ec,0xc001b8d8
c00150e8:	c7 05 e8 37 02 c0 e0 b8 01 c0 	mov    DWORD PTR ds:0xc00237e8,0xc001b8e0
c00150f2:	83 c4 0c             	add    esp,0xc
c00150f5:	e9 ee 67 00 00       	jmp    c001b8e8 <sseInit>
c00150fa:	e8 07 68 00 00       	call   c001b906 <x87Detect>
c00150ff:	85 c0                	test   eax,eax
c0015101:	74 1c                	je     c001511f <HalInitialiseCoprocessor()+0x8d>
c0015103:	c7 05 ec 37 02 c0 21 b9 01 c0 	mov    DWORD PTR ds:0xc00237ec,0xc001b921
c001510d:	c7 05 e8 37 02 c0 28 b9 01 c0 	mov    DWORD PTR ds:0xc00237e8,0xc001b928
c0015117:	83 c4 0c             	add    esp,0xc
c001511a:	e9 10 68 00 00       	jmp    c001b92f <x87Init>
c001511f:	c7 05 ec 37 02 c0 18 4a 01 c0 	mov    DWORD PTR ds:0xc00237ec,0xc0014a18
c0015129:	c7 05 e8 37 02 c0 18 4a 01 c0 	mov    DWORD PTR ds:0xc00237e8,0xc0014a18
c0015133:	0f 20 c0             	mov    eax,cr0
c0015136:	83 c8 04             	or     eax,0x4
c0015139:	0f 22 c0             	mov    cr0,eax
c001513c:	83 c4 0c             	add    esp,0xc
c001513f:	c3                   	ret    

c0015140 <HalPanic(char const*)>:
c0015140:	53                   	push   ebx
c0015141:	83 ec 10             	sub    esp,0x10
c0015144:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015148:	fa                   	cli    
c0015149:	53                   	push   ebx
c001514a:	68 86 e8 01 c0       	push   0xc001e886
c001514f:	e8 00 53 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0015154:	83 c4 0c             	add    esp,0xc
c0015157:	6a 01                	push   0x1
c0015159:	6a 0f                	push   0xf
c001515b:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c0015161:	e8 e4 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015166:	58                   	pop    eax
c0015167:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c001516d:	e8 d0 32 ff ff       	call   c0008442 <VgaText::clearScreen()>
c0015172:	5a                   	pop    edx
c0015173:	59                   	pop    ecx
c0015174:	68 ee e8 01 c0       	push   0xc001e8ee
c0015179:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c001517f:	e8 fe 30 ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015184:	83 c4 0c             	add    esp,0xc
c0015187:	6a 01                	push   0x1
c0015189:	6a 0f                	push   0xf
c001518b:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c0015191:	e8 b4 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015196:	58                   	pop    eax
c0015197:	5a                   	pop    edx
c0015198:	68 9f e8 01 c0       	push   0xc001e89f
c001519d:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151a3:	e8 8e 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151a8:	83 c4 0c             	add    esp,0xc
c00151ab:	6a 0f                	push   0xf
c00151ad:	6a 01                	push   0x1
c00151af:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151b5:	e8 90 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151ba:	59                   	pop    ecx
c00151bb:	58                   	pop    eax
c00151bc:	68 a8 e8 01 c0       	push   0xc001e8a8
c00151c1:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151c7:	e8 6a 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151cc:	83 c4 0c             	add    esp,0xc
c00151cf:	6a 01                	push   0x1
c00151d1:	6a 0f                	push   0xf
c00151d3:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151d9:	e8 6c 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151de:	58                   	pop    eax
c00151df:	5a                   	pop    edx
c00151e0:	68 ec e8 01 c0       	push   0xc001e8ec
c00151e5:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151eb:	e8 46 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151f0:	59                   	pop    ecx
c00151f1:	58                   	pop    eax
c00151f2:	68 b5 e8 01 c0       	push   0xc001e8b5
c00151f7:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c00151fd:	e8 34 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015202:	58                   	pop    eax
c0015203:	5a                   	pop    edx
c0015204:	68 ef e8 01 c0       	push   0xc001e8ef
c0015209:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c001520f:	e8 22 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015214:	59                   	pop    ecx
c0015215:	58                   	pop    eax
c0015216:	53                   	push   ebx
c0015217:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c001521d:	e8 14 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015222:	58                   	pop    eax
c0015223:	5a                   	pop    edx
c0015224:	68 ec e8 01 c0       	push   0xc001e8ec
c0015229:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c001522f:	e8 02 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015234:	83 c4 10             	add    esp,0x10
c0015237:	eb fe                	jmp    c0015237 <HalPanic(char const*)+0xf7>

c0015239 <HalQueryPerformanceCounter()>:
c0015239:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001523e:	31 d2                	xor    edx,edx
c0015240:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015246:	31 c0                	xor    eax,eax
c0015248:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001524f:	74 02                	je     c0015253 <HalQueryPerformanceCounter()+0x1a>
c0015251:	0f 31                	rdtsc  
c0015253:	c3                   	ret    

c0015254 <HalInitialise()>:
c0015254:	53                   	push   ebx
c0015255:	83 ec 08             	sub    esp,0x8
c0015258:	e8 9e 6d ff ff       	call   c000bffb <setupINTS()>
c001525d:	80 3d 60 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022d60,0x0
c0015264:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0015269:	75 07                	jne    c0015272 <HalInitialise()+0x1e>
c001526b:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015272:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015278:	83 e0 01             	and    eax,0x1
c001527b:	a2 e0 37 02 c0       	mov    ds:0xc00237e0,al
c0015280:	e8 a7 02 00 00       	call   c001552c <picOpen()>
c0015285:	80 3d e0 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237e0,0x0
c001528c:	74 0a                	je     c0015298 <HalInitialise()+0x44>
c001528e:	e8 e1 01 00 00       	call   c0015474 <picDisable()>
c0015293:	e8 26 5d 00 00       	call   c001afbe <apicOpen()>
c0015298:	bb 0f 00 00 00       	mov    ebx,0xf
c001529d:	50                   	push   eax
c001529e:	6a 00                	push   0x0
c00152a0:	68 19 4f 01 c0       	push   0xc0014f19
c00152a5:	6a 00                	push   0x0
c00152a7:	e8 1c 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152ac:	83 c4 0c             	add    esp,0xc
c00152af:	6a 00                	push   0x0
c00152b1:	68 19 4f 01 c0       	push   0xc0014f19
c00152b6:	6a 01                	push   0x1
c00152b8:	e8 0b 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152bd:	83 c4 0c             	add    esp,0xc
c00152c0:	6a 00                	push   0x0
c00152c2:	68 19 4a 01 c0       	push   0xc0014a19
c00152c7:	6a 02                	push   0x2
c00152c9:	e8 fa 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152ce:	83 c4 0c             	add    esp,0xc
c00152d1:	6a 00                	push   0x0
c00152d3:	68 19 4f 01 c0       	push   0xc0014f19
c00152d8:	6a 03                	push   0x3
c00152da:	e8 e9 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152df:	83 c4 0c             	add    esp,0xc
c00152e2:	6a 00                	push   0x0
c00152e4:	68 19 4f 01 c0       	push   0xc0014f19
c00152e9:	6a 04                	push   0x4
c00152eb:	e8 d8 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152f0:	83 c4 0c             	add    esp,0xc
c00152f3:	6a 00                	push   0x0
c00152f5:	68 19 4f 01 c0       	push   0xc0014f19
c00152fa:	6a 05                	push   0x5
c00152fc:	e8 c7 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015301:	83 c4 0c             	add    esp,0xc
c0015304:	6a 00                	push   0x0
c0015306:	68 4d 4f 01 c0       	push   0xc0014f4d
c001530b:	6a 06                	push   0x6
c001530d:	e8 b6 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015312:	83 c4 0c             	add    esp,0xc
c0015315:	6a 00                	push   0x0
c0015317:	68 32 4a 01 c0       	push   0xc0014a32
c001531c:	6a 08                	push   0x8
c001531e:	e8 a5 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015323:	83 c4 0c             	add    esp,0xc
c0015326:	6a 00                	push   0x0
c0015328:	68 19 4f 01 c0       	push   0xc0014f19
c001532d:	6a 09                	push   0x9
c001532f:	e8 94 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015334:	83 c4 0c             	add    esp,0xc
c0015337:	6a 00                	push   0x0
c0015339:	68 19 4f 01 c0       	push   0xc0014f19
c001533e:	6a 0a                	push   0xa
c0015340:	e8 83 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015345:	83 c4 0c             	add    esp,0xc
c0015348:	6a 00                	push   0x0
c001534a:	68 19 4f 01 c0       	push   0xc0014f19
c001534f:	6a 0b                	push   0xb
c0015351:	e8 72 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015356:	83 c4 0c             	add    esp,0xc
c0015359:	6a 00                	push   0x0
c001535b:	68 2e 4e 01 c0       	push   0xc0014e2e
c0015360:	6a 0d                	push   0xd
c0015362:	e8 61 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015367:	83 c4 0c             	add    esp,0xc
c001536a:	6a 00                	push   0x0
c001536c:	68 93 4e 01 c0       	push   0xc0014e93
c0015371:	6a 0e                	push   0xe
c0015373:	e8 50 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015378:	83 c4 10             	add    esp,0x10
c001537b:	50                   	push   eax
c001537c:	6a 00                	push   0x0
c001537e:	68 19 4f 01 c0       	push   0xc0014f19
c0015383:	53                   	push   ebx
c0015384:	43                   	inc    ebx
c0015385:	e8 3e 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001538a:	83 c4 10             	add    esp,0x10
c001538d:	83 fb 1e             	cmp    ebx,0x1e
c0015390:	75 e9                	jne    c001537b <HalInitialise()+0x127>
c0015392:	50                   	push   eax
c0015393:	6a 00                	push   0x0
c0015395:	68 17 10 01 c0       	push   0xc0011017
c001539a:	6a 60                	push   0x60
c001539c:	e8 27 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153a1:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c00153a6:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00153b0:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00153b7:	e8 fd 23 ff ff       	call   c00077b9 <malloc>
c00153bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00153bf:	89 c3                	mov    ebx,eax
c00153c1:	e8 2e 09 00 00       	call   c0015cf4 <RTC::RTC()>
c00153c6:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00153d0:	5a                   	pop    edx
c00153d1:	59                   	pop    ecx
c00153d2:	53                   	push   ebx
c00153d3:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00153d9:	e8 b6 64 ff ff       	call   c000b894 <Device::addChild(Device*)>
c00153de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153e0:	6a 00                	push   0x0
c00153e2:	6a 00                	push   0x0
c00153e4:	6a 00                	push   0x0
c00153e6:	53                   	push   ebx
c00153e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153ea:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c00153ef:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00153f5:	83 c4 28             	add    esp,0x28
c00153f8:	5b                   	pop    ebx
c00153f9:	c3                   	ret    

c00153fa <HalMakeBeep(int)>:
c00153fa:	53                   	push   ebx
c00153fb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00153ff:	85 db                	test   ebx,ebx
c0015401:	75 07                	jne    c001540a <HalMakeBeep(int)+0x10>
c0015403:	e4 61                	in     al,0x61
c0015405:	83 e0 fc             	and    eax,0xfffffffc
c0015408:	eb 26                	jmp    c0015430 <HalMakeBeep(int)+0x36>
c001540a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001540f:	99                   	cdq    
c0015410:	f7 fb                	idiv   ebx
c0015412:	89 c1                	mov    ecx,eax
c0015414:	b0 b6                	mov    al,0xb6
c0015416:	e6 43                	out    0x43,al
c0015418:	88 c8                	mov    al,cl
c001541a:	e6 42                	out    0x42,al
c001541c:	89 c8                	mov    eax,ecx
c001541e:	c1 e8 08             	shr    eax,0x8
c0015421:	e6 42                	out    0x42,al
c0015423:	e4 61                	in     al,0x61
c0015425:	88 c2                	mov    dl,al
c0015427:	83 ca 03             	or     edx,0x3
c001542a:	38 c2                	cmp    dl,al
c001542c:	74 04                	je     c0015432 <HalMakeBeep(int)+0x38>
c001542e:	88 d0                	mov    al,dl
c0015430:	e6 61                	out    0x61,al
c0015432:	5b                   	pop    ebx
c0015433:	c3                   	ret    

c0015434 <HalGetRand()>:
c0015434:	31 c0                	xor    eax,eax
c0015436:	c3                   	ret    

c0015437 <HalEndOfInterrupt(int)>:
c0015437:	80 3d e0 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237e0,0x0
c001543e:	74 23                	je     c0015463 <HalEndOfInterrupt(int)+0x2c>
c0015440:	83 ec 14             	sub    esp,0x14
c0015443:	6a 1b                	push   0x1b
c0015445:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001544b:	e8 a2 19 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015450:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015455:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001545f:	83 c4 1c             	add    esp,0x1c
c0015462:	c3                   	ret    
c0015463:	e9 54 02 00 00       	jmp    c00156bc <picEOI(int)>

c0015468 <HalRestart()>:
c0015468:	c3                   	ret    

c0015469 <HalShutdown()>:
c0015469:	c3                   	ret    

c001546a <HalSleep()>:
c001546a:	c3                   	ret    
c001546b:	90                   	nop

c001546c <picIoWait()>:
c001546c:	eb 00                	jmp    c001546e <picIoWait()+0x2>
c001546e:	eb 00                	jmp    c0015470 <picIoWait()+0x4>
c0015470:	90                   	nop
c0015471:	c3                   	ret    
c0015472:	66 90                	xchg   ax,ax

c0015474 <picDisable()>:
c0015474:	83 ec 10             	sub    esp,0x10
c0015477:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001547e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015483:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015487:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001548c:	ee                   	out    dx,al
c001548d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015494:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015499:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001549d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00154a2:	ee                   	out    dx,al
c00154a3:	90                   	nop
c00154a4:	83 c4 10             	add    esp,0x10
c00154a7:	c3                   	ret    

c00154a8 <picGetIRQReg(int)>:
c00154a8:	83 ec 10             	sub    esp,0x10
c00154ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00154af:	25 ff 00 00 00       	and    eax,0xff
c00154b4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00154bb:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00154bf:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00154c3:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00154c8:	ee                   	out    dx,al
c00154c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00154cd:	25 ff 00 00 00       	and    eax,0xff
c00154d2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00154d9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00154dd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00154e1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00154e6:	ee                   	out    dx,al
c00154e7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00154ee:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00154f3:	89 c2                	mov    edx,eax
c00154f5:	ec                   	in     al,dx
c00154f6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00154fa:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00154fe:	25 ff 00 00 00       	and    eax,0xff
c0015503:	c1 e0 08             	shl    eax,0x8
c0015506:	89 c1                	mov    ecx,eax
c0015508:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001550f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015514:	89 c2                	mov    edx,eax
c0015516:	ec                   	in     al,dx
c0015517:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001551b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001551f:	25 ff 00 00 00       	and    eax,0xff
c0015524:	09 c8                	or     eax,ecx
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	c3                   	ret    
c001552a:	66 90                	xchg   ax,ax

c001552c <picOpen()>:
c001552c:	83 ec 50             	sub    esp,0x50
c001552f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015536:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001553b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001553f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015543:	ee                   	out    dx,al
c0015544:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001554b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015550:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015554:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015558:	ee                   	out    dx,al
c0015559:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015561:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015569:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015570:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015574:	89 c2                	mov    edx,eax
c0015576:	ec                   	in     al,dx
c0015577:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001557b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001557f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015583:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001558a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001558e:	89 c2                	mov    edx,eax
c0015590:	ec                   	in     al,dx
c0015591:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015595:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015599:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001559d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00155a4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00155a9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00155ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155b1:	ee                   	out    dx,al
c00155b2:	e8 b5 fe ff ff       	call   c001546c <picIoWait()>
c00155b7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00155be:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00155c3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00155c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155cb:	ee                   	out    dx,al
c00155cc:	e8 9b fe ff ff       	call   c001546c <picIoWait()>
c00155d1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00155d5:	25 ff 00 00 00       	and    eax,0xff
c00155da:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00155e1:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00155e5:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00155e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00155ed:	ee                   	out    dx,al
c00155ee:	e8 79 fe ff ff       	call   c001546c <picIoWait()>
c00155f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00155f7:	25 ff 00 00 00       	and    eax,0xff
c00155fc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015603:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015607:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001560b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001560f:	ee                   	out    dx,al
c0015610:	e8 57 fe ff ff       	call   c001546c <picIoWait()>
c0015615:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001561c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015621:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015625:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015629:	ee                   	out    dx,al
c001562a:	e8 3d fe ff ff       	call   c001546c <picIoWait()>
c001562f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015636:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001563b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001563f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015643:	ee                   	out    dx,al
c0015644:	e8 23 fe ff ff       	call   c001546c <picIoWait()>
c0015649:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015650:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015655:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015659:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001565d:	ee                   	out    dx,al
c001565e:	e8 09 fe ff ff       	call   c001546c <picIoWait()>
c0015663:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001566a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001566f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015673:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015677:	ee                   	out    dx,al
c0015678:	e8 ef fd ff ff       	call   c001546c <picIoWait()>
c001567d:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015681:	25 ff 00 00 00       	and    eax,0xff
c0015686:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001568d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015691:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015695:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015699:	ee                   	out    dx,al
c001569a:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c001569e:	25 ff 00 00 00       	and    eax,0xff
c00156a3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00156aa:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00156ae:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00156b2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00156b6:	ee                   	out    dx,al
c00156b7:	90                   	nop
c00156b8:	83 c4 50             	add    esp,0x50
c00156bb:	c3                   	ret    

c00156bc <picEOI(int)>:
c00156bc:	83 ec 10             	sub    esp,0x10
c00156bf:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00156c4:	75 22                	jne    c00156e8 <picEOI(int)+0x2c>
c00156c6:	6a 0b                	push   0xb
c00156c8:	e8 db fd ff ff       	call   c00154a8 <picGetIRQReg(int)>
c00156cd:	83 c4 04             	add    esp,0x4
c00156d0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00156d5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00156da:	25 ff ff 00 00       	and    eax,0xffff
c00156df:	25 80 00 00 00       	and    eax,0x80
c00156e4:	74 72                	je     c0015758 <picEOI(int)+0x9c>
c00156e6:	66 90                	xchg   ax,ax
c00156e8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00156ed:	75 31                	jne    c0015720 <picEOI(int)+0x64>
c00156ef:	6a 0b                	push   0xb
c00156f1:	e8 b2 fd ff ff       	call   c00154a8 <picGetIRQReg(int)>
c00156f6:	83 c4 04             	add    esp,0x4
c00156f9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00156fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015702:	66 85 c0             	test   ax,ax
c0015705:	78 19                	js     c0015720 <picEOI(int)+0x64>
c0015707:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001570e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015713:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015717:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001571c:	ee                   	out    dx,al
c001571d:	eb 3d                	jmp    c001575c <picEOI(int)+0xa0>
c001571f:	90                   	nop
c0015720:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015725:	7e 19                	jle    c0015740 <picEOI(int)+0x84>
c0015727:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001572e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015733:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015737:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001573c:	ee                   	out    dx,al
c001573d:	8d 76 00             	lea    esi,[esi+0x0]
c0015740:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015747:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001574c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015750:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015755:	ee                   	out    dx,al
c0015756:	eb 04                	jmp    c001575c <picEOI(int)+0xa0>
c0015758:	90                   	nop
c0015759:	8d 76 00             	lea    esi,[esi+0x0]
c001575c:	83 c4 10             	add    esp,0x10
c001575f:	c3                   	ret    

c0015760 <RTC::open(int, int, void*)>:
c0015760:	31 c0                	xor    eax,eax
c0015762:	c3                   	ret    
c0015763:	90                   	nop

c0015764 <RTC::close(int, int, void*)>:
c0015764:	31 c0                	xor    eax,eax
c0015766:	c3                   	ret    
c0015767:	90                   	nop

c0015768 <RTC::timeInSecondsUTC()>:
c0015768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001576c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015772:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015778:	c3                   	ret    
c0015779:	90                   	nop

c001577a <RTC::timeInDatetimeUTC()>:
c001577a:	53                   	push   ebx
c001577b:	83 ec 14             	sub    esp,0x14
c001577e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015786:	8b 10                	mov    edx,DWORD PTR [eax]
c0015788:	50                   	push   eax
c0015789:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001578c:	83 c4 0c             	add    esp,0xc
c001578f:	52                   	push   edx
c0015790:	50                   	push   eax
c0015791:	53                   	push   ebx
c0015792:	e8 71 5e ff ff       	call   c000b608 <secondsToDatetime(unsigned long long)>
c0015797:	89 d8                	mov    eax,ebx
c0015799:	83 c4 14             	add    esp,0x14
c001579c:	5b                   	pop    ebx
c001579d:	c2 04 00             	ret    0x4

c00157a0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00157a0:	56                   	push   esi
c00157a1:	53                   	push   ebx
c00157a2:	83 ec 14             	sub    esp,0x14
c00157a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157ab:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00157ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00157b2:	52                   	push   edx
c00157b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157bb:	50                   	push   eax
c00157bc:	e8 47 5e ff ff       	call   c000b608 <secondsToDatetime(unsigned long long)>
c00157c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00157c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00157cd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00157d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00157d5:	89 f0                	mov    eax,esi
c00157d7:	83 c4 20             	add    esp,0x20
c00157da:	5b                   	pop    ebx
c00157db:	5e                   	pop    esi
c00157dc:	ff e0                	jmp    eax

c00157de <RTC::~RTC()>:
c00157de:	83 ec 0c             	sub    esp,0xc
c00157e1:	ba 8c e9 01 c0       	mov    edx,0xc001e98c
c00157e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ea:	89 10                	mov    DWORD PTR [eax],edx
c00157ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157f0:	83 ec 0c             	sub    esp,0xc
c00157f3:	50                   	push   eax
c00157f4:	e8 93 5b ff ff       	call   c000b38c <Clock::~Clock()>
c00157f9:	83 c4 10             	add    esp,0x10
c00157fc:	90                   	nop
c00157fd:	83 c4 0c             	add    esp,0xc
c0015800:	c3                   	ret    
c0015801:	90                   	nop

c0015802 <RTC::~RTC()>:
c0015802:	83 ec 0c             	sub    esp,0xc
c0015805:	83 ec 0c             	sub    esp,0xc
c0015808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001580c:	e8 cd ff ff ff       	call   c00157de <RTC::~RTC()>
c0015811:	83 c4 10             	add    esp,0x10
c0015814:	83 ec 08             	sub    esp,0x8
c0015817:	68 60 01 00 00       	push   0x160
c001581c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015820:	e8 39 4b ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c0015825:	83 c4 10             	add    esp,0x10
c0015828:	83 c4 0c             	add    esp,0xc
c001582b:	c3                   	ret    

c001582c <RTC::get_update_in_progress_flag()>:
c001582c:	83 ec 14             	sub    esp,0x14
c001582f:	6a 0a                	push   0xa
c0015831:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015837:	e8 6a 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001583c:	83 c4 1c             	add    esp,0x1c
c001583f:	c0 e8 07             	shr    al,0x7
c0015842:	c3                   	ret    
c0015843:	90                   	nop

c0015844 <RTC::completeRTCRefresh()>:
c0015844:	55                   	push   ebp
c0015845:	57                   	push   edi
c0015846:	56                   	push   esi
c0015847:	53                   	push   ebx
c0015848:	83 ec 2c             	sub    esp,0x2c
c001584b:	8b 1d 6c 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a6c
c0015851:	83 ec 0c             	sub    esp,0xc
c0015854:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015858:	e8 cf ff ff ff       	call   c001582c <RTC::get_update_in_progress_flag()>
c001585d:	83 c4 10             	add    esp,0x10
c0015860:	84 c0                	test   al,al
c0015862:	74 0e                	je     c0015872 <RTC::completeRTCRefresh()+0x2e>
c0015864:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001586a:	3b 05 6c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a6c
c0015870:	73 df                	jae    c0015851 <RTC::completeRTCRefresh()+0xd>
c0015872:	55                   	push   ebp
c0015873:	55                   	push   ebp
c0015874:	6a 00                	push   0x0
c0015876:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001587c:	e8 25 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015881:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015885:	58                   	pop    eax
c0015886:	5a                   	pop    edx
c0015887:	6a 02                	push   0x2
c0015889:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001588f:	e8 12 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015894:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015898:	59                   	pop    ecx
c0015899:	5b                   	pop    ebx
c001589a:	6a 04                	push   0x4
c001589c:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00158a2:	e8 ff 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158a7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00158ab:	5e                   	pop    esi
c00158ac:	5f                   	pop    edi
c00158ad:	6a 07                	push   0x7
c00158af:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00158b5:	e8 ec 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158ba:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00158be:	5d                   	pop    ebp
c00158bf:	58                   	pop    eax
c00158c0:	6a 08                	push   0x8
c00158c2:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00158c8:	e8 d9 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158cd:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00158d1:	58                   	pop    eax
c00158d2:	5a                   	pop    edx
c00158d3:	6a 09                	push   0x9
c00158d5:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00158db:	e8 c6 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158e0:	83 c4 10             	add    esp,0x10
c00158e3:	0f b6 e8             	movzx  ebp,al
c00158e6:	8b 1d 6c 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a6c
c00158ec:	83 ec 0c             	sub    esp,0xc
c00158ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00158f3:	e8 34 ff ff ff       	call   c001582c <RTC::get_update_in_progress_flag()>
c00158f8:	83 c4 10             	add    esp,0x10
c00158fb:	84 c0                	test   al,al
c00158fd:	74 0e                	je     c001590d <RTC::completeRTCRefresh()+0xc9>
c00158ff:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015905:	3b 05 6c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a6c
c001590b:	73 df                	jae    c00158ec <RTC::completeRTCRefresh()+0xa8>
c001590d:	50                   	push   eax
c001590e:	50                   	push   eax
c001590f:	6a 00                	push   0x0
c0015911:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015917:	e8 8a 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001591c:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015920:	58                   	pop    eax
c0015921:	5a                   	pop    edx
c0015922:	6a 02                	push   0x2
c0015924:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001592a:	e8 77 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001592f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015933:	59                   	pop    ecx
c0015934:	5b                   	pop    ebx
c0015935:	6a 04                	push   0x4
c0015937:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001593d:	e8 64 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015942:	5e                   	pop    esi
c0015943:	88 c3                	mov    bl,al
c0015945:	5f                   	pop    edi
c0015946:	6a 07                	push   0x7
c0015948:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001594e:	e8 53 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015953:	89 c6                	mov    esi,eax
c0015955:	58                   	pop    eax
c0015956:	5a                   	pop    edx
c0015957:	6a 08                	push   0x8
c0015959:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c001595f:	e8 42 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015964:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015968:	59                   	pop    ecx
c0015969:	5f                   	pop    edi
c001596a:	6a 09                	push   0x9
c001596c:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015972:	e8 2f 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015977:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001597b:	0f b6 f8             	movzx  edi,al
c001597e:	83 c4 10             	add    esp,0x10
c0015981:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015985:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015989:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001598d:	89 f1                	mov    ecx,esi
c001598f:	0f 94 c0             	sete   al
c0015992:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015996:	0f 94 c2             	sete   dl
c0015999:	21 d0                	and    eax,edx
c001599b:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001599f:	0f 94 c2             	sete   dl
c00159a2:	21 c2                	and    edx,eax
c00159a4:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c00159a8:	0f 94 c0             	sete   al
c00159ab:	21 d0                	and    eax,edx
c00159ad:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00159b1:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c00159b5:	0f 94 c1             	sete   cl
c00159b8:	84 c8                	test   al,cl
c00159ba:	75 29                	jne    c00159e5 <RTC::completeRTCRefresh()+0x1a1>
c00159bc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00159c0:	89 fd                	mov    ebp,edi
c00159c2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00159c6:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c00159ca:	89 f0                	mov    eax,esi
c00159cc:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00159d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00159d4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00159d8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00159dc:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00159e0:	e9 01 ff ff ff       	jmp    c00158e6 <RTC::completeRTCRefresh()+0xa2>
c00159e5:	39 fd                	cmp    ebp,edi
c00159e7:	75 d3                	jne    c00159bc <RTC::completeRTCRefresh()+0x178>
c00159e9:	55                   	push   ebp
c00159ea:	55                   	push   ebp
c00159eb:	6a 0b                	push   0xb
c00159ed:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c00159f3:	e8 ae 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159f8:	83 c4 10             	add    esp,0x10
c00159fb:	89 c5                	mov    ebp,eax
c00159fd:	a8 04                	test   al,0x4
c00159ff:	75 78                	jne    c0015a79 <RTC::completeRTCRefresh()+0x235>
c0015a01:	b1 0a                	mov    cl,0xa
c0015a03:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015a07:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015a0b:	83 e2 0f             	and    edx,0xf
c0015a0e:	c0 e8 04             	shr    al,0x4
c0015a11:	c1 ef 04             	shr    edi,0x4
c0015a14:	f6 e1                	mul    cl
c0015a16:	6b ff 0a             	imul   edi,edi,0xa
c0015a19:	01 d0                	add    eax,edx
c0015a1b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015a1f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015a23:	83 e2 0f             	and    edx,0xf
c0015a26:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015a2a:	c0 e8 04             	shr    al,0x4
c0015a2d:	f6 e1                	mul    cl
c0015a2f:	01 d0                	add    eax,edx
c0015a31:	88 da                	mov    dl,bl
c0015a33:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015a37:	83 e2 0f             	and    edx,0xf
c0015a3a:	88 d8                	mov    al,bl
c0015a3c:	83 e3 80             	and    ebx,0xffffff80
c0015a3f:	c0 e8 04             	shr    al,0x4
c0015a42:	83 e0 07             	and    eax,0x7
c0015a45:	f6 e1                	mul    cl
c0015a47:	01 d0                	add    eax,edx
c0015a49:	89 f2                	mov    edx,esi
c0015a4b:	09 c3                	or     ebx,eax
c0015a4d:	83 e2 0f             	and    edx,0xf
c0015a50:	89 f0                	mov    eax,esi
c0015a52:	c0 e8 04             	shr    al,0x4
c0015a55:	f6 e1                	mul    cl
c0015a57:	8d 34 02             	lea    esi,[edx+eax*1]
c0015a5a:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015a5e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015a62:	83 e2 0f             	and    edx,0xf
c0015a65:	c0 e8 04             	shr    al,0x4
c0015a68:	f6 e1                	mul    cl
c0015a6a:	01 d0                	add    eax,edx
c0015a6c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015a70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a74:	83 e0 0f             	and    eax,0xf
c0015a77:	01 c7                	add    edi,eax
c0015a79:	83 e5 02             	and    ebp,0x2
c0015a7c:	75 14                	jne    c0015a92 <RTC::completeRTCRefresh()+0x24e>
c0015a7e:	84 db                	test   bl,bl
c0015a80:	79 10                	jns    c0015a92 <RTC::completeRTCRefresh()+0x24e>
c0015a82:	83 e3 7f             	and    ebx,0x7f
c0015a85:	b9 18 00 00 00       	mov    ecx,0x18
c0015a8a:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015a8d:	99                   	cdq    
c0015a8e:	f7 f9                	idiv   ecx
c0015a90:	88 d3                	mov    bl,dl
c0015a92:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015a98:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015a9e:	77 06                	ja     c0015aa6 <RTC::completeRTCRefresh()+0x262>
c0015aa0:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015aa6:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015aab:	31 d2                	xor    edx,edx
c0015aad:	c1 e1 10             	shl    ecx,0x10
c0015ab0:	89 d7                	mov    edi,edx
c0015ab2:	c1 e5 10             	shl    ebp,0x10
c0015ab5:	31 c0                	xor    eax,eax
c0015ab7:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015abd:	09 cf                	or     edi,ecx
c0015abf:	89 fa                	mov    edx,edi
c0015ac1:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015ac5:	88 da                	mov    dl,bl
c0015ac7:	89 f3                	mov    ebx,esi
c0015ac9:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015acd:	88 d8                	mov    al,bl
c0015acf:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015ad3:	0f b7 c8             	movzx  ecx,ax
c0015ad6:	09 e9                	or     ecx,ebp
c0015ad8:	89 c8                	mov    eax,ecx
c0015ada:	51                   	push   ecx
c0015adb:	51                   	push   ecx
c0015adc:	52                   	push   edx
c0015add:	50                   	push   eax
c0015ade:	e8 98 59 ff ff       	call   c000b47b <datetimeToSeconds(datetime_t)>
c0015ae3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015ae7:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015aed:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015af3:	83 c4 3c             	add    esp,0x3c
c0015af6:	5b                   	pop    ebx
c0015af7:	5e                   	pop    esi
c0015af8:	5f                   	pop    edi
c0015af9:	5d                   	pop    ebp
c0015afa:	c3                   	ret    
c0015afb:	90                   	nop

c0015afc <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015afc:	55                   	push   ebp
c0015afd:	57                   	push   edi
c0015afe:	56                   	push   esi
c0015aff:	53                   	push   ebx
c0015b00:	83 ec 30             	sub    esp,0x30
c0015b03:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015b07:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015b0b:	6a 00                	push   0x0
c0015b0d:	6a 00                	push   0x0
c0015b0f:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015b15:	e8 a2 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015b1a:	83 c4 0c             	add    esp,0xc
c0015b1d:	6a 00                	push   0x0
c0015b1f:	6a 02                	push   0x2
c0015b21:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015b27:	e8 90 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015b2c:	31 d2                	xor    edx,edx
c0015b2e:	89 f9                	mov    ecx,edi
c0015b30:	89 f8                	mov    eax,edi
c0015b32:	c1 e9 10             	shr    ecx,0x10
c0015b35:	0f b6 c4             	movzx  eax,ah
c0015b38:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015b3c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015b40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b44:	b9 64 00 00 00       	mov    ecx,0x64
c0015b49:	89 f0                	mov    eax,esi
c0015b4b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015b4f:	89 f0                	mov    eax,esi
c0015b51:	0f b6 c4             	movzx  eax,ah
c0015b54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015b58:	89 f0                	mov    eax,esi
c0015b5a:	c1 e8 10             	shr    eax,0x10
c0015b5d:	66 f7 f1             	div    cx
c0015b60:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015b65:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015b6a:	59                   	pop    ecx
c0015b6b:	5b                   	pop    ebx
c0015b6c:	89 fb                	mov    ebx,edi
c0015b6e:	6a 0b                	push   0xb
c0015b70:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015b76:	e8 2b 13 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015b7b:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015b7f:	83 c4 10             	add    esp,0x10
c0015b82:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015b87:	75 74                	jne    c0015bfd <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015b89:	b2 0a                	mov    dl,0xa
c0015b8b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015b8f:	0f b6 c1             	movzx  eax,cl
c0015b92:	f6 f2                	div    dl
c0015b94:	88 c3                	mov    bl,al
c0015b96:	88 e0                	mov    al,ah
c0015b98:	c1 e3 04             	shl    ebx,0x4
c0015b9b:	09 c3                	or     ebx,eax
c0015b9d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015ba2:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015ba6:	f6 f2                	div    dl
c0015ba8:	88 c1                	mov    cl,al
c0015baa:	88 e0                	mov    al,ah
c0015bac:	c1 e1 04             	shl    ecx,0x4
c0015baf:	09 c1                	or     ecx,eax
c0015bb1:	89 f8                	mov    eax,edi
c0015bb3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015bb7:	0f b6 c0             	movzx  eax,al
c0015bba:	f6 f2                	div    dl
c0015bbc:	88 c3                	mov    bl,al
c0015bbe:	88 e0                	mov    al,ah
c0015bc0:	c1 e3 04             	shl    ebx,0x4
c0015bc3:	09 c3                	or     ebx,eax
c0015bc5:	89 f0                	mov    eax,esi
c0015bc7:	0f b6 c0             	movzx  eax,al
c0015bca:	f6 f2                	div    dl
c0015bcc:	88 c1                	mov    cl,al
c0015bce:	88 e0                	mov    al,ah
c0015bd0:	c1 e1 04             	shl    ecx,0x4
c0015bd3:	09 c1                	or     ecx,eax
c0015bd5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015bda:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015bde:	f6 f2                	div    dl
c0015be0:	88 c1                	mov    cl,al
c0015be2:	88 e0                	mov    al,ah
c0015be4:	c1 e1 04             	shl    ecx,0x4
c0015be7:	09 c1                	or     ecx,eax
c0015be9:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015bee:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015bf2:	f6 f2                	div    dl
c0015bf4:	89 c5                	mov    ebp,eax
c0015bf6:	88 e0                	mov    al,ah
c0015bf8:	c1 e5 04             	shl    ebp,0x4
c0015bfb:	09 c5                	or     ebp,eax
c0015bfd:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015c02:	75 17                	jne    c0015c1b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c04:	80 fb 0b             	cmp    bl,0xb
c0015c07:	76 0c                	jbe    c0015c15 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015c09:	80 eb 0c             	sub    bl,0xc
c0015c0c:	75 02                	jne    c0015c10 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015c0e:	b3 0c                	mov    bl,0xc
c0015c10:	83 cb 80             	or     ebx,0xffffff80
c0015c13:	eb 06                	jmp    c0015c1b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c15:	84 db                	test   bl,bl
c0015c17:	75 02                	jne    c0015c1b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c19:	b3 0c                	mov    bl,0xc
c0015c1b:	0f b6 db             	movzx  ebx,bl
c0015c1e:	50                   	push   eax
c0015c1f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015c24:	50                   	push   eax
c0015c25:	6a 00                	push   0x0
c0015c27:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c2d:	e8 8a 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c32:	83 c4 0c             	add    esp,0xc
c0015c35:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015c3a:	50                   	push   eax
c0015c3b:	6a 02                	push   0x2
c0015c3d:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c43:	e8 74 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c48:	83 c4 0c             	add    esp,0xc
c0015c4b:	53                   	push   ebx
c0015c4c:	6a 04                	push   0x4
c0015c4e:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c54:	e8 63 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c59:	83 c4 0c             	add    esp,0xc
c0015c5c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015c61:	50                   	push   eax
c0015c62:	6a 07                	push   0x7
c0015c64:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c6a:	e8 4d 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c6f:	83 c4 0c             	add    esp,0xc
c0015c72:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015c77:	50                   	push   eax
c0015c78:	6a 08                	push   0x8
c0015c7a:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c80:	e8 37 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c85:	83 c4 0c             	add    esp,0xc
c0015c88:	89 e8                	mov    eax,ebp
c0015c8a:	0f b6 e8             	movzx  ebp,al
c0015c8d:	55                   	push   ebp
c0015c8e:	6a 09                	push   0x9
c0015c90:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015c96:	e8 21 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c9b:	5a                   	pop    edx
c0015c9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ca0:	e8 9f fb ff ff       	call   c0015844 <RTC::completeRTCRefresh()>
c0015ca5:	83 c4 3c             	add    esp,0x3c
c0015ca8:	b0 01                	mov    al,0x1
c0015caa:	5b                   	pop    ebx
c0015cab:	5e                   	pop    esi
c0015cac:	5f                   	pop    edi
c0015cad:	5d                   	pop    ebp
c0015cae:	c3                   	ret    

c0015caf <rtcIRQHandler(regs*, void*)>:
c0015caf:	53                   	push   ebx
c0015cb0:	83 ec 10             	sub    esp,0x10
c0015cb3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015cb7:	6a 0c                	push   0xc
c0015cb9:	ff 35 98 04 02 c0    	push   DWORD PTR ds:0xc0020498
c0015cbf:	e8 e2 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cc4:	83 c4 10             	add    esp,0x10
c0015cc7:	84 c0                	test   al,al
c0015cc9:	79 24                	jns    c0015cef <rtcIRQHandler(regs*, void*)+0x40>
c0015ccb:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015cd2:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015cd9:	66 ff 05 f4 37 02 c0 	inc    WORD PTR ds:0xc00237f4
c0015ce0:	75 0d                	jne    c0015cef <rtcIRQHandler(regs*, void*)+0x40>
c0015ce2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015ce6:	83 c4 08             	add    esp,0x8
c0015ce9:	5b                   	pop    ebx
c0015cea:	e9 55 fb ff ff       	jmp    c0015844 <RTC::completeRTCRefresh()>
c0015cef:	83 c4 08             	add    esp,0x8
c0015cf2:	5b                   	pop    ebx
c0015cf3:	c3                   	ret    

c0015cf4 <RTC::RTC()>:
c0015cf4:	83 ec 1c             	sub    esp,0x1c
c0015cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cfb:	83 ec 08             	sub    esp,0x8
c0015cfe:	68 6f e9 01 c0       	push   0xc001e96f
c0015d03:	50                   	push   eax
c0015d04:	e8 4d 56 ff ff       	call   c000b356 <Clock::Clock(char const*)>
c0015d09:	83 c4 10             	add    esp,0x10
c0015d0c:	ba 8c e9 01 c0       	mov    edx,0xc001e98c
c0015d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d15:	89 10                	mov    DWORD PTR [eax],edx
c0015d17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d1b:	83 ec 0c             	sub    esp,0xc
c0015d1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d22:	6a 01                	push   0x1
c0015d24:	68 af 5c 01 c0       	push   0xc0015caf
c0015d29:	6a 08                	push   0x8
c0015d2b:	50                   	push   eax
c0015d2c:	e8 0f 5b ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015d31:	83 c4 20             	add    esp,0x20
c0015d34:	89 c2                	mov    edx,eax
c0015d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d3a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015d40:	fa                   	cli    
c0015d41:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0015d46:	40                   	inc    eax
c0015d47:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0015d4c:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0015d51:	83 ec 08             	sub    esp,0x8
c0015d54:	6a 0b                	push   0xb
c0015d56:	50                   	push   eax
c0015d57:	e8 4a 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d63:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0015d68:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015d6c:	83 ca 10             	or     edx,0x10
c0015d6f:	81 e2 ff 00 00 00    	and    edx,0xff
c0015d75:	83 ec 04             	sub    esp,0x4
c0015d78:	52                   	push   edx
c0015d79:	6a 0b                	push   0xb
c0015d7b:	50                   	push   eax
c0015d7c:	e8 3b 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d81:	83 c4 10             	add    esp,0x10
c0015d84:	83 ec 0c             	sub    esp,0xc
c0015d87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d8b:	e8 b4 fa ff ff       	call   c0015844 <RTC::completeRTCRefresh()>
c0015d90:	83 c4 10             	add    esp,0x10
c0015d93:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0015d98:	48                   	dec    eax
c0015d99:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0015d9e:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0015da3:	85 c0                	test   eax,eax
c0015da5:	75 01                	jne    c0015da8 <RTC::RTC()+0xb4>
c0015da7:	fb                   	sti    
c0015da8:	90                   	nop
c0015da9:	83 c4 1c             	add    esp,0x1c
c0015dac:	c3                   	ret    
c0015dad:	66 90                	xchg   ax,ax
c0015daf:	90                   	nop

c0015db0 <HalConsoleScroll(int, int)>:
c0015db0:	83 ec 10             	sub    esp,0x10
c0015db3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015dbb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015dc3:	90                   	nop
c0015dc4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015dc9:	0f 8f e1 00 00 00    	jg     c0015eb0 <HalConsoleScroll(int, int)+0x100>
c0015dcf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015dd7:	90                   	nop
c0015dd8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015de0:	0f 8f be 00 00 00    	jg     c0015ea4 <HalConsoleScroll(int, int)+0xf4>
c0015de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dea:	89 d0                	mov    eax,edx
c0015dec:	c1 e0 02             	shl    eax,0x2
c0015def:	01 d0                	add    eax,edx
c0015df1:	c1 e0 05             	shl    eax,0x5
c0015df4:	89 c2                	mov    edx,eax
c0015df6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dfa:	01 d0                	add    eax,edx
c0015dfc:	89 c2                	mov    edx,eax
c0015dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e02:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015e05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e09:	89 d0                	mov    eax,edx
c0015e0b:	c1 e0 02             	shl    eax,0x2
c0015e0e:	01 d0                	add    eax,edx
c0015e10:	c1 e0 05             	shl    eax,0x5
c0015e13:	89 c2                	mov    edx,eax
c0015e15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e19:	01 d0                	add    eax,edx
c0015e1b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015e21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e25:	01 c2                	add    edx,eax
c0015e27:	8a 01                	mov    al,BYTE PTR [ecx]
c0015e29:	88 02                	mov    BYTE PTR [edx],al
c0015e2b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015e30:	75 66                	jne    c0015e98 <HalConsoleScroll(int, int)+0xe8>
c0015e32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e36:	83 e0 01             	and    eax,0x1
c0015e39:	74 39                	je     c0015e74 <HalConsoleScroll(int, int)+0xc4>
c0015e3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e3f:	83 e0 0f             	and    eax,0xf
c0015e42:	88 c2                	mov    dl,al
c0015e44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e48:	c1 e0 04             	shl    eax,0x4
c0015e4b:	88 d1                	mov    cl,dl
c0015e4d:	09 c1                	or     ecx,eax
c0015e4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e53:	89 d0                	mov    eax,edx
c0015e55:	c1 e0 02             	shl    eax,0x2
c0015e58:	01 d0                	add    eax,edx
c0015e5a:	c1 e0 05             	shl    eax,0x5
c0015e5d:	89 c2                	mov    edx,eax
c0015e5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e63:	01 d0                	add    eax,edx
c0015e65:	89 c2                	mov    edx,eax
c0015e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e6b:	01 d0                	add    eax,edx
c0015e6d:	88 ca                	mov    dl,cl
c0015e6f:	88 10                	mov    BYTE PTR [eax],dl
c0015e71:	eb 25                	jmp    c0015e98 <HalConsoleScroll(int, int)+0xe8>
c0015e73:	90                   	nop
c0015e74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e78:	89 d0                	mov    eax,edx
c0015e7a:	c1 e0 02             	shl    eax,0x2
c0015e7d:	01 d0                	add    eax,edx
c0015e7f:	c1 e0 05             	shl    eax,0x5
c0015e82:	89 c2                	mov    edx,eax
c0015e84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e88:	01 d0                	add    eax,edx
c0015e8a:	89 c2                	mov    edx,eax
c0015e8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e90:	01 d0                	add    eax,edx
c0015e92:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015e95:	8d 76 00             	lea    esi,[esi+0x0]
c0015e98:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015e9c:	e9 37 ff ff ff       	jmp    c0015dd8 <HalConsoleScroll(int, int)+0x28>
c0015ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ea4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015ea8:	e9 17 ff ff ff       	jmp    c0015dc4 <HalConsoleScroll(int, int)+0x14>
c0015ead:	8d 76 00             	lea    esi,[esi+0x0]
c0015eb0:	90                   	nop
c0015eb1:	83 c4 10             	add    esp,0x10
c0015eb4:	c3                   	ret    
c0015eb5:	8d 76 00             	lea    esi,[esi+0x0]

c0015eb8 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015eb8:	83 ec 14             	sub    esp,0x14
c0015ebb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ebf:	88 04 24             	mov    BYTE PTR [esp],al
c0015ec2:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015ec5:	25 ff 00 00 00       	and    eax,0xff
c0015eca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015ece:	89 d1                	mov    ecx,edx
c0015ed0:	83 e1 0f             	and    ecx,0xf
c0015ed3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ed7:	c1 e2 04             	shl    edx,0x4
c0015eda:	81 e2 ff 00 00 00    	and    edx,0xff
c0015ee0:	09 ca                	or     edx,ecx
c0015ee2:	c1 e2 08             	shl    edx,0x8
c0015ee5:	09 d0                	or     eax,edx
c0015ee7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015eec:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015ef4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ef8:	89 d0                	mov    eax,edx
c0015efa:	c1 e0 02             	shl    eax,0x2
c0015efd:	01 d0                	add    eax,edx
c0015eff:	c1 e0 04             	shl    eax,0x4
c0015f02:	89 c2                	mov    edx,eax
c0015f04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f08:	01 d0                	add    eax,edx
c0015f0a:	01 c0                	add    eax,eax
c0015f0c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015f10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0015f19:	66 89 02             	mov    WORD PTR [edx],ax
c0015f1c:	90                   	nop
c0015f1d:	83 c4 14             	add    esp,0x14
c0015f20:	c3                   	ret    
c0015f21:	8d 76 00             	lea    esi,[esi+0x0]

c0015f24 <HalConsoleCursorUpdate(int, int)>:
c0015f24:	83 ec 20             	sub    esp,0x20
c0015f27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f2b:	89 c2                	mov    edx,eax
c0015f2d:	89 d0                	mov    eax,edx
c0015f2f:	c1 e0 02             	shl    eax,0x2
c0015f32:	01 d0                	add    eax,edx
c0015f34:	c1 e0 04             	shl    eax,0x4
c0015f37:	89 c2                	mov    edx,eax
c0015f39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f3d:	01 d0                	add    eax,edx
c0015f3f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015f44:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015f4b:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015f50:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f58:	ee                   	out    dx,al
c0015f59:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f5e:	25 ff 00 00 00       	and    eax,0xff
c0015f63:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015f6a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015f6e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015f72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015f76:	ee                   	out    dx,al
c0015f77:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015f7e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015f83:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015f87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f8b:	ee                   	out    dx,al
c0015f8c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f91:	66 c1 e8 08          	shr    ax,0x8
c0015f95:	25 ff 00 00 00       	and    eax,0xff
c0015f9a:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015fa1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fa5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015fa9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015fad:	ee                   	out    dx,al
c0015fae:	90                   	nop
c0015faf:	83 c4 20             	add    esp,0x20
c0015fb2:	c3                   	ret    
c0015fb3:	90                   	nop

c0015fb4 <FAT::getName()>:
c0015fb4:	b8 c0 e9 01 c0       	mov    eax,0xc001e9c0
c0015fb9:	c3                   	ret    
c0015fba:	66 90                	xchg   ax,ax

c0015fbc <FAT::tell(void*, unsigned long long*)>:
c0015fbc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015fc1:	75 09                	jne    c0015fcc <FAT::tell(void*, unsigned long long*)+0x10>
c0015fc3:	b8 04 00 00 00       	mov    eax,0x4
c0015fc8:	c3                   	ret    
c0015fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fcc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015fd1:	75 09                	jne    c0015fdc <FAT::tell(void*, unsigned long long*)+0x20>
c0015fd3:	b8 04 00 00 00       	mov    eax,0x4
c0015fd8:	c3                   	ret    
c0015fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fe0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015fe3:	ba 00 00 00 00       	mov    edx,0x0
c0015fe8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fec:	89 01                	mov    DWORD PTR [ecx],eax
c0015fee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015ff1:	b8 00 00 00 00       	mov    eax,0x0
c0015ff6:	c3                   	ret    
c0015ff7:	90                   	nop

c0015ff8 <FAT::stat(void*, unsigned long long*)>:
c0015ff8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015ffd:	75 09                	jne    c0016008 <FAT::stat(void*, unsigned long long*)+0x10>
c0015fff:	b8 04 00 00 00       	mov    eax,0x4
c0016004:	c3                   	ret    
c0016005:	8d 76 00             	lea    esi,[esi+0x0]
c0016008:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001600d:	75 09                	jne    c0016018 <FAT::stat(void*, unsigned long long*)+0x20>
c001600f:	b8 04 00 00 00       	mov    eax,0x4
c0016014:	c3                   	ret    
c0016015:	8d 76 00             	lea    esi,[esi+0x0]
c0016018:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001601c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001601f:	ba 00 00 00 00       	mov    edx,0x0
c0016024:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016028:	89 01                	mov    DWORD PTR [ecx],eax
c001602a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001602d:	b8 00 00 00 00       	mov    eax,0x0
c0016032:	c3                   	ret    
c0016033:	90                   	nop

c0016034 <FAT::~FAT()>:
c0016034:	83 ec 0c             	sub    esp,0xc
c0016037:	ba 0c ea 01 c0       	mov    edx,0xc001ea0c
c001603c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016040:	89 10                	mov    DWORD PTR [eax],edx
c0016042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016046:	83 ec 0c             	sub    esp,0xc
c0016049:	50                   	push   eax
c001604a:	e8 4b 47 ff ff       	call   c000a79a <Filesystem::~Filesystem()>
c001604f:	83 c4 10             	add    esp,0x10
c0016052:	90                   	nop
c0016053:	83 c4 0c             	add    esp,0xc
c0016056:	c3                   	ret    
c0016057:	90                   	nop

c0016058 <FAT::~FAT()>:
c0016058:	83 ec 0c             	sub    esp,0xc
c001605b:	83 ec 0c             	sub    esp,0xc
c001605e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016062:	e8 cd ff ff ff       	call   c0016034 <FAT::~FAT()>
c0016067:	83 c4 10             	add    esp,0x10
c001606a:	83 ec 08             	sub    esp,0x8
c001606d:	6a 08                	push   0x8
c001606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016073:	e8 e6 42 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c0016078:	83 c4 10             	add    esp,0x10
c001607b:	83 c4 0c             	add    esp,0xc
c001607e:	c3                   	ret    
c001607f:	90                   	nop

c0016080 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016080:	83 ec 1c             	sub    esp,0x1c
c0016083:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001608a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001608f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016093:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c001609a:	83 f8 ff             	cmp    eax,0xffffffff
c001609d:	75 35                	jne    c00160d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001609f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00160a3:	88 c2                	mov    dl,al
c00160a5:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00160aa:	01 d0                	add    eax,edx
c00160ac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00160b0:	8b 15 00 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023800
c00160b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160ba:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c00160c1:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00160c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00160ca:	89 14 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],edx
c00160d1:	eb 19                	jmp    c00160ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00160d3:	90                   	nop
c00160d4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00160d8:	88 c2                	mov    dl,al
c00160da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160de:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c00160e5:	01 d0                	add    eax,edx
c00160e7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00160eb:	90                   	nop
c00160ec:	83 ec 04             	sub    esp,0x4
c00160ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160f7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00160fb:	50                   	push   eax
c00160fc:	e8 53 ed fe ff       	call   c0004e54 <f_getlabel>
c0016101:	83 c4 10             	add    esp,0x10
c0016104:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016108:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001610d:	75 09                	jne    c0016118 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001610f:	b8 00 00 00 00       	mov    eax,0x0
c0016114:	eb 0a                	jmp    c0016120 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016116:	66 90                	xchg   ax,ax
c0016118:	b8 01 00 00 00       	mov    eax,0x1
c001611d:	8d 76 00             	lea    esi,[esi+0x0]
c0016120:	83 c4 1c             	add    esp,0x1c
c0016123:	c3                   	ret    

c0016124 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016124:	57                   	push   edi
c0016125:	83 ec 58             	sub    esp,0x58
c0016128:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016130:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016134:	b8 00 00 00 00       	mov    eax,0x0
c0016139:	b9 0f 00 00 00       	mov    ecx,0xf
c001613e:	fc                   	cld    
c001613f:	89 d7                	mov    edi,edx
c0016141:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016143:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016147:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c001614e:	83 f8 ff             	cmp    eax,0xffffffff
c0016151:	75 35                	jne    c0016188 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016153:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016157:	88 c2                	mov    dl,al
c0016159:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c001615e:	01 d0                	add    eax,edx
c0016160:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016164:	8b 15 00 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023800
c001616a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001616e:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c0016175:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c001617a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001617e:	89 14 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],edx
c0016185:	eb 19                	jmp    c00161a0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016187:	90                   	nop
c0016188:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001618c:	88 c2                	mov    dl,al
c001618e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016192:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c0016199:	01 d0                	add    eax,edx
c001619b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001619f:	90                   	nop
c00161a0:	83 ec 08             	sub    esp,0x8
c00161a3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00161a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00161ab:	50                   	push   eax
c00161ac:	e8 0f a6 fe ff       	call   c00007c0 <strcat>
c00161b1:	83 c4 10             	add    esp,0x10
c00161b4:	83 ec 0c             	sub    esp,0xc
c00161b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00161bb:	50                   	push   eax
c00161bc:	e8 e4 ed fe ff       	call   c0004fa5 <f_setlabel>
c00161c1:	83 c4 10             	add    esp,0x10
c00161c4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00161c8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00161cd:	75 09                	jne    c00161d8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00161cf:	b8 00 00 00 00       	mov    eax,0x0
c00161d4:	eb 0a                	jmp    c00161e0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00161d6:	66 90                	xchg   ax,ax
c00161d8:	b8 01 00 00 00       	mov    eax,0x1
c00161dd:	8d 76 00             	lea    esi,[esi+0x0]
c00161e0:	83 c4 58             	add    esp,0x58
c00161e3:	5f                   	pop    edi
c00161e4:	c3                   	ret    
c00161e5:	90                   	nop
c00161e6:	66 90                	xchg   ax,ax

c00161e8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00161e8:	83 ec 2c             	sub    esp,0x2c
c00161eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00161f3:	83 ec 08             	sub    esp,0x8
c00161f6:	68 e4 e9 01 c0       	push   0xc001e9e4
c00161fb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161ff:	e8 dc a4 fe ff       	call   c00006e0 <strcmp>
c0016204:	83 c4 10             	add    esp,0x10
c0016207:	85 c0                	test   eax,eax
c0016209:	0f 94 c0             	sete   al
c001620c:	84 c0                	test   al,al
c001620e:	74 10                	je     c0016220 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016210:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016218:	e9 b3 00 00 00       	jmp    c00162d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001621d:	8d 76 00             	lea    esi,[esi+0x0]
c0016220:	83 ec 08             	sub    esp,0x8
c0016223:	68 d6 e9 01 c0       	push   0xc001e9d6
c0016228:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001622c:	e8 af a4 fe ff       	call   c00006e0 <strcmp>
c0016231:	83 c4 10             	add    esp,0x10
c0016234:	85 c0                	test   eax,eax
c0016236:	0f 94 c0             	sete   al
c0016239:	84 c0                	test   al,al
c001623b:	74 0f                	je     c001624c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001623d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016245:	e9 86 00 00 00       	jmp    c00162d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001624a:	66 90                	xchg   ax,ax
c001624c:	83 ec 08             	sub    esp,0x8
c001624f:	68 dc e9 01 c0       	push   0xc001e9dc
c0016254:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016258:	e8 83 a4 fe ff       	call   c00006e0 <strcmp>
c001625d:	83 c4 10             	add    esp,0x10
c0016260:	85 c0                	test   eax,eax
c0016262:	0f 94 c0             	sete   al
c0016265:	84 c0                	test   al,al
c0016267:	74 0b                	je     c0016274 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016269:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016271:	eb 5d                	jmp    c00162d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016273:	90                   	nop
c0016274:	83 ec 08             	sub    esp,0x8
c0016277:	68 3c ca 01 c0       	push   0xc001ca3c
c001627c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016280:	e8 5b a4 fe ff       	call   c00006e0 <strcmp>
c0016285:	83 c4 10             	add    esp,0x10
c0016288:	85 c0                	test   eax,eax
c001628a:	0f 94 c0             	sete   al
c001628d:	84 c0                	test   al,al
c001628f:	74 0b                	je     c001629c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016291:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016299:	eb 35                	jmp    c00162d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001629b:	90                   	nop
c001629c:	83 ec 08             	sub    esp,0x8
c001629f:	68 e2 e9 01 c0       	push   0xc001e9e2
c00162a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162a8:	e8 33 a4 fe ff       	call   c00006e0 <strcmp>
c00162ad:	83 c4 10             	add    esp,0x10
c00162b0:	85 c0                	test   eax,eax
c00162b2:	0f 94 c0             	sete   al
c00162b5:	84 c0                	test   al,al
c00162b7:	74 0b                	je     c00162c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00162b9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00162c1:	eb 0d                	jmp    c00162d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00162c3:	90                   	nop
c00162c4:	b8 08 00 00 00       	mov    eax,0x8
c00162c9:	e9 ea 00 00 00       	jmp    c00163b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00162ce:	66 90                	xchg   ax,ax
c00162d0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00162d7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00162dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00162e0:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c00162e7:	83 f8 ff             	cmp    eax,0xffffffff
c00162ea:	75 34                	jne    c0016320 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00162ec:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00162f0:	88 c2                	mov    dl,al
c00162f2:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00162f7:	01 d0                	add    eax,edx
c00162f9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00162fd:	8b 15 00 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023800
c0016303:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016307:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c001630e:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0016313:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016317:	89 14 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],edx
c001631e:	eb 18                	jmp    c0016338 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016320:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016324:	88 c2                	mov    dl,al
c0016326:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001632a:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c0016331:	01 d0                	add    eax,edx
c0016333:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016337:	90                   	nop
c0016338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001633c:	88 04 24             	mov    BYTE PTR [esp],al
c001633f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016343:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016347:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001634f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016354:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001635c:	83 ec 0c             	sub    esp,0xc
c001635f:	68 00 20 00 00       	push   0x2000
c0016364:	e8 50 14 ff ff       	call   c00077b9 <malloc>
c0016369:	83 c4 10             	add    esp,0x10
c001636c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016370:	68 00 20 00 00       	push   0x2000
c0016375:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016379:	8d 44 24 08          	lea    eax,[esp+0x8]
c001637d:	50                   	push   eax
c001637e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016382:	50                   	push   eax
c0016383:	e8 0d ef fe ff       	call   c0005295 <f_mkfs>
c0016388:	83 c4 10             	add    esp,0x10
c001638b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001638f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016394:	75 0a                	jne    c00163a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016396:	b8 00 00 00 00       	mov    eax,0x0
c001639b:	eb 1b                	jmp    c00163b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001639d:	8d 76 00             	lea    esi,[esi+0x0]
c00163a0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00163a5:	75 09                	jne    c00163b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00163a7:	b8 09 00 00 00       	mov    eax,0x9
c00163ac:	eb 0a                	jmp    c00163b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00163ae:	66 90                	xchg   ax,ax
c00163b0:	b8 01 00 00 00       	mov    eax,0x1
c00163b5:	8d 76 00             	lea    esi,[esi+0x0]
c00163b8:	83 c4 2c             	add    esp,0x2c
c00163bb:	c3                   	ret    

c00163bc <FAT::tryMount(LogicalDisk*, int)>:
c00163bc:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00163c2:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00163c7:	83 f8 14             	cmp    eax,0x14
c00163ca:	75 18                	jne    c00163e4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00163cc:	83 ec 0c             	sub    esp,0xc
c00163cf:	68 e8 e9 01 c0       	push   0xc001e9e8
c00163d4:	e8 5e 9d ff ff       	call   c0010137 <KePanic(char const*)>
c00163d9:	83 c4 10             	add    esp,0x10
c00163dc:	b0 00                	mov    al,0x0
c00163de:	e9 e9 01 00 00       	jmp    c00165cc <FAT::tryMount(LogicalDisk*, int)+0x210>
c00163e3:	90                   	nop
c00163e4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00163eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00163f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00163f7:	3d 00 02 00 00       	cmp    eax,0x200
c00163fc:	74 0a                	je     c0016408 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00163fe:	b0 00                	mov    al,0x0
c0016400:	e9 c7 01 00 00       	jmp    c00165cc <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016405:	8d 76 00             	lea    esi,[esi+0x0]
c0016408:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016410:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016417:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c001641e:	83 f8 ff             	cmp    eax,0xffffffff
c0016421:	74 09                	je     c001642c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016423:	b0 01                	mov    al,0x1
c0016425:	e9 a2 01 00 00       	jmp    c00165cc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001642a:	66 90                	xchg   ax,ax
c001642c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016436:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001643e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016445:	88 c2                	mov    dl,al
c0016447:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c001644c:	01 d0                	add    eax,edx
c001644e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016455:	8b 15 00 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023800
c001645b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016462:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c0016469:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c001646e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016475:	89 14 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],edx
c001647c:	83 ec 0c             	sub    esp,0xc
c001647f:	68 34 02 00 00       	push   0x234
c0016484:	e8 30 13 ff ff       	call   c00077b9 <malloc>
c0016489:	83 c4 10             	add    esp,0x10
c001648c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016493:	83 ec 04             	sub    esp,0x4
c0016496:	6a 00                	push   0x0
c0016498:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001649f:	50                   	push   eax
c00164a0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00164a7:	e8 0f d6 fe ff       	call   c0003abb <f_mount>
c00164ac:	83 c4 10             	add    esp,0x10
c00164af:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00164b6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00164be:	74 1c                	je     c00164dc <FAT::tryMount(LogicalDisk*, int)+0x120>
c00164c0:	83 ec 0c             	sub    esp,0xc
c00164c3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00164ca:	e8 0a 13 ff ff       	call   c00077d9 <rfree>
c00164cf:	83 c4 10             	add    esp,0x10
c00164d2:	b0 00                	mov    al,0x0
c00164d4:	e9 f3 00 00 00       	jmp    c00165cc <FAT::tryMount(LogicalDisk*, int)+0x210>
c00164d9:	8d 76 00             	lea    esi,[esi+0x0]
c00164dc:	83 ec 04             	sub    esp,0x4
c00164df:	68 00 01 00 00       	push   0x100
c00164e4:	6a 00                	push   0x0
c00164e6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00164ed:	50                   	push   eax
c00164ee:	e8 dd 9f fe ff       	call   c00004d0 <memset>
c00164f3:	83 c4 10             	add    esp,0x10
c00164f6:	83 ec 08             	sub    esp,0x8
c00164f9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016500:	50                   	push   eax
c0016501:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016508:	50                   	push   eax
c0016509:	e8 b2 a2 fe ff       	call   c00007c0 <strcat>
c001650e:	83 c4 10             	add    esp,0x10
c0016511:	83 ec 08             	sub    esp,0x8
c0016514:	68 f6 e9 01 c0       	push   0xc001e9f6
c0016519:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016520:	50                   	push   eax
c0016521:	e8 9a a2 fe ff       	call   c00007c0 <strcat>
c0016526:	83 c4 10             	add    esp,0x10
c0016529:	83 ec 04             	sub    esp,0x4
c001652c:	6a 01                	push   0x1
c001652e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016535:	50                   	push   eax
c0016536:	8d 44 24 14          	lea    eax,[esp+0x14]
c001653a:	50                   	push   eax
c001653b:	e8 dd d5 fe ff       	call   c0003b1d <f_open>
c0016540:	83 c4 10             	add    esp,0x10
c0016543:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001654a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016551:	85 c0                	test   eax,eax
c0016553:	74 0b                	je     c0016560 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016555:	78 31                	js     c0016588 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016557:	83 e8 04             	sub    eax,0x4
c001655a:	83 f8 01             	cmp    eax,0x1
c001655d:	77 29                	ja     c0016588 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001655f:	90                   	nop
c0016560:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016568:	83 ec 0c             	sub    esp,0xc
c001656b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001656f:	50                   	push   eax
c0016570:	e8 5b dd fe ff       	call   c00042d0 <f_close>
c0016575:	83 c4 10             	add    esp,0x10
c0016578:	90                   	nop
c0016579:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016581:	74 41                	je     c00165c4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016583:	eb 33                	jmp    c00165b8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016585:	8d 76 00             	lea    esi,[esi+0x0]
c0016588:	83 ec 0c             	sub    esp,0xc
c001658b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016592:	e8 42 12 ff ff       	call   c00077d9 <rfree>
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	83 ec 04             	sub    esp,0x4
c001659d:	6a 00                	push   0x0
c001659f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00165a6:	50                   	push   eax
c00165a7:	6a 00                	push   0x0
c00165a9:	e8 0d d5 fe ff       	call   c0003abb <f_mount>
c00165ae:	83 c4 10             	add    esp,0x10
c00165b1:	b0 00                	mov    al,0x0
c00165b3:	eb 17                	jmp    c00165cc <FAT::tryMount(LogicalDisk*, int)+0x210>
c00165b5:	8d 76 00             	lea    esi,[esi+0x0]
c00165b8:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00165bd:	40                   	inc    eax
c00165be:	a3 00 38 02 c0       	mov    ds:0xc0023800,eax
c00165c3:	90                   	nop
c00165c4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00165cb:	90                   	nop
c00165cc:	81 c4 4c 03 00 00    	add    esp,0x34c
c00165d2:	c3                   	ret    
c00165d3:	90                   	nop

c00165d4 <FAT::allocateSwapfile(char const*, int)>:
c00165d4:	55                   	push   ebp
c00165d5:	57                   	push   edi
c00165d6:	56                   	push   esi
c00165d7:	53                   	push   ebx
c00165d8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00165de:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00165e9:	83 ec 0c             	sub    esp,0xc
c00165ec:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00165f3:	e8 c1 11 ff ff       	call   c00077b9 <malloc>
c00165f8:	83 c4 10             	add    esp,0x10
c00165fb:	89 c7                	mov    edi,eax
c00165fd:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0016602:	83 ec 04             	sub    esp,0x4
c0016605:	50                   	push   eax
c0016606:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001660d:	57                   	push   edi
c001660e:	e8 b7 43 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0016613:	83 c4 10             	add    esp,0x10
c0016616:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001661d:	83 ec 04             	sub    esp,0x4
c0016620:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016624:	50                   	push   eax
c0016625:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016629:	50                   	push   eax
c001662a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016631:	e8 00 47 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c0016636:	83 c4 10             	add    esp,0x10
c0016639:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016640:	c1 e0 14             	shl    eax,0x14
c0016643:	89 c7                	mov    edi,eax
c0016645:	89 c5                	mov    ebp,eax
c0016647:	c1 fd 1f             	sar    ebp,0x1f
c001664a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001664e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016652:	89 f9                	mov    ecx,edi
c0016654:	31 c1                	xor    ecx,eax
c0016656:	89 cb                	mov    ebx,ecx
c0016658:	89 e9                	mov    ecx,ebp
c001665a:	31 d1                	xor    ecx,edx
c001665c:	89 ce                	mov    esi,ecx
c001665e:	89 f0                	mov    eax,esi
c0016660:	09 d8                	or     eax,ebx
c0016662:	0f 84 9c 00 00 00    	je     c0016704 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016668:	83 ec 0c             	sub    esp,0xc
c001666b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016672:	e8 8b 45 ff ff       	call   c000ac02 <File::unlink()>
c0016677:	83 c4 10             	add    esp,0x10
c001667a:	83 ec 08             	sub    esp,0x8
c001667d:	6a 12                	push   0x12
c001667f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016686:	e8 ff 43 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c001668b:	83 c4 10             	add    esp,0x10
c001668e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016695:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001669b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00166a2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00166a9:	c1 e0 14             	shl    eax,0x14
c00166ac:	83 ec 04             	sub    esp,0x4
c00166af:	6a 01                	push   0x1
c00166b1:	50                   	push   eax
c00166b2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00166b9:	e8 77 ea fe ff       	call   c0005135 <f_expand>
c00166be:	83 c4 10             	add    esp,0x10
c00166c1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00166c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00166ca:	83 c0 10             	add    eax,0x10
c00166cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00166cf:	83 ec 0c             	sub    esp,0xc
c00166d2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00166d6:	52                   	push   edx
c00166d7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00166db:	52                   	push   edx
c00166dc:	6a 00                	push   0x0
c00166de:	68 00 04 00 00       	push   0x400
c00166e3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00166ea:	ff d0                	call   eax
c00166ec:	83 c4 20             	add    esp,0x20
c00166ef:	83 ec 0c             	sub    esp,0xc
c00166f2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166f9:	e8 ea 43 ff ff       	call   c000aae8 <File::close()>
c00166fe:	83 c4 10             	add    esp,0x10
c0016701:	8d 76 00             	lea    esi,[esi+0x0]
c0016704:	83 ec 08             	sub    esp,0x8
c0016707:	6a 01                	push   0x1
c0016709:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016710:	e8 75 43 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0016715:	83 c4 10             	add    esp,0x10
c0016718:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001671f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016721:	83 c0 0c             	add    eax,0xc
c0016724:	8b 00                	mov    eax,DWORD PTR [eax]
c0016726:	83 ec 0c             	sub    esp,0xc
c0016729:	8d 54 24 24          	lea    edx,[esp+0x24]
c001672d:	52                   	push   edx
c001672e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016732:	52                   	push   edx
c0016733:	6a 00                	push   0x0
c0016735:	6a 04                	push   0x4
c0016737:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001673e:	ff d0                	call   eax
c0016740:	83 c4 20             	add    esp,0x20
c0016743:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001674a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016750:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016757:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001675e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016761:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016768:	83 ec 0c             	sub    esp,0xc
c001676b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016772:	e8 71 43 ff ff       	call   c000aae8 <File::close()>
c0016777:	83 c4 10             	add    esp,0x10
c001677a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016781:	ba 00 00 00 00       	mov    edx,0x0
c0016786:	81 c4 3c 04 00 00    	add    esp,0x43c
c001678c:	5b                   	pop    ebx
c001678d:	5e                   	pop    esi
c001678e:	5f                   	pop    edi
c001678f:	5d                   	pop    ebp
c0016790:	c3                   	ret    
c0016791:	90                   	nop
c0016792:	66 90                	xchg   ax,ax

c0016794 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016794:	57                   	push   edi
c0016795:	56                   	push   esi
c0016796:	53                   	push   ebx
c0016797:	81 ec 50 02 00 00    	sub    esp,0x250
c001679d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00167a5:	74 0d                	je     c00167b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00167a7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00167af:	75 0f                	jne    c00167c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00167b1:	8d 76 00             	lea    esi,[esi+0x0]
c00167b4:	b8 04 00 00 00       	mov    eax,0x4
c00167b9:	e9 36 01 00 00       	jmp    c00168f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00167be:	66 90                	xchg   ax,ax
c00167c0:	83 ec 08             	sub    esp,0x8
c00167c3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00167ca:	50                   	push   eax
c00167cb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00167d2:	e8 bc dd fe ff       	call   c0004593 <f_readdir>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00167e1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00167e8:	83 ec 0c             	sub    esp,0xc
c00167eb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00167f2:	83 c0 16             	add    eax,0x16
c00167f5:	50                   	push   eax
c00167f6:	e8 45 9d fe ff       	call   c0000540 <strlen>
c00167fb:	83 c4 10             	add    esp,0x10
c00167fe:	ba 00 00 00 00       	mov    edx,0x0
c0016803:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016807:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001680b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016812:	25 ff 00 00 00       	and    eax,0xff
c0016817:	83 e0 10             	and    eax,0x10
c001681a:	74 08                	je     c0016824 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001681c:	b8 02 00 00 00       	mov    eax,0x2
c0016821:	eb 09                	jmp    c001682c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016823:	90                   	nop
c0016824:	b8 01 00 00 00       	mov    eax,0x1
c0016829:	8d 76 00             	lea    esi,[esi+0x0]
c001682c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016830:	83 ec 08             	sub    esp,0x8
c0016833:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001683a:	83 c0 16             	add    eax,0x16
c001683d:	50                   	push   eax
c001683e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016842:	83 c0 10             	add    eax,0x10
c0016845:	50                   	push   eax
c0016846:	e8 b5 9d fe ff       	call   c0000600 <strcpy>
c001684b:	83 c4 10             	add    esp,0x10
c001684e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016855:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001685c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016860:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016867:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001686e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016875:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001687c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016883:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001688a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016891:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016898:	89 c6                	mov    esi,eax
c001689a:	89 d7                	mov    edi,edx
c001689c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001689e:	89 c8                	mov    eax,ecx
c00168a0:	89 fa                	mov    edx,edi
c00168a2:	89 f3                	mov    ebx,esi
c00168a4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00168ab:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00168b2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00168b9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00168c0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00168c6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00168cd:	84 c0                	test   al,al
c00168cf:	75 07                	jne    c00168d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c00168d1:	b8 07 00 00 00       	mov    eax,0x7
c00168d6:	eb 1c                	jmp    c00168f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00168d8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00168df:	85 c0                	test   eax,eax
c00168e1:	75 09                	jne    c00168ec <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c00168e3:	b8 00 00 00 00       	mov    eax,0x0
c00168e8:	eb 0a                	jmp    c00168f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00168ea:	66 90                	xchg   ax,ax
c00168ec:	b8 01 00 00 00       	mov    eax,0x1
c00168f1:	8d 76 00             	lea    esi,[esi+0x0]
c00168f4:	81 c4 50 02 00 00    	add    esp,0x250
c00168fa:	5b                   	pop    ebx
c00168fb:	5e                   	pop    esi
c00168fc:	5f                   	pop    edi
c00168fd:	c3                   	ret    
c00168fe:	66 90                	xchg   ax,ax

c0016900 <FAT::read(void*, unsigned long, void*, int*)>:
c0016900:	83 ec 1c             	sub    esp,0x1c
c0016903:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016908:	74 0a                	je     c0016914 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001690a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001690f:	75 0b                	jne    c001691c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016911:	8d 76 00             	lea    esi,[esi+0x0]
c0016914:	b8 04 00 00 00       	mov    eax,0x4
c0016919:	eb 41                	jmp    c001695c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001691b:	90                   	nop
c001691c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016920:	50                   	push   eax
c0016921:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016925:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016929:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001692d:	e8 b6 d4 fe ff       	call   c0003de8 <f_read>
c0016932:	83 c4 10             	add    esp,0x10
c0016935:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001693d:	89 c2                	mov    edx,eax
c001693f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016943:	89 10                	mov    DWORD PTR [eax],edx
c0016945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016949:	85 c0                	test   eax,eax
c001694b:	75 07                	jne    c0016954 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001694d:	b8 00 00 00 00       	mov    eax,0x0
c0016952:	eb 08                	jmp    c001695c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016954:	b8 01 00 00 00       	mov    eax,0x1
c0016959:	8d 76 00             	lea    esi,[esi+0x0]
c001695c:	83 c4 1c             	add    esp,0x1c
c001695f:	c3                   	ret    

c0016960 <FAT::write(void*, unsigned long, void*, int*)>:
c0016960:	83 ec 1c             	sub    esp,0x1c
c0016963:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016968:	74 0a                	je     c0016974 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001696a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001696f:	75 0b                	jne    c001697c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016971:	8d 76 00             	lea    esi,[esi+0x0]
c0016974:	b8 04 00 00 00       	mov    eax,0x4
c0016979:	eb 41                	jmp    c00169bc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001697b:	90                   	nop
c001697c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016980:	50                   	push   eax
c0016981:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016985:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016989:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001698d:	e8 55 d6 fe ff       	call   c0003fe7 <f_write>
c0016992:	83 c4 10             	add    esp,0x10
c0016995:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016999:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001699d:	89 c2                	mov    edx,eax
c001699f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169a3:	89 10                	mov    DWORD PTR [eax],edx
c00169a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169a9:	85 c0                	test   eax,eax
c00169ab:	75 07                	jne    c00169b4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00169ad:	b8 00 00 00 00       	mov    eax,0x0
c00169b2:	eb 08                	jmp    c00169bc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00169b4:	b8 01 00 00 00       	mov    eax,0x1
c00169b9:	8d 76 00             	lea    esi,[esi+0x0]
c00169bc:	83 c4 1c             	add    esp,0x1c
c00169bf:	c3                   	ret    

c00169c0 <FAT::close(void*)>:
c00169c0:	83 ec 1c             	sub    esp,0x1c
c00169c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00169c8:	75 0a                	jne    c00169d4 <FAT::close(void*)+0x14>
c00169ca:	b8 04 00 00 00       	mov    eax,0x4
c00169cf:	eb 3f                	jmp    c0016a10 <FAT::close(void*)+0x50>
c00169d1:	8d 76 00             	lea    esi,[esi+0x0]
c00169d4:	83 ec 0c             	sub    esp,0xc
c00169d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169db:	e8 f0 d8 fe ff       	call   c00042d0 <f_close>
c00169e0:	83 c4 10             	add    esp,0x10
c00169e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169e7:	83 ec 0c             	sub    esp,0xc
c00169ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169ee:	e8 d6 0d ff ff       	call   c00077c9 <free>
c00169f3:	83 c4 10             	add    esp,0x10
c00169f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169fa:	85 c0                	test   eax,eax
c00169fc:	75 0a                	jne    c0016a08 <FAT::close(void*)+0x48>
c00169fe:	b8 00 00 00 00       	mov    eax,0x0
c0016a03:	eb 0b                	jmp    c0016a10 <FAT::close(void*)+0x50>
c0016a05:	8d 76 00             	lea    esi,[esi+0x0]
c0016a08:	b8 01 00 00 00       	mov    eax,0x1
c0016a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a10:	83 c4 1c             	add    esp,0x1c
c0016a13:	c3                   	ret    

c0016a14 <FAT::closeDir(void*)>:
c0016a14:	83 ec 1c             	sub    esp,0x1c
c0016a17:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a1c:	75 0a                	jne    c0016a28 <FAT::closeDir(void*)+0x14>
c0016a1e:	b8 04 00 00 00       	mov    eax,0x4
c0016a23:	eb 3f                	jmp    c0016a64 <FAT::closeDir(void*)+0x50>
c0016a25:	8d 76 00             	lea    esi,[esi+0x0]
c0016a28:	83 ec 0c             	sub    esp,0xc
c0016a2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a2f:	e8 3d db fe ff       	call   c0004571 <f_closedir>
c0016a34:	83 c4 10             	add    esp,0x10
c0016a37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a3b:	83 ec 0c             	sub    esp,0xc
c0016a3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a42:	e8 82 0d ff ff       	call   c00077c9 <free>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a4e:	85 c0                	test   eax,eax
c0016a50:	75 0a                	jne    c0016a5c <FAT::closeDir(void*)+0x48>
c0016a52:	b8 00 00 00 00       	mov    eax,0x0
c0016a57:	eb 0b                	jmp    c0016a64 <FAT::closeDir(void*)+0x50>
c0016a59:	8d 76 00             	lea    esi,[esi+0x0]
c0016a5c:	b8 01 00 00 00       	mov    eax,0x1
c0016a61:	8d 76 00             	lea    esi,[esi+0x0]
c0016a64:	83 c4 1c             	add    esp,0x1c
c0016a67:	c3                   	ret    

c0016a68 <FAT::seek(void*, unsigned long long)>:
c0016a68:	83 ec 2c             	sub    esp,0x2c
c0016a6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016a6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a7b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016a80:	75 0a                	jne    c0016a8c <FAT::seek(void*, unsigned long long)+0x24>
c0016a82:	b8 04 00 00 00       	mov    eax,0x4
c0016a87:	eb 33                	jmp    c0016abc <FAT::seek(void*, unsigned long long)+0x54>
c0016a89:	8d 76 00             	lea    esi,[esi+0x0]
c0016a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a90:	83 ec 08             	sub    esp,0x8
c0016a93:	50                   	push   eax
c0016a94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a98:	e8 62 d8 fe ff       	call   c00042ff <f_lseek>
c0016a9d:	83 c4 10             	add    esp,0x10
c0016aa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016aa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016aa8:	85 c0                	test   eax,eax
c0016aaa:	75 08                	jne    c0016ab4 <FAT::seek(void*, unsigned long long)+0x4c>
c0016aac:	b8 00 00 00 00       	mov    eax,0x0
c0016ab1:	eb 09                	jmp    c0016abc <FAT::seek(void*, unsigned long long)+0x54>
c0016ab3:	90                   	nop
c0016ab4:	b8 01 00 00 00       	mov    eax,0x1
c0016ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0016abc:	83 c4 2c             	add    esp,0x2c
c0016abf:	c3                   	ret    

c0016ac0 <fatWrapperReadDisk>:
c0016ac0:	53                   	push   ebx
c0016ac1:	83 ec 18             	sub    esp,0x18
c0016ac4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016acc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016ad0:	25 ff 00 00 00       	and    eax,0xff
c0016ad5:	8b 0c 85 00 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd600]
c0016adc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ae0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ae4:	ba 00 00 00 00       	mov    edx,0x0
c0016ae9:	83 ec 0c             	sub    esp,0xc
c0016aec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016af0:	53                   	push   ebx
c0016af1:	52                   	push   edx
c0016af2:	50                   	push   eax
c0016af3:	51                   	push   ecx
c0016af4:	e8 c3 60 ff ff       	call   c000cbbc <LogicalDisk::read(unsigned long long, int, void*)>
c0016af9:	83 c4 20             	add    esp,0x20
c0016afc:	83 c4 18             	add    esp,0x18
c0016aff:	5b                   	pop    ebx
c0016b00:	c3                   	ret    
c0016b01:	8d 76 00             	lea    esi,[esi+0x0]

c0016b04 <fatWrapperWriteDisk>:
c0016b04:	53                   	push   ebx
c0016b05:	83 ec 18             	sub    esp,0x18
c0016b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016b10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b14:	25 ff 00 00 00       	and    eax,0xff
c0016b19:	8b 0c 85 00 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd600]
c0016b20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b28:	ba 00 00 00 00       	mov    edx,0x0
c0016b2d:	83 ec 0c             	sub    esp,0xc
c0016b30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b34:	53                   	push   ebx
c0016b35:	52                   	push   edx
c0016b36:	50                   	push   eax
c0016b37:	51                   	push   ecx
c0016b38:	e8 eb 60 ff ff       	call   c000cc28 <LogicalDisk::write(unsigned long long, int, void*)>
c0016b3d:	83 c4 20             	add    esp,0x20
c0016b40:	83 c4 18             	add    esp,0x18
c0016b43:	5b                   	pop    ebx
c0016b44:	c3                   	ret    
c0016b45:	8d 76 00             	lea    esi,[esi+0x0]

c0016b48 <fatWrapperIoctl>:
c0016b48:	53                   	push   ebx
c0016b49:	83 ec 28             	sub    esp,0x28
c0016b4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016b50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b54:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016b58:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016b5c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016b61:	75 35                	jne    c0016b98 <fatWrapperIoctl+0x50>
c0016b63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b6b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b6f:	25 ff 00 00 00       	and    eax,0xff
c0016b74:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c0016b7b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b81:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b8b:	66 89 02             	mov    WORD PTR [edx],ax
c0016b8e:	b8 00 00 00 00       	mov    eax,0x0
c0016b93:	e9 c4 00 00 00       	jmp    c0016c5c <fatWrapperIoctl+0x114>
c0016b98:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016b9d:	75 75                	jne    c0016c14 <fatWrapperIoctl+0xcc>
c0016b9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ba3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ba7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016bab:	25 ff 00 00 00       	and    eax,0xff
c0016bb0:	8b 04 85 00 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd600]
c0016bb7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016bbd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016bc3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016bc9:	89 c8                	mov    eax,ecx
c0016bcb:	89 da                	mov    edx,ebx
c0016bcd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bd1:	c1 e0 0a             	shl    eax,0xa
c0016bd4:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016bd8:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016bde:	8b 0c 8d 00 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd600]
c0016be5:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016beb:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016bf1:	89 cb                	mov    ebx,ecx
c0016bf3:	c1 fb 1f             	sar    ebx,0x1f
c0016bf6:	53                   	push   ebx
c0016bf7:	51                   	push   ecx
c0016bf8:	52                   	push   edx
c0016bf9:	50                   	push   eax
c0016bfa:	e8 41 50 00 00       	call   c001bc40 <__udivdi3>
c0016bff:	83 c4 10             	add    esp,0x10
c0016c02:	89 c2                	mov    edx,eax
c0016c04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c08:	89 10                	mov    DWORD PTR [eax],edx
c0016c0a:	b8 00 00 00 00       	mov    eax,0x0
c0016c0f:	eb 4b                	jmp    c0016c5c <fatWrapperIoctl+0x114>
c0016c11:	8d 76 00             	lea    esi,[esi+0x0]
c0016c14:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016c19:	75 09                	jne    c0016c24 <fatWrapperIoctl+0xdc>
c0016c1b:	b8 00 00 00 00       	mov    eax,0x0
c0016c20:	eb 3a                	jmp    c0016c5c <fatWrapperIoctl+0x114>
c0016c22:	66 90                	xchg   ax,ax
c0016c24:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016c29:	75 19                	jne    c0016c44 <fatWrapperIoctl+0xfc>
c0016c2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c37:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016c3d:	b8 00 00 00 00       	mov    eax,0x0
c0016c42:	eb 18                	jmp    c0016c5c <fatWrapperIoctl+0x114>
c0016c44:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016c49:	75 09                	jne    c0016c54 <fatWrapperIoctl+0x10c>
c0016c4b:	b8 00 00 00 00       	mov    eax,0x0
c0016c50:	eb 0a                	jmp    c0016c5c <fatWrapperIoctl+0x114>
c0016c52:	66 90                	xchg   ax,ax
c0016c54:	b8 04 00 00 00       	mov    eax,0x4
c0016c59:	8d 76 00             	lea    esi,[esi+0x0]
c0016c5c:	83 c4 28             	add    esp,0x28
c0016c5f:	5b                   	pop    ebx
c0016c60:	c3                   	ret    
c0016c61:	90                   	nop
c0016c62:	66 90                	xchg   ax,ax

c0016c64 <FAT::FAT()>:
c0016c64:	83 ec 1c             	sub    esp,0x1c
c0016c67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	50                   	push   eax
c0016c6f:	e8 02 3b ff ff       	call   c000a776 <Filesystem::Filesystem()>
c0016c74:	83 c4 10             	add    esp,0x10
c0016c77:	ba 0c ea 01 c0       	mov    edx,0xc001ea0c
c0016c7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c80:	89 10                	mov    DWORD PTR [eax],edx
c0016c82:	c7 05 00 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x0
c0016c8c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c94:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016c99:	7f 15                	jg     c0016cb0 <FAT::FAT()+0x4c>
c0016c9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c9f:	c7 04 85 20 38 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc7e0],0xffffffff
c0016caa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016cae:	eb e4                	jmp    c0016c94 <FAT::FAT()+0x30>
c0016cb0:	90                   	nop
c0016cb1:	83 c4 1c             	add    esp,0x1c
c0016cb4:	c3                   	ret    
c0016cb5:	90                   	nop
c0016cb6:	66 90                	xchg   ax,ax

c0016cb8 <FAT::fixFilepath(char*)>:
c0016cb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0016cbe:	3c 40                	cmp    al,0x40
c0016cc0:	7e 2e                	jle    c0016cf0 <FAT::fixFilepath(char*)+0x38>
c0016cc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cc6:	8a 00                	mov    al,BYTE PTR [eax]
c0016cc8:	83 e8 41             	sub    eax,0x41
c0016ccb:	88 c2                	mov    dl,al
c0016ccd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cd1:	88 10                	mov    BYTE PTR [eax],dl
c0016cd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cd7:	8a 00                	mov    al,BYTE PTR [eax]
c0016cd9:	0f be c0             	movsx  eax,al
c0016cdc:	8b 04 85 20 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7e0]
c0016ce3:	83 c0 30             	add    eax,0x30
c0016ce6:	88 c2                	mov    dl,al
c0016ce8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cec:	88 10                	mov    BYTE PTR [eax],dl
c0016cee:	66 90                	xchg   ax,ax
c0016cf0:	90                   	nop
c0016cf1:	c3                   	ret    
c0016cf2:	66 90                	xchg   ax,ax

c0016cf4 <FAT::open(char const*, void**, FileOpenMode)>:
c0016cf4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016cfa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016d02:	74 0c                	je     c0016d10 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016d04:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016d0c:	75 0e                	jne    c0016d1c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016d0e:	66 90                	xchg   ax,ax
c0016d10:	b8 04 00 00 00       	mov    eax,0x4
c0016d15:	e9 0a 01 00 00       	jmp    c0016e24 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016d1a:	66 90                	xchg   ax,ax
c0016d1c:	83 ec 08             	sub    esp,0x8
c0016d1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016d26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d2a:	50                   	push   eax
c0016d2b:	e8 d0 98 fe ff       	call   c0000600 <strcpy>
c0016d30:	83 c4 10             	add    esp,0x10
c0016d33:	83 ec 08             	sub    esp,0x8
c0016d36:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d3a:	50                   	push   eax
c0016d3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016d42:	e8 71 ff ff ff       	call   c0016cb8 <FAT::fixFilepath(char*)>
c0016d47:	83 c4 10             	add    esp,0x10
c0016d4a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016d52:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d59:	83 e0 01             	and    eax,0x1
c0016d5c:	74 0a                	je     c0016d68 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016d5e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016d66:	66 90                	xchg   ax,ax
c0016d68:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d6f:	83 e0 04             	and    eax,0x4
c0016d72:	74 10                	je     c0016d84 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016d74:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016d7c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d84:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d8b:	83 e0 02             	and    eax,0x2
c0016d8e:	74 08                	je     c0016d98 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016d90:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d98:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d9f:	83 e0 08             	and    eax,0x8
c0016da2:	74 08                	je     c0016dac <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016da4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016dac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016db3:	83 e0 10             	and    eax,0x10
c0016db6:	74 08                	je     c0016dc0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016db8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016dc0:	83 ec 0c             	sub    esp,0xc
c0016dc3:	68 28 02 00 00       	push   0x228
c0016dc8:	e8 ec 09 ff ff       	call   c00077b9 <malloc>
c0016dcd:	83 c4 10             	add    esp,0x10
c0016dd0:	89 c2                	mov    edx,eax
c0016dd2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016dd9:	89 10                	mov    DWORD PTR [eax],edx
c0016ddb:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016de2:	31 d2                	xor    edx,edx
c0016de4:	88 c2                	mov    dl,al
c0016de6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016ded:	8b 00                	mov    eax,DWORD PTR [eax]
c0016def:	83 ec 04             	sub    esp,0x4
c0016df2:	52                   	push   edx
c0016df3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016df7:	52                   	push   edx
c0016df8:	50                   	push   eax
c0016df9:	e8 1f cd fe ff       	call   c0003b1d <f_open>
c0016dfe:	83 c4 10             	add    esp,0x10
c0016e01:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016e08:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016e10:	74 0a                	je     c0016e1c <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016e12:	b8 01 00 00 00       	mov    eax,0x1
c0016e17:	eb 0b                	jmp    c0016e24 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016e19:	8d 76 00             	lea    esi,[esi+0x0]
c0016e1c:	b8 00 00 00 00       	mov    eax,0x0
c0016e21:	8d 76 00             	lea    esi,[esi+0x0]
c0016e24:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016e2a:	c3                   	ret    
c0016e2b:	90                   	nop

c0016e2c <FAT::openDir(char const*, void**)>:
c0016e2c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016e32:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016e3a:	74 0c                	je     c0016e48 <FAT::openDir(char const*, void**)+0x1c>
c0016e3c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016e44:	75 0e                	jne    c0016e54 <FAT::openDir(char const*, void**)+0x28>
c0016e46:	66 90                	xchg   ax,ax
c0016e48:	b8 04 00 00 00       	mov    eax,0x4
c0016e4d:	e9 82 00 00 00       	jmp    c0016ed4 <FAT::openDir(char const*, void**)+0xa8>
c0016e52:	66 90                	xchg   ax,ax
c0016e54:	83 ec 08             	sub    esp,0x8
c0016e57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e5e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e62:	50                   	push   eax
c0016e63:	e8 98 97 fe ff       	call   c0000600 <strcpy>
c0016e68:	83 c4 10             	add    esp,0x10
c0016e6b:	83 ec 08             	sub    esp,0x8
c0016e6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e72:	50                   	push   eax
c0016e73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e7a:	e8 39 fe ff ff       	call   c0016cb8 <FAT::fixFilepath(char*)>
c0016e7f:	83 c4 10             	add    esp,0x10
c0016e82:	83 ec 0c             	sub    esp,0xc
c0016e85:	6a 30                	push   0x30
c0016e87:	e8 2d 09 ff ff       	call   c00077b9 <malloc>
c0016e8c:	83 c4 10             	add    esp,0x10
c0016e8f:	89 c2                	mov    edx,eax
c0016e91:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e98:	89 10                	mov    DWORD PTR [eax],edx
c0016e9a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016ea1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ea3:	83 ec 08             	sub    esp,0x8
c0016ea6:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016eaa:	52                   	push   edx
c0016eab:	50                   	push   eax
c0016eac:	e8 f5 d5 fe ff       	call   c00044a6 <f_opendir>
c0016eb1:	83 c4 10             	add    esp,0x10
c0016eb4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016ebb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016ec3:	74 07                	je     c0016ecc <FAT::openDir(char const*, void**)+0xa0>
c0016ec5:	b8 01 00 00 00       	mov    eax,0x1
c0016eca:	eb 08                	jmp    c0016ed4 <FAT::openDir(char const*, void**)+0xa8>
c0016ecc:	b8 00 00 00 00       	mov    eax,0x0
c0016ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016eda:	c3                   	ret    
c0016edb:	90                   	nop

c0016edc <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016edc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016ee2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0016eea:	75 0c                	jne    c0016ef8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016eec:	b8 04 00 00 00       	mov    eax,0x4
c0016ef1:	e9 d6 00 00 00       	jmp    c0016fcc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016ef6:	66 90                	xchg   ax,ax
c0016ef8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016f00:	75 0a                	jne    c0016f0c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016f02:	b8 04 00 00 00       	mov    eax,0x4
c0016f07:	e9 c0 00 00 00       	jmp    c0016fcc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f0c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016f14:	75 0a                	jne    c0016f20 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0016f16:	b8 04 00 00 00       	mov    eax,0x4
c0016f1b:	e9 ac 00 00 00       	jmp    c0016fcc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f20:	83 ec 08             	sub    esp,0x8
c0016f23:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f2a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016f31:	50                   	push   eax
c0016f32:	e8 c9 96 fe ff       	call   c0000600 <strcpy>
c0016f37:	83 c4 10             	add    esp,0x10
c0016f3a:	83 ec 08             	sub    esp,0x8
c0016f3d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016f44:	50                   	push   eax
c0016f45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f4c:	e8 67 fd ff ff       	call   c0016cb8 <FAT::fixFilepath(char*)>
c0016f51:	83 c4 10             	add    esp,0x10
c0016f54:	83 ec 08             	sub    esp,0x8
c0016f57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f5b:	50                   	push   eax
c0016f5c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016f63:	50                   	push   eax
c0016f64:	e8 bc d6 fe ff       	call   c0004625 <f_stat>
c0016f69:	83 c4 10             	add    esp,0x10
c0016f6c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016f73:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016f7a:	85 c0                	test   eax,eax
c0016f7c:	74 0a                	je     c0016f88 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016f7e:	83 f8 04             	cmp    eax,0x4
c0016f81:	74 39                	je     c0016fbc <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016f83:	eb 3f                	jmp    c0016fc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016f85:	8d 76 00             	lea    esi,[esi+0x0]
c0016f88:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f8c:	25 ff 00 00 00       	and    eax,0xff
c0016f91:	83 e0 10             	and    eax,0x10
c0016f94:	0f 95 c2             	setne  dl
c0016f97:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016f9e:	88 10                	mov    BYTE PTR [eax],dl
c0016fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fa4:	ba 00 00 00 00       	mov    edx,0x0
c0016fa9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016fb0:	89 01                	mov    DWORD PTR [ecx],eax
c0016fb2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016fb5:	b8 00 00 00 00       	mov    eax,0x0
c0016fba:	eb 10                	jmp    c0016fcc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016fbc:	b8 02 00 00 00       	mov    eax,0x2
c0016fc1:	eb 09                	jmp    c0016fcc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016fc3:	90                   	nop
c0016fc4:	b8 01 00 00 00       	mov    eax,0x1
c0016fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fcc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0016fd2:	c3                   	ret    
c0016fd3:	90                   	nop

c0016fd4 <FAT::unlink(char const*)>:
c0016fd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016fda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016fe2:	75 08                	jne    c0016fec <FAT::unlink(char const*)+0x18>
c0016fe4:	b8 04 00 00 00       	mov    eax,0x4
c0016fe9:	eb 61                	jmp    c001704c <FAT::unlink(char const*)+0x78>
c0016feb:	90                   	nop
c0016fec:	83 ec 08             	sub    esp,0x8
c0016fef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016ff6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ffa:	50                   	push   eax
c0016ffb:	e8 00 96 fe ff       	call   c0000600 <strcpy>
c0017000:	83 c4 10             	add    esp,0x10
c0017003:	83 ec 08             	sub    esp,0x8
c0017006:	8d 44 24 14          	lea    eax,[esp+0x14]
c001700a:	50                   	push   eax
c001700b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017012:	e8 a1 fc ff ff       	call   c0016cb8 <FAT::fixFilepath(char*)>
c0017017:	83 c4 10             	add    esp,0x10
c001701a:	83 ec 0c             	sub    esp,0xc
c001701d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017021:	50                   	push   eax
c0017022:	e8 63 d8 fe ff       	call   c000488a <f_unlink>
c0017027:	83 c4 10             	add    esp,0x10
c001702a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017031:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017038:	85 c0                	test   eax,eax
c001703a:	75 08                	jne    c0017044 <FAT::unlink(char const*)+0x70>
c001703c:	b8 00 00 00 00       	mov    eax,0x0
c0017041:	eb 09                	jmp    c001704c <FAT::unlink(char const*)+0x78>
c0017043:	90                   	nop
c0017044:	b8 01 00 00 00       	mov    eax,0x1
c0017049:	8d 76 00             	lea    esi,[esi+0x0]
c001704c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017052:	c3                   	ret    
c0017053:	90                   	nop

c0017054 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017054:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001705a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017061:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017068:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001706c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017070:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017078:	75 0a                	jne    c0017084 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001707a:	b8 04 00 00 00       	mov    eax,0x4
c001707f:	e9 54 01 00 00       	jmp    c00171d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017084:	83 ec 08             	sub    esp,0x8
c0017087:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001708e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017092:	50                   	push   eax
c0017093:	e8 68 95 fe ff       	call   c0000600 <strcpy>
c0017098:	83 c4 10             	add    esp,0x10
c001709b:	83 ec 08             	sub    esp,0x8
c001709e:	8d 44 24 20          	lea    eax,[esp+0x20]
c00170a2:	50                   	push   eax
c00170a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00170aa:	e8 09 fc ff ff       	call   c0016cb8 <FAT::fixFilepath(char*)>
c00170af:	83 c4 10             	add    esp,0x10
c00170b2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00170ba:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00170c2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170c6:	25 ff 00 00 00       	and    eax,0xff
c00170cb:	83 e0 01             	and    eax,0x1
c00170ce:	74 08                	je     c00170d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00170d0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00170d8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170dc:	25 ff 00 00 00       	and    eax,0xff
c00170e1:	83 e0 02             	and    eax,0x2
c00170e4:	74 0a                	je     c00170f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00170e6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00170ee:	66 90                	xchg   ax,ax
c00170f0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170f4:	25 ff 00 00 00       	and    eax,0xff
c00170f9:	83 e0 04             	and    eax,0x4
c00170fc:	74 0a                	je     c0017108 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00170fe:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017106:	66 90                	xchg   ax,ax
c0017108:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001710c:	25 ff 00 00 00       	and    eax,0xff
c0017111:	83 e0 08             	and    eax,0x8
c0017114:	74 0a                	je     c0017120 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017116:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001711e:	66 90                	xchg   ax,ax
c0017120:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017124:	25 ff 00 00 00       	and    eax,0xff
c0017129:	83 e0 01             	and    eax,0x1
c001712c:	74 0a                	je     c0017138 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001712e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017136:	66 90                	xchg   ax,ax
c0017138:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001713c:	25 ff 00 00 00       	and    eax,0xff
c0017141:	83 e0 02             	and    eax,0x2
c0017144:	74 0a                	je     c0017150 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017146:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001714e:	66 90                	xchg   ax,ax
c0017150:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017154:	25 ff 00 00 00       	and    eax,0xff
c0017159:	83 e0 04             	and    eax,0x4
c001715c:	74 0a                	je     c0017168 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001715e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017166:	66 90                	xchg   ax,ax
c0017168:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001716c:	25 ff 00 00 00       	and    eax,0xff
c0017171:	83 e0 08             	and    eax,0x8
c0017174:	74 0a                	je     c0017180 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017176:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001717e:	66 90                	xchg   ax,ax
c0017180:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017187:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001718e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017195:	31 d2                	xor    edx,edx
c0017197:	88 c2                	mov    dl,al
c0017199:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00171a0:	25 ff 00 00 00       	and    eax,0xff
c00171a5:	83 ec 04             	sub    esp,0x4
c00171a8:	52                   	push   edx
c00171a9:	50                   	push   eax
c00171aa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00171ae:	50                   	push   eax
c00171af:	e8 49 db fe ff       	call   c0004cfd <f_chmod>
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00171be:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00171c5:	85 c0                	test   eax,eax
c00171c7:	75 07                	jne    c00171d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00171c9:	b8 00 00 00 00       	mov    eax,0x0
c00171ce:	eb 08                	jmp    c00171d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00171d0:	b8 01 00 00 00       	mov    eax,0x1
c00171d5:	8d 76 00             	lea    esi,[esi+0x0]
c00171d8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00171de:	c3                   	ret    
c00171df:	90                   	nop

c00171e0 <FAT::rename(char const*, char const*)>:
c00171e0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00171e6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00171ee:	74 0c                	je     c00171fc <FAT::rename(char const*, char const*)+0x1c>
c00171f0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00171f8:	75 0e                	jne    c0017208 <FAT::rename(char const*, char const*)+0x28>
c00171fa:	66 90                	xchg   ax,ax
c00171fc:	b8 04 00 00 00       	mov    eax,0x4
c0017201:	e9 9e 00 00 00       	jmp    c00172a4 <FAT::rename(char const*, char const*)+0xc4>
c0017206:	66 90                	xchg   ax,ax
c0017208:	83 ec 08             	sub    esp,0x8
c001720b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017212:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017219:	50                   	push   eax
c001721a:	e8 e1 93 fe ff       	call   c0000600 <strcpy>
c001721f:	83 c4 10             	add    esp,0x10
c0017222:	83 ec 08             	sub    esp,0x8
c0017225:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001722c:	50                   	push   eax
c001722d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017234:	e8 7f fa ff ff       	call   c0016cb8 <FAT::fixFilepath(char*)>
c0017239:	83 c4 10             	add    esp,0x10
c001723c:	83 ec 08             	sub    esp,0x8
c001723f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017246:	8d 44 24 18          	lea    eax,[esp+0x18]
c001724a:	50                   	push   eax
c001724b:	e8 b0 93 fe ff       	call   c0000600 <strcpy>
c0017250:	83 c4 10             	add    esp,0x10
c0017253:	83 ec 08             	sub    esp,0x8
c0017256:	8d 44 24 14          	lea    eax,[esp+0x14]
c001725a:	50                   	push   eax
c001725b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017262:	e8 51 fa ff ff       	call   c0016cb8 <FAT::fixFilepath(char*)>
c0017267:	83 c4 10             	add    esp,0x10
c001726a:	83 ec 08             	sub    esp,0x8
c001726d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017271:	50                   	push   eax
c0017272:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017279:	50                   	push   eax
c001727a:	e8 c8 d8 fe ff       	call   c0004b47 <f_rename>
c001727f:	83 c4 10             	add    esp,0x10
c0017282:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017289:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017290:	85 c0                	test   eax,eax
c0017292:	75 08                	jne    c001729c <FAT::rename(char const*, char const*)+0xbc>
c0017294:	b8 00 00 00 00       	mov    eax,0x0
c0017299:	eb 09                	jmp    c00172a4 <FAT::rename(char const*, char const*)+0xc4>
c001729b:	90                   	nop
c001729c:	b8 01 00 00 00       	mov    eax,0x1
c00172a1:	8d 76 00             	lea    esi,[esi+0x0]
c00172a4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00172aa:	c3                   	ret    
c00172ab:	90                   	nop

c00172ac <FAT::mkdir(char const*)>:
c00172ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172ba:	75 08                	jne    c00172c4 <FAT::mkdir(char const*)+0x18>
c00172bc:	b8 04 00 00 00       	mov    eax,0x4
c00172c1:	eb 61                	jmp    c0017324 <FAT::mkdir(char const*)+0x78>
c00172c3:	90                   	nop
c00172c4:	83 ec 08             	sub    esp,0x8
c00172c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172d2:	50                   	push   eax
c00172d3:	e8 28 93 fe ff       	call   c0000600 <strcpy>
c00172d8:	83 c4 10             	add    esp,0x10
c00172db:	83 ec 08             	sub    esp,0x8
c00172de:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172e2:	50                   	push   eax
c00172e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ea:	e8 c9 f9 ff ff       	call   c0016cb8 <FAT::fixFilepath(char*)>
c00172ef:	83 c4 10             	add    esp,0x10
c00172f2:	83 ec 0c             	sub    esp,0xc
c00172f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172f9:	50                   	push   eax
c00172fa:	e8 ad d6 fe ff       	call   c00049ac <f_mkdir>
c00172ff:	83 c4 10             	add    esp,0x10
c0017302:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017309:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017310:	85 c0                	test   eax,eax
c0017312:	75 08                	jne    c001731c <FAT::mkdir(char const*)+0x70>
c0017314:	b8 00 00 00 00       	mov    eax,0x0
c0017319:	eb 09                	jmp    c0017324 <FAT::mkdir(char const*)+0x78>
c001731b:	90                   	nop
c001731c:	b8 01 00 00 00       	mov    eax,0x1
c0017321:	8d 76 00             	lea    esi,[esi+0x0]
c0017324:	81 c4 1c 01 00 00    	add    esp,0x11c
c001732a:	c3                   	ret    
c001732b:	90                   	nop

c001732c <FAT::exists(char const*)>:
c001732c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017332:	83 ec 08             	sub    esp,0x8
c0017335:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001733c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017340:	50                   	push   eax
c0017341:	e8 ba 92 fe ff       	call   c0000600 <strcpy>
c0017346:	83 c4 10             	add    esp,0x10
c0017349:	83 ec 08             	sub    esp,0x8
c001734c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017350:	50                   	push   eax
c0017351:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017358:	e8 5b f9 ff ff       	call   c0016cb8 <FAT::fixFilepath(char*)>
c001735d:	83 c4 10             	add    esp,0x10
c0017360:	83 ec 08             	sub    esp,0x8
c0017363:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001736a:	50                   	push   eax
c001736b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001736f:	50                   	push   eax
c0017370:	e8 b0 d2 fe ff       	call   c0004625 <f_stat>
c0017375:	83 c4 10             	add    esp,0x10
c0017378:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001737f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017386:	85 c0                	test   eax,eax
c0017388:	75 06                	jne    c0017390 <FAT::exists(char const*)+0x64>
c001738a:	b0 01                	mov    al,0x1
c001738c:	eb 06                	jmp    c0017394 <FAT::exists(char const*)+0x68>
c001738e:	66 90                	xchg   ax,ax
c0017390:	b0 00                	mov    al,0x0
c0017392:	66 90                	xchg   ax,ax
c0017394:	81 c4 2c 02 00 00    	add    esp,0x22c
c001739a:	c3                   	ret    
c001739b:	90                   	nop

c001739c <isoReadDiscSectorHelper>:
c001739c:	83 ec 2c             	sub    esp,0x2c
c001739f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00173a7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00173ac:	83 e8 41             	sub    eax,0x41
c00173af:	8b 0c 85 00 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd600]
c00173b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173ba:	ba 00 00 00 00       	mov    edx,0x0
c00173bf:	83 ec 0c             	sub    esp,0xc
c00173c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00173c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00173ca:	52                   	push   edx
c00173cb:	50                   	push   eax
c00173cc:	51                   	push   ecx
c00173cd:	e8 ea 57 ff ff       	call   c000cbbc <LogicalDisk::read(unsigned long long, int, void*)>
c00173d2:	83 c4 20             	add    esp,0x20
c00173d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173d9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00173de:	74 0c                	je     c00173ec <isoReadDiscSectorHelper+0x50>
c00173e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173e4:	c1 e0 0b             	shl    eax,0xb
c00173e7:	eb 0b                	jmp    c00173f4 <isoReadDiscSectorHelper+0x58>
c00173e9:	8d 76 00             	lea    esi,[esi+0x0]
c00173ec:	b8 00 00 00 00       	mov    eax,0x0
c00173f1:	8d 76 00             	lea    esi,[esi+0x0]
c00173f4:	83 c4 2c             	add    esp,0x2c
c00173f7:	c3                   	ret    

c00173f8 <iso_kprintf>:
c00173f8:	83 ec 0c             	sub    esp,0xc
c00173fb:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c0017400:	83 ec 08             	sub    esp,0x8
c0017403:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017407:	50                   	push   eax
c0017408:	e8 29 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001740d:	83 c4 10             	add    esp,0x10
c0017410:	90                   	nop
c0017411:	83 c4 0c             	add    esp,0xc
c0017414:	c3                   	ret    
c0017415:	8d 76 00             	lea    esi,[esi+0x0]

c0017418 <iso_kprintfd>:
c0017418:	83 ec 0c             	sub    esp,0xc
c001741b:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c0017420:	83 ec 08             	sub    esp,0x8
c0017423:	68 6c ea 01 c0       	push   0xc001ea6c
c0017428:	50                   	push   eax
c0017429:	e8 08 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001742e:	83 c4 10             	add    esp,0x10
c0017431:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c0017436:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001743a:	83 ec 08             	sub    esp,0x8
c001743d:	52                   	push   edx
c001743e:	50                   	push   eax
c001743f:	e8 ac 12 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017444:	83 c4 10             	add    esp,0x10
c0017447:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c001744c:	83 ec 08             	sub    esp,0x8
c001744f:	68 ed e8 01 c0       	push   0xc001e8ed
c0017454:	50                   	push   eax
c0017455:	e8 dc 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001745a:	83 c4 10             	add    esp,0x10
c001745d:	90                   	nop
c001745e:	83 c4 0c             	add    esp,0xc
c0017461:	c3                   	ret    

c0017462 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017462:	b8 08 00 00 00       	mov    eax,0x8
c0017467:	c3                   	ret    

c0017468 <ISO9660::getName()>:
c0017468:	b8 6f ea 01 c0       	mov    eax,0xc001ea6f
c001746d:	c3                   	ret    

c001746e <ISO9660::closeDir(void*)>:
c001746e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017472:	8b 00                	mov    eax,DWORD PTR [eax]
c0017474:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017477:	90                   	nop

c0017478 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017478:	b8 01 00 00 00       	mov    eax,0x1
c001747d:	c3                   	ret    

c001747e <ISO9660::unlink(char const*)>:
c001747e:	b8 01 00 00 00       	mov    eax,0x1
c0017483:	c3                   	ret    

c0017484 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017484:	b8 03 00 00 00       	mov    eax,0x3
c0017489:	c3                   	ret    

c001748a <ISO9660::rename(char const*, char const*)>:
c001748a:	b8 01 00 00 00       	mov    eax,0x1
c001748f:	c3                   	ret    

c0017490 <ISO9660::mkdir(char const*)>:
c0017490:	b8 01 00 00 00       	mov    eax,0x1
c0017495:	c3                   	ret    

c0017496 <ISO9660::~ISO9660()>:
c0017496:	83 ec 0c             	sub    esp,0xc
c0017499:	ba c0 ea 01 c0       	mov    edx,0xc001eac0
c001749e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174a2:	89 10                	mov    DWORD PTR [eax],edx
c00174a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174a8:	83 ec 0c             	sub    esp,0xc
c00174ab:	50                   	push   eax
c00174ac:	e8 e9 32 ff ff       	call   c000a79a <Filesystem::~Filesystem()>
c00174b1:	83 c4 10             	add    esp,0x10
c00174b4:	90                   	nop
c00174b5:	83 c4 0c             	add    esp,0xc
c00174b8:	c3                   	ret    
c00174b9:	90                   	nop

c00174ba <ISO9660::~ISO9660()>:
c00174ba:	83 ec 0c             	sub    esp,0xc
c00174bd:	83 ec 0c             	sub    esp,0xc
c00174c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174c4:	e8 cd ff ff ff       	call   c0017496 <ISO9660::~ISO9660()>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	83 ec 08             	sub    esp,0x8
c00174cf:	6a 08                	push   0x8
c00174d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174d5:	e8 84 2e ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c00174da:	83 c4 10             	add    esp,0x10
c00174dd:	83 c4 0c             	add    esp,0xc
c00174e0:	c3                   	ret    
c00174e1:	90                   	nop

c00174e2 <ISO9660::exists(char const*)>:
c00174e2:	83 ec 18             	sub    esp,0x18
c00174e5:	68 8a ea 01 c0       	push   0xc001ea8a
c00174ea:	e8 48 8c ff ff       	call   c0010137 <KePanic(char const*)>
c00174ef:	31 c0                	xor    eax,eax
c00174f1:	83 c4 1c             	add    esp,0x1c
c00174f4:	c3                   	ret    
c00174f5:	90                   	nop

c00174f6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00174f6:	56                   	push   esi
c00174f7:	53                   	push   ebx
c00174f8:	50                   	push   eax
c00174f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00174fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017501:	85 db                	test   ebx,ebx
c0017503:	0f 84 82 00 00 00    	je     c001758b <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017509:	85 f6                	test   esi,esi
c001750b:	74 7e                	je     c001758b <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c001750d:	ba 03 00 00 00       	mov    edx,0x3
c0017512:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017517:	75 77                	jne    c0017590 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017519:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001751c:	3a 05 00 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023900
c0017522:	74 34                	je     c0017558 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017524:	83 ec 0c             	sub    esp,0xc
c0017527:	50                   	push   eax
c0017528:	e8 92 f2 fe ff       	call   c00067bf <init_percd>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	ba 0b 00 00 00       	mov    edx,0xb
c0017535:	40                   	inc    eax
c0017536:	74 58                	je     c0017590 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017538:	80 3d 00 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023900,0x0
c001753f:	74 10                	je     c0017551 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017541:	83 ec 0c             	sub    esp,0xc
c0017544:	68 a8 ea 01 c0       	push   0xc001eaa8
c0017549:	e8 e9 8b ff ff       	call   c0010137 <KePanic(char const*)>
c001754e:	83 c4 10             	add    esp,0x10
c0017551:	8a 03                	mov    al,BYTE PTR [ebx]
c0017553:	a2 00 39 02 c0       	mov    ds:0xc0023900,al
c0017558:	83 ec 0c             	sub    esp,0xc
c001755b:	0f be 05 00 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023900
c0017562:	83 c3 03             	add    ebx,0x3
c0017565:	50                   	push   eax
c0017566:	e8 54 f2 fe ff       	call   c00067bf <init_percd>
c001756b:	59                   	pop    ecx
c001756c:	58                   	pop    eax
c001756d:	6a 00                	push   0x0
c001756f:	53                   	push   ebx
c0017570:	e8 88 ed fe ff       	call   c00062fd <iso_open>
c0017575:	83 c4 10             	add    esp,0x10
c0017578:	ba 01 00 00 00       	mov    edx,0x1
c001757d:	83 f8 ff             	cmp    eax,0xffffffff
c0017580:	74 0e                	je     c0017590 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017582:	83 c0 64             	add    eax,0x64
c0017585:	31 d2                	xor    edx,edx
c0017587:	89 06                	mov    DWORD PTR [esi],eax
c0017589:	eb 05                	jmp    c0017590 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c001758b:	ba 04 00 00 00       	mov    edx,0x4
c0017590:	89 d0                	mov    eax,edx
c0017592:	5a                   	pop    edx
c0017593:	5b                   	pop    ebx
c0017594:	5e                   	pop    esi
c0017595:	c3                   	ret    

c0017596 <ISO9660::openDir(char const*, void**)>:
c0017596:	56                   	push   esi
c0017597:	53                   	push   ebx
c0017598:	50                   	push   eax
c0017599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001759d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00175a1:	85 db                	test   ebx,ebx
c00175a3:	74 76                	je     c001761b <ISO9660::openDir(char const*, void**)+0x85>
c00175a5:	85 f6                	test   esi,esi
c00175a7:	74 72                	je     c001761b <ISO9660::openDir(char const*, void**)+0x85>
c00175a9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00175ac:	3a 05 00 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023900
c00175b2:	74 34                	je     c00175e8 <ISO9660::openDir(char const*, void**)+0x52>
c00175b4:	83 ec 0c             	sub    esp,0xc
c00175b7:	50                   	push   eax
c00175b8:	e8 02 f2 fe ff       	call   c00067bf <init_percd>
c00175bd:	83 c4 10             	add    esp,0x10
c00175c0:	ba 0b 00 00 00       	mov    edx,0xb
c00175c5:	40                   	inc    eax
c00175c6:	74 58                	je     c0017620 <ISO9660::openDir(char const*, void**)+0x8a>
c00175c8:	80 3d 00 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023900,0x0
c00175cf:	74 10                	je     c00175e1 <ISO9660::openDir(char const*, void**)+0x4b>
c00175d1:	83 ec 0c             	sub    esp,0xc
c00175d4:	68 a8 ea 01 c0       	push   0xc001eaa8
c00175d9:	e8 59 8b ff ff       	call   c0010137 <KePanic(char const*)>
c00175de:	83 c4 10             	add    esp,0x10
c00175e1:	8a 03                	mov    al,BYTE PTR [ebx]
c00175e3:	a2 00 39 02 c0       	mov    ds:0xc0023900,al
c00175e8:	83 ec 0c             	sub    esp,0xc
c00175eb:	0f be 05 00 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023900
c00175f2:	83 c3 03             	add    ebx,0x3
c00175f5:	50                   	push   eax
c00175f6:	e8 c4 f1 fe ff       	call   c00067bf <init_percd>
c00175fb:	59                   	pop    ecx
c00175fc:	58                   	pop    eax
c00175fd:	6a 01                	push   0x1
c00175ff:	53                   	push   ebx
c0017600:	e8 f8 ec fe ff       	call   c00062fd <iso_open>
c0017605:	83 c4 10             	add    esp,0x10
c0017608:	ba 01 00 00 00       	mov    edx,0x1
c001760d:	83 f8 ff             	cmp    eax,0xffffffff
c0017610:	74 0e                	je     c0017620 <ISO9660::openDir(char const*, void**)+0x8a>
c0017612:	83 c0 64             	add    eax,0x64
c0017615:	31 d2                	xor    edx,edx
c0017617:	89 06                	mov    DWORD PTR [esi],eax
c0017619:	eb 05                	jmp    c0017620 <ISO9660::openDir(char const*, void**)+0x8a>
c001761b:	ba 04 00 00 00       	mov    edx,0x4
c0017620:	89 d0                	mov    eax,edx
c0017622:	5a                   	pop    edx
c0017623:	5b                   	pop    ebx
c0017624:	5e                   	pop    esi
c0017625:	c3                   	ret    

c0017626 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017626:	53                   	push   ebx
c0017627:	83 ec 08             	sub    esp,0x8
c001762a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001762e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017632:	85 c0                	test   eax,eax
c0017634:	74 25                	je     c001765b <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017636:	85 db                	test   ebx,ebx
c0017638:	74 21                	je     c001765b <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c001763a:	83 e8 64             	sub    eax,0x64
c001763d:	52                   	push   edx
c001763e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017646:	50                   	push   eax
c0017647:	e8 59 ed fe ff       	call   c00063a5 <iso_read>
c001764c:	83 c4 10             	add    esp,0x10
c001764f:	89 03                	mov    DWORD PTR [ebx],eax
c0017651:	09 d0                	or     eax,edx
c0017653:	0f 94 c0             	sete   al
c0017656:	0f b6 c0             	movzx  eax,al
c0017659:	eb 05                	jmp    c0017660 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c001765b:	b8 04 00 00 00       	mov    eax,0x4
c0017660:	83 c4 08             	add    esp,0x8
c0017663:	5b                   	pop    ebx
c0017664:	c3                   	ret    
c0017665:	90                   	nop

c0017666 <ISO9660::seek(void*, unsigned long long)>:
c0017666:	57                   	push   edi
c0017667:	56                   	push   esi
c0017668:	b8 04 00 00 00       	mov    eax,0x4
c001766d:	51                   	push   ecx
c001766e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017672:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017676:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001767a:	85 d2                	test   edx,edx
c001767c:	74 1c                	je     c001769a <ISO9660::seek(void*, unsigned long long)+0x34>
c001767e:	6a 00                	push   0x0
c0017680:	83 ea 64             	sub    edx,0x64
c0017683:	57                   	push   edi
c0017684:	56                   	push   esi
c0017685:	52                   	push   edx
c0017686:	e8 30 ee fe ff       	call   c00064bb <iso_seek>
c001768b:	83 c4 10             	add    esp,0x10
c001768e:	31 f0                	xor    eax,esi
c0017690:	31 fa                	xor    edx,edi
c0017692:	09 d0                	or     eax,edx
c0017694:	0f 95 c0             	setne  al
c0017697:	0f b6 c0             	movzx  eax,al
c001769a:	5a                   	pop    edx
c001769b:	5e                   	pop    esi
c001769c:	5f                   	pop    edi
c001769d:	c3                   	ret    

c001769e <ISO9660::tell(void*, unsigned long long*)>:
c001769e:	53                   	push   ebx
c001769f:	83 ec 08             	sub    esp,0x8
c00176a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00176aa:	85 c0                	test   eax,eax
c00176ac:	74 1c                	je     c00176ca <ISO9660::tell(void*, unsigned long long*)+0x2c>
c00176ae:	85 db                	test   ebx,ebx
c00176b0:	74 18                	je     c00176ca <ISO9660::tell(void*, unsigned long long*)+0x2c>
c00176b2:	83 ec 0c             	sub    esp,0xc
c00176b5:	83 e8 64             	sub    eax,0x64
c00176b8:	50                   	push   eax
c00176b9:	e8 81 ee fe ff       	call   c000653f <iso_tell>
c00176be:	83 c4 10             	add    esp,0x10
c00176c1:	89 03                	mov    DWORD PTR [ebx],eax
c00176c3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00176c6:	31 c0                	xor    eax,eax
c00176c8:	eb 05                	jmp    c00176cf <ISO9660::tell(void*, unsigned long long*)+0x31>
c00176ca:	b8 04 00 00 00       	mov    eax,0x4
c00176cf:	83 c4 08             	add    esp,0x8
c00176d2:	5b                   	pop    ebx
c00176d3:	c3                   	ret    

c00176d4 <ISO9660::stat(void*, unsigned long long*)>:
c00176d4:	53                   	push   ebx
c00176d5:	83 ec 08             	sub    esp,0x8
c00176d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00176e0:	85 c0                	test   eax,eax
c00176e2:	74 20                	je     c0017704 <ISO9660::stat(void*, unsigned long long*)+0x30>
c00176e4:	85 db                	test   ebx,ebx
c00176e6:	74 1c                	je     c0017704 <ISO9660::stat(void*, unsigned long long*)+0x30>
c00176e8:	83 ec 0c             	sub    esp,0xc
c00176eb:	83 e8 64             	sub    eax,0x64
c00176ee:	50                   	push   eax
c00176ef:	e8 7c ee fe ff       	call   c0006570 <iso_total>
c00176f4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00176fb:	89 03                	mov    DWORD PTR [ebx],eax
c00176fd:	83 c4 10             	add    esp,0x10
c0017700:	31 c0                	xor    eax,eax
c0017702:	eb 05                	jmp    c0017709 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017704:	b8 04 00 00 00       	mov    eax,0x4
c0017709:	83 c4 08             	add    esp,0x8
c001770c:	5b                   	pop    ebx
c001770d:	c3                   	ret    

c001770e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001770e:	55                   	push   ebp
c001770f:	57                   	push   edi
c0017710:	56                   	push   esi
c0017711:	53                   	push   ebx
c0017712:	83 ec 0c             	sub    esp,0xc
c0017715:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017719:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001771d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017721:	85 ff                	test   edi,edi
c0017723:	0f 94 c2             	sete   dl
c0017726:	85 f6                	test   esi,esi
c0017728:	0f 94 c0             	sete   al
c001772b:	08 c2                	or     dl,al
c001772d:	0f 85 9e 00 00 00    	jne    c00177d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017733:	85 db                	test   ebx,ebx
c0017735:	0f 84 96 00 00 00    	je     c00177d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c001773b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001773e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017744:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001774b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001774e:	3a 05 00 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023900
c0017754:	74 34                	je     c001778a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017756:	83 ec 0c             	sub    esp,0xc
c0017759:	50                   	push   eax
c001775a:	e8 60 f0 fe ff       	call   c00067bf <init_percd>
c001775f:	83 c4 10             	add    esp,0x10
c0017762:	ba 0b 00 00 00       	mov    edx,0xb
c0017767:	40                   	inc    eax
c0017768:	74 6c                	je     c00177d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c001776a:	80 3d 00 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023900,0x0
c0017771:	74 10                	je     c0017783 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017773:	83 ec 0c             	sub    esp,0xc
c0017776:	68 a8 ea 01 c0       	push   0xc001eaa8
c001777b:	e8 b7 89 ff ff       	call   c0010137 <KePanic(char const*)>
c0017780:	83 c4 10             	add    esp,0x10
c0017783:	8a 03                	mov    al,BYTE PTR [ebx]
c0017785:	a2 00 39 02 c0       	mov    ds:0xc0023900,al
c001778a:	83 c3 03             	add    ebx,0x3
c001778d:	52                   	push   edx
c001778e:	52                   	push   edx
c001778f:	6a 00                	push   0x0
c0017791:	53                   	push   ebx
c0017792:	e8 66 eb fe ff       	call   c00062fd <iso_open>
c0017797:	83 c4 10             	add    esp,0x10
c001779a:	89 c5                	mov    ebp,eax
c001779c:	83 f8 ff             	cmp    eax,0xffffffff
c001779f:	75 0f                	jne    c00177b0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c00177a1:	50                   	push   eax
c00177a2:	50                   	push   eax
c00177a3:	6a 01                	push   0x1
c00177a5:	53                   	push   ebx
c00177a6:	e8 52 eb fe ff       	call   c00062fd <iso_open>
c00177ab:	c6 07 01             	mov    BYTE PTR [edi],0x1
c00177ae:	eb 1a                	jmp    c00177ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c00177b0:	83 ec 0c             	sub    esp,0xc
c00177b3:	50                   	push   eax
c00177b4:	e8 b7 ed fe ff       	call   c0006570 <iso_total>
c00177b9:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00177c0:	89 06                	mov    DWORD PTR [esi],eax
c00177c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177c5:	e8 bd eb fe ff       	call   c0006387 <iso_close>
c00177ca:	83 c4 10             	add    esp,0x10
c00177cd:	31 d2                	xor    edx,edx
c00177cf:	eb 05                	jmp    c00177d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c00177d1:	ba 04 00 00 00       	mov    edx,0x4
c00177d6:	83 c4 0c             	add    esp,0xc
c00177d9:	89 d0                	mov    eax,edx
c00177db:	5b                   	pop    ebx
c00177dc:	5e                   	pop    esi
c00177dd:	5f                   	pop    edi
c00177de:	5d                   	pop    ebp
c00177df:	c3                   	ret    

c00177e0 <ISO9660::close(void*)>:
c00177e0:	83 ec 0c             	sub    esp,0xc
c00177e3:	b8 04 00 00 00       	mov    eax,0x4
c00177e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00177ec:	85 d2                	test   edx,edx
c00177ee:	74 11                	je     c0017801 <ISO9660::close(void*)+0x21>
c00177f0:	83 ec 0c             	sub    esp,0xc
c00177f3:	83 ea 64             	sub    edx,0x64
c00177f6:	52                   	push   edx
c00177f7:	e8 8b eb fe ff       	call   c0006387 <iso_close>
c00177fc:	83 c4 10             	add    esp,0x10
c00177ff:	31 c0                	xor    eax,eax
c0017801:	83 c4 0c             	add    esp,0xc
c0017804:	c3                   	ret    
c0017805:	90                   	nop

c0017806 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017806:	55                   	push   ebp
c0017807:	57                   	push   edi
c0017808:	56                   	push   esi
c0017809:	53                   	push   ebx
c001780a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017810:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017817:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001781e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017825:	85 c0                	test   eax,eax
c0017827:	0f 84 96 00 00 00    	je     c00178c3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c001782d:	85 db                	test   ebx,ebx
c001782f:	0f 84 8e 00 00 00    	je     c00178c3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017835:	83 ec 0c             	sub    esp,0xc
c0017838:	83 e8 64             	sub    eax,0x64
c001783b:	50                   	push   eax
c001783c:	e8 80 ed fe ff       	call   c00065c1 <iso_readdir>
c0017841:	83 c4 10             	add    esp,0x10
c0017844:	89 c6                	mov    esi,eax
c0017846:	85 c0                	test   eax,eax
c0017848:	75 18                	jne    c0017862 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c001784a:	52                   	push   edx
c001784b:	68 10 01 00 00       	push   0x110
c0017850:	6a 00                	push   0x0
c0017852:	57                   	push   edi
c0017853:	e8 78 8c fe ff       	call   c00004d0 <memset>
c0017858:	83 c4 10             	add    esp,0x10
c001785b:	b8 01 00 00 00       	mov    eax,0x1
c0017860:	eb 66                	jmp    c00178c8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017862:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017868:	8d 68 08             	lea    ebp,[eax+0x8]
c001786b:	83 ec 0c             	sub    esp,0xc
c001786e:	55                   	push   ebp
c001786f:	e8 cc 8c fe ff       	call   c0000540 <strlen>
c0017874:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001787c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017880:	83 c4 10             	add    esp,0x10
c0017883:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017887:	75 0a                	jne    c0017893 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017889:	b8 02 00 00 00       	mov    eax,0x2
c001788e:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017891:	74 05                	je     c0017898 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017893:	b8 01 00 00 00       	mov    eax,0x1
c0017898:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001789c:	50                   	push   eax
c001789d:	50                   	push   eax
c001789e:	55                   	push   ebp
c001789f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00178a3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00178a7:	50                   	push   eax
c00178a8:	e8 53 8d fe ff       	call   c0000600 <strcpy>
c00178ad:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00178b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178b6:	31 c0                	xor    eax,eax
c00178b8:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c00178be:	83 c4 10             	add    esp,0x10
c00178c1:	eb 05                	jmp    c00178c8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c00178c3:	b8 04 00 00 00       	mov    eax,0x4
c00178c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178ce:	5b                   	pop    ebx
c00178cf:	5e                   	pop    esi
c00178d0:	5f                   	pop    edi
c00178d1:	5d                   	pop    ebp
c00178d2:	c3                   	ret    

c00178d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00178d3:	57                   	push   edi
c00178d4:	56                   	push   esi
c00178d5:	53                   	push   ebx
c00178d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00178da:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00178de:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00178e2:	39 35 04 39 02 c0    	cmp    DWORD PTR ds:0xc0023904,esi
c00178e8:	75 08                	jne    c00178f2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00178ea:	38 1d 6c f4 01 c0    	cmp    BYTE PTR ds:0xc001f46c,bl
c00178f0:	74 4a                	je     c001793c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00178f2:	83 ec 0c             	sub    esp,0xc
c00178f5:	31 d2                	xor    edx,edx
c00178f7:	68 20 39 02 c0       	push   0xc0023920
c00178fc:	0f be c3             	movsx  eax,bl
c00178ff:	6a 01                	push   0x1
c0017901:	52                   	push   edx
c0017902:	56                   	push   esi
c0017903:	ff 34 85 fc 28 02 c0 	push   DWORD PTR [eax*4-0x3ffdd704]
c001790a:	e8 ad 52 ff ff       	call   c000cbbc <LogicalDisk::read(unsigned long long, int, void*)>
c001790f:	83 c4 20             	add    esp,0x20
c0017912:	85 c0                	test   eax,eax
c0017914:	75 0e                	jne    c0017924 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017916:	89 35 04 39 02 c0    	mov    DWORD PTR ds:0xc0023904,esi
c001791c:	88 1d 6c f4 01 c0    	mov    BYTE PTR ds:0xc001f46c,bl
c0017922:	eb 18                	jmp    c001793c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017924:	50                   	push   eax
c0017925:	68 00 08 00 00       	push   0x800
c001792a:	6a 00                	push   0x0
c001792c:	57                   	push   edi
c001792d:	e8 9e 8b fe ff       	call   c00004d0 <memset>
c0017932:	83 c4 10             	add    esp,0x10
c0017935:	b8 01 00 00 00       	mov    eax,0x1
c001793a:	eb 0e                	jmp    c001794a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001793c:	be 20 39 02 c0       	mov    esi,0xc0023920
c0017941:	b9 00 08 00 00       	mov    ecx,0x800
c0017946:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017948:	31 c0                	xor    eax,eax
c001794a:	5b                   	pop    ebx
c001794b:	5e                   	pop    esi
c001794c:	5f                   	pop    edi
c001794d:	c3                   	ret    

c001794e <ISO9660::tryMount(LogicalDisk*, int)>:
c001794e:	53                   	push   ebx
c001794f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017955:	c7 05 04 39 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023904,0xdeadbeef
c001795f:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017966:	8d 58 41             	lea    ebx,[eax+0x41]
c0017969:	0f be db             	movsx  ebx,bl
c001796c:	53                   	push   ebx
c001796d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017971:	50                   	push   eax
c0017972:	6a 10                	push   0x10
c0017974:	e8 5a ff ff ff       	call   c00178d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	31 d2                	xor    edx,edx
c001797e:	85 c0                	test   eax,eax
c0017980:	75 33                	jne    c00179b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017982:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017987:	75 2c                	jne    c00179b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017989:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001798e:	75 25                	jne    c00179b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017990:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017995:	75 1e                	jne    c00179b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017997:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001799c:	75 17                	jne    c00179b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001799e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00179a3:	75 10                	jne    c00179b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179a5:	83 ec 0c             	sub    esp,0xc
c00179a8:	53                   	push   ebx
c00179a9:	e8 11 ee fe ff       	call   c00067bf <init_percd>
c00179ae:	83 c4 10             	add    esp,0x10
c00179b1:	40                   	inc    eax
c00179b2:	0f 95 c2             	setne  dl
c00179b5:	88 d0                	mov    al,dl
c00179b7:	81 c4 08 08 00 00    	add    esp,0x808
c00179bd:	5b                   	pop    ebx
c00179be:	c3                   	ret    
c00179bf:	90                   	nop

c00179c0 <ISO9660::ISO9660()>:
c00179c0:	83 ec 0c             	sub    esp,0xc
c00179c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c7:	83 ec 0c             	sub    esp,0xc
c00179ca:	50                   	push   eax
c00179cb:	e8 a6 2d ff ff       	call   c000a776 <Filesystem::Filesystem()>
c00179d0:	83 c4 10             	add    esp,0x10
c00179d3:	ba c0 ea 01 c0       	mov    edx,0xc001eac0
c00179d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179dc:	89 10                	mov    DWORD PTR [eax],edx
c00179de:	e8 de ee fe ff       	call   c00068c1 <fs_iso9660_init>
c00179e3:	90                   	nop
c00179e4:	83 c4 0c             	add    esp,0xc
c00179e7:	c3                   	ret    

c00179e8 <SoundCard::beginPlayback()>:
c00179e8:	c7 44 24 04 20 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb20
c00179f0:	e9 42 87 ff ff       	jmp    c0010137 <KePanic(char const*)>
c00179f5:	90                   	nop

c00179f6 <SoundCard::stopPlayback()>:
c00179f6:	c7 44 24 04 20 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb20
c00179fe:	e9 34 87 ff ff       	jmp    c0010137 <KePanic(char const*)>
c0017a03:	90                   	nop

c0017a04 <SoundCard::SoundCard(char const*)>:
c0017a04:	83 ec 1c             	sub    esp,0x1c
c0017a07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0b:	83 ec 08             	sub    esp,0x8
c0017a0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a12:	50                   	push   eax
c0017a13:	e8 14 40 ff ff       	call   c000ba2c <Device::Device(char const*)>
c0017a18:	83 c4 10             	add    esp,0x10
c0017a1b:	ba 6c eb 01 c0       	mov    edx,0xc001eb6c
c0017a20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a24:	89 10                	mov    DWORD PTR [eax],edx
c0017a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017a31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a35:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a43:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a51:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a5f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017a69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a71:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017a76:	7f 19                	jg     c0017a91 <SoundCard::SoundCard(char const*)+0x8d>
c0017a78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a80:	83 c2 54             	add    edx,0x54
c0017a83:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017a8b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a8f:	eb e0                	jmp    c0017a71 <SoundCard::SoundCard(char const*)+0x6d>
c0017a91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a95:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017a9c:	90                   	nop
c0017a9d:	83 c4 1c             	add    esp,0x1c
c0017aa0:	c3                   	ret    
c0017aa1:	90                   	nop

c0017aa2 <SoundCard::~SoundCard()>:
c0017aa2:	83 ec 0c             	sub    esp,0xc
c0017aa5:	ba 6c eb 01 c0       	mov    edx,0xc001eb6c
c0017aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aae:	89 10                	mov    DWORD PTR [eax],edx
c0017ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab4:	83 ec 0c             	sub    esp,0xc
c0017ab7:	50                   	push   eax
c0017ab8:	e8 d9 3c ff ff       	call   c000b796 <Device::~Device()>
c0017abd:	83 c4 10             	add    esp,0x10
c0017ac0:	90                   	nop
c0017ac1:	83 c4 0c             	add    esp,0xc
c0017ac4:	c3                   	ret    
c0017ac5:	90                   	nop

c0017ac6 <SoundCard::~SoundCard()>:
c0017ac6:	83 ec 0c             	sub    esp,0xc
c0017ac9:	83 ec 0c             	sub    esp,0xc
c0017acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ad0:	e8 cd ff ff ff       	call   c0017aa2 <SoundCard::~SoundCard()>
c0017ad5:	83 c4 10             	add    esp,0x10
c0017ad8:	83 ec 08             	sub    esp,0x8
c0017adb:	68 e8 01 00 00       	push   0x1e8
c0017ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ae4:	e8 75 28 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c0017ae9:	83 c4 10             	add    esp,0x10
c0017aec:	83 c4 0c             	add    esp,0xc
c0017aef:	c3                   	ret    

c0017af0 <SoundCard::configureRates(int, int, int)>:
c0017af0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017af4:	31 c0                	xor    eax,eax
c0017af6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017afd:	75 20                	jne    c0017b1f <SoundCard::configureRates(int, int, int)+0x2f>
c0017aff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b03:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b0d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b17:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017b1d:	b0 01                	mov    al,0x1
c0017b1f:	c3                   	ret    

c0017b20 <SoundCard::getSamples16(int, short*)>:
c0017b20:	55                   	push   ebp
c0017b21:	57                   	push   edi
c0017b22:	31 ff                	xor    edi,edi
c0017b24:	56                   	push   esi
c0017b25:	53                   	push   ebx
c0017b26:	31 db                	xor    ebx,ebx
c0017b28:	83 ec 10             	sub    esp,0x10
c0017b2b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b2f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b33:	8d 04 36             	lea    eax,[esi+esi*1]
c0017b36:	50                   	push   eax
c0017b37:	6a 00                	push   0x0
c0017b39:	55                   	push   ebp
c0017b3a:	e8 91 89 fe ff       	call   c00004d0 <memset>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b46:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017b4d:	85 c0                	test   eax,eax
c0017b4f:	74 1b                	je     c0017b6c <SoundCard::getSamples16(int, short*)+0x4c>
c0017b51:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017b55:	75 15                	jne    c0017b6c <SoundCard::getSamples16(int, short*)+0x4c>
c0017b57:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b5b:	55                   	push   ebp
c0017b5c:	56                   	push   esi
c0017b5d:	50                   	push   eax
c0017b5e:	e8 ed 02 00 00       	call   c0017e50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017b63:	83 c4 10             	add    esp,0x10
c0017b66:	39 c7                	cmp    edi,eax
c0017b68:	7d 02                	jge    c0017b6c <SoundCard::getSamples16(int, short*)+0x4c>
c0017b6a:	89 c7                	mov    edi,eax
c0017b6c:	43                   	inc    ebx
c0017b6d:	83 fb 20             	cmp    ebx,0x20
c0017b70:	75 d0                	jne    c0017b42 <SoundCard::getSamples16(int, short*)+0x22>
c0017b72:	83 c4 0c             	add    esp,0xc
c0017b75:	89 f8                	mov    eax,edi
c0017b77:	5b                   	pop    ebx
c0017b78:	5e                   	pop    esi
c0017b79:	5f                   	pop    edi
c0017b7a:	5d                   	pop    ebp
c0017b7b:	c3                   	ret    

c0017b7c <SoundCard::getSamples32(int, int*)>:
c0017b7c:	55                   	push   ebp
c0017b7d:	57                   	push   edi
c0017b7e:	31 ff                	xor    edi,edi
c0017b80:	56                   	push   esi
c0017b81:	31 f6                	xor    esi,esi
c0017b83:	53                   	push   ebx
c0017b84:	83 ec 10             	sub    esp,0x10
c0017b87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b8b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b8f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b93:	c1 e0 02             	shl    eax,0x2
c0017b96:	50                   	push   eax
c0017b97:	6a 00                	push   0x0
c0017b99:	55                   	push   ebp
c0017b9a:	e8 31 89 fe ff       	call   c00004d0 <memset>
c0017b9f:	83 c4 10             	add    esp,0x10
c0017ba2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017ba9:	85 c0                	test   eax,eax
c0017bab:	74 1b                	je     c0017bc8 <SoundCard::getSamples32(int, int*)+0x4c>
c0017bad:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017bb1:	75 15                	jne    c0017bc8 <SoundCard::getSamples32(int, int*)+0x4c>
c0017bb3:	53                   	push   ebx
c0017bb4:	55                   	push   ebp
c0017bb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bb9:	50                   	push   eax
c0017bba:	e8 55 03 00 00       	call   c0017f14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017bbf:	83 c4 10             	add    esp,0x10
c0017bc2:	39 c6                	cmp    esi,eax
c0017bc4:	7d 02                	jge    c0017bc8 <SoundCard::getSamples32(int, int*)+0x4c>
c0017bc6:	89 c6                	mov    esi,eax
c0017bc8:	47                   	inc    edi
c0017bc9:	83 ff 20             	cmp    edi,0x20
c0017bcc:	75 d4                	jne    c0017ba2 <SoundCard::getSamples32(int, int*)+0x26>
c0017bce:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017bd4:	85 f6                	test   esi,esi
c0017bd6:	75 0f                	jne    c0017be7 <SoundCard::getSamples32(int, int*)+0x6b>
c0017bd8:	84 c0                	test   al,al
c0017bda:	74 1b                	je     c0017bf7 <SoundCard::getSamples32(int, int*)+0x7b>
c0017bdc:	83 ec 0c             	sub    esp,0xc
c0017bdf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017be1:	53                   	push   ebx
c0017be2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017be5:	eb 0d                	jmp    c0017bf4 <SoundCard::getSamples32(int, int*)+0x78>
c0017be7:	84 c0                	test   al,al
c0017be9:	75 0c                	jne    c0017bf7 <SoundCard::getSamples32(int, int*)+0x7b>
c0017beb:	83 ec 0c             	sub    esp,0xc
c0017bee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bf0:	53                   	push   ebx
c0017bf1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017bf4:	83 c4 10             	add    esp,0x10
c0017bf7:	83 c4 0c             	add    esp,0xc
c0017bfa:	89 f0                	mov    eax,esi
c0017bfc:	5b                   	pop    ebx
c0017bfd:	5e                   	pop    esi
c0017bfe:	5f                   	pop    edi
c0017bff:	5d                   	pop    ebp
c0017c00:	c3                   	ret    
c0017c01:	90                   	nop

c0017c02 <SoundCard::addChannel(SoundPort*)>:
c0017c02:	83 ec 0c             	sub    esp,0xc
c0017c05:	31 c0                	xor    eax,eax
c0017c07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c0b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017c13:	74 1b                	je     c0017c30 <SoundCard::addChannel(SoundPort*)+0x2e>
c0017c15:	40                   	inc    eax
c0017c16:	83 f8 20             	cmp    eax,0x20
c0017c19:	75 f0                	jne    c0017c0b <SoundCard::addChannel(SoundPort*)+0x9>
c0017c1b:	83 ec 0c             	sub    esp,0xc
c0017c1e:	68 45 eb 01 c0       	push   0xc001eb45
c0017c23:	e8 0f 85 ff ff       	call   c0010137 <KePanic(char const*)>
c0017c28:	83 c4 10             	add    esp,0x10
c0017c2b:	83 c8 ff             	or     eax,0xffffffff
c0017c2e:	eb 0b                	jmp    c0017c3b <SoundCard::addChannel(SoundPort*)+0x39>
c0017c30:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017c34:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017c3b:	83 c4 0c             	add    esp,0xc
c0017c3e:	c3                   	ret    
c0017c3f:	90                   	nop

c0017c40 <SoundCard::removeChannel(int)>:
c0017c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c48:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017c53:	c3                   	ret    

c0017c54 <SoundPort::SoundPort(int, int, int, int)>:
c0017c54:	83 ec 0c             	sub    esp,0xc
c0017c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c5b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c66:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c72:	89 10                	mov    DWORD PTR [eax],edx
c0017c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c87:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017c8a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017c8f:	75 13                	jne    c0017ca4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c97:	05 a0 0f 00 00       	add    eax,0xfa0
c0017c9c:	01 c0                	add    eax,eax
c0017c9e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ca2:	66 90                	xchg   ax,ax
c0017ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ca8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cb3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cbe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017cc1:	c1 e0 02             	shl    eax,0x2
c0017cc4:	83 ec 0c             	sub    esp,0xc
c0017cc7:	50                   	push   eax
c0017cc8:	e8 ec fa fe ff       	call   c00077b9 <malloc>
c0017ccd:	83 c4 10             	add    esp,0x10
c0017cd0:	89 c2                	mov    edx,eax
c0017cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cd6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017cd9:	90                   	nop
c0017cda:	83 c4 0c             	add    esp,0xc
c0017cdd:	c3                   	ret    
c0017cde:	66 90                	xchg   ax,ax

c0017ce0 <SoundPort::~SoundPort()>:
c0017ce0:	83 ec 0c             	sub    esp,0xc
c0017ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ce7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017cea:	85 c0                	test   eax,eax
c0017cec:	74 1e                	je     c0017d0c <SoundPort::~SoundPort()+0x2c>
c0017cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017cf5:	83 ec 0c             	sub    esp,0xc
c0017cf8:	50                   	push   eax
c0017cf9:	e8 cb fa fe ff       	call   c00077c9 <free>
c0017cfe:	83 c4 10             	add    esp,0x10
c0017d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d05:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017d0c:	90                   	nop
c0017d0d:	83 c4 0c             	add    esp,0xc
c0017d10:	c3                   	ret    
c0017d11:	90                   	nop
c0017d12:	66 90                	xchg   ax,ax

c0017d14 <SoundPort::unpause()>:
c0017d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d18:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017d1c:	c3                   	ret    
c0017d1d:	90                   	nop
c0017d1e:	66 90                	xchg   ax,ax

c0017d20 <SoundPort::pause()>:
c0017d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d24:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017d28:	c3                   	ret    
c0017d29:	90                   	nop
c0017d2a:	66 90                	xchg   ax,ax

c0017d2c <SoundPort::getBufferUsed()>:
c0017d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d30:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017d33:	c3                   	ret    

c0017d34 <SoundPort::getBufferSize()>:
c0017d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d38:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017d3b:	c3                   	ret    

c0017d3c <SoundPort::buffer16(short*, int)>:
c0017d3c:	55                   	push   ebp
c0017d3d:	57                   	push   edi
c0017d3e:	56                   	push   esi
c0017d3f:	53                   	push   ebx
c0017d40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d44:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017d48:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017d4b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017d4e:	74 68                	je     c0017db8 <SoundPort::buffer16(short*, int)+0x7c>
c0017d50:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d54:	85 c9                	test   ecx,ecx
c0017d56:	7e 60                	jle    c0017db8 <SoundPort::buffer16(short*, int)+0x7c>
c0017d58:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017d5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017d5f:	c1 e1 0f             	shl    ecx,0xf
c0017d62:	8d 70 01             	lea    esi,[eax+0x1]
c0017d65:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017d68:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017d6b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d6e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d71:	74 4d                	je     c0017dc0 <SoundPort::buffer16(short*, int)+0x84>
c0017d73:	31 f6                	xor    esi,esi
c0017d75:	eb 21                	jmp    c0017d98 <SoundPort::buffer16(short*, int)+0x5c>
c0017d77:	90                   	nop
c0017d78:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017d7d:	8d 79 01             	lea    edi,[ecx+0x1]
c0017d80:	c1 e3 0f             	shl    ebx,0xf
c0017d83:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017d86:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017d89:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017d8c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d8f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d92:	74 1c                	je     c0017db0 <SoundPort::buffer16(short*, int)+0x74>
c0017d94:	89 c6                	mov    esi,eax
c0017d96:	66 90                	xchg   ax,ax
c0017d98:	8d 46 01             	lea    eax,[esi+0x1]
c0017d9b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017d9f:	75 d7                	jne    c0017d78 <SoundPort::buffer16(short*, int)+0x3c>
c0017da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017da5:	8d 76 00             	lea    esi,[esi+0x0]
c0017da8:	5b                   	pop    ebx
c0017da9:	5e                   	pop    esi
c0017daa:	5f                   	pop    edi
c0017dab:	5d                   	pop    ebp
c0017dac:	c3                   	ret    
c0017dad:	8d 76 00             	lea    esi,[esi+0x0]
c0017db0:	5b                   	pop    ebx
c0017db1:	8d 46 02             	lea    eax,[esi+0x2]
c0017db4:	5e                   	pop    esi
c0017db5:	5f                   	pop    edi
c0017db6:	5d                   	pop    ebp
c0017db7:	c3                   	ret    
c0017db8:	5b                   	pop    ebx
c0017db9:	31 c0                	xor    eax,eax
c0017dbb:	5e                   	pop    esi
c0017dbc:	5f                   	pop    edi
c0017dbd:	5d                   	pop    ebp
c0017dbe:	c3                   	ret    
c0017dbf:	90                   	nop
c0017dc0:	b8 01 00 00 00       	mov    eax,0x1
c0017dc5:	eb e1                	jmp    c0017da8 <SoundPort::buffer16(short*, int)+0x6c>
c0017dc7:	90                   	nop

c0017dc8 <SoundPort::buffer32(int*, int)>:
c0017dc8:	55                   	push   ebp
c0017dc9:	57                   	push   edi
c0017dca:	56                   	push   esi
c0017dcb:	53                   	push   ebx
c0017dcc:	51                   	push   ecx
c0017dcd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dd5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017dd8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017ddc:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ddf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017de2:	74 5c                	je     c0017e40 <SoundPort::buffer32(int*, int)+0x78>
c0017de4:	85 c0                	test   eax,eax
c0017de6:	7e 58                	jle    c0017e40 <SoundPort::buffer32(int*, int)+0x78>
c0017de8:	8d 71 01             	lea    esi,[ecx+0x1]
c0017deb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017dee:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017df1:	8b 37                	mov    esi,DWORD PTR [edi]
c0017df3:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017df6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017df9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dfc:	74 4a                	je     c0017e48 <SoundPort::buffer32(int*, int)+0x80>
c0017dfe:	31 f6                	xor    esi,esi
c0017e00:	eb 1e                	jmp    c0017e20 <SoundPort::buffer32(int*, int)+0x58>
c0017e02:	66 90                	xchg   ax,ax
c0017e04:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017e07:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017e0a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017e0d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017e10:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017e14:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e17:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e1a:	74 18                	je     c0017e34 <SoundPort::buffer32(int*, int)+0x6c>
c0017e1c:	89 de                	mov    esi,ebx
c0017e1e:	66 90                	xchg   ax,ax
c0017e20:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017e23:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017e26:	75 dc                	jne    c0017e04 <SoundPort::buffer32(int*, int)+0x3c>
c0017e28:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017e2b:	90                   	nop
c0017e2c:	5a                   	pop    edx
c0017e2d:	5b                   	pop    ebx
c0017e2e:	5e                   	pop    esi
c0017e2f:	5f                   	pop    edi
c0017e30:	5d                   	pop    ebp
c0017e31:	c3                   	ret    
c0017e32:	66 90                	xchg   ax,ax
c0017e34:	5a                   	pop    edx
c0017e35:	8d 46 02             	lea    eax,[esi+0x2]
c0017e38:	5b                   	pop    ebx
c0017e39:	5e                   	pop    esi
c0017e3a:	5f                   	pop    edi
c0017e3b:	5d                   	pop    ebp
c0017e3c:	c3                   	ret    
c0017e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e40:	5a                   	pop    edx
c0017e41:	31 c0                	xor    eax,eax
c0017e43:	5b                   	pop    ebx
c0017e44:	5e                   	pop    esi
c0017e45:	5f                   	pop    edi
c0017e46:	5d                   	pop    ebp
c0017e47:	c3                   	ret    
c0017e48:	b8 01 00 00 00       	mov    eax,0x1
c0017e4d:	eb dd                	jmp    c0017e2c <SoundPort::buffer32(int*, int)+0x64>
c0017e4f:	90                   	nop

c0017e50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017e50:	57                   	push   edi
c0017e51:	56                   	push   esi
c0017e52:	53                   	push   ebx
c0017e53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e57:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017e5b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017e61:	39 03                	cmp    DWORD PTR [ebx],eax
c0017e63:	74 13                	je     c0017e78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017e65:	83 ec 0c             	sub    esp,0xc
c0017e68:	68 98 eb 01 c0       	push   0xc001eb98
c0017e6d:	e8 c5 82 ff ff       	call   c0010137 <KePanic(char const*)>
c0017e72:	83 c4 10             	add    esp,0x10
c0017e75:	8d 76 00             	lea    esi,[esi+0x0]
c0017e78:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017e7e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017e81:	74 11                	je     c0017e94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017e83:	83 ec 0c             	sub    esp,0xc
c0017e86:	68 d7 eb 01 c0       	push   0xc001ebd7
c0017e8b:	e8 a7 82 ff ff       	call   c0010137 <KePanic(char const*)>
c0017e90:	83 c4 10             	add    esp,0x10
c0017e93:	90                   	nop
c0017e94:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017e9a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017e9d:	74 11                	je     c0017eb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017e9f:	83 ec 0c             	sub    esp,0xc
c0017ea2:	68 d7 eb 01 c0       	push   0xc001ebd7
c0017ea7:	e8 8b 82 ff ff       	call   c0010137 <KePanic(char const*)>
c0017eac:	83 c4 10             	add    esp,0x10
c0017eaf:	90                   	nop
c0017eb0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017eb3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017eb7:	7e 07                	jle    c0017ec0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017eb9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec0:	85 f6                	test   esi,esi
c0017ec2:	7e 2c                	jle    c0017ef0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017ec4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ec8:	8d 3c 36             	lea    edi,[esi+esi*1]
c0017ecb:	31 c9                	xor    ecx,ecx
c0017ecd:	01 d7                	add    edi,edx
c0017ecf:	90                   	nop
c0017ed0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017ed3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017ed6:	85 c0                	test   eax,eax
c0017ed8:	79 06                	jns    c0017ee0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0017eda:	05 ff 7f 00 00       	add    eax,0x7fff
c0017edf:	90                   	nop
c0017ee0:	c1 f8 0f             	sar    eax,0xf
c0017ee3:	83 c1 04             	add    ecx,0x4
c0017ee6:	66 01 02             	add    WORD PTR [edx],ax
c0017ee9:	83 c2 02             	add    edx,0x2
c0017eec:	39 d7                	cmp    edi,edx
c0017eee:	75 e0                	jne    c0017ed0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017ef0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017ef3:	50                   	push   eax
c0017ef4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017ef7:	29 f0                	sub    eax,esi
c0017ef9:	c1 e0 02             	shl    eax,0x2
c0017efc:	50                   	push   eax
c0017efd:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017f00:	50                   	push   eax
c0017f01:	52                   	push   edx
c0017f02:	e8 d9 84 fe ff       	call   c00003e0 <memmove>
c0017f07:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	89 f0                	mov    eax,esi
c0017f0f:	5b                   	pop    ebx
c0017f10:	5e                   	pop    esi
c0017f11:	5f                   	pop    edi
c0017f12:	c3                   	ret    
c0017f13:	90                   	nop

c0017f14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017f14:	57                   	push   edi
c0017f15:	56                   	push   esi
c0017f16:	53                   	push   ebx
c0017f17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017f1b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017f1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017f23:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017f29:	39 06                	cmp    DWORD PTR [esi],eax
c0017f2b:	74 13                	je     c0017f40 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017f2d:	83 ec 0c             	sub    esp,0xc
c0017f30:	68 b8 eb 01 c0       	push   0xc001ebb8
c0017f35:	e8 fd 81 ff ff       	call   c0010137 <KePanic(char const*)>
c0017f3a:	83 c4 10             	add    esp,0x10
c0017f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f40:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017f46:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017f49:	74 11                	je     c0017f5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017f4b:	83 ec 0c             	sub    esp,0xc
c0017f4e:	68 f3 eb 01 c0       	push   0xc001ebf3
c0017f53:	e8 df 81 ff ff       	call   c0010137 <KePanic(char const*)>
c0017f58:	83 c4 10             	add    esp,0x10
c0017f5b:	90                   	nop
c0017f5c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017f62:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017f65:	74 11                	je     c0017f78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017f67:	83 ec 0c             	sub    esp,0xc
c0017f6a:	68 f3 eb 01 c0       	push   0xc001ebf3
c0017f6f:	e8 c3 81 ff ff       	call   c0010137 <KePanic(char const*)>
c0017f74:	83 c4 10             	add    esp,0x10
c0017f77:	90                   	nop
c0017f78:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017f7b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017f7f:	7e 07                	jle    c0017f88 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017f81:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017f85:	8d 76 00             	lea    esi,[esi+0x0]
c0017f88:	85 ff                	test   edi,edi
c0017f8a:	7e 1c                	jle    c0017fa8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017f8c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017f93:	31 c0                	xor    eax,eax
c0017f95:	8d 76 00             	lea    esi,[esi+0x0]
c0017f98:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017f9b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017f9e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017fa1:	83 c0 04             	add    eax,0x4
c0017fa4:	39 c1                	cmp    ecx,eax
c0017fa6:	75 f0                	jne    c0017f98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017fa8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017fab:	50                   	push   eax
c0017fac:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017faf:	29 f8                	sub    eax,edi
c0017fb1:	c1 e0 02             	shl    eax,0x2
c0017fb4:	50                   	push   eax
c0017fb5:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017fb8:	50                   	push   eax
c0017fb9:	52                   	push   edx
c0017fba:	e8 21 84 fe ff       	call   c00003e0 <memmove>
c0017fbf:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017fc2:	83 c4 10             	add    esp,0x10
c0017fc5:	89 f8                	mov    eax,edi
c0017fc7:	5b                   	pop    ebx
c0017fc8:	5e                   	pop    esi
c0017fc9:	5f                   	pop    edi
c0017fca:	c3                   	ret    
c0017fcb:	90                   	nop

c0017fcc <PCI::open(int, int, void*)>:
c0017fcc:	83 ec 18             	sub    esp,0x18
c0017fcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fd3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017fd7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017fdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0017fdf:	50                   	push   eax
c0017fe0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017fe3:	31 c0                	xor    eax,eax
c0017fe5:	83 c4 1c             	add    esp,0x1c
c0017fe8:	c3                   	ret    
c0017fe9:	90                   	nop

c0017fea <PCI::close(int, int, void*)>:
c0017fea:	31 c0                	xor    eax,eax
c0017fec:	c3                   	ret    
c0017fed:	90                   	nop

c0017fee <PCI::PCI()>:
c0017fee:	83 ec 0c             	sub    esp,0xc
c0017ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff5:	83 ec 08             	sub    esp,0x8
c0017ff8:	68 0f ec 01 c0       	push   0xc001ec0f
c0017ffd:	50                   	push   eax
c0017ffe:	e8 e5 31 ff ff       	call   c000b1e8 <Bus::Bus(char const*)>
c0018003:	83 c4 10             	add    esp,0x10
c0018006:	ba b8 ec 01 c0       	mov    edx,0xc001ecb8
c001800b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001800f:	89 10                	mov    DWORD PTR [eax],edx
c0018011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018015:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001801f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018023:	a3 20 41 02 c0       	mov    ds:0xc0024120,eax
c0018028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001802c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018032:	31 d2                	xor    edx,edx
c0018034:	88 c2                	mov    dl,al
c0018036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001803a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018045:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001804b:	31 d2                	xor    edx,edx
c001804d:	88 c2                	mov    dl,al
c001804f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018053:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001805c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018062:	8d 50 01             	lea    edx,[eax+0x1]
c0018065:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018069:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001806f:	31 d2                	xor    edx,edx
c0018071:	88 c2                	mov    dl,al
c0018073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018077:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001807b:	83 c9 c0             	or     ecx,0xffffffc0
c001807e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018082:	90                   	nop
c0018083:	83 c4 0c             	add    esp,0xc
c0018086:	c3                   	ret    
c0018087:	90                   	nop

c0018088 <PCI::readBAR8(unsigned int, int)>:
c0018088:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001808c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018090:	f6 c2 01             	test   dl,0x1
c0018093:	74 07                	je     c001809c <PCI::readBAR8(unsigned int, int)+0x14>
c0018095:	83 e2 fc             	and    edx,0xfffffffc
c0018098:	01 c2                	add    edx,eax
c001809a:	ec                   	in     al,dx
c001809b:	c3                   	ret    
c001809c:	83 e2 f0             	and    edx,0xfffffff0
c001809f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00180a2:	c3                   	ret    
c00180a3:	90                   	nop

c00180a4 <PCI::readBAR16(unsigned int, int)>:
c00180a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ac:	f6 c2 01             	test   dl,0x1
c00180af:	74 08                	je     c00180b9 <PCI::readBAR16(unsigned int, int)+0x15>
c00180b1:	83 e2 fc             	and    edx,0xfffffffc
c00180b4:	01 c2                	add    edx,eax
c00180b6:	66 ed                	in     ax,dx
c00180b8:	c3                   	ret    
c00180b9:	83 e2 f0             	and    edx,0xfffffff0
c00180bc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00180c0:	c3                   	ret    
c00180c1:	90                   	nop

c00180c2 <PCI::readBAR32(unsigned int, int)>:
c00180c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ca:	f6 c2 01             	test   dl,0x1
c00180cd:	74 07                	je     c00180d6 <PCI::readBAR32(unsigned int, int)+0x14>
c00180cf:	83 e2 fc             	and    edx,0xfffffffc
c00180d2:	01 c2                	add    edx,eax
c00180d4:	ed                   	in     eax,dx
c00180d5:	c3                   	ret    
c00180d6:	83 e2 f0             	and    edx,0xfffffff0
c00180d9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00180dc:	c3                   	ret    
c00180dd:	90                   	nop

c00180de <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00180de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180ea:	f6 c2 01             	test   dl,0x1
c00180ed:	74 07                	je     c00180f6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00180ef:	83 e2 fc             	and    edx,0xfffffffc
c00180f2:	01 ca                	add    edx,ecx
c00180f4:	ee                   	out    dx,al
c00180f5:	c3                   	ret    
c00180f6:	83 e2 f0             	and    edx,0xfffffff0
c00180f9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00180fc:	c3                   	ret    
c00180fd:	90                   	nop

c00180fe <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00180fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018106:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001810a:	f6 c2 01             	test   dl,0x1
c001810d:	74 08                	je     c0018117 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001810f:	83 e2 fc             	and    edx,0xfffffffc
c0018112:	01 ca                	add    edx,ecx
c0018114:	66 ef                	out    dx,ax
c0018116:	c3                   	ret    
c0018117:	83 e2 f0             	and    edx,0xfffffff0
c001811a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001811e:	c3                   	ret    
c001811f:	90                   	nop

c0018120 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018120:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018124:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018128:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001812c:	f6 c2 01             	test   dl,0x1
c001812f:	74 07                	je     c0018138 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018131:	83 e2 fc             	and    edx,0xfffffffc
c0018134:	01 ca                	add    edx,ecx
c0018136:	ef                   	out    dx,eax
c0018137:	c3                   	ret    
c0018138:	83 e2 f0             	and    edx,0xfffffff0
c001813b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001813e:	c3                   	ret    
c001813f:	90                   	nop

c0018140 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018140:	55                   	push   ebp
c0018141:	57                   	push   edi
c0018142:	56                   	push   esi
c0018143:	53                   	push   ebx
c0018144:	83 ec 0c             	sub    esp,0xc
c0018147:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001814b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001814f:	89 f0                	mov    eax,esi
c0018151:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018155:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018159:	3c 07                	cmp    al,0x7
c001815b:	76 10                	jbe    c001816d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001815d:	83 ec 0c             	sub    esp,0xc
c0018160:	68 17 ec 01 c0       	push   0xc001ec17
c0018165:	e8 cd 7f ff ff       	call   c0010137 <KePanic(char const*)>
c001816a:	83 c4 10             	add    esp,0x10
c001816d:	80 fb 0f             	cmp    bl,0xf
c0018170:	76 10                	jbe    c0018182 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018172:	83 ec 0c             	sub    esp,0xc
c0018175:	68 47 ec 01 c0       	push   0xc001ec47
c001817a:	e8 b8 7f ff ff       	call   c0010137 <KePanic(char const*)>
c001817f:	83 c4 10             	add    esp,0x10
c0018182:	8d 04 36             	lea    eax,[esi+esi*1]
c0018185:	ba f8 0c 00 00       	mov    edx,0xcf8
c001818a:	83 c8 f0             	or     eax,0xfffffff0
c001818d:	ee                   	out    dx,al
c001818e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018193:	89 e8                	mov    eax,ebp
c0018195:	ee                   	out    dx,al
c0018196:	83 c4 0c             	add    esp,0xc
c0018199:	89 d8                	mov    eax,ebx
c001819b:	66 81 e7 fc 00       	and    di,0xfc
c00181a0:	5b                   	pop    ebx
c00181a1:	c1 e0 08             	shl    eax,0x8
c00181a4:	5e                   	pop    esi
c00181a5:	09 f8                	or     eax,edi
c00181a7:	5f                   	pop    edi
c00181a8:	66 0d 00 c0          	or     ax,0xc000
c00181ac:	5d                   	pop    ebp
c00181ad:	c3                   	ret    

c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00181ae:	57                   	push   edi
c00181af:	56                   	push   esi
c00181b0:	53                   	push   ebx
c00181b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00181b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181b9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00181bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00181c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00181cb:	83 ff 01             	cmp    edi,0x1
c00181ce:	75 3e                	jne    c001820e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00181d0:	89 de                	mov    esi,ebx
c00181d2:	0f b6 c0             	movzx  eax,al
c00181d5:	81 e6 fc 00 00 00    	and    esi,0xfc
c00181db:	c1 e0 10             	shl    eax,0x10
c00181de:	0f b6 c9             	movzx  ecx,cl
c00181e1:	09 f0                	or     eax,esi
c00181e3:	c1 e1 08             	shl    ecx,0x8
c00181e6:	0f b6 d2             	movzx  edx,dl
c00181e9:	09 c8                	or     eax,ecx
c00181eb:	c1 e2 0b             	shl    edx,0xb
c00181ee:	09 d0                	or     eax,edx
c00181f0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00181f5:	0d 00 00 00 80       	or     eax,0x80000000
c00181fa:	ef                   	out    dx,eax
c00181fb:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018200:	ed                   	in     eax,dx
c0018201:	83 e3 02             	and    ebx,0x2
c0018204:	0f b6 cb             	movzx  ecx,bl
c0018207:	c1 e1 03             	shl    ecx,0x3
c001820a:	d3 e8                	shr    eax,cl
c001820c:	eb 43                	jmp    c0018251 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001820e:	83 ff 02             	cmp    edi,0x2
c0018211:	75 2c                	jne    c001823f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018213:	83 ec 0c             	sub    esp,0xc
c0018216:	0f b6 c9             	movzx  ecx,cl
c0018219:	0f b6 d2             	movzx  edx,dl
c001821c:	0f b6 fb             	movzx  edi,bl
c001821f:	0f b6 c0             	movzx  eax,al
c0018222:	57                   	push   edi
c0018223:	51                   	push   ecx
c0018224:	52                   	push   edx
c0018225:	50                   	push   eax
c0018226:	56                   	push   esi
c0018227:	e8 14 ff ff ff       	call   c0018140 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001822c:	89 c2                	mov    edx,eax
c001822e:	ed                   	in     eax,dx
c001822f:	83 e3 02             	and    ebx,0x2
c0018232:	83 c4 20             	add    esp,0x20
c0018235:	0f b6 cb             	movzx  ecx,bl
c0018238:	c1 e1 03             	shl    ecx,0x3
c001823b:	d3 e8                	shr    eax,cl
c001823d:	eb 12                	jmp    c0018251 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001823f:	83 ec 0c             	sub    esp,0xc
c0018242:	68 77 ec 01 c0       	push   0xc001ec77
c0018247:	e8 eb 7e ff ff       	call   c0010137 <KePanic(char const*)>
c001824c:	83 c4 10             	add    esp,0x10
c001824f:	31 c0                	xor    eax,eax
c0018251:	5b                   	pop    ebx
c0018252:	5e                   	pop    esi
c0018253:	5f                   	pop    edi
c0018254:	c3                   	ret    
c0018255:	90                   	nop

c0018256 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018256:	83 ec 18             	sub    esp,0x18
c0018259:	6a 00                	push   0x0
c001825b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018260:	50                   	push   eax
c0018261:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018266:	50                   	push   eax
c0018267:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001826c:	50                   	push   eax
c001826d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018271:	e8 38 ff ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018276:	83 c4 2c             	add    esp,0x2c
c0018279:	c3                   	ret    

c001827a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001827a:	83 ec 18             	sub    esp,0x18
c001827d:	6a 0e                	push   0xe
c001827f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018284:	50                   	push   eax
c0018285:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001828a:	50                   	push   eax
c001828b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018290:	50                   	push   eax
c0018291:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018295:	e8 14 ff ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001829a:	83 c4 2c             	add    esp,0x2c
c001829d:	0f b6 c0             	movzx  eax,al
c00182a0:	c3                   	ret    
c00182a1:	90                   	nop

c00182a2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00182a2:	55                   	push   ebp
c00182a3:	57                   	push   edi
c00182a4:	56                   	push   esi
c00182a5:	53                   	push   ebx
c00182a6:	83 ec 18             	sub    esp,0x18
c00182a9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00182ae:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00182b3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00182b8:	6a 0a                	push   0xa
c00182ba:	56                   	push   esi
c00182bb:	55                   	push   ebp
c00182bc:	57                   	push   edi
c00182bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182c1:	e8 e8 fe ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182c6:	83 c4 14             	add    esp,0x14
c00182c9:	89 c3                	mov    ebx,eax
c00182cb:	6a 0a                	push   0xa
c00182cd:	0f b6 db             	movzx  ebx,bl
c00182d0:	56                   	push   esi
c00182d1:	55                   	push   ebp
c00182d2:	57                   	push   edi
c00182d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182d7:	e8 d2 fe ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182dc:	83 c4 2c             	add    esp,0x2c
c00182df:	25 00 ff 00 00       	and    eax,0xff00
c00182e4:	09 d8                	or     eax,ebx
c00182e6:	5b                   	pop    ebx
c00182e7:	5e                   	pop    esi
c00182e8:	5f                   	pop    edi
c00182e9:	5d                   	pop    ebp
c00182ea:	c3                   	ret    
c00182eb:	90                   	nop

c00182ec <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00182ec:	83 ec 18             	sub    esp,0x18
c00182ef:	6a 08                	push   0x8
c00182f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182f6:	50                   	push   eax
c00182f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182fc:	50                   	push   eax
c00182fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018302:	50                   	push   eax
c0018303:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018307:	e8 a2 fe ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001830c:	83 c4 2c             	add    esp,0x2c
c001830f:	0f b6 c4             	movzx  eax,ah
c0018312:	c3                   	ret    
c0018313:	90                   	nop

c0018314 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018314:	83 ec 18             	sub    esp,0x18
c0018317:	6a 08                	push   0x8
c0018319:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001831e:	50                   	push   eax
c001831f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018324:	50                   	push   eax
c0018325:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001832a:	50                   	push   eax
c001832b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001832f:	e8 7a fe ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018334:	83 c4 2c             	add    esp,0x2c
c0018337:	c3                   	ret    

c0018338 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018338:	83 ec 18             	sub    esp,0x18
c001833b:	6a 3c                	push   0x3c
c001833d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018342:	50                   	push   eax
c0018343:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018348:	50                   	push   eax
c0018349:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001834e:	50                   	push   eax
c001834f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018353:	e8 56 fe ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018358:	83 c4 2c             	add    esp,0x2c
c001835b:	c3                   	ret    

c001835c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001835c:	83 ec 18             	sub    esp,0x18
c001835f:	6a 18                	push   0x18
c0018361:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018366:	50                   	push   eax
c0018367:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001836c:	50                   	push   eax
c001836d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018372:	50                   	push   eax
c0018373:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018377:	e8 32 fe ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001837c:	83 c4 2c             	add    esp,0x2c
c001837f:	0f b6 c4             	movzx  eax,ah
c0018382:	c3                   	ret    
c0018383:	90                   	nop

c0018384 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018384:	55                   	push   ebp
c0018385:	57                   	push   edi
c0018386:	56                   	push   esi
c0018387:	53                   	push   ebx
c0018388:	83 ec 28             	sub    esp,0x28
c001838b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001838f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018394:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018399:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001839e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00183a5:	8d 43 12             	lea    eax,[ebx+0x12]
c00183a8:	83 c3 10             	add    ebx,0x10
c00183ab:	0f b6 c0             	movzx  eax,al
c00183ae:	0f b6 db             	movzx  ebx,bl
c00183b1:	50                   	push   eax
c00183b2:	51                   	push   ecx
c00183b3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00183b7:	57                   	push   edi
c00183b8:	55                   	push   ebp
c00183b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00183bd:	e8 ec fd ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183c2:	83 c4 14             	add    esp,0x14
c00183c5:	89 c6                	mov    esi,eax
c00183c7:	53                   	push   ebx
c00183c8:	c1 e6 10             	shl    esi,0x10
c00183cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00183cf:	51                   	push   ecx
c00183d0:	57                   	push   edi
c00183d1:	55                   	push   ebp
c00183d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00183d6:	e8 d3 fd ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183db:	83 c4 3c             	add    esp,0x3c
c00183de:	0f b7 c0             	movzx  eax,ax
c00183e1:	5b                   	pop    ebx
c00183e2:	09 f0                	or     eax,esi
c00183e4:	5e                   	pop    esi
c00183e5:	5f                   	pop    edi
c00183e6:	5d                   	pop    ebp
c00183e7:	c3                   	ret    

c00183e8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00183e8:	55                   	push   ebp
c00183e9:	57                   	push   edi
c00183ea:	56                   	push   esi
c00183eb:	53                   	push   ebx
c00183ec:	83 ec 0c             	sub    esp,0xc
c00183ef:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00183f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00183f7:	89 f5                	mov    ebp,esi
c00183f9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00183ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018403:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018407:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001840b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001840f:	83 f9 01             	cmp    ecx,0x1
c0018412:	75 5d                	jne    c0018471 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018414:	0f b6 c8             	movzx  ecx,al
c0018417:	0f b6 d2             	movzx  edx,dl
c001841a:	c1 e1 10             	shl    ecx,0x10
c001841d:	c1 e2 0b             	shl    edx,0xb
c0018420:	89 f0                	mov    eax,esi
c0018422:	25 fc 00 00 00       	and    eax,0xfc
c0018427:	09 c1                	or     ecx,eax
c0018429:	89 e8                	mov    eax,ebp
c001842b:	0f b6 c0             	movzx  eax,al
c001842e:	c1 e0 08             	shl    eax,0x8
c0018431:	09 c1                	or     ecx,eax
c0018433:	09 d1                	or     ecx,edx
c0018435:	ba f8 0c 00 00       	mov    edx,0xcf8
c001843a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018440:	89 c8                	mov    eax,ecx
c0018442:	ef                   	out    dx,eax
c0018443:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018448:	ed                   	in     eax,dx
c0018449:	0f b7 db             	movzx  ebx,bx
c001844c:	83 e6 02             	and    esi,0x2
c001844f:	74 0a                	je     c001845b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018451:	0f b7 d0             	movzx  edx,ax
c0018454:	c1 e3 10             	shl    ebx,0x10
c0018457:	09 d3                	or     ebx,edx
c0018459:	eb 05                	jmp    c0018460 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001845b:	66 31 c0             	xor    ax,ax
c001845e:	09 c3                	or     ebx,eax
c0018460:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018465:	89 c8                	mov    eax,ecx
c0018467:	ef                   	out    dx,eax
c0018468:	ba fc 0c 00 00       	mov    edx,0xcfc
c001846d:	89 d8                	mov    eax,ebx
c001846f:	eb 41                	jmp    c00184b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018471:	83 f9 02             	cmp    ecx,0x2
c0018474:	75 45                	jne    c00184bb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018476:	83 ec 0c             	sub    esp,0xc
c0018479:	0f b6 d2             	movzx  edx,dl
c001847c:	89 f1                	mov    ecx,esi
c001847e:	0f b6 c0             	movzx  eax,al
c0018481:	0f b6 f1             	movzx  esi,cl
c0018484:	89 e9                	mov    ecx,ebp
c0018486:	56                   	push   esi
c0018487:	0f b6 c9             	movzx  ecx,cl
c001848a:	51                   	push   ecx
c001848b:	52                   	push   edx
c001848c:	50                   	push   eax
c001848d:	57                   	push   edi
c001848e:	e8 ad fc ff ff       	call   c0018140 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018493:	89 c2                	mov    edx,eax
c0018495:	ed                   	in     eax,dx
c0018496:	83 c4 20             	add    esp,0x20
c0018499:	0f b7 db             	movzx  ebx,bx
c001849c:	f6 c2 02             	test   dl,0x2
c001849f:	74 0c                	je     c00184ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00184a1:	0f b7 c8             	movzx  ecx,ax
c00184a4:	89 d8                	mov    eax,ebx
c00184a6:	c1 e0 10             	shl    eax,0x10
c00184a9:	09 c8                	or     eax,ecx
c00184ab:	eb 05                	jmp    c00184b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00184ad:	66 31 c0             	xor    ax,ax
c00184b0:	09 d8                	or     eax,ebx
c00184b2:	ef                   	out    dx,eax
c00184b3:	83 c4 0c             	add    esp,0xc
c00184b6:	5b                   	pop    ebx
c00184b7:	5e                   	pop    esi
c00184b8:	5f                   	pop    edi
c00184b9:	5d                   	pop    ebp
c00184ba:	c3                   	ret    
c00184bb:	c7 44 24 20 77 ec 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ec77
c00184c3:	83 c4 0c             	add    esp,0xc
c00184c6:	5b                   	pop    ebx
c00184c7:	5e                   	pop    esi
c00184c8:	5f                   	pop    edi
c00184c9:	5d                   	pop    ebp
c00184ca:	e9 68 7c ff ff       	jmp    c0010137 <KePanic(char const*)>
c00184cf:	90                   	nop

c00184d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00184d0:	55                   	push   ebp
c00184d1:	57                   	push   edi
c00184d2:	56                   	push   esi
c00184d3:	53                   	push   ebx
c00184d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00184da:	80 3d 2c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002412c,0x0
c00184e1:	0f 85 84 00 00 00    	jne    c001856b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00184e7:	83 ec 0c             	sub    esp,0xc
c00184ea:	68 14 01 00 00       	push   0x114
c00184ef:	e8 c5 f2 fe ff       	call   c00077b9 <malloc>
c00184f4:	83 c4 0c             	add    esp,0xc
c00184f7:	89 c3                	mov    ebx,eax
c00184f9:	ff 35 70 37 02 c0    	push   DWORD PTR ds:0xc0023770
c00184ff:	68 7d ec 01 c0       	push   0xc001ec7d
c0018504:	50                   	push   eax
c0018505:	e8 c0 24 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c001850a:	5a                   	pop    edx
c001850b:	59                   	pop    ecx
c001850c:	6a 01                	push   0x1
c001850e:	53                   	push   ebx
c001850f:	e8 76 25 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0018514:	83 c4 0c             	add    esp,0xc
c0018517:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001851b:	50                   	push   eax
c001851c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018520:	50                   	push   eax
c0018521:	53                   	push   ebx
c0018522:	e8 0f 28 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c0018527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852b:	40                   	inc    eax
c001852c:	89 04 24             	mov    DWORD PTR [esp],eax
c001852f:	e8 85 f2 fe ff       	call   c00077b9 <malloc>
c0018534:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018538:	a3 28 41 02 c0       	mov    ds:0xc0024128,eax
c001853d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018541:	5e                   	pop    esi
c0018542:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018544:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018548:	51                   	push   ecx
c0018549:	50                   	push   eax
c001854a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001854e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018552:	53                   	push   ebx
c0018553:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018556:	83 c4 14             	add    esp,0x14
c0018559:	53                   	push   ebx
c001855a:	e8 89 25 ff ff       	call   c000aae8 <File::close()>
c001855f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018563:	83 c4 10             	add    esp,0x10
c0018566:	a3 24 41 02 c0       	mov    ds:0xc0024124,eax
c001856b:	a1 24 41 02 c0       	mov    eax,ds:0xc0024124
c0018570:	8b 15 28 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024128
c0018576:	89 04 24             	mov    DWORD PTR [esp],eax
c0018579:	31 ff                	xor    edi,edi
c001857b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018583:	31 f6                	xor    esi,esi
c0018585:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001858a:	31 db                	xor    ebx,ebx
c001858c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018594:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018599:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00185a0:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00185a4:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00185ab:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00185af:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00185b2:	0f 8e 6b 01 00 00    	jle    c0018723 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00185b8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00185bb:	d4 40                	aam    0x40
c00185bd:	d5 39                	aad    0x39
c00185bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00185c3:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00185c7:	d4 40                	aam    0x40
c00185c9:	d5 39                	aad    0x39
c00185cb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00185cf:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00185d3:	d4 40                	aam    0x40
c00185d5:	d5 39                	aad    0x39
c00185d7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00185db:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00185df:	d4 40                	aam    0x40
c00185e1:	d5 39                	aad    0x39
c00185e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00185e7:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00185eb:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00185ef:	3c 56                	cmp    al,0x56
c00185f1:	74 45                	je     c0018638 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00185f3:	d4 40                	aam    0x40
c00185f5:	d5 39                	aad    0x39
c00185f7:	8d 48 d0             	lea    ecx,[eax-0x30]
c00185fa:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00185fe:	0f b6 c9             	movzx  ecx,cl
c0018601:	c1 e1 04             	shl    ecx,0x4
c0018604:	d4 40                	aam    0x40
c0018606:	d5 39                	aad    0x39
c0018608:	8d 58 d0             	lea    ebx,[eax-0x30]
c001860b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001860f:	0f b6 db             	movzx  ebx,bl
c0018612:	09 cb                	or     ebx,ecx
c0018614:	c1 e3 04             	shl    ebx,0x4
c0018617:	d4 40                	aam    0x40
c0018619:	d5 39                	aad    0x39
c001861b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001861e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018622:	0f b6 c9             	movzx  ecx,cl
c0018625:	09 cb                	or     ebx,ecx
c0018627:	c1 e3 04             	shl    ebx,0x4
c001862a:	89 d9                	mov    ecx,ebx
c001862c:	d4 40                	aam    0x40
c001862e:	d5 39                	aad    0x39
c0018630:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018633:	0f b6 db             	movzx  ebx,bl
c0018636:	09 cb                	or     ebx,ecx
c0018638:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001863c:	80 f9 44             	cmp    cl,0x44
c001863f:	74 47                	je     c0018688 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018641:	88 c8                	mov    al,cl
c0018643:	d4 40                	aam    0x40
c0018645:	d5 39                	aad    0x39
c0018647:	83 e8 30             	sub    eax,0x30
c001864a:	0f b6 e8             	movzx  ebp,al
c001864d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018651:	c1 e5 04             	shl    ebp,0x4
c0018654:	d4 40                	aam    0x40
c0018656:	d5 39                	aad    0x39
c0018658:	83 e8 30             	sub    eax,0x30
c001865b:	0f b6 f0             	movzx  esi,al
c001865e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018662:	09 ee                	or     esi,ebp
c0018664:	c1 e6 04             	shl    esi,0x4
c0018667:	d4 40                	aam    0x40
c0018669:	d5 39                	aad    0x39
c001866b:	83 e8 30             	sub    eax,0x30
c001866e:	0f b6 e8             	movzx  ebp,al
c0018671:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018675:	09 ee                	or     esi,ebp
c0018677:	c1 e6 04             	shl    esi,0x4
c001867a:	89 f5                	mov    ebp,esi
c001867c:	d4 40                	aam    0x40
c001867e:	d5 39                	aad    0x39
c0018680:	83 e8 30             	sub    eax,0x30
c0018683:	0f b6 f0             	movzx  esi,al
c0018686:	09 ee                	or     esi,ebp
c0018688:	83 c7 10             	add    edi,0x10
c001868b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001868f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018692:	3c 0a                	cmp    al,0xa
c0018694:	74 09                	je     c001869f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018696:	45                   	inc    ebp
c0018697:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001869a:	75 16                	jne    c00186b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001869c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001869f:	3c 0a                	cmp    al,0xa
c00186a1:	0f 94 c0             	sete   al
c00186a4:	0f b6 c0             	movzx  eax,al
c00186a7:	01 c7                	add    edi,eax
c00186a9:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00186ae:	75 0c                	jne    c00186bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00186b0:	eb 15                	jmp    c00186c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00186b2:	47                   	inc    edi
c00186b3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00186b6:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00186ba:	eb d3                	jmp    c001868f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c00186bc:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00186c1:	0f 85 e8 fe ff ff    	jne    c00185af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186c7:	80 f9 44             	cmp    cl,0x44
c00186ca:	74 0b                	je     c00186d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c00186cc:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00186d1:	0f 85 d8 fe ff ff    	jne    c00185af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186d7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00186db:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00186df:	c1 e1 04             	shl    ecx,0x4
c00186e2:	83 e8 30             	sub    eax,0x30
c00186e5:	09 c8                	or     eax,ecx
c00186e7:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00186eb:	0f 85 be fe ff ff    	jne    c00185af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186f1:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00186f5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00186f9:	c1 e1 04             	shl    ecx,0x4
c00186fc:	83 e8 30             	sub    eax,0x30
c00186ff:	09 c8                	or     eax,ecx
c0018701:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018705:	0f 85 a4 fe ff ff    	jne    c00185af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001870b:	50                   	push   eax
c001870c:	50                   	push   eax
c001870d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018711:	50                   	push   eax
c0018712:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018719:	e8 e2 7e fe ff       	call   c0000600 <strcpy>
c001871e:	83 c4 10             	add    esp,0x10
c0018721:	eb 15                	jmp    c0018738 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018723:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001872a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018735:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018738:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001873f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018745:	5b                   	pop    ebx
c0018746:	5e                   	pop    esi
c0018747:	5f                   	pop    edi
c0018748:	5d                   	pop    ebp
c0018749:	c3                   	ret    

c001874a <PCI::checkBus(unsigned char)>:
c001874a:	56                   	push   esi
c001874b:	53                   	push   ebx
c001874c:	31 f6                	xor    esi,esi
c001874e:	51                   	push   ecx
c001874f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018753:	0f b6 c3             	movzx  eax,bl
c0018756:	52                   	push   edx
c0018757:	56                   	push   esi
c0018758:	46                   	inc    esi
c0018759:	50                   	push   eax
c001875a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001875e:	e8 f3 02 00 00       	call   c0018a56 <PCI::checkDevice(unsigned char, unsigned char)>
c0018763:	83 c4 10             	add    esp,0x10
c0018766:	83 fe 20             	cmp    esi,0x20
c0018769:	75 e8                	jne    c0018753 <PCI::checkBus(unsigned char)+0x9>
c001876b:	58                   	pop    eax
c001876c:	5b                   	pop    ebx
c001876d:	5e                   	pop    esi
c001876e:	c3                   	ret    
c001876f:	90                   	nop

c0018770 <PCI::foundDevice(PCIDeviceInfo)>:
c0018770:	55                   	push   ebp
c0018771:	57                   	push   edi
c0018772:	56                   	push   esi
c0018773:	53                   	push   ebx
c0018774:	83 ec 1c             	sub    esp,0x1c
c0018777:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001877b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018781:	0f 84 52 01 00 00    	je     c00188d9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018787:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001878b:	66 81 f9 06 04       	cmp    cx,0x406
c0018790:	75 2c                	jne    c00187be <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018792:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018797:	50                   	push   eax
c0018798:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001879d:	50                   	push   eax
c001879e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00187a3:	50                   	push   eax
c00187a4:	56                   	push   esi
c00187a5:	e8 b2 fb ff ff       	call   c001835c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00187aa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00187ae:	0f b6 c0             	movzx  eax,al
c00187b1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00187b5:	83 c4 2c             	add    esp,0x2c
c00187b8:	5b                   	pop    ebx
c00187b9:	5e                   	pop    esi
c00187ba:	5f                   	pop    edi
c00187bb:	5d                   	pop    ebp
c00187bc:	eb 8c                	jmp    c001874a <PCI::checkBus(unsigned char)>
c00187be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00187c2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00187c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00187cc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00187d0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00187d4:	88 d3                	mov    bl,dl
c00187d6:	85 c0                	test   eax,eax
c00187d8:	74 33                	je     c001880d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00187da:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00187dd:	85 d2                	test   edx,edx
c00187df:	74 28                	je     c0018809 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187e1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00187e7:	31 ef                	xor    edi,ebp
c00187e9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00187ef:	75 18                	jne    c0018809 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00187f5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00187fb:	75 0c                	jne    c0018809 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187fd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018803:	0f 84 d0 00 00 00    	je     c00188d9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018809:	8b 00                	mov    eax,DWORD PTR [eax]
c001880b:	eb c9                	jmp    c00187d6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001880d:	66 81 f9 01 06       	cmp    cx,0x601
c0018812:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018816:	75 19                	jne    c0018831 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018818:	83 ec 0c             	sub    esp,0xc
c001881b:	68 64 01 00 00       	push   0x164
c0018820:	e8 94 ef fe ff       	call   c00077b9 <malloc>
c0018825:	89 c5                	mov    ebp,eax
c0018827:	89 04 24             	mov    DWORD PTR [esp],eax
c001882a:	e8 47 0e 00 00       	call   c0019676 <SATABus::SATABus()>
c001882f:	eb 1e                	jmp    c001884f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018831:	66 81 f9 01 01       	cmp    cx,0x101
c0018836:	75 60                	jne    c0018898 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018838:	83 ec 0c             	sub    esp,0xc
c001883b:	68 70 02 00 00       	push   0x270
c0018840:	e8 74 ef fe ff       	call   c00077b9 <malloc>
c0018845:	89 c5                	mov    ebp,eax
c0018847:	89 04 24             	mov    DWORD PTR [esp],eax
c001884a:	e8 cb 02 00 00       	call   c0018b1a <IDE::IDE()>
c001884f:	58                   	pop    eax
c0018850:	5a                   	pop    edx
c0018851:	55                   	push   ebp
c0018852:	56                   	push   esi
c0018853:	e8 3c 30 ff ff       	call   c000b894 <Device::addChild(Device*)>
c0018858:	83 ec 1c             	sub    esp,0x1c
c001885b:	b9 09 00 00 00       	mov    ecx,0x9
c0018860:	fc                   	cld    
c0018861:	89 e7                	mov    edi,esp
c0018863:	89 de                	mov    esi,ebx
c0018865:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018867:	55                   	push   ebp
c0018868:	e8 6d 2f ff ff       	call   c000b7da <Device::preOpenPCI(PCIDeviceInfo)>
c001886d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018870:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018874:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001887c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018884:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001888c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001888f:	83 c4 4c             	add    esp,0x4c
c0018892:	5b                   	pop    ebx
c0018893:	5e                   	pop    esi
c0018894:	5f                   	pop    edi
c0018895:	5d                   	pop    ebp
c0018896:	ff e0                	jmp    eax
c0018898:	83 ec 0c             	sub    esp,0xc
c001889b:	68 58 01 00 00       	push   0x158
c00188a0:	e8 14 ef fe ff       	call   c00077b9 <malloc>
c00188a5:	89 c5                	mov    ebp,eax
c00188a7:	58                   	pop    eax
c00188a8:	5a                   	pop    edx
c00188a9:	68 96 ec 01 c0       	push   0xc001ec96
c00188ae:	55                   	push   ebp
c00188af:	e8 7e 32 ff ff       	call   c000bb32 <DriverlessDevice::DriverlessDevice(char const*)>
c00188b4:	59                   	pop    ecx
c00188b5:	5f                   	pop    edi
c00188b6:	55                   	push   ebp
c00188b7:	56                   	push   esi
c00188b8:	e8 d7 2f ff ff       	call   c000b894 <Device::addChild(Device*)>
c00188bd:	b9 09 00 00 00       	mov    ecx,0x9
c00188c2:	fc                   	cld    
c00188c3:	89 df                	mov    edi,ebx
c00188c5:	89 de                	mov    esi,ebx
c00188c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188c9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00188cd:	83 c4 2c             	add    esp,0x2c
c00188d0:	5b                   	pop    ebx
c00188d1:	5e                   	pop    esi
c00188d2:	5f                   	pop    edi
c00188d3:	5d                   	pop    ebp
c00188d4:	e9 01 2f ff ff       	jmp    c000b7da <Device::preOpenPCI(PCIDeviceInfo)>
c00188d9:	83 c4 1c             	add    esp,0x1c
c00188dc:	5b                   	pop    ebx
c00188dd:	5e                   	pop    esi
c00188de:	5f                   	pop    edi
c00188df:	5d                   	pop    ebp
c00188e0:	c3                   	ret    
c00188e1:	90                   	nop

c00188e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00188e2:	55                   	push   ebp
c00188e3:	57                   	push   edi
c00188e4:	56                   	push   esi
c00188e5:	53                   	push   ebx
c00188e6:	83 ec 68             	sub    esp,0x68
c00188e9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00188ed:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00188f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00188f8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00188ff:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018904:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018908:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001890f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018914:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018918:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001891d:	6a 0c                	push   0xc
c001891f:	57                   	push   edi
c0018920:	53                   	push   ebx
c0018921:	56                   	push   esi
c0018922:	55                   	push   ebp
c0018923:	e8 86 f8 ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018928:	83 c4 20             	add    esp,0x20
c001892b:	57                   	push   edi
c001892c:	53                   	push   ebx
c001892d:	56                   	push   esi
c001892e:	55                   	push   ebp
c001892f:	e8 6e f9 ff ff       	call   c00182a2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018934:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018939:	57                   	push   edi
c001893a:	53                   	push   ebx
c001893b:	56                   	push   esi
c001893c:	55                   	push   ebp
c001893d:	e8 f6 f9 ff ff       	call   c0018338 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018942:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018946:	83 c4 14             	add    esp,0x14
c0018949:	6a 3c                	push   0x3c
c001894b:	57                   	push   edi
c001894c:	53                   	push   ebx
c001894d:	56                   	push   esi
c001894e:	55                   	push   ebp
c001894f:	e8 5a f8 ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018954:	0f b6 c4             	movzx  eax,ah
c0018957:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001895b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001895f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018963:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c0018968:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001896e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018974:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018978:	83 c4 20             	add    esp,0x20
c001897b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018980:	74 30                	je     c00189b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018982:	31 c0                	xor    eax,eax
c0018984:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018988:	7e 28                	jle    c00189b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001898a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018992:	39 cb                	cmp    ebx,ecx
c0018994:	75 19                	jne    c00189af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018996:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001899e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00189a2:	75 0b                	jne    c00189af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00189a4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c00189ab:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c00189af:	40                   	inc    eax
c00189b0:	eb d2                	jmp    c0018984 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00189b2:	31 d2                	xor    edx,edx
c00189b4:	83 ec 0c             	sub    esp,0xc
c00189b7:	57                   	push   edi
c00189b8:	53                   	push   ebx
c00189b9:	56                   	push   esi
c00189ba:	52                   	push   edx
c00189bb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00189bf:	55                   	push   ebp
c00189c0:	e8 bf f9 ff ff       	call   c0018384 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189c9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00189cd:	42                   	inc    edx
c00189ce:	83 c4 20             	add    esp,0x20
c00189d1:	83 fa 06             	cmp    edx,0x6
c00189d4:	75 de                	jne    c00189b4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c00189d6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00189db:	83 ec 0c             	sub    esp,0xc
c00189de:	86 e0                	xchg   al,ah
c00189e0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00189e5:	6a 02                	push   0x2
c00189e7:	57                   	push   edi
c00189e8:	53                   	push   ebx
c00189e9:	56                   	push   esi
c00189ea:	55                   	push   ebp
c00189eb:	e8 be f7 ff ff       	call   c00181ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189f0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00189f5:	83 c4 20             	add    esp,0x20
c00189f8:	57                   	push   edi
c00189f9:	53                   	push   ebx
c00189fa:	56                   	push   esi
c00189fb:	55                   	push   ebp
c00189fc:	e8 eb f8 ff ff       	call   c00182ec <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018a01:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018a05:	57                   	push   edi
c0018a06:	53                   	push   ebx
c0018a07:	56                   	push   esi
c0018a08:	55                   	push   ebp
c0018a09:	e8 48 f8 ff ff       	call   c0018256 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a0e:	b9 09 00 00 00       	mov    ecx,0x9
c0018a13:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018a18:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018a1c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018a20:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018a24:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018a28:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018a2c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018a30:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018a34:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018a38:	83 ec 0c             	sub    esp,0xc
c0018a3b:	fc                   	cld    
c0018a3c:	89 e7                	mov    edi,esp
c0018a3e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018a42:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018a44:	55                   	push   ebp
c0018a45:	e8 26 fd ff ff       	call   c0018770 <PCI::foundDevice(PCIDeviceInfo)>
c0018a4a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018a50:	5b                   	pop    ebx
c0018a51:	5e                   	pop    esi
c0018a52:	5f                   	pop    edi
c0018a53:	5d                   	pop    ebp
c0018a54:	c3                   	ret    
c0018a55:	90                   	nop

c0018a56 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018a56:	55                   	push   ebp
c0018a57:	57                   	push   edi
c0018a58:	56                   	push   esi
c0018a59:	53                   	push   ebx
c0018a5a:	83 ec 0c             	sub    esp,0xc
c0018a5d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018a61:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018a66:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018a6b:	6a 00                	push   0x0
c0018a6d:	56                   	push   esi
c0018a6e:	57                   	push   edi
c0018a6f:	55                   	push   ebp
c0018a70:	e8 e1 f7 ff ff       	call   c0018256 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a75:	6a 00                	push   0x0
c0018a77:	56                   	push   esi
c0018a78:	57                   	push   edi
c0018a79:	55                   	push   ebp
c0018a7a:	e8 63 fe ff ff       	call   c00188e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018a7f:	83 c4 20             	add    esp,0x20
c0018a82:	6a 00                	push   0x0
c0018a84:	56                   	push   esi
c0018a85:	57                   	push   edi
c0018a86:	55                   	push   ebp
c0018a87:	e8 ee f7 ff ff       	call   c001827a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018a8c:	83 c4 10             	add    esp,0x10
c0018a8f:	84 c0                	test   al,al
c0018a91:	79 27                	jns    c0018aba <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018a93:	bb 01 00 00 00       	mov    ebx,0x1
c0018a98:	53                   	push   ebx
c0018a99:	56                   	push   esi
c0018a9a:	57                   	push   edi
c0018a9b:	55                   	push   ebp
c0018a9c:	e8 b5 f7 ff ff       	call   c0018256 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018aa1:	83 c4 10             	add    esp,0x10
c0018aa4:	66 40                	inc    ax
c0018aa6:	74 0c                	je     c0018ab4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018aa8:	53                   	push   ebx
c0018aa9:	56                   	push   esi
c0018aaa:	57                   	push   edi
c0018aab:	55                   	push   ebp
c0018aac:	e8 31 fe ff ff       	call   c00188e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ab1:	83 c4 10             	add    esp,0x10
c0018ab4:	43                   	inc    ebx
c0018ab5:	83 fb 08             	cmp    ebx,0x8
c0018ab8:	75 de                	jne    c0018a98 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018aba:	83 c4 0c             	add    esp,0xc
c0018abd:	5b                   	pop    ebx
c0018abe:	5e                   	pop    esi
c0018abf:	5f                   	pop    edi
c0018ac0:	5d                   	pop    ebp
c0018ac1:	c3                   	ret    

c0018ac2 <PCI::detect()>:
c0018ac2:	56                   	push   esi
c0018ac3:	53                   	push   ebx
c0018ac4:	53                   	push   ebx
c0018ac5:	31 db                	xor    ebx,ebx
c0018ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018acb:	6a 00                	push   0x0
c0018acd:	6a 00                	push   0x0
c0018acf:	6a 00                	push   0x0
c0018ad1:	56                   	push   esi
c0018ad2:	e8 a3 f7 ff ff       	call   c001827a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ad7:	83 c4 10             	add    esp,0x10
c0018ada:	a8 80                	test   al,0x80
c0018adc:	75 21                	jne    c0018aff <PCI::detect()+0x3d>
c0018ade:	51                   	push   ecx
c0018adf:	51                   	push   ecx
c0018ae0:	6a 00                	push   0x0
c0018ae2:	56                   	push   esi
c0018ae3:	e8 62 fc ff ff       	call   c001874a <PCI::checkBus(unsigned char)>
c0018ae8:	83 c4 10             	add    esp,0x10
c0018aeb:	eb 24                	jmp    c0018b11 <PCI::detect()+0x4f>
c0018aed:	52                   	push   edx
c0018aee:	52                   	push   edx
c0018aef:	53                   	push   ebx
c0018af0:	43                   	inc    ebx
c0018af1:	56                   	push   esi
c0018af2:	e8 53 fc ff ff       	call   c001874a <PCI::checkBus(unsigned char)>
c0018af7:	83 c4 10             	add    esp,0x10
c0018afa:	83 fb 08             	cmp    ebx,0x8
c0018afd:	74 12                	je     c0018b11 <PCI::detect()+0x4f>
c0018aff:	53                   	push   ebx
c0018b00:	6a 00                	push   0x0
c0018b02:	6a 00                	push   0x0
c0018b04:	56                   	push   esi
c0018b05:	e8 4c f7 ff ff       	call   c0018256 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018b0a:	83 c4 10             	add    esp,0x10
c0018b0d:	66 40                	inc    ax
c0018b0f:	74 dc                	je     c0018aed <PCI::detect()+0x2b>
c0018b11:	58                   	pop    eax
c0018b12:	5b                   	pop    ebx
c0018b13:	5e                   	pop    esi
c0018b14:	c3                   	ret    
c0018b15:	90                   	nop

c0018b16 <IDE::close(int, int, void*)>:
c0018b16:	83 c8 ff             	or     eax,0xffffffff
c0018b19:	c3                   	ret    

c0018b1a <IDE::IDE()>:
c0018b1a:	83 ec 0c             	sub    esp,0xc
c0018b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b21:	83 ec 08             	sub    esp,0x8
c0018b24:	68 dc ec 01 c0       	push   0xc001ecdc
c0018b29:	50                   	push   eax
c0018b2a:	e8 a9 30 ff ff       	call   c000bbd8 <HardDiskController::HardDiskController(char const*)>
c0018b2f:	83 c4 10             	add    esp,0x10
c0018b32:	ba 6c ed 01 c0       	mov    edx,0xc001ed6c
c0018b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b3b:	89 10                	mov    DWORD PTR [eax],edx
c0018b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b41:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018b48:	90                   	nop
c0018b49:	83 c4 0c             	add    esp,0xc
c0018b4c:	c3                   	ret    
c0018b4d:	90                   	nop

c0018b4e <IDE::prepareInterrupt(unsigned char)>:
c0018b4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018b57:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018b5f:	c3                   	ret    

c0018b60 <selectDrive(unsigned char, unsigned char)>:
c0018b60:	c3                   	ret    
c0018b61:	90                   	nop

c0018b62 <IDE::getBase(unsigned char)>:
c0018b62:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b6b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018b73:	c3                   	ret    

c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018b74:	55                   	push   ebp
c0018b75:	57                   	push   edi
c0018b76:	56                   	push   esi
c0018b77:	53                   	push   ebx
c0018b78:	83 ec 1c             	sub    esp,0x1c
c0018b7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018b7f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018b83:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018b86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b8a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018b8e:	80 f9 03             	cmp    cl,0x3
c0018b91:	77 51                	ja     c0018be4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018b93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b97:	0f b6 f2             	movzx  esi,dl
c0018b9a:	0f b6 db             	movzx  ebx,bl
c0018b9d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018ba0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018ba4:	83 ca 80             	or     edx,0xffffff80
c0018ba7:	0f b6 d2             	movzx  edx,dl
c0018baa:	52                   	push   edx
c0018bab:	6a 0c                	push   0xc
c0018bad:	56                   	push   esi
c0018bae:	57                   	push   edi
c0018baf:	e8 c0 ff ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018bb4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018bb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018bbd:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018bc1:	ee                   	out    dx,al
c0018bc2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018bc7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018bcb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018bcf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018bd3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018bdb:	83 c4 2c             	add    esp,0x2c
c0018bde:	5b                   	pop    ebx
c0018bdf:	5e                   	pop    esi
c0018be0:	5f                   	pop    edi
c0018be1:	5d                   	pop    ebp
c0018be2:	eb 90                	jmp    c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018be4:	80 fb 07             	cmp    bl,0x7
c0018be7:	77 12                	ja     c0018bfb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018be9:	0f b6 d2             	movzx  edx,dl
c0018bec:	0f b6 db             	movzx  ebx,bl
c0018bef:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018bf7:	89 da                	mov    edx,ebx
c0018bf9:	eb 2f                	jmp    c0018c2a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018bfb:	80 fb 0d             	cmp    bl,0xd
c0018bfe:	77 13                	ja     c0018c13 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018c00:	0f b6 d2             	movzx  edx,dl
c0018c03:	0f b6 db             	movzx  ebx,bl
c0018c06:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018c0d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018c11:	eb 17                	jmp    c0018c2a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018c13:	80 fb 15             	cmp    bl,0x15
c0018c16:	77 13                	ja     c0018c2b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018c18:	0f b6 d2             	movzx  edx,dl
c0018c1b:	0f b6 db             	movzx  ebx,bl
c0018c1e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018c26:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018c2a:	ee                   	out    dx,al
c0018c2b:	83 c4 1c             	add    esp,0x1c
c0018c2e:	5b                   	pop    ebx
c0018c2f:	5e                   	pop    esi
c0018c30:	5f                   	pop    edi
c0018c31:	5d                   	pop    ebp
c0018c32:	c3                   	ret    
c0018c33:	90                   	nop

c0018c34 <IDE::read(unsigned char, unsigned char)>:
c0018c34:	55                   	push   ebp
c0018c35:	57                   	push   edi
c0018c36:	56                   	push   esi
c0018c37:	53                   	push   ebx
c0018c38:	83 ec 1c             	sub    esp,0x1c
c0018c3b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018c3f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018c43:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018c46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c4a:	3c 03                	cmp    al,0x3
c0018c4c:	77 43                	ja     c0018c91 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018c4e:	0f b6 f2             	movzx  esi,dl
c0018c51:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018c54:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018c58:	83 c8 80             	or     eax,0xffffff80
c0018c5b:	0f b6 c0             	movzx  eax,al
c0018c5e:	50                   	push   eax
c0018c5f:	6a 0c                	push   0xc
c0018c61:	56                   	push   esi
c0018c62:	57                   	push   edi
c0018c63:	e8 0c ff ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c68:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018c6d:	0f b6 c3             	movzx  eax,bl
c0018c70:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018c74:	ec                   	in     al,dx
c0018c75:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018c79:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018c7e:	52                   	push   edx
c0018c7f:	6a 0c                	push   0xc
c0018c81:	56                   	push   esi
c0018c82:	57                   	push   edi
c0018c83:	e8 ec fe ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c88:	83 c4 20             	add    esp,0x20
c0018c8b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c8f:	eb 49                	jmp    c0018cda <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c91:	80 fb 07             	cmp    bl,0x7
c0018c94:	77 12                	ja     c0018ca8 <IDE::read(unsigned char, unsigned char)+0x74>
c0018c96:	0f b6 d2             	movzx  edx,dl
c0018c99:	0f b6 c3             	movzx  eax,bl
c0018c9c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018ca4:	89 c2                	mov    edx,eax
c0018ca6:	eb 31                	jmp    c0018cd9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018ca8:	80 fb 0d             	cmp    bl,0xd
c0018cab:	77 13                	ja     c0018cc0 <IDE::read(unsigned char, unsigned char)+0x8c>
c0018cad:	0f b6 d2             	movzx  edx,dl
c0018cb0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018cb7:	0f b6 d3             	movzx  edx,bl
c0018cba:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018cbe:	eb 19                	jmp    c0018cd9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018cc0:	31 c0                	xor    eax,eax
c0018cc2:	80 fb 15             	cmp    bl,0x15
c0018cc5:	77 13                	ja     c0018cda <IDE::read(unsigned char, unsigned char)+0xa6>
c0018cc7:	0f b6 d2             	movzx  edx,dl
c0018cca:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018cd2:	0f b6 d3             	movzx  edx,bl
c0018cd5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018cd9:	ec                   	in     al,dx
c0018cda:	83 c4 1c             	add    esp,0x1c
c0018cdd:	5b                   	pop    ebx
c0018cde:	5e                   	pop    esi
c0018cdf:	5f                   	pop    edi
c0018ce0:	5d                   	pop    ebp
c0018ce1:	c3                   	ret    

c0018ce2 <IDE::waitInterrupt(unsigned char)>:
c0018ce2:	57                   	push   edi
c0018ce3:	56                   	push   esi
c0018ce4:	31 f6                	xor    esi,esi
c0018ce6:	53                   	push   ebx
c0018ce7:	83 ec 10             	sub    esp,0x10
c0018cea:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018cee:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018cf2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018cf6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018cfb:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018d02:	84 db                	test   bl,bl
c0018d04:	75 33                	jne    c0018d39 <IDE::waitInterrupt(unsigned char)+0x57>
c0018d06:	52                   	push   edx
c0018d07:	6a 0c                	push   0xc
c0018d09:	50                   	push   eax
c0018d0a:	57                   	push   edi
c0018d0b:	e8 24 ff ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0018d10:	83 c4 10             	add    esp,0x10
c0018d13:	a8 01                	test   al,0x1
c0018d15:	75 2a                	jne    c0018d41 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d17:	f7 c6 04 00 00 00    	test   esi,0x4
c0018d1d:	75 12                	jne    c0018d31 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018d1f:	83 fe 32             	cmp    esi,0x32
c0018d22:	7e 0d                	jle    c0018d31 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018d24:	83 ec 0c             	sub    esp,0xc
c0018d27:	6a 64                	push   0x64
c0018d29:	e8 1a a9 ff ff       	call   c0013648 <milliTenthSleep(unsigned int)>
c0018d2e:	83 c4 10             	add    esp,0x10
c0018d31:	83 fe 3c             	cmp    esi,0x3c
c0018d34:	74 0b                	je     c0018d41 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d36:	46                   	inc    esi
c0018d37:	eb bd                	jmp    c0018cf6 <IDE::waitInterrupt(unsigned char)+0x14>
c0018d39:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018d41:	83 c4 10             	add    esp,0x10
c0018d44:	88 d8                	mov    al,bl
c0018d46:	5b                   	pop    ebx
c0018d47:	5e                   	pop    esi
c0018d48:	5f                   	pop    edi
c0018d49:	c3                   	ret    

c0018d4a <ideChannel0IRQHandler(regs*, void*)>:
c0018d4a:	83 ec 10             	sub    esp,0x10
c0018d4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d51:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018d58:	6a 07                	push   0x7
c0018d5a:	6a 00                	push   0x0
c0018d5c:	50                   	push   eax
c0018d5d:	e8 d2 fe ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0018d62:	83 c4 1c             	add    esp,0x1c
c0018d65:	c3                   	ret    

c0018d66 <ideChannel1IRQHandler(regs*, void*)>:
c0018d66:	83 ec 10             	sub    esp,0x10
c0018d69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d6d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018d74:	6a 07                	push   0x7
c0018d76:	6a 01                	push   0x1
c0018d78:	50                   	push   eax
c0018d79:	e8 b6 fe ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0018d7e:	83 c4 1c             	add    esp,0x1c
c0018d81:	c3                   	ret    

c0018d82 <IDE::enableIRQs(unsigned char, bool)>:
c0018d82:	57                   	push   edi
c0018d83:	56                   	push   esi
c0018d84:	be 04 00 00 00       	mov    esi,0x4
c0018d89:	53                   	push   ebx
c0018d8a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018d8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d93:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018d98:	0f 94 c0             	sete   al
c0018d9b:	01 c0                	add    eax,eax
c0018d9d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018da4:	0f b6 c0             	movzx  eax,al
c0018da7:	50                   	push   eax
c0018da8:	6a 0c                	push   0xc
c0018daa:	57                   	push   edi
c0018dab:	53                   	push   ebx
c0018dac:	e8 c3 fd ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018db1:	83 c4 10             	add    esp,0x10
c0018db4:	50                   	push   eax
c0018db5:	6a 0c                	push   0xc
c0018db7:	57                   	push   edi
c0018db8:	53                   	push   ebx
c0018db9:	e8 76 fe ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0018dbe:	83 c4 10             	add    esp,0x10
c0018dc1:	4e                   	dec    esi
c0018dc2:	75 f0                	jne    c0018db4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018dc4:	5b                   	pop    ebx
c0018dc5:	5e                   	pop    esi
c0018dc6:	5f                   	pop    edi
c0018dc7:	c3                   	ret    

c0018dc8 <IDE::open(int, int, void*)>:
c0018dc8:	55                   	push   ebp
c0018dc9:	57                   	push   edi
c0018dca:	56                   	push   esi
c0018dcb:	53                   	push   ebx
c0018dcc:	83 ec 1c             	sub    esp,0x1c
c0018dcf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018dd3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018ddc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018de5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018dec:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018df3:	0f 85 b0 02 00 00    	jne    c00190a9 <IDE::open(int, int, void*)+0x2e1>
c0018df9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018dff:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018e03:	83 e0 7f             	and    eax,0x7f
c0018e06:	3c 05                	cmp    al,0x5
c0018e08:	74 04                	je     c0018e0e <IDE::open(int, int, void*)+0x46>
c0018e0a:	3c 0f                	cmp    al,0xf
c0018e0c:	75 32                	jne    c0018e40 <IDE::open(int, int, void*)+0x78>
c0018e0e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018e14:	83 e0 fc             	and    eax,0xfffffffc
c0018e17:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018e1e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018e24:	83 e0 fc             	and    eax,0xfffffffc
c0018e27:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018e2e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018e34:	83 e0 fc             	and    eax,0xfffffffc
c0018e37:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e3e:	eb 14                	jmp    c0018e54 <IDE::open(int, int, void*)+0x8c>
c0018e40:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018e4a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018e54:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018e5b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018e62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e66:	89 c6                	mov    esi,eax
c0018e68:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018e6d:	c1 e6 10             	shl    esi,0x10
c0018e70:	89 e8                	mov    eax,ebp
c0018e72:	89 fa                	mov    edx,edi
c0018e74:	c1 e0 0b             	shl    eax,0xb
c0018e77:	09 f0                	or     eax,esi
c0018e79:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018e80:	c1 e6 08             	shl    esi,0x8
c0018e83:	09 c6                	or     esi,eax
c0018e85:	89 f0                	mov    eax,esi
c0018e87:	0d 08 00 00 80       	or     eax,0x80000008
c0018e8c:	ef                   	out    dx,eax
c0018e8d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018e92:	89 ca                	mov    edx,ecx
c0018e94:	ed                   	in     eax,dx
c0018e95:	c1 e8 10             	shr    eax,0x10
c0018e98:	3d ff ff 00 00       	cmp    eax,0xffff
c0018e9d:	0f 84 f5 00 00 00    	je     c0018f98 <IDE::open(int, int, void*)+0x1d0>
c0018ea3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018ea9:	89 fa                	mov    edx,edi
c0018eab:	89 f0                	mov    eax,esi
c0018ead:	ef                   	out    dx,eax
c0018eae:	b0 fe                	mov    al,0xfe
c0018eb0:	89 ca                	mov    edx,ecx
c0018eb2:	ee                   	out    dx,al
c0018eb3:	89 f0                	mov    eax,esi
c0018eb5:	89 fa                	mov    edx,edi
c0018eb7:	ef                   	out    dx,eax
c0018eb8:	89 ca                	mov    edx,ecx
c0018eba:	ed                   	in     eax,dx
c0018ebb:	3c fe                	cmp    al,0xfe
c0018ebd:	0f 85 a9 00 00 00    	jne    c0018f6c <IDE::open(int, int, void*)+0x1a4>
c0018ec3:	8b 15 98 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020498
c0018ec9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018ed0:	74 33                	je     c0018f05 <IDE::open(int, int, void*)+0x13d>
c0018ed2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018ed8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018edc:	40                   	inc    eax
c0018edd:	83 ec 0c             	sub    esp,0xc
c0018ee0:	0f b6 c0             	movzx  eax,al
c0018ee3:	50                   	push   eax
c0018ee4:	55                   	push   ebp
c0018ee5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018ee9:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018eef:	51                   	push   ecx
c0018ef0:	e8 5b 57 ff ff       	call   c000e650 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018ef5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018efa:	83 c4 1c             	add    esp,0x1c
c0018efd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018f03:	eb 0a                	jmp    c0018f0f <IDE::open(int, int, void*)+0x147>
c0018f05:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018f0f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018f16:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018f1d:	c1 e1 10             	shl    ecx,0x10
c0018f20:	c1 e0 08             	shl    eax,0x8
c0018f23:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018f28:	09 c1                	or     ecx,eax
c0018f2a:	89 fa                	mov    edx,edi
c0018f2c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018f33:	c1 e0 0b             	shl    eax,0xb
c0018f36:	09 c1                	or     ecx,eax
c0018f38:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018f3e:	89 c8                	mov    eax,ecx
c0018f40:	ef                   	out    dx,eax
c0018f41:	be fc 0c 00 00       	mov    esi,0xcfc
c0018f46:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018f4c:	89 f2                	mov    edx,esi
c0018f4e:	ee                   	out    dx,al
c0018f4f:	89 c8                	mov    eax,ecx
c0018f51:	89 fa                	mov    edx,edi
c0018f53:	ef                   	out    dx,eax
c0018f54:	89 f2                	mov    edx,esi
c0018f56:	ed                   	in     eax,dx
c0018f57:	0f b6 c0             	movzx  eax,al
c0018f5a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018f60:	74 46                	je     c0018fa8 <IDE::open(int, int, void*)+0x1e0>
c0018f62:	83 ec 0c             	sub    esp,0xc
c0018f65:	68 f4 ec 01 c0       	push   0xc001ecf4
c0018f6a:	eb 34                	jmp    c0018fa0 <IDE::open(int, int, void*)+0x1d8>
c0018f6c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018f75:	75 17                	jne    c0018f8e <IDE::open(int, int, void*)+0x1c6>
c0018f77:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018f7c:	74 07                	je     c0018f85 <IDE::open(int, int, void*)+0x1bd>
c0018f7e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018f83:	75 09                	jne    c0018f8e <IDE::open(int, int, void*)+0x1c6>
c0018f85:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018f8c:	eb 1a                	jmp    c0018fa8 <IDE::open(int, int, void*)+0x1e0>
c0018f8e:	83 ec 0c             	sub    esp,0xc
c0018f91:	68 fc ec 01 c0       	push   0xc001ecfc
c0018f96:	eb 08                	jmp    c0018fa0 <IDE::open(int, int, void*)+0x1d8>
c0018f98:	83 ec 0c             	sub    esp,0xc
c0018f9b:	68 2d ed 01 c0       	push   0xc001ed2d
c0018fa0:	e8 92 71 ff ff       	call   c0010137 <KePanic(char const*)>
c0018fa5:	83 c4 10             	add    esp,0x10
c0018fa8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018faf:	79 1a                	jns    c0018fcb <IDE::open(int, int, void*)+0x203>
c0018fb1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018fb7:	83 e0 fc             	and    eax,0xfffffffc
c0018fba:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018fc1:	83 c0 08             	add    eax,0x8
c0018fc4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0018fcb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fd1:	89 c2                	mov    edx,eax
c0018fd3:	83 e2 0f             	and    edx,0xf
c0018fd6:	66 83 fa 08          	cmp    dx,0x8
c0018fda:	75 0a                	jne    c0018fe6 <IDE::open(int, int, void*)+0x21e>
c0018fdc:	83 e8 02             	sub    eax,0x2
c0018fdf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018fe6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018fec:	89 c2                	mov    edx,eax
c0018fee:	83 e2 0f             	and    edx,0xf
c0018ff1:	66 83 fa 08          	cmp    dx,0x8
c0018ff5:	75 0a                	jne    c0019001 <IDE::open(int, int, void*)+0x239>
c0018ff7:	83 e8 02             	sub    eax,0x2
c0018ffa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019001:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019008:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001900f:	89 d0                	mov    eax,edx
c0019011:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019014:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019018:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001901c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001901f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019024:	0f b6 c9             	movzx  ecx,cl
c0019027:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001902e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019031:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019035:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019039:	8d 50 02             	lea    edx,[eax+0x2]
c001903c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019041:	0f b6 d2             	movzx  edx,dl
c0019044:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001904a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001904d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019051:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019055:	8d 48 03             	lea    ecx,[eax+0x3]
c0019058:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001905d:	0f b6 c9             	movzx  ecx,cl
c0019060:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019066:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019069:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001906d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019071:	8d 50 04             	lea    edx,[eax+0x4]
c0019074:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001907a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001907f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019086:	66 85 f6             	test   si,si
c0019089:	74 5b                	je     c00190e6 <IDE::open(int, int, void*)+0x31e>
c001908b:	0f b6 d2             	movzx  edx,dl
c001908e:	83 c0 05             	add    eax,0x5
c0019091:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019094:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019098:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001909c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00190a2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00190a7:	eb 3d                	jmp    c00190e6 <IDE::open(int, int, void*)+0x31e>
c00190a9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00190af:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00190b6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00190bd:	66 05 06 02          	add    ax,0x206
c00190c1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00190c8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00190cf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00190d6:	66 05 06 02          	add    ax,0x206
c00190da:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00190e1:	e9 e5 fe ff ff       	jmp    c0018fcb <IDE::open(int, int, void*)+0x203>
c00190e6:	50                   	push   eax
c00190e7:	50                   	push   eax
c00190e8:	6a 00                	push   0x0
c00190ea:	53                   	push   ebx
c00190eb:	e8 5e fa ff ff       	call   c0018b4e <IDE::prepareInterrupt(unsigned char)>
c00190f0:	5a                   	pop    edx
c00190f1:	59                   	pop    ecx
c00190f2:	6a 01                	push   0x1
c00190f4:	53                   	push   ebx
c00190f5:	e8 54 fa ff ff       	call   c0018b4e <IDE::prepareInterrupt(unsigned char)>
c00190fa:	83 c4 0c             	add    esp,0xc
c00190fd:	6a 00                	push   0x0
c00190ff:	6a 00                	push   0x0
c0019101:	53                   	push   ebx
c0019102:	e8 7b fc ff ff       	call   c0018d82 <IDE::enableIRQs(unsigned char, bool)>
c0019107:	83 c4 0c             	add    esp,0xc
c001910a:	6a 00                	push   0x0
c001910c:	6a 01                	push   0x1
c001910e:	53                   	push   ebx
c001910f:	e8 6e fc ff ff       	call   c0018d82 <IDE::enableIRQs(unsigned char, bool)>
c0019114:	83 c4 10             	add    esp,0x10
c0019117:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001911e:	74 34                	je     c0019154 <IDE::open(int, int, void*)+0x38c>
c0019120:	83 ec 0c             	sub    esp,0xc
c0019123:	53                   	push   ebx
c0019124:	6a 01                	push   0x1
c0019126:	68 4a 8d 01 c0       	push   0xc0018d4a
c001912b:	6a 0e                	push   0xe
c001912d:	53                   	push   ebx
c001912e:	e8 0d 27 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019133:	83 c4 14             	add    esp,0x14
c0019136:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001913c:	53                   	push   ebx
c001913d:	6a 01                	push   0x1
c001913f:	68 66 8d 01 c0       	push   0xc0018d66
c0019144:	6a 0f                	push   0xf
c0019146:	53                   	push   ebx
c0019147:	e8 f4 26 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001914c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019152:	eb 38                	jmp    c001918c <IDE::open(int, int, void*)+0x3c4>
c0019154:	83 ec 0c             	sub    esp,0xc
c0019157:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019161:	53                   	push   ebx
c0019162:	6a 00                	push   0x0
c0019164:	68 4a 8d 01 c0       	push   0xc0018d4a
c0019169:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001916f:	53                   	push   ebx
c0019170:	e8 cb 26 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019175:	83 c4 14             	add    esp,0x14
c0019178:	53                   	push   ebx
c0019179:	6a 00                	push   0x0
c001917b:	68 66 8d 01 c0       	push   0xc0018d66
c0019180:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019186:	53                   	push   ebx
c0019187:	e8 b4 26 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001918c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001918e:	83 c4 20             	add    esp,0x20
c0019191:	83 ec 0c             	sub    esp,0xc
c0019194:	53                   	push   ebx
c0019195:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019198:	83 c4 0c             	add    esp,0xc
c001919b:	6a 07                	push   0x7
c001919d:	6a 00                	push   0x0
c001919f:	53                   	push   ebx
c00191a0:	e8 8f fa ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c00191a5:	83 c4 0c             	add    esp,0xc
c00191a8:	6a 07                	push   0x7
c00191aa:	6a 01                	push   0x1
c00191ac:	53                   	push   ebx
c00191ad:	e8 82 fa ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c00191b2:	83 c4 0c             	add    esp,0xc
c00191b5:	6a 01                	push   0x1
c00191b7:	6a 00                	push   0x0
c00191b9:	53                   	push   ebx
c00191ba:	e8 c3 fb ff ff       	call   c0018d82 <IDE::enableIRQs(unsigned char, bool)>
c00191bf:	83 c4 0c             	add    esp,0xc
c00191c2:	6a 01                	push   0x1
c00191c4:	6a 01                	push   0x1
c00191c6:	53                   	push   ebx
c00191c7:	e8 b6 fb ff ff       	call   c0018d82 <IDE::enableIRQs(unsigned char, bool)>
c00191cc:	83 c4 2c             	add    esp,0x2c
c00191cf:	31 c0                	xor    eax,eax
c00191d1:	5b                   	pop    ebx
c00191d2:	5e                   	pop    esi
c00191d3:	5f                   	pop    edi
c00191d4:	5d                   	pop    ebp
c00191d5:	c3                   	ret    

c00191d6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00191d6:	55                   	push   ebp
c00191d7:	57                   	push   edi
c00191d8:	56                   	push   esi
c00191d9:	53                   	push   ebx
c00191da:	83 ec 1c             	sub    esp,0x1c
c00191dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00191e5:	8d 50 f8             	lea    edx,[eax-0x8]
c00191e8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00191ec:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00191f0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00191f4:	80 fa 03             	cmp    dl,0x3
c00191f7:	77 5d                	ja     c0019256 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00191f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00191fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019201:	0f b6 db             	movzx  ebx,bl
c0019204:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019207:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001920b:	83 ca 80             	or     edx,0xffffff80
c001920e:	0f b6 d2             	movzx  edx,dl
c0019211:	52                   	push   edx
c0019212:	6a 0c                	push   0xc
c0019214:	53                   	push   ebx
c0019215:	56                   	push   esi
c0019216:	e8 59 f9 ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001921b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019220:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019224:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019228:	0f b6 c0             	movzx  eax,al
c001922b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001922f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019231:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019236:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001923a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001923e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019242:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001924a:	83 c4 2c             	add    esp,0x2c
c001924d:	5b                   	pop    ebx
c001924e:	5e                   	pop    esi
c001924f:	5f                   	pop    edi
c0019250:	5d                   	pop    ebp
c0019251:	e9 1e f9 ff ff       	jmp    c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019256:	3c 07                	cmp    al,0x7
c0019258:	77 10                	ja     c001926a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001925a:	0f b6 db             	movzx  ebx,bl
c001925d:	0f b6 d0             	movzx  edx,al
c0019260:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019268:	eb 2d                	jmp    c0019297 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001926a:	3c 0d                	cmp    al,0xd
c001926c:	77 13                	ja     c0019281 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001926e:	0f b6 db             	movzx  ebx,bl
c0019271:	0f b6 c0             	movzx  eax,al
c0019274:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001927b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001927f:	eb 16                	jmp    c0019297 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019281:	3c 15                	cmp    al,0x15
c0019283:	77 14                	ja     c0019299 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019285:	0f b6 db             	movzx  ebx,bl
c0019288:	0f b6 c0             	movzx  eax,al
c001928b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019293:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019297:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019299:	83 c4 1c             	add    esp,0x1c
c001929c:	5b                   	pop    ebx
c001929d:	5e                   	pop    esi
c001929e:	5f                   	pop    edi
c001929f:	5d                   	pop    ebp
c00192a0:	c3                   	ret    
c00192a1:	90                   	nop

c00192a2 <IDE::detect()>:
c00192a2:	55                   	push   ebp
c00192a3:	57                   	push   edi
c00192a4:	56                   	push   esi
c00192a5:	53                   	push   ebx
c00192a6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00192ac:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00192b3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00192ba:	0f 85 97 02 00 00    	jne    c0019557 <IDE::detect()+0x2b5>
c00192c0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00192c7:	31 f6                	xor    esi,esi
c00192c9:	31 ed                	xor    ebp,ebp
c00192cb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00192d3:	89 e8                	mov    eax,ebp
c00192d5:	c1 e0 06             	shl    eax,0x6
c00192d8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00192e0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00192e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00192e8:	c1 e0 04             	shl    eax,0x4
c00192eb:	83 c8 a0             	or     eax,0xffffffa0
c00192ee:	0f b6 c0             	movzx  eax,al
c00192f1:	50                   	push   eax
c00192f2:	6a 06                	push   0x6
c00192f4:	56                   	push   esi
c00192f5:	53                   	push   ebx
c00192f6:	e8 79 f8 ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192fb:	83 c4 0c             	add    esp,0xc
c00192fe:	6a 0c                	push   0xc
c0019300:	56                   	push   esi
c0019301:	53                   	push   ebx
c0019302:	e8 2d f9 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0019307:	83 c4 0c             	add    esp,0xc
c001930a:	6a 0c                	push   0xc
c001930c:	56                   	push   esi
c001930d:	53                   	push   ebx
c001930e:	e8 21 f9 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0019313:	83 c4 0c             	add    esp,0xc
c0019316:	6a 0c                	push   0xc
c0019318:	56                   	push   esi
c0019319:	53                   	push   ebx
c001931a:	e8 15 f9 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c001931f:	83 c4 0c             	add    esp,0xc
c0019322:	6a 0c                	push   0xc
c0019324:	56                   	push   esi
c0019325:	53                   	push   ebx
c0019326:	e8 09 f9 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c001932b:	68 ec 00 00 00       	push   0xec
c0019330:	6a 07                	push   0x7
c0019332:	56                   	push   esi
c0019333:	53                   	push   ebx
c0019334:	e8 3b f8 ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019339:	83 c4 1c             	add    esp,0x1c
c001933c:	6a 0c                	push   0xc
c001933e:	56                   	push   esi
c001933f:	53                   	push   ebx
c0019340:	e8 ef f8 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0019345:	83 c4 0c             	add    esp,0xc
c0019348:	6a 0c                	push   0xc
c001934a:	56                   	push   esi
c001934b:	53                   	push   ebx
c001934c:	e8 e3 f8 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0019351:	83 c4 0c             	add    esp,0xc
c0019354:	6a 0c                	push   0xc
c0019356:	56                   	push   esi
c0019357:	53                   	push   ebx
c0019358:	e8 d7 f8 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c001935d:	83 c4 0c             	add    esp,0xc
c0019360:	6a 0c                	push   0xc
c0019362:	56                   	push   esi
c0019363:	53                   	push   ebx
c0019364:	e8 cb f8 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0019369:	83 c4 0c             	add    esp,0xc
c001936c:	6a 0c                	push   0xc
c001936e:	56                   	push   esi
c001936f:	53                   	push   ebx
c0019370:	e8 bf f8 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0019375:	83 c4 10             	add    esp,0x10
c0019378:	84 c0                	test   al,al
c001937a:	0f 84 5f 01 00 00    	je     c00194df <IDE::detect()+0x23d>
c0019380:	31 ff                	xor    edi,edi
c0019382:	50                   	push   eax
c0019383:	6a 0c                	push   0xc
c0019385:	56                   	push   esi
c0019386:	53                   	push   ebx
c0019387:	e8 a8 f8 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c001938c:	83 c4 10             	add    esp,0x10
c001938f:	a8 01                	test   al,0x1
c0019391:	0f 85 69 01 00 00    	jne    c0019500 <IDE::detect()+0x25e>
c0019397:	84 c0                	test   al,al
c0019399:	78 04                	js     c001939f <IDE::detect()+0xfd>
c001939b:	a8 08                	test   al,0x8
c001939d:	75 23                	jne    c00193c2 <IDE::detect()+0x120>
c001939f:	47                   	inc    edi
c00193a0:	81 ff 17 01 00 00    	cmp    edi,0x117
c00193a6:	7e da                	jle    c0019382 <IDE::detect()+0xe0>
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	6a 32                	push   0x32
c00193ad:	e8 96 a2 ff ff       	call   c0013648 <milliTenthSleep(unsigned int)>
c00193b2:	83 c4 10             	add    esp,0x10
c00193b5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00193bb:	75 c5                	jne    c0019382 <IDE::detect()+0xe0>
c00193bd:	e9 3e 01 00 00       	jmp    c0019500 <IDE::detect()+0x25e>
c00193c2:	31 c9                	xor    ecx,ecx
c00193c4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00193c8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00193cc:	83 ec 0c             	sub    esp,0xc
c00193cf:	68 80 00 00 00       	push   0x80
c00193d4:	57                   	push   edi
c00193d5:	6a 00                	push   0x0
c00193d7:	56                   	push   esi
c00193d8:	53                   	push   ebx
c00193d9:	e8 f8 fd ff ff       	call   c00191d6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00193de:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00193e3:	89 e8                	mov    eax,ebp
c00193e5:	89 d1                	mov    ecx,edx
c00193e7:	c1 e0 06             	shl    eax,0x6
c00193ea:	01 d8                	add    eax,ebx
c00193ec:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00193f3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00193fa:	89 f2                	mov    edx,esi
c00193fc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019402:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019406:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001940c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019410:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019417:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001941f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019426:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001942e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019434:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001943b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019441:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019445:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019449:	83 c4 20             	add    esp,0x20
c001944c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001944f:	83 c0 02             	add    eax,0x2
c0019452:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019458:	83 c7 02             	add    edi,0x2
c001945b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001945e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019464:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019468:	75 e2                	jne    c001944c <IDE::detect()+0x1aa>
c001946a:	89 e8                	mov    eax,ebp
c001946c:	c1 e0 06             	shl    eax,0x6
c001946f:	01 d8                	add    eax,ebx
c0019471:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019477:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001947e:	66 c1 ea 09          	shr    dx,0x9
c0019482:	83 e2 01             	and    edx,0x1
c0019485:	84 c9                	test   cl,cl
c0019487:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001948d:	75 22                	jne    c00194b1 <IDE::detect()+0x20f>
c001948f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019496:	74 46                	je     c00194de <IDE::detect()+0x23c>
c0019498:	83 ec 0c             	sub    esp,0xc
c001949b:	68 7c 01 00 00       	push   0x17c
c00194a0:	e8 14 e3 fe ff       	call   c00077b9 <malloc>
c00194a5:	89 c7                	mov    edi,eax
c00194a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00194aa:	e8 11 05 00 00       	call   c00199c0 <ATA::ATA()>
c00194af:	eb 17                	jmp    c00194c8 <IDE::detect()+0x226>
c00194b1:	83 ec 0c             	sub    esp,0xc
c00194b4:	68 84 01 00 00       	push   0x184
c00194b9:	e8 fb e2 fe ff       	call   c00077b9 <malloc>
c00194be:	89 c7                	mov    edi,eax
c00194c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00194c3:	e8 f0 0a 00 00       	call   c0019fb8 <ATAPI::ATAPI()>
c00194c8:	5a                   	pop    edx
c00194c9:	59                   	pop    ecx
c00194ca:	57                   	push   edi
c00194cb:	53                   	push   ebx
c00194cc:	e8 c3 23 ff ff       	call   c000b894 <Device::addChild(Device*)>
c00194d1:	8b 07                	mov    eax,DWORD PTR [edi]
c00194d3:	53                   	push   ebx
c00194d4:	55                   	push   ebp
c00194d5:	6a 00                	push   0x0
c00194d7:	57                   	push   edi
c00194d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00194db:	83 c4 20             	add    esp,0x20
c00194de:	45                   	inc    ebp
c00194df:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00194e4:	74 0d                	je     c00194f3 <IDE::detect()+0x251>
c00194e6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00194ee:	e9 e0 fd ff ff       	jmp    c00192d3 <IDE::detect()+0x31>
c00194f3:	4e                   	dec    esi
c00194f4:	74 61                	je     c0019557 <IDE::detect()+0x2b5>
c00194f6:	be 01 00 00 00       	mov    esi,0x1
c00194fb:	e9 cb fd ff ff       	jmp    c00192cb <IDE::detect()+0x29>
c0019500:	50                   	push   eax
c0019501:	6a 04                	push   0x4
c0019503:	56                   	push   esi
c0019504:	53                   	push   ebx
c0019505:	e8 2a f7 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c001950a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001950e:	83 c4 0c             	add    esp,0xc
c0019511:	6a 05                	push   0x5
c0019513:	56                   	push   esi
c0019514:	53                   	push   ebx
c0019515:	e8 1a f7 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c001951a:	83 c4 10             	add    esp,0x10
c001951d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019521:	80 fa 14             	cmp    dl,0x14
c0019524:	75 04                	jne    c001952a <IDE::detect()+0x288>
c0019526:	3c eb                	cmp    al,0xeb
c0019528:	eb 07                	jmp    c0019531 <IDE::detect()+0x28f>
c001952a:	3c 96                	cmp    al,0x96
c001952c:	75 b1                	jne    c00194df <IDE::detect()+0x23d>
c001952e:	80 fa 69             	cmp    dl,0x69
c0019531:	75 ac                	jne    c00194df <IDE::detect()+0x23d>
c0019533:	68 a1 00 00 00       	push   0xa1
c0019538:	6a 07                	push   0x7
c001953a:	56                   	push   esi
c001953b:	53                   	push   ebx
c001953c:	e8 33 f6 ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019541:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019548:	e8 fb a0 ff ff       	call   c0013648 <milliTenthSleep(unsigned int)>
c001954d:	83 c4 10             	add    esp,0x10
c0019550:	b1 01                	mov    cl,0x1
c0019552:	e9 6d fe ff ff       	jmp    c00193c4 <IDE::detect()+0x122>
c0019557:	81 c4 1c 02 00 00    	add    esp,0x21c
c001955d:	5b                   	pop    ebx
c001955e:	5e                   	pop    esi
c001955f:	5f                   	pop    edi
c0019560:	5d                   	pop    ebp
c0019561:	c3                   	ret    

c0019562 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019562:	55                   	push   ebp
c0019563:	57                   	push   edi
c0019564:	56                   	push   esi
c0019565:	53                   	push   ebx
c0019566:	83 ec 1c             	sub    esp,0x1c
c0019569:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001956d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019571:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019575:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019579:	88 c3                	mov    bl,al
c001957b:	84 c0                	test   al,al
c001957d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019581:	0f 84 81 00 00 00    	je     c0019608 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019587:	83 ec 0c             	sub    esp,0xc
c001958a:	68 57 ed 01 c0       	push   0xc001ed57
c001958f:	e8 c0 0e ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0019594:	83 c4 10             	add    esp,0x10
c0019597:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001959b:	3c 01                	cmp    al,0x1
c001959d:	74 63                	je     c0019602 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001959f:	3c 02                	cmp    al,0x2
c00195a1:	75 53                	jne    c00195f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00195a3:	01 f6                	add    esi,esi
c00195a5:	09 ee                	or     esi,ebp
c00195a7:	50                   	push   eax
c00195a8:	89 f0                	mov    eax,esi
c00195aa:	6a 01                	push   0x1
c00195ac:	0f b6 f0             	movzx  esi,al
c00195af:	c1 e6 06             	shl    esi,0x6
c00195b2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00195ba:	50                   	push   eax
c00195bb:	57                   	push   edi
c00195bc:	e8 73 f6 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c00195c1:	83 c4 10             	add    esp,0x10
c00195c4:	a8 01                	test   al,0x1
c00195c6:	74 02                	je     c00195ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00195c8:	b3 07                	mov    bl,0x7
c00195ca:	a8 02                	test   al,0x2
c00195cc:	74 02                	je     c00195d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00195ce:	b3 03                	mov    bl,0x3
c00195d0:	a8 04                	test   al,0x4
c00195d2:	74 02                	je     c00195d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00195d4:	b3 14                	mov    bl,0x14
c00195d6:	a8 08                	test   al,0x8
c00195d8:	74 02                	je     c00195dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00195da:	b3 03                	mov    bl,0x3
c00195dc:	a8 10                	test   al,0x10
c00195de:	74 02                	je     c00195e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00195e0:	b3 15                	mov    bl,0x15
c00195e2:	a8 20                	test   al,0x20
c00195e4:	74 02                	je     c00195e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00195e6:	b3 03                	mov    bl,0x3
c00195e8:	a8 40                	test   al,0x40
c00195ea:	74 02                	je     c00195ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00195ec:	b3 16                	mov    bl,0x16
c00195ee:	84 c0                	test   al,al
c00195f0:	79 16                	jns    c0019608 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195f2:	b3 0d                	mov    bl,0xd
c00195f4:	eb 12                	jmp    c0019608 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195f6:	3c 03                	cmp    al,0x3
c00195f8:	74 0c                	je     c0019606 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00195fa:	3c 04                	cmp    al,0x4
c00195fc:	75 0a                	jne    c0019608 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195fe:	b3 08                	mov    bl,0x8
c0019600:	eb 06                	jmp    c0019608 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019602:	b3 13                	mov    bl,0x13
c0019604:	eb 02                	jmp    c0019608 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019606:	b3 17                	mov    bl,0x17
c0019608:	83 c4 1c             	add    esp,0x1c
c001960b:	88 d8                	mov    al,bl
c001960d:	5b                   	pop    ebx
c001960e:	5e                   	pop    esi
c001960f:	5f                   	pop    edi
c0019610:	5d                   	pop    ebp
c0019611:	c3                   	ret    

c0019612 <IDE::polling(unsigned char, unsigned int)>:
c0019612:	55                   	push   ebp
c0019613:	bd 04 00 00 00       	mov    ebp,0x4
c0019618:	57                   	push   edi
c0019619:	56                   	push   esi
c001961a:	53                   	push   ebx
c001961b:	83 ec 0c             	sub    esp,0xc
c001961e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019622:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019626:	0f b6 f3             	movzx  esi,bl
c0019629:	52                   	push   edx
c001962a:	6a 0c                	push   0xc
c001962c:	56                   	push   esi
c001962d:	57                   	push   edi
c001962e:	e8 01 f6 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0019633:	83 c4 10             	add    esp,0x10
c0019636:	4d                   	dec    ebp
c0019637:	75 ed                	jne    c0019626 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019639:	bb a0 86 01 00       	mov    ebx,0x186a0
c001963e:	50                   	push   eax
c001963f:	6a 0c                	push   0xc
c0019641:	56                   	push   esi
c0019642:	57                   	push   edi
c0019643:	e8 ec f5 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0019648:	83 c4 10             	add    esp,0x10
c001964b:	a8 01                	test   al,0x1
c001964d:	75 17                	jne    c0019666 <IDE::polling(unsigned char, unsigned int)+0x54>
c001964f:	a8 20                	test   al,0x20
c0019651:	75 0f                	jne    c0019662 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019653:	4b                   	dec    ebx
c0019654:	74 10                	je     c0019666 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019656:	84 c0                	test   al,al
c0019658:	78 e4                	js     c001963e <IDE::polling(unsigned char, unsigned int)+0x2c>
c001965a:	a8 08                	test   al,0x8
c001965c:	74 e0                	je     c001963e <IDE::polling(unsigned char, unsigned int)+0x2c>
c001965e:	31 c0                	xor    eax,eax
c0019660:	eb 06                	jmp    c0019668 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019662:	b0 01                	mov    al,0x1
c0019664:	eb 02                	jmp    c0019668 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019666:	b0 02                	mov    al,0x2
c0019668:	83 c4 0c             	add    esp,0xc
c001966b:	5b                   	pop    ebx
c001966c:	5e                   	pop    esi
c001966d:	5f                   	pop    edi
c001966e:	5d                   	pop    ebp
c001966f:	c3                   	ret    

c0019670 <SATABus::close(int, int, void*)>:
c0019670:	31 c0                	xor    eax,eax
c0019672:	c3                   	ret    
c0019673:	90                   	nop

c0019674 <SATABus::detect()>:
c0019674:	c3                   	ret    
c0019675:	90                   	nop

c0019676 <SATABus::SATABus()>:
c0019676:	83 ec 0c             	sub    esp,0xc
c0019679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001967d:	83 ec 08             	sub    esp,0x8
c0019680:	68 90 ed 01 c0       	push   0xc001ed90
c0019685:	50                   	push   eax
c0019686:	e8 4d 25 ff ff       	call   c000bbd8 <HardDiskController::HardDiskController(char const*)>
c001968b:	83 c4 10             	add    esp,0x10
c001968e:	ba bc ed 01 c0       	mov    edx,0xc001edbc
c0019693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019697:	89 10                	mov    DWORD PTR [eax],edx
c0019699:	83 ec 0c             	sub    esp,0xc
c001969c:	6a 50                	push   0x50
c001969e:	e8 b0 e4 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c00196a3:	83 c4 10             	add    esp,0x10
c00196a6:	89 c2                	mov    edx,eax
c00196a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196ac:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00196b2:	83 ec 0c             	sub    esp,0xc
c00196b5:	6a 50                	push   0x50
c00196b7:	e8 45 fb fe ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c00196bc:	83 c4 10             	add    esp,0x10
c00196bf:	89 c2                	mov    edx,eax
c00196c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196c5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00196cb:	a1 90 05 02 c0       	mov    eax,ds:0xc0020590
c00196d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196d4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00196da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196de:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00196e4:	83 ec 0c             	sub    esp,0xc
c00196e7:	6a 03                	push   0x3
c00196e9:	6a 50                	push   0x50
c00196eb:	51                   	push   ecx
c00196ec:	52                   	push   edx
c00196ed:	50                   	push   eax
c00196ee:	e8 9d 04 ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00196f3:	83 c4 20             	add    esp,0x20
c00196f6:	90                   	nop
c00196f7:	83 c4 0c             	add    esp,0xc
c00196fa:	c3                   	ret    
c00196fb:	90                   	nop

c00196fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00196fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019700:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019703:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019706:	09 c2                	or     edx,eax
c0019708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001970c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019712:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019714:	31 c0                	xor    eax,eax
c0019716:	c1 e9 08             	shr    ecx,0x8
c0019719:	83 e1 0f             	and    ecx,0xf
c001971c:	39 c8                	cmp    eax,ecx
c001971e:	74 0a                	je     c001972a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019720:	f6 c2 01             	test   dl,0x1
c0019723:	74 08                	je     c001972d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019725:	d1 ea                	shr    edx,1
c0019727:	40                   	inc    eax
c0019728:	eb f2                	jmp    c001971c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001972a:	83 c8 ff             	or     eax,0xffffffff
c001972d:	c3                   	ret    

c001972e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001972e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019732:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019735:	89 c2                	mov    edx,eax
c0019737:	c1 ea 08             	shr    edx,0x8
c001973a:	83 e2 0f             	and    edx,0xf
c001973d:	fe ca                	dec    dl
c001973f:	75 31                	jne    c0019772 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019741:	83 e0 0f             	and    eax,0xf
c0019744:	3c 03                	cmp    al,0x3
c0019746:	75 2a                	jne    c0019772 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019748:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001974b:	b8 02 00 00 00       	mov    eax,0x2
c0019750:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019756:	74 1c                	je     c0019774 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019758:	b8 04 00 00 00       	mov    eax,0x4
c001975d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019763:	74 0f                	je     c0019774 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019765:	31 c0                	xor    eax,eax
c0019767:	83 fa 03             	cmp    edx,0x3
c001976a:	0f 94 c0             	sete   al
c001976d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019771:	c3                   	ret    
c0019772:	31 c0                	xor    eax,eax
c0019774:	c3                   	ret    
c0019775:	90                   	nop

c0019776 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001977a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001977d:	0f ba e2 0f          	bt     edx,0xf
c0019781:	72 f7                	jb     c001977a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019783:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019786:	83 ca 10             	or     edx,0x10
c0019789:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001978c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001978f:	83 ca 01             	or     edx,0x1
c0019792:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019795:	c3                   	ret    

c0019796 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001979a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001979d:	83 e2 fe             	and    edx,0xfffffffe
c00197a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197a6:	83 e2 ef             	and    edx,0xffffffef
c00197a9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197af:	0f ba e2 0e          	bt     edx,0xe
c00197b3:	72 f7                	jb     c00197ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00197b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197b8:	0f ba e2 0f          	bt     edx,0xf
c00197bc:	72 ee                	jb     c00197ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00197be:	c3                   	ret    
c00197bf:	90                   	nop

c00197c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00197c0:	55                   	push   ebp
c00197c1:	57                   	push   edi
c00197c2:	56                   	push   esi
c00197c3:	53                   	push   ebx
c00197c4:	83 ec 1c             	sub    esp,0x1c
c00197c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00197cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00197cf:	53                   	push   ebx
c00197d0:	56                   	push   esi
c00197d1:	e8 c0 ff ff ff       	call   c0019796 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00197d6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00197da:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00197e0:	83 ec 0c             	sub    esp,0xc
c00197e3:	c1 e5 0a             	shl    ebp,0xa
c00197e6:	01 e8                	add    eax,ebp
c00197e8:	89 03                	mov    DWORD PTR [ebx],eax
c00197ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00197ec:	68 00 04 00 00       	push   0x400
c00197f1:	6a 00                	push   0x0
c00197f3:	50                   	push   eax
c00197f4:	e8 d7 6c fe ff       	call   c00004d0 <memset>
c00197f9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00197ff:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019803:	01 e8                	add    eax,ebp
c0019805:	83 c4 1c             	add    esp,0x1c
c0019808:	89 03                	mov    DWORD PTR [ebx],eax
c001980a:	c1 e2 08             	shl    edx,0x8
c001980d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019814:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001981a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019820:	01 f8                	add    eax,edi
c0019822:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019825:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019828:	68 00 01 00 00       	push   0x100
c001982d:	6a 00                	push   0x0
c001982f:	50                   	push   eax
c0019830:	e8 9b 6c fe ff       	call   c00004d0 <memset>
c0019835:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001983b:	01 fa                	add    edx,edi
c001983d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019841:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019844:	c1 e7 0d             	shl    edi,0xd
c0019847:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001984e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019854:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001985a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001985e:	31 ff                	xor    edi,edi
c0019860:	83 c4 10             	add    esp,0x10
c0019863:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001986d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019873:	83 c5 20             	add    ebp,0x20
c0019876:	01 f8                	add    eax,edi
c0019878:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001987b:	52                   	push   edx
c001987c:	68 00 01 00 00       	push   0x100
c0019881:	6a 00                	push   0x0
c0019883:	50                   	push   eax
c0019884:	e8 47 6c fe ff       	call   c00004d0 <memset>
c0019889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001988d:	83 c4 10             	add    esp,0x10
c0019890:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019896:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001989d:	01 f8                	add    eax,edi
c001989f:	81 c7 00 01 00 00    	add    edi,0x100
c00198a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00198a8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00198ae:	75 b3                	jne    c0019863 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c00198b0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c00198b7:	50                   	push   eax
c00198b8:	50                   	push   eax
c00198b9:	53                   	push   ebx
c00198ba:	56                   	push   esi
c00198bb:	e8 b6 fe ff ff       	call   c0019776 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00198c0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c00198c7:	83 c4 2c             	add    esp,0x2c
c00198ca:	5b                   	pop    ebx
c00198cb:	5e                   	pop    esi
c00198cc:	5f                   	pop    edi
c00198cd:	5d                   	pop    ebp
c00198ce:	c3                   	ret    
c00198cf:	90                   	nop

c00198d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00198d0:	55                   	push   ebp
c00198d1:	57                   	push   edi
c00198d2:	56                   	push   esi
c00198d3:	53                   	push   ebx
c00198d4:	31 db                	xor    ebx,ebx
c00198d6:	83 ec 0c             	sub    esp,0xc
c00198d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00198dd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00198e1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00198e4:	f7 c7 01 00 00 00    	test   edi,0x1
c00198ea:	74 7a                	je     c0019966 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00198ec:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00198f0:	89 d8                	mov    eax,ebx
c00198f2:	c1 e0 07             	shl    eax,0x7
c00198f5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00198fc:	55                   	push   ebp
c00198fd:	56                   	push   esi
c00198fe:	e8 2b fe ff ff       	call   c001972e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019903:	5a                   	pop    edx
c0019904:	83 f8 01             	cmp    eax,0x1
c0019907:	59                   	pop    ecx
c0019908:	75 21                	jne    c001992b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001990a:	50                   	push   eax
c001990b:	53                   	push   ebx
c001990c:	55                   	push   ebp
c001990d:	56                   	push   esi
c001990e:	e8 ad fe ff ff       	call   c00197c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019913:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001991a:	e8 9a de fe ff       	call   c00077b9 <malloc>
c001991f:	89 c5                	mov    ebp,eax
c0019921:	89 04 24             	mov    DWORD PTR [esp],eax
c0019924:	e8 43 0d 00 00       	call   c001a66c <SATA::SATA()>
c0019929:	eb 24                	jmp    c001994f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001992b:	83 f8 04             	cmp    eax,0x4
c001992e:	75 36                	jne    c0019966 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019930:	51                   	push   ecx
c0019931:	53                   	push   ebx
c0019932:	55                   	push   ebp
c0019933:	56                   	push   esi
c0019934:	e8 87 fe ff ff       	call   c00197c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019939:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019940:	e8 74 de fe ff       	call   c00077b9 <malloc>
c0019945:	89 c5                	mov    ebp,eax
c0019947:	89 04 24             	mov    DWORD PTR [esp],eax
c001994a:	e8 79 10 00 00       	call   c001a9c8 <SATAPI::SATAPI()>
c001994f:	58                   	pop    eax
c0019950:	5a                   	pop    edx
c0019951:	55                   	push   ebp
c0019952:	56                   	push   esi
c0019953:	e8 3c 1f ff ff       	call   c000b894 <Device::addChild(Device*)>
c0019958:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001995b:	56                   	push   esi
c001995c:	6a 00                	push   0x0
c001995e:	53                   	push   ebx
c001995f:	55                   	push   ebp
c0019960:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019963:	83 c4 20             	add    esp,0x20
c0019966:	d1 ef                	shr    edi,1
c0019968:	43                   	inc    ebx
c0019969:	83 fb 20             	cmp    ebx,0x20
c001996c:	0f 85 72 ff ff ff    	jne    c00198e4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019972:	83 c4 0c             	add    esp,0xc
c0019975:	5b                   	pop    ebx
c0019976:	5e                   	pop    esi
c0019977:	5f                   	pop    edi
c0019978:	5d                   	pop    ebp
c0019979:	c3                   	ret    

c001997a <SATABus::open(int, int, void*)>:
c001997a:	83 ec 14             	sub    esp,0x14
c001997d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019981:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019987:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001998d:	52                   	push   edx
c001998e:	50                   	push   eax
c001998f:	e8 3c ff ff ff       	call   c00198d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019994:	31 c0                	xor    eax,eax
c0019996:	83 c4 1c             	add    esp,0x1c
c0019999:	c3                   	ret    

c001999a <ATA::close(int, int, void*)>:
c001999a:	83 ec 0c             	sub    esp,0xc
c001999d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00199a7:	85 c0                	test   eax,eax
c00199a9:	74 0c                	je     c00199b7 <ATA::close(int, int, void*)+0x1d>
c00199ab:	83 ec 0c             	sub    esp,0xc
c00199ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00199b0:	50                   	push   eax
c00199b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00199b4:	83 c4 10             	add    esp,0x10
c00199b7:	31 c0                	xor    eax,eax
c00199b9:	83 c4 0c             	add    esp,0xc
c00199bc:	c3                   	ret    
c00199bd:	90                   	nop

c00199be <ATA::powerSaving(PowerSavingLevel)>:
c00199be:	c3                   	ret    
c00199bf:	90                   	nop

c00199c0 <ATA::ATA()>:
c00199c0:	83 ec 0c             	sub    esp,0xc
c00199c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199c7:	83 ec 04             	sub    esp,0x4
c00199ca:	68 00 02 00 00       	push   0x200
c00199cf:	68 89 ee 01 c0       	push   0xc001ee89
c00199d4:	50                   	push   eax
c00199d5:	e8 88 22 ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00199da:	83 c4 10             	add    esp,0x10
c00199dd:	ba fc ed 01 c0       	mov    edx,0xc001edfc
c00199e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199e6:	89 10                	mov    DWORD PTR [eax],edx
c00199e8:	90                   	nop
c00199e9:	83 c4 0c             	add    esp,0xc
c00199ec:	c3                   	ret    
c00199ed:	90                   	nop

c00199ee <ATA::flush(bool)>:
c00199ee:	53                   	push   ebx
c00199ef:	83 ec 08             	sub    esp,0x8
c00199f2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00199f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199fb:	19 c0                	sbb    eax,eax
c00199fd:	83 e0 fd             	and    eax,0xfffffffd
c0019a00:	05 ea 00 00 00       	add    eax,0xea
c0019a05:	50                   	push   eax
c0019a06:	6a 07                	push   0x7
c0019a08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a0f:	50                   	push   eax
c0019a10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a16:	e8 59 f1 ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a1b:	83 c4 0c             	add    esp,0xc
c0019a1e:	6a 00                	push   0x0
c0019a20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a27:	50                   	push   eax
c0019a28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a2e:	e8 df fb ff ff       	call   c0019612 <IDE::polling(unsigned char, unsigned int)>
c0019a33:	83 c4 18             	add    esp,0x18
c0019a36:	5b                   	pop    ebx
c0019a37:	c3                   	ret    

c0019a38 <ATA::readyForCommand()>:
c0019a38:	56                   	push   esi
c0019a39:	53                   	push   ebx
c0019a3a:	53                   	push   ebx
c0019a3b:	31 db                	xor    ebx,ebx
c0019a3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a41:	51                   	push   ecx
c0019a42:	6a 0c                	push   0xc
c0019a44:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019a4b:	50                   	push   eax
c0019a4c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019a52:	e8 dd f1 ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c0019a57:	83 c4 10             	add    esp,0x10
c0019a5a:	a8 88                	test   al,0x88
c0019a5c:	74 1f                	je     c0019a7d <ATA::readyForCommand()+0x45>
c0019a5e:	43                   	inc    ebx
c0019a5f:	83 fb 63             	cmp    ebx,0x63
c0019a62:	7e dd                	jle    c0019a41 <ATA::readyForCommand()+0x9>
c0019a64:	83 ec 0c             	sub    esp,0xc
c0019a67:	6a 0a                	push   0xa
c0019a69:	e8 da 9b ff ff       	call   c0013648 <milliTenthSleep(unsigned int)>
c0019a6e:	83 c4 10             	add    esp,0x10
c0019a71:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019a77:	75 c8                	jne    c0019a41 <ATA::readyForCommand()+0x9>
c0019a79:	31 c0                	xor    eax,eax
c0019a7b:	eb 02                	jmp    c0019a7f <ATA::readyForCommand()+0x47>
c0019a7d:	b0 01                	mov    al,0x1
c0019a7f:	5a                   	pop    edx
c0019a80:	5b                   	pop    ebx
c0019a81:	5e                   	pop    esi
c0019a82:	c3                   	ret    
c0019a83:	90                   	nop

c0019a84 <ATA::access(unsigned long long, int, void*, bool)>:
c0019a84:	55                   	push   ebp
c0019a85:	57                   	push   edi
c0019a86:	56                   	push   esi
c0019a87:	53                   	push   ebx
c0019a88:	83 ec 2c             	sub    esp,0x2c
c0019a8b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019a8f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019a93:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019a97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019a9b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019a9f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019aa3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019aa7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019aad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ab1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019ab7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019abb:	c1 e0 06             	shl    eax,0x6
c0019abe:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019ac6:	74 5d                	je     c0019b25 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019ac8:	89 fa                	mov    edx,edi
c0019aca:	89 f0                	mov    eax,esi
c0019acc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019ad0:	c1 ea 1c             	shr    edx,0x1c
c0019ad3:	89 d1                	mov    ecx,edx
c0019ad5:	09 c1                	or     ecx,eax
c0019ad7:	74 25                	je     c0019afe <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019ad9:	31 ed                	xor    ebp,ebp
c0019adb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019ae2:	89 fa                	mov    edx,edi
c0019ae4:	89 f0                	mov    eax,esi
c0019ae6:	0f ad d0             	shrd   eax,edx,cl
c0019ae9:	d3 ea                	shr    edx,cl
c0019aeb:	f6 c1 20             	test   cl,0x20
c0019aee:	74 02                	je     c0019af2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019af0:	89 d0                	mov    eax,edx
c0019af2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019af6:	45                   	inc    ebp
c0019af7:	83 fd 06             	cmp    ebp,0x6
c0019afa:	75 df                	jne    c0019adb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019afc:	eb 76                	jmp    c0019b74 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019afe:	89 f0                	mov    eax,esi
c0019b00:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019b05:	89 fa                	mov    edx,edi
c0019b07:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019b0e:	0f ac d0 10          	shrd   eax,edx,0x10
c0019b12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019b17:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019b1b:	c1 ee 18             	shr    esi,0x18
c0019b1e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019b23:	eb 56                	jmp    c0019b7b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019b25:	6a 00                	push   0x0
c0019b27:	6a 3f                	push   0x3f
c0019b29:	57                   	push   edi
c0019b2a:	56                   	push   esi
c0019b2b:	e8 10 22 00 00       	call   c001bd40 <__umoddi3>
c0019b30:	83 c4 10             	add    esp,0x10
c0019b33:	40                   	inc    eax
c0019b34:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019b38:	6a 00                	push   0x0
c0019b3a:	68 f0 03 00 00       	push   0x3f0
c0019b3f:	57                   	push   edi
c0019b40:	56                   	push   esi
c0019b41:	e8 fa 20 00 00       	call   c001bc40 <__udivdi3>
c0019b46:	83 c4 10             	add    esp,0x10
c0019b49:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019b4e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019b55:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019b5a:	6a 00                	push   0x0
c0019b5c:	6a 3f                	push   0x3f
c0019b5e:	57                   	push   edi
c0019b5f:	56                   	push   esi
c0019b60:	e8 db 20 00 00       	call   c001bc40 <__udivdi3>
c0019b65:	83 c4 10             	add    esp,0x10
c0019b68:	89 c6                	mov    esi,eax
c0019b6a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019b6f:	83 e6 0f             	and    esi,0xf
c0019b72:	eb 07                	jmp    c0019b7b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019b74:	31 f6                	xor    esi,esi
c0019b76:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019b7b:	bf 01 00 00 00       	mov    edi,0x1
c0019b80:	50                   	push   eax
c0019b81:	6a 00                	push   0x0
c0019b83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b8a:	50                   	push   eax
c0019b8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019b8f:	e8 ee f1 ff ff       	call   c0018d82 <IDE::enableIRQs(unsigned char, bool)>
c0019b94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b97:	e8 9c fe ff ff       	call   c0019a38 <ATA::readyForCommand()>
c0019b9c:	83 c4 10             	add    esp,0x10
c0019b9f:	84 c0                	test   al,al
c0019ba1:	0f 84 4e 02 00 00    	je     c0019df5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019ba7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019bad:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019bb3:	c1 e0 04             	shl    eax,0x4
c0019bb6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019bbd:	09 c6                	or     esi,eax
c0019bbf:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019bc4:	75 05                	jne    c0019bcb <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019bc6:	83 ce a0             	or     esi,0xffffffa0
c0019bc9:	eb 03                	jmp    c0019bce <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019bcb:	83 ce e0             	or     esi,0xffffffe0
c0019bce:	89 f0                	mov    eax,esi
c0019bd0:	0f b6 f0             	movzx  esi,al
c0019bd3:	56                   	push   esi
c0019bd4:	6a 06                	push   0x6
c0019bd6:	51                   	push   ecx
c0019bd7:	52                   	push   edx
c0019bd8:	e8 97 ef ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bdd:	83 c4 10             	add    esp,0x10
c0019be0:	6a 00                	push   0x0
c0019be2:	6a 01                	push   0x1
c0019be4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019beb:	50                   	push   eax
c0019bec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bf2:	e8 7d ef ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bf7:	83 c4 10             	add    esp,0x10
c0019bfa:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019bff:	75 6e                	jne    c0019c6f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019c01:	6a 00                	push   0x0
c0019c03:	6a 08                	push   0x8
c0019c05:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c0c:	50                   	push   eax
c0019c0d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c13:	e8 5c ef ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c18:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019c1d:	50                   	push   eax
c0019c1e:	6a 09                	push   0x9
c0019c20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c27:	50                   	push   eax
c0019c28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c2e:	e8 41 ef ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c33:	83 c4 20             	add    esp,0x20
c0019c36:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019c3b:	50                   	push   eax
c0019c3c:	6a 0a                	push   0xa
c0019c3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c45:	50                   	push   eax
c0019c46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c4c:	e8 23 ef ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c51:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019c56:	50                   	push   eax
c0019c57:	6a 0b                	push   0xb
c0019c59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c60:	50                   	push   eax
c0019c61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c67:	e8 08 ef ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c6c:	83 c4 20             	add    esp,0x20
c0019c6f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019c74:	50                   	push   eax
c0019c75:	6a 02                	push   0x2
c0019c77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c7e:	50                   	push   eax
c0019c7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c85:	e8 ea ee ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c8a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019c8f:	50                   	push   eax
c0019c90:	6a 03                	push   0x3
c0019c92:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c99:	50                   	push   eax
c0019c9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ca0:	e8 cf ee ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ca5:	83 c4 20             	add    esp,0x20
c0019ca8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019cad:	50                   	push   eax
c0019cae:	6a 04                	push   0x4
c0019cb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cb7:	50                   	push   eax
c0019cb8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cbe:	e8 b1 ee ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cc3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019cc8:	50                   	push   eax
c0019cc9:	6a 05                	push   0x5
c0019ccb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cd2:	50                   	push   eax
c0019cd3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cd9:	e8 96 ee ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cde:	83 c4 20             	add    esp,0x20
c0019ce1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019ce6:	0f 94 c0             	sete   al
c0019ce9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019cee:	74 09                	je     c0019cf9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019cf0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019cf7:	eb 07                	jmp    c0019d00 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019cf9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019d00:	0f b6 c0             	movzx  eax,al
c0019d03:	50                   	push   eax
c0019d04:	6a 07                	push   0x7
c0019d06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d0d:	50                   	push   eax
c0019d0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d14:	e8 5b ee ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d19:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019d1d:	83 c4 10             	add    esp,0x10
c0019d20:	85 f6                	test   esi,esi
c0019d22:	0f 84 ae 00 00 00    	je     c0019dd6 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019d28:	50                   	push   eax
c0019d29:	6a 01                	push   0x1
c0019d2b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d32:	50                   	push   eax
c0019d33:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d39:	e8 d4 f8 ff ff       	call   c0019612 <IDE::polling(unsigned char, unsigned int)>
c0019d3e:	83 c4 10             	add    esp,0x10
c0019d41:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019d47:	84 c0                	test   al,al
c0019d49:	74 20                	je     c0019d6b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019d4b:	0f b6 f8             	movzx  edi,al
c0019d4e:	0f b6 d2             	movzx  edx,dl
c0019d51:	57                   	push   edi
c0019d52:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019d59:	50                   	push   eax
c0019d5a:	52                   	push   edx
c0019d5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d61:	e8 fc f7 ff ff       	call   c0019562 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019d66:	e9 87 00 00 00       	jmp    c0019df2 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019d6b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019d70:	74 33                	je     c0019da5 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019d72:	31 ed                	xor    ebp,ebp
c0019d74:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019d78:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019d7c:	50                   	push   eax
c0019d7d:	50                   	push   eax
c0019d7e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d85:	50                   	push   eax
c0019d86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d8c:	e8 d1 ed ff ff       	call   c0018b62 <IDE::getBase(unsigned char)>
c0019d91:	89 c2                	mov    edx,eax
c0019d93:	89 f8                	mov    eax,edi
c0019d95:	66 ef                	out    dx,ax
c0019d97:	45                   	inc    ebp
c0019d98:	83 c4 10             	add    esp,0x10
c0019d9b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019da1:	75 d1                	jne    c0019d74 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019da3:	eb 23                	jmp    c0019dc8 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019da5:	0f b6 d2             	movzx  edx,dl
c0019da8:	51                   	push   ecx
c0019da9:	51                   	push   ecx
c0019daa:	52                   	push   edx
c0019dab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019db1:	e8 ac ed ff ff       	call   c0018b62 <IDE::getBase(unsigned char)>
c0019db6:	b9 00 01 00 00       	mov    ecx,0x100
c0019dbb:	89 c2                	mov    edx,eax
c0019dbd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019dc1:	fc                   	cld    
c0019dc2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019dc5:	83 c4 10             	add    esp,0x10
c0019dc8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019dd0:	4e                   	dec    esi
c0019dd1:	e9 4a ff ff ff       	jmp    c0019d20 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019dd6:	31 ff                	xor    edi,edi
c0019dd8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019ddd:	74 16                	je     c0019df5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019ddf:	50                   	push   eax
c0019de0:	50                   	push   eax
c0019de1:	31 c0                	xor    eax,eax
c0019de3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019de8:	0f 94 c0             	sete   al
c0019deb:	50                   	push   eax
c0019dec:	53                   	push   ebx
c0019ded:	e8 fc fb ff ff       	call   c00199ee <ATA::flush(bool)>
c0019df2:	83 c4 10             	add    esp,0x10
c0019df5:	83 c4 2c             	add    esp,0x2c
c0019df8:	89 f8                	mov    eax,edi
c0019dfa:	5b                   	pop    ebx
c0019dfb:	5e                   	pop    esi
c0019dfc:	5f                   	pop    edi
c0019dfd:	5d                   	pop    ebp
c0019dfe:	c3                   	ret    
c0019dff:	90                   	nop

c0019e00 <ATA::read(unsigned long long, int, void*)>:
c0019e00:	57                   	push   edi
c0019e01:	b8 04 00 00 00       	mov    eax,0x4
c0019e06:	56                   	push   esi
c0019e07:	53                   	push   ebx
c0019e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e0c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e10:	8d 7a ff             	lea    edi,[edx-0x1]
c0019e13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e17:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e1b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019e21:	77 25                	ja     c0019e48 <ATA::read(unsigned long long, int, void*)+0x48>
c0019e23:	b8 06 00 00 00       	mov    eax,0x6
c0019e28:	85 f6                	test   esi,esi
c0019e2a:	74 1c                	je     c0019e48 <ATA::read(unsigned long long, int, void*)+0x48>
c0019e2c:	50                   	push   eax
c0019e2d:	50                   	push   eax
c0019e2e:	6a 00                	push   0x0
c0019e30:	56                   	push   esi
c0019e31:	52                   	push   edx
c0019e32:	53                   	push   ebx
c0019e33:	51                   	push   ecx
c0019e34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e38:	e8 47 fc ff ff       	call   c0019a84 <ATA::access(unsigned long long, int, void*, bool)>
c0019e3d:	83 c4 20             	add    esp,0x20
c0019e40:	85 c0                	test   eax,eax
c0019e42:	0f 95 c0             	setne  al
c0019e45:	0f b6 c0             	movzx  eax,al
c0019e48:	5b                   	pop    ebx
c0019e49:	5e                   	pop    esi
c0019e4a:	5f                   	pop    edi
c0019e4b:	c3                   	ret    

c0019e4c <ATA::write(unsigned long long, int, void*)>:
c0019e4c:	57                   	push   edi
c0019e4d:	b8 04 00 00 00       	mov    eax,0x4
c0019e52:	56                   	push   esi
c0019e53:	53                   	push   ebx
c0019e54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e58:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e5c:	8d 7a ff             	lea    edi,[edx-0x1]
c0019e5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e63:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e67:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019e6d:	77 25                	ja     c0019e94 <ATA::write(unsigned long long, int, void*)+0x48>
c0019e6f:	b8 06 00 00 00       	mov    eax,0x6
c0019e74:	85 f6                	test   esi,esi
c0019e76:	74 1c                	je     c0019e94 <ATA::write(unsigned long long, int, void*)+0x48>
c0019e78:	50                   	push   eax
c0019e79:	50                   	push   eax
c0019e7a:	6a 01                	push   0x1
c0019e7c:	56                   	push   esi
c0019e7d:	52                   	push   edx
c0019e7e:	53                   	push   ebx
c0019e7f:	51                   	push   ecx
c0019e80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e84:	e8 fb fb ff ff       	call   c0019a84 <ATA::access(unsigned long long, int, void*, bool)>
c0019e89:	83 c4 20             	add    esp,0x20
c0019e8c:	85 c0                	test   eax,eax
c0019e8e:	0f 95 c0             	setne  al
c0019e91:	0f b6 c0             	movzx  eax,al
c0019e94:	5b                   	pop    ebx
c0019e95:	5e                   	pop    esi
c0019e96:	5f                   	pop    edi
c0019e97:	c3                   	ret    

c0019e98 <ATA::detectCHS()>:
c0019e98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e9c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019ea2:	c1 e0 06             	shl    eax,0x6
c0019ea5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019eab:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019eb5:	c7 44 24 04 e0 ed 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ede0
c0019ebd:	e9 75 62 ff ff       	jmp    c0010137 <KePanic(char const*)>

c0019ec2 <ATA::open(int, int, void*)>:
c0019ec2:	53                   	push   ebx
c0019ec3:	83 ec 08             	sub    esp,0x8
c0019ec6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019eca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ed2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019ed8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019ede:	c1 e0 06             	shl    eax,0x6
c0019ee1:	01 d0                	add    eax,edx
c0019ee3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019eea:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019ef0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019ef7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019f01:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019f07:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019f0e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019f15:	75 0c                	jne    c0019f23 <ATA::open(int, int, void*)+0x61>
c0019f17:	83 ec 0c             	sub    esp,0xc
c0019f1a:	53                   	push   ebx
c0019f1b:	e8 78 ff ff ff       	call   c0019e98 <ATA::detectCHS()>
c0019f20:	83 c4 10             	add    esp,0x10
c0019f23:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019f29:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f2f:	c1 e0 06             	shl    eax,0x6
c0019f32:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019f39:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019f43:	d1 e8                	shr    eax,1
c0019f45:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019f4b:	6a 04                	push   0x4
c0019f4d:	6a 0c                	push   0xc
c0019f4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f56:	50                   	push   eax
c0019f57:	52                   	push   edx
c0019f58:	e8 17 ec ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f5d:	90                   	nop
c0019f5e:	90                   	nop
c0019f5f:	6a 00                	push   0x0
c0019f61:	6a 0c                	push   0xc
c0019f63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f6a:	50                   	push   eax
c0019f6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f71:	e8 fe eb ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f76:	83 c4 14             	add    esp,0x14
c0019f79:	53                   	push   ebx
c0019f7a:	e8 4b 1d ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c0019f7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f82:	e8 3b 2e ff ff       	call   c000cdc2 <createPartitionsForDisk(PhysicalDisk*)>
c0019f87:	31 c0                	xor    eax,eax
c0019f89:	83 c4 18             	add    esp,0x18
c0019f8c:	5b                   	pop    ebx
c0019f8d:	c3                   	ret    

c0019f8e <ATAPI::write(unsigned long long, int, void*)>:
c0019f8e:	b8 03 00 00 00       	mov    eax,0x3
c0019f93:	c3                   	ret    

c0019f94 <ATAPI::close(int, int, void*)>:
c0019f94:	83 ec 0c             	sub    esp,0xc
c0019f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019fa1:	85 c0                	test   eax,eax
c0019fa3:	74 0c                	je     c0019fb1 <ATAPI::close(int, int, void*)+0x1d>
c0019fa5:	83 ec 0c             	sub    esp,0xc
c0019fa8:	8b 10                	mov    edx,DWORD PTR [eax]
c0019faa:	50                   	push   eax
c0019fab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019fae:	83 c4 10             	add    esp,0x10
c0019fb1:	31 c0                	xor    eax,eax
c0019fb3:	83 c4 0c             	add    esp,0xc
c0019fb6:	c3                   	ret    
c0019fb7:	90                   	nop

c0019fb8 <ATAPI::ATAPI()>:
c0019fb8:	83 ec 0c             	sub    esp,0xc
c0019fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fbf:	83 ec 04             	sub    esp,0x4
c0019fc2:	68 00 08 00 00       	push   0x800
c0019fc7:	68 29 ef 01 c0       	push   0xc001ef29
c0019fcc:	50                   	push   eax
c0019fcd:	e8 90 1c ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019fd2:	83 c4 10             	add    esp,0x10
c0019fd5:	ba 44 ee 01 c0       	mov    edx,0xc001ee44
c0019fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fde:	89 10                	mov    DWORD PTR [eax],edx
c0019fe0:	90                   	nop
c0019fe1:	83 c4 0c             	add    esp,0xc
c0019fe4:	c3                   	ret    
c0019fe5:	90                   	nop

c0019fe6 <ATAPI::readyForCommand()>:
c0019fe6:	56                   	push   esi
c0019fe7:	53                   	push   ebx
c0019fe8:	53                   	push   ebx
c0019fe9:	31 db                	xor    ebx,ebx
c0019feb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fef:	51                   	push   ecx
c0019ff0:	6a 0c                	push   0xc
c0019ff2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019ff9:	50                   	push   eax
c0019ffa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a000:	e8 2f ec ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c001a005:	83 c4 10             	add    esp,0x10
c001a008:	a8 88                	test   al,0x88
c001a00a:	74 25                	je     c001a031 <ATAPI::readyForCommand()+0x4b>
c001a00c:	43                   	inc    ebx
c001a00d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a013:	7e da                	jle    c0019fef <ATAPI::readyForCommand()+0x9>
c001a015:	83 ec 0c             	sub    esp,0xc
c001a018:	68 5e 01 00 00       	push   0x15e
c001a01d:	e8 26 96 ff ff       	call   c0013648 <milliTenthSleep(unsigned int)>
c001a022:	83 c4 10             	add    esp,0x10
c001a025:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a02b:	75 c2                	jne    c0019fef <ATAPI::readyForCommand()+0x9>
c001a02d:	31 c0                	xor    eax,eax
c001a02f:	eb 02                	jmp    c001a033 <ATAPI::readyForCommand()+0x4d>
c001a031:	b0 01                	mov    al,0x1
c001a033:	5a                   	pop    edx
c001a034:	5b                   	pop    ebx
c001a035:	5e                   	pop    esi
c001a036:	c3                   	ret    
c001a037:	90                   	nop

c001a038 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a038:	55                   	push   ebp
c001a039:	57                   	push   edi
c001a03a:	56                   	push   esi
c001a03b:	53                   	push   ebx
c001a03c:	83 ec 20             	sub    esp,0x20
c001a03f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a043:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a047:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a04b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a04f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a053:	6a 01                	push   0x1
c001a055:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a05c:	50                   	push   eax
c001a05d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a063:	e8 1a ed ff ff       	call   c0018d82 <IDE::enableIRQs(unsigned char, bool)>
c001a068:	5e                   	pop    esi
c001a069:	58                   	pop    eax
c001a06a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a071:	50                   	push   eax
c001a072:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a078:	e8 d1 ea ff ff       	call   c0018b4e <IDE::prepareInterrupt(unsigned char)>
c001a07d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a080:	e8 61 ff ff ff       	call   c0019fe6 <ATAPI::readyForCommand()>
c001a085:	83 c4 10             	add    esp,0x10
c001a088:	84 c0                	test   al,al
c001a08a:	75 0a                	jne    c001a096 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a08c:	bb 01 00 00 00       	mov    ebx,0x1
c001a091:	e9 57 02 00 00       	jmp    c001a2ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a096:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a09c:	c1 e0 04             	shl    eax,0x4
c001a09f:	0f b6 c0             	movzx  eax,al
c001a0a2:	50                   	push   eax
c001a0a3:	6a 06                	push   0x6
c001a0a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0ac:	50                   	push   eax
c001a0ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0b3:	e8 bc ea ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0b8:	6a 00                	push   0x0
c001a0ba:	6a 01                	push   0x1
c001a0bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0c3:	50                   	push   eax
c001a0c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0ca:	e8 a5 ea ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0cf:	83 c4 20             	add    esp,0x20
c001a0d2:	0f b6 c3             	movzx  eax,bl
c001a0d5:	0f b6 df             	movzx  ebx,bh
c001a0d8:	50                   	push   eax
c001a0d9:	6a 04                	push   0x4
c001a0db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0e2:	50                   	push   eax
c001a0e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0e9:	e8 86 ea ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ee:	53                   	push   ebx
c001a0ef:	6a 05                	push   0x5
c001a0f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0f8:	50                   	push   eax
c001a0f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0ff:	e8 70 ea ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a104:	83 c4 20             	add    esp,0x20
c001a107:	68 a0 00 00 00       	push   0xa0
c001a10c:	6a 07                	push   0x7
c001a10e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a115:	50                   	push   eax
c001a116:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a11c:	e8 53 ea ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a121:	83 c4 0c             	add    esp,0xc
c001a124:	6a 01                	push   0x1
c001a126:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a12d:	50                   	push   eax
c001a12e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a134:	e8 d9 f4 ff ff       	call   c0019612 <IDE::polling(unsigned char, unsigned int)>
c001a139:	83 c4 10             	add    esp,0x10
c001a13c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a142:	84 c0                	test   al,al
c001a144:	74 23                	je     c001a169 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a146:	0f b6 d8             	movzx  ebx,al
c001a149:	0f b6 d2             	movzx  edx,dl
c001a14c:	53                   	push   ebx
c001a14d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a154:	50                   	push   eax
c001a155:	52                   	push   edx
c001a156:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a15c:	e8 01 f4 ff ff       	call   c0019562 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a161:	83 c4 10             	add    esp,0x10
c001a164:	e9 84 01 00 00       	jmp    c001a2ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a169:	0f b6 d2             	movzx  edx,dl
c001a16c:	53                   	push   ebx
c001a16d:	53                   	push   ebx
c001a16e:	52                   	push   edx
c001a16f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a175:	e8 e8 e9 ff ff       	call   c0018b62 <IDE::getBase(unsigned char)>
c001a17a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a17e:	b9 06 00 00 00       	mov    ecx,0x6
c001a183:	89 c2                	mov    edx,eax
c001a185:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a188:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a18c:	83 c4 10             	add    esp,0x10
c001a18f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a195:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a19c:	85 db                	test   ebx,ebx
c001a19e:	0f 84 ec 00 00 00    	je     c001a290 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a1a4:	51                   	push   ecx
c001a1a5:	51                   	push   ecx
c001a1a6:	52                   	push   edx
c001a1a7:	50                   	push   eax
c001a1a8:	e8 35 eb ff ff       	call   c0018ce2 <IDE::waitInterrupt(unsigned char)>
c001a1ad:	83 c4 10             	add    esp,0x10
c001a1b0:	84 c0                	test   al,al
c001a1b2:	0f 84 d4 fe ff ff    	je     c001a08c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a1b8:	56                   	push   esi
c001a1b9:	56                   	push   esi
c001a1ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1c1:	50                   	push   eax
c001a1c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1c8:	e8 81 e9 ff ff       	call   c0018b4e <IDE::prepareInterrupt(unsigned char)>
c001a1cd:	83 c4 0c             	add    esp,0xc
c001a1d0:	6a 04                	push   0x4
c001a1d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1d9:	50                   	push   eax
c001a1da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1e0:	e8 4f ea ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c001a1e5:	83 c4 0c             	add    esp,0xc
c001a1e8:	89 c6                	mov    esi,eax
c001a1ea:	6a 05                	push   0x5
c001a1ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1f3:	50                   	push   eax
c001a1f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1fa:	e8 35 ea ff ff       	call   c0018c34 <IDE::read(unsigned char, unsigned char)>
c001a1ff:	89 f1                	mov    ecx,esi
c001a201:	0f b6 c0             	movzx  eax,al
c001a204:	0f b6 f1             	movzx  esi,cl
c001a207:	c1 e0 08             	shl    eax,0x8
c001a20a:	09 c6                	or     esi,eax
c001a20c:	d1 fe                	sar    esi,1
c001a20e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a212:	83 c4 10             	add    esp,0x10
c001a215:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a21a:	74 41                	je     c001a25d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a21c:	31 c9                	xor    ecx,ecx
c001a21e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a224:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a22b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a22f:	75 0a                	jne    c001a23b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a231:	01 c9                	add    ecx,ecx
c001a233:	01 cd                	add    ebp,ecx
c001a235:	4b                   	dec    ebx
c001a236:	e9 54 ff ff ff       	jmp    c001a18f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a23b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a240:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a244:	51                   	push   ecx
c001a245:	51                   	push   ecx
c001a246:	52                   	push   edx
c001a247:	50                   	push   eax
c001a248:	e8 15 e9 ff ff       	call   c0018b62 <IDE::getBase(unsigned char)>
c001a24d:	89 c2                	mov    edx,eax
c001a24f:	89 f0                	mov    eax,esi
c001a251:	66 ef                	out    dx,ax
c001a253:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a257:	83 c4 10             	add    esp,0x10
c001a25a:	41                   	inc    ecx
c001a25b:	eb c1                	jmp    c001a21e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a25d:	31 f6                	xor    esi,esi
c001a25f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a265:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a26c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a270:	75 06                	jne    c001a278 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a272:	01 f6                	add    esi,esi
c001a274:	01 f5                	add    ebp,esi
c001a276:	eb bd                	jmp    c001a235 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a278:	51                   	push   ecx
c001a279:	51                   	push   ecx
c001a27a:	52                   	push   edx
c001a27b:	50                   	push   eax
c001a27c:	e8 e1 e8 ff ff       	call   c0018b62 <IDE::getBase(unsigned char)>
c001a281:	89 c2                	mov    edx,eax
c001a283:	66 ed                	in     ax,dx
c001a285:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a28a:	83 c4 10             	add    esp,0x10
c001a28d:	46                   	inc    esi
c001a28e:	eb cf                	jmp    c001a25f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a290:	51                   	push   ecx
c001a291:	51                   	push   ecx
c001a292:	52                   	push   edx
c001a293:	50                   	push   eax
c001a294:	e8 49 ea ff ff       	call   c0018ce2 <IDE::waitInterrupt(unsigned char)>
c001a299:	83 c4 10             	add    esp,0x10
c001a29c:	84 c0                	test   al,al
c001a29e:	0f 84 e8 fd ff ff    	je     c001a08c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a2a4:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a2a9:	52                   	push   edx
c001a2aa:	52                   	push   edx
c001a2ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a2b2:	50                   	push   eax
c001a2b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a2b9:	e8 90 e8 ff ff       	call   c0018b4e <IDE::prepareInterrupt(unsigned char)>
c001a2be:	83 c4 10             	add    esp,0x10
c001a2c1:	50                   	push   eax
c001a2c2:	50                   	push   eax
c001a2c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a2ca:	50                   	push   eax
c001a2cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a2d1:	e8 8c e8 ff ff       	call   c0018b62 <IDE::getBase(unsigned char)>
c001a2d6:	8d 50 07             	lea    edx,[eax+0x7]
c001a2d9:	ec                   	in     al,dx
c001a2da:	83 c4 10             	add    esp,0x10
c001a2dd:	a8 88                	test   al,0x88
c001a2df:	74 0a                	je     c001a2eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a2e1:	4b                   	dec    ebx
c001a2e2:	75 dd                	jne    c001a2c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a2e4:	bb 02 00 00 00       	mov    ebx,0x2
c001a2e9:	eb 02                	jmp    c001a2ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a2eb:	31 db                	xor    ebx,ebx
c001a2ed:	83 c4 1c             	add    esp,0x1c
c001a2f0:	89 d8                	mov    eax,ebx
c001a2f2:	5b                   	pop    ebx
c001a2f3:	5e                   	pop    esi
c001a2f4:	5f                   	pop    edi
c001a2f5:	5d                   	pop    ebp
c001a2f6:	c3                   	ret    
c001a2f7:	90                   	nop

c001a2f8 <ATAPI::diskRemoved()>:
c001a2f8:	53                   	push   ebx
c001a2f9:	83 ec 14             	sub    esp,0x14
c001a2fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a300:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a307:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a30d:	e8 30 28 ff ff       	call   c000cb42 <LogicalDisk::unmount()>
c001a312:	58                   	pop    eax
c001a313:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a319:	e8 6a 31 ff ff       	call   c000d488 <VCache::writeWriteBuffer()>
c001a31e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a324:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a328:	83 c4 18             	add    esp,0x18
c001a32b:	5b                   	pop    ebx
c001a32c:	e9 47 31 ff ff       	jmp    c000d478 <VCache::invalidateReadBuffer()>
c001a331:	90                   	nop

c001a332 <ATAPI::eject()>:
c001a332:	57                   	push   edi
c001a333:	b9 03 00 00 00       	mov    ecx,0x3
c001a338:	53                   	push   ebx
c001a339:	83 ec 14             	sub    esp,0x14
c001a33c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a340:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a344:	fc                   	cld    
c001a345:	31 c0                	xor    eax,eax
c001a347:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a349:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a34e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a353:	50                   	push   eax
c001a354:	50                   	push   eax
c001a355:	6a 00                	push   0x0
c001a357:	6a 00                	push   0x0
c001a359:	6a 00                	push   0x0
c001a35b:	6a 02                	push   0x2
c001a35d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a361:	50                   	push   eax
c001a362:	53                   	push   ebx
c001a363:	e8 d0 fc ff ff       	call   c001a038 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a368:	83 c4 14             	add    esp,0x14
c001a36b:	53                   	push   ebx
c001a36c:	e8 87 ff ff ff       	call   c001a2f8 <ATAPI::diskRemoved()>
c001a371:	83 c4 24             	add    esp,0x24
c001a374:	31 c0                	xor    eax,eax
c001a376:	5b                   	pop    ebx
c001a377:	5f                   	pop    edi
c001a378:	c3                   	ret    
c001a379:	90                   	nop

c001a37a <ATAPI::diskInserted()>:
c001a37a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a37e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a385:	c3                   	ret    

c001a386 <ATAPI::detectMedia()>:
c001a386:	56                   	push   esi
c001a387:	53                   	push   ebx
c001a388:	83 ec 28             	sub    esp,0x28
c001a38b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a38f:	6a 0c                	push   0xc
c001a391:	6a 00                	push   0x0
c001a393:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a397:	56                   	push   esi
c001a398:	e8 33 61 fe ff       	call   c00004d0 <memset>
c001a39d:	58                   	pop    eax
c001a39e:	5a                   	pop    edx
c001a39f:	6a 00                	push   0x0
c001a3a1:	6a 00                	push   0x0
c001a3a3:	6a 00                	push   0x0
c001a3a5:	6a 00                	push   0x0
c001a3a7:	56                   	push   esi
c001a3a8:	53                   	push   ebx
c001a3a9:	e8 8a fc ff ff       	call   c001a038 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a3ae:	83 c4 1c             	add    esp,0x1c
c001a3b1:	6a 0c                	push   0xc
c001a3b3:	6a 00                	push   0x0
c001a3b5:	56                   	push   esi
c001a3b6:	e8 15 61 fe ff       	call   c00004d0 <memset>
c001a3bb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a3c0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a3c5:	59                   	pop    ecx
c001a3c6:	58                   	pop    eax
c001a3c7:	6a 01                	push   0x1
c001a3c9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a3cd:	50                   	push   eax
c001a3ce:	6a 00                	push   0x0
c001a3d0:	6a 12                	push   0x12
c001a3d2:	56                   	push   esi
c001a3d3:	53                   	push   ebx
c001a3d4:	e8 5f fc ff ff       	call   c001a038 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a3d9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a3dd:	83 c4 20             	add    esp,0x20
c001a3e0:	83 e0 7f             	and    eax,0x7f
c001a3e3:	3c 70                	cmp    al,0x70
c001a3e5:	74 15                	je     c001a3fc <ATAPI::detectMedia()+0x76>
c001a3e7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3ee:	75 0c                	jne    c001a3fc <ATAPI::detectMedia()+0x76>
c001a3f0:	83 ec 0c             	sub    esp,0xc
c001a3f3:	53                   	push   ebx
c001a3f4:	e8 81 ff ff ff       	call   c001a37a <ATAPI::diskInserted()>
c001a3f9:	83 c4 10             	add    esp,0x10
c001a3fc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a400:	83 e0 0f             	and    eax,0xf
c001a403:	3c 02                	cmp    al,0x2
c001a405:	75 1b                	jne    c001a422 <ATAPI::detectMedia()+0x9c>
c001a407:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a40c:	75 2d                	jne    c001a43b <ATAPI::detectMedia()+0xb5>
c001a40e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a415:	74 24                	je     c001a43b <ATAPI::detectMedia()+0xb5>
c001a417:	83 ec 0c             	sub    esp,0xc
c001a41a:	53                   	push   ebx
c001a41b:	e8 d8 fe ff ff       	call   c001a2f8 <ATAPI::diskRemoved()>
c001a420:	eb 16                	jmp    c001a438 <ATAPI::detectMedia()+0xb2>
c001a422:	84 c0                	test   al,al
c001a424:	75 15                	jne    c001a43b <ATAPI::detectMedia()+0xb5>
c001a426:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a42d:	75 0c                	jne    c001a43b <ATAPI::detectMedia()+0xb5>
c001a42f:	83 ec 0c             	sub    esp,0xc
c001a432:	53                   	push   ebx
c001a433:	e8 42 ff ff ff       	call   c001a37a <ATAPI::diskInserted()>
c001a438:	83 c4 10             	add    esp,0x10
c001a43b:	83 c4 24             	add    esp,0x24
c001a43e:	5b                   	pop    ebx
c001a43f:	5e                   	pop    esi
c001a440:	c3                   	ret    
c001a441:	90                   	nop

c001a442 <ATAPI::open(int, int, void*)>:
c001a442:	56                   	push   esi
c001a443:	53                   	push   ebx
c001a444:	50                   	push   eax
c001a445:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a449:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a44d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a451:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a457:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a45d:	c1 e0 06             	shl    eax,0x6
c001a460:	01 d0                	add    eax,edx
c001a462:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a469:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a46f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a476:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a480:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a486:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a48d:	6a 04                	push   0x4
c001a48f:	6a 0c                	push   0xc
c001a491:	51                   	push   ecx
c001a492:	52                   	push   edx
c001a493:	e8 dc e6 ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a498:	90                   	nop
c001a499:	90                   	nop
c001a49a:	6a 00                	push   0x0
c001a49c:	6a 0c                	push   0xc
c001a49e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4a5:	50                   	push   eax
c001a4a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4ac:	e8 c3 e6 ff ff       	call   c0018b74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4b1:	83 c4 14             	add    esp,0x14
c001a4b4:	68 74 01 00 00       	push   0x174
c001a4b9:	e8 fb d2 fe ff       	call   c00077b9 <malloc>
c001a4be:	83 c4 0c             	add    esp,0xc
c001a4c1:	89 c6                	mov    esi,eax
c001a4c3:	6a 00                	push   0x0
c001a4c5:	68 ff ff ff 7f       	push   0x7fffffff
c001a4ca:	6a 00                	push   0x0
c001a4cc:	6a 00                	push   0x0
c001a4ce:	53                   	push   ebx
c001a4cf:	68 e0 ef 01 c0       	push   0xc001efe0
c001a4d4:	50                   	push   eax
c001a4d5:	e8 b4 24 ff ff       	call   c000c98e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a4da:	83 c4 14             	add    esp,0x14
c001a4dd:	56                   	push   esi
c001a4de:	e8 61 25 ff ff       	call   c000ca44 <LogicalDisk::assignDriveLetter()>
c001a4e3:	5a                   	pop    edx
c001a4e4:	0f be c0             	movsx  eax,al
c001a4e7:	59                   	pop    ecx
c001a4e8:	50                   	push   eax
c001a4e9:	68 2c ee 01 c0       	push   0xc001ee2c
c001a4ee:	e8 61 ff fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001a4f3:	58                   	pop    eax
c001a4f4:	5a                   	pop    edx
c001a4f5:	56                   	push   esi
c001a4f6:	53                   	push   ebx
c001a4f7:	e8 98 13 ff ff       	call   c000b894 <Device::addChild(Device*)>
c001a4fc:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a502:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a505:	e8 c0 17 ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c001a50a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a511:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a514:	e8 6d fe ff ff       	call   c001a386 <ATAPI::detectMedia()>
c001a519:	83 c4 14             	add    esp,0x14
c001a51c:	31 c0                	xor    eax,eax
c001a51e:	5b                   	pop    ebx
c001a51f:	5e                   	pop    esi
c001a520:	c3                   	ret    
c001a521:	90                   	nop

c001a522 <ATAPI::read(unsigned long long, int, void*)>:
c001a522:	55                   	push   ebp
c001a523:	57                   	push   edi
c001a524:	56                   	push   esi
c001a525:	53                   	push   ebx
c001a526:	83 ec 1c             	sub    esp,0x1c
c001a529:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a52d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a531:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a535:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a53c:	74 3c                	je     c001a57a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a53e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a542:	b9 03 00 00 00       	mov    ecx,0x3
c001a547:	fc                   	cld    
c001a548:	31 c0                	xor    eax,eax
c001a54a:	0f ce                	bswap  esi
c001a54c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a54e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a553:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a557:	89 e8                	mov    eax,ebp
c001a559:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a55d:	50                   	push   eax
c001a55e:	50                   	push   eax
c001a55f:	55                   	push   ebp
c001a560:	c1 e5 0b             	shl    ebp,0xb
c001a563:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a567:	6a 00                	push   0x0
c001a569:	55                   	push   ebp
c001a56a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a56e:	50                   	push   eax
c001a56f:	53                   	push   ebx
c001a570:	e8 c3 fa ff ff       	call   c001a038 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a575:	83 c4 20             	add    esp,0x20
c001a578:	eb 1a                	jmp    c001a594 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a57a:	83 ec 0c             	sub    esp,0xc
c001a57d:	53                   	push   ebx
c001a57e:	e8 03 fe ff ff       	call   c001a386 <ATAPI::detectMedia()>
c001a583:	83 c4 10             	add    esp,0x10
c001a586:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a58d:	75 af                	jne    c001a53e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a58f:	b8 02 00 00 00       	mov    eax,0x2
c001a594:	83 c4 1c             	add    esp,0x1c
c001a597:	5b                   	pop    ebx
c001a598:	5e                   	pop    esi
c001a599:	5f                   	pop    edi
c001a59a:	5d                   	pop    ebp
c001a59b:	c3                   	ret    

c001a59c <SATA::close(int, int, void*)>:
c001a59c:	83 ec 0c             	sub    esp,0xc
c001a59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5a3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a5a9:	85 c0                	test   eax,eax
c001a5ab:	74 0c                	je     c001a5b9 <SATA::close(int, int, void*)+0x1d>
c001a5ad:	83 ec 0c             	sub    esp,0xc
c001a5b0:	8b 10                	mov    edx,DWORD PTR [eax]
c001a5b2:	50                   	push   eax
c001a5b3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a5b6:	83 c4 10             	add    esp,0x10
c001a5b9:	31 c0                	xor    eax,eax
c001a5bb:	83 c4 0c             	add    esp,0xc
c001a5be:	c3                   	ret    
c001a5bf:	90                   	nop

c001a5c0 <SATA::powerSaving(PowerSavingLevel)>:
c001a5c0:	c3                   	ret    
c001a5c1:	90                   	nop

c001a5c2 <SATA::open(int, int, void*)>:
c001a5c2:	56                   	push   esi
c001a5c3:	53                   	push   ebx
c001a5c4:	50                   	push   eax
c001a5c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a5c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a5cd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a5d7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a5dd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a5e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5eb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a5f5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a5fb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a602:	e8 8e d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a607:	89 c6                	mov    esi,eax
c001a609:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a60f:	81 c6 00 10 00 00    	add    esi,0x1000
c001a615:	e8 7b d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a61a:	39 c6                	cmp    esi,eax
c001a61c:	74 10                	je     c001a62e <SATA::open(int, int, void*)+0x6c>
c001a61e:	83 ec 0c             	sub    esp,0xc
c001a621:	68 74 ee 01 c0       	push   0xc001ee74
c001a626:	e8 0c 5b ff ff       	call   c0010137 <KePanic(char const*)>
c001a62b:	83 c4 10             	add    esp,0x10
c001a62e:	83 ec 0c             	sub    esp,0xc
c001a631:	6a 02                	push   0x2
c001a633:	e8 c9 eb fe ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c001a638:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a63e:	6a 03                	push   0x3
c001a640:	50                   	push   eax
c001a641:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a647:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c001a64d:	e8 44 f2 fe ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a652:	83 c4 14             	add    esp,0x14
c001a655:	53                   	push   ebx
c001a656:	e8 6f 16 ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c001a65b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a65e:	e8 5f 27 ff ff       	call   c000cdc2 <createPartitionsForDisk(PhysicalDisk*)>
c001a663:	83 c4 14             	add    esp,0x14
c001a666:	31 c0                	xor    eax,eax
c001a668:	5b                   	pop    ebx
c001a669:	5e                   	pop    esi
c001a66a:	c3                   	ret    
c001a66b:	90                   	nop

c001a66c <SATA::SATA()>:
c001a66c:	83 ec 0c             	sub    esp,0xc
c001a66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a673:	83 ec 04             	sub    esp,0x4
c001a676:	68 00 02 00 00       	push   0x200
c001a67b:	68 88 ee 01 c0       	push   0xc001ee88
c001a680:	50                   	push   eax
c001a681:	e8 dc 15 ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a686:	83 c4 10             	add    esp,0x10
c001a689:	ba f8 ee 01 c0       	mov    edx,0xc001eef8
c001a68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a692:	89 10                	mov    DWORD PTR [eax],edx
c001a694:	90                   	nop
c001a695:	83 c4 0c             	add    esp,0xc
c001a698:	c3                   	ret    
c001a699:	90                   	nop

c001a69a <SATA::access(unsigned long long, int, void*, bool)>:
c001a69a:	55                   	push   ebp
c001a69b:	57                   	push   edi
c001a69c:	56                   	push   esi
c001a69d:	53                   	push   ebx
c001a69e:	83 ec 2c             	sub    esp,0x2c
c001a6a1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a6a5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a6a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6ad:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a6b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a6b5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a6ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6be:	7e 10                	jle    c001a6d0 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a6c0:	83 ec 0c             	sub    esp,0xc
c001a6c3:	68 98 ee 01 c0       	push   0xc001ee98
c001a6c8:	e8 6a 5a ff ff       	call   c0010137 <KePanic(char const*)>
c001a6cd:	83 c4 10             	add    esp,0x10
c001a6d0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a6d6:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a6dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a6e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6e6:	89 d0                	mov    eax,edx
c001a6e8:	c1 e0 07             	shl    eax,0x7
c001a6eb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a6ef:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a6f9:	51                   	push   ecx
c001a6fa:	8d 42 02             	lea    eax,[edx+0x2]
c001a6fd:	51                   	push   ecx
c001a6fe:	c1 e0 07             	shl    eax,0x7
c001a701:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a705:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a709:	50                   	push   eax
c001a70a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a710:	e8 e7 ef ff ff       	call   c00196fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a715:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a719:	83 c4 10             	add    esp,0x10
c001a71c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a721:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a725:	0f 84 4f 01 00 00    	je     c001a87a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a72b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a72f:	c1 e0 09             	shl    eax,0x9
c001a732:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a737:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a73b:	74 0e                	je     c001a74b <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a73d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a743:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a747:	89 c1                	mov    ecx,eax
c001a749:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a74b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a74f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a755:	8d 42 02             	lea    eax,[edx+0x2]
c001a758:	c1 e0 07             	shl    eax,0x7
c001a75b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a75f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a761:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a767:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a76d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a771:	c1 e1 05             	shl    ecx,0x5
c001a774:	01 c8                	add    eax,ecx
c001a776:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a77a:	83 e1 01             	and    ecx,0x1
c001a77d:	89 ce                	mov    esi,ecx
c001a77f:	8a 08                	mov    cl,BYTE PTR [eax]
c001a781:	c1 e6 06             	shl    esi,0x6
c001a784:	83 e1 bf             	and    ecx,0xffffffbf
c001a787:	09 f1                	or     ecx,esi
c001a789:	88 08                	mov    BYTE PTR [eax],cl
c001a78b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a78d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a793:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a799:	89 08                	mov    DWORD PTR [eax],ecx
c001a79b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a7a1:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a7a7:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a7ad:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a7b0:	50                   	push   eax
c001a7b1:	68 90 00 00 00       	push   0x90
c001a7b6:	6a 00                	push   0x0
c001a7b8:	56                   	push   esi
c001a7b9:	e8 12 5d fe ff       	call   c00004d0 <memset>
c001a7be:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a7c4:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a7c8:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a7ce:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a7d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a7d6:	83 c4 10             	add    esp,0x10
c001a7d9:	48                   	dec    eax
c001a7da:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a7df:	89 c1                	mov    ecx,eax
c001a7e1:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a7e7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a7ec:	09 c8                	or     eax,ecx
c001a7ee:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a7f4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a7f7:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a7fe:	66 25 00 7f          	and    ax,0x7f00
c001a802:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a806:	66 0d 27 80          	or     ax,0x8027
c001a80a:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a80f:	66 89 06             	mov    WORD PTR [esi],ax
c001a812:	19 c0                	sbb    eax,eax
c001a814:	83 e0 f0             	and    eax,0xfffffff0
c001a817:	83 c0 35             	add    eax,0x35
c001a81a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a81d:	89 e8                	mov    eax,ebp
c001a81f:	c1 e8 10             	shr    eax,0x10
c001a822:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a825:	89 e8                	mov    eax,ebp
c001a827:	c1 e8 18             	shr    eax,0x18
c001a82a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a82d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a831:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a834:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a838:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a83b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a83f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a843:	89 d6                	mov    esi,edx
c001a845:	31 c0                	xor    eax,eax
c001a847:	c1 e6 07             	shl    esi,0x7
c001a84a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a84e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a854:	80 e1 88             	and    cl,0x88
c001a857:	74 0a                	je     c001a863 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a859:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a85e:	74 0a                	je     c001a86a <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a860:	40                   	inc    eax
c001a861:	eb eb                	jmp    c001a84e <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a863:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a868:	75 17                	jne    c001a881 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a86a:	83 ec 0c             	sub    esp,0xc
c001a86d:	68 d1 ee 01 c0       	push   0xc001eed1
c001a872:	e8 dd fb fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001a877:	83 c4 10             	add    esp,0x10
c001a87a:	b8 01 00 00 00       	mov    eax,0x1
c001a87f:	eb 5d                	jmp    c001a8de <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a881:	b8 01 00 00 00       	mov    eax,0x1
c001a886:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a88a:	c1 e2 07             	shl    edx,0x7
c001a88d:	d3 e0                	shl    eax,cl
c001a88f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a893:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a899:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a89f:	85 c8                	test   eax,ecx
c001a8a1:	74 16                	je     c001a8b9 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a8a3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a8a9:	0f ba e1 1e          	bt     ecx,0x1e
c001a8ad:	73 ea                	jae    c001a899 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a8af:	83 ec 0c             	sub    esp,0xc
c001a8b2:	68 df ee 01 c0       	push   0xc001eedf
c001a8b7:	eb b9                	jmp    c001a872 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a8b9:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a8bf:	0f ba e0 1e          	bt     eax,0x1e
c001a8c3:	72 b5                	jb     c001a87a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a8c5:	31 c0                	xor    eax,eax
c001a8c7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a8cc:	75 10                	jne    c001a8de <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a8ce:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a8d4:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a8d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8de:	83 c4 2c             	add    esp,0x2c
c001a8e1:	5b                   	pop    ebx
c001a8e2:	5e                   	pop    esi
c001a8e3:	5f                   	pop    edi
c001a8e4:	5d                   	pop    ebp
c001a8e5:	c3                   	ret    

c001a8e6 <SATA::read(unsigned long long, int, void*)>:
c001a8e6:	57                   	push   edi
c001a8e7:	b8 04 00 00 00       	mov    eax,0x4
c001a8ec:	56                   	push   esi
c001a8ed:	53                   	push   ebx
c001a8ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8f6:	8d 7a ff             	lea    edi,[edx-0x1]
c001a8f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a8fd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a901:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a907:	77 25                	ja     c001a92e <SATA::read(unsigned long long, int, void*)+0x48>
c001a909:	b8 06 00 00 00       	mov    eax,0x6
c001a90e:	85 f6                	test   esi,esi
c001a910:	74 1c                	je     c001a92e <SATA::read(unsigned long long, int, void*)+0x48>
c001a912:	50                   	push   eax
c001a913:	50                   	push   eax
c001a914:	6a 00                	push   0x0
c001a916:	56                   	push   esi
c001a917:	52                   	push   edx
c001a918:	53                   	push   ebx
c001a919:	51                   	push   ecx
c001a91a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a91e:	e8 77 fd ff ff       	call   c001a69a <SATA::access(unsigned long long, int, void*, bool)>
c001a923:	83 c4 20             	add    esp,0x20
c001a926:	85 c0                	test   eax,eax
c001a928:	0f 95 c0             	setne  al
c001a92b:	0f b6 c0             	movzx  eax,al
c001a92e:	5b                   	pop    ebx
c001a92f:	5e                   	pop    esi
c001a930:	5f                   	pop    edi
c001a931:	c3                   	ret    

c001a932 <SATA::write(unsigned long long, int, void*)>:
c001a932:	55                   	push   ebp
c001a933:	b8 04 00 00 00       	mov    eax,0x4
c001a938:	57                   	push   edi
c001a939:	56                   	push   esi
c001a93a:	53                   	push   ebx
c001a93b:	83 ec 0c             	sub    esp,0xc
c001a93e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a942:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a946:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a949:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a94d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a951:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a957:	77 3d                	ja     c001a996 <SATA::write(unsigned long long, int, void*)+0x64>
c001a959:	b8 06 00 00 00       	mov    eax,0x6
c001a95e:	85 ed                	test   ebp,ebp
c001a960:	74 34                	je     c001a996 <SATA::write(unsigned long long, int, void*)+0x64>
c001a962:	c1 e3 09             	shl    ebx,0x9
c001a965:	01 eb                	add    ebx,ebp
c001a967:	89 d6                	mov    esi,edx
c001a969:	89 cf                	mov    edi,ecx
c001a96b:	83 c6 01             	add    esi,0x1
c001a96e:	83 d7 00             	adc    edi,0x0
c001a971:	50                   	push   eax
c001a972:	50                   	push   eax
c001a973:	6a 01                	push   0x1
c001a975:	55                   	push   ebp
c001a976:	81 c5 00 02 00 00    	add    ebp,0x200
c001a97c:	6a 01                	push   0x1
c001a97e:	51                   	push   ecx
c001a97f:	52                   	push   edx
c001a980:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a984:	e8 11 fd ff ff       	call   c001a69a <SATA::access(unsigned long long, int, void*, bool)>
c001a989:	83 c4 20             	add    esp,0x20
c001a98c:	89 f2                	mov    edx,esi
c001a98e:	89 f9                	mov    ecx,edi
c001a990:	39 dd                	cmp    ebp,ebx
c001a992:	75 d3                	jne    c001a967 <SATA::write(unsigned long long, int, void*)+0x35>
c001a994:	31 c0                	xor    eax,eax
c001a996:	83 c4 0c             	add    esp,0xc
c001a999:	5b                   	pop    ebx
c001a99a:	5e                   	pop    esi
c001a99b:	5f                   	pop    edi
c001a99c:	5d                   	pop    ebp
c001a99d:	c3                   	ret    

c001a99e <SATAPI::write(unsigned long long, int, void*)>:
c001a99e:	b8 03 00 00 00       	mov    eax,0x3
c001a9a3:	c3                   	ret    

c001a9a4 <SATAPI::close(int, int, void*)>:
c001a9a4:	83 ec 0c             	sub    esp,0xc
c001a9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a9b1:	85 c0                	test   eax,eax
c001a9b3:	74 0c                	je     c001a9c1 <SATAPI::close(int, int, void*)+0x1d>
c001a9b5:	83 ec 0c             	sub    esp,0xc
c001a9b8:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9ba:	50                   	push   eax
c001a9bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a9be:	83 c4 10             	add    esp,0x10
c001a9c1:	31 c0                	xor    eax,eax
c001a9c3:	83 c4 0c             	add    esp,0xc
c001a9c6:	c3                   	ret    
c001a9c7:	90                   	nop

c001a9c8 <SATAPI::SATAPI()>:
c001a9c8:	83 ec 0c             	sub    esp,0xc
c001a9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9cf:	83 ec 04             	sub    esp,0x4
c001a9d2:	68 00 08 00 00       	push   0x800
c001a9d7:	68 28 ef 01 c0       	push   0xc001ef28
c001a9dc:	50                   	push   eax
c001a9dd:	e8 80 12 ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a9e2:	83 c4 10             	add    esp,0x10
c001a9e5:	ba 30 f0 01 c0       	mov    edx,0xc001f030
c001a9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ee:	89 10                	mov    DWORD PTR [eax],edx
c001a9f0:	90                   	nop
c001a9f1:	83 c4 0c             	add    esp,0xc
c001a9f4:	c3                   	ret    
c001a9f5:	90                   	nop

c001a9f6 <SATAPI::diskRemoved()>:
c001a9f6:	c3                   	ret    
c001a9f7:	90                   	nop

c001a9f8 <SATAPI::diskInserted()>:
c001a9f8:	83 ec 18             	sub    esp,0x18
c001a9fb:	68 34 ef 01 c0       	push   0xc001ef34
c001aa00:	e8 4f fa fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001aa05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa09:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aa10:	83 c4 1c             	add    esp,0x1c
c001aa13:	c3                   	ret    

c001aa14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aa14:	55                   	push   ebp
c001aa15:	57                   	push   edi
c001aa16:	56                   	push   esi
c001aa17:	53                   	push   ebx
c001aa18:	83 ec 38             	sub    esp,0x38
c001aa1b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aa1f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aa23:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001aa27:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa2b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aa2f:	68 4c ef 01 c0       	push   0xc001ef4c
c001aa34:	e8 1b fa fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001aa39:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aa3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aa45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa49:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aa4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa53:	83 c0 02             	add    eax,0x2
c001aa56:	c1 e0 07             	shl    eax,0x7
c001aa59:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aa5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa65:	c1 e0 07             	shl    eax,0x7
c001aa68:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aa6c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa70:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aa7a:	58                   	pop    eax
c001aa7b:	5a                   	pop    edx
c001aa7c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aa80:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aa86:	e8 71 ec ff ff       	call   c00196fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aa8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa8f:	83 c4 10             	add    esp,0x10
c001aa92:	b8 01 00 00 00       	mov    eax,0x1
c001aa97:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aa9c:	0f 84 49 02 00 00    	je     c001aceb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aaa2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aaa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaac:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaae:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aab4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aaba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aabe:	c1 e1 05             	shl    ecx,0x5
c001aac1:	01 c8                	add    eax,ecx
c001aac3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aac5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001aacb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001aad1:	89 08                	mov    DWORD PTR [eax],ecx
c001aad3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aad9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001aadf:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001aae5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001aae8:	8d 7b 40             	lea    edi,[ebx+0x40]
c001aaeb:	50                   	push   eax
c001aaec:	68 90 00 00 00       	push   0x90
c001aaf1:	6a 00                	push   0x0
c001aaf3:	53                   	push   ebx
c001aaf4:	e8 d7 59 fe ff       	call   c00004d0 <memset>
c001aaf9:	b9 0c 00 00 00       	mov    ecx,0xc
c001aafe:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ab02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab04:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ab0a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ab0e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ab14:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ab18:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ab1c:	48                   	dec    eax
c001ab1d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ab22:	89 c1                	mov    ecx,eax
c001ab24:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ab2a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ab2f:	09 c8                	or     eax,ecx
c001ab31:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ab37:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001ab3a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001ab41:	66 25 00 7f          	and    ax,0x7f00
c001ab45:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab49:	66 0d 27 80          	or     ax,0x8027
c001ab4d:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001ab51:	66 89 03             	mov    WORD PTR [ebx],ax
c001ab54:	89 d0                	mov    eax,edx
c001ab56:	c1 ea 18             	shr    edx,0x18
c001ab59:	c1 e8 10             	shr    eax,0x10
c001ab5c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001ab5f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ab62:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ab66:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001ab69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab6d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001ab70:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001ab7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab7f:	31 c0                	xor    eax,eax
c001ab81:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001ab87:	80 e1 88             	and    cl,0x88
c001ab8a:	74 0a                	je     c001ab96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001ab8c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab91:	74 0a                	je     c001ab9d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001ab93:	40                   	inc    eax
c001ab94:	eb eb                	jmp    c001ab81 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001ab96:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab9b:	75 43                	jne    c001abe0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001ab9d:	83 ec 0c             	sub    esp,0xc
c001aba0:	68 66 ef 01 c0       	push   0xc001ef66
c001aba5:	e8 aa f8 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001abaa:	58                   	pop    eax
c001abab:	5a                   	pop    edx
c001abac:	68 7b ef 01 c0       	push   0xc001ef7b
c001abb1:	ff 35 e4 04 02 c0    	push   DWORD PTR ds:0xc00204e4
c001abb7:	e8 7a db fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001abbc:	59                   	pop    ecx
c001abbd:	5b                   	pop    ebx
c001abbe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001abc2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001abc8:	e8 c9 eb ff ff       	call   c0019796 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001abcd:	5e                   	pop    esi
c001abce:	5f                   	pop    edi
c001abcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001abd3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001abd9:	e8 98 eb ff ff       	call   c0019776 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001abde:	eb 48                	jmp    c001ac28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001abe0:	be 01 00 00 00       	mov    esi,0x1
c001abe5:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001abe9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001abed:	d3 e6                	shl    esi,cl
c001abef:	c1 e7 07             	shl    edi,0x7
c001abf2:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001abf8:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001abfd:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ac01:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ac07:	85 c6                	test   esi,eax
c001ac09:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ac0f:	0f 84 a3 00 00 00    	je     c001acb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001ac15:	0f ba e0 1e          	bt     eax,0x1e
c001ac19:	73 1a                	jae    c001ac35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001ac1b:	83 ec 0c             	sub    esp,0xc
c001ac1e:	68 8d ef 01 c0       	push   0xc001ef8d
c001ac23:	e8 2c f8 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001ac28:	83 c4 10             	add    esp,0x10
c001ac2b:	b8 01 00 00 00       	mov    eax,0x1
c001ac30:	e9 b6 00 00 00       	jmp    c001aceb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001ac35:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ac3b:	83 f8 0d             	cmp    eax,0xd
c001ac3e:	77 0a                	ja     c001ac4a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001ac40:	83 ec 0c             	sub    esp,0xc
c001ac43:	68 c8 00 00 00       	push   0xc8
c001ac48:	eb 28                	jmp    c001ac72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001ac4a:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ac50:	83 f8 0d             	cmp    eax,0xd
c001ac53:	77 0a                	ja     c001ac5f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001ac55:	83 ec 0c             	sub    esp,0xc
c001ac58:	68 58 02 00 00       	push   0x258
c001ac5d:	eb 13                	jmp    c001ac72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001ac5f:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001ac65:	83 f8 06             	cmp    eax,0x6
c001ac68:	77 10                	ja     c001ac7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001ac6a:	83 ec 0c             	sub    esp,0xc
c001ac6d:	68 dc 05 00 00       	push   0x5dc
c001ac72:	e8 d1 89 ff ff       	call   c0013648 <milliTenthSleep(unsigned int)>
c001ac77:	83 c4 10             	add    esp,0x10
c001ac7a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ac7e:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ac81:	75 06                	jne    c001ac89 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001ac83:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ac87:	74 15                	je     c001ac9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001ac89:	83 fb 06             	cmp    ebx,0x6
c001ac8c:	77 10                	ja     c001ac9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001ac8e:	83 ec 0c             	sub    esp,0xc
c001ac91:	68 c4 09 00 00       	push   0x9c4
c001ac96:	e8 ad 89 ff ff       	call   c0013648 <milliTenthSleep(unsigned int)>
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	43                   	inc    ebx
c001ac9f:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001aca5:	0f 85 56 ff ff ff    	jne    c001ac01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001acab:	83 ec 0c             	sub    esp,0xc
c001acae:	68 a0 ef 01 c0       	push   0xc001efa0
c001acb3:	e9 6b ff ff ff       	jmp    c001ac23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001acb8:	0f ba e0 1e          	bt     eax,0x1e
c001acbc:	73 0d                	jae    c001accb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001acbe:	83 ec 0c             	sub    esp,0xc
c001acc1:	68 b4 ef 01 c0       	push   0xc001efb4
c001acc6:	e9 58 ff ff ff       	jmp    c001ac23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001accb:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001acd0:	74 17                	je     c001ace9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001acd2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001acd7:	74 10                	je     c001ace9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001acd9:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001acdf:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ace3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ace7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ace9:	31 c0                	xor    eax,eax
c001aceb:	83 c4 2c             	add    esp,0x2c
c001acee:	5b                   	pop    ebx
c001acef:	5e                   	pop    esi
c001acf0:	5f                   	pop    edi
c001acf1:	5d                   	pop    ebp
c001acf2:	c3                   	ret    
c001acf3:	90                   	nop

c001acf4 <SATAPI::eject()>:
c001acf4:	57                   	push   edi
c001acf5:	b9 03 00 00 00       	mov    ecx,0x3
c001acfa:	83 ec 18             	sub    esp,0x18
c001acfd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ad01:	fc                   	cld    
c001ad02:	31 c0                	xor    eax,eax
c001ad04:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ad06:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ad0b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ad10:	50                   	push   eax
c001ad11:	6a 00                	push   0x0
c001ad13:	6a 00                	push   0x0
c001ad15:	6a 00                	push   0x0
c001ad17:	6a 00                	push   0x0
c001ad19:	6a 02                	push   0x2
c001ad1b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad1f:	50                   	push   eax
c001ad20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad24:	e8 eb fc ff ff       	call   c001aa14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ad29:	31 c0                	xor    eax,eax
c001ad2b:	83 c4 38             	add    esp,0x38
c001ad2e:	5f                   	pop    edi
c001ad2f:	c3                   	ret    

c001ad30 <SATAPI::detectMedia()>:
c001ad30:	53                   	push   ebx
c001ad31:	83 ec 14             	sub    esp,0x14
c001ad34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ad38:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ad3e:	e8 45 27 ff ff       	call   c000d488 <VCache::writeWriteBuffer()>
c001ad43:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ad49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad4d:	83 c4 18             	add    esp,0x18
c001ad50:	5b                   	pop    ebx
c001ad51:	e9 22 27 ff ff       	jmp    c000d478 <VCache::invalidateReadBuffer()>

c001ad56 <SATAPI::open(int, int, void*)>:
c001ad56:	56                   	push   esi
c001ad57:	53                   	push   ebx
c001ad58:	51                   	push   ecx
c001ad59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad61:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ad6b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ad71:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ad7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad7f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ad89:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ad8f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ad96:	e8 fa cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ad9b:	89 c6                	mov    esi,eax
c001ad9d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ada3:	81 c6 00 10 00 00    	add    esi,0x1000
c001ada9:	e8 e7 cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001adae:	39 c6                	cmp    esi,eax
c001adb0:	74 10                	je     c001adc2 <SATAPI::open(int, int, void*)+0x6c>
c001adb2:	83 ec 0c             	sub    esp,0xc
c001adb5:	68 c9 ef 01 c0       	push   0xc001efc9
c001adba:	e8 78 53 ff ff       	call   c0010137 <KePanic(char const*)>
c001adbf:	83 c4 10             	add    esp,0x10
c001adc2:	83 ec 0c             	sub    esp,0xc
c001adc5:	6a 02                	push   0x2
c001adc7:	e8 35 e4 fe ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c001adcc:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001add2:	6a 03                	push   0x3
c001add4:	50                   	push   eax
c001add5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001addb:	ff 35 90 05 02 c0    	push   DWORD PTR ds:0xc0020590
c001ade1:	e8 b0 ea fe ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ade6:	83 c4 14             	add    esp,0x14
c001ade9:	68 74 01 00 00       	push   0x174
c001adee:	e8 c6 c9 fe ff       	call   c00077b9 <malloc>
c001adf3:	83 c4 0c             	add    esp,0xc
c001adf6:	89 c6                	mov    esi,eax
c001adf8:	6a 00                	push   0x0
c001adfa:	68 ff ff ff 7f       	push   0x7fffffff
c001adff:	6a 00                	push   0x0
c001ae01:	6a 00                	push   0x0
c001ae03:	53                   	push   ebx
c001ae04:	68 df ef 01 c0       	push   0xc001efdf
c001ae09:	50                   	push   eax
c001ae0a:	e8 7f 1b ff ff       	call   c000c98e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ae0f:	83 c4 14             	add    esp,0x14
c001ae12:	56                   	push   esi
c001ae13:	e8 2c 1c ff ff       	call   c000ca44 <LogicalDisk::assignDriveLetter()>
c001ae18:	5a                   	pop    edx
c001ae19:	0f be c0             	movsx  eax,al
c001ae1c:	59                   	pop    ecx
c001ae1d:	50                   	push   eax
c001ae1e:	68 2c ee 01 c0       	push   0xc001ee2c
c001ae23:	e8 2c f6 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001ae28:	58                   	pop    eax
c001ae29:	5a                   	pop    edx
c001ae2a:	56                   	push   esi
c001ae2b:	53                   	push   ebx
c001ae2c:	e8 63 0a ff ff       	call   c000b894 <Device::addChild(Device*)>
c001ae31:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ae37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae3a:	e8 8b 0e ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c001ae3f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ae46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae49:	e8 e2 fe ff ff       	call   c001ad30 <SATAPI::detectMedia()>
c001ae4e:	83 c4 14             	add    esp,0x14
c001ae51:	31 c0                	xor    eax,eax
c001ae53:	5b                   	pop    ebx
c001ae54:	5e                   	pop    esi
c001ae55:	c3                   	ret    

c001ae56 <SATAPI::read(unsigned long long, int, void*)>:
c001ae56:	57                   	push   edi
c001ae57:	56                   	push   esi
c001ae58:	53                   	push   ebx
c001ae59:	83 ec 3c             	sub    esp,0x3c
c001ae5c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae60:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ae64:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ae68:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001ae6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae74:	68 ed ef 01 c0       	push   0xc001efed
c001ae79:	e8 d6 f5 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001ae7e:	83 c4 10             	add    esp,0x10
c001ae81:	83 fe 04             	cmp    esi,0x4
c001ae84:	7e 10                	jle    c001ae96 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001ae86:	83 ec 0c             	sub    esp,0xc
c001ae89:	68 fe ef 01 c0       	push   0xc001effe
c001ae8e:	e8 a4 52 ff ff       	call   c0010137 <KePanic(char const*)>
c001ae93:	83 c4 10             	add    esp,0x10
c001ae96:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ae9c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001aea2:	51                   	push   ecx
c001aea3:	50                   	push   eax
c001aea4:	83 c0 02             	add    eax,0x2
c001aea7:	c1 e0 07             	shl    eax,0x7
c001aeaa:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001aeb0:	50                   	push   eax
c001aeb1:	52                   	push   edx
c001aeb2:	e8 09 e9 ff ff       	call   c00197c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001aeb7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001aebb:	b9 03 00 00 00       	mov    ecx,0x3
c001aec0:	fc                   	cld    
c001aec1:	31 c0                	xor    eax,eax
c001aec3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aec5:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001aeca:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001aecf:	83 c4 0c             	add    esp,0xc
c001aed2:	6a 00                	push   0x0
c001aed4:	6a 00                	push   0x0
c001aed6:	6a 00                	push   0x0
c001aed8:	6a 00                	push   0x0
c001aeda:	6a 02                	push   0x2
c001aedc:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aee0:	50                   	push   eax
c001aee1:	53                   	push   ebx
c001aee2:	e8 2d fb ff ff       	call   c001aa14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aee7:	83 c4 20             	add    esp,0x20
c001aeea:	85 c0                	test   eax,eax
c001aeec:	75 44                	jne    c001af32 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001aeee:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001aef2:	b9 03 00 00 00       	mov    ecx,0x3
c001aef7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aefd:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001af02:	0f c8                	bswap  eax
c001af04:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001af08:	89 f0                	mov    eax,esi
c001af0a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001af0e:	50                   	push   eax
c001af0f:	56                   	push   esi
c001af10:	c1 e6 0b             	shl    esi,0xb
c001af13:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001af17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af1f:	56                   	push   esi
c001af20:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001af24:	50                   	push   eax
c001af25:	53                   	push   ebx
c001af26:	e8 e9 fa ff ff       	call   c001aa14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001af2b:	83 c4 20             	add    esp,0x20
c001af2e:	85 c0                	test   eax,eax
c001af30:	74 14                	je     c001af46 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001af32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af36:	83 ec 0c             	sub    esp,0xc
c001af39:	53                   	push   ebx
c001af3a:	e8 f1 fd ff ff       	call   c001ad30 <SATAPI::detectMedia()>
c001af3f:	83 c4 10             	add    esp,0x10
c001af42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af46:	83 c4 30             	add    esp,0x30
c001af49:	5b                   	pop    ebx
c001af4a:	5e                   	pop    esi
c001af4b:	5f                   	pop    edi
c001af4c:	c3                   	ret    
c001af4d:	90                   	nop

c001af4e <IOAPIC::close(int, int, void*)>:
c001af4e:	b8 00 00 00 00       	mov    eax,0x0
c001af53:	c3                   	ret    

c001af54 <apicGetBase()>:
c001af54:	55                   	push   ebp
c001af55:	89 e5                	mov    ebp,esp
c001af57:	83 ec 18             	sub    esp,0x18
c001af5a:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001af5f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001af65:	83 e0 08             	and    eax,0x8
c001af68:	84 c0                	test   al,al
c001af6a:	75 07                	jne    c001af73 <apicGetBase()+0x1f>
c001af6c:	b8 00 00 00 00       	mov    eax,0x0
c001af71:	eb 21                	jmp    c001af94 <apicGetBase()+0x40>
c001af73:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001af78:	83 ec 08             	sub    esp,0x8
c001af7b:	6a 1b                	push   0x1b
c001af7d:	50                   	push   eax
c001af7e:	e8 6f be fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001af83:	83 c4 10             	add    esp,0x10
c001af86:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001af89:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001af8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001af8f:	25 00 00 ff ff       	and    eax,0xffff0000
c001af94:	c9                   	leave  
c001af95:	c3                   	ret    

c001af96 <IOAPIC::IOAPIC()>:
c001af96:	83 ec 0c             	sub    esp,0xc
c001af99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af9d:	83 ec 08             	sub    esp,0x8
c001afa0:	68 60 f0 01 c0       	push   0xc001f060
c001afa5:	50                   	push   eax
c001afa6:	e8 81 0a ff ff       	call   c000ba2c <Device::Device(char const*)>
c001afab:	83 c4 10             	add    esp,0x10
c001afae:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c001afb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb7:	89 10                	mov    DWORD PTR [eax],edx
c001afb9:	90                   	nop
c001afba:	83 c4 0c             	add    esp,0xc
c001afbd:	c3                   	ret    

c001afbe <apicOpen()>:
c001afbe:	55                   	push   ebp
c001afbf:	89 e5                	mov    ebp,esp
c001afc1:	53                   	push   ebx
c001afc2:	83 ec 34             	sub    esp,0x34
c001afc5:	a0 80 41 02 c0       	mov    al,ds:0xc0024180
c001afca:	83 f0 01             	xor    eax,0x1
c001afcd:	84 c0                	test   al,al
c001afcf:	0f 84 9d 00 00 00    	je     c001b072 <apicOpen()+0xb4>
c001afd5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001afd9:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c001afde:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001afe1:	0f 83 84 00 00 00    	jae    c001b06b <apicOpen()+0xad>
c001afe7:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001afee:	83 ec 0c             	sub    esp,0xc
c001aff1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001aff4:	e8 c0 c7 fe ff       	call   c00077b9 <malloc>
c001aff9:	83 c4 10             	add    esp,0x10
c001affc:	89 c3                	mov    ebx,eax
c001affe:	83 ec 0c             	sub    esp,0xc
c001b001:	53                   	push   ebx
c001b002:	e8 8f ff ff ff       	call   c001af96 <IOAPIC::IOAPIC()>
c001b007:	83 c4 10             	add    esp,0x10
c001b00a:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b00d:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b010:	25 ff 00 00 00       	and    eax,0xff
c001b015:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b018:	89 14 85 60 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbea0],edx
c001b01f:	a1 40 41 02 c0       	mov    eax,ds:0xc0024140
c001b024:	40                   	inc    eax
c001b025:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c001b02a:	a1 98 04 02 c0       	mov    eax,ds:0xc0020498
c001b02f:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b035:	83 ec 08             	sub    esp,0x8
c001b038:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b03b:	50                   	push   eax
c001b03c:	e8 53 08 ff ff       	call   c000b894 <Device::addChild(Device*)>
c001b041:	83 c4 10             	add    esp,0x10
c001b044:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b047:	8b 00                	mov    eax,DWORD PTR [eax]
c001b049:	83 c0 08             	add    eax,0x8
c001b04c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b04e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b051:	25 ff 00 00 00       	and    eax,0xff
c001b056:	6a 00                	push   0x0
c001b058:	6a 00                	push   0x0
c001b05a:	50                   	push   eax
c001b05b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b05e:	ff d2                	call   edx
c001b060:	83 c4 10             	add    esp,0x10
c001b063:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b066:	e9 6e ff ff ff       	jmp    c001afd9 <apicOpen()+0x1b>
c001b06b:	c6 05 80 41 02 c0 01 	mov    BYTE PTR ds:0xc0024180,0x1
c001b072:	e8 dd fe ff ff       	call   c001af54 <apicGetBase()>
c001b077:	05 f0 00 00 00       	add    eax,0xf0
c001b07c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b07f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b082:	8b 00                	mov    eax,DWORD PTR [eax]
c001b084:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b087:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b08e:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b095:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b098:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b09b:	89 10                	mov    DWORD PTR [eax],edx
c001b09d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b0a4:	a1 b0 2c 02 c0       	mov    eax,ds:0xc0022cb0
c001b0a9:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b0ac:	7d 70                	jge    c001b11e <apicOpen()+0x160>
c001b0ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0b1:	8b 04 85 c0 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd340]
c001b0b8:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b0bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0be:	8b 04 85 c0 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd340]
c001b0c5:	c1 e8 08             	shr    eax,0x8
c001b0c8:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b0cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0cf:	8b 04 85 c0 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd340]
c001b0d6:	c1 e8 18             	shr    eax,0x18
c001b0d9:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b0dc:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b0e0:	75 37                	jne    c001b119 <apicOpen()+0x15b>
c001b0e2:	e8 6d fe ff ff       	call   c001af54 <apicGetBase()>
c001b0e7:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b0eb:	75 07                	jne    c001b0f4 <apicOpen()+0x136>
c001b0ed:	ba 60 03 00 00       	mov    edx,0x360
c001b0f2:	eb 05                	jmp    c001b0f9 <apicOpen()+0x13b>
c001b0f4:	ba 50 03 00 00       	mov    edx,0x350
c001b0f9:	01 d0                	add    eax,edx
c001b0fb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b0fe:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b101:	8b 00                	mov    eax,DWORD PTR [eax]
c001b103:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b106:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b10d:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b111:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b114:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b117:	89 10                	mov    DWORD PTR [eax],edx
c001b119:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b11c:	eb 86                	jmp    c001b0a4 <apicOpen()+0xe6>
c001b11e:	90                   	nop
c001b11f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b122:	c9                   	leave  
c001b123:	c3                   	ret    

c001b124 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b124:	55                   	push   ebp
c001b125:	89 e5                	mov    ebp,esp
c001b127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b12a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b130:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b133:	72 1d                	jb     c001b152 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b138:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b13e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b141:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b147:	01 d0                	add    eax,edx
c001b149:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b14c:	73 04                	jae    c001b152 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b14e:	b0 01                	mov    al,0x1
c001b150:	eb 02                	jmp    c001b154 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b152:	b0 00                	mov    al,0x0
c001b154:	5d                   	pop    ebp
c001b155:	c3                   	ret    

c001b156 <IOAPIC::read(int)>:
c001b156:	55                   	push   ebp
c001b157:	89 e5                	mov    ebp,esp
c001b159:	83 ec 10             	sub    esp,0x10
c001b15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b15f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b165:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b168:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b16b:	31 d2                	xor    edx,edx
c001b16d:	88 c2                	mov    dl,al
c001b16f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b172:	89 10                	mov    DWORD PTR [eax],edx
c001b174:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b177:	83 c0 10             	add    eax,0x10
c001b17a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b17c:	c9                   	leave  
c001b17d:	c3                   	ret    

c001b17e <IOAPIC::open(int, int, void*)>:
c001b17e:	55                   	push   ebp
c001b17f:	89 e5                	mov    ebp,esp
c001b181:	57                   	push   edi
c001b182:	56                   	push   esi
c001b183:	53                   	push   ebx
c001b184:	83 ec 04             	sub    esp,0x4
c001b187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b18a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b18d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b196:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b19c:	8b 14 85 a0 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd260]
c001b1a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1a6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b1ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1af:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1b5:	8b 14 85 20 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1e0]
c001b1bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1bf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b1c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1c8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b1ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1d1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b1d7:	89 c6                	mov    esi,eax
c001b1d9:	81 e6 ff 00 00 00    	and    esi,0xff
c001b1df:	89 d0                	mov    eax,edx
c001b1e1:	ba 00 00 00 00       	mov    edx,0x0
c001b1e6:	89 c7                	mov    edi,eax
c001b1e8:	83 e7 ff             	and    edi,0xffffffff
c001b1eb:	89 f9                	mov    ecx,edi
c001b1ed:	89 d0                	mov    eax,edx
c001b1ef:	25 ff 00 00 00       	and    eax,0xff
c001b1f4:	89 c3                	mov    ebx,eax
c001b1f6:	89 c8                	mov    eax,ecx
c001b1f8:	89 da                	mov    edx,ebx
c001b1fa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b1fd:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b200:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b204:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b208:	83 e0 00             	and    eax,0x0
c001b20b:	09 d0                	or     eax,edx
c001b20d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b214:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b21a:	8d 50 01             	lea    edx,[eax+0x1]
c001b21d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b220:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b226:	31 d2                	xor    edx,edx
c001b228:	88 c2                	mov    dl,al
c001b22a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b22d:	83 c2 08             	add    edx,0x8
c001b230:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b234:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b23a:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b240:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b244:	6a 01                	push   0x1
c001b246:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b249:	e8 08 ff ff ff       	call   c001b156 <IOAPIC::read(int)>
c001b24e:	83 c4 08             	add    esp,0x8
c001b251:	c1 f8 10             	sar    eax,0x10
c001b254:	25 ff 00 00 00       	and    eax,0xff
c001b259:	8d 50 01             	lea    edx,[eax+0x1]
c001b25c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b25f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b265:	b8 00 00 00 00       	mov    eax,0x0
c001b26a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b26d:	5b                   	pop    ebx
c001b26e:	5e                   	pop    esi
c001b26f:	5f                   	pop    edi
c001b270:	5d                   	pop    ebp
c001b271:	c3                   	ret    

c001b272 <IOAPIC::write(int, int)>:
c001b272:	55                   	push   ebp
c001b273:	89 e5                	mov    ebp,esp
c001b275:	83 ec 10             	sub    esp,0x10
c001b278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b27b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b281:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b284:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b287:	31 d2                	xor    edx,edx
c001b289:	88 c2                	mov    dl,al
c001b28b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b28e:	89 10                	mov    DWORD PTR [eax],edx
c001b290:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b293:	8d 50 10             	lea    edx,[eax+0x10]
c001b296:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b299:	89 02                	mov    DWORD PTR [edx],eax
c001b29b:	90                   	nop
c001b29c:	c9                   	leave  
c001b29d:	c3                   	ret    

c001b29e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b29e:	55                   	push   ebp
c001b29f:	89 e5                	mov    ebp,esp
c001b2a1:	53                   	push   ebx
c001b2a2:	83 ec 2c             	sub    esp,0x2c
c001b2a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b2a8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b2ab:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b2ae:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b2b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b2b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b2b7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b2ba:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b2bd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b2c0:	88 d8                	mov    al,bl
c001b2c2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b2c5:	88 c8                	mov    al,cl
c001b2c7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b2ca:	88 d0                	mov    al,dl
c001b2cc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b2cf:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b2d2:	25 ff 00 00 00       	and    eax,0xff
c001b2d7:	83 c0 08             	add    eax,0x8
c001b2da:	01 c0                	add    eax,eax
c001b2dc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b2df:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b2e2:	25 ff 00 00 00       	and    eax,0xff
c001b2e7:	83 c0 08             	add    eax,0x8
c001b2ea:	01 c0                	add    eax,eax
c001b2ec:	40                   	inc    eax
c001b2ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b2f0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b2f3:	50                   	push   eax
c001b2f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2f7:	e8 5a fe ff ff       	call   c001b156 <IOAPIC::read(int)>
c001b2fc:	83 c4 08             	add    esp,0x8
c001b2ff:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b302:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b309:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b30c:	c1 e0 18             	shl    eax,0x18
c001b30f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b312:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b315:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b318:	52                   	push   edx
c001b319:	50                   	push   eax
c001b31a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b31d:	e8 50 ff ff ff       	call   c001b272 <IOAPIC::write(int, int)>
c001b322:	83 c4 0c             	add    esp,0xc
c001b325:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b328:	50                   	push   eax
c001b329:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b32c:	e8 25 fe ff ff       	call   c001b156 <IOAPIC::read(int)>
c001b331:	83 c4 08             	add    esp,0x8
c001b334:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b337:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b33e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b345:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b34c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b350:	74 09                	je     c001b35b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b352:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b359:	eb 07                	jmp    c001b362 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b35b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b362:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b366:	74 09                	je     c001b371 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b368:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b36f:	eb 07                	jmp    c001b378 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b371:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b378:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b37f:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b382:	25 ff 00 00 00       	and    eax,0xff
c001b387:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b38a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b38d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b390:	52                   	push   edx
c001b391:	50                   	push   eax
c001b392:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b395:	e8 d8 fe ff ff       	call   c001b272 <IOAPIC::write(int, int)>
c001b39a:	83 c4 0c             	add    esp,0xc
c001b39d:	90                   	nop
c001b39e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b3a1:	c9                   	leave  
c001b3a2:	c3                   	ret    
c001b3a3:	90                   	nop

c001b3a4 <APICTimer::close(int, int, void*)>:
c001b3a4:	b8 00 00 00 00       	mov    eax,0x0
c001b3a9:	c3                   	ret    
c001b3aa:	66 90                	xchg   ax,ax

c001b3ac <apicTimerHandler(regs*, void*)>:
c001b3ac:	83 ec 0c             	sub    esp,0xc
c001b3af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b3b5:	b8 10 27 00 00       	mov    eax,0x2710
c001b3ba:	ba 00 00 00 00       	mov    edx,0x0
c001b3bf:	f7 f1                	div    ecx
c001b3c1:	83 ec 0c             	sub    esp,0xc
c001b3c4:	50                   	push   eax
c001b3c5:	e8 de 1d ff ff       	call   c000d1a8 <timerHandler(unsigned int)>
c001b3ca:	83 c4 10             	add    esp,0x10
c001b3cd:	90                   	nop
c001b3ce:	83 c4 0c             	add    esp,0xc
c001b3d1:	c3                   	ret    
c001b3d2:	66 90                	xchg   ax,ax

c001b3d4 <APICTimer::open(int, int, void*)>:
c001b3d4:	83 ec 0c             	sub    esp,0xc
c001b3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3db:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3dd:	83 c0 24             	add    eax,0x24
c001b3e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3e2:	83 ec 08             	sub    esp,0x8
c001b3e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3ed:	ff d0                	call   eax
c001b3ef:	83 c4 10             	add    esp,0x10
c001b3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3fa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b404:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b408:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b40e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b412:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b418:	83 ec 0c             	sub    esp,0xc
c001b41b:	51                   	push   ecx
c001b41c:	6a 01                	push   0x1
c001b41e:	68 ac b3 01 c0       	push   0xc001b3ac
c001b423:	52                   	push   edx
c001b424:	50                   	push   eax
c001b425:	e8 16 04 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b42a:	83 c4 20             	add    esp,0x20
c001b42d:	89 c2                	mov    edx,eax
c001b42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b433:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b439:	b8 00 00 00 00       	mov    eax,0x0
c001b43e:	83 c4 0c             	add    esp,0xc
c001b441:	c3                   	ret    
c001b442:	66 90                	xchg   ax,ax

c001b444 <APICTimer::write(int)>:
c001b444:	83 ec 0c             	sub    esp,0xc
c001b447:	83 ec 0c             	sub    esp,0xc
c001b44a:	68 94 f0 01 c0       	push   0xc001f094
c001b44f:	e8 e3 4c ff ff       	call   c0010137 <KePanic(char const*)>
c001b454:	83 c4 10             	add    esp,0x10
c001b457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b45b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b45f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b465:	90                   	nop
c001b466:	83 c4 0c             	add    esp,0xc
c001b469:	c3                   	ret    
c001b46a:	66 90                	xchg   ax,ax

c001b46c <APICTimer::APICTimer()>:
c001b46c:	83 ec 0c             	sub    esp,0xc
c001b46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b473:	83 ec 08             	sub    esp,0x8
c001b476:	68 a4 f0 01 c0       	push   0xc001f0a4
c001b47b:	50                   	push   eax
c001b47c:	e8 5b 1c ff ff       	call   c000d0dc <Timer::Timer(char const*)>
c001b481:	83 c4 10             	add    esp,0x10
c001b484:	ba b8 f0 01 c0       	mov    edx,0xc001f0b8
c001b489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b48d:	89 10                	mov    DWORD PTR [eax],edx
c001b48f:	90                   	nop
c001b490:	83 c4 0c             	add    esp,0xc
c001b493:	c3                   	ret    

c001b494 <PIT::write(int)>:
c001b494:	83 ec 10             	sub    esp,0x10
c001b497:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b49b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b49f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b4a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4a9:	a3 84 41 02 c0       	mov    ds:0xc0024184,eax
c001b4ae:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b4b3:	99                   	cdq    
c001b4b4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b4b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4bc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b4c3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b4c8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b4cc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b4d1:	ee                   	out    dx,al
c001b4d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4d6:	25 ff 00 00 00       	and    eax,0xff
c001b4db:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b4e2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b4e6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b4ea:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b4ef:	ee                   	out    dx,al
c001b4f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4f4:	c1 f8 08             	sar    eax,0x8
c001b4f7:	25 ff 00 00 00       	and    eax,0xff
c001b4fc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b503:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b507:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b50b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b510:	ee                   	out    dx,al
c001b511:	90                   	nop
c001b512:	83 c4 10             	add    esp,0x10
c001b515:	c3                   	ret    
c001b516:	66 90                	xchg   ax,ax

c001b518 <pitHandler(regs*, void*)>:
c001b518:	83 ec 0c             	sub    esp,0xc
c001b51b:	8b 0d 84 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024184
c001b521:	b8 10 27 00 00       	mov    eax,0x2710
c001b526:	99                   	cdq    
c001b527:	f7 f9                	idiv   ecx
c001b529:	83 ec 0c             	sub    esp,0xc
c001b52c:	50                   	push   eax
c001b52d:	e8 76 1c ff ff       	call   c000d1a8 <timerHandler(unsigned int)>
c001b532:	83 c4 10             	add    esp,0x10
c001b535:	90                   	nop
c001b536:	83 c4 0c             	add    esp,0xc
c001b539:	c3                   	ret    
c001b53a:	66 90                	xchg   ax,ax

c001b53c <PIT::open(int, int, void*)>:
c001b53c:	83 ec 0c             	sub    esp,0xc
c001b53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b543:	8b 00                	mov    eax,DWORD PTR [eax]
c001b545:	83 c0 24             	add    eax,0x24
c001b548:	8b 00                	mov    eax,DWORD PTR [eax]
c001b54a:	83 ec 08             	sub    esp,0x8
c001b54d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b551:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b555:	ff d0                	call   eax
c001b557:	83 c4 10             	add    esp,0x10
c001b55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b55e:	83 ec 0c             	sub    esp,0xc
c001b561:	6a 00                	push   0x0
c001b563:	6a 01                	push   0x1
c001b565:	68 18 b5 01 c0       	push   0xc001b518
c001b56a:	6a 00                	push   0x0
c001b56c:	50                   	push   eax
c001b56d:	e8 ce 02 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b572:	83 c4 20             	add    esp,0x20
c001b575:	89 c2                	mov    edx,eax
c001b577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b581:	b8 00 00 00 00       	mov    eax,0x0
c001b586:	83 c4 0c             	add    esp,0xc
c001b589:	c3                   	ret    
c001b58a:	66 90                	xchg   ax,ax

c001b58c <PIT::close(int, int, void*)>:
c001b58c:	83 ec 0c             	sub    esp,0xc
c001b58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b593:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b59d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a1:	6a 01                	push   0x1
c001b5a3:	68 18 b5 01 c0       	push   0xc001b518
c001b5a8:	6a 00                	push   0x0
c001b5aa:	50                   	push   eax
c001b5ab:	e8 c6 02 ff ff       	call   c000b876 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b5b0:	83 c4 10             	add    esp,0x10
c001b5b3:	b8 00 00 00 00       	mov    eax,0x0
c001b5b8:	83 c4 0c             	add    esp,0xc
c001b5bb:	c3                   	ret    

c001b5bc <PIT::PIT()>:
c001b5bc:	83 ec 0c             	sub    esp,0xc
c001b5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c3:	83 ec 08             	sub    esp,0x8
c001b5c6:	68 e0 f0 01 c0       	push   0xc001f0e0
c001b5cb:	50                   	push   eax
c001b5cc:	e8 0b 1b ff ff       	call   c000d0dc <Timer::Timer(char const*)>
c001b5d1:	83 c4 10             	add    esp,0x10
c001b5d4:	ba 08 f1 01 c0       	mov    edx,0xc001f108
c001b5d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5dd:	89 10                	mov    DWORD PTR [eax],edx
c001b5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b5e9:	31 d2                	xor    edx,edx
c001b5eb:	88 c2                	mov    dl,al
c001b5ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f1:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b5f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b602:	31 d2                	xor    edx,edx
c001b604:	88 c2                	mov    dl,al
c001b606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b60a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b613:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b619:	8d 50 01             	lea    edx,[eax+0x1]
c001b61c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b620:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b626:	31 d2                	xor    edx,edx
c001b628:	88 c2                	mov    dl,al
c001b62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b632:	83 e1 3f             	and    ecx,0x3f
c001b635:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b639:	90                   	nop
c001b63a:	83 c4 0c             	add    esp,0xc
c001b63d:	c3                   	ret    
c001b63e:	66 90                	xchg   ax,ax

c001b640 <avxDetect>:
c001b640:	b8 01 00 00 00       	mov    eax,0x1
c001b645:	0f a2                	cpuid  
c001b647:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b64d:	74 15                	je     c001b664 <avxDetect.noAVX>
c001b64f:	b8 01 00 00 00       	mov    eax,0x1
c001b654:	0f a2                	cpuid  
c001b656:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b65c:	74 06                	je     c001b664 <avxDetect.noAVX>
c001b65e:	b8 01 00 00 00       	mov    eax,0x1
c001b663:	c3                   	ret    

c001b664 <avxDetect.noAVX>:
c001b664:	b8 00 00 00 00       	mov    eax,0x0
c001b669:	c3                   	ret    

c001b66a <avxSave>:
c001b66a:	53                   	push   ebx
c001b66b:	52                   	push   edx
c001b66c:	31 c0                	xor    eax,eax
c001b66e:	48                   	dec    eax
c001b66f:	89 c2                	mov    edx,eax
c001b671:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b675:	0f ae 23             	xsave  [ebx]
c001b678:	5a                   	pop    edx
c001b679:	5b                   	pop    ebx
c001b67a:	c3                   	ret    

c001b67b <avxLoad>:
c001b67b:	53                   	push   ebx
c001b67c:	52                   	push   edx
c001b67d:	31 c0                	xor    eax,eax
c001b67f:	48                   	dec    eax
c001b680:	89 c2                	mov    edx,eax
c001b682:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b686:	0f ae 2b             	xrstor [ebx]
c001b689:	5a                   	pop    edx
c001b68a:	5b                   	pop    ebx
c001b68b:	c3                   	ret    

c001b68c <avxInit>:
c001b68c:	e8 57 02 00 00       	call   c001b8e8 <sseInit>
c001b691:	50                   	push   eax
c001b692:	51                   	push   ecx
c001b693:	0f 20 e0             	mov    eax,cr4
c001b696:	0d 00 00 04 00       	or     eax,0x40000
c001b69b:	0f 22 e0             	mov    cr4,eax
c001b69e:	31 c9                	xor    ecx,ecx
c001b6a0:	0f 01 d0             	xgetbv 
c001b6a3:	0d 07 00 00 00       	or     eax,0x7
c001b6a8:	0f 01 d1             	xsetbv 
c001b6ab:	59                   	pop    ecx
c001b6ac:	58                   	pop    eax
c001b6ad:	c3                   	ret    

c001b6ae <avxClose>:
c001b6ae:	c3                   	ret    

c001b6af <wouldSheSayYes>:
c001b6af:	c3                   	ret    
c001b6b0:	49                   	dec    ecx
c001b6b1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b6b5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b6b9:	75 20                	jne    c001b6db <isr0+0xb>
c001b6bb:	4e                   	dec    esi
c001b6bc:	79 61                	jns    c001b71f <isr7+0x3>
c001b6be:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b6c3:	66 90                	xchg   ax,ax
c001b6c5:	66 90                	xchg   ax,ax
c001b6c7:	66 90                	xchg   ax,ax
c001b6c9:	66 90                	xchg   ax,ax
c001b6cb:	66 90                	xchg   ax,ax
c001b6cd:	66 90                	xchg   ax,ax
c001b6cf:	90                   	nop

c001b6d0 <isr0>:
c001b6d0:	fa                   	cli    
c001b6d1:	68 00 00 00 00       	push   0x0
c001b6d6:	68 00 00 00 00       	push   0x0
c001b6db:	e9 44 01 00 00       	jmp    c001b824 <int_common_stub>

c001b6e0 <isr1>:
c001b6e0:	fa                   	cli    
c001b6e1:	6a 00                	push   0x0
c001b6e3:	6a 01                	push   0x1
c001b6e5:	e9 3a 01 00 00       	jmp    c001b824 <int_common_stub>

c001b6ea <isr2>:
c001b6ea:	fa                   	cli    
c001b6eb:	6a 00                	push   0x0
c001b6ed:	6a 02                	push   0x2
c001b6ef:	e9 30 01 00 00       	jmp    c001b824 <int_common_stub>

c001b6f4 <isr3>:
c001b6f4:	fa                   	cli    
c001b6f5:	6a 00                	push   0x0
c001b6f7:	6a 03                	push   0x3
c001b6f9:	e9 26 01 00 00       	jmp    c001b824 <int_common_stub>

c001b6fe <isr4>:
c001b6fe:	fa                   	cli    
c001b6ff:	6a 00                	push   0x0
c001b701:	6a 04                	push   0x4
c001b703:	e9 1c 01 00 00       	jmp    c001b824 <int_common_stub>

c001b708 <isr5>:
c001b708:	fa                   	cli    
c001b709:	6a 00                	push   0x0
c001b70b:	6a 05                	push   0x5
c001b70d:	e9 12 01 00 00       	jmp    c001b824 <int_common_stub>

c001b712 <isr6>:
c001b712:	fa                   	cli    
c001b713:	6a 00                	push   0x0
c001b715:	6a 06                	push   0x6
c001b717:	e9 08 01 00 00       	jmp    c001b824 <int_common_stub>

c001b71c <isr7>:
c001b71c:	fa                   	cli    
c001b71d:	6a 00                	push   0x0
c001b71f:	6a 07                	push   0x7
c001b721:	e9 fe 00 00 00       	jmp    c001b824 <int_common_stub>

c001b726 <isr8>:
c001b726:	fa                   	cli    
c001b727:	6a 08                	push   0x8
c001b729:	e9 f6 00 00 00       	jmp    c001b824 <int_common_stub>

c001b72e <isr9>:
c001b72e:	fa                   	cli    
c001b72f:	6a 00                	push   0x0
c001b731:	6a 09                	push   0x9
c001b733:	e9 ec 00 00 00       	jmp    c001b824 <int_common_stub>

c001b738 <isr10>:
c001b738:	fa                   	cli    
c001b739:	6a 0a                	push   0xa
c001b73b:	e9 e4 00 00 00       	jmp    c001b824 <int_common_stub>

c001b740 <isr11>:
c001b740:	fa                   	cli    
c001b741:	6a 0b                	push   0xb
c001b743:	e9 dc 00 00 00       	jmp    c001b824 <int_common_stub>

c001b748 <isr12>:
c001b748:	fa                   	cli    
c001b749:	6a 0c                	push   0xc
c001b74b:	e9 d4 00 00 00       	jmp    c001b824 <int_common_stub>

c001b750 <isr13>:
c001b750:	fa                   	cli    
c001b751:	6a 0d                	push   0xd
c001b753:	e9 cc 00 00 00       	jmp    c001b824 <int_common_stub>

c001b758 <isr14>:
c001b758:	fa                   	cli    
c001b759:	6a 0e                	push   0xe
c001b75b:	e9 c4 00 00 00       	jmp    c001b824 <int_common_stub>

c001b760 <isr15>:
c001b760:	fa                   	cli    
c001b761:	6a 00                	push   0x0
c001b763:	6a 0f                	push   0xf
c001b765:	e9 ba 00 00 00       	jmp    c001b824 <int_common_stub>

c001b76a <isr16>:
c001b76a:	fa                   	cli    
c001b76b:	6a 00                	push   0x0
c001b76d:	6a 10                	push   0x10
c001b76f:	e9 b0 00 00 00       	jmp    c001b824 <int_common_stub>

c001b774 <isr17>:
c001b774:	fa                   	cli    
c001b775:	6a 00                	push   0x0
c001b777:	6a 11                	push   0x11
c001b779:	e9 a6 00 00 00       	jmp    c001b824 <int_common_stub>

c001b77e <isr18>:
c001b77e:	fa                   	cli    
c001b77f:	6a 00                	push   0x0
c001b781:	6a 12                	push   0x12
c001b783:	e9 9c 00 00 00       	jmp    c001b824 <int_common_stub>

c001b788 <irq3>:
c001b788:	fa                   	cli    
c001b789:	6a 00                	push   0x0
c001b78b:	6a 23                	push   0x23
c001b78d:	e9 92 00 00 00       	jmp    c001b824 <int_common_stub>

c001b792 <irq4>:
c001b792:	fa                   	cli    
c001b793:	6a 00                	push   0x0
c001b795:	6a 24                	push   0x24
c001b797:	e9 88 00 00 00       	jmp    c001b824 <int_common_stub>

c001b79c <irq5>:
c001b79c:	fa                   	cli    
c001b79d:	6a 00                	push   0x0
c001b79f:	6a 25                	push   0x25
c001b7a1:	e9 7e 00 00 00       	jmp    c001b824 <int_common_stub>

c001b7a6 <irq6>:
c001b7a6:	fa                   	cli    
c001b7a7:	6a 00                	push   0x0
c001b7a9:	6a 26                	push   0x26
c001b7ab:	e9 74 00 00 00       	jmp    c001b824 <int_common_stub>

c001b7b0 <irq7>:
c001b7b0:	fa                   	cli    
c001b7b1:	6a 00                	push   0x0
c001b7b3:	6a 27                	push   0x27
c001b7b5:	e9 6a 00 00 00       	jmp    c001b824 <int_common_stub>

c001b7ba <irq8>:
c001b7ba:	fa                   	cli    
c001b7bb:	6a 00                	push   0x0
c001b7bd:	6a 28                	push   0x28
c001b7bf:	e9 60 00 00 00       	jmp    c001b824 <int_common_stub>

c001b7c4 <irq9>:
c001b7c4:	fa                   	cli    
c001b7c5:	6a 00                	push   0x0
c001b7c7:	6a 29                	push   0x29
c001b7c9:	e9 56 00 00 00       	jmp    c001b824 <int_common_stub>

c001b7ce <irq10>:
c001b7ce:	fa                   	cli    
c001b7cf:	6a 00                	push   0x0
c001b7d1:	6a 2a                	push   0x2a
c001b7d3:	e9 4c 00 00 00       	jmp    c001b824 <int_common_stub>

c001b7d8 <irq11>:
c001b7d8:	fa                   	cli    
c001b7d9:	6a 00                	push   0x0
c001b7db:	6a 2b                	push   0x2b
c001b7dd:	e9 42 00 00 00       	jmp    c001b824 <int_common_stub>

c001b7e2 <irq12>:
c001b7e2:	fa                   	cli    
c001b7e3:	6a 00                	push   0x0
c001b7e5:	6a 2c                	push   0x2c
c001b7e7:	e9 38 00 00 00       	jmp    c001b824 <int_common_stub>

c001b7ec <irq13>:
c001b7ec:	fa                   	cli    
c001b7ed:	6a 00                	push   0x0
c001b7ef:	6a 2d                	push   0x2d
c001b7f1:	e9 2e 00 00 00       	jmp    c001b824 <int_common_stub>

c001b7f6 <irq14>:
c001b7f6:	fa                   	cli    
c001b7f7:	6a 00                	push   0x0
c001b7f9:	6a 2e                	push   0x2e
c001b7fb:	e9 24 00 00 00       	jmp    c001b824 <int_common_stub>

c001b800 <irq15>:
c001b800:	fa                   	cli    
c001b801:	6a 00                	push   0x0
c001b803:	6a 2f                	push   0x2f
c001b805:	e9 1a 00 00 00       	jmp    c001b824 <int_common_stub>

c001b80a <irq1>:
c001b80a:	fa                   	cli    
c001b80b:	6a 00                	push   0x0
c001b80d:	6a 21                	push   0x21
c001b80f:	eb 13                	jmp    c001b824 <int_common_stub>

c001b811 <irq2>:
c001b811:	fa                   	cli    
c001b812:	6a 00                	push   0x0
c001b814:	6a 22                	push   0x22
c001b816:	eb 0c                	jmp    c001b824 <int_common_stub>

c001b818 <isr96>:
c001b818:	6a 00                	push   0x0
c001b81a:	6a 60                	push   0x60
c001b81c:	fb                   	sti    
c001b81d:	eb 05                	jmp    c001b824 <int_common_stub>

c001b81f <irq0>:
c001b81f:	fa                   	cli    
c001b820:	6a 00                	push   0x0
c001b822:	6a 20                	push   0x20

c001b824 <int_common_stub>:
c001b824:	60                   	pusha  
c001b825:	1e                   	push   ds
c001b826:	06                   	push   es
c001b827:	0f a0                	push   fs
c001b829:	0f a8                	push   gs
c001b82b:	66 b8 10 00          	mov    ax,0x10
c001b82f:	66 8e d8             	mov    ds,ax
c001b832:	66 8e c0             	mov    es,ax
c001b835:	66 8e e0             	mov    fs,ax
c001b838:	66 8e e8             	mov    gs,ax
c001b83b:	54                   	push   esp
c001b83c:	fc                   	cld    
c001b83d:	e8 fe 04 ff ff       	call   c000bd40 <int_handler>
c001b842:	81 c4 04 00 00 00    	add    esp,0x4
c001b848:	0f a9                	pop    gs
c001b84a:	0f a1                	pop    fs
c001b84c:	07                   	pop    es
c001b84d:	1f                   	pop    ds
c001b84e:	61                   	popa   
c001b84f:	81 c4 08 00 00 00    	add    esp,0x8
c001b855:	cf                   	iret   

c001b856 <irq16>:
c001b856:	fa                   	cli    
c001b857:	6a 00                	push   0x0
c001b859:	6a 30                	push   0x30
c001b85b:	e9 c4 ff ff ff       	jmp    c001b824 <int_common_stub>

c001b860 <irq17>:
c001b860:	fa                   	cli    
c001b861:	6a 00                	push   0x0
c001b863:	6a 31                	push   0x31
c001b865:	e9 ba ff ff ff       	jmp    c001b824 <int_common_stub>

c001b86a <irq18>:
c001b86a:	fa                   	cli    
c001b86b:	6a 00                	push   0x0
c001b86d:	6a 32                	push   0x32
c001b86f:	e9 b0 ff ff ff       	jmp    c001b824 <int_common_stub>

c001b874 <irq19>:
c001b874:	fa                   	cli    
c001b875:	6a 00                	push   0x0
c001b877:	6a 33                	push   0x33
c001b879:	e9 a6 ff ff ff       	jmp    c001b824 <int_common_stub>

c001b87e <irq20>:
c001b87e:	fa                   	cli    
c001b87f:	6a 00                	push   0x0
c001b881:	6a 34                	push   0x34
c001b883:	e9 9c ff ff ff       	jmp    c001b824 <int_common_stub>

c001b888 <irq21>:
c001b888:	fa                   	cli    
c001b889:	6a 00                	push   0x0
c001b88b:	6a 35                	push   0x35
c001b88d:	e9 92 ff ff ff       	jmp    c001b824 <int_common_stub>

c001b892 <irq22>:
c001b892:	fa                   	cli    
c001b893:	6a 00                	push   0x0
c001b895:	6a 36                	push   0x36
c001b897:	e9 88 ff ff ff       	jmp    c001b824 <int_common_stub>

c001b89c <irq23>:
c001b89c:	fa                   	cli    
c001b89d:	6a 00                	push   0x0
c001b89f:	6a 37                	push   0x37
c001b8a1:	e9 7e ff ff ff       	jmp    c001b824 <int_common_stub>
c001b8a6:	66 90                	xchg   ax,ax
c001b8a8:	66 90                	xchg   ax,ax
c001b8aa:	66 90                	xchg   ax,ax
c001b8ac:	66 90                	xchg   ax,ax
c001b8ae:	66 90                	xchg   ax,ax

c001b8b0 <i386GetRDRAND>:
c001b8b0:	b9 64 00 00 00       	mov    ecx,0x64

c001b8b5 <retry>:
c001b8b5:	0f c7 f0             	rdrand eax
c001b8b8:	72 05                	jb     c001b8bf <retry.done>
c001b8ba:	e2 f9                	loop   c001b8b5 <retry>

c001b8bc <retry.fail>:
c001b8bc:	31 c0                	xor    eax,eax
c001b8be:	c3                   	ret    

c001b8bf <retry.done>:
c001b8bf:	c3                   	ret    

c001b8c0 <absolutelyNoChanceInHell>:
c001b8c0:	b8 01 00 00 00       	mov    eax,0x1
c001b8c5:	0f a2                	cpuid  
c001b8c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b8cd:	74 06                	je     c001b8d5 <sseDetect.noSSE>
c001b8cf:	b8 01 00 00 00       	mov    eax,0x1
c001b8d4:	c3                   	ret    

c001b8d5 <sseDetect.noSSE>:
c001b8d5:	31 c0                	xor    eax,eax
c001b8d7:	c3                   	ret    

c001b8d8 <sseSave>:
c001b8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8dc:	0f ae 00             	fxsave [eax]
c001b8df:	c3                   	ret    

c001b8e0 <sseLoad>:
c001b8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8e4:	0f ae 08             	fxrstor [eax]
c001b8e7:	c3                   	ret    

c001b8e8 <sseInit>:
c001b8e8:	e8 42 00 00 00       	call   c001b92f <x87Init>
c001b8ed:	0f 20 e0             	mov    eax,cr4
c001b8f0:	66 0d 00 06          	or     ax,0x600
c001b8f4:	0f 22 e0             	mov    cr4,eax
c001b8f7:	c3                   	ret    

c001b8f8 <sseClose>:
c001b8f8:	c3                   	ret    
c001b8f9:	66 90                	xchg   ax,ax
c001b8fb:	66 90                	xchg   ax,ax
c001b8fd:	66 90                	xchg   ax,ax
c001b8ff:	90                   	nop

c001b900 <value_37F>:
c001b900:	7f 03                	jg     c001b905 <value_37A+0x1>

c001b902 <value_37E>:
c001b902:	7e 03                	jle    c001b907 <x87Detect+0x1>

c001b904 <value_37A>:
c001b904:	7a 03                	jp     c001b909 <x87Detect+0x3>

c001b906 <x87Detect>:
c001b906:	b8 01 00 00 00       	mov    eax,0x1
c001b90b:	0f a2                	cpuid  
c001b90d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b913:	74 06                	je     c001b91b <x87Detect.nox87>
c001b915:	b8 01 00 00 00       	mov    eax,0x1
c001b91a:	c3                   	ret    

c001b91b <x87Detect.nox87>:
c001b91b:	b8 00 00 00 00       	mov    eax,0x0
c001b920:	c3                   	ret    

c001b921 <x87Save>:
c001b921:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b925:	dd 30                	fnsave [eax]
c001b927:	c3                   	ret    

c001b928 <x87Load>:
c001b928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b92c:	dd 20                	frstor [eax]
c001b92e:	c3                   	ret    

c001b92f <x87Init>:
c001b92f:	0f 20 c0             	mov    eax,cr0
c001b932:	66 25 fb ff          	and    ax,0xfffb
c001b936:	66 0d 22 00          	or     ax,0x22
c001b93a:	0f 22 c0             	mov    cr0,eax
c001b93d:	db e3                	fninit 
c001b93f:	0f 06                	clts   
c001b941:	d9 2d 04 b9 01 c0    	fldcw  WORD PTR ds:0xc001b904
c001b947:	c3                   	ret    

c001b948 <x87Close>:
c001b948:	c3                   	ret    
c001b949:	66 90                	xchg   ax,ax
c001b94b:	90                   	nop

c001b94c <__do_global_ctors_aux>:
c001b94c:	a1 fc c8 01 c0       	mov    eax,ds:0xc001c8fc
c001b951:	83 f8 ff             	cmp    eax,0xffffffff
c001b954:	74 1a                	je     c001b970 <__do_global_ctors_aux+0x24>
c001b956:	55                   	push   ebp
c001b957:	89 e5                	mov    ebp,esp
c001b959:	53                   	push   ebx
c001b95a:	52                   	push   edx
c001b95b:	bb fc c8 01 c0       	mov    ebx,0xc001c8fc
c001b960:	ff d0                	call   eax
c001b962:	83 eb 04             	sub    ebx,0x4
c001b965:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b967:	83 f8 ff             	cmp    eax,0xffffffff
c001b96a:	75 f4                	jne    c001b960 <__do_global_ctors_aux+0x14>
c001b96c:	58                   	pop    eax
c001b96d:	5b                   	pop    ebx
c001b96e:	5d                   	pop    ebp
c001b96f:	c3                   	ret    
c001b970:	c3                   	ret    
c001b971:	66 90                	xchg   ax,ax
c001b973:	90                   	nop

c001b974 <__divdi3>:
c001b974:	55                   	push   ebp
c001b975:	57                   	push   edi
c001b976:	56                   	push   esi
c001b977:	53                   	push   ebx
c001b978:	83 ec 1c             	sub    esp,0x1c
c001b97b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b97f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b983:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b986:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b98a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b98e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b992:	85 db                	test   ebx,ebx
c001b994:	0f 88 8e 00 00 00    	js     c001ba28 <__divdi3+0xb4>
c001b99a:	89 dd                	mov    ebp,ebx
c001b99c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b9a4:	89 d3                	mov    ebx,edx
c001b9a6:	85 d2                	test   edx,edx
c001b9a8:	79 0d                	jns    c001b9b7 <__divdi3+0x43>
c001b9aa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b9ae:	f7 d8                	neg    eax
c001b9b0:	83 d2 00             	adc    edx,0x0
c001b9b3:	f7 da                	neg    edx
c001b9b5:	89 d3                	mov    ebx,edx
c001b9b7:	89 c7                	mov    edi,eax
c001b9b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b9bc:	85 db                	test   ebx,ebx
c001b9be:	75 48                	jne    c001ba08 <__divdi3+0x94>
c001b9c0:	39 ef                	cmp    edi,ebp
c001b9c2:	76 24                	jbe    c001b9e8 <__divdi3+0x74>
c001b9c4:	89 ea                	mov    edx,ebp
c001b9c6:	f7 f7                	div    edi
c001b9c8:	89 c1                	mov    ecx,eax
c001b9ca:	31 f6                	xor    esi,esi
c001b9cc:	89 c8                	mov    eax,ecx
c001b9ce:	89 f2                	mov    edx,esi
c001b9d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b9d4:	85 c9                	test   ecx,ecx
c001b9d6:	74 07                	je     c001b9df <__divdi3+0x6b>
c001b9d8:	f7 d8                	neg    eax
c001b9da:	83 d2 00             	adc    edx,0x0
c001b9dd:	f7 da                	neg    edx
c001b9df:	83 c4 1c             	add    esp,0x1c
c001b9e2:	5b                   	pop    ebx
c001b9e3:	5e                   	pop    esi
c001b9e4:	5f                   	pop    edi
c001b9e5:	5d                   	pop    ebp
c001b9e6:	c3                   	ret    
c001b9e7:	90                   	nop
c001b9e8:	85 ff                	test   edi,edi
c001b9ea:	75 0b                	jne    c001b9f7 <__divdi3+0x83>
c001b9ec:	b8 01 00 00 00       	mov    eax,0x1
c001b9f1:	31 d2                	xor    edx,edx
c001b9f3:	f7 f3                	div    ebx
c001b9f5:	89 c7                	mov    edi,eax
c001b9f7:	31 d2                	xor    edx,edx
c001b9f9:	89 e8                	mov    eax,ebp
c001b9fb:	f7 f7                	div    edi
c001b9fd:	89 c6                	mov    esi,eax
c001b9ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba02:	f7 f7                	div    edi
c001ba04:	89 c1                	mov    ecx,eax
c001ba06:	eb c4                	jmp    c001b9cc <__divdi3+0x58>
c001ba08:	39 eb                	cmp    ebx,ebp
c001ba0a:	77 3c                	ja     c001ba48 <__divdi3+0xd4>
c001ba0c:	0f bd f3             	bsr    esi,ebx
c001ba0f:	83 f6 1f             	xor    esi,0x1f
c001ba12:	75 40                	jne    c001ba54 <__divdi3+0xe0>
c001ba14:	39 eb                	cmp    ebx,ebp
c001ba16:	72 09                	jb     c001ba21 <__divdi3+0xad>
c001ba18:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ba1b:	0f 87 97 00 00 00    	ja     c001bab8 <__divdi3+0x144>
c001ba21:	b9 01 00 00 00       	mov    ecx,0x1
c001ba26:	eb a4                	jmp    c001b9cc <__divdi3+0x58>
c001ba28:	f7 d9                	neg    ecx
c001ba2a:	83 d3 00             	adc    ebx,0x0
c001ba2d:	f7 db                	neg    ebx
c001ba2f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ba32:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ba36:	89 dd                	mov    ebp,ebx
c001ba38:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ba40:	e9 5f ff ff ff       	jmp    c001b9a4 <__divdi3+0x30>
c001ba45:	8d 76 00             	lea    esi,[esi+0x0]
c001ba48:	31 f6                	xor    esi,esi
c001ba4a:	31 c9                	xor    ecx,ecx
c001ba4c:	e9 7b ff ff ff       	jmp    c001b9cc <__divdi3+0x58>
c001ba51:	8d 76 00             	lea    esi,[esi+0x0]
c001ba54:	b8 20 00 00 00       	mov    eax,0x20
c001ba59:	29 f0                	sub    eax,esi
c001ba5b:	89 f1                	mov    ecx,esi
c001ba5d:	d3 e3                	shl    ebx,cl
c001ba5f:	89 fa                	mov    edx,edi
c001ba61:	88 c1                	mov    cl,al
c001ba63:	d3 ea                	shr    edx,cl
c001ba65:	09 da                	or     edx,ebx
c001ba67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ba6b:	89 f1                	mov    ecx,esi
c001ba6d:	d3 e7                	shl    edi,cl
c001ba6f:	89 eb                	mov    ebx,ebp
c001ba71:	88 c1                	mov    cl,al
c001ba73:	d3 eb                	shr    ebx,cl
c001ba75:	89 f1                	mov    ecx,esi
c001ba77:	d3 e5                	shl    ebp,cl
c001ba79:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ba7c:	88 c1                	mov    cl,al
c001ba7e:	d3 ea                	shr    edx,cl
c001ba80:	09 d5                	or     ebp,edx
c001ba82:	89 e8                	mov    eax,ebp
c001ba84:	89 da                	mov    edx,ebx
c001ba86:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ba8a:	89 d3                	mov    ebx,edx
c001ba8c:	89 c5                	mov    ebp,eax
c001ba8e:	f7 e7                	mul    edi
c001ba90:	39 d3                	cmp    ebx,edx
c001ba92:	72 18                	jb     c001baac <__divdi3+0x138>
c001ba94:	74 0a                	je     c001baa0 <__divdi3+0x12c>
c001ba96:	89 e9                	mov    ecx,ebp
c001ba98:	31 f6                	xor    esi,esi
c001ba9a:	e9 2d ff ff ff       	jmp    c001b9cc <__divdi3+0x58>
c001ba9f:	90                   	nop
c001baa0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001baa3:	89 f1                	mov    ecx,esi
c001baa5:	d3 e7                	shl    edi,cl
c001baa7:	39 c7                	cmp    edi,eax
c001baa9:	73 eb                	jae    c001ba96 <__divdi3+0x122>
c001baab:	90                   	nop
c001baac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001baaf:	31 f6                	xor    esi,esi
c001bab1:	e9 16 ff ff ff       	jmp    c001b9cc <__divdi3+0x58>
c001bab6:	66 90                	xchg   ax,ax
c001bab8:	31 c9                	xor    ecx,ecx
c001baba:	e9 0d ff ff ff       	jmp    c001b9cc <__divdi3+0x58>
c001babf:	90                   	nop

c001bac0 <__moddi3>:
c001bac0:	55                   	push   ebp
c001bac1:	57                   	push   edi
c001bac2:	56                   	push   esi
c001bac3:	53                   	push   ebx
c001bac4:	83 ec 2c             	sub    esp,0x2c
c001bac7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bacb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bacf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bad3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bad7:	85 db                	test   ebx,ebx
c001bad9:	0f 88 85 00 00 00    	js     c001bb64 <__moddi3+0xa4>
c001badf:	89 de                	mov    esi,ebx
c001bae1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bae9:	89 d7                	mov    edi,edx
c001baeb:	85 d2                	test   edx,edx
c001baed:	79 09                	jns    c001baf8 <__moddi3+0x38>
c001baef:	f7 d8                	neg    eax
c001baf1:	83 d2 00             	adc    edx,0x0
c001baf4:	f7 da                	neg    edx
c001baf6:	89 d7                	mov    edi,edx
c001baf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bafc:	89 cd                	mov    ebp,ecx
c001bafe:	85 ff                	test   edi,edi
c001bb00:	75 52                	jne    c001bb54 <__moddi3+0x94>
c001bb02:	89 c3                	mov    ebx,eax
c001bb04:	39 f0                	cmp    eax,esi
c001bb06:	76 24                	jbe    c001bb2c <__moddi3+0x6c>
c001bb08:	89 c8                	mov    eax,ecx
c001bb0a:	89 f2                	mov    edx,esi
c001bb0c:	f7 f3                	div    ebx
c001bb0e:	89 d6                	mov    esi,edx
c001bb10:	89 f0                	mov    eax,esi
c001bb12:	31 d2                	xor    edx,edx
c001bb14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb18:	85 c9                	test   ecx,ecx
c001bb1a:	74 07                	je     c001bb23 <__moddi3+0x63>
c001bb1c:	f7 d8                	neg    eax
c001bb1e:	83 d2 00             	adc    edx,0x0
c001bb21:	f7 da                	neg    edx
c001bb23:	83 c4 2c             	add    esp,0x2c
c001bb26:	5b                   	pop    ebx
c001bb27:	5e                   	pop    esi
c001bb28:	5f                   	pop    edi
c001bb29:	5d                   	pop    ebp
c001bb2a:	c3                   	ret    
c001bb2b:	90                   	nop
c001bb2c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb30:	85 db                	test   ebx,ebx
c001bb32:	75 0d                	jne    c001bb41 <__moddi3+0x81>
c001bb34:	b8 01 00 00 00       	mov    eax,0x1
c001bb39:	31 d2                	xor    edx,edx
c001bb3b:	f7 f7                	div    edi
c001bb3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb41:	89 f0                	mov    eax,esi
c001bb43:	31 d2                	xor    edx,edx
c001bb45:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb49:	f7 f7                	div    edi
c001bb4b:	89 e8                	mov    eax,ebp
c001bb4d:	f7 f7                	div    edi
c001bb4f:	89 d6                	mov    esi,edx
c001bb51:	eb bd                	jmp    c001bb10 <__moddi3+0x50>
c001bb53:	90                   	nop
c001bb54:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bb58:	39 f7                	cmp    edi,esi
c001bb5a:	76 20                	jbe    c001bb7c <__moddi3+0xbc>
c001bb5c:	89 c8                	mov    eax,ecx
c001bb5e:	89 f2                	mov    edx,esi
c001bb60:	eb b2                	jmp    c001bb14 <__moddi3+0x54>
c001bb62:	66 90                	xchg   ax,ax
c001bb64:	f7 d9                	neg    ecx
c001bb66:	83 d3 00             	adc    ebx,0x0
c001bb69:	f7 db                	neg    ebx
c001bb6b:	89 de                	mov    esi,ebx
c001bb6d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bb75:	e9 6f ff ff ff       	jmp    c001bae9 <__moddi3+0x29>
c001bb7a:	66 90                	xchg   ax,ax
c001bb7c:	0f bd c7             	bsr    eax,edi
c001bb7f:	83 f0 1f             	xor    eax,0x1f
c001bb82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb86:	75 24                	jne    c001bbac <__moddi3+0xec>
c001bb88:	39 f7                	cmp    edi,esi
c001bb8a:	72 06                	jb     c001bb92 <__moddi3+0xd2>
c001bb8c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bb90:	77 0c                	ja     c001bb9e <__moddi3+0xde>
c001bb92:	89 e9                	mov    ecx,ebp
c001bb94:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bb98:	19 fe                	sbb    esi,edi
c001bb9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bb9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bba2:	89 f2                	mov    edx,esi
c001bba4:	e9 6b ff ff ff       	jmp    c001bb14 <__moddi3+0x54>
c001bba9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbac:	b8 20 00 00 00       	mov    eax,0x20
c001bbb1:	89 c2                	mov    edx,eax
c001bbb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bbb7:	29 da                	sub    edx,ebx
c001bbb9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bbbd:	88 d9                	mov    cl,bl
c001bbbf:	d3 e7                	shl    edi,cl
c001bbc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbc5:	88 d1                	mov    cl,dl
c001bbc7:	d3 e8                	shr    eax,cl
c001bbc9:	09 c7                	or     edi,eax
c001bbcb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bbcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bbd3:	89 d8                	mov    eax,ebx
c001bbd5:	88 d9                	mov    cl,bl
c001bbd7:	d3 e7                	shl    edi,cl
c001bbd9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bbdd:	89 f3                	mov    ebx,esi
c001bbdf:	88 d1                	mov    cl,dl
c001bbe1:	d3 eb                	shr    ebx,cl
c001bbe3:	89 c7                	mov    edi,eax
c001bbe5:	88 c1                	mov    cl,al
c001bbe7:	d3 e6                	shl    esi,cl
c001bbe9:	89 e8                	mov    eax,ebp
c001bbeb:	88 d1                	mov    cl,dl
c001bbed:	d3 e8                	shr    eax,cl
c001bbef:	09 f0                	or     eax,esi
c001bbf1:	89 f9                	mov    ecx,edi
c001bbf3:	d3 e5                	shl    ebp,cl
c001bbf5:	89 da                	mov    edx,ebx
c001bbf7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bbfb:	89 d3                	mov    ebx,edx
c001bbfd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bc01:	89 c6                	mov    esi,eax
c001bc03:	89 d1                	mov    ecx,edx
c001bc05:	39 d3                	cmp    ebx,edx
c001bc07:	72 27                	jb     c001bc30 <__moddi3+0x170>
c001bc09:	74 21                	je     c001bc2c <__moddi3+0x16c>
c001bc0b:	29 f5                	sub    ebp,esi
c001bc0d:	19 cb                	sbb    ebx,ecx
c001bc0f:	89 de                	mov    esi,ebx
c001bc11:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001bc15:	d3 e6                	shl    esi,cl
c001bc17:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bc1b:	89 f9                	mov    ecx,edi
c001bc1d:	d3 ed                	shr    ebp,cl
c001bc1f:	09 ee                	or     esi,ebp
c001bc21:	89 f0                	mov    eax,esi
c001bc23:	d3 eb                	shr    ebx,cl
c001bc25:	89 da                	mov    edx,ebx
c001bc27:	e9 e8 fe ff ff       	jmp    c001bb14 <__moddi3+0x54>
c001bc2c:	39 c5                	cmp    ebp,eax
c001bc2e:	73 db                	jae    c001bc0b <__moddi3+0x14b>
c001bc30:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bc34:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001bc38:	89 d1                	mov    ecx,edx
c001bc3a:	89 c6                	mov    esi,eax
c001bc3c:	eb cd                	jmp    c001bc0b <__moddi3+0x14b>
c001bc3e:	66 90                	xchg   ax,ax

c001bc40 <__udivdi3>:
c001bc40:	55                   	push   ebp
c001bc41:	57                   	push   edi
c001bc42:	56                   	push   esi
c001bc43:	53                   	push   ebx
c001bc44:	83 ec 1c             	sub    esp,0x1c
c001bc47:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bc4b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bc4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bc53:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bc57:	85 d2                	test   edx,edx
c001bc59:	75 41                	jne    c001bc9c <__udivdi3+0x5c>
c001bc5b:	39 f7                	cmp    edi,esi
c001bc5d:	76 15                	jbe    c001bc74 <__udivdi3+0x34>
c001bc5f:	89 e8                	mov    eax,ebp
c001bc61:	89 f2                	mov    edx,esi
c001bc63:	f7 f7                	div    edi
c001bc65:	31 db                	xor    ebx,ebx
c001bc67:	89 da                	mov    edx,ebx
c001bc69:	83 c4 1c             	add    esp,0x1c
c001bc6c:	5b                   	pop    ebx
c001bc6d:	5e                   	pop    esi
c001bc6e:	5f                   	pop    edi
c001bc6f:	5d                   	pop    ebp
c001bc70:	c3                   	ret    
c001bc71:	8d 76 00             	lea    esi,[esi+0x0]
c001bc74:	89 f9                	mov    ecx,edi
c001bc76:	85 ff                	test   edi,edi
c001bc78:	75 0b                	jne    c001bc85 <__udivdi3+0x45>
c001bc7a:	b8 01 00 00 00       	mov    eax,0x1
c001bc7f:	31 d2                	xor    edx,edx
c001bc81:	f7 f7                	div    edi
c001bc83:	89 c1                	mov    ecx,eax
c001bc85:	31 d2                	xor    edx,edx
c001bc87:	89 f0                	mov    eax,esi
c001bc89:	f7 f1                	div    ecx
c001bc8b:	89 c3                	mov    ebx,eax
c001bc8d:	89 e8                	mov    eax,ebp
c001bc8f:	f7 f1                	div    ecx
c001bc91:	89 da                	mov    edx,ebx
c001bc93:	83 c4 1c             	add    esp,0x1c
c001bc96:	5b                   	pop    ebx
c001bc97:	5e                   	pop    esi
c001bc98:	5f                   	pop    edi
c001bc99:	5d                   	pop    ebp
c001bc9a:	c3                   	ret    
c001bc9b:	90                   	nop
c001bc9c:	39 f2                	cmp    edx,esi
c001bc9e:	77 1c                	ja     c001bcbc <__udivdi3+0x7c>
c001bca0:	0f bd da             	bsr    ebx,edx
c001bca3:	83 f3 1f             	xor    ebx,0x1f
c001bca6:	75 24                	jne    c001bccc <__udivdi3+0x8c>
c001bca8:	39 f2                	cmp    edx,esi
c001bcaa:	72 08                	jb     c001bcb4 <__udivdi3+0x74>
c001bcac:	39 ef                	cmp    edi,ebp
c001bcae:	0f 87 84 00 00 00    	ja     c001bd38 <__udivdi3+0xf8>
c001bcb4:	b8 01 00 00 00       	mov    eax,0x1
c001bcb9:	eb ac                	jmp    c001bc67 <__udivdi3+0x27>
c001bcbb:	90                   	nop
c001bcbc:	31 db                	xor    ebx,ebx
c001bcbe:	31 c0                	xor    eax,eax
c001bcc0:	89 da                	mov    edx,ebx
c001bcc2:	83 c4 1c             	add    esp,0x1c
c001bcc5:	5b                   	pop    ebx
c001bcc6:	5e                   	pop    esi
c001bcc7:	5f                   	pop    edi
c001bcc8:	5d                   	pop    ebp
c001bcc9:	c3                   	ret    
c001bcca:	66 90                	xchg   ax,ax
c001bccc:	b8 20 00 00 00       	mov    eax,0x20
c001bcd1:	29 d8                	sub    eax,ebx
c001bcd3:	88 d9                	mov    cl,bl
c001bcd5:	d3 e2                	shl    edx,cl
c001bcd7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bcdb:	89 fa                	mov    edx,edi
c001bcdd:	88 c1                	mov    cl,al
c001bcdf:	d3 ea                	shr    edx,cl
c001bce1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bce5:	09 d1                	or     ecx,edx
c001bce7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bceb:	88 d9                	mov    cl,bl
c001bced:	d3 e7                	shl    edi,cl
c001bcef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bcf3:	89 f7                	mov    edi,esi
c001bcf5:	88 c1                	mov    cl,al
c001bcf7:	d3 ef                	shr    edi,cl
c001bcf9:	88 d9                	mov    cl,bl
c001bcfb:	d3 e6                	shl    esi,cl
c001bcfd:	89 ea                	mov    edx,ebp
c001bcff:	88 c1                	mov    cl,al
c001bd01:	d3 ea                	shr    edx,cl
c001bd03:	09 d6                	or     esi,edx
c001bd05:	89 f0                	mov    eax,esi
c001bd07:	89 fa                	mov    edx,edi
c001bd09:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bd0d:	89 d7                	mov    edi,edx
c001bd0f:	89 c6                	mov    esi,eax
c001bd11:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bd15:	39 d7                	cmp    edi,edx
c001bd17:	72 13                	jb     c001bd2c <__udivdi3+0xec>
c001bd19:	74 09                	je     c001bd24 <__udivdi3+0xe4>
c001bd1b:	89 f0                	mov    eax,esi
c001bd1d:	31 db                	xor    ebx,ebx
c001bd1f:	e9 43 ff ff ff       	jmp    c001bc67 <__udivdi3+0x27>
c001bd24:	88 d9                	mov    cl,bl
c001bd26:	d3 e5                	shl    ebp,cl
c001bd28:	39 c5                	cmp    ebp,eax
c001bd2a:	73 ef                	jae    c001bd1b <__udivdi3+0xdb>
c001bd2c:	8d 46 ff             	lea    eax,[esi-0x1]
c001bd2f:	31 db                	xor    ebx,ebx
c001bd31:	e9 31 ff ff ff       	jmp    c001bc67 <__udivdi3+0x27>
c001bd36:	66 90                	xchg   ax,ax
c001bd38:	31 c0                	xor    eax,eax
c001bd3a:	e9 28 ff ff ff       	jmp    c001bc67 <__udivdi3+0x27>
c001bd3f:	90                   	nop

c001bd40 <__umoddi3>:
c001bd40:	55                   	push   ebp
c001bd41:	57                   	push   edi
c001bd42:	56                   	push   esi
c001bd43:	53                   	push   ebx
c001bd44:	83 ec 1c             	sub    esp,0x1c
c001bd47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bd53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd57:	89 da                	mov    edx,ebx
c001bd59:	85 c0                	test   eax,eax
c001bd5b:	75 37                	jne    c001bd94 <__umoddi3+0x54>
c001bd5d:	39 df                	cmp    edi,ebx
c001bd5f:	76 13                	jbe    c001bd74 <__umoddi3+0x34>
c001bd61:	89 f0                	mov    eax,esi
c001bd63:	f7 f7                	div    edi
c001bd65:	89 d0                	mov    eax,edx
c001bd67:	31 d2                	xor    edx,edx
c001bd69:	83 c4 1c             	add    esp,0x1c
c001bd6c:	5b                   	pop    ebx
c001bd6d:	5e                   	pop    esi
c001bd6e:	5f                   	pop    edi
c001bd6f:	5d                   	pop    ebp
c001bd70:	c3                   	ret    
c001bd71:	8d 76 00             	lea    esi,[esi+0x0]
c001bd74:	89 fd                	mov    ebp,edi
c001bd76:	85 ff                	test   edi,edi
c001bd78:	75 0b                	jne    c001bd85 <__umoddi3+0x45>
c001bd7a:	b8 01 00 00 00       	mov    eax,0x1
c001bd7f:	31 d2                	xor    edx,edx
c001bd81:	f7 f7                	div    edi
c001bd83:	89 c5                	mov    ebp,eax
c001bd85:	89 d8                	mov    eax,ebx
c001bd87:	31 d2                	xor    edx,edx
c001bd89:	f7 f5                	div    ebp
c001bd8b:	89 f0                	mov    eax,esi
c001bd8d:	f7 f5                	div    ebp
c001bd8f:	89 d0                	mov    eax,edx
c001bd91:	eb d4                	jmp    c001bd67 <__umoddi3+0x27>
c001bd93:	90                   	nop
c001bd94:	89 f1                	mov    ecx,esi
c001bd96:	39 d8                	cmp    eax,ebx
c001bd98:	76 0a                	jbe    c001bda4 <__umoddi3+0x64>
c001bd9a:	89 f0                	mov    eax,esi
c001bd9c:	83 c4 1c             	add    esp,0x1c
c001bd9f:	5b                   	pop    ebx
c001bda0:	5e                   	pop    esi
c001bda1:	5f                   	pop    edi
c001bda2:	5d                   	pop    ebp
c001bda3:	c3                   	ret    
c001bda4:	0f bd e8             	bsr    ebp,eax
c001bda7:	83 f5 1f             	xor    ebp,0x1f
c001bdaa:	75 1c                	jne    c001bdc8 <__umoddi3+0x88>
c001bdac:	39 d8                	cmp    eax,ebx
c001bdae:	72 04                	jb     c001bdb4 <__umoddi3+0x74>
c001bdb0:	39 f7                	cmp    edi,esi
c001bdb2:	77 08                	ja     c001bdbc <__umoddi3+0x7c>
c001bdb4:	89 da                	mov    edx,ebx
c001bdb6:	29 fe                	sub    esi,edi
c001bdb8:	19 c2                	sbb    edx,eax
c001bdba:	89 f1                	mov    ecx,esi
c001bdbc:	89 c8                	mov    eax,ecx
c001bdbe:	83 c4 1c             	add    esp,0x1c
c001bdc1:	5b                   	pop    ebx
c001bdc2:	5e                   	pop    esi
c001bdc3:	5f                   	pop    edi
c001bdc4:	5d                   	pop    ebp
c001bdc5:	c3                   	ret    
c001bdc6:	66 90                	xchg   ax,ax
c001bdc8:	ba 20 00 00 00       	mov    edx,0x20
c001bdcd:	29 ea                	sub    edx,ebp
c001bdcf:	89 e9                	mov    ecx,ebp
c001bdd1:	d3 e0                	shl    eax,cl
c001bdd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bdd7:	89 f8                	mov    eax,edi
c001bdd9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bddd:	88 d1                	mov    cl,dl
c001bddf:	d3 e8                	shr    eax,cl
c001bde1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bde5:	09 c1                	or     ecx,eax
c001bde7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bdeb:	89 e9                	mov    ecx,ebp
c001bded:	d3 e7                	shl    edi,cl
c001bdef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bdf3:	89 d8                	mov    eax,ebx
c001bdf5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdf9:	88 d1                	mov    cl,dl
c001bdfb:	d3 e8                	shr    eax,cl
c001bdfd:	89 c7                	mov    edi,eax
c001bdff:	89 e9                	mov    ecx,ebp
c001be01:	d3 e3                	shl    ebx,cl
c001be03:	89 f0                	mov    eax,esi
c001be05:	88 d1                	mov    cl,dl
c001be07:	d3 e8                	shr    eax,cl
c001be09:	09 d8                	or     eax,ebx
c001be0b:	89 e9                	mov    ecx,ebp
c001be0d:	d3 e6                	shl    esi,cl
c001be0f:	89 f3                	mov    ebx,esi
c001be11:	89 fa                	mov    edx,edi
c001be13:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001be17:	89 d1                	mov    ecx,edx
c001be19:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001be1d:	89 c6                	mov    esi,eax
c001be1f:	89 d7                	mov    edi,edx
c001be21:	39 d1                	cmp    ecx,edx
c001be23:	72 27                	jb     c001be4c <__umoddi3+0x10c>
c001be25:	74 21                	je     c001be48 <__umoddi3+0x108>
c001be27:	89 ca                	mov    edx,ecx
c001be29:	29 f3                	sub    ebx,esi
c001be2b:	19 fa                	sbb    edx,edi
c001be2d:	89 d0                	mov    eax,edx
c001be2f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001be33:	d3 e0                	shl    eax,cl
c001be35:	89 e9                	mov    ecx,ebp
c001be37:	d3 eb                	shr    ebx,cl
c001be39:	09 d8                	or     eax,ebx
c001be3b:	d3 ea                	shr    edx,cl
c001be3d:	83 c4 1c             	add    esp,0x1c
c001be40:	5b                   	pop    ebx
c001be41:	5e                   	pop    esi
c001be42:	5f                   	pop    edi
c001be43:	5d                   	pop    ebp
c001be44:	c3                   	ret    
c001be45:	8d 76 00             	lea    esi,[esi+0x0]
c001be48:	39 c3                	cmp    ebx,eax
c001be4a:	73 db                	jae    c001be27 <__umoddi3+0xe7>
c001be4c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001be50:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001be54:	89 d7                	mov    edi,edx
c001be56:	89 c6                	mov    esi,eax
c001be58:	eb cd                	jmp    c001be27 <__umoddi3+0xe7>

Disassembly of section .init:

c001be5a <_init>:
c001be5a:	55                   	push   ebp
c001be5b:	89 e5                	mov    ebp,esp
c001be5d:	e8 92 42 fe ff       	call   c00000f4 <frame_dummy>
c001be62:	e8 e5 fa ff ff       	call   c001b94c <__do_global_ctors_aux>
c001be67:	5d                   	pop    ebp
c001be68:	c3                   	ret    

Disassembly of section .fini:

c001be69 <_fini>:
c001be69:	55                   	push   ebp
c001be6a:	89 e5                	mov    ebp,esp
c001be6c:	e8 13 42 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001be71:	5d                   	pop    ebp
c001be72:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001be74 <Computer::~Computer()>:
c001be74:	83 ec 0c             	sub    esp,0xc
c001be77:	ba 38 d1 01 c0       	mov    edx,0xc001d138
c001be7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be80:	89 10                	mov    DWORD PTR [eax],edx
c001be82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be86:	83 ec 0c             	sub    esp,0xc
c001be89:	50                   	push   eax
c001be8a:	e8 07 f9 fe ff       	call   c000b796 <Device::~Device()>
c001be8f:	83 c4 10             	add    esp,0x10
c001be92:	90                   	nop
c001be93:	83 c4 0c             	add    esp,0xc
c001be96:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001be98 <Computer::~Computer()>:
c001be98:	83 ec 0c             	sub    esp,0xc
c001be9b:	83 ec 0c             	sub    esp,0xc
c001be9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bea2:	e8 cd ff ff ff       	call   c001be74 <Computer::~Computer()>
c001bea7:	83 c4 10             	add    esp,0x10
c001beaa:	83 ec 08             	sub    esp,0x8
c001bead:	68 70 01 00 00       	push   0x170
c001beb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001beb6:	e8 a3 e4 fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001bebb:	83 c4 10             	add    esp,0x10
c001bebe:	83 c4 0c             	add    esp,0xc
c001bec1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001bec2 <idleCommon()>:
c001bec2:	83 ec 0c             	sub    esp,0xc
c001bec5:	fa                   	cli    
c001bec6:	ff 05 48 37 02 c0    	inc    DWORD PTR ds:0xc0023748
c001becc:	e8 77 74 ff ff       	call   c0013348 <schedule()>
c001bed1:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001bed6:	48                   	dec    eax
c001bed7:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c001bedc:	75 01                	jne    c001bedf <idleCommon()+0x1d>
c001bede:	fb                   	sti    
c001bedf:	83 c4 0c             	add    esp,0xc
c001bee2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001bee4 <LinkedList<UnixFile>::~LinkedList()>:
c001bee4:	90                   	nop
c001bee5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001bee6 <LinkedList<UnixFile>::LinkedList()>:
c001bee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bef4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001befb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf26:	90                   	nop
c001bf27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001bf28 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001bf28:	83 ec 0c             	sub    esp,0xc
c001bf2b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bf30:	75 10                	jne    c001bf42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001bf32:	83 ec 0c             	sub    esp,0xc
c001bf35:	68 8c d3 01 c0       	push   0xc001d38c
c001bf3a:	e8 f8 41 ff ff       	call   c0010137 <KePanic(char const*)>
c001bf3f:	83 c4 10             	add    esp,0x10
c001bf42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf46:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf48:	85 c0                	test   eax,eax
c001bf4a:	74 34                	je     c001bf80 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf53:	85 c0                	test   eax,eax
c001bf55:	74 29                	je     c001bf80 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf6d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf7e:	eb 65                	jmp    c001bfe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf84:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf86:	85 c0                	test   eax,eax
c001bf88:	75 4b                	jne    c001bfd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bf8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf91:	85 c0                	test   eax,eax
c001bf93:	75 40                	jne    c001bfd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bf95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf9d:	89 10                	mov    DWORD PTR [eax],edx
c001bf9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfa7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bfaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfbf:	85 c0                	test   eax,eax
c001bfc1:	74 22                	je     c001bfe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bfc3:	83 ec 0c             	sub    esp,0xc
c001bfc6:	68 ae d3 01 c0       	push   0xc001d3ae
c001bfcb:	e8 67 41 ff ff       	call   c0010137 <KePanic(char const*)>
c001bfd0:	83 c4 10             	add    esp,0x10
c001bfd3:	eb 10                	jmp    c001bfe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bfd5:	83 ec 0c             	sub    esp,0xc
c001bfd8:	68 b8 d3 01 c0       	push   0xc001d3b8
c001bfdd:	e8 55 41 ff ff       	call   c0010137 <KePanic(char const*)>
c001bfe2:	83 c4 10             	add    esp,0x10
c001bfe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfe9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfec:	8d 50 01             	lea    edx,[eax+0x1]
c001bfef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bff6:	90                   	nop
c001bff7:	83 c4 0c             	add    esp,0xc
c001bffa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001bffc <LinkedList<UnixFile>::getFirstElement()>:
c001bffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c000:	8b 00                	mov    eax,DWORD PTR [eax]
c001c002:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c004 <LinkedList<UnixFile>::removeFirst()>:
c001c004:	83 ec 0c             	sub    esp,0xc
c001c007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c00b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c00d:	85 c0                	test   eax,eax
c001c00f:	75 12                	jne    c001c023 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c011:	83 ec 0c             	sub    esp,0xc
c001c014:	68 c4 d3 01 c0       	push   0xc001d3c4
c001c019:	e8 19 41 ff ff       	call   c0010137 <KePanic(char const*)>
c001c01e:	83 c4 10             	add    esp,0x10
c001c021:	eb 7e                	jmp    c001c0a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c027:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c02a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c02d:	85 c0                	test   eax,eax
c001c02f:	74 10                	je     c001c041 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c031:	83 ec 0c             	sub    esp,0xc
c001c034:	68 0f d4 01 c0       	push   0xc001d40f
c001c039:	e8 f9 40 ff ff       	call   c0010137 <KePanic(char const*)>
c001c03e:	83 c4 10             	add    esp,0x10
c001c041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c045:	8b 00                	mov    eax,DWORD PTR [eax]
c001c047:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c04a:	85 c0                	test   eax,eax
c001c04c:	75 33                	jne    c001c081 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c052:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c05c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c067:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c06a:	83 f8 01             	cmp    eax,0x1
c001c06d:	74 21                	je     c001c090 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c06f:	83 ec 0c             	sub    esp,0xc
c001c072:	68 e8 d3 01 c0       	push   0xc001d3e8
c001c077:	e8 bb 40 ff ff       	call   c0010137 <KePanic(char const*)>
c001c07c:	83 c4 10             	add    esp,0x10
c001c07f:	eb 0f                	jmp    c001c090 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c085:	8b 00                	mov    eax,DWORD PTR [eax]
c001c087:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c08e:	89 10                	mov    DWORD PTR [eax],edx
c001c090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c094:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c097:	8d 50 ff             	lea    edx,[eax-0x1]
c001c09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c09e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c0a1:	83 c4 0c             	add    esp,0xc
c001c0a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c0a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c0a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c0ae <DriverlessDevice::~DriverlessDevice()>:
c001c0ae:	ba 5c da 01 c0       	mov    edx,0xc001da5c
c001c0b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0b7:	89 10                	mov    DWORD PTR [eax],edx
c001c0b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0bd:	50                   	push   eax
c001c0be:	e8 d3 f6 fe ff       	call   c000b796 <Device::~Device()>
c001c0c3:	83 c4 04             	add    esp,0x4
c001c0c6:	90                   	nop
c001c0c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c0c8 <DriverlessDevice::~DriverlessDevice()>:
c001c0c8:	83 ec 0c             	sub    esp,0xc
c001c0cb:	83 ec 0c             	sub    esp,0xc
c001c0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0d2:	e8 d7 ff ff ff       	call   c001c0ae <DriverlessDevice::~DriverlessDevice()>
c001c0d7:	83 c4 10             	add    esp,0x10
c001c0da:	83 ec 08             	sub    esp,0x8
c001c0dd:	68 58 01 00 00       	push   0x158
c001c0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0e6:	e8 73 e2 fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c0eb:	83 c4 10             	add    esp,0x10
c001c0ee:	83 c4 0c             	add    esp,0xc
c001c0f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c0f2 <LinkedList<Device>::addElement(Device*)>:
c001c0f2:	83 ec 0c             	sub    esp,0xc
c001c0f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c0fa:	75 10                	jne    c001c10c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c0fc:	83 ec 0c             	sub    esp,0xc
c001c0ff:	68 8c d3 01 c0       	push   0xc001d38c
c001c104:	e8 2e 40 ff ff       	call   c0010137 <KePanic(char const*)>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c110:	8b 00                	mov    eax,DWORD PTR [eax]
c001c112:	85 c0                	test   eax,eax
c001c114:	74 3a                	je     c001c150 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c11a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c11d:	85 c0                	test   eax,eax
c001c11f:	74 2f                	je     c001c150 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c125:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c128:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c12c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c136:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c13a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c141:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c144:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c14e:	eb 68                	jmp    c001c1b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c154:	8b 00                	mov    eax,DWORD PTR [eax]
c001c156:	85 c0                	test   eax,eax
c001c158:	75 4e                	jne    c001c1a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c161:	85 c0                	test   eax,eax
c001c163:	75 43                	jne    c001c1a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c169:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c16d:	89 10                	mov    DWORD PTR [eax],edx
c001c16f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c173:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c177:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c17a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c17e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c181:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c192:	85 c0                	test   eax,eax
c001c194:	74 22                	je     c001c1b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c196:	83 ec 0c             	sub    esp,0xc
c001c199:	68 ae d3 01 c0       	push   0xc001d3ae
c001c19e:	e8 94 3f ff ff       	call   c0010137 <KePanic(char const*)>
c001c1a3:	83 c4 10             	add    esp,0x10
c001c1a6:	eb 10                	jmp    c001c1b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1a8:	83 ec 0c             	sub    esp,0xc
c001c1ab:	68 b8 d3 01 c0       	push   0xc001d3b8
c001c1b0:	e8 82 3f ff ff       	call   c0010137 <KePanic(char const*)>
c001c1b5:	83 c4 10             	add    esp,0x10
c001c1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c1bf:	8d 50 01             	lea    edx,[eax+0x1]
c001c1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c1c9:	90                   	nop
c001c1ca:	83 c4 0c             	add    esp,0xc
c001c1cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c1ce <LinkedList<Device>::LinkedList()>:
c001c1ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c1d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c1ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c203:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c207:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c20e:	90                   	nop
c001c20f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c210 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c214:	8b 00                	mov    eax,DWORD PTR [eax]
c001c216:	85 c0                	test   eax,eax
c001c218:	75 0e                	jne    c001c228 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c21a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c21e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c221:	85 c0                	test   eax,eax
c001c223:	75 03                	jne    c001c228 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c225:	b0 01                	mov    al,0x1
c001c227:	c3                   	ret    
c001c228:	b0 00                	mov    al,0x0
c001c22a:	90                   	nop
c001c22b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c22c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c230:	8b 00                	mov    eax,DWORD PTR [eax]
c001c232:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c234 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c234:	83 ec 0c             	sub    esp,0xc
c001c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c23d:	85 c0                	test   eax,eax
c001c23f:	75 17                	jne    c001c258 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c241:	83 ec 0c             	sub    esp,0xc
c001c244:	68 c4 d3 01 c0       	push   0xc001d3c4
c001c249:	e8 e9 3e ff ff       	call   c0010137 <KePanic(char const*)>
c001c24e:	83 c4 10             	add    esp,0x10
c001c251:	e9 92 00 00 00       	jmp    c001c2e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c256:	66 90                	xchg   ax,ax
c001c258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c25c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c25f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c262:	85 c0                	test   eax,eax
c001c264:	0f 95 c0             	setne  al
c001c267:	84 c0                	test   al,al
c001c269:	74 11                	je     c001c27c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c26b:	83 ec 0c             	sub    esp,0xc
c001c26e:	68 0f d4 01 c0       	push   0xc001d40f
c001c273:	e8 bf 3e ff ff       	call   c0010137 <KePanic(char const*)>
c001c278:	83 c4 10             	add    esp,0x10
c001c27b:	90                   	nop
c001c27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c280:	8b 00                	mov    eax,DWORD PTR [eax]
c001c282:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c285:	85 c0                	test   eax,eax
c001c287:	0f 94 c0             	sete   al
c001c28a:	84 c0                	test   al,al
c001c28c:	74 36                	je     c001c2c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c292:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c29c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2aa:	83 f8 01             	cmp    eax,0x1
c001c2ad:	74 25                	je     c001c2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c2af:	83 ec 0c             	sub    esp,0xc
c001c2b2:	68 e8 d3 01 c0       	push   0xc001d3e8
c001c2b7:	e8 7b 3e ff ff       	call   c0010137 <KePanic(char const*)>
c001c2bc:	83 c4 10             	add    esp,0x10
c001c2bf:	eb 13                	jmp    c001c2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c2c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c2cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d1:	89 10                	mov    DWORD PTR [eax],edx
c001c2d3:	90                   	nop
c001c2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2db:	8d 50 ff             	lea    edx,[eax-0x1]
c001c2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c2e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2e8:	83 c4 0c             	add    esp,0xc
c001c2eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c2ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c2ec:	83 ec 0c             	sub    esp,0xc
c001c2ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c2f4:	75 12                	jne    c001c308 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c2f6:	83 ec 0c             	sub    esp,0xc
c001c2f9:	68 8c d3 01 c0       	push   0xc001d38c
c001c2fe:	e8 34 3e ff ff       	call   c0010137 <KePanic(char const*)>
c001c303:	83 c4 10             	add    esp,0x10
c001c306:	66 90                	xchg   ax,ax
c001c308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c30c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c30e:	85 c0                	test   eax,eax
c001c310:	74 36                	je     c001c348 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c319:	85 c0                	test   eax,eax
c001c31b:	74 2b                	je     c001c348 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c31d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c321:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c328:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c32f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c333:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c33d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c344:	eb 6a                	jmp    c001c3b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c346:	66 90                	xchg   ax,ax
c001c348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c34c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c34e:	85 c0                	test   eax,eax
c001c350:	75 4e                	jne    c001c3a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c356:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c359:	85 c0                	test   eax,eax
c001c35b:	75 43                	jne    c001c3a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c35d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c361:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c365:	89 10                	mov    DWORD PTR [eax],edx
c001c367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c36b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c36f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c376:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c379:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c384:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c387:	85 c0                	test   eax,eax
c001c389:	74 25                	je     c001c3b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c38b:	83 ec 0c             	sub    esp,0xc
c001c38e:	68 ae d3 01 c0       	push   0xc001d3ae
c001c393:	e8 9f 3d ff ff       	call   c0010137 <KePanic(char const*)>
c001c398:	83 c4 10             	add    esp,0x10
c001c39b:	eb 13                	jmp    c001c3b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c39d:	8d 76 00             	lea    esi,[esi+0x0]
c001c3a0:	83 ec 0c             	sub    esp,0xc
c001c3a3:	68 b8 d3 01 c0       	push   0xc001d3b8
c001c3a8:	e8 8a 3d ff ff       	call   c0010137 <KePanic(char const*)>
c001c3ad:	83 c4 10             	add    esp,0x10
c001c3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3b7:	8d 50 01             	lea    edx,[eax+0x1]
c001c3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c3c1:	90                   	nop
c001c3c2:	83 c4 0c             	add    esp,0xc
c001c3c5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c3c8 <ACPI::~ACPI()>:
c001c3c8:	83 ec 0c             	sub    esp,0xc
c001c3cb:	ba c4 df 01 c0       	mov    edx,0xc001dfc4
c001c3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d4:	89 10                	mov    DWORD PTR [eax],edx
c001c3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3da:	83 ec 0c             	sub    esp,0xc
c001c3dd:	50                   	push   eax
c001c3de:	e8 b3 f3 fe ff       	call   c000b796 <Device::~Device()>
c001c3e3:	83 c4 10             	add    esp,0x10
c001c3e6:	90                   	nop
c001c3e7:	83 c4 0c             	add    esp,0xc
c001c3ea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c3ec <ACPI::~ACPI()>:
c001c3ec:	83 ec 0c             	sub    esp,0xc
c001c3ef:	83 ec 0c             	sub    esp,0xc
c001c3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3f6:	e8 cd ff ff ff       	call   c001c3c8 <ACPI::~ACPI()>
c001c3fb:	83 c4 10             	add    esp,0x10
c001c3fe:	83 ec 08             	sub    esp,0x8
c001c401:	68 64 12 00 00       	push   0x1264
c001c406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c40a:	e8 4f df fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c40f:	83 c4 10             	add    esp,0x10
c001c412:	83 c4 0c             	add    esp,0xc
c001c415:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c418 <LinkedList<Device>::~LinkedList()>:
c001c418:	90                   	nop
c001c419:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c41c <LinkedList<Device>::isEmpty()>:
c001c41c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c420:	8b 00                	mov    eax,DWORD PTR [eax]
c001c422:	85 c0                	test   eax,eax
c001c424:	75 0e                	jne    c001c434 <LinkedList<Device>::isEmpty()+0x18>
c001c426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c42a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c42d:	85 c0                	test   eax,eax
c001c42f:	75 03                	jne    c001c434 <LinkedList<Device>::isEmpty()+0x18>
c001c431:	b0 01                	mov    al,0x1
c001c433:	c3                   	ret    
c001c434:	b0 00                	mov    al,0x0
c001c436:	90                   	nop
c001c437:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c438 <LinkedList<Device>::getFirstElement()>:
c001c438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c43c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c43e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c440 <LinkedList<Device>::removeFirst()>:
c001c440:	83 ec 0c             	sub    esp,0xc
c001c443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c447:	8b 00                	mov    eax,DWORD PTR [eax]
c001c449:	85 c0                	test   eax,eax
c001c44b:	75 17                	jne    c001c464 <LinkedList<Device>::removeFirst()+0x24>
c001c44d:	83 ec 0c             	sub    esp,0xc
c001c450:	68 c4 d3 01 c0       	push   0xc001d3c4
c001c455:	e8 dd 3c ff ff       	call   c0010137 <KePanic(char const*)>
c001c45a:	83 c4 10             	add    esp,0x10
c001c45d:	e9 92 00 00 00       	jmp    c001c4f4 <LinkedList<Device>::removeFirst()+0xb4>
c001c462:	66 90                	xchg   ax,ax
c001c464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c468:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c46b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c471:	85 c0                	test   eax,eax
c001c473:	74 13                	je     c001c488 <LinkedList<Device>::removeFirst()+0x48>
c001c475:	83 ec 0c             	sub    esp,0xc
c001c478:	68 0f d4 01 c0       	push   0xc001d40f
c001c47d:	e8 b5 3c ff ff       	call   c0010137 <KePanic(char const*)>
c001c482:	83 c4 10             	add    esp,0x10
c001c485:	8d 76 00             	lea    esi,[esi+0x0]
c001c488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c48e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c494:	85 c0                	test   eax,eax
c001c496:	75 34                	jne    c001c4cc <LinkedList<Device>::removeFirst()+0x8c>
c001c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4b4:	83 f8 01             	cmp    eax,0x1
c001c4b7:	74 27                	je     c001c4e0 <LinkedList<Device>::removeFirst()+0xa0>
c001c4b9:	83 ec 0c             	sub    esp,0xc
c001c4bc:	68 e8 d3 01 c0       	push   0xc001d3e8
c001c4c1:	e8 71 3c ff ff       	call   c0010137 <KePanic(char const*)>
c001c4c6:	83 c4 10             	add    esp,0x10
c001c4c9:	eb 15                	jmp    c001c4e0 <LinkedList<Device>::removeFirst()+0xa0>
c001c4cb:	90                   	nop
c001c4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4d2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4dc:	89 10                	mov    DWORD PTR [eax],edx
c001c4de:	66 90                	xchg   ax,ax
c001c4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4e7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4f4:	83 c4 0c             	add    esp,0xc
c001c4f7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c4f8 <CPU::~CPU()>:
c001c4f8:	83 ec 0c             	sub    esp,0xc
c001c4fb:	ba 60 e1 01 c0       	mov    edx,0xc001e160
c001c500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c504:	89 10                	mov    DWORD PTR [eax],edx
c001c506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50a:	83 ec 0c             	sub    esp,0xc
c001c50d:	50                   	push   eax
c001c50e:	e8 83 f2 fe ff       	call   c000b796 <Device::~Device()>
c001c513:	83 c4 10             	add    esp,0x10
c001c516:	90                   	nop
c001c517:	83 c4 0c             	add    esp,0xc
c001c51a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c51c <CPU::~CPU()>:
c001c51c:	83 ec 0c             	sub    esp,0xc
c001c51f:	83 ec 0c             	sub    esp,0xc
c001c522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c526:	e8 cd ff ff ff       	call   c001c4f8 <CPU::~CPU()>
c001c52b:	83 c4 10             	add    esp,0x10
c001c52e:	83 ec 08             	sub    esp,0x8
c001c531:	68 94 11 00 00       	push   0x1194
c001c536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c53a:	e8 1f de fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c53f:	83 c4 10             	add    esp,0x10
c001c542:	83 c4 0c             	add    esp,0xc
c001c545:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c548 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c548:	90                   	nop
c001c549:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c54c <ThreadControlBlock::ThreadControlBlock()>:
c001c54c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c550:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c557:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c55b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c566:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c56d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c571:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c587:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c58b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c58f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c593:	90                   	nop
c001c594:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c598 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c59c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5d8:	90                   	nop
c001c5d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c5dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c5dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c5e3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c5e4 <PCI::~PCI()>:
c001c5e4:	83 ec 0c             	sub    esp,0xc
c001c5e7:	ba b8 ec 01 c0       	mov    edx,0xc001ecb8
c001c5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f0:	89 10                	mov    DWORD PTR [eax],edx
c001c5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f6:	83 ec 0c             	sub    esp,0xc
c001c5f9:	50                   	push   eax
c001c5fa:	e8 21 ec fe ff       	call   c000b220 <Bus::~Bus()>
c001c5ff:	83 c4 10             	add    esp,0x10
c001c602:	90                   	nop
c001c603:	83 c4 0c             	add    esp,0xc
c001c606:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c608 <PCI::~PCI()>:
c001c608:	83 ec 0c             	sub    esp,0xc
c001c60b:	83 ec 0c             	sub    esp,0xc
c001c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c612:	e8 cd ff ff ff       	call   c001c5e4 <PCI::~PCI()>
c001c617:	83 c4 10             	add    esp,0x10
c001c61a:	83 ec 08             	sub    esp,0x8
c001c61d:	68 5c 01 00 00       	push   0x15c
c001c622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c626:	e8 33 dd fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c62b:	83 c4 10             	add    esp,0x10
c001c62e:	83 c4 0c             	add    esp,0xc
c001c631:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c632 <IDE::~IDE()>:
c001c632:	83 ec 0c             	sub    esp,0xc
c001c635:	ba 6c ed 01 c0       	mov    edx,0xc001ed6c
c001c63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63e:	89 10                	mov    DWORD PTR [eax],edx
c001c640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c644:	83 ec 0c             	sub    esp,0xc
c001c647:	50                   	push   eax
c001c648:	e8 c3 f5 fe ff       	call   c000bc10 <HardDiskController::~HardDiskController()>
c001c64d:	83 c4 10             	add    esp,0x10
c001c650:	90                   	nop
c001c651:	83 c4 0c             	add    esp,0xc
c001c654:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c656 <IDE::~IDE()>:
c001c656:	83 ec 0c             	sub    esp,0xc
c001c659:	83 ec 0c             	sub    esp,0xc
c001c65c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c660:	e8 cd ff ff ff       	call   c001c632 <IDE::~IDE()>
c001c665:	83 c4 10             	add    esp,0x10
c001c668:	83 ec 08             	sub    esp,0x8
c001c66b:	68 70 02 00 00       	push   0x270
c001c670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c674:	e8 e5 dc fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c679:	83 c4 10             	add    esp,0x10
c001c67c:	83 c4 0c             	add    esp,0xc
c001c67f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c680 <SATABus::~SATABus()>:
c001c680:	83 ec 0c             	sub    esp,0xc
c001c683:	ba bc ed 01 c0       	mov    edx,0xc001edbc
c001c688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68c:	89 10                	mov    DWORD PTR [eax],edx
c001c68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c692:	83 ec 0c             	sub    esp,0xc
c001c695:	50                   	push   eax
c001c696:	e8 75 f5 fe ff       	call   c000bc10 <HardDiskController::~HardDiskController()>
c001c69b:	83 c4 10             	add    esp,0x10
c001c69e:	90                   	nop
c001c69f:	83 c4 0c             	add    esp,0xc
c001c6a2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c6a4 <SATABus::~SATABus()>:
c001c6a4:	83 ec 0c             	sub    esp,0xc
c001c6a7:	83 ec 0c             	sub    esp,0xc
c001c6aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6ae:	e8 cd ff ff ff       	call   c001c680 <SATABus::~SATABus()>
c001c6b3:	83 c4 10             	add    esp,0x10
c001c6b6:	83 ec 08             	sub    esp,0x8
c001c6b9:	68 64 01 00 00       	push   0x164
c001c6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6c2:	e8 97 dc fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c6c7:	83 c4 10             	add    esp,0x10
c001c6ca:	83 c4 0c             	add    esp,0xc
c001c6cd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c6ce <ATA::~ATA()>:
c001c6ce:	83 ec 0c             	sub    esp,0xc
c001c6d1:	ba fc ed 01 c0       	mov    edx,0xc001edfc
c001c6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6da:	89 10                	mov    DWORD PTR [eax],edx
c001c6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e0:	83 ec 0c             	sub    esp,0xc
c001c6e3:	50                   	push   eax
c001c6e4:	e8 09 f6 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c6e9:	83 c4 10             	add    esp,0x10
c001c6ec:	90                   	nop
c001c6ed:	83 c4 0c             	add    esp,0xc
c001c6f0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c6f2 <ATA::~ATA()>:
c001c6f2:	83 ec 0c             	sub    esp,0xc
c001c6f5:	83 ec 0c             	sub    esp,0xc
c001c6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6fc:	e8 cd ff ff ff       	call   c001c6ce <ATA::~ATA()>
c001c701:	83 c4 10             	add    esp,0x10
c001c704:	83 ec 08             	sub    esp,0x8
c001c707:	68 7c 01 00 00       	push   0x17c
c001c70c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c710:	e8 49 dc fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c715:	83 c4 10             	add    esp,0x10
c001c718:	83 c4 0c             	add    esp,0xc
c001c71b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c71c <ATAPI::~ATAPI()>:
c001c71c:	83 ec 0c             	sub    esp,0xc
c001c71f:	ba 44 ee 01 c0       	mov    edx,0xc001ee44
c001c724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c728:	89 10                	mov    DWORD PTR [eax],edx
c001c72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72e:	83 ec 0c             	sub    esp,0xc
c001c731:	50                   	push   eax
c001c732:	e8 bb f5 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c737:	83 c4 10             	add    esp,0x10
c001c73a:	90                   	nop
c001c73b:	83 c4 0c             	add    esp,0xc
c001c73e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c740 <ATAPI::~ATAPI()>:
c001c740:	83 ec 0c             	sub    esp,0xc
c001c743:	83 ec 0c             	sub    esp,0xc
c001c746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c74a:	e8 cd ff ff ff       	call   c001c71c <ATAPI::~ATAPI()>
c001c74f:	83 c4 10             	add    esp,0x10
c001c752:	83 ec 08             	sub    esp,0x8
c001c755:	68 84 01 00 00       	push   0x184
c001c75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c75e:	e8 fb db fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c763:	83 c4 10             	add    esp,0x10
c001c766:	83 c4 0c             	add    esp,0xc
c001c769:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c76a <SATA::~SATA()>:
c001c76a:	83 ec 0c             	sub    esp,0xc
c001c76d:	ba f8 ee 01 c0       	mov    edx,0xc001eef8
c001c772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c776:	89 10                	mov    DWORD PTR [eax],edx
c001c778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77c:	83 ec 0c             	sub    esp,0xc
c001c77f:	50                   	push   eax
c001c780:	e8 6d f5 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c785:	83 c4 10             	add    esp,0x10
c001c788:	90                   	nop
c001c789:	83 c4 0c             	add    esp,0xc
c001c78c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c78e <SATA::~SATA()>:
c001c78e:	83 ec 0c             	sub    esp,0xc
c001c791:	83 ec 0c             	sub    esp,0xc
c001c794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c798:	e8 cd ff ff ff       	call   c001c76a <SATA::~SATA()>
c001c79d:	83 c4 10             	add    esp,0x10
c001c7a0:	83 ec 08             	sub    esp,0x8
c001c7a3:	68 7c 01 00 00       	push   0x17c
c001c7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ac:	e8 ad db fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c7b1:	83 c4 10             	add    esp,0x10
c001c7b4:	83 c4 0c             	add    esp,0xc
c001c7b7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c7b8 <SATAPI::~SATAPI()>:
c001c7b8:	83 ec 0c             	sub    esp,0xc
c001c7bb:	ba 30 f0 01 c0       	mov    edx,0xc001f030
c001c7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c4:	89 10                	mov    DWORD PTR [eax],edx
c001c7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ca:	83 ec 0c             	sub    esp,0xc
c001c7cd:	50                   	push   eax
c001c7ce:	e8 1f f5 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c7d3:	83 c4 10             	add    esp,0x10
c001c7d6:	90                   	nop
c001c7d7:	83 c4 0c             	add    esp,0xc
c001c7da:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c7dc <SATAPI::~SATAPI()>:
c001c7dc:	83 ec 0c             	sub    esp,0xc
c001c7df:	83 ec 0c             	sub    esp,0xc
c001c7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7e6:	e8 cd ff ff ff       	call   c001c7b8 <SATAPI::~SATAPI()>
c001c7eb:	83 c4 10             	add    esp,0x10
c001c7ee:	83 ec 08             	sub    esp,0x8
c001c7f1:	68 84 01 00 00       	push   0x184
c001c7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7fa:	e8 5f db fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c7ff:	83 c4 10             	add    esp,0x10
c001c802:	83 c4 0c             	add    esp,0xc
c001c805:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c806 <IOAPIC::~IOAPIC()>:
c001c806:	83 ec 0c             	sub    esp,0xc
c001c809:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c001c80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c812:	89 10                	mov    DWORD PTR [eax],edx
c001c814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c818:	83 ec 0c             	sub    esp,0xc
c001c81b:	50                   	push   eax
c001c81c:	e8 75 ef fe ff       	call   c000b796 <Device::~Device()>
c001c821:	83 c4 10             	add    esp,0x10
c001c824:	90                   	nop
c001c825:	83 c4 0c             	add    esp,0xc
c001c828:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c82a <IOAPIC::~IOAPIC()>:
c001c82a:	83 ec 0c             	sub    esp,0xc
c001c82d:	83 ec 0c             	sub    esp,0xc
c001c830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c834:	e8 cd ff ff ff       	call   c001c806 <IOAPIC::~IOAPIC()>
c001c839:	83 c4 10             	add    esp,0x10
c001c83c:	83 ec 08             	sub    esp,0x8
c001c83f:	68 68 01 00 00       	push   0x168
c001c844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c848:	e8 11 db fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c84d:	83 c4 10             	add    esp,0x10
c001c850:	83 c4 0c             	add    esp,0xc
c001c853:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c854 <APICTimer::~APICTimer()>:
c001c854:	83 ec 0c             	sub    esp,0xc
c001c857:	ba b8 f0 01 c0       	mov    edx,0xc001f0b8
c001c85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c860:	89 10                	mov    DWORD PTR [eax],edx
c001c862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c866:	83 ec 0c             	sub    esp,0xc
c001c869:	50                   	push   eax
c001c86a:	e8 a5 08 ff ff       	call   c000d114 <Timer::~Timer()>
c001c86f:	83 c4 10             	add    esp,0x10
c001c872:	90                   	nop
c001c873:	83 c4 0c             	add    esp,0xc
c001c876:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c878 <APICTimer::~APICTimer()>:
c001c878:	83 ec 0c             	sub    esp,0xc
c001c87b:	83 ec 0c             	sub    esp,0xc
c001c87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c882:	e8 cd ff ff ff       	call   c001c854 <APICTimer::~APICTimer()>
c001c887:	83 c4 10             	add    esp,0x10
c001c88a:	83 ec 08             	sub    esp,0x8
c001c88d:	68 60 01 00 00       	push   0x160
c001c892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c896:	e8 c3 da fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c89b:	83 c4 10             	add    esp,0x10
c001c89e:	83 c4 0c             	add    esp,0xc
c001c8a1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c8a4 <PIT::~PIT()>:
c001c8a4:	83 ec 0c             	sub    esp,0xc
c001c8a7:	ba 08 f1 01 c0       	mov    edx,0xc001f108
c001c8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b0:	89 10                	mov    DWORD PTR [eax],edx
c001c8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b6:	83 ec 0c             	sub    esp,0xc
c001c8b9:	50                   	push   eax
c001c8ba:	e8 55 08 ff ff       	call   c000d114 <Timer::~Timer()>
c001c8bf:	83 c4 10             	add    esp,0x10
c001c8c2:	90                   	nop
c001c8c3:	83 c4 0c             	add    esp,0xc
c001c8c6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c8c8 <PIT::~PIT()>:
c001c8c8:	83 ec 0c             	sub    esp,0xc
c001c8cb:	83 ec 0c             	sub    esp,0xc
c001c8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8d2:	e8 cd ff ff ff       	call   c001c8a4 <PIT::~PIT()>
c001c8d7:	83 c4 10             	add    esp,0x10
c001c8da:	83 ec 08             	sub    esp,0x8
c001c8dd:	68 5c 01 00 00       	push   0x15c
c001c8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8e6:	e8 73 da fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c8eb:	83 c4 10             	add    esp,0x10
c001c8ee:	83 c4 0c             	add    esp,0xc
c001c8f1:	c3                   	ret    
